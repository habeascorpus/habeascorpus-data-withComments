package	TokenNamepackage	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
lucene	TokenNameIdentifier	 lucene
.	TokenNameDOT	
document	TokenNameIdentifier	 document
;	TokenNameSEMICOLON	
/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements. See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */	TokenNameCOMMENT_JAVADOC	 Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at * http://www.apache.org/licenses/LICENSE-2.0 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
lucene	TokenNameIdentifier	 lucene
.	TokenNameDOT	
search	TokenNameIdentifier	 search
.	TokenNameDOT	
NumericRangeQuery	TokenNameIdentifier	 Numeric Range Query
;	TokenNameSEMICOLON	
// for javadocs 	TokenNameCOMMENT_LINE	for javadocs 
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
lucene	TokenNameIdentifier	 lucene
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
NumericUtils	TokenNameIdentifier	 Numeric Utils
;	TokenNameSEMICOLON	
// for javadocs 	TokenNameCOMMENT_LINE	for javadocs 
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
text	TokenNameIdentifier	 text
.	TokenNameDOT	
ParseException	TokenNameIdentifier	 Parse Exception
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
text	TokenNameIdentifier	 text
.	TokenNameDOT	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
Calendar	TokenNameIdentifier	 Calendar
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
Date	TokenNameIdentifier	 Date
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
Locale	TokenNameIdentifier	 Locale
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
TimeZone	TokenNameIdentifier	 Time Zone
;	TokenNameSEMICOLON	
/** * Provides support for converting dates to strings and vice-versa. * The strings are structured so that lexicographic sorting orders * them by date, which makes them suitable for use as field values * and search terms. * * <P>This class also helps you to limit the resolution of your dates. Do not * save dates with a finer resolution than you really need, as then * RangeQuery and PrefixQuery will require more memory and become slower. * * <P>Compared to {@link DateField} the strings generated by the methods * in this class take slightly more space, unless your selected resolution * is set to <code>Resolution.DAY</code> or lower. * * <P> * Another approach is {@link NumericUtils}, which provides * a sortable binary representation (prefix encoded) of numeric values, which * date/time are. * For indexing a {@link Date} or {@link Calendar}, just get the unix timestamp as * <code>long</code> using {@link Date#getTime} or {@link Calendar#getTimeInMillis} and * index this as a numeric value with {@link NumericField} * and use {@link NumericRangeQuery} to query it. */	TokenNameCOMMENT_JAVADOC	 Provides support for converting dates to strings and vice-versa. The strings are structured so that lexicographic sorting orders them by date, which makes them suitable for use as field values and search terms. * <P>This class also helps you to limit the resolution of your dates. Do not save dates with a finer resolution than you really need, as then RangeQuery and PrefixQuery will require more memory and become slower. * <P>Compared to {@link DateField} the strings generated by the methods in this class take slightly more space, unless your selected resolution is set to <code>Resolution.DAY</code> or lower. * <P> Another approach is {@link NumericUtils}, which provides a sortable binary representation (prefix encoded) of numeric values, which date/time are. For indexing a {@link Date} or {@link Calendar}, just get the unix timestamp as <code>long</code> using {@link Date#getTime} or {@link Calendar#getTimeInMillis} and index this as a numeric value with {@link NumericField} and use {@link NumericRangeQuery} to query it. 
public	TokenNamepublic	
class	TokenNameclass	
DateTools	TokenNameIdentifier	 Date Tools
{	TokenNameLBRACE	
final	TokenNamefinal	
static	TokenNamestatic	
TimeZone	TokenNameIdentifier	 Time Zone
GMT	TokenNameIdentifier	 GMT
=	TokenNameEQUAL	
TimeZone	TokenNameIdentifier	 Time Zone
.	TokenNameDOT	
getTimeZone	TokenNameIdentifier	 get Time Zone
(	TokenNameLPAREN	
"GMT"	TokenNameStringLiteral	GMT
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
ThreadLocal	TokenNameIdentifier	 Thread Local
<	TokenNameLESS	
Calendar	TokenNameIdentifier	 Calendar
>	TokenNameGREATER	
TL_CAL	TokenNameIdentifier	 TL  CAL
=	TokenNameEQUAL	
new	TokenNamenew	
ThreadLocal	TokenNameIdentifier	 Thread Local
<	TokenNameLESS	
Calendar	TokenNameIdentifier	 Calendar
>	TokenNameGREATER	
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
@	TokenNameAT	
Override	TokenNameIdentifier	 Override
protected	TokenNameprotected	
Calendar	TokenNameIdentifier	 Calendar
initialValue	TokenNameIdentifier	 initial Value
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
Calendar	TokenNameIdentifier	 Calendar
.	TokenNameDOT	
getInstance	TokenNameIdentifier	 get Instance
(	TokenNameLPAREN	
GMT	TokenNameIdentifier	 GMT
,	TokenNameCOMMA	
Locale	TokenNameIdentifier	 Locale
.	TokenNameDOT	
US	TokenNameIdentifier	 US
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
;	TokenNameSEMICOLON	
//indexed by format length 	TokenNameCOMMENT_LINE	indexed by format length 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
ThreadLocal	TokenNameIdentifier	 Thread Local
<	TokenNameLESS	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
>	TokenNameGREATER	
TL_FORMATS	TokenNameIdentifier	 TL  FORMATS
=	TokenNameEQUAL	
new	TokenNamenew	
ThreadLocal	TokenNameIdentifier	 Thread Local
<	TokenNameLESS	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
>	TokenNameGREATER	
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
@	TokenNameAT	
Override	TokenNameIdentifier	 Override
protected	TokenNameprotected	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
initialValue	TokenNameIdentifier	 initial Value
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
arr	TokenNameIdentifier	 arr
=	TokenNameEQUAL	
new	TokenNamenew	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
[	TokenNameLBRACKET	
Resolution	TokenNameIdentifier	 Resolution
.	TokenNameDOT	
MILLISECOND	TokenNameIdentifier	 MILLISECOND
.	TokenNameDOT	
formatLen	TokenNameIdentifier	 format Len
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
]	TokenNameRBRACKET	
;	TokenNameSEMICOLON	
for	TokenNamefor	
(	TokenNameLPAREN	
Resolution	TokenNameIdentifier	 Resolution
resolution	TokenNameIdentifier	 resolution
:	TokenNameCOLON	
Resolution	TokenNameIdentifier	 Resolution
.	TokenNameDOT	
values	TokenNameIdentifier	 values
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
arr	TokenNameIdentifier	 arr
[	TokenNameLBRACKET	
resolution	TokenNameIdentifier	 resolution
.	TokenNameDOT	
formatLen	TokenNameIdentifier	 format Len
]	TokenNameRBRACKET	
=	TokenNameEQUAL	
(	TokenNameLPAREN	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
)	TokenNameRPAREN	
resolution	TokenNameIdentifier	 resolution
.	TokenNameDOT	
format	TokenNameIdentifier	 format
.	TokenNameDOT	
clone	TokenNameIdentifier	 clone
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
return	TokenNamereturn	
arr	TokenNameIdentifier	 arr
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
;	TokenNameSEMICOLON	
// cannot create, the class has static methods only 	TokenNameCOMMENT_LINE	cannot create, the class has static methods only 
private	TokenNameprivate	
DateTools	TokenNameIdentifier	 Date Tools
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
}	TokenNameRBRACE	
/** * Converts a Date to a string suitable for indexing. * * @param date the date to be converted * @param resolution the desired resolution, see * {@link #round(Date, DateTools.Resolution)} * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter, * depending on <code>resolution</code>; using GMT as timezone */	TokenNameCOMMENT_JAVADOC	 Converts a Date to a string suitable for indexing. * @param date the date to be converted @param resolution the desired resolution, see {@link #round(Date, DateTools.Resolution)} @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter, depending on <code>resolution</code>; using GMT as timezone 
public	TokenNamepublic	
static	TokenNamestatic	
String	TokenNameIdentifier	 String
dateToString	TokenNameIdentifier	 date To String
(	TokenNameLPAREN	
Date	TokenNameIdentifier	 Date
date	TokenNameIdentifier	 date
,	TokenNameCOMMA	
Resolution	TokenNameIdentifier	 Resolution
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
timeToString	TokenNameIdentifier	 time To String
(	TokenNameLPAREN	
date	TokenNameIdentifier	 date
.	TokenNameDOT	
getTime	TokenNameIdentifier	 get Time
(	TokenNameLPAREN	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Converts a millisecond time to a string suitable for indexing. * * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT * @param resolution the desired resolution, see * {@link #round(long, DateTools.Resolution)} * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter, * depending on <code>resolution</code>; using GMT as timezone */	TokenNameCOMMENT_JAVADOC	 Converts a millisecond time to a string suitable for indexing. * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT @param resolution the desired resolution, see {@link #round(long, DateTools.Resolution)} @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter, depending on <code>resolution</code>; using GMT as timezone 
public	TokenNamepublic	
static	TokenNamestatic	
String	TokenNameIdentifier	 String
timeToString	TokenNameIdentifier	 time To String
(	TokenNameLPAREN	
long	TokenNamelong	
time	TokenNameIdentifier	 time
,	TokenNameCOMMA	
Resolution	TokenNameIdentifier	 Resolution
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
{	TokenNameLBRACE	
final	TokenNamefinal	
Date	TokenNameIdentifier	 Date
date	TokenNameIdentifier	 date
=	TokenNameEQUAL	
new	TokenNamenew	
Date	TokenNameIdentifier	 Date
(	TokenNameLPAREN	
round	TokenNameIdentifier	 round
(	TokenNameLPAREN	
time	TokenNameIdentifier	 time
,	TokenNameCOMMA	
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
return	TokenNamereturn	
TL_FORMATS	TokenNameIdentifier	 TL  FORMATS
.	TokenNameDOT	
get	TokenNameIdentifier	 get
(	TokenNameLPAREN	
)	TokenNameRPAREN	
[	TokenNameLBRACKET	
resolution	TokenNameIdentifier	 resolution
.	TokenNameDOT	
formatLen	TokenNameIdentifier	 format Len
]	TokenNameRBRACKET	
.	TokenNameDOT	
format	TokenNameIdentifier	 format
(	TokenNameLPAREN	
date	TokenNameIdentifier	 date
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Converts a string produced by <code>timeToString</code> or * <code>dateToString</code> back to a time, represented as the * number of milliseconds since January 1, 1970, 00:00:00 GMT. * * @param dateString the date string to be converted * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT * @throws ParseException if <code>dateString</code> is not in the * expected format */	TokenNameCOMMENT_JAVADOC	 Converts a string produced by <code>timeToString</code> or <code>dateToString</code> back to a time, represented as the number of milliseconds since January 1, 1970, 00:00:00 GMT. * @param dateString the date string to be converted @return the number of milliseconds since January 1, 1970, 00:00:00 GMT @throws ParseException if <code>dateString</code> is not in the expected format 
public	TokenNamepublic	
static	TokenNamestatic	
long	TokenNamelong	
stringToTime	TokenNameIdentifier	 string To Time
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
dateString	TokenNameIdentifier	 date String
)	TokenNameRPAREN	
throws	TokenNamethrows	
ParseException	TokenNameIdentifier	 Parse Exception
{	TokenNameLBRACE	
return	TokenNamereturn	
stringToDate	TokenNameIdentifier	 string To Date
(	TokenNameLPAREN	
dateString	TokenNameIdentifier	 date String
)	TokenNameRPAREN	
.	TokenNameDOT	
getTime	TokenNameIdentifier	 get Time
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Converts a string produced by <code>timeToString</code> or * <code>dateToString</code> back to a time, represented as a * Date object. * * @param dateString the date string to be converted * @return the parsed time as a Date object * @throws ParseException if <code>dateString</code> is not in the * expected format */	TokenNameCOMMENT_JAVADOC	 Converts a string produced by <code>timeToString</code> or <code>dateToString</code> back to a time, represented as a Date object. * @param dateString the date string to be converted @return the parsed time as a Date object @throws ParseException if <code>dateString</code> is not in the expected format 
public	TokenNamepublic	
static	TokenNamestatic	
Date	TokenNameIdentifier	 Date
stringToDate	TokenNameIdentifier	 string To Date
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
dateString	TokenNameIdentifier	 date String
)	TokenNameRPAREN	
throws	TokenNamethrows	
ParseException	TokenNameIdentifier	 Parse Exception
{	TokenNameLBRACE	
try	TokenNametry	
{	TokenNameLBRACE	
return	TokenNamereturn	
TL_FORMATS	TokenNameIdentifier	 TL  FORMATS
.	TokenNameDOT	
get	TokenNameIdentifier	 get
(	TokenNameLPAREN	
)	TokenNameRPAREN	
[	TokenNameLBRACKET	
dateString	TokenNameIdentifier	 date String
.	TokenNameDOT	
length	TokenNameIdentifier	 length
(	TokenNameLPAREN	
)	TokenNameRPAREN	
]	TokenNameRBRACKET	
.	TokenNameDOT	
parse	TokenNameIdentifier	 parse
(	TokenNameLPAREN	
dateString	TokenNameIdentifier	 date String
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
catch	TokenNamecatch	
(	TokenNameLPAREN	
Exception	TokenNameIdentifier	 Exception
e	TokenNameIdentifier	 e
)	TokenNameRPAREN	
{	TokenNameLBRACE	
throw	TokenNamethrow	
new	TokenNamenew	
ParseException	TokenNameIdentifier	 Parse Exception
(	TokenNameLPAREN	
"Input is not a valid date string: "	TokenNameStringLiteral	Input is not a valid date string: 
+	TokenNamePLUS	
dateString	TokenNameIdentifier	 date String
,	TokenNameCOMMA	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
/** * Limit a date's resolution. For example, the date <code>2004-09-21 13:50:11</code> * will be changed to <code>2004-09-01 00:00:00</code> when using * <code>Resolution.MONTH</code>. * * @param resolution The desired resolution of the date to be returned * @return the date with all values more precise than <code>resolution</code> * set to 0 or 1 */	TokenNameCOMMENT_JAVADOC	 Limit a date's resolution. For example, the date <code>2004-09-21 13:50:11</code> will be changed to <code>2004-09-01 00:00:00</code> when using <code>Resolution.MONTH</code>. * @param resolution The desired resolution of the date to be returned @return the date with all values more precise than <code>resolution</code> set to 0 or 1 
public	TokenNamepublic	
static	TokenNamestatic	
Date	TokenNameIdentifier	 Date
round	TokenNameIdentifier	 round
(	TokenNameLPAREN	
Date	TokenNameIdentifier	 Date
date	TokenNameIdentifier	 date
,	TokenNameCOMMA	
Resolution	TokenNameIdentifier	 Resolution
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
new	TokenNamenew	
Date	TokenNameIdentifier	 Date
(	TokenNameLPAREN	
round	TokenNameIdentifier	 round
(	TokenNameLPAREN	
date	TokenNameIdentifier	 date
.	TokenNameDOT	
getTime	TokenNameIdentifier	 get Time
(	TokenNameLPAREN	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Limit a date's resolution. For example, the date <code>1095767411000</code> * (which represents 2004-09-21 13:50:11) will be changed to * <code>1093989600000</code> (2004-09-01 00:00:00) when using * <code>Resolution.MONTH</code>. * * @param resolution The desired resolution of the date to be returned * @return the date with all values more precise than <code>resolution</code> * set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT */	TokenNameCOMMENT_JAVADOC	 Limit a date's resolution. For example, the date <code>1095767411000</code> (which represents 2004-09-21 13:50:11) will be changed to <code>1093989600000</code> (2004-09-01 00:00:00) when using <code>Resolution.MONTH</code>. * @param resolution The desired resolution of the date to be returned @return the date with all values more precise than <code>resolution</code> set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT 
@	TokenNameAT	
SuppressWarnings	TokenNameIdentifier	 Suppress Warnings
(	TokenNameLPAREN	
"fallthrough"	TokenNameStringLiteral	fallthrough
)	TokenNameRPAREN	
public	TokenNamepublic	
static	TokenNamestatic	
long	TokenNamelong	
round	TokenNameIdentifier	 round
(	TokenNameLPAREN	
long	TokenNamelong	
time	TokenNameIdentifier	 time
,	TokenNameCOMMA	
Resolution	TokenNameIdentifier	 Resolution
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
{	TokenNameLBRACE	
final	TokenNamefinal	
Calendar	TokenNameIdentifier	 Calendar
calInstance	TokenNameIdentifier	 cal Instance
=	TokenNameEQUAL	
TL_CAL	TokenNameIdentifier	 TL  CAL
.	TokenNameDOT	
get	TokenNameIdentifier	 get
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
calInstance	TokenNameIdentifier	 cal Instance
.	TokenNameDOT	
setTimeInMillis	TokenNameIdentifier	 set Time In Millis
(	TokenNameLPAREN	
time	TokenNameIdentifier	 time
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
switch	TokenNameswitch	
(	TokenNameLPAREN	
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
{	TokenNameLBRACE	
//NOTE: switch statement fall-through is deliberate 	TokenNameCOMMENT_LINE	NOTE: switch statement fall-through is deliberate 
case	TokenNamecase	
YEAR	TokenNameIdentifier	 YEAR
:	TokenNameCOLON	
calInstance	TokenNameIdentifier	 cal Instance
.	TokenNameDOT	
set	TokenNameIdentifier	 set
(	TokenNameLPAREN	
Calendar	TokenNameIdentifier	 Calendar
.	TokenNameDOT	
MONTH	TokenNameIdentifier	 MONTH
,	TokenNameCOMMA	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
case	TokenNamecase	
MONTH	TokenNameIdentifier	 MONTH
:	TokenNameCOLON	
calInstance	TokenNameIdentifier	 cal Instance
.	TokenNameDOT	
set	TokenNameIdentifier	 set
(	TokenNameLPAREN	
Calendar	TokenNameIdentifier	 Calendar
.	TokenNameDOT	
DAY_OF_MONTH	TokenNameIdentifier	 DAY  OF  MONTH
,	TokenNameCOMMA	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
case	TokenNamecase	
DAY	TokenNameIdentifier	 DAY
:	TokenNameCOLON	
calInstance	TokenNameIdentifier	 cal Instance
.	TokenNameDOT	
set	TokenNameIdentifier	 set
(	TokenNameLPAREN	
Calendar	TokenNameIdentifier	 Calendar
.	TokenNameDOT	
HOUR_OF_DAY	TokenNameIdentifier	 HOUR  OF  DAY
,	TokenNameCOMMA	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
case	TokenNamecase	
HOUR	TokenNameIdentifier	 HOUR
:	TokenNameCOLON	
calInstance	TokenNameIdentifier	 cal Instance
.	TokenNameDOT	
set	TokenNameIdentifier	 set
(	TokenNameLPAREN	
Calendar	TokenNameIdentifier	 Calendar
.	TokenNameDOT	
MINUTE	TokenNameIdentifier	 MINUTE
,	TokenNameCOMMA	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
case	TokenNamecase	
MINUTE	TokenNameIdentifier	 MINUTE
:	TokenNameCOLON	
calInstance	TokenNameIdentifier	 cal Instance
.	TokenNameDOT	
set	TokenNameIdentifier	 set
(	TokenNameLPAREN	
Calendar	TokenNameIdentifier	 Calendar
.	TokenNameDOT	
SECOND	TokenNameIdentifier	 SECOND
,	TokenNameCOMMA	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
case	TokenNamecase	
SECOND	TokenNameIdentifier	 SECOND
:	TokenNameCOLON	
calInstance	TokenNameIdentifier	 cal Instance
.	TokenNameDOT	
set	TokenNameIdentifier	 set
(	TokenNameLPAREN	
Calendar	TokenNameIdentifier	 Calendar
.	TokenNameDOT	
MILLISECOND	TokenNameIdentifier	 MILLISECOND
,	TokenNameCOMMA	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
case	TokenNamecase	
MILLISECOND	TokenNameIdentifier	 MILLISECOND
:	TokenNameCOLON	
// don't cut off anything 	TokenNameCOMMENT_LINE	don't cut off anything 
break	TokenNamebreak	
;	TokenNameSEMICOLON	
default	TokenNamedefault	
:	TokenNameCOLON	
throw	TokenNamethrow	
new	TokenNamenew	
IllegalArgumentException	TokenNameIdentifier	 Illegal Argument Exception
(	TokenNameLPAREN	
"unknown resolution "	TokenNameStringLiteral	unknown resolution 
+	TokenNamePLUS	
resolution	TokenNameIdentifier	 resolution
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
return	TokenNamereturn	
calInstance	TokenNameIdentifier	 cal Instance
.	TokenNameDOT	
getTimeInMillis	TokenNameIdentifier	 get Time In Millis
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** Specifies the time granularity. */	TokenNameCOMMENT_JAVADOC	 Specifies the time granularity. 
public	TokenNamepublic	
static	TokenNamestatic	
enum	TokenNameenum	
Resolution	TokenNameIdentifier	 Resolution
{	TokenNameLBRACE	
YEAR	TokenNameIdentifier	 YEAR
(	TokenNameLPAREN	
4	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
MONTH	TokenNameIdentifier	 MONTH
(	TokenNameLPAREN	
6	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
DAY	TokenNameIdentifier	 DAY
(	TokenNameLPAREN	
8	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
HOUR	TokenNameIdentifier	 HOUR
(	TokenNameLPAREN	
10	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
MINUTE	TokenNameIdentifier	 MINUTE
(	TokenNameLPAREN	
12	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
SECOND	TokenNameIdentifier	 SECOND
(	TokenNameLPAREN	
14	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
MILLISECOND	TokenNameIdentifier	 MILLISECOND
(	TokenNameLPAREN	
17	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
final	TokenNamefinal	
int	TokenNameint	
formatLen	TokenNameIdentifier	 format Len
;	TokenNameSEMICOLON	
final	TokenNamefinal	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
format	TokenNameIdentifier	 format
;	TokenNameSEMICOLON	
//should be cloned before use, since it's not threadsafe 	TokenNameCOMMENT_LINE	should be cloned before use, since it's not threadsafe 
Resolution	TokenNameIdentifier	 Resolution
(	TokenNameLPAREN	
int	TokenNameint	
formatLen	TokenNameIdentifier	 format Len
)	TokenNameRPAREN	
{	TokenNameLBRACE	
this	TokenNamethis	
.	TokenNameDOT	
formatLen	TokenNameIdentifier	 format Len
=	TokenNameEQUAL	
formatLen	TokenNameIdentifier	 format Len
;	TokenNameSEMICOLON	
// formatLen 10's place: 11111111 	TokenNameCOMMENT_LINE	formatLen 10's place: 11111111 
// formatLen 1's place: 12345678901234567 	TokenNameCOMMENT_LINE	formatLen 1's place: 12345678901234567 
this	TokenNamethis	
.	TokenNameDOT	
format	TokenNameIdentifier	 format
=	TokenNameEQUAL	
new	TokenNamenew	
SimpleDateFormat	TokenNameIdentifier	 Simple Date Format
(	TokenNameLPAREN	
"yyyyMMddHHmmssSSS"	TokenNameStringLiteral	yyyyMMddHHmmssSSS
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
0	TokenNameIntegerLiteral	
,	TokenNameCOMMA	
formatLen	TokenNameIdentifier	 format Len
)	TokenNameRPAREN	
,	TokenNameCOMMA	
Locale	TokenNameIdentifier	 Locale
.	TokenNameDOT	
US	TokenNameIdentifier	 US
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
this	TokenNamethis	
.	TokenNameDOT	
format	TokenNameIdentifier	 format
.	TokenNameDOT	
setTimeZone	TokenNameIdentifier	 set Time Zone
(	TokenNameLPAREN	
GMT	TokenNameIdentifier	 GMT
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** this method returns the name of the resolution * in lowercase (for backwards compatibility) */	TokenNameCOMMENT_JAVADOC	 this method returns the name of the resolution in lowercase (for backwards compatibility) 
@	TokenNameAT	
Override	TokenNameIdentifier	 Override
public	TokenNamepublic	
String	TokenNameIdentifier	 String
toString	TokenNameIdentifier	 to String
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
super	TokenNamesuper	
.	TokenNameDOT	
toString	TokenNameIdentifier	 to String
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
toLowerCase	TokenNameIdentifier	 to Lower Case
(	TokenNameLPAREN	
Locale	TokenNameIdentifier	 Locale
.	TokenNameDOT	
ENGLISH	TokenNameIdentifier	 ENGLISH
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
