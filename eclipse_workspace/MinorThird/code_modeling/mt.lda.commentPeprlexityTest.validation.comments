This class is responsible for testing VisibleSVM class. @author chiachi 	5 116 3026 472 116 17
A dataset of sequences of examples. @author William Cohen 	6 113 1159 28 17 18 19
@author Edoardo Airoldi Date: Nov 24, 2003 	5 17 1815 1816 91 2009
@author Edoardo M. Airoldi Date: Feb 6, 2004 	5 17 1815 1816 91 4721
convert a set to a string listing the elements 	4 646 46 241 791
This class is responsible for testing nodeToFeature and nodeArrayToInstance functions from SVMUtils class. @author chiachi 	6 116 3026 472 2478 116 17
@author William Cohen @author Quinten Mercer 	6 17 18 19 17 1453 1454
Wraps an ExtractorAnnotator with some code to implement a simple API. 	6 2257 2047 1083 103 928 5323
Random Forests implementation. See http://www.stat.berkeley.edu/~breiman/RandomForests/ For algorith details. @author Alexander Friedman 	10 2167 2749 75 172 3179 2746 608 17 2703 2704
A group of sliding windows associated with a sequence. <p>In more detail: just as a SequenceDataset holds a set of Example[] objects, a SegmentDataset holds a set of CandidateSegmentGroup objects. Each CandidateSegmentGroup is derived from a sequence of source objects s1....sN. The CandidateSegmentGroup holds an instance for each subsequence of up to K adjacent source objects (the subsequence is called a <i>segment</i>, or a <i>sliding window</i>). Here K is the "maxWindowSize", and N is the "sequenceLength". <p>To illustrate, suppose the original sequence is a,b,c,d,e and K=3. Then the sliding window will hold instances created from these subsequences: a,b,c,d,e,ab,bc,cd,de,abc,bcd,cde. @author William Cohen 	55 1024 1025 1026 264 1027 260 1028 46 315 1029 1028 46 1030 315 1030 1031 264 452 315 1032 1033 1030 1028 59 1034 1035 452 315 1034 68 1036 1025 1037 1038 1039 1040 1041 1042 264 1025 1037 1043 48 548 1044 1045 1046 1047 1048 1049 1050 1051 17 18 19
Implements the teacher's side of the learner-teacher protocol. @author William Cohen 	8 234 12 41 72 13 17 18 19
Unigram Language Model @author William Cohen 	5 3461 1658 17 18 19
A set of semisupervised examples available for semi-supervised learning. @author Edoardo Airoldi Date: Mar 15, 2004 	11 46 1811 28 52 53 36 17 1815 1816 91 1381
@author Cameron Williams Date: October 11, 2005 Stores a learned multiClassifier and uses that to predict a multiLabel for each instance. Each label from the multiLabel is then added as a feature to each instance. 	15 17 114 115 91 3450 88 2870 3843 2693 59 67 2693 326 950 59
Implements the Listwise Ranking algorithm proposed at: Learning to Rank: From Pairwise Approach to Listwise Approach, ICML 2007. Zhe Cao, Tao Qin, Tie-Yan Liu, Ming-Feng Tsai, Hang Li. Only works for binary relevance levels (i.e., revelant vs non-revevant) @author Vitor R. Carvalho 	12 234 701 224 3366 36 707 4687 1500 713 17 2347 2348
SVMClassifier wrapps the prediction code from the libsvm library for binary or multi-class problems. A SVMClassifier must be built from a model, using the svm_model class from libsvm. This is best done by running the learner. <br> <br> Note that due to the way libsvm computes probabilities you may get different predictions for the same instance if you turn on probabilities compared to when you leave it turned off. See the libsvm home page for more details. @author qcm, Frank Lin 	30 3777 636 1083 3778 2393 713 109 116 3777 2744 1658 3845 116 3778 406 41 42 3778 2185 189 59 2395 2185 3060 3489 3778 3465 608 17 435

Generate many copies of a ClassifierLearner. @author William Cohen 	6 1539 3879 22 17 18 19
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	15 456 512 471 6 157 160 1295 485 307 1228 1301 5348 17 18 19
Defines the list of classes that can be selected by an instance of UIMain. 	6 2796 302 1824 759 59 987
@author Edoardo M. Airoldi Date: Feb 6, 2004 	5 17 1815 1816 91 4721
A subset of another TextLabels. @author William Cohen 	5 467 360 17 18 19
Trains a StackedClassifierLearner using the information in a labeled relational Dataset. @author Zhenzhen Kou 	8 111 90 69 1981 113 17 1987 1988
Created on Sep 26, 2005 @author Vitor R. Carvalho Passive Aggressive algorithm as described in "Online Passive Agressive Algorithms" Cramer, Dekel, Shalev-Shwartz, Singer, NIPS 2003. Classification mode. Additionally, it implements optionally a voting scheme. (voted parameter) 	20 548 4070 17 2347 2348 4285 4116 224 4054 4285 150 1302 1199 4034 234 4689 2750 1156 486 375
Main UI program. With enough support to make it configurable interactively, by command lines, or by a file. 	10 454 980 1226 458 39 313 1695 349 424 298
Helper class for splitting up iterators over Examples, by class. @author Edoardo Airoldi Date: Dec 8, 2003 	11 683 116 2054 1148 28 116 17 1815 1816 91 4130
Multi-class version of a binary classifier. Puts classifiers in order of ones with the most positive examples first. @author Cameron Williams 	12 109 116 485 713 9 2801 385 496 28 17 114 115
Naive Bayes algorithm. If feature weights are word counts then this implements the usual multinomial naive Bayes. If feature weights are presence/absence this implements binomial naive Bayes. @author William Cohen 	19 3986 2791 224 950 2658 2234 1579 234 3986 2791 950 2658 234 2100 3986 2791 17 18 19
An inverted index, mapping features to examples which contain the features. @author William Cohen 	9 5621 546 1445 256 28 256 17 18 19
Wrap a hyperplane to that it supports the Instance interface. 	4 5085 220 59 21
Apply a serialized annotator. @author William Cohen 	6 1685 514 1079 17 18 19
This class... @author ksteppe 	3 116 17 294
Abstract implementation of a SpanFinder. @author William Cohen 	6 718 75 3427 17 18 19
Provides some basic utilities for dealing with libsvm. It can convert Features to nodes, instances to node arrays and Datasets to problems. @author ksteppe, Frank Lin 	12 1134 2070 3778 646 256 48 1161 1778 477 17 294 435
Batch version of an OnlineClassifierLearner. @author William Cohen 	6 1814 485 2646 17 18 19
Interface for something that trains multi label classifiers. @author Cameron Williams 	8 21 111 109 67 2801 17 114 115
@author Edoardo Airoldi Date: Mar 15, 2004 	5 17 1815 1816 91 1381
This class is responsible for... @author ksteppe 	4 116 3026 17 294
A sequence classifier that can report on the confidence associated with any subsequence of a sequential classification. @author William Cohen 	10 264 9 2077 2272 1034 219 1302 17 18 19
An annotator that uses a learned Classifier to mark up document spans. 	6 1079 88 9 5237 371 471
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a stacked batch learner. @author Zhenzhen Kou 	13 718 22 1812 72 41 13 103 162 1814 41 17 1987 1988
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. Polynomial kernel is implemented: K(x,y) = (coef0+gamma*<x,y>)^d Both "voted" and "averaged" modes are implemented (unnormalized). Poly degree = 0 means that no kernel is used. Therefore, mode "averaged" with degree=0 should be equivalent to results in VotedPerceptron.java (file with a faster implementation of the averaged nonnormalized perceptron) @author Vitor Carvalho 	36 486 223 224 2464 4088 1302 223 224 3462 36 229 5625 2045 3018 4412 486 4095 3018 5354 5626 2241 2045 1199 4095 5626 2611 85 483 5 298 75 4095 223 17 2347 2348
Creates Features, and maintains a mapping between Features and numeric ids. Also ensures that only a single feature instance exists with a particular name. 	12 1056 256 1444 1445 256 3151 1176 3152 1471 950 59 369
Learn from examples a GraphSearcher that re-ranks examples based on scores from a learned classifier. 	7 8 28 28 164 3869 88 9
A set of examples for learning. @author William Cohen 	6 46 28 36 17 18 19
A dataset which supports random access to the examples. @author William Cohen 	7 113 2167 3492 28 17 18 19
A more space-efficient version of a CandidateSegmentGroup. Space is saved by explicitly storing the instances for the unit-length segments, plus "deltas" for each non-unit length segment. Each "delta" encodes the difference between the segment instance and the sum of the unit-length instances it covers. @author William Cohen 	25 3674 1155 485 1030 3674 516 48 1110 200 2653 1110 200 1036 865 4792 290 1036 59 2081 1110 200 48 17 18 19
View result of some sort of train/test experiment for Data with Multiple Labels. @author Cameron Williams 	12 456 218 658 211 355 1002 45 93 255 17 114 115
This class is responsible for... @author ksteppe 	4 116 3026 17 294
Some sample inputs for learners. @author William Cohen 	6 359 1005 15 17 18 19
Learn an Annotator from AnnotationExample's. @author William Cohen 	6 8 1079 4280 17 18 19
Multi-class version of a binary classifier. @author William Cohen 	8 109 116 485 713 9 17 18 19
Abstract class which implements the 'getBinaryClassifier' method of BinaryClassifierLearner's. @author William Cohen 	7 718 116 234 100 17 18 19
This class is responsible for... @author ksteppe 	4 116 3026 17 294
Allows one to adjust the parameters of a learned extractor. @author William Cohen 	7 3905 2904 88 1964 17 18 19
Generic implementation of an annotator. @author William Cohen 	6 484 75 1079 17 18 19
A generative Model for word-counts based on the Poisson Distribution. @author Edoardo Airoldi 	9 1658 2234 1579 164 2187 2375 17 1815 1816
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author Cameron Williams 	13 59 268 234 59 21 59 1826 286 67 1009 17 114 115
Main UI program for the 'classify' package. @author William Cohen 	8 454 980 1226 2880 0 17 18 19
@author William Cohen 	3 17 18 19
Do a train/test experiment for word taggers. @author William Cohen 	7 211 355 1002 2234 17 18 19
A Classifier which associates instances with a real number. Positive numbers indicate a positive class, negative numbers indicate a negative class. @author William Cohen 	15 9 48 213 251 496 2076 496 116 717 2076 717 116 17 18 19
Evaluate a classifier as a ranker 	2 2064 9
Trains a SequenceClassifierLearner using the information in a labeled Dataset. @author William Cohen 	8 111 1414 90 69 113 17 18 19
Train a CMM (in batch mode). @author William Cohen 	7 211 4713 1814 1199 17 18 19
@author Edoardo Airoldi Date: Nov 14, 2004 	5 17 1815 1816 91 2009
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a standard on-line learner. @author William Cohen 	13 718 22 1812 72 41 13 103 1813 99 41 17 18 19
Online version of a BatchClassifierLearner. @author William Cohen 	6 4054 485 179 17 18 19
Identifies a particular substring of a particular document. @author William Cohen 	5 1090 371 17 18 19
View an object after passing it through a transformation. @author William cohen 	7 456 96 3359 5038 17 18 19
@author William Cohen 	3 17 18 19
Stores some detailed results of evaluating a classifier on data. @author William Cohen 	8 2370 85 1240 9 45 17 18 19
Interface for a multi label classifier. @author Cameron Williams 	7 21 109 67 9 17 114 115
@author William Cohen Date: Nov 21, 2003 	5 17 18 19 91 2009
This class is responsible for... @author ksteppe 	4 116 3026 17 294
Tokenize a document 	2 1499 371
Sequential learner based on the perceptron algorithm that takes the top-k viterbi paths and subtracts those within a margin of beta of the correct. * @author Sunita Sarawagi 	14 219 41 164 223 224 1495 897 269 4088 4105 1588 17 1637 1638
Trivial annotator used as test case. 	4 74 1079 355 98
Records results of evaluating an extraction-learning system. @author William Cohen 	8 85 1240 1327 36 410 17 18 19
Utilities for reflection. 	1 2070
Created on Sep 22, 2005 @author Vitor R. Carvalho Balanced Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Notation and some implementation details from "Mistake-Driven Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997 Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	49 548 4070 17 2347 2348 4071 4072 224 36 4081 4082 4083 4084 151 2711 224 4085 4086 36 5285 75 608 4090 4091 36 297 3007 4092 4093 4094 232 4034 234 3398 256 1622 28 1571 5286 4088 2157 4088 375 4689 3 2750 1156 486 375
Main UI program for the 'classify' package. @author William Cohen 	8 454 980 1226 2880 0 17 18 19
package 	1 0
A weighted combination of features. @author William Cohen 	6 2678 2705 256 17 18 19
An annotator that uses a learned extractor to mark up document spans. 	6 1079 88 1964 5237 371 471
Defines the list of classes that can be selected by an instance of UIMain. 	6 2796 302 1824 759 59 987
@author Edoardo Airoldi Date: Nov 24, 2003 	5 17 1815 1816 91 2009
This set of tests checks out the basic functionality of the TextBase class hierarchy. It tests loading documents, querying for its properties, creating document spans, document span loopers, etc. @author Quinten Mercer 	20 46 1111 2798 1134 3030 370 116 5131 1111 314 416 303 3153 371 471 371 440 17 1453 1454
Learns to first transforming data with an InstanceTransform, then classify it. @author William Cohen 	8 706 3891 45 2010 3 17 18 19
Interface for OnlineLearner. Allows you to add to a learner by specifying a string rather than a Span. Can return a TextClassifier, which scores a String rather than a span. @author Cameron Williams 	14 21 4055 207 41 241 440 64 495 3869 241 440 17 114 115
A single instance for a learner. This is basically a weighted set of features. @author William Cohen 	10 1471 59 41 3963 2678 46 256 17 18 19
Modify a textlabeling using a series of mixup expressions. <pre> BNF: STATEMENT -> declareSpanType TYPE STATEMENT -> provide ID STATEMENT -> require ID [,FILE] STATEMENT -> annotateWith FILE STATEMENT -> defDict [+case] NAME = ID, ... , ID STATEMENT -> defTokenProp PROP:VALUE = GEN STATEMENT -> defSpanProp PROP:VALUE = GEN STATEMENT -> defSpanType TYPE2 = GEN STATEMENT -> defLevel NAME = LEVELDEF STATEMENT -> onLevel NAME STATEMENT -> offLevel NAME STATEMENT -> importFromLevel NAME TYPE = TYPE LEVELDEF -> filter TYPE LEVELDEF -> pseudotoken TYPE LEVELDEF -> split TOKEN LEVELDEF -> re 'REGEX' GEN -> [TYPE]: MIXUP-EXPR GEN -> [TYPE]- MIXUP-EXPR GEN -> [TYPE]~ re 'REGEX',NUMBER GEN -> [TYPE]~ trie phrase1, phrase2, ... ; statements are semicolon-separated // and comments look like this (C++ style) SEMANTICS: execute each command in order, saving spans/tokens as types, and asserting properties '=:' can be replaced with '=TYPE:', in which case the expr will be applied to each span of the given type, rather than all top-level spans defDict FOO = bar,baz,bat stores a lowercase version of each word the dictionary defDict +case FOO = blah,Bar,baZ stores each word the dictionary, preserving case in dictionaries and tries, a double-quoted word "foo.txt" means to find foo.txt on the classpath and store all lines from the file as words (after trimming them). TYPE: MIXUP-EXPR finds all spans inside a span of type TYPE that match the expression TYPE- MIXUP-EXPR finds all spans inside a span of type TYPE that do not contain anything matching MIXUP-EXPR </pre> <p> Mixup is matching language for modifying TextLabels. It can label spans with a given TYPE (the new label for that token span) and assign properties to spans (much like labels, but 'invisible'). There is more documentation for Mixup programs in the <a href="package-summary.html">package-level documents for Mixup.</a> <p> Briefly, a Mixup program will look something like this: <pre> require "req1"; //requires that "abc" type spans have already been labeled. If not, the default annoator //for "abc" will be used. require "req2", "req2.mixup"; //file 'def.mixup' will be run to provide "def" labels if they are not already there //if "def" labels were already generated by a different annotator, they will be used and //and 'def.mixup' won't be called. provide "xyz"; //this program will annotate the text with "xyz" labels defDict titleWord = mr, ms, mrs, dr; //defines a dictionary (with scope of this program execution called 'titleWord' //containing the values "mr", "ms", "mrs", "dr" defDict myDictionary = "dictionary.txt"; //defines a dictionary called 'myDictionary' with values taken from the file "dictionary.txt" defTokenProp title:true =: ... [ai(titleWord)] ... ; //finds all spans matching a work in the dictionary titleWord //those spans are given the property "Name" with value "true" (a string, not boolean) //if the span previously had "Name" property with a different value, that is replaced // the "..." before and after indicate that it doesn't matter what comes before or after the token //to be labeled. if I said "=: [ai(titleWord)];" the document would need to be JUST a titleword. defTokenProp titlePunc:1 =: ... title:true [','] ... || ... title:true ['.'] ... ; //spans "." or "," preceeded by a title are given the property titlePunc with value "1" //note that the entire '... title:true [','] ...' is an expression; or operators ("||") must be //<em> between</em> expressions, not within them defSpanType fullTitle =: ...[title:true titlePunc:1?R] ...; //label a span as "fullTitle" if there is a title span optionally followed b a titlePunc span //but not more than one (from the R) defSpanType the =: ... [eqi('the')] ...; //labels occurances of "the" ignoring case (eq = equals, adding i ignores case) defTokenProp aProp:t =: ...[<title:true, req1>] ...; /tokens which have the title=true property AND are labeled as req1 //are given the property aProp=t defTokenProp address:x =: ... [@fullTitle any] !a(myDictionary) ...; //label spans of one 'fullTitle' (the @ is needed //before types) and the following token, whatever it is, // which are followed by something other than a myDictionary word defTokenProp capProp:on =req2: ... [re('^[A-Z]$')] ...; //on spans of type req2, match tokens fitting the given regular expression defSpanType listSet =: ... [address+R] ...; //label as header spans of 1 or more address tokens, going all the way to //right most possible token - example: blah address1 address2 address3 blah // - will return three spans: "address3", "address2 address3", and "address1 address2 address3" defSpanType adList =: ... [L address+ R] ...; //as above but only returns the longest span defSpanType header =: [L address* R] ...; //label longest span of 0 or more address tokens at the beginning of the document defSpanType shortList =: ... [address{2,3}] ...; //label spans of 2 or 3 address tokens defSpanType xyz =header: ...[capProp] ...; //providing the promised xyz labeling //creates a new level where each document is a span with spanType defLevel newLevel = filter spanType; //creates a new level where tokens of spanType are combined into a single token defLevel newLevel = pseudotoken spanType; //creates a new level where the textBase is retokenized by splitting a a certain token defLevel newLevel = split '.'; //create a new level where the textBase is retokenized using a regular expression defLevel newLevel = re '([^\n]+)'; //switches current textBase and Labels to Level onLevel levelName; //returns to root (or original) level - levelName is the name of the child level which you are switching off offLevel childLevelName; //Imports spans of Type in the child level to spans of newType in the parent level importFromLevel childLevelName newType = type; </pre> @author William Cohen 	357 4798 4640 310 2345 5140 5191 521 5140 73 372 5140 1103 372 298 5140 3333 298 5140 5184 98 372 372 5140 5203 453 1660 5140 2583 453 1660 5140 2581 1660 5140 5186 5140 5187 5140 5188 5140 5189 521 521 1450 521 5143 521 194 258 1660 521 310 1660 521 310 1660 521 251 1660 521 1160 5139 1098 3052 4027 3627 349 385 601 471 252 515 303 628 521 98 2458 440 521 897 215 471 5184 367 3388 3419 5214 485 2234 3325 5184 98 367 3388 3419 2234 3325 98 497 2234 367 439 2241 426 367 439 346 1481 424 298 1171 521 310 1528 471 2559 440 521 521 414 5145 521 310 1528 471 2559 440 521 521 1157 310 310 1157 3461 536 360 67 471 521 67 258 440 303 471 255 3827 310 0 215 416 310 310 1226 1103 3468 1049 521 471 69 557 1049 1103 310 298 1346 73 255 255 5045 1079 68 73 1226 1928 297 255 5184 2431 2796 3325 1226 2937 68 2026 2431 5184 3325 439 2796 3325 68 2026 298 3325 439 5203 3047 62 1528 471 1157 1133 3325 471 317 62 241 66 440 3764 317 628 1132 258 69 371 5203 3047 62 3047 62 471 3047 317 42 644 3047 62 5145 2345 2581 3047 62 67 440 3047 440 4689 440 2581 255 438 98 2217 389 444 2687 98 5203 252 3047 62 317 69 317 5203 67 471 988 515 258 2234 5203 471 521 414 252 2344 5145 2581 67 471 252 258 64 471 2581 32 440 2581 67 440 252 555 371 2581 67 471 252 2581 533 1056 215 371 440 1008 5186 1599 1450 1008 1056 215 252 1008 1016 1471 258 5186 1599 5143 1008 1056 215 370 1560 2054 258 5186 1599 194 195 215 370 1560 2344 5145 5186 1599 257 370 255 215 5187 1465 32 319 1042 215 1465 1469 215 5188 5073 471 521 1469 215 471 1276 1480 215 5189 1276 521 17 18 19
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	15 456 512 471 6 157 160 1295 485 307 1228 1301 5348 17 18 19
Created on Sep 21, 2005 @author Vitor R. Carvalho Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Some implementation details also described in: Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997. Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	45 548 4070 17 2347 2348 4072 224 36 4081 4082 4083 4084 151 2711 224 4085 4086 36 75 608 36 297 3007 4092 4093 4094 232 4034 234 3398 256 1622 28 1571 5286 4088 2157 4088 375 4689 3 2750 1156 486 375
@author Edoardo Airoldi Date: Dec 5, 2003 	5 17 1815 1816 91 4130
Annotate substrings that are legal URLs. @author William Cohen 	6 1928 2982 2507 17 18 19
Run an annotation-learning experiment based on pre-labeled text. @author William Cohen 	11 1346 1930 36 1002 164 3736 69 297 17 18 19
Implements the teacher's side of the learner-teacher protocol for SGM. @author Zhenzhen Kou 	8 234 12 41 72 13 17 1987 1988
Helper class for splitting up iterators over Instances @author William Cohen 	8 683 116 2054 1148 48 17 18 19
for (int j=0; j<hmm.nstate; j++) { for (int i=0; i<b.length; i++) out.print(HMM.fmtlog(b[i][j])); out.println(); } } 	1 203
This class is responsible for... @author ksteppe 	4 116 3026 17 294
A span that is a subset of another span @author Cameron Williams 	6 440 467 440 17 114 115
Interactivly edit document spans. @author William Cohen 	7 1857 798 371 471 17 18 19
Interface for something that learns sequence classifiers. @author William Cohen 	7 21 706 264 2801 17 18 19
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. @author William Cohen 	14 486 223 224 2464 4088 1302 223 224 3462 36 229 17 18 19
Wraps JFreeChart's XY line graph capability. @author William cohen 	5 2257 99 17 18 19
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author William Cohen 	13 59 268 234 59 21 59 1826 286 67 1009 17 18 19
Tokenize a string. 	2 1499 241
{ printa(out); printe(out); } public void printa(Output out) { out.println("Transition probabilities:"); for (int i=1; i<nstate; i++) { for (int j=1; j<nstate; j++) out.print(fmtlog(loga[i][j])); out.println(); } } 	7 20 29 721 411 3308 2185 203
Dataset i/o. For ordinary datasets, format is one example per line, and the format for a line is: <pre> <code>type subpopid label feature1 feature2 ...</code> </pre>where <ul> <li>type=b or k (for binary or ordinary examples) <li>subpopid is NUL or a string, naming the subpopulation from which the example was drawn <li>label is +1 or -1 for binary <li>features are a feature name (for binary features) and a featureName=value for numeric features. </ul> For example: <code> k subpop1 2 f1=4 fOrange=1 fGreen=92 ... k subpop1 1 f1=1 fBlue=10 fGreen=2 ... k subpop2 3 f1=2 fYellow=1 fRed=42 ... </code> or <code> b NUL +1 f1=2 fOrange=1 fGreen=92 ... b NUL -1 f1=1 fBlue=10 fGreen=2 ... </code> or <code> k subpop1 2 f1 fOrange fGreen ... k subpop1 1 f1 fBlue fGreen ... k subpop2 3 f1 fYellow fRed ... </code> For SequenceDatasets, examples from a diffrerent sequence are separated by a single line containing a "*". @author William Cohen 	32 113 712 477 597 99 597 99 521 713 712 28 1055 241 461 462 67 713 256 950 713 256 2360 3151 256 28 264 1098 1471 99 17 18 19
