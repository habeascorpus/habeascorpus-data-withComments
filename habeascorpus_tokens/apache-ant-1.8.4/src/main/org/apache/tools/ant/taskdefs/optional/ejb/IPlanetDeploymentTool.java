/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements. See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * */	TokenNameCOMMENT_BLOCK	 Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at * http://www.apache.org/licenses/LICENSE-2.0 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
package	TokenNamepackage	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
tools	TokenNameIdentifier	 tools
.	TokenNameDOT	
ant	TokenNameIdentifier	 ant
.	TokenNameDOT	
taskdefs	TokenNameIdentifier	 taskdefs
.	TokenNameDOT	
optional	TokenNameIdentifier	 optional
.	TokenNameDOT	
ejb	TokenNameIdentifier	 ejb
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
File	TokenNameIdentifier	 File
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
IOException	TokenNameIdentifier	 IO Exception
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
Hashtable	TokenNameIdentifier	 Hashtable
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
Iterator	TokenNameIdentifier	 Iterator
;	TokenNameSEMICOLON	
import	TokenNameimport	
javax	TokenNameIdentifier	 javax
.	TokenNameDOT	
xml	TokenNameIdentifier	 xml
.	TokenNameDOT	
parsers	TokenNameIdentifier	 parsers
.	TokenNameDOT	
SAXParser	TokenNameIdentifier	 SAX Parser
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
tools	TokenNameIdentifier	 tools
.	TokenNameDOT	
ant	TokenNameIdentifier	 ant
.	TokenNameDOT	
BuildException	TokenNameIdentifier	 Build Exception
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
tools	TokenNameIdentifier	 tools
.	TokenNameDOT	
ant	TokenNameIdentifier	 ant
.	TokenNameDOT	
Project	TokenNameIdentifier	 Project
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
xml	TokenNameIdentifier	 xml
.	TokenNameDOT	
sax	TokenNameIdentifier	 sax
.	TokenNameDOT	
SAXException	TokenNameIdentifier	 SAX Exception
;	TokenNameSEMICOLON	
/** * This class is used to generate iPlanet Application Server (iAS) 6.0 stubs and * skeletons and build an EJB Jar file. It is designed to be used with the Ant * <code>ejbjar</code> task. If only stubs and skeletons need to be generated * (in other words, if no JAR file needs to be created), refer to the * <code>iplanet-ejbc</code> task and the <code>IPlanetEjbcTask</code> class. * <p> * The following attributes may be specified by the user: * <ul> * <li><i>destdir</i> -- The base directory into which the generated JAR * files will be written. Each JAR file is written * in directories which correspond to their location * within the "descriptordir" namespace. This is a * required attribute. * <li><i>classpath</i> -- The classpath used when generating EJB stubs and * skeletons. This is an optional attribute (if * omitted, the classpath specified in the "ejbjar" * parent task will be used). If specified, the * classpath elements will be prepended to the * classpath specified in the parent "ejbjar" task. * Note that nested "classpath" elements may also be * used. * <li><i>keepgenerated</i> -- Indicates whether or not the Java source * files which are generated by ejbc will be * saved or automatically deleted. If "yes", * the source files will be retained. This is * an optional attribute (if omitted, it * defaults to "no"). * <li><i>debug</i> -- Indicates whether or not the ejbc utility should * log additional debugging statements to the standard * output. If "yes", the additional debugging statements * will be generated (if omitted, it defaults to "no"). * <li><i>iashome</i> -- May be used to specify the "home" directory for * this iPlanet Application server installation. This * is used to find the ejbc utility if it isn't * included in the user's system path. This is an * optional attribute (if specified, it should refer * to the <code>[install-location]/iplanet/ias6/ias * </code> directory). If omitted, the ejbc utility * must be on the user's system path. * <li><i>suffix</i> -- String value appended to the JAR filename when * creating each JAR. This attribute is not required * (if omitted, it defaults to ".jar"). * </ul> * <p> * For each EJB descriptor found in the "ejbjar" parent task, this deployment * tool will locate the three classes that comprise the EJB. If these class * files cannot be located in the specified <code>srcdir</code> directory, the * task will fail. The task will also attempt to locate the EJB stubs and * skeletons in this directory. If found, the timestamps on the stubs and * skeletons will be checked to ensure they are up to date. Only if these files * cannot be found or if they are out of date will ejbc be called. * * @see IPlanetEjbc */	TokenNameCOMMENT_JAVADOC	 This class is used to generate iPlanet Application Server (iAS) 6.0 stubs and skeletons and build an EJB Jar file. It is designed to be used with the Ant <code>ejbjar</code> task. If only stubs and skeletons need to be generated (in other words, if no JAR file needs to be created), refer to the <code>iplanet-ejbc</code> task and the <code>IPlanetEjbcTask</code> class. <p> The following attributes may be specified by the user: <ul> <li><i>destdir</i> -- The base directory into which the generated JAR files will be written. Each JAR file is written in directories which correspond to their location within the "descriptordir" namespace. This is a required attribute. <li><i>classpath</i> -- The classpath used when generating EJB stubs and skeletons. This is an optional attribute (if omitted, the classpath specified in the "ejbjar" parent task will be used). If specified, the classpath elements will be prepended to the classpath specified in the parent "ejbjar" task. Note that nested "classpath" elements may also be used. <li><i>keepgenerated</i> -- Indicates whether or not the Java source files which are generated by ejbc will be saved or automatically deleted. If "yes", the source files will be retained. This is an optional attribute (if omitted, it defaults to "no"). <li><i>debug</i> -- Indicates whether or not the ejbc utility should log additional debugging statements to the standard output. If "yes", the additional debugging statements will be generated (if omitted, it defaults to "no"). <li><i>iashome</i> -- May be used to specify the "home" directory for this iPlanet Application server installation. This is used to find the ejbc utility if it isn't included in the user's system path. This is an optional attribute (if specified, it should refer to the <code>[install-location]/iplanet/ias6/ias </code> directory). If omitted, the ejbc utility must be on the user's system path. <li><i>suffix</i> -- String value appended to the JAR filename when creating each JAR. This attribute is not required (if omitted, it defaults to ".jar"). </ul> <p> For each EJB descriptor found in the "ejbjar" parent task, this deployment tool will locate the three classes that comprise the EJB. If these class files cannot be located in the specified <code>srcdir</code> directory, the task will fail. The task will also attempt to locate the EJB stubs and skeletons in this directory. If found, the timestamps on the stubs and skeletons will be checked to ensure they are up to date. Only if these files cannot be found or if they are out of date will ejbc be called. * @see IPlanetEjbc 
public	TokenNamepublic	
class	TokenNameclass	
IPlanetDeploymentTool	TokenNameIdentifier	 I Planet Deployment Tool
extends	TokenNameextends	
GenericDeploymentTool	TokenNameIdentifier	 Generic Deployment Tool
{	TokenNameLBRACE	
/* Attributes set by the Ant build file */	TokenNameCOMMENT_BLOCK	 Attributes set by the Ant build file 
private	TokenNameprivate	
File	TokenNameIdentifier	 File
iashome	TokenNameIdentifier	 iashome
;	TokenNameSEMICOLON	
private	TokenNameprivate	
String	TokenNameIdentifier	 String
jarSuffix	TokenNameIdentifier	 jar Suffix
=	TokenNameEQUAL	
".jar"	TokenNameStringLiteral	.jar
;	TokenNameSEMICOLON	
private	TokenNameprivate	
boolean	TokenNameboolean	
keepgenerated	TokenNameIdentifier	 keepgenerated
=	TokenNameEQUAL	
false	TokenNamefalse	
;	TokenNameSEMICOLON	
private	TokenNameprivate	
boolean	TokenNameboolean	
debug	TokenNameIdentifier	 debug
=	TokenNameEQUAL	
false	TokenNamefalse	
;	TokenNameSEMICOLON	
/* * Filenames of the standard EJB descriptor (which is passed to this class * from the parent "ejbjar" task) and the iAS-specific EJB descriptor * (whose name is determined by this class). Both filenames are relative * to the directory specified by the "srcdir" attribute in the ejbjar task. */	TokenNameCOMMENT_BLOCK	 Filenames of the standard EJB descriptor (which is passed to this class from the parent "ejbjar" task) and the iAS-specific EJB descriptor (whose name is determined by this class). Both filenames are relative to the directory specified by the "srcdir" attribute in the ejbjar task. 
private	TokenNameprivate	
String	TokenNameIdentifier	 String
descriptorName	TokenNameIdentifier	 descriptor Name
;	TokenNameSEMICOLON	
private	TokenNameprivate	
String	TokenNameIdentifier	 String
iasDescriptorName	TokenNameIdentifier	 ias Descriptor Name
;	TokenNameSEMICOLON	
/* * The displayName variable stores the value of the "display-name" element * from the standard EJB descriptor. As a future enhancement to this task, * we may determine the name of the EJB JAR file using this display-name, * but this has not be implemented yet. */	TokenNameCOMMENT_BLOCK	 The displayName variable stores the value of the "display-name" element from the standard EJB descriptor. As a future enhancement to this task, we may determine the name of the EJB JAR file using this display-name, but this has not be implemented yet. 
private	TokenNameprivate	
String	TokenNameIdentifier	 String
displayName	TokenNameIdentifier	 display Name
;	TokenNameSEMICOLON	
/* * Regardless of the name of the iAS-specific EJB descriptor file, it will * written in the completed JAR file as "ias-ejb-jar.xml". This is the * naming convention implemented by iAS. */	TokenNameCOMMENT_BLOCK	 Regardless of the name of the iAS-specific EJB descriptor file, it will written in the completed JAR file as "ias-ejb-jar.xml". This is the naming convention implemented by iAS. 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
IAS_DD	TokenNameIdentifier	 IAS  DD
=	TokenNameEQUAL	
"ias-ejb-jar.xml"	TokenNameStringLiteral	ias-ejb-jar.xml
;	TokenNameSEMICOLON	
/** * Setter method used to store the "home" directory of the user's iAS * installation. The directory specified should typically be * <code>[install-location]/iplanet/ias6/ias</code>. * * @param iashome The home directory for the user's iAS installation. */	TokenNameCOMMENT_JAVADOC	 Setter method used to store the "home" directory of the user's iAS installation. The directory specified should typically be <code>[install-location]/iplanet/ias6/ias</code>. * @param iashome The home directory for the user's iAS installation. 
public	TokenNamepublic	
void	TokenNamevoid	
setIashome	TokenNameIdentifier	 set Iashome
(	TokenNameLPAREN	
File	TokenNameIdentifier	 File
iashome	TokenNameIdentifier	 iashome
)	TokenNameRPAREN	
{	TokenNameLBRACE	
this	TokenNamethis	
.	TokenNameDOT	
iashome	TokenNameIdentifier	 iashome
=	TokenNameEQUAL	
iashome	TokenNameIdentifier	 iashome
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Setter method used to specify whether the Java source files generated by * the ejbc utility should be saved or automatically deleted. * * @param keepgenerated boolean which, if <code>true</code>, indicates that * Java source files generated by ejbc for the stubs * and skeletons should be kept. */	TokenNameCOMMENT_JAVADOC	 Setter method used to specify whether the Java source files generated by the ejbc utility should be saved or automatically deleted. * @param keepgenerated boolean which, if <code>true</code>, indicates that Java source files generated by ejbc for the stubs and skeletons should be kept. 
public	TokenNamepublic	
void	TokenNamevoid	
setKeepgenerated	TokenNameIdentifier	 set Keepgenerated
(	TokenNameLPAREN	
boolean	TokenNameboolean	
keepgenerated	TokenNameIdentifier	 keepgenerated
)	TokenNameRPAREN	
{	TokenNameLBRACE	
this	TokenNamethis	
.	TokenNameDOT	
keepgenerated	TokenNameIdentifier	 keepgenerated
=	TokenNameEQUAL	
keepgenerated	TokenNameIdentifier	 keepgenerated
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Sets whether or not debugging output will be generated when ejbc is * executed. * * @param debug A boolean indicating if debugging output should be generated */	TokenNameCOMMENT_JAVADOC	 Sets whether or not debugging output will be generated when ejbc is executed. * @param debug A boolean indicating if debugging output should be generated 
public	TokenNamepublic	
void	TokenNamevoid	
setDebug	TokenNameIdentifier	 set Debug
(	TokenNameLPAREN	
boolean	TokenNameboolean	
debug	TokenNameIdentifier	 debug
)	TokenNameRPAREN	
{	TokenNameLBRACE	
this	TokenNamethis	
.	TokenNameDOT	
debug	TokenNameIdentifier	 debug
=	TokenNameEQUAL	
debug	TokenNameIdentifier	 debug
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Setter method used to specify the filename suffix (for example, ".jar") * for the JAR files to be created. * * @param jarSuffix The string to use as the JAR filename suffix. */	TokenNameCOMMENT_JAVADOC	 Setter method used to specify the filename suffix (for example, ".jar") for the JAR files to be created. * @param jarSuffix The string to use as the JAR filename suffix. 
public	TokenNamepublic	
void	TokenNamevoid	
setSuffix	TokenNameIdentifier	 set Suffix
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
jarSuffix	TokenNameIdentifier	 jar Suffix
)	TokenNameRPAREN	
{	TokenNameLBRACE	
this	TokenNamethis	
.	TokenNameDOT	
jarSuffix	TokenNameIdentifier	 jar Suffix
=	TokenNameEQUAL	
jarSuffix	TokenNameIdentifier	 jar Suffix
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Since iAS doesn't generate a "generic" JAR as part of its processing, * this attribute is ignored and a warning message is displayed to the user. * * @param inString the string to use as the suffix. This parameter is * ignored. */	TokenNameCOMMENT_JAVADOC	 Since iAS doesn't generate a "generic" JAR as part of its processing, this attribute is ignored and a warning message is displayed to the user. * @param inString the string to use as the suffix. This parameter is ignored. 
public	TokenNamepublic	
void	TokenNamevoid	
setGenericJarSuffix	TokenNameIdentifier	 set Generic Jar Suffix
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
inString	TokenNameIdentifier	 in String
)	TokenNameRPAREN	
{	TokenNameLBRACE	
log	TokenNameIdentifier	 log
(	TokenNameLPAREN	
"Since a generic JAR file is not created during processing, the "	TokenNameStringLiteral	Since a generic JAR file is not created during processing, the 
+	TokenNamePLUS	
"iPlanet Deployment Tool does not support the "	TokenNameStringLiteral	iPlanet Deployment Tool does not support the 
+	TokenNamePLUS	
""genericjarsuffix" attribute. It will be ignored."	TokenNameStringLiteral	"genericjarsuffix" attribute. It will be ignored.
,	TokenNameCOMMA	
Project	TokenNameIdentifier	 Project
.	TokenNameDOT	
MSG_WARN	TokenNameIdentifier	 MSG  WARN
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** {@inheritDoc}. */	TokenNameCOMMENT_JAVADOC	 {@inheritDoc}. 
public	TokenNamepublic	
void	TokenNamevoid	
processDescriptor	TokenNameIdentifier	 process Descriptor
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
descriptorName	TokenNameIdentifier	 descriptor Name
,	TokenNameCOMMA	
SAXParser	TokenNameIdentifier	 SAX Parser
saxParser	TokenNameIdentifier	 sax Parser
)	TokenNameRPAREN	
{	TokenNameLBRACE	
this	TokenNamethis	
.	TokenNameDOT	
descriptorName	TokenNameIdentifier	 descriptor Name
=	TokenNameEQUAL	
descriptorName	TokenNameIdentifier	 descriptor Name
;	TokenNameSEMICOLON	
this	TokenNamethis	
.	TokenNameDOT	
iasDescriptorName	TokenNameIdentifier	 ias Descriptor Name
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
log	TokenNameIdentifier	 log
(	TokenNameLPAREN	
"iPlanet Deployment Tool processing: "	TokenNameStringLiteral	iPlanet Deployment Tool processing: 
+	TokenNamePLUS	
descriptorName	TokenNameIdentifier	 descriptor Name
+	TokenNamePLUS	
" (and "	TokenNameStringLiteral	 (and 
+	TokenNamePLUS	
getIasDescriptorName	TokenNameIdentifier	 get Ias Descriptor Name
(	TokenNameLPAREN	
)	TokenNameRPAREN	
+	TokenNamePLUS	
")"	TokenNameStringLiteral	)
,	TokenNameCOMMA	
Project	TokenNameIdentifier	 Project
.	TokenNameDOT	
MSG_VERBOSE	TokenNameIdentifier	 MSG  VERBOSE
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
super	TokenNamesuper	
.	TokenNameDOT	
processDescriptor	TokenNameIdentifier	 process Descriptor
(	TokenNameLPAREN	
descriptorName	TokenNameIdentifier	 descriptor Name
,	TokenNameCOMMA	
saxParser	TokenNameIdentifier	 sax Parser
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Verifies that the user selections are valid. * * @param descriptorFileName String representing the file name of an EJB * descriptor to be processed * @param saxParser SAXParser which may be used to parse the XML * descriptor * @throws BuildException If the user selections are invalid. */	TokenNameCOMMENT_JAVADOC	 Verifies that the user selections are valid. * @param descriptorFileName String representing the file name of an EJB descriptor to be processed @param saxParser SAXParser which may be used to parse the XML descriptor @throws BuildException If the user selections are invalid. 
protected	TokenNameprotected	
void	TokenNamevoid	
checkConfiguration	TokenNameIdentifier	 check Configuration
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
descriptorFileName	TokenNameIdentifier	 descriptor File Name
,	TokenNameCOMMA	
SAXParser	TokenNameIdentifier	 SAX Parser
saxParser	TokenNameIdentifier	 sax Parser
)	TokenNameRPAREN	
throws	TokenNamethrows	
BuildException	TokenNameIdentifier	 Build Exception
{	TokenNameLBRACE	
int	TokenNameint	
startOfName	TokenNameIdentifier	 start Of Name
=	TokenNameEQUAL	
descriptorFileName	TokenNameIdentifier	 descriptor File Name
.	TokenNameDOT	
lastIndexOf	TokenNameIdentifier	 last Index Of
(	TokenNameLPAREN	
File	TokenNameIdentifier	 File
.	TokenNameDOT	
separatorChar	TokenNameIdentifier	 separator Char
)	TokenNameRPAREN	
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
;	TokenNameSEMICOLON	
String	TokenNameIdentifier	 String
stdXml	TokenNameIdentifier	 std Xml
=	TokenNameEQUAL	
descriptorFileName	TokenNameIdentifier	 descriptor File Name
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
startOfName	TokenNameIdentifier	 start Of Name
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
stdXml	TokenNameIdentifier	 std Xml
.	TokenNameDOT	
equals	TokenNameIdentifier	 equals
(	TokenNameLPAREN	
EJB_DD	TokenNameIdentifier	 EJB  DD
)	TokenNameRPAREN	
&&	TokenNameAND_AND	
(	TokenNameLPAREN	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
baseJarName	TokenNameIdentifier	 base Jar Name
==	TokenNameEQUAL_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
String	TokenNameIdentifier	 String
msg	TokenNameIdentifier	 msg
=	TokenNameEQUAL	
"No name specified for the completed JAR file. The EJB"	TokenNameStringLiteral	No name specified for the completed JAR file. The EJB
+	TokenNamePLUS	
" descriptor should be prepended with the JAR "	TokenNameStringLiteral	 descriptor should be prepended with the JAR 
+	TokenNamePLUS	
"name or it should be specified using the "	TokenNameStringLiteral	name or it should be specified using the 
+	TokenNamePLUS	
"attribute "basejarname" in the "ejbjar" task."	TokenNameStringLiteral	attribute "basejarname" in the "ejbjar" task.
;	TokenNameSEMICOLON	
throw	TokenNamethrow	
new	TokenNamenew	
BuildException	TokenNameIdentifier	 Build Exception
(	TokenNameLPAREN	
msg	TokenNameIdentifier	 msg
,	TokenNameCOMMA	
getLocation	TokenNameIdentifier	 get Location
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
File	TokenNameIdentifier	 File
iasDescriptor	TokenNameIdentifier	 ias Descriptor
=	TokenNameEQUAL	
new	TokenNamenew	
File	TokenNameIdentifier	 File
(	TokenNameLPAREN	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
descriptorDir	TokenNameIdentifier	 descriptor Dir
,	TokenNameCOMMA	
getIasDescriptorName	TokenNameIdentifier	 get Ias Descriptor Name
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
(	TokenNameLPAREN	
!	TokenNameNOT	
iasDescriptor	TokenNameIdentifier	 ias Descriptor
.	TokenNameDOT	
exists	TokenNameIdentifier	 exists
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
||	TokenNameOR_OR	
(	TokenNameLPAREN	
!	TokenNameNOT	
iasDescriptor	TokenNameIdentifier	 ias Descriptor
.	TokenNameDOT	
isFile	TokenNameIdentifier	 is File
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
String	TokenNameIdentifier	 String
msg	TokenNameIdentifier	 msg
=	TokenNameEQUAL	
"The iAS-specific EJB descriptor ("	TokenNameStringLiteral	The iAS-specific EJB descriptor (
+	TokenNamePLUS	
iasDescriptor	TokenNameIdentifier	 ias Descriptor
+	TokenNamePLUS	
") was not found."	TokenNameStringLiteral	) was not found.
;	TokenNameSEMICOLON	
throw	TokenNamethrow	
new	TokenNamenew	
BuildException	TokenNameIdentifier	 Build Exception
(	TokenNameLPAREN	
msg	TokenNameIdentifier	 msg
,	TokenNameCOMMA	
getLocation	TokenNameIdentifier	 get Location
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
(	TokenNameLPAREN	
iashome	TokenNameIdentifier	 iashome
!=	TokenNameNOT_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
&&	TokenNameAND_AND	
(	TokenNameLPAREN	
!	TokenNameNOT	
iashome	TokenNameIdentifier	 iashome
.	TokenNameDOT	
isDirectory	TokenNameIdentifier	 is Directory
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
String	TokenNameIdentifier	 String
msg	TokenNameIdentifier	 msg
=	TokenNameEQUAL	
"If "iashome" is specified, it must be a valid "	TokenNameStringLiteral	If "iashome" is specified, it must be a valid 
+	TokenNamePLUS	
"directory (it was set to "	TokenNameStringLiteral	directory (it was set to 
+	TokenNamePLUS	
iashome	TokenNameIdentifier	 iashome
+	TokenNamePLUS	
")."	TokenNameStringLiteral	).
;	TokenNameSEMICOLON	
throw	TokenNamethrow	
new	TokenNamenew	
BuildException	TokenNameIdentifier	 Build Exception
(	TokenNameLPAREN	
msg	TokenNameIdentifier	 msg
,	TokenNameCOMMA	
getLocation	TokenNameIdentifier	 get Location
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
/** * This method returns a list of EJB files found when the specified EJB * descriptor is parsed and processed. * * @param descriptorFileName String representing the file name of an EJB * descriptor to be processed * @param saxParser SAXParser which may be used to parse the XML * descriptor * @return Hashtable of EJB class (and other) files to be * added to the completed JAR file * @throws IOException An IOException from the parser, possibly from * the byte stream or character stream * @throws SAXException Any SAX exception, possibly wrapping another * exception */	TokenNameCOMMENT_JAVADOC	 This method returns a list of EJB files found when the specified EJB descriptor is parsed and processed. * @param descriptorFileName String representing the file name of an EJB descriptor to be processed @param saxParser SAXParser which may be used to parse the XML descriptor @return Hashtable of EJB class (and other) files to be added to the completed JAR file @throws IOException An IOException from the parser, possibly from the byte stream or character stream @throws SAXException Any SAX exception, possibly wrapping another exception 
protected	TokenNameprotected	
Hashtable	TokenNameIdentifier	 Hashtable
parseEjbFiles	TokenNameIdentifier	 parse Ejb Files
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
descriptorFileName	TokenNameIdentifier	 descriptor File Name
,	TokenNameCOMMA	
SAXParser	TokenNameIdentifier	 SAX Parser
saxParser	TokenNameIdentifier	 sax Parser
)	TokenNameRPAREN	
throws	TokenNamethrows	
IOException	TokenNameIdentifier	 IO Exception
,	TokenNameCOMMA	
SAXException	TokenNameIdentifier	 SAX Exception
{	TokenNameLBRACE	
Hashtable	TokenNameIdentifier	 Hashtable
files	TokenNameIdentifier	 files
;	TokenNameSEMICOLON	
/* Build and populate an instance of the ejbc utility */	TokenNameCOMMENT_BLOCK	 Build and populate an instance of the ejbc utility 
IPlanetEjbc	TokenNameIdentifier	 I Planet Ejbc
ejbc	TokenNameIdentifier	 ejbc
=	TokenNameEQUAL	
new	TokenNamenew	
IPlanetEjbc	TokenNameIdentifier	 I Planet Ejbc
(	TokenNameLPAREN	
new	TokenNamenew	
File	TokenNameIdentifier	 File
(	TokenNameLPAREN	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
descriptorDir	TokenNameIdentifier	 descriptor Dir
,	TokenNameCOMMA	
descriptorFileName	TokenNameIdentifier	 descriptor File Name
)	TokenNameRPAREN	
,	TokenNameCOMMA	
new	TokenNamenew	
File	TokenNameIdentifier	 File
(	TokenNameLPAREN	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
descriptorDir	TokenNameIdentifier	 descriptor Dir
,	TokenNameCOMMA	
getIasDescriptorName	TokenNameIdentifier	 get Ias Descriptor Name
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
srcDir	TokenNameIdentifier	 src Dir
,	TokenNameCOMMA	
getCombinedClasspath	TokenNameIdentifier	 get Combined Classpath
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
toString	TokenNameIdentifier	 to String
(	TokenNameLPAREN	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
saxParser	TokenNameIdentifier	 sax Parser
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
ejbc	TokenNameIdentifier	 ejbc
.	TokenNameDOT	
setRetainSource	TokenNameIdentifier	 set Retain Source
(	TokenNameLPAREN	
keepgenerated	TokenNameIdentifier	 keepgenerated
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
ejbc	TokenNameIdentifier	 ejbc
.	TokenNameDOT	
setDebugOutput	TokenNameIdentifier	 set Debug Output
(	TokenNameLPAREN	
debug	TokenNameIdentifier	 debug
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
iashome	TokenNameIdentifier	 iashome
!=	TokenNameNOT_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
ejbc	TokenNameIdentifier	 ejbc
.	TokenNameDOT	
setIasHomeDir	TokenNameIdentifier	 set Ias Home Dir
(	TokenNameLPAREN	
iashome	TokenNameIdentifier	 iashome
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
dtdLocations	TokenNameIdentifier	 dtd Locations
!=	TokenNameNOT_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
for	TokenNamefor	
(	TokenNameLPAREN	
Iterator	TokenNameIdentifier	 Iterator
i	TokenNameIdentifier	 i
=	TokenNameEQUAL	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
dtdLocations	TokenNameIdentifier	 dtd Locations
.	TokenNameDOT	
iterator	TokenNameIdentifier	 iterator
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
i	TokenNameIdentifier	 i
.	TokenNameDOT	
hasNext	TokenNameIdentifier	 has Next
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
EjbJar	TokenNameIdentifier	 Ejb Jar
.	TokenNameDOT	
DTDLocation	TokenNameIdentifier	 DTD Location
dtdLocation	TokenNameIdentifier	 dtd Location
=	TokenNameEQUAL	
(	TokenNameLPAREN	
EjbJar	TokenNameIdentifier	 Ejb Jar
.	TokenNameDOT	
DTDLocation	TokenNameIdentifier	 DTD Location
)	TokenNameRPAREN	
i	TokenNameIdentifier	 i
.	TokenNameDOT	
next	TokenNameIdentifier	 next
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
ejbc	TokenNameIdentifier	 ejbc
.	TokenNameDOT	
registerDTD	TokenNameIdentifier	 register DTD
(	TokenNameLPAREN	
dtdLocation	TokenNameIdentifier	 dtd Location
.	TokenNameDOT	
getPublicId	TokenNameIdentifier	 get Public Id
(	TokenNameLPAREN	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
dtdLocation	TokenNameIdentifier	 dtd Location
.	TokenNameDOT	
getLocation	TokenNameIdentifier	 get Location
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
/* Execute the ejbc utility -- stubs/skeletons are rebuilt, if needed */	TokenNameCOMMENT_BLOCK	 Execute the ejbc utility -- stubs/skeletons are rebuilt, if needed 
try	TokenNametry	
{	TokenNameLBRACE	
ejbc	TokenNameIdentifier	 ejbc
.	TokenNameDOT	
execute	TokenNameIdentifier	 execute
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
catch	TokenNamecatch	
(	TokenNameLPAREN	
IPlanetEjbc	TokenNameIdentifier	 I Planet Ejbc
.	TokenNameDOT	
EjbcException	TokenNameIdentifier	 Ejbc Exception
e	TokenNameIdentifier	 e
)	TokenNameRPAREN	
{	TokenNameLBRACE	
throw	TokenNamethrow	
new	TokenNamenew	
BuildException	TokenNameIdentifier	 Build Exception
(	TokenNameLPAREN	
"An error has occurred while trying to "	TokenNameStringLiteral	An error has occurred while trying to 
+	TokenNamePLUS	
"execute the iAS ejbc utility"	TokenNameStringLiteral	execute the iAS ejbc utility
,	TokenNameCOMMA	
e	TokenNameIdentifier	 e
,	TokenNameCOMMA	
getLocation	TokenNameIdentifier	 get Location
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
displayName	TokenNameIdentifier	 display Name
=	TokenNameEQUAL	
ejbc	TokenNameIdentifier	 ejbc
.	TokenNameDOT	
getDisplayName	TokenNameIdentifier	 get Display Name
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
files	TokenNameIdentifier	 files
=	TokenNameEQUAL	
ejbc	TokenNameIdentifier	 ejbc
.	TokenNameDOT	
getEjbFiles	TokenNameIdentifier	 get Ejb Files
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/* Add CMP descriptors to the list of EJB files */	TokenNameCOMMENT_BLOCK	 Add CMP descriptors to the list of EJB files 
String	TokenNameIdentifier	 String
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
cmpDescriptors	TokenNameIdentifier	 cmp Descriptors
=	TokenNameEQUAL	
ejbc	TokenNameIdentifier	 ejbc
.	TokenNameDOT	
getCmpDescriptors	TokenNameIdentifier	 get Cmp Descriptors
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
cmpDescriptors	TokenNameIdentifier	 cmp Descriptors
.	TokenNameDOT	
length	TokenNameIdentifier	 length
>	TokenNameGREATER	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
File	TokenNameIdentifier	 File
baseDir	TokenNameIdentifier	 base Dir
=	TokenNameEQUAL	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
descriptorDir	TokenNameIdentifier	 descriptor Dir
;	TokenNameSEMICOLON	
int	TokenNameint	
endOfPath	TokenNameIdentifier	 end Of Path
=	TokenNameEQUAL	
descriptorFileName	TokenNameIdentifier	 descriptor File Name
.	TokenNameDOT	
lastIndexOf	TokenNameIdentifier	 last Index Of
(	TokenNameLPAREN	
File	TokenNameIdentifier	 File
.	TokenNameDOT	
separator	TokenNameIdentifier	 separator
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
String	TokenNameIdentifier	 String
relativePath	TokenNameIdentifier	 relative Path
=	TokenNameEQUAL	
descriptorFileName	TokenNameIdentifier	 descriptor File Name
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
0	TokenNameIntegerLiteral	
,	TokenNameCOMMA	
endOfPath	TokenNameIdentifier	 end Of Path
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
for	TokenNamefor	
(	TokenNameLPAREN	
int	TokenNameint	
i	TokenNameIdentifier	 i
=	TokenNameEQUAL	
0	TokenNameIntegerLiteral	
;	TokenNameSEMICOLON	
i	TokenNameIdentifier	 i
<	TokenNameLESS	
cmpDescriptors	TokenNameIdentifier	 cmp Descriptors
.	TokenNameDOT	
length	TokenNameIdentifier	 length
;	TokenNameSEMICOLON	
i	TokenNameIdentifier	 i
++	TokenNamePLUS_PLUS	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
int	TokenNameint	
endOfCmp	TokenNameIdentifier	 end Of Cmp
=	TokenNameEQUAL	
cmpDescriptors	TokenNameIdentifier	 cmp Descriptors
[	TokenNameLBRACKET	
i	TokenNameIdentifier	 i
]	TokenNameRBRACKET	
.	TokenNameDOT	
lastIndexOf	TokenNameIdentifier	 last Index Of
(	TokenNameLPAREN	
'/'	TokenNameCharacterLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
String	TokenNameIdentifier	 String
cmpDescriptor	TokenNameIdentifier	 cmp Descriptor
=	TokenNameEQUAL	
cmpDescriptors	TokenNameIdentifier	 cmp Descriptors
[	TokenNameLBRACKET	
i	TokenNameIdentifier	 i
]	TokenNameRBRACKET	
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
endOfCmp	TokenNameIdentifier	 end Of Cmp
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
File	TokenNameIdentifier	 File
cmpFile	TokenNameIdentifier	 cmp File
=	TokenNameEQUAL	
new	TokenNamenew	
File	TokenNameIdentifier	 File
(	TokenNameLPAREN	
baseDir	TokenNameIdentifier	 base Dir
,	TokenNameCOMMA	
relativePath	TokenNameIdentifier	 relative Path
+	TokenNamePLUS	
cmpDescriptor	TokenNameIdentifier	 cmp Descriptor
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
!	TokenNameNOT	
cmpFile	TokenNameIdentifier	 cmp File
.	TokenNameDOT	
exists	TokenNameIdentifier	 exists
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
throw	TokenNamethrow	
new	TokenNamenew	
BuildException	TokenNameIdentifier	 Build Exception
(	TokenNameLPAREN	
"The CMP descriptor file ("	TokenNameStringLiteral	The CMP descriptor file (
+	TokenNamePLUS	
cmpFile	TokenNameIdentifier	 cmp File
+	TokenNamePLUS	
") could not be found."	TokenNameStringLiteral	) could not be found.
,	TokenNameCOMMA	
getLocation	TokenNameIdentifier	 get Location
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
files	TokenNameIdentifier	 files
.	TokenNameDOT	
put	TokenNameIdentifier	 put
(	TokenNameLPAREN	
cmpDescriptors	TokenNameIdentifier	 cmp Descriptors
[	TokenNameLBRACKET	
i	TokenNameIdentifier	 i
]	TokenNameRBRACKET	
,	TokenNameCOMMA	
cmpFile	TokenNameIdentifier	 cmp File
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
return	TokenNamereturn	
files	TokenNameIdentifier	 files
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Add the iAS-specific EJB descriptor to the list of files which will be * written to the JAR file. * * @param ejbFiles Hashtable of EJB class (and other) files to be added to * the completed JAR file. * @param ddPrefix not used */	TokenNameCOMMENT_JAVADOC	 Add the iAS-specific EJB descriptor to the list of files which will be written to the JAR file. * @param ejbFiles Hashtable of EJB class (and other) files to be added to the completed JAR file. @param ddPrefix not used 
protected	TokenNameprotected	
void	TokenNamevoid	
addVendorFiles	TokenNameIdentifier	 add Vendor Files
(	TokenNameLPAREN	
Hashtable	TokenNameIdentifier	 Hashtable
ejbFiles	TokenNameIdentifier	 ejb Files
,	TokenNameCOMMA	
String	TokenNameIdentifier	 String
ddPrefix	TokenNameIdentifier	 dd Prefix
)	TokenNameRPAREN	
{	TokenNameLBRACE	
ejbFiles	TokenNameIdentifier	 ejb Files
.	TokenNameDOT	
put	TokenNameIdentifier	 put
(	TokenNameLPAREN	
META_DIR	TokenNameIdentifier	 META  DIR
+	TokenNamePLUS	
IAS_DD	TokenNameIdentifier	 IAS  DD
,	TokenNameCOMMA	
new	TokenNamenew	
File	TokenNameIdentifier	 File
(	TokenNameLPAREN	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
descriptorDir	TokenNameIdentifier	 descriptor Dir
,	TokenNameCOMMA	
getIasDescriptorName	TokenNameIdentifier	 get Ias Descriptor Name
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Get the name of the Jar that will be written. The modification date * of this jar will be checked against the dependent bean classes. * * @param baseName String name of the EJB JAR file to be written (without * a filename extension). * * @return File representing the JAR file which will be written. */	TokenNameCOMMENT_JAVADOC	 Get the name of the Jar that will be written. The modification date of this jar will be checked against the dependent bean classes. * @param baseName String name of the EJB JAR file to be written (without a filename extension). * @return File representing the JAR file which will be written. 
File	TokenNameIdentifier	 File
getVendorOutputJarFile	TokenNameIdentifier	 get Vendor Output Jar File
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
baseName	TokenNameIdentifier	 base Name
)	TokenNameRPAREN	
{	TokenNameLBRACE	
File	TokenNameIdentifier	 File
jarFile	TokenNameIdentifier	 jar File
=	TokenNameEQUAL	
new	TokenNamenew	
File	TokenNameIdentifier	 File
(	TokenNameLPAREN	
getDestDir	TokenNameIdentifier	 get Dest Dir
(	TokenNameLPAREN	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
baseName	TokenNameIdentifier	 base Name
+	TokenNamePLUS	
jarSuffix	TokenNameIdentifier	 jar Suffix
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
log	TokenNameIdentifier	 log
(	TokenNameLPAREN	
"JAR file name: "	TokenNameStringLiteral	JAR file name: 
+	TokenNamePLUS	
jarFile	TokenNameIdentifier	 jar File
.	TokenNameDOT	
toString	TokenNameIdentifier	 to String
(	TokenNameLPAREN	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
Project	TokenNameIdentifier	 Project
.	TokenNameDOT	
MSG_VERBOSE	TokenNameIdentifier	 MSG  VERBOSE
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
return	TokenNamereturn	
jarFile	TokenNameIdentifier	 jar File
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * The iAS ejbc utility doesn't require the Public ID of the descriptor's * DTD for it to process correctly--this method always returns <code>null * </code>. * * @return <code>null</code>. */	TokenNameCOMMENT_JAVADOC	 The iAS ejbc utility doesn't require the Public ID of the descriptor's DTD for it to process correctly--this method always returns <code>null </code>. * @return <code>null</code>. 
protected	TokenNameprotected	
String	TokenNameIdentifier	 String
getPublicId	TokenNameIdentifier	 get Public Id
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
null	TokenNamenull	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Determines the name of the iAS-specific EJB descriptor using the * specified standard EJB descriptor name. In general, the standard * descriptor will be named "[basename]-ejb-jar.xml", and this method will * return "[basename]-ias-ejb-jar.xml". * * @return The name of the iAS-specific EJB descriptor file. */	TokenNameCOMMENT_JAVADOC	 Determines the name of the iAS-specific EJB descriptor using the specified standard EJB descriptor name. In general, the standard descriptor will be named "[basename]-ejb-jar.xml", and this method will return "[basename]-ias-ejb-jar.xml". * @return The name of the iAS-specific EJB descriptor file. 
private	TokenNameprivate	
String	TokenNameIdentifier	 String
getIasDescriptorName	TokenNameIdentifier	 get Ias Descriptor Name
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
/* Only calculate the descriptor name once */	TokenNameCOMMENT_BLOCK	 Only calculate the descriptor name once 
if	TokenNameif	
(	TokenNameLPAREN	
iasDescriptorName	TokenNameIdentifier	 ias Descriptor Name
!=	TokenNameNOT_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
iasDescriptorName	TokenNameIdentifier	 ias Descriptor Name
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
String	TokenNameIdentifier	 String
path	TokenNameIdentifier	 path
=	TokenNameEQUAL	
""	TokenNameStringLiteral	 
;	TokenNameSEMICOLON	
// Directory path of the EJB descriptor 	TokenNameCOMMENT_LINE	Directory path of the EJB descriptor 
String	TokenNameIdentifier	 String
basename	TokenNameIdentifier	 basename
;	TokenNameSEMICOLON	
// Filename appearing before name terminator 	TokenNameCOMMENT_LINE	Filename appearing before name terminator 
String	TokenNameIdentifier	 String
remainder	TokenNameIdentifier	 remainder
;	TokenNameSEMICOLON	
// Filename appearing after the name terminator 	TokenNameCOMMENT_LINE	Filename appearing after the name terminator 
/* Find the end of the standard descriptor's relative path */	TokenNameCOMMENT_BLOCK	 Find the end of the standard descriptor's relative path 
int	TokenNameint	
startOfFileName	TokenNameIdentifier	 start Of File Name
=	TokenNameEQUAL	
descriptorName	TokenNameIdentifier	 descriptor Name
.	TokenNameDOT	
lastIndexOf	TokenNameIdentifier	 last Index Of
(	TokenNameLPAREN	
File	TokenNameIdentifier	 File
.	TokenNameDOT	
separatorChar	TokenNameIdentifier	 separator Char
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
startOfFileName	TokenNameIdentifier	 start Of File Name
!=	TokenNameNOT_EQUAL	
-	TokenNameMINUS	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
path	TokenNameIdentifier	 path
=	TokenNameEQUAL	
descriptorName	TokenNameIdentifier	 descriptor Name
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
0	TokenNameIntegerLiteral	
,	TokenNameCOMMA	
startOfFileName	TokenNameIdentifier	 start Of File Name
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/* Check to see if the standard name is used (there's no basename) */	TokenNameCOMMENT_BLOCK	 Check to see if the standard name is used (there's no basename) 
if	TokenNameif	
(	TokenNameLPAREN	
descriptorName	TokenNameIdentifier	 descriptor Name
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
startOfFileName	TokenNameIdentifier	 start Of File Name
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
.	TokenNameDOT	
equals	TokenNameIdentifier	 equals
(	TokenNameLPAREN	
EJB_DD	TokenNameIdentifier	 EJB  DD
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
basename	TokenNameIdentifier	 basename
=	TokenNameEQUAL	
""	TokenNameStringLiteral	 
;	TokenNameSEMICOLON	
remainder	TokenNameIdentifier	 remainder
=	TokenNameEQUAL	
EJB_DD	TokenNameIdentifier	 EJB  DD
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
else	TokenNameelse	
{	TokenNameLBRACE	
int	TokenNameint	
endOfBaseName	TokenNameIdentifier	 end Of Base Name
=	TokenNameEQUAL	
descriptorName	TokenNameIdentifier	 descriptor Name
.	TokenNameDOT	
indexOf	TokenNameIdentifier	 index Of
(	TokenNameLPAREN	
getConfig	TokenNameIdentifier	 get Config
(	TokenNameLPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
baseNameTerminator	TokenNameIdentifier	 base Name Terminator
,	TokenNameCOMMA	
startOfFileName	TokenNameIdentifier	 start Of File Name
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/* * Check for the odd case where the terminator and/or filename * extension aren't found. These will ensure "ias-" appears at the * end of the name and before the '.' (if present). */	TokenNameCOMMENT_BLOCK	 Check for the odd case where the terminator and/or filename extension aren't found. These will ensure "ias-" appears at the end of the name and before the '.' (if present). 
if	TokenNameif	
(	TokenNameLPAREN	
endOfBaseName	TokenNameIdentifier	 end Of Base Name
<	TokenNameLESS	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
endOfBaseName	TokenNameIdentifier	 end Of Base Name
=	TokenNameEQUAL	
descriptorName	TokenNameIdentifier	 descriptor Name
.	TokenNameDOT	
lastIndexOf	TokenNameIdentifier	 last Index Of
(	TokenNameLPAREN	
'.'	TokenNameCharacterLiteral	
)	TokenNameRPAREN	
-	TokenNameMINUS	
1	TokenNameIntegerLiteral	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
endOfBaseName	TokenNameIdentifier	 end Of Base Name
<	TokenNameLESS	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
endOfBaseName	TokenNameIdentifier	 end Of Base Name
=	TokenNameEQUAL	
descriptorName	TokenNameIdentifier	 descriptor Name
.	TokenNameDOT	
length	TokenNameIdentifier	 length
(	TokenNameLPAREN	
)	TokenNameRPAREN	
-	TokenNameMINUS	
1	TokenNameIntegerLiteral	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
basename	TokenNameIdentifier	 basename
=	TokenNameEQUAL	
descriptorName	TokenNameIdentifier	 descriptor Name
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
startOfFileName	TokenNameIdentifier	 start Of File Name
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
,	TokenNameCOMMA	
endOfBaseName	TokenNameIdentifier	 end Of Base Name
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
remainder	TokenNameIdentifier	 remainder
=	TokenNameEQUAL	
descriptorName	TokenNameIdentifier	 descriptor Name
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
endOfBaseName	TokenNameIdentifier	 end Of Base Name
+	TokenNamePLUS	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
iasDescriptorName	TokenNameIdentifier	 ias Descriptor Name
=	TokenNameEQUAL	
path	TokenNameIdentifier	 path
+	TokenNamePLUS	
basename	TokenNameIdentifier	 basename
+	TokenNamePLUS	
"ias-"	TokenNameStringLiteral	ias-
+	TokenNamePLUS	
remainder	TokenNameIdentifier	 remainder
;	TokenNameSEMICOLON	
return	TokenNamereturn	
iasDescriptorName	TokenNameIdentifier	 ias Descriptor Name
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
