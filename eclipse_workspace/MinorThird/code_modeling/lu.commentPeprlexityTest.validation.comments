This class is responsible for testing VisibleSVM class. @author chiachi 	4 291 598 291 3773
A dataset of sequences of examples. @author William Cohen 	3 532 2023 3773
@author Edoardo Airoldi Date: Nov 24, 2003 	2 3773 922
@author Edoardo M. Airoldi Date: Feb 6, 2004 	3 3773 922 1495
convert a set to a string listing the elements 	5 5404 113 728 9620 708
This class is responsible for testing nodeToFeature and nodeArrayToInstance functions from SVMUtils class. @author chiachi 	4 291 598 291 3773
@author William Cohen @author Quinten Mercer 	2 3773 3773
Wraps an ExtractorAnnotator with some code to implement a simple API. 	5 321 151 623 477 231
Random Forests implementation. See http://www.stat.berkeley.edu/~breiman/RandomForests/ For algorith details. @author Alexander Friedman 	6 138 540 21 22 311 3773
A group of sliding windows associated with a sequence. <p>In more detail: just as a SequenceDataset holds a set of Example[] objects, a SegmentDataset holds a set of CandidateSegmentGroup objects. Each CandidateSegmentGroup is derived from a sequence of source objects s1....sN. The CandidateSegmentGroup holds an instance for each subsequence of up to K adjacent source objects (the subsequence is called a <i>segment</i>, or a <i>sliding window</i>). Here K is the "maxWindowSize", and N is the "sequenceLength". <p>To illustrate, suppose the original sequence is a,b,c,d,e and K=3. Then the sliding window will hold instances created from these subsequences: a,b,c,d,e,ab,bc,cd,de,abc,bcd,cde. @author William Cohen 	38 3541 1130 379 1005 113 1128 1005 113 1128 9516 379 522 1128 5942 1005 342 3043 531 522 1128 3043 116 48 2606 3499 3646 298 379 2606 1013 431 87 4710 4589 3396 4382 3040 3773
Implements the teacher's side of the learner-teacher protocol. @author William Cohen 	4 1372 2130 2939 3773
Unigram Language Model @author William Cohen 	3 36 2012 3773
A set of semisupervised examples available for semi-supervised learning. @author Edoardo Airoldi Date: Mar 15, 2004 	4 113 2023 3773 922
@author Cameron Williams Date: October 11, 2005 Stores a learned multiClassifier and uses that to predict a multiLabel for each instance. Each label from the multiLabel is then added as a feature to each instance. 	8 3773 922 844 342 162 539 5847 342
Implements the Listwise Ranking algorithm proposed at: Learning to Rank: From Pairwise Approach to Listwise Approach, ICML 2007. Zhe Cao, Tao Qin, Tie-Yan Liu, Ming-Feng Tsai, Hang Li. Only works for binary relevance levels (i.e., revelant vs non-revevant) @author Vitor R. Carvalho 	12 1372 820 2091 2298 2298 2438 5201 817 2342 1496 2721 3773
SVMClassifier wrapps the prediction code from the libsvm library for binary or multi-class problems. A SVMClassifier must be built from a model, using the svm_model class from libsvm. This is best done by running the learner. <br> <br> Note that due to the way libsvm computes probabilities you may get different predictions for the same instance if you turn on probabilities compared to when you leave it turned off. See the libsvm home page for more details. @author qcm, Frank Lin 	21 151 2342 1798 291 1113 2532 2012 291 1927 86 715 3427 342 133 2121 3942 3425 1392 2591 311 3773

Generate many copies of a ClassifierLearner. @author William Cohen 	3 597 2252 3773
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	12 71 759 3411 988 2166 827 17 3047 1071 61 62 3773
Defines the list of classes that can be selected by an instance of UIMain. 	5 1910 430 340 5692 342
@author Edoardo M. Airoldi Date: Feb 6, 2004 	3 3773 922 1495
A subset of another TextLabels. @author William Cohen 	2 416 3773
Trains a StackedClassifierLearner using the information in a labeled relational Dataset. @author Zhenzhen Kou 	2 13 3773
Created on Sep 26, 2005 @author Vitor R. Carvalho Passive Aggressive algorithm as described in "Online Passive Agressive Algorithms" Cramer, Dekel, Shalev-Shwartz, Singer, NIPS 2003. Classification mode. Additionally, it implements optionally a voting scheme. (voted parameter) 	10 87 3773 820 2402 910 4142 1372 286 1380 1193
Main UI program. With enough support to make it configurable interactively, by command lines, or by a file. 	6 2429 348 59 5465 3414 9
Helper class for splitting up iterators over Examples, by class. @author Edoardo Airoldi Date: Dec 8, 2003 	8 1707 291 605 2023 291 3773 922 6101
Multi-class version of a binary classifier. Puts classifiers in order of ones with the most positive examples first. @author Cameron Williams 	9 1798 291 17 2342 9653 320 2409 2023 3773
Naive Bayes algorithm. If feature weights are word counts then this implements the usual multinomial naive Bayes. If feature weights are presence/absence this implements binomial naive Bayes. @author William Cohen 	12 820 5847 2132 979 1848 1372 1480 5847 2132 6065 1372 3773
An inverted index, mapping features to examples which contain the features. @author William Cohen 	7 4385 72 1100 5522 2023 5522 3773
Wrap a hyperplane to that it supports the Instance interface. 	4 316 1169 342 2123
Apply a serialized annotator. @author William Cohen 	3 727 1063 3773
This class... @author ksteppe 	2 291 3773
Abstract implementation of a SpanFinder. @author William Cohen 	3 476 540 3773
Provides some basic utilities for dealing with libsvm. It can convert Features to nodes, instances to node arrays and Datasets to problems. @author ksteppe, Frank Lin 	9 1939 5404 5522 3803 431 153 351 1113 3773
Batch version of an OnlineClassifierLearner. @author William Cohen 	3 3505 17 3773
Interface for something that trains multi label classifiers. @author Cameron Williams 	4 2123 1798 162 3773
@author Edoardo Airoldi Date: Mar 15, 2004 	2 3773 922
This class is responsible for... @author ksteppe 	2 291 3773
A sequence classifier that can report on the confidence associated with any subsequence of a sequential classification. @author William Cohen 	5 379 1094 3043 3122 3773
An annotator that uses a learned Classifier to mark up document spans. 	3 423 218 988
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a stacked batch learner. @author Zhenzhen Kou 	6 476 1271 2939 623 3505 3773
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. Polynomial kernel is implemented: K(x,y) = (coef0+gamma*<x,y>)^d Both "voted" and "averaged" modes are implemented (unnormalized). Poly degree = 0 means that no kernel is used. Therefore, mode "averaged" with degree=0 should be equivalent to results in VotedPerceptron.java (file with a faster implementation of the averaged nonnormalized perceptron) @author Vitor Carvalho 	17 820 305 2608 820 452 510 510 2682 296 910 787 987 710 9 718 540 3773
Creates Features, and maintains a mapping between Features and numeric ids. Also ensures that only a single feature instance exists with a particular name. 	12 314 5522 972 1100 5522 780 328 504 413 5847 342 50
Learn from examples a GraphSearcher that re-ranks examples based on scores from a learned classifier. 	5 5849 2023 2023 451 287
A set of examples for learning. @author William Cohen 	3 113 2023 3773
A dataset which supports random access to the examples. @author William Cohen 	5 1169 138 358 2023 3773
A more space-efficient version of a CandidateSegmentGroup. Space is saved by explicitly storing the instances for the unit-length segments, plus "deltas" for each non-unit length segment. Each "delta" encodes the difference between the segment instance and the sum of the unit-length instances it covers. @author William Cohen 	25 686 1367 17 686 1638 1508 2936 431 529 180 128 529 180 48 3827 2165 2666 48 342 2131 529 180 431 869 3773
View result of some sort of train/test experiment for Data with Multiple Labels. @author Cameron Williams 	9 71 304 614 89 5846 85 244 1409 3773
This class is responsible for... @author ksteppe 	2 291 3773
Some sample inputs for learners. @author William Cohen 	3 2047 3891 3773
Learn an Annotator from AnnotationExample's. @author William Cohen 	2 5849 3773
Multi-class version of a binary classifier. @author William Cohen 	5 1798 291 17 2342 3773
Abstract class which implements the 'getBinaryClassifier' method of BinaryClassifierLearner's. @author William Cohen 	5 476 291 1372 393 3773
This class is responsible for... @author ksteppe 	2 291 3773
Allows one to adjust the parameters of a learned extractor. @author William Cohen 	3 1786 637 3773
Generic implementation of an annotator. @author William Cohen 	3 825 540 3773
A generative Model for word-counts based on the Poisson Distribution. @author Edoardo Airoldi 	6 2012 979 1848 451 875 3773
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author Cameron Williams 	11 342 1372 342 2123 6027 1966 342 514 162 462 3773
Main UI program for the 'classify' package. @author William Cohen 	3 2429 353 3773
@author William Cohen 	1 3773
Do a train/test experiment for word taggers. @author William Cohen 	4 89 5846 979 3773
A Classifier which associates instances with a real number. Positive numbers indicate a positive class, negative numbers indicate a negative class. @author William Cohen 	12 431 267 142 2409 900 2409 291 596 900 596 291 3773
Evaluate a classifier as a ranker 	0
Trains a SequenceClassifierLearner using the information in a labeled Dataset. @author William Cohen 	2 13 3773
Train a CMM (in batch mode). @author William Cohen 	3 3505 910 3773
@author Edoardo Airoldi Date: Nov 14, 2004 	2 3773 922
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a standard on-line learner. @author William Cohen 	7 476 1271 2939 623 1399 1080 3773
Online version of a BatchClassifierLearner. @author William Cohen 	2 17 3773
Identifies a particular substring of a particular document. @author William Cohen 	3 5332 218 3773
View an object after passing it through a transformation. @author William cohen 	4 71 1029 433 3773
@author William Cohen 	1 3773
Stores some detailed results of evaluating a classifier on data. @author William Cohen 	5 844 855 987 85 3773
Interface for a multi label classifier. @author Cameron Williams 	4 2123 1798 162 3773
@author William Cohen Date: Nov 21, 2003 	2 3773 922
This class is responsible for... @author ksteppe 	2 291 3773
Tokenize a document 	2 2002 218
Sequential learner based on the perceptron algorithm that takes the top-k viterbi paths and subtracts those within a margin of beta of the correct. * @author Sunita Sarawagi 	9 3122 451 820 111 1006 9575 2608 505 3773
Trivial annotator used as test case. 	3 1914 89 155
Records results of evaluating an extraction-learning system. @author William Cohen 	5 873 987 1227 156 3773
Utilities for reflection. 	1 2469
Created on Sep 22, 2005 @author Vitor R. Carvalho Balanced Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Notation and some implementation details from "Mistake-Driven Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997 Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	27 87 3773 820 5843 1414 2295 322 820 917 5289 540 311 836 4142 1372 1301 5522 1799 2023 368 533 2608 2608 1193 286 1380 1193
Main UI program for the 'classify' package. @author William Cohen 	3 2429 353 3773
package 	1 353
A weighted combination of features. @author William Cohen 	3 2291 5522 3773
An annotator that uses a learned extractor to mark up document spans. 	3 423 218 988
Defines the list of classes that can be selected by an instance of UIMain. 	5 1910 430 340 5692 342
@author Edoardo Airoldi Date: Nov 24, 2003 	2 3773 922
This set of tests checks out the basic functionality of the TextBase class hierarchy. It tests loading documents, querying for its properties, creating document spans, document span loopers, etc. @author Quinten Mercer 	18 113 228 238 1939 601 291 2752 228 4282 41 894 2479 482 218 988 218 2792 3773
Learns to first transforming data with an InstanceTransform, then classify it. @author William Cohen 	2 85 3773
Interface for OnlineLearner. Allows you to add to a learner by specifying a string rather than a Span. Can return a TextClassifier, which scores a String rather than a span. @author Cameron Williams 	9 2123 40 728 2792 278 287 728 2792 3773
A single instance for a learner. This is basically a weighted set of features. @author William Cohen 	6 413 342 6304 113 5522 3773
Modify a textlabeling using a series of mixup expressions. <pre> BNF: STATEMENT -> declareSpanType TYPE STATEMENT -> provide ID STATEMENT -> require ID [,FILE] STATEMENT -> annotateWith FILE STATEMENT -> defDict [+case] NAME = ID, ... , ID STATEMENT -> defTokenProp PROP:VALUE = GEN STATEMENT -> defSpanProp PROP:VALUE = GEN STATEMENT -> defSpanType TYPE2 = GEN STATEMENT -> defLevel NAME = LEVELDEF STATEMENT -> onLevel NAME STATEMENT -> offLevel NAME STATEMENT -> importFromLevel NAME TYPE = TYPE LEVELDEF -> filter TYPE LEVELDEF -> pseudotoken TYPE LEVELDEF -> split TOKEN LEVELDEF -> re 'REGEX' GEN -> [TYPE]: MIXUP-EXPR GEN -> [TYPE]- MIXUP-EXPR GEN -> [TYPE]~ re 'REGEX',NUMBER GEN -> [TYPE]~ trie phrase1, phrase2, ... ; statements are semicolon-separated // and comments look like this (C++ style) SEMANTICS: execute each command in order, saving spans/tokens as types, and asserting properties '=:' can be replaced with '=TYPE:', in which case the expr will be applied to each span of the given type, rather than all top-level spans defDict FOO = bar,baz,bat stores a lowercase version of each word the dictionary defDict +case FOO = blah,Bar,baZ stores each word the dictionary, preserving case in dictionaries and tries, a double-quoted word "foo.txt" means to find foo.txt on the classpath and store all lines from the file as words (after trimming them). TYPE: MIXUP-EXPR finds all spans inside a span of type TYPE that match the expression TYPE- MIXUP-EXPR finds all spans inside a span of type TYPE that do not contain anything matching MIXUP-EXPR </pre> <p> Mixup is matching language for modifying TextLabels. It can label spans with a given TYPE (the new label for that token span) and assign properties to spans (much like labels, but 'invisible'). There is more documentation for Mixup programs in the <a href="package-summary.html">package-level documents for Mixup.</a> <p> Briefly, a Mixup program will look something like this: <pre> require "req1"; //requires that "abc" type spans have already been labeled. If not, the default annoator //for "abc" will be used. require "req2", "req2.mixup"; //file 'def.mixup' will be run to provide "def" labels if they are not already there //if "def" labels were already generated by a different annotator, they will be used and //and 'def.mixup' won't be called. provide "xyz"; //this program will annotate the text with "xyz" labels defDict titleWord = mr, ms, mrs, dr; //defines a dictionary (with scope of this program execution called 'titleWord' //containing the values "mr", "ms", "mrs", "dr" defDict myDictionary = "dictionary.txt"; //defines a dictionary called 'myDictionary' with values taken from the file "dictionary.txt" defTokenProp title:true =: ... [ai(titleWord)] ... ; //finds all spans matching a work in the dictionary titleWord //those spans are given the property "Name" with value "true" (a string, not boolean) //if the span previously had "Name" property with a different value, that is replaced // the "..." before and after indicate that it doesn't matter what comes before or after the token //to be labeled. if I said "=: [ai(titleWord)];" the document would need to be JUST a titleword. defTokenProp titlePunc:1 =: ... title:true [','] ... || ... title:true ['.'] ... ; //spans "." or "," preceeded by a title are given the property titlePunc with value "1" //note that the entire '... title:true [','] ...' is an expression; or operators ("||") must be //<em> between</em> expressions, not within them defSpanType fullTitle =: ...[title:true titlePunc:1?R] ...; //label a span as "fullTitle" if there is a title span optionally followed b a titlePunc span //but not more than one (from the R) defSpanType the =: ... [eqi('the')] ...; //labels occurances of "the" ignoring case (eq = equals, adding i ignores case) defTokenProp aProp:t =: ...[<title:true, req1>] ...; /tokens which have the title=true property AND are labeled as req1 //are given the property aProp=t defTokenProp address:x =: ... [@fullTitle any] !a(myDictionary) ...; //label spans of one 'fullTitle' (the @ is needed //before types) and the following token, whatever it is, // which are followed by something other than a myDictionary word defTokenProp capProp:on =req2: ... [re('^[A-Z]$')] ...; //on spans of type req2, match tokens fitting the given regular expression defSpanType listSet =: ... [address+R] ...; //label as header spans of 1 or more address tokens, going all the way to //right most possible token - example: blah address1 address2 address3 blah // - will return three spans: "address3", "address2 address3", and "address1 address2 address3" defSpanType adList =: ... [L address+ R] ...; //as above but only returns the longest span defSpanType header =: [L address* R] ...; //label longest span of 0 or more address tokens at the beginning of the document defSpanType shortList =: ... [address{2,3}] ...; //label spans of 2 or 3 address tokens defSpanType xyz =header: ...[capProp] ...; //providing the promised xyz labeling //creates a new level where each document is a span with spanType defLevel newLevel = filter spanType; //creates a new level where tokens of spanType are combined into a single token defLevel newLevel = pseudotoken spanType; //creates a new level where the textBase is retokenized by splitting a a certain token defLevel newLevel = split '.'; //create a new level where the textBase is retokenized using a regular expression defLevel newLevel = re '([^\n]+)'; //switches current textBase and Labels to Level onLevel levelName; //returns to root (or original) level - levelName is the name of the child level which you are switching off offLevel childLevelName; //Imports spans of Type in the child level to spans of newType in the parent level importFromLevel childLevelName newType = type; </pre> @author William Cohen 	300 681 609 5402 1772 473 1772 1001 1947 1772 145 1947 9 1772 9 1772 155 1947 1947 1772 1648 1772 1648 1772 1648 1772 1772 1772 1772 473 473 786 473 473 521 464 1648 473 1648 473 1648 473 142 1648 473 794 4045 5082 3967 1133 189 3414 320 1232 988 459 891 3955 2479 496 473 155 82 2792 473 1006 1482 988 980 982 844 541 17 979 3126 155 980 982 844 979 3126 2259 155 809 5235 979 980 2398 296 257 980 2398 1300 9 468 473 2953 988 841 2792 473 473 520 1464 473 2953 988 841 2792 473 473 1348 1348 36 1088 162 988 473 162 464 2792 1856 2479 988 1409 4296 5938 353 1482 41 145 509 473 988 279 145 9 9469 297 1001 9469 1409 9469 1409 1386 9469 550 116 1001 836 1409 915 1910 3126 1028 116 594 915 3126 2398 1910 3126 116 594 9 3126 2398 732 295 2953 988 1348 11 3126 988 5995 295 728 909 2792 81 5995 496 739 740 464 218 732 295 732 295 988 732 5995 86 2961 732 295 1464 732 295 162 2792 732 2792 286 2792 1409 1839 155 1281 2340 1822 155 459 732 295 5995 5995 1103 162 988 284 891 464 979 988 473 520 459 1463 1464 1103 162 6003 988 1103 459 464 278 988 1103 187 2792 6003 1103 162 2792 1103 459 603 218 1103 162 988 1103 459 6003 969 314 1482 218 2792 786 314 1482 459 2336 413 464 314 1482 605 464 521 88 1482 1463 1464 9676 76 1409 1482 187 2656 298 1482 1789 1482 3549 988 473 1789 1482 988 4254 2785 1482 4254 473 3773
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	12 71 759 3411 988 2166 827 17 3047 1071 61 62 3773
Created on Sep 21, 2005 @author Vitor R. Carvalho Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Some implementation details also described in: Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997. Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	26 87 3773 820 5843 1414 2295 322 820 917 540 311 836 4142 1372 1301 5522 1799 2023 368 533 2608 2608 1193 286 1380 1193
@author Edoardo Airoldi Date: Dec 5, 2003 	3 3773 922 6101
Annotate substrings that are legal URLs. @author William Cohen 	3 5198 2004 3773
Run an annotation-learning experiment based on pre-labeled text. @author William Cohen 	6 297 5846 451 1655 836 3773
Implements the teacher's side of the learner-teacher protocol for SGM. @author Zhenzhen Kou 	4 1372 2130 2939 3773
Helper class for splitting up iterators over Instances @author William Cohen 	5 1707 291 605 431 3773
for (int j=0; j<hmm.nstate; j++) { for (int i=0; i<b.length; i++) out.print(HMM.fmtlog(b[i][j])); out.println(); } } 	1 400
This class is responsible for... @author ksteppe 	2 291 3773
A span that is a subset of another span @author Cameron Williams 	4 2792 416 2792 3773
Interactivly edit document spans. @author William Cohen 	3 218 988 3773
Interface for something that learns sequence classifiers. @author William Cohen 	3 2123 379 3773
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. @author William Cohen 	6 820 305 2608 820 452 3773
Wraps JFreeChart's XY line graph capability. @author William cohen 	5 321 1080 9567 3500 3773
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author William Cohen 	11 342 1372 342 2123 6027 1966 342 514 162 462 3773
Tokenize a string. 	2 2002 728
{ printa(out); printe(out); } public void printa(Output out) { out.println("Transition probabilities:"); for (int i=1; i<nstate; i++) { for (int j=1; j<nstate; j++) out.print(fmtlog(loga[i][j])); out.println(); } } 	6 570 571 167 157 1411 400
Dataset i/o. For ordinary datasets, format is one example per line, and the format for a line is: <pre> <code>type subpopid label feature1 feature2 ...</code> </pre>where <ul> <li>type=b or k (for binary or ordinary examples) <li>subpopid is NUL or a string, naming the subpopulation from which the example was drawn <li>label is +1 or -1 for binary <li>features are a feature name (for binary features) and a featureName=value for numeric features. </ul> For example: <code> k subpop1 2 f1=4 fOrange=1 fGreen=92 ... k subpop1 1 f1=1 fBlue=10 fGreen=2 ... k subpop2 3 f1=2 fYellow=1 fRed=42 ... </code> or <code> b NUL +1 f1=2 fOrange=1 fGreen=92 ... b NUL -1 f1=1 fBlue=10 fGreen=2 ... </code> or <code> k subpop1 2 f1 fOrange fGreen ... k subpop1 1 f1 fBlue fGreen ... k subpop2 3 f1 fYellow fRed ... </code> For SequenceDatasets, examples from a diffrerent sequence are separated by a single line containing a "*". @author William Cohen 	23 418 1080 418 1080 473 2342 2023 728 4275 162 2342 5522 5847 2342 5522 780 5522 2023 379 3967 413 1080 3773
