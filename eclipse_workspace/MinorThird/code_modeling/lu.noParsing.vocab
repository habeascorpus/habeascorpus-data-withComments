0	
26473	casenum
58690	RepeatingTokenStream(Reader
48461	delegate.getOffsetGap(field);
67411	parallelReader1
54814	lockexists
67415	parallelReader2
29615	"\4\0\12\134\21\0\11\133\14\0\3\133\36\132\12\133\3\0\2\132"+
9393	"\27\132\11\0\7\132\1\0\7\132\1\0\7\132\1\0\7\132\1\0"+
61490	"\1\u06ad\22\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u02e2\1\u063e"+
10165	"\1\352\2\36\1\352\1\36\1\141\12\142\1\65\1\136"+
23480	Thread.currentThread();
3398	time.
3699	ACRONYM_TYPE)
28579	time:
55151	assertFalse(termDocs2.next());
22577	reflectasstring
560	"
26910	#
23686	timed
16462	!
2063	&
2676	'
30954	td.getMaxScore(),
6175	$
2299	%
43486	testspannearversusbooleanand
4	*
561	+
2788	(
2872	)
18931	.
10965	"\1\u035e\1\230\1\347\12\230\175\0\1\346\12\230\1\u035f"+
3181	/
15226	,
36027	"five")),
260	-
64480	exclude.getSpans(reader);
1731	3
16837	clonedSegmentReader);
191	2
212	1
267	0
1742	7
1738	6
1736	5
11873	yychar
942	4
5797	;
10291	"\1\25\1\u013d\10\36\1\246\21\36\1\141\12\142\1\u013e"+
131	:
23553	9
23473	re-flushing
1828	8
24221	ArrayList<Directory>();
330	?
62792	TopFieldDocs)
1135	>
49275	occur);
115	=
143	<
17188	relies
44260	D
9629	"\2\ud90b\2\ud9ae\2\uda51\2\udaf4\2\udb97\2\udc3a\2\udcdd\2\udd80"+
38561	writers:
44360	E
44514	F
43002	G
21033	@
323	A
24060	"1.0e+0",
14968	B
15242	touchFile(String
28082	C
44924	L
45039	M
15442	N
38648	doc.add(newField("text","test1",
45178	O
39334	OpenBitSetDISI
44641	H
642	I
40461	#incrementToken()}
44827	J
24721	K
24094	U
32034	relied
6798	T
45966	W
24723	V
37965	inefficient
45452	Q
2418	times
45399	P
44539	S
45487	R
5805	]
6314	(q!=null
35504	\
4759	conf.setReaderTermsIndexDivisor(-1);
6585	(referred
20252	^
57404	setnumwords
12180	u4e51
28093	Y
25888	X
6690	[
65107	compressible).
44337	Z
1229	f
34016	g
1298	d
16283	e
1149	b
2089	c
29308	&lt;position&gt;*
38073	longVals=new
58608	udc44b
50	a
1909	n
16618	o
5000	l
4643	m
9471	j
10969	"\175\0\1\346\32\230\1\347\4\230\1\u0363\5\230\175\0"+
973	finalI
9298	k
57361	ensureCapacity(long
2038	h
141	i
787	w
50214	analyze
15020	testrepetitiveincreasingsloppinesswithholes
2090	v
9975	"\2\25\1\64\1\0\1\65\1\0\1\65\1\66\1\0"+
35506	u
865	t
1250	s
56308	QUICKSORT_THRESHOLD)
368	r
4140	q
21610	p
2558	seventyhash
29350	this.pool
150	}
5534	|
106	{
64933	z
23999	y
5762	x
25599	badKids.put(rf,
54764	filesystem).
62601	search(t1));
52641	Constructor<?>[]
21198	consumption
2199	MergePolicy
42773	injecting
8497	final1
8501	final3
15441	filesystem);
8499	final2
8914	FilteredDocIdSet.this.match(docid);
8503	final4
50710	lmp.setMinMergeDocs(maxBufferedDocs);
55737	createIndex(Random
763	CRASH_FAIL_MESSAGE
33339	"Records
67821	addDocs(writer,
34095	OpenBitSet(tord.size());
54910	writer.deleteAll();
51686	mergingSegments.remove(merge.info);
60231	"\2\0\1\u0282\15\0\1\u0282\6\0\12\u0282\1\u01dc\175\0"+
25981	OutOfOrderOneComparatorNonScoringCollector
25124	""));
2855	much
27866	"\u0061\u002C\u00AD",
59504	"\2\137\2\0\1\70\1\0\1\51\1\0\1\71\2\0"+
1465	org.apache.lucene.document.Field.Index;
56553	reqScorer.score();
7088	fewer
27160	"\u000B\u0031\u002C",
57203	middle,
8601	super.end();
9544	"\1\u28b6\1\u2959\1\u29fc\1\u2a9f\1\u2b42\1\u2be5\1\u2c88\1\u2d2b"+
32903	utf8Result
16786	update
59497	"\1\26\1\116\3\0\1\100\1\0\1\100\2\0\1\25"+
11019	"\12\u0388\1\u0385\13\0\1\u0325\160\0\1\u0386\4\u0384\2\0"+
43525	doTestCountVectorOfSize(20);
67786	(termLength
60123	"\1\66\7\0\1\66\2\0\1\25\1\u0219\32\u021a\13\u0219"+
37458	"five"));
66116	stdAnalyzer
572	"content6",
35252	FreqSkip,
32111	nextBuffer();
53014	UTF8toUTF16(final
60174	"\1\u0101\24\266\1\u0252\5\266\1\142\12\266\1\0\3\137"+
2266	BoostingSimilarity
43044	immediately.
62471	SingleMatchScorer
43050	immediately:
57821	testPrepareCommitNoChanges()
51699	merge.readerClones.get(i)
35898	query.equals(other));
62795	fieldIDX=0;fieldIDX<fieldHits.fields.length;fieldIDX++)
26697	minimize
31512	4).setIntValue(id));
40086	getTermInfosIndexDivisor()
57788	w.commit(commitData);
10037	"\4\0\1\25\2\0\2\25\1\0\1\25\1\0\1\25"+
46073	"Ã½"
34349	immediately,
2032	hash(Builder.UnCompiledNode<T>
67004	(indexDir
52099	malformed
32893	termIDs[j];
66996	bos.size());
23101	mSearcher3.close();
30725	"\1\1\15\0\1\1\71\0";
11082	"\1\u03bd\6\230\175\0\1\346\32\230\1\347\1\230\1\u03be"+
26132	getreversemul
59274	"\1\66\1\67\1\0\1\25\2\0\1\25\1\66\32\25"+
48281	docSpansOrdered(ppStart,
60161	"\1\u0242\1\u0243\1\u0244\1\232\1\u0245\1\u0246\1\232\231\0"+
59976	"\5\u0164\1\u0165\231\0\1\u01a2\2\u01a3\1\u01a2\5\u01a3\1\u01a4"+
59138	"\2\uaa90\2\uab33\2\uabd6\2\uac79\2\uad1c\2\uadbf\2\uae62\2\uaf05"+
62345	assertEquals(s(3,0,1),
18225	constantscore
5011	((0x100002600L
8398	verifierHost
49957	x40000
61379	"\226\0\1\u05b9\13\0\1\u033c\226\0\1\u05c0\175\0\4\u065f"+
40864	10000000));
58412	testObjectContains()
23348	"Italy"
68027	left.addAttribute(OffsetAttribute.class);
65399	314);
39940	miss--recompute
47975	(fullMerge)
39501	isi;
59781	"\1\25\2\0\1\25\1\141\11\36\1\355\20\36\1\142"+
40335	pointerMax)
23592	count+"",
59561	"\2\25\3\100\10\0\1\26\2\25\2\0\1\100\6\0"+
35298	curproxpointer
26070	trackMaxScore
33828	rptStack[n++]
40318	pointerMax;
66253	rnd.nextInt(10);
59935	"\1\u016e\1\u0145\4\0\1\u0145\1\137\2\0\1\50\1\0"+
67997	TestDuelingAnalyzers
5189	jjStartNfaWithStates_2(1,
39499	isi)
7847	java.nio.channels.ClosedChannelException;
39593	(ti.docFreq
66936	pair2.output2));
31278	oldIndxeDir);
3448	ArrayList<SegmentInfo>(segments);
31235	assertFalse(compressed.isBinary());
41694	save/load:
19926	previd
65946	mfqp.parse("one~0.8
7420	termshashconsumerperfield
10997	"\1\376\32\264\1\141\4\264\1\u010a\5\264\1\0\3\136"+
59067	query.incTotalNumberOfTerms(size[0]);
6464	StringWriter();
38034	"difference
20188	BooleanScorer2
54323	testlargevalue
6890	includesMax()
64967	lastInput
24662	"CABEJGFHDI"
54568	val,
24378	val)
56689	testKeepAllDeletionPolicy()
13383	u4e33
20298	NoOpCollector(boolean
38217	val;
33773	matchLength
66720	Longs,
19753	(!any)
29438	org.apache.lucene.util.SystemPropertiesRestoreRule;
14635	Longs.
24677	assertMatches(Searcher
17525	documents");
48010	org.apache.lucene.index.IndexFileNameFilter;
41970	unrecognized
12581	u4e47
51223	copySegmentAsIs(info,
38835	ise)
50041	os.writeVInt(entries.size());
12982	u4e3d
40	"License");
30625	"\56\0\1\33\3\0\1\33\2\0\1\33\3\0\1\33"+
60863	"\4\232\175\0\1\351\32\232\1\352\7\232\1\u04a2\2\232"+
14881	SortField.CUSTOM:
25742	valueids
20200	clauses.get(0);
1640	writer.addDocument(document);
36405	IOUtils.close(os);
43493	BitVectors
49511	firstQuery=q;
63071	term_start_char
52583	uniques.add(query);
10402	"\1\347\12\230\175\0\1\346\5\u016a\1\u0174\1\230\1\u016a"+
6316	defensive
60929	"\12\u02e2\175\0\1\u034d\27\u02e2\1\u04d1\2\u02e2\1\u034e\12\u02e2"+
11211	"\150\0\1\376\1\u041f\31\264\1\141\12\264\1\0\3\136"+
35060	bufferStart;
54151	terms/docs
34656	result.setDescription("btq(includeSpanScore=false),
8128	bufferStart)
27412	"\u0027\u0031\u0027",
17389	valu
7783	vals
8131	bufferStart,
59765	"\1\u0142\1\137\1\144\1\137\1\0\1\137\1\145\1\140"+
5171	jjMoveStringLiteralDfa0_0()
19219	Ï»Ï¿Ï
54254	[UTF-16]:
1529	readBufferSize),
38626	BitVector:
21103	time,
8697	threadsandfields
54047	normfilename
23256	HashSet<Term>
20470	time)
34697	incrementtokenclassic
52188	commitmergedeletes
19860	doTestCaching(INT_FIELD,FieldScoreQuery.Type.BYTE);
350	deleteReaderWriterConflict(true);
20351	cc.setNextReader(null,
25886	time"
61261	"\1\u02e1\160\0\1\u0349\4\u05ff\2\0\1\u05ff\15\0\1\u05ff"+
56717	OpenMode.APPEND).setIndexDeletionPolicy(policy));
12980	u4cf7
50520	a).setOpenMode(
3665	ClassicTokenizer.TOKEN_TYPES[ClassicTokenizer.ACRONYM];
57188	bits[word]
24761	Integer(Integer.MIN_VALUE)));
1460	listall
34165	rptind
56408	TestTieredMergePolicy
5648	bits="+Integer.toHexString(i)
34990	weight}
41683	rootNode.arcs[0].output
42734	#setEmpty}
64482	excludeSpans.next();
24681	assertMatches(String
50367	release(sr,
49896	setlenient
26758	loader
56953	StandardTokenizer.HOST;
26509	testDelete()
15609	loaded
48527	ScorerVisitor}
44814	,"i",
57101	cardinality()==0;
3505	(maxNumSegments
1525	readBufferSize);
22124	radix);
66904	Pair<A,B>(outputs1.getNoOutput(),
41556	(nextID
28195	org.apache.lucene.search.Scorer;
59428	"\2\0\3\33\7\0\1\33\1\0\2\33\7\0\3\33"+
60923	"\1\u04cd\33\0\12\u04ce\175\0\1\u04cd\33\0\1\u0484\1\u04cf"+
38598	newFSDirectory(dirFile);
28394	utf16[i].toString());
28449	1).toString());
60321	"\1\0\2\u0219\1\u0275\3\u0219\3\0\1\u0219\1\u021b\3\0"+
4271	TermRangeQuery(field,
23811	System.currentTimeMillis());
56899	"\0\u0214\0\u0222\0\u0230\0\u023e\0\u024c\0\u025a\0\124\0\214"+
67918	posLength
34956	weight.explain
59693	"\2\137\150\0\1\u0101\1\u0107\31\266\1\142\12\266\1\0"+
67333	couple.newReader;
51470	saved.
51219	info.name
66715	<p><h3>Valid
28988	idxName
39786	readOnly);
50583	commit.getSegmentsFileName());
21785	#setBoost(float)}.
34437	IndexReaderWarmer}.
28454	testcharsref
67599	assertFalse(r1.isDeleted(0));
24643	"OutOfOrderMultiComparatorScoringMaxScoreCollector",
65028	saved:
39911	(openReadOnly
9650	"\3\u4403\3\u44a6\3\u4549\3\u45ec\3\u468f\3\u4732\3\u47d5\3\u4878"+
32389	lockprefix
33362	.setIndexDeletionPolicy(new
50535	cloned;
28766	skipInterval,
8823	evaluate()
28621	tokenstart
56638	seconds;
2028	must
28797	skipInterval)
51096	cloned,
29648	"\6\0\u2ba4\146\14\0\27\146\4\0\61\146\4\0\1\31\1\25\1\46"+
21260	if(seekTo
1752	Removal
14882	comparatorSource
23848	seconds,
32100	Arrays.fill(buffers[bufferUpto],
51166	completes.</p>
51852	testPoint("midStartCommit");
50652	seconds.
23218	srchr
28762	skipInterval;
57180	~bitmask;
9961	"\1\25\1\65\7\0\1\65\2\0\1\25\1\135\32\155"+
30226	skipInterval:
56636	seconds)
24386	fc.purgeAllCaches();
32280	newFSDirectory(fdir1,
35683	ntz()
11281	"\1\230\1\347\12\230\175\0\1\346\30\230\1\u045a\1\230"+
19217	Ï¼Ïµ
47983	docBasePerSub;
15920	other.dir
31459	vary
32352	lockAttempts++;
61356	"\1\u063e\3\u02e2\175\0\1\u034d\32\u02e2\1\u034e\2\u02e2\1\u063e"+
807	MockTokenizer(reader,
11844	unlikely
39606	start++;
27457	"\u0030\u0308\u0300",
17576	w.addDocument(d1);
33193	att.reflectWith(reflector);
49300	part2==null
4784	writer.setSimilarity(new
22407	targetsize
50726	IndexWriterConfig#setMaxBufferedDeleteTerms(int)}
36210	other.label;
27984	"\u0031\u002C\u0308\u0001",
44782	DOTLESS
68077	~(~0
16245	helper
26080	fillFields,
52665	getdeclaredconstructors
26036	fillFields;
63192	guaranteed).
1482	termIndexInterval;
27365	"\u002C\u0308\u0061\u002C",
13381	u4ced
31672	testnumericfields
44735	IOTA
42082	getComparators()
6097	copy.getPayload());
25948	fillFields)
1628	termIndexInterval,
7445	posIncAtt
26425	#encode(java.nio.ByteBuffer)}
38201	Long.MIN_VALUE+0xfL,
32001	getCustom();
41415	don't:
9371	"\14\0\15\132\1\0\3\132\1\0\2\133\14\0\64\142\2\143\36\143"+
18082	Weight
15361	loadfieldnames
29066	IndexFormatTooNewException(in,
58593	testunmodifiableset
15660	si.docStoreOffset
5384	jjCheckNAdd(state2);
30326	prepare()
38520	"junk
36005	bitset.set
67168	System.arraycopy(existingOffsets,
23802	buggy);
40710	Sequence-of-ints
66584	tokentextlen
34873	multianalyzer
5924	MOD_MASK);
41814	prefixOutput,
59777	"\2\0\1\25\1\141\27\36\1\355\2\36\1\142\12\143"+
42516	testpayloadfieldbit
30776	2</code>
68154	posData
22854	sortablelongtodouble
32788	chararraydump
10772	"\12\230\1\347\1\u0299\11\230\175\0\1\346\32\230\1\347"+
21902	operates
58012	allocCount
59259	"\2\0\3\32\2\0\1\32\2\0\3\32\1\0\1\32"+
43710	justcompilespanscorer
11219	"\12\u0429\1\u03da\13\0\1\u0325\161\0\4\u0425\2\0\1\u0425"+
37870	<b>not</b>
11724	yyline;
17235	FieldsReader(storeDir,
4710	assertTrue(conf.getIndexDeletionPolicy()
31328	oldName.startsWith("29.")
34265	LogByteSizeMergePolicy}.
11862	<tt>ZZ_INITIAL</tt>.
50657	LogByteSizeMergePolicy})
58191	super.snapshot(id);
14835	parser.hashCode()^0x3aaf56ff;
60077	"\17\36\1\142\12\143\1\66\1\137\1\144\1\137\1\0"+
2585	maxoverlap
9477	(--count
41546	idv);
52372	writer.addIndexes(readers);
19695	(doc2
59816	"\1\u0153\10\266\1\312\21\266\1\142\12\266\1\u0154\3\137"+
21713	//assertEquals("open
27771	"\u0061\u0027\u0308\u0300",
55936	object);
17124	owner;
31178	"old"
64856	ParallelPostingsArray(final
50042	Remember
27649	"\u0061\u2060\u0027",
14682	missingValue;
47925	obj);
25000	testsortcombos
35593	B[i+2]),
23200	scores[0]
53082	(nextCH
8252	filechannel
57660	Arrays.toString(diffs);
7359	'least'
7399	FreqProxTermsWriterPerThread(TermsHashPerThread
28070	"\u0031\u002E\u2060\u0031"
24857	iter=0;iter<ITERS;iter++)
16930	parallelreader
38252	0x800000000000040L,
9352	"\12\134\12\0\6\132\2\0\2\133\1\0\22\132\3\0\30\132\1\0"+
54673	LockVerifyServer}
32886	encoderUpto
61219	"\20\u02e2\1\u05d5\5\u02e2\1\u034e\12\u02e2\175\0\1\u034d\16\u02e2"+
42940	AttributeSource.AttributeFactory
41818	(matches.size()
57764	testCommitThreadSafety()
14751	missingValue)
30159	threadResources.get();
35405	wants
18406	doc3);
55457	assertTrue(termPositions.next());
17137	owner,
8830	beforeClassCleanup()
9832	"\7\25\1\0\2\25\3\0\2\25\3\0\6\25\2\0"+
29677	"\13\0\70\135\2\133\37\146\3\0\6\146\2\0\6\146\2\0\6\146"+
40001	owner.
58594	testsupplementarychars
58501	testSupplementaryCharsBWCompat()
32538	(byte)0xD8
28050	"\u0031\u002E\u2060\u0030"
31402	"22",
53958	owner)
48484	weight)
18097	weight,
5662	floattobytes
60480	"\175\0\1\351\16\232\1\u0361\4\232\1\u0362\6\232\1\352"+
57100	capacity();
16929	testparallelreader
32551	charArrayDumpNIO(encoded)
48481	weight;
53423	interfere
26051	want.
37461	testExact()
30964	testtopdocscollector
35416	want,
17334	test_LUCENE3442()
11559	"\15\0\1\u0527\6\0\1\u0528\2\u0529\1\u0528\5\u0529\1\u052a"+
17053	Container
31372	2));
53395	newIOE
57941	iscfsfile
23485	!failed)
68001	newStringReader(s)),
43115	runTest(searcher,
28066	"\u0031\u002E\u2060\u0308\u0061\u0027\u2060",
7267	HitQueue
54421	buffer.append("\n");
29447	VALUE1
20079	weights
58382	"on",
57195	(startIndex>>6);
43671	Time(int
5291	".
38824	"0
46858	tilde
11720	zzStartRead;
20143	"+
44573	"Ä"
61214	"\12\u02e2\175\0\1\u034d\4\u02e2\1\u05cd\25\u02e2\1\u034e\12\u02e2"+
5952	",
30913	5.060466f,
19587	getDecodingReader(stream,
31828	"'
2835	"(
6906	")
5357	""
35887	other.setBoost(1.0f);
63807	x87652
63809	x87653
63813	x87654
18324	#"
14950	"A
66447	growParallelPostingsArray();
5927	";
12751	uba85
596	":
39122	Term[]{term});
44524	U+A7FB:
63806	x87651
13152	uba7b
1650	afterclass
41668	"8
52426	TOKEN_TYPE_LOWER_PREC
67991	testmockgraphtokenfilterbasic
58084	perDocTvf.getFilePointer();
13385	u4f79
41665	"4
56118	#1
39971	normsCache.get(field);
56116	#0
19805	doTestRank
6034	assertEquals(1048576,
44571	"Ä"
61641	uba71
52706	"I
56056	"B
18916	"C
63801	x87643
791	"a
63798	x87641
63799	x87642
59732	"\1\142\1\331\1\u011d\1\u011c\2\331\2\u011c\1\331\1\u011c"+
15137	"]
12984	u4f83
56055	"Z
15313	Integer.valueOf(i);
56057	"Y
56058	"X
9748	"\1\102\21\0\1\103\2\0\1\104\21\0\1\105\20\0"+
43284	FieldSelector}
12583	u4f8d
25499	HashSet<ReaderField>();
37883	backingStore;
20880	lastname
10680	"\30\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
580	"content7",
28250	tieBreakerMultiplier
64905	threadsAlive--;
40619	inputMode);
63794	x87631
37895	backingStore)
63795	x87632
30890	results[0].score;
12182	u4f97
37191	targethasarcs
44608	"Ä"
64726	Found,
33588	it!!
32812	testallnullinputnio
55243	ff1.size(),
58850	utf8.result[i])
32633	originalStringBuf2.limit(numBytes2);
40963	seekResult);
60104	"\6\266\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
6566	&le;8
58694	this.maxTF
55000	signalall
48914	RuntimeException("Documentnumber
4793	writer.getConfig().getMergeScheduler().getClass());
63792	x87621
64225	FunctionQuery
21486	Found:
662	!=
390	nothing
34989	wrapperWeight
29561	"\1\132\1\133\36\132\33\133\2\0\131\132\13\133\1\132\16\0\12\134"+
63571	arrIndex
26729	FieldSelector)
45055	U+A7FF:
14997	randomPhraseQuery(seed);
663	&&
34888	testposincrementfilter
52622	termquerys
49298	part1==null
10204	"\2\136\150\0\1\376\1\u0103\1\264\3\u0103\1\u010b\14\u0103"+
29834	"\1\0\1\25\5\0\1\25\2\26\5\0\1\25\2\0"+
50393	&=
64623	disallowed)");
16774	pr1Clone
43752	Å¸
60596	"\32\232\1\352\5\232\1\u01b1\4\232\175\0\1\351\26\232"+
21283	===========================================================
59982	"\13\0\1\u0126\160\0\51\u016c\1\u01a6\6\u016c\1\u016e\2\0"+
58751	"ab\udc17\ud917cd",
17796	Float.floatToIntBits(getBoost());
4300	'"
32337	lockPrefix)
44759	U+A7FE:
35065	currentBufferIndex
40895	terms/next()");
43886	'+
19528	(RuntimeException)
51528	allDeleted)
4992	startState;
58466	%s
2848	TimerThread.DEFAULT_RESOLUTION;
1581	sampleTerms)
28132	script
23703	mgr.record(searcher);
20153	maxCoord);
54743	path.getCanonicalPath();
43885	';
27592	"\u0300\u3031",
56861	"\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12\1\0"+
24507	locales
51619	mergingSegments);
1485	sampleTerms;
65971	bar\"",
54700	lockPrefix.
19655	ChunkState[postings.length];
3168	("
30723	int[11845];
66751	(#
26550	DocHelper.termvector.size());
25539	(!
33760	"c
54868	searcherFactory)
33753	"b
54870	searcherFactory,
43656	"e
3261	this.maxDocsToCache
33765	"g
24085	"f
34803	"multi"
33554	"h
14674	locale;
48374	this.minimumNrMatchers
24096	locale:
12350	uba8f
52822	follows.
66593	MockCharFilter(CharReader.get(reader),
35265	follows,
61444	"\1\u068a\15\0\1\u068a\6\0\12\u068a\1\u0658\175\0\4\u068b"+
26345	IllegalArgumentException("Arguments
23977	"x
61061	"\15\0\1\u0546\6\0\1\u0547\2\u0548\1\u0547\5\u0548\1\u0549"+
23990	"y
33212	touched
45053	U+A7FD:
48975	2005-06-04.
61116	"\4\u057c\2\0\1\u057c\15\0\1\u057c\6\0\12\u057c\1\u04f5"+
6972	NumericUtils#splitIntRange}
55888	ThreadLocals
4986	startState,
28204	follows:
62168	iw1.addDocument(doc1);
51676	diagnostics.put("java.vendor",
54062	testStopFilt()
19586	FileInputStream(file);
14735	locale)
31373	Integer.parseInt(v);
53480	docFreq(terms[i]);
6924	(q.max
17378	hits.scoreDocs)
54862	searcherFactory;
14738	locale,
1473	TestTermInfosReaderIndex
33475	NormalizeCharMap();
54596	last.order);
11785	zzStartRead,
45443	U+A7FC:
24686	hits.scoreDocs;
65240	root.inputCount
14732	locale.
54527	ArrayUtil.parseInt("".toCharArray());
29212	tvf.clone();
66538	intUptos[intUptoStart+stream]
66544	(byte)((i
49786	la1tokens
33143	PositionIncrementAttributeImpl",
58891	Objects
43739	+"
27075	"\r\u0308\u0031\u002E\u2060",
40044	segmentInfos.createBackupSegmentInfos(false);
2831	*=
48908	reader.get(50);
36782	ThreadLocal?
55447	omitNorms
5959	Arrays.fill(blocks,
4449	hashcode,
35711	(y
23467	(x
2092	(v
29762	"\2\32\1\0\1\32\17\0\1\32\11\0\1\32\20\0"+
41312	(w
10483	"\1\136\4\0\2\136\216\0\1\334\175\0\4\u0193\2\0"+
40146	(t
35508	(u
43564	i<count2;
18779	"ÎºÎ±Î¸Î­Î½Î±"
16748	(r
21618	(s
21621	(p
6235	(q
40595	br.bytes[br.offset+i]&0xFF;
20959	combine
28217	(n
29723	"\4\0\1\25\4\0\1\25\31\0\3\25\5\0\1\25"+
32425	MMapDirectory(dirPath,
55898	ThreadLocal,
6107	(o
38170	(l
43146	scores[i]
86	*/
7291	collect()
16626	(j
16634	(k
22811	(h
50957	getSegmentCount(){
19814	prevID
949	(i
17826	setdoccountpercent
17919	minRP,
3135	int[nextLength];
6587	<blockquote><strong>Schindler,
11793	java.io.Inputstream
24040	"E"},//F,y
43473	+B
43472	+A
49213	+;
14616	<p>Created:
2812	exceeded
8903	match(int
991	+=
26791	"the
41281	fstEnum.current().output).longValue());
27296	"\u003A\u0041",
43136	topDocs.scoreDocs[0].doc);
49461	<input>");
5893	+1
53158	(utf8[offset+2]&0x3f);
5866	+2
9844	"\4\0\1\167\14\0\1\61\4\0\1\170\2\0\1\171"+
43449	(A
25858	hashcodes
39165	pos<postingsFreqs.length;
18478	sb.append(whitespace);
37704	="low";
26363	(;
11644	"\1\u0560\6\0\12\u0560\1\u0554\175\0\4\u0558\2\0\1\u0558"+
64616	(9
63247	(8
38854	sdp.snapshot("c1");
49361	(?
19665	(>
25673	followed
23892	(=
50737	(<
26369	(2
55331	(3
19411	docsWithField.get(doc);
67034	docsperthread
947	(0
40731	while(value2
4068	(1
1826	(4
55336	(5
52657	Object.
3992	.isOverriddenAsOf(clazz)))
2694	iw.addDocument(d);
42742	Object,
49882	setrangecollator
19015	()
39486	byte[10];
35507	(a
3365	collect's
3703	(c
39829	buffer.append(segmentsFile);
5525	(b
34299	setOpenMode(OpenMode
38033	mask=(1L
48723	<b>WARNING:</b>
67045	super(random,
39213	(d
34018	(g
58748	"ab\ud917\ud917cd",
5543	(f
2833	larger
22499	enableBackwards
728	it's
1023	);
48868	set.size()
28242	it).
65372	commonoutputprefix
14853	it'd
3689	's
43561	i<count1;
42060	hitA.doc
48961	)*
24274	),
17977	).
49204	-a
21547	createrandomfile
11886	String(
50815	shouldClose()
23165	searcher.doc(hits[0].doc,
58233	String.
67857	/,
51106	pendingMerges.removeFirst();
67744	String)
16193	f.setBoost(i);
232	/*
20933	String,
48511	gather
7311	..
19387	negated,
43874	.=
66539	bytes[offset]
39609	output.writeBytes(termBytes,
4994	(;;)
34419	large;
10696	"\150\0\1\376\31\264\1\u024c\1\141\12\264\1\0\3\136"+
49069	rethrow
63130	findTerms(r);
18452	does_not_exist
49171	IllegalArgumentException("Field
271	0,
5853	0.
50671	large,
19663	relative
950	0)
66754	large.
32682	IndexableBinaryStringTools.encode(original2,
42589	large)
126	//
20174	topScorer
21024	/=
9098	String>
11682	large"
19082	"å",
8956	(endEnum())
49205	+a
5871	2)],
25423	"top
36515	"too
25654	conjunction
41126	stopNode
67250	t.setTermBuffer("hello");
3855	isTokenCharMethod
37230	arcandstate
56218	m.getModifiers();
53900	String(buffer.getBuffer(),
22822	1948649653);
7735	lamb,
56556	reqexclscorer
17491	assertNotNull(fieldInfos.fieldInfo("f4"));
20504	org.apache.lucene.util.IndexableBinaryStringTools},
30861	generator
21797	treated
11535	"\13\0\1\u0325\242\0\1\u0325\214\0\2\u04fa\1\0\2\u04fa"+
61457	"\1\u034e\5\u02e2\1\u0693\4\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
35545	c=A[i+7];
8161	-=
36117	BytesReader,
8737	->
45831	"Ã¹"
63179	terms_per_doc
15115	doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);
43895	Folded
2352	ScoreDoc
30873	collationKey.length);
33267	(ud.get("index").endsWith(ids))
17072	Strings
62908	files[j]);
17266	fieldsreaderorig
3128	--
4757	-1
26802	10).totalHits);
4797	writer.setTermIndexInterval(40);
8848	runner
20373	String}
49215	-;
27966	"\u0031\u0027\u0308\u0061\u003A",
40566	(inputMode
5812	2]
969	3;
20430	4"
15505	bufferedDeletesGen;
54138	1}
5036	33
5047	34
50880	2X
24431	setBottom(int
5090	3:
53426	DecimalFormat("00000000000",
5031	38
16766	4.
1320	4,
4048	org.apache.lucene.util.NumericUtils;
5061	42
41397	(args[idx].equals("-noverify"))
2045	node.arcs[arcIdx];
67701	copyBuffer(buffer,
68002	right.tokenStream("foo",
63104	_TestUtil.randomFixedLengthUnicodeString(random,
781	4)
2334	hits.totalHits
4161	2:
1723	2;
48247	subSpans[i].doc())
8448	lockfactoryclassname
22203	reallocate
5807	1]
27751	"\u0061\u0027\u0308\u000B",
65927	t:one)
20426	3"
9172	24
54150	26
38028	prefixVals[i]
28747	27
38308	28
33666	1X
4249	3,
17500	doc223
16764	3.
9659	zzUnpackRowMap(String
5599	0xff);
28748	30
56860	"\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0"+
5732	32
5693	31
5513	getnexttoken
59324	"\1\0\1\51\1\0\1\71\2\0\1\72\3\0\1\54"+
44703	,"h",
5531	3)
1713	1;
23557	19
52557	UnsupportedOperationException("Query
4159	1:
2613	17
23556	18
16849	origReader.close();
6705	15
23555	16
18517	13
23554	14
17583	w.addDocument(d2);
16789	11
5643	(b1!=b2
20435	12
28746	21
33931	(MTP)
2847	20
8047	2.
5001	1L
30421	"output.txt");
1274	2,
22089	NumberFormatException
7066	2)
52306	payloadLength()
19661	advance(target)
2148	readnextrealarc
53165	CharsRef)}
20422	2"
36934	Map<Integer,Integer>
10919	"\1\u032d\5\u032e\1\u032f\14\0\1\u02cf\161\0\4\u0330\2\0"+
2917	0:
142	0;
1120	name.equals("rollback
66591	newmask
16763	1.
5039	0L
2398	10
3585	1)
610	1,
36742	1+
20415	1"
52891	CONTRACT,
5095	7:
34134	"+ext);
60313	"\2\0\1\u02da\15\0\1\u02da\6\0\12\u02da\1\u0272\175\0"+
6451	recording
5344	6]
2633	7;
7335	allocating
59542	"\1\0\1\25\2\0\1\25\2\0\3\25\1\0\1\25"+
5032	8)
24702	(v.length,
47892	8.
4074	8,
5092	82
10492	"\1\u019b\15\0\1\u019b\6\0\12\u019b\1\u0162\13\0\1\u0122"+
29620	"\1\132\1\0\37\132\2\0\65\132\1\0\7\132\1\0\1\132\3\0"+
5100	84
62534	dualConjunctionSumScorer(
21630	Current
37825	java.lang.Character.isLetter()
2804	occurred,
32273	assigns
5089	68
1741	6;
5091	6:
43478	testspansearchequivalence
3864	generates
28857	IntBlockPool(termsHash.docWriter);
62804	fd.fields[idx]).intValue()
7556	occurred.
14813	properly
5012	7)
6449	7,
50106	#addDocument(Document)
5387	generated
19463	7.
30592	"\1\156\16\0\1\157\2\0\1\160\21\0\1\101\17\0"+
2402	70
58018	no-term-vectors
2132	scratcharc
5631	75
65123	lastInput.length-idx);
19051	"<EMAIL>",
951	5;
5034	5:
116	newDirectory();
11030	"\160\0\1\u0332\4\u0390\2\0\1\u0390\15\0\1\u0390\6\0"+
33691	4X
38258	56
38013	prefixVals=new
56059	6"
56656	lastDeleteTime
63150	for(byte
10183	"\2\0\1\25\1\140\3\36\1\u0100\26\36\1\141\12\142"+
21714	openDeletedFiles,
6133	6,
40093	latest.getGeneration();
27497	"\u005F\u0041"
29943	"\5\0\1\25\2\0\1\25\1\54\4\0\1\25\2\0"+
41369	((totSec*1000000000/ord))
6829	6)
20335	allocation
20400	org.apache.lucene.search.Sort;
5757	64
55975	tokenCount++;
38264	62
5865	63
37077	Converged!
38261	60
16769	6.
50229	HashSet<SegmentInfo>
63938	testcrossplanenormalization
57739	3X
25667	this.entries
743	4;
22610	2x
5030	4:
50431	doOpenStores
15887	45
40520	crucial
5066	((0x7bfff8f8ffffd9ffL
37617	testRandomPhrases()
52728	"two
20434	5"
51127	testPoint("rollback
49331	BooleanQuery(disableCoord);
23190	ramDirectory1=newDirectory();
842	5)
5700	(KeywordAttributeImpl)
5209	5,
9169	FrozenBufferedDeletes
60180	"\3\0\1\137\4\0\2\137\150\0\1\u0101\31\266\1\u0256"+
36634	(follow.target
11671	zzUnpackTrans(String
16768	5.
15190	50
41007	pairs.get(upto).input)
30816	(ended
58435	set.contains(NOT_IN_SET));
62691	content[contentIDX]
64415	compressor.end();
36416	"v="
14536	zzeofdone
42112	IntsRef(int
1917	Bulk
22659	<0
38957	testfieldcachereuseafterclone
34726	multi").toString());
31245	compressed.getBinaryValue()));
33158	src1.hashCode();
18524	Õ¥Õ¶
15952	delcount
10998	"\150\0\1\376\10\264\1\u0376\21\264\1\141\12\264\1\0"+
5383	jjCheckNAdd(state1);
9453	"\2\0\1\2\1\0\1\2\6\12\3\0\2\12\1\0"+
27692	"\u0061\u003A\u0308\u0001",
4110	val=distance*l+startOffset;
18402	doc2);
66190	{2,3,1,0};
51125	segString(segmentInfos));
31670	addnoproxdoc
60085	"\2\266\1\u01f6\7\266\1\0\3\137\1\0\2\137\1\140"+
944	doc.add(newField("other",
51782	mergedReader))
18329	printHits("testSimpleEqualScores1",
15281	FaultyFSDirectory(indexDir);
33903	multi-term
67858	:.
38558	2.0f);
23915	double-close:
23397	false)).setMaxBufferedDocs(100)
10190	"\1\264\1\u0103\1\u0108\6\u0103\4\264\4\u0103\1\264\1\u0103"+
66872	encodeNormValue(float
16137	4.6699767f
34044	tmp.add(new
51378	flushDocStores,
37553	99
54606	testarrayutil
5098	9:
68132	lessThan(ScoreDoc
5094	9;
57010	hence
17639	initvaluethreadlocal
55544	97
37744	94
50691	IndexWriterConfig#getReaderTermsIndexDivisor}
52804	90
4368	testRangeSplit_8bit()
42244	assertTrue(assertCloneIsEqual.isKeyword());
29395	byte_block_size
26316	8L
18949	9,
48790	i=0;i<testFields.length;i++)
5093	9)
42887	#append(CharSequence)},
60941	"\14\0\1\u0126\161\0\4\u04da\2\0\1\u04da\15\0\1\u04da"+
67519	this.stopped
5096	8:
5033	8;
10708	"\2\136\150\0\1\376\32\264\1\141\7\264\1\u0258\2\264"+
11180	"\6\230\175\0\1\346\2\230\1\u03a7\27\230\1\347\12\230"+
34778	(super's)
15345	testdoc
32873	perThread.doc.addField(termsHashPerField.fieldInfo.number);
10909	"\12\u031e\1\u02c2\175\0\4\u031f\2\0\1\u031f\15\0\1\u031f"+
43347	inputSize;
67652	subreaders0
67653	subreaders1
67654	subreaders2
67655	subreaders3
49319	cal.set(Calendar.HOUR_OF_DAY,
18887	String[]{"she's"});
62751	TopDocs[]
32021	=~
43556	doTestDgaps(1000000,3123,3126);
32043	org.apache.lucene.util.FieldCacheSanityChecker}.
35414	this.kind
7957	MMapDirectory(File
21847	Fieldable[result.size()]);
15162	worthwhile.
48020	(implements
31733	-delete-prior-commits}
60866	"\1\352\4\232\1\u04a5\5\232\175\0\1\351\26\232\1\u04a6"+
48135	subclassing.
29509	property
36455	"false"
43344	inputSize)
54266	assertAllIn(strings,
12580	u4da4
33258	"+id);
11903	rule)
18349	>?
5116	>>
22218	minSize
51367	pendingCommit.getSegmentsFileName()
34129	?)
60961	"\31\232\1\352\12\232\175\0\1\351\10\232\1\u04e8\21\232"+
55866	warmcount
7651	getMessage()
9995	"\3\0\1\135\33\136\12\156\1\0\3\136\1\0\2\136"+
61170	"\12\u02e2\175\0\1\u034d\1\u05ac\31\u02e2\1\u034e\12\u02e2\243\0"+
11686	ZZ_ATTRIBUTE
27168	"\u3031\u0308\r",
17916	pad(signedIndexDir.maxR);
64684	_TestUtil.randomRealisticUnicodeString(random));
9981	"\1\76\3\0\1\135\1\273\1\274\1\275\1\276\1\277"+
20184	>1
6935	max.hashCode()^0x733fa5fe;
780	>=
56114	q.setBoost(100);
49133	Hungary</code>.<br/>
3741	<a
19430	getdocswithfield
33538	=>
666	==
565	run()
8921	innerset
51523	mergedReader);
28243	But,
8022	IOException("unable
12179	u4dae
15808	locally
29820	"\1\0\1\36\1\0\1\37\1\0\1\40\1\0\1\41"+
36122	(FSTEnum,
59170	"\3\u4ced\3\u4d90\3\u4e33\3\u4ed6\3\u4f79\3\u501c\3\u50bf\3\u5162"+
34704	trivial,
43248	assertTrue(tdocs.skipTo(0));
22336	<T
8846	rules
18424	Term(f,
671	Throwable().printStackTrace(System.out);
18932	<>
17746	ConstantScoreAutoRewrite#DEFAULT_DOC_COUNT_PERCENT}.
25528	insanity.toArray(new
2790	<=
1711	<<
26658	testnevercallingpeek
37813	normsfield
1198	dir.deleteFile(files[i]);
50738	interactively
19509	<E
10646	"\1\26\2\0\1\25\1\u011a\32\36\1\141\12\u0218\1\u014f"+
65516	(fileName.startsWith(IndexFileNames.SEGMENTS))
23605	(dir.fileExists("_0_1.del"))
16974	length;)
4139	NumericRangeQuery<Integer>
30261	getthreadresources
53805	would...
17788	rewriteMethod.rewrite(reader,
42146	(aInt
52376	(addToEmptyIndex
52000	DW
28335	subScorers[i]
25492	readerFieldToValIds
17672	RewriteMethod
44331	DZ
38983	map.get(key,0,key.length).intValue());
18844	E.
40390	wrongly
38140	assertLongRangeSplit(final
44199	"Ä"
51265	DS
21233	assertEquals(msg
19515	E,
30456	stiB.base;
55750	testMergeWarmer()
43120	"ipod"));
67939	testMockGraphTokenFilterBasic()
32736	numBytes),
51999	FC
20645	assertFalse(fileExtensions.contains(ext));
28073	"\u0031\u002E\u2060\u0031\u0027",
25867	nearspansordered
19106	testRandomStrings()
4896	Do
46608	EN
40193	this.matchingSegmentPos
46611	EM
55159	verifyEquals(r1.document(id1),
44670	"Ä§"
67859	EG
58912	isIndexed
21954	numBytes);
58534	testCopyCharArraySet()
17882	F,
7893	GC
64794	validTerms.length
52679	currentScore);
17221	coreClosedListeners.remove(listener);
19435	DocFieldConsumerPerField
2321	tearDown()
36131	GB
54139	teststopfilter
42868	payload.hashCode();
59386	"\2\0\1\26\6\0\1\25\122\0\1\25\6\0\3\25"+
39412	tp.skipTo(target);
58106	pp1.ord
11258	"\1\u0446\1\u0448\1\u0447\2\u0446\2\u0447\1\u0446\1\u0447\1\u0446"+
25596	rf.fieldName);
44569	FL
2435	theSearcher.close();
60566	"\1\u03b1\5\u03b2\1\u03b3\175\0\1\u0349\4\u03b0\2\0\1\u03b0"+
44553	FF
1689	termbytesref
32272	(LockReleaseFailedException
44565	FI
20783	Eg
15591	storesSegment
59516	"\1\57\2\0\1\60\4\0\1\61\14\0\1\62\4\0"+
31187	"20.nocfs",
10881	"\1\u0307\1\264\1\141\12\264\1\0\3\136\1\0\2\136"+
59066	size[0]++;
54797	isLocked
55465	termAtt.setEmpty().append("b");
11218	"\1\u0325\161\0\4\u0429\2\0\1\u0429\15\0\1\u0429\6\0"+
42447	PayloadFilter(ts,
1379	getname
48851	this.offsets[i].length);
45800	"áµ¾"
63545	0xff];
51726	Hold
23563	doIndexing="
16206	makeQuery(String
8961	increments
54457	(keywordSet.contains(termAtt.buffer(),
58969	two.clone();
63072	term_char
14634	FLOAT
64569	useBuffer)
1958	ramoutputstream
43820	assertTermEquals("o",
37079	retry");
14988	q2.add(t,
44197	"Ä"
30347	assertTrue("rollback
62634	"Optimize
35855	A,
257	AT
60045	"\12\u01db\1\u01dc\175\0\4\u01dd\2\0\1\u01dd\15\0\1\u01dd"+
32210	assertTrue("RAMDirectory
44105	AV
44101	AU
23180	testNormalization(1,
67318	dir5);
44113	AY
41850	outputs.newPair(e.getValue().a
43466	B"
44083	AA
43448	B)
44087	AE
35856	B,
67040	"xx";
26191	i=0;i<valueCount;i++)
4616	assertEquals(TieredMergePolicy.class,
44097	AO
16905	testindexreaderclone
31848	AM
52889	AN
45131	BY
24627	BS
37385	in.readString();
17424	At
3775	As
58083	fieldPointers[numVectorFields]
6283	BooleanClause(getRangeQuery(fields[i],
49146	lowercaseExpandedTerms)
65579	commits.get(readFrom);
48830	testReader()
2670	iw);
29933	"\1\25\1\0\1\25\4\0\1\25\4\0\1\54\1\0"+
64002	CLEF")
17983	++docnum)
32656	testEncodedSortability()
51636	BD
52874	BE
9030	lastBytes.copyBytes(scratch);
1621	An
49148	lowercaseExpandedTerms;
24630	BQ
33085	attributes",
406	writer.addDocument(createDocument("c"));
5779	By
39505	".tis"));
55939	purge();
51797	newestSegment()
39854	clone(boolean
43314	Locations
44346	DB
29829	"\11\0\3\25\5\0\1\25\1\0\1\25\1\0\1\25"+
21773	ArrayList<Fieldable>();
49260	source.close();
5537	Float.intBitsToFloat(bits);
17345	"headline"));
56955	CJ
31466	"_0.cfs");
1888	never
56993	buffer.append("b[").append(i).append("]=").append(bytes[i]);
23763	Be
20916	increment.
52599	(BooleanQuery
61020	"\15\0\1\u0525\6\0\12\u0525\1\u0497\13\0\1\u0126\160\0"+
30777	newCharacterBuffer(final
60552	"\163\0\34\u01d0\12\u03a5\1\0\2\u01d0\1\u0214\3\u01d0\1\u01d2"+
38100	testFloats()
9720	"\1\0\1\32\1\0\2\32\1\0\1\32\1\0\1\32"+
34455	getMergePolicy()
41394	(args[idx].equals("-docFreq"))
32240	!searcher.hitException);
32662	numBytes1)
64832	loc++;
56970	HOST;
51663	setDiagnostics(SegmentInfo
45035	LZ
48388	Hook
29770	"\1\47\16\0\1\50\2\0\1\51\41\0\2\25\1\52"+
45015	LL
16071	!searcherThread2.failed);
45031	LS
56644	expireTime)
54646	getMatch())
26687	BooleanQuery.TooManyClauses
56660	Thread.sleep((int)
32503	double-write.
62871	HOST.
56753	N)
57755	double-write:
50309	N,
34992	wrapperWeight,
11449	"\2\0\1\u04d8\15\0\1\u04d8\6\0\12\u04d8\1\u04d9\175\0"+
5576	SmallFloat.byteToFloat((byte)i,
23650	docsInSegment.incrementAndGet();
43696	JustCompileSpans
16244	super(KEY,
44294	"Ä"
3233	MB
38273	0x800000000000251cL,0x800000000000251cL
32683	numBytes2,
872	reader.termDocs(t);
32692	numBytes2)
2014	((Builder.CompiledNode)
52983	0xffff
35005	wrapperWeight)
65761	(int)Math.ceil(Math.pow(f,power));
60950	"\12\232\175\0\1\351\32\232\1\352\11\232\1\u03e8\175\0"+
32659	numBytes1;
61014	"\1\u0522\15\0\1\u0522\6\0\12\u0522\1\u04d5\174\0\1\u0168"+
45165	NJ
67239	cs.close();
55625	r1.document(50).getField("id").stringValue();
20626	primaryDir.setCheckIndexOnClose(false);
54643	getMatch();
44229	"Ä"
56079	cspq(Term
2541	teardown
32673	numBytes1,
55527	keyword_text
17629	ctl.set(null);
3105	scorer.score();
58089	freecount
42250	att.isKeyword()));
62336	q.getSpans(searcher.getIndexReader());
6172	@version
15423	NO
34557	org.apache.lucene.index.Term}
18076	OK
15686	((normGen
14758	unless
51724	sourceSegments.size())
56115	scorer.score(),
45369	OE
56958	HOSTs
74	OF
25622	hierarchy
4685	testToString()
44968	"Ä¾"
25270	doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));
65424	rord("banana")=2,
51479	sourceSegments.size();
57128	P4
7890	OS
45379	OU
7656	No
33940	P1
64070	is.readInt());
41964	totsec
45375	OO
57757	(commiting)
4701	str.indexOf(f.getName())
72	OR
33946	P2
9268	PM
6683	On
60240	"\6\0\12\u0289\1\u0228\13\0\1\u0126\160\0\1\u0168\4\u0289"+
17348	cases),
40921	assertNull(Util.getByOutput(fstLong,
44203	"Ä"
19423	negate="
66158	w.addIndexes(copy);
43337	SortedVIntList(int...
44713	HV
48138	allowedSlop;
16658	upheap
18455	firsttime
48991	inherits
44201	"Ä"
48294	allowedSlop)
57073	long[bits2words(numBits)];
23257	termsSet
15470	sizeInBytesWithStore
31133	ID
38214	assertLongRangeSplit(lower,
9154	aborting
37369	out.writeInt(version);
59151	"\2\uec25\2\uecc8\2\ued6b\2\uee0e\2\ueeb1\2\uef54\2\ueff7\2\uf09a"+
37564	II
44817	IJ
33081	it.next());
52867	IN
3982	IO
27835	"\u0061\u0027\u2060\u0308\u0061\u002C",
8364	IP
8385	locking
57448	IR
27564	"\u00AD\u0300",
52850	IS
49862	getautogeneratephrasequeries
193	IT
4777	IW
44227	"Ä"
49015	Operator.OR;
67526	this.task.stop();
3336	maxrammb
58807	char[2];
4717	conf.setIndexDeletionPolicy(new
68128	lessThan.
21222	createSequenceFile(Directory
32365	nolockfactory
17252	owner
25962	Id
51568	MB\n
1772	If
35828	christian
3399	In
46689	CURLY
55519	reader.hasNorms("f2"));
44225	"Ä"
34643	Is
39665	subscorerdocid
2174	It
53264	(TwoLongs)
57486	KB
5747	sacrificing
8051	IllegalArgumentException("Maximum
28624	getsuffix
7422	termshashperfield
32660	numBytes2;
64554	bufferSize="
43416	lastbytepos
48602	(stringValue
45390	,"oe",
65312	"arc.label="
24516	"dk")));
43813	assertTermEquals("ae",
44223	"Ä"
23090	optimizing
35266	(curStorePayloads)
9897	"\5\0\1\25\2\114\5\0\1\25\3\0\1\25\1\114"+
43719	LA
5498	tokenmgrerror
38872	IndexReader.ReaderClosedListener
14823	other.locale.equals(this.locale))
9434	"\2\132\1\0\154\132\41\0\u016b\132\22\0\100\132\2\0\66\132\50\0"+
185	reader2.docFreq(searchTerm3));
64679	(isEnd)
57968	sd[i].score
17231	IndexFileNames.COMPOUND_FILE_STORE_EXTENSION),
22978	testcollectionutil
45010	LJ
29427	Overrides
37692	org.apache.lucene;
21107	Condition
67756	csq;
3543	message,
44434	"Ä"
1091	message)
40723	Up
1651	testterminfosreaderindex
67234	command);
53385	VM
40614	inputMode="
59430	"\2\0\4\33\2\0\1\33\136\0\1\25\3\0\1\25"+
56011	csq,
38435	mergeFactor
43450	testSpanOrVersusBoolean()
67733	csq)
20482	testdatesort
11921	message;
50711	#setMaxBufferedDocs
10147	"\6\36\1\352\6\36\1\352\4\36\1\352\4\36\2\352"+
39842	int[subReaders.length
22828	T}
24709	V>
37635	ts.reset();
19514	objects)
52553	<li>Some
38496	Set<TermVectorEntry>
3877	To
56166	cspq
64857	textStarts
7895	objects,
44635	,"g",
45907	UE
65113	doPrune="
17076	objects.
48325	matchslop
21699	(System.currentTimeMillis()
57737	Ending
35929	setPreviousTokenStream(tokenizer);
45735	TZ
17064	addTerm(String
37049	never)
20052	occur));
44367	"Ä"
43018	refreshIfNeeded(G
18369	BooleanClause.Occur.SHOULD);//
63086	org.apache.lucene.index.Test2BTerms
22321	swap(int
7701	messages
20026	BooleanQuery(boolean
32241	Cleanup
34218	default).
66433	textStart;
56439	testForceMergeDeletesMaxSegSize()
2802	We
19811	q,s);
6716	depending
22030	<li>Parallel
5444	xfffffffbffffffffl
44369	"Ä"
4434	QueryUtils.checkUnequal(
66432	textStart)
34972	FilteredQuery.this;
66431	textStart,
52053	getifexists
66369	textStart1
54759	X,
66371	textStart2
2717	assertTrue("Unexpected
7586	retval.append("\\t");
1256	"silly"));
51145	readerPool.dropAll();
17901	assertEquals("nul,min,F,T",
40886	assertNotNull(pair);
45956	VY
6405	CharReader(input);
22228	array.length);
31789	infoStream;
25598	RF
25700	<bPNOTE:</b>
11089	"\175\0\1\376\3\264\1\u03c5\26\264\1\141\12\264\1\0"+
67725	setEmpty()
7793	doTest(new
19954	map.containsKey(o);
52852	IS",
44296	"Ä"
37903	backingStore.get(new
2109	quadratic
25404	testcomposition
53928	udc1c'
22585	tostringmethod
66466	intPool.intOffset;
25629	all.get(i);
21970	TermInfosWriter
8284	forname
33283	rollBackLast(expectedLastRecordId);
51785	Readers
2262	org.apache.lucene.index.Term;
28811	writeSkip(IndexOutput
45483	QP
25402	lowercasefiltermock
58680	Reader}
44432	"Ä"
57174	(numBits
7333	optimize
31801	infoStream,
10152	"\1\352\10\36\1\141\12\142\1\65\1\136\1\143\1\136"+
26093	(trackMaxScore)
50753	infoStream)
7270	PQ
10725	"\1\u0214\2\u0212\1\u0215\3\u0212\1\u0216\5\0\2\u0212\4\0"+
5840	Or
20618	org.apache.lucene.index.IndexWriter;
65502	locked()
33145	PositionIncrementAttributeImpl);
55508	TF
58862	udc17abcd
67801	csqs
6588	U,
10157	"\2\352\10\36\1\352\1\141\12\142\1\65\1\136\1\143"+
44258	"Ä"
46466	,"14.",
31799	infoStream}
45748	TH
220	TO
31696	assertTrue(tokenStream.incrementToken());
19522	(priorException
45755	TS
15697	So
49813	jj_rescan_token()
2885	collector
22702	values[doc]
45657	ST
64015	65536;
30112	this.termOrd
18379	printHits("testBooleanOptionalNoTiebreaker",
22318	T>
29716	"\1\0\2\25\1\0\16\25\1\0\2\25\1\0\1\25"+
45742	TC
41853	prefixOutput.output2),
26194	current.set(index,
22042	SearcherFactory
29059	(tvdPosition-lastTvdPosition);
11995	SE
27507	"\u005F\u0030"
45067	"áµ¯"
34494	sb.append("delPolicy=").append(delPolicy.getClass().getName()).append("\n");
35472	wordOffset,
34814	TestFilter
44261	"Ä"
57373	OpenBitSet))
12582	u4eea
17873	T,
27664	"\u0061\u2060\u0300"
40449	Reader;
54321	testadd
50408	SR
29705	"\1\0\1\25\1\0\1\25\1\0\1\25\1\0\3\25"+
49816	p.first;
25806	this.inOrder
10843	"\12\230\175\0\1\346\1\230\1\u02e3\30\230\1\347\12\230"+
36419	65535:
19235	Ï»Ï»Ï
35499	wordOffset;
57076	OpenBitSet()
56869	"\1\12\1\0\4\12\2\0\7\12\1\0\7\12\1\0\27\12\1\0"+
61110	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\1\u0317"+
52292	PerDirPayloadProcessor(Map<Directory,
28567	Reader.
56163	csrq
27531	"\u005F\u0031"
66386	postingsArray.textStarts[term];
56065	Field.Keyword("all","all"));
50540	<code>conf.getOpenMode()</code>
12181	u4ef4
48815	testToken
44929	"Ä¿"
35617	\|
6992	NumericUtils.doubleToSortableLong(min.doubleValue());
24788	assertIntResultsOrder(TopFieldCollector
64622	vLong
6922	(q.min
29571	"\2\0\3\133\3\0\1\133\7\0\4\132\1\0\1\132\7\0\12\134"+
48756	compareTo(TestToken
12983	u4ee0
28933	intVal(int
44606	"Ä"
28051	"\u0031\u002E\u2060\u0308\u0030",
22808	^=
9423	"\5\102\1\100\1\102\3\100\7\102\1\100\23\102\5\67\3\102\6\67"+
50301	AlreadyClosedException}.</p>
58180	persistSnapshotInfos(null,
53372	bufferSize);
23891	tracker's
2783	a)
16508	a,
27282	"\u0041\u0031\u002C",
47093	a0
33754	a"
13384	u4ed6
44375	"Ä"
20279	coordfactor
31359	assertEquals("didn't
26490	DocHelper.writeDoc(random,
39568	fieldInfos.fieldName(lastFieldNumber)
15025	a'
51448	"doFlush");
47340	a9
41830	a;
37814	matchallscorer
57858	color="red"><b>NOTE:</b>
36789	skip(int
53325	_o
21436	a1
55545	writer.addDocument(DocHelper.createDocument(i,
21437	a2
42063	MultiComparatorsFieldValueHitQueue(SortField[]
26071	TopDocs}.
47029	a3
47209	a4
47030	a5
66074	assertEquals("+f1:one
62998	_NUM_CHAR
47249	a6
47287	a7
6361	flags.length))
47314	a8
10665	"\1\u01dd\242\0\1\u01dd\33\0\2\u01de\1\0\2\u01de\2\0"+
58290	aBytes
9162	Holds
37519	searcher.search(termQuery,
36098	org.apache.lucene.util.IntsRef;
59134	"\2\u9630\2\u96d3\2\u9776\2\u9819\2\u98bc\2\u995f\2\u9a02\2\u9aa5"+
17511	doc223.get("f3"));
59928	"\1\25\1\66\7\0\1\66\2\0\1\25\1\0\32\25"+
51041	err.initCause(t);
10887	"\2\136\150\0\1\376\32\264\1\141\3\264\1\u030c\6\264"+
37536	hits[2].doc);
4473	min_value
50471	["
44438	"Ä"
49737	(jj_rescan)
61094	"\1\u034d\32\u02e2\1\u034e\1\u02e2\1\u055b\10\u02e2\175\0\1\u034d"+
35360	org.apache.lucene.search.DocIdSetIterator;
8013	getCleanerMethod
52341	Field("p",
67199	setfrequency
34793	qp.parse("the
62897	tokentype
20035	totally
23142	"x",
44656	"á¸ª"
27701	"\u0061\u003A\u0308\u3031",
31750	X]
44440	"Ä"
43212	reader.getTermInfosIndexDivisor());
29517	nonstringproperties
3428	estimatedMergeBytes;
57299	(OpenBitSet)super.clone();
24640	OutOfOrderMulti*Collector
17449	Filter.
17685	Filter,
17096	setexpectations
2864	[]
49700	jj_2_rtns[i]
15944	documentwriter
42129	otherInts[otherUpto])
51839	pending");
51040	merge.getException();
20575	streams.source.reset(reader);
10744	"\4\u0277\2\0\1\u0277\15\0\1\u0277\6\0\12\u0278\1\u021e"+
7211	Filter{
35646	])
19375	Filter}
17955	],
2705	myHc
8353	myID
59294	"\1\0\1\51\1\0\1\52\2\0\1\132\3\0\1\54"+
26202	get(i));
37274	<code>stopWords</code>
64387	java.util.zip.Inflater;
10754	"\1\u027d\26\230\1\347\12\230\175\0\1\346\7\230\1\u027e"+
54132	MockSynonymFilter(tokenizer);
62957	asString(files)
31307	changeIndexWithAdds(random,
44371	"Ä"
11981	];
36491	inCounts[target.node]++;
44436	"Ä"
26075	docsScoredInOrder
35491	\&
55983	getOffsets(int
20497	Filters
27630	"\u0061\u2060\u0308"
56592	commit.getGeneration());
52961	0x3F)));
38572	locked",
58147	IllegalStateException("directory
578	"content4",
36567	1+ord:
44373	"Ä"
40395	LUCENE_20,
62737	topHits;
51673	Constants.OS_VERSION);
39685	subReaders;
23126	(indexWriter!=null)
30999	fw
32411	fx
2097	h;
67356	subReaders1
8267	gc
10697	"\150\0\1\376\24\264\1\u024d\5\264\1\141\12\264\1\0"+
67349	subReaders0
11547	"\2\0\1\u051d\15\0\1\u051d\6\0\2\u051e\1\u051d\2\u051e"+
67378	subReaders3
41998	i'
67367	subReaders2
53292	(doShare)
30902	6.953706f,
36802	ForwardBytesReader(byte[]
37141	gb
18330	h,
35802	unpatched,
15381	references
32410	fl
37790	getSimilarity().decodeNormValue(norms[docID()]);
57389	h)
853	ff
55078	th.range
4666	testConstants()
7535	fi
23161	fs
31221	fr
26521	testGetFieldNameVariations()
10850	"\12\230\175\0\1\346\24\230\1\u02eb\5\230\1\347\12\230"+
28994	fn
25093	fq
52284	fp
22196	(invalid?)
40397	LUCENE_21,
974	i;
4358	i<
54242	assertEquals(numEntries,
22322	j)
7854	org.apache.lucene.util.Constants;
4781	he
3966	oldIoBuffer
53541	hc
23583	Cannot
5666	i0
20698	i.
7250	topDocs()
557	i,
11220	"\15\0\1\u0425\6\0\1\u0426\2\u0427\1\u0426\5\u0427\1\u0428"+
43481	testspanorversusboolean
948	i)
854	gg
55350	arr[i*2]
8736	binding
8234	clones'
51453	docWriter.bytesUsed()
5121	i2
5118	i1
7062	go
47170	f6
47612	f7
47315	f8
18297	dw
47326	f9
53745	CharArrayMap<Object>(matchVersion,
32434	dx
15335	f;
47025	dz
64875	bytestarts
36106	nodeCount,
2179	indicate
579	"content5",
47059	ea
47060	eb
47188	ec
47189	ed
7691	f'
46870	de
851	dd
5542	f)
28771	df
18044	dk
53934	hellow
19388	negate()
4165	f,
5573	f1
593	do
40399	LUCENE_22,
21365	f0
18289	dq
5578	f3
34653	result.setValue(nonPayloadExpl.getValue()
5575	f2
5584	f5
5409	ds
32953	docState.testPoint("TermVectorsTermsWriterPerField.addTerm
21852	#getFieldables}.
5582	f4
22972	ex
48620	posIncrAttribute.getPositionIncrement();
34021	g;
67256	createIndex(random,
8603	captureState();
46872	fa
24880	fd
58961	_TestUtil.getTempDir("TestMultiMMap");
47342	fe
15206	fb
34876	operator
24375	fc
22872	AcceptStatus
19969	eg
47190	ef
61386	"\1\u0660\1\u065f\1\u0660\1\u0636\175\0\4\u0661\2\0\1\u0661"+
21675	wildcardequals
852	ee
35763	g'
22442	g.
9217	bytesUsed
61363	"\4\0\2\137\151\0\4\u0656\2\0\1\u0656\15\0\1\u0656"+
60474	"\13\0\1\u0126\214\0\12\u02f5\14\0\1\u0126\214\0\12\u035b"+
58396	testRehash()
23934	newer
26570	DocHelper.NO_NORMS_TEXT));
37090	nodeCount:
40400	LUCENE_23,
36184	nodeCount;
47805	en
4042	em
15972	hasseparatenorms
21749	es
36153	#shouldExpand(UnCompiledNode)
4581	testDefaults()
66986	docsPerThread
47033	cb
21685	ca
40055	Recompute
67560	222);
53622	'relative'
65959	c]
59782	"\1\0\1\25\2\0\1\25\1\u0141\16\36\1\u0149\13\36"+
25041	bw
47217	d9
43501	bv
47206	d8
58	by
35376	d;
24570	bs
47109	d5
17595	d4
36831	br
37245	newid
47165	d7
63614	x64321
47140	d6
46920	d0
17571	d1
17577	d2
17516	d3
16596	couldn't
16297	bq
28984	d,
47212	bf
54904	d)
3089	super(other,
43819	assertTermEquals("n",
8182	bi
849	bb
47126	bc
47151	bd
295	be
28466	d'
59832	"\16\266\1\u0158\13\266\1\142\12\266\1\u0154\3\137\1\0"+
19292	dc
47027	db
60394	"\1\137\4\0\2\137\150\0\1\u0101\1\266\1\u0319\30\266"+
59894	"\2\232\1\u016f\1\u017d\1\232\2\u016f\1\232\3\u016f\2\232"+
18043	da
8770	f"
49908	templates
59218	"\1\2\2\35\1\2\3\35\1\46\2\2\1\35\1\47"+
56526	exclDisi)
18331	e;
57644	diffs[mid-1];
16408	e:
32404	cx
21368	cw
47058	e9
35114	numbuffers
47057	e8
46980	e7
43015	reference)
46942	e6
16355	cs
46896	e5
65491	decided
4505	cq
46894	e3
21402	cr
46895	e4
5519	e1
32968	Last
39005	co
59002	sliceStart;
6502	e2
31833	cp
38993	cm
46871	e0
35044	ck
20699	e.
46829	cl
54169	ci
65114	doPrune);
56982	cj
16274	e,
231	e)
7602	ch
25682	ce
28467	e'
47173	cf
850	cc
31158	cd
8189	b;
59833	"\2\137\150\0\1\u0153\12\266\1\u0159\17\266\1\142\12\266"+
59009	sliceStart,
36239	(flag(BIT_TARGET_NEXT))
56986	Object#toString()}.
8847	testrule
43657	c"
5615	b3
5613	b2
5621	b5
7525	perdoc
5619	b4
46959	b7
28106	HYPHEN-MINUS
46890	b6
47006	b9
46978	b8
38074	long[vals.length];
53639	hq.insertWithOverflow(fieldDoc))
8154	b,
43013	reference.
65505	reference,
47565	b0
5611	b1
64788	BytesRef[validTermStrings.length];
54304	assertTrue("key:
33751	b"
7688	b'
2794	b)
3706	c;
46939	ay
65145	toString(BytesRef
47054	ba
5829	WRITE_MASKS[elementBits];
54	at
46927	c6
163	as
46860	c5
18031	ar
46859	c4
60759	"\1\352\12\232\175\0\1\351\1\u0453\31\232\1\352\12\232"+
46857	c3
42014	ax
15805	referenced
47032	c9
46934	av
47031	c8
46932	au
46971	c7
40332	c,
2446	c1
46930	ao
60624	"\3\0\1\137\4\0\2\137\150\0\1\u0101\6\266\1\u0112"+
57152	startmask
2449	c2
66	an
46854	c0
19291	ac
28165	ad
38342	x0000fff
67813	addDocs(IndexWriter
1431	aa
25335	ab
39920	subReaders,
3882	c)
44966	"Ä¼"
43510	doTestGetSetVectorOfSize(int
16739	reader1.clone(true);
15978	c'
37234	ae
39840	subReaders)
42952	af
58946	nu
62178	Executors.newCachedThreadPool();
3376	newly
38786	newFSDirectory(_TestUtil.getTempDir("doesnotexist"));
57410	p4
48368	nr
33944	p2
2698	no
34177	p1
8754	newSearcher(r);
20632	primaryDir,
21632	p;
1519	IndexFileNames.TERMS_INDEX_EXTENSION);
46838	oe
52	of
58605	udc1cb
44006	"Ä"
64365	cutoffs
65	on
57730	j=0;j<30;j++)
4758	ok
10443	"\45\u0140\1\u0168\2\u0140\1\u0183\1\0\2\136\1\u0184\1\u013f"+
61123	"\4\u0583\2\0\1\u0583\15\0\1\u0583\6\0\12\u0584\1\u053b"+
4322	q,
16294	q)
27217	"\u3031\u0031\u002C",
43312	texts
62301	q5
8266	os
47410	ou
20284	op
2443	q2
2440	q1
47409	oo
62299	q4
14	or
65823	oq
62297	q3
19738	(cs.pos
7402	perThread.docState;
51952	(copied)
39240	termArrays.get(0);
40402	LUCENE_29,
51504	j<docCount;
6254	q;
7692	r'
16742	r)
62308	qA
43925	"Ä"
62310	qB
60450	"\3\0\1\343\2\0\1\344\12\0\1\345\17\0\1\346"+
35918	char[1];
6093	pl
49480	ParseException();
12009	pm
55598	r0
16683	r1
49160	setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod
21370	i<20;
5547	Float.floatToIntBits(f);
40795	accumulate
8111	chunkSizeMask="
34968	"failure
40183	r,
39955	lo
33533	ll
25321	ls
54303	assertEquals(string,
31647	lu
42714	title="KeyWord
32078	"forwarding
56519	exclDisi;
38737	curField1.name(),
47290	lz
24327	n;
39950	n:
3353	mb
31884	parseShort(String
43928	"Ä"
6106	o)
36718	arc.copyFrom(result);
26417	codingCase.finalShift);
1235	me
30997	text)
20469	text,
26879	offsetattributeimpl
1500	mp
24726	o2
47774	seventeen
19282	mo
11782	text.
24724	o1
67319	mr
5220	jjCanMove_2(int
27445	"\u0030\u0308\u0030",
8993	StringHelper.intern(input.readString());
66373	text1
51425	BufferedDeletesStream.ApplyDeletesResult
2759	collected
7122	ms
32895	text2
35847	assertEquals("A,B,D,
65830	hc.getCount();
2946	multithree
20452	text;
52656	context,
18193	o;
5633	my
44729	"Ä®"
58944	na
8212	buffers[bufNr].duplicate();
33451	resourceDesc,
64542	resourceDesc)
10955	"\16\230\1\u0351\13\230\1\347\12\230\175\0\1\346\11\230"+
19619	org.apache.lucene.index.*;
25501	item
1905	nf
21666	p,
1065	iter
37159	fixed_array_num_arcs_deep
47339	nj
40243	((TermPositions)current).getPayload(data,
15196	Lazy
29274	rawdocs
40401	LUCENE_24,
5123	l2
18278	"best"
5119	l1
857	jj
37987	l,
43353	(nextInt
25707	variations
16270	m,
43753	Ã 
7128	constant_score_filter
25679	m)
54033	m'
18882	"O'Reilly",
57598	kb
10419	"\1\346\1\u016a\1\230\6\u016a\1\u017c\1\230\2\u016a\2\230"+
63073	quoted_char
56281	j}
43758	Ã¥
42593	TestSpanQueryFilter
19549	m;
53056	offsets[upto]
7394	TermsHashConsumerPerThread
61133	"\6\0\12\u0588\1\u0589\175\0\4\u058a\2\0\1\u058a\15\0"+
14798	buffer.append("<float:
25066	m1
25067	m2
41614	from;
24667	SortField.FLOAT),new
26882	from:
43382	bytes[lastBytePos++]
50482	setUseCompoundFile(boolean),
1432	kk
16058	searcherThread2.start();
32841	doVectorOffsets
21839	Field[result.size()]);
26734	n,
47283	lj
7690	n'
26710	n)
28146	lf
59989	"\1\u01a9\17\232\1\u016f\12\232\1\352\12\232\175\0\1\u01a9"+
41605	from,
46830	la
11137	"\1\u03e6\6\0\12\u03e6\1\u032b\175\0\4\u03e7\2\0\1\u03e7"+
11789	from.
27557	"\u00AD\u0308\u0027",
38183	upper);
34055	hs
53628	j2
5431	curpos
53515	hq
47172	hv
33539	j,
855	hh
41431	VisitTerms<Object>(dirOut,
66157	RAMDirectory(dir2));
37539	hi
33866	ho
38994	hm
525	id
38859	ic
39448	countingstream
60305	"\12\u020d\176\0\4\u02d2\2\0\1\u02d2\15\0\1\u02d2\6\0"+
56165	ih
58254	k)
151	if
27329	"\u003A\u0308\u0031\u002E\u2060",
32119	ie
54189	org.apache.lucene.util.BytesRefHash.MaxBytesLengthExceededException;
9478	j;
24720	(iter.hasNext())
25865	isinorder
21515	csw.addFile("d1",
9317	"\213\132\1\0\7\133\236\132\11\0\46\132\2\0\1\132\7\0\47\132"+
22107	i]
17521	ir
64	is
215	it
65883	doNestedTermConjunctions(s,25,3,3,200);
55923	iv
39342	inplace
1300	iw
856	ii
24621	"OutOfOrderOneComparatorScoringMaxScoreCollector",
36745	getArcCount()
33541	k,
46837	ij
5177	jjCheckNAdd(2);
56164	il
34453	LogByteSizeMergePolicy()
5301	im
46	in
33809	k0
63305	0x65321,
432	io
8451	ip
63823	l'
5005	l)
16636	k;
51744	anyNonBulkMerges
46953	topbar
63120	File("/p/lucene/indices/2bindex"));
56280	i}
29313	IndexReader#termPositions()
16417	psdp));
48489	this(similarity,
36966	negDelta
14938	floatcomparator
36798	.skipBytes
24944	string2
24215	"g"));
29436	java.util.Properties;
35958	string>
37377	string:
8657	ready
23726	mgr.prune(new
54822	ioexceptions
42576	string;
18749	ÏÎ·Î¼Î±Î¯Î½ÎµÎ¹
53706	indexsearcher's
38386	xf
58364	xe
15026	z'
2827	slack
63862	testMaxWordLengthWithSupplementary()
44546	,"f",
24098	isnt
26779	other.end
23738	expiration
60728	"\3\u02e2\1\u0428\1\u02e2\1\u0428\1\u02e2\1\u0428\2\u02e2\1\u0428"+
609	_TestUtil.nextInt(r,
25104	wq
25922	IndexWriter#close}
39510	output.writeInt(maxSkipLevels);
17870	TermRangeFilter("id",
3691	'\''
31069	filesToDelete
6395	reads
63694	x8
2753	x;
47610	vy
60366	"\1\351\1\232\1\u02fe\30\232\1\352\12\232\175\0\1\351"+
6008	assertEquals("hello",
48469	InvertedDocEndConsumerPerThread
33749	y"
34918	"broan"));
66742	usages.
21929	IllegalArgumentException("resourceDescription
57609	indexpointer
689	we
53412	vm
29805	"\4\0\1\25\4\0\6\25\2\0\1\25\1\0\1\25"+
23144	x,
9315	"\1\132\21\0\160\133\5\132\1\0\2\132\2\0\4\132\1\137\7\0"+
2752	x)
49964	x6
63631	x7
63577	x4
63584	x5
1849	vs
26839	charblockpool
29259	x2
38387	x3
61487	"\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\6\u02e2\1\u03c1\3\u02e2"+
33000	x0
29257	x1
354	w=
51463	because,
55075	w;
468	indexreader
7789	WTF:
62487	countingConjunctionSumScorer(boolean
55918	AtomicInteger(PURGE_MULTIPLIER);
33614	x'
3297	Replays
23866	searchers.values()
63070	escaped_char
50446	!sr.termsIndexLoaded())
16063	assertTrue("hit
37785	w,
19335	uk
31207	assertCompressedFields29(Directory
39092	ue
42444	fieldToData.get(fieldName);
18151	w)
57477	allfiles
16198	w3
25227	"**",
16199	w4
10871	"\1\141\7\264\1\u0300\2\264\1\0\3\136\1\0\2\136"+
22207	us
16324	w5
14893	front
3954	w/
16323	w1
16197	w2
927	up
2108	v;
47543	tz
25063	string'
59818	"\4\0\2\137\150\0\1\u0153\17\266\1\u0107\12\266\1\142"+
51789	(!mergeExceptions.contains(merge)
29242	tv
6035	string,
33372	ud
39536	string)
67202	newoffsets
55453	testPositionIncrementGap()
38971	key[j]
42708	string.
5663	v1
6	to
31370	v0
22596	tm
32113	buffer[byteUpto-1]
17618	tl
6110	ts
4503	tq
7444	PositionIncrementAttribute
19925	tp
17602	v2
15641	v)
34037	tg
2587	tf
52511	te
17382	td
58945	tk
18429	q.setBoost(b);
2104	v,
30191	ti
19516	th
37420	checkGold(terms,
43234	tb
43237	tc
16339	ta
29668	"\15\20\11\36\1\32\24\36\2\20\11\36\1\32\31\36\1\32\4\20"+
35904	assertFalse("queries
20309	cc.collect(i);
15158	sv
46839	ss
17095	storepositions
16341	st
25833	sz
6463	sw
64390	Inflater
15970	sx
19125	setmaxtokenlength
3705	buffer[upto++]
1102	so
34947	createWeight(final
50364	sr
49924	wildterm
27386	"\u0027\u003A",
34102	disjoint
4167	sd
43763	Ãª
16349	sf
49914	u'
14613	se
6974	MultiTermQuery}
44008	"Ä"
15657	si
63225	setLastModified(long
18878	apostrophes:
16311	testNoop()
14554	sa
20312	assertEquals(prevDocID
6896	sb
34433	this.maxBufferedDocs
54819	rw
34047	t:
637	t;
14972	t3
36054	rq
1318	t2
34084	rp
1314	t1
66557	newMask;
51564	t0
51977	flushDeletes
67965	a");
19885	i<10;
34023	rl
38325	usebitset
30831	read;
31255	ds.close();
18426	t,
36619	read:
634	t)
1747	strings
33804	rg
25510	rf
7689	t'
49187	rc
33963	LinkedHashMap<Term,Integer>
7363	reach
37521	testSlopScoring()
2841	s;
46851	qq
62279	qr
28596	eof");
28775	maxSkipLevels
24597	sd.length;
38935	s0
53060	s2
6310	qp
53058	s1
8733	s,
61145	"\30\u02e2\1\u034e\12\u02e2\175\0\1\u034d\24\u02e2\1\u0591\5\u02e2"+
36093	java.io.FileOutputStream;
3727	s'
8837	Arrays.toString(stack.toArray()),
66336	oldSize
16250	s)
62404	qb
58265	[0x6c
54268	@Test(expected
62403	qa
57247	cardinality()
25353	assertTokenStreamContents(new
41116	prefixes.get(current.input);
18243	r;
48012	read,
35153	pt
19407	(reader.hasDeletions())
6466	pw
730	r2
30813	read2
33772	pp
1253	pq
38410	r3
55631	r4
17483	pr
55835	r5
34190	ps
24053	"C-88",
25984	comparator.compareBottom(doc);
54519	atLeast(10000);
65624	oldDeletable
54610	insist
21469	e2.seek(17);
18823	"ææ¯ä¸­å½äººã
27478	"\u0030\u0308\u0031\u0027",
52047	holdslock
50144	course
49226	BooleanClause.Occur.MUST));
25961	comparator.compareBottom(doc))
30442	portertestdata
54699	prefixing
15092	lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);
23929	margin
17078	getOffsets()
51063	while(running)
4508	ctopdocs
31360	"21",
44010	"Ä"
10475	"\1\136\4\0\2\136\150\0\1\376\27\264\1\u018f\2\264"+
16935	setnorm
57963	(s.nextDoc()
1029	assertTrue(failure.didFail);
10393	"\1\230\1\u016a\10\230\1\u016a\1\230\2\u016a\10\230\1\347"+
42424	lengths:
57543	dataPagedBytes.freeze(true);
50526	lengths.
51238	addIndexes(IndexReader...)");
8617	List<AttributeSource.State>
50009	NullPointerException("name
32764	(charNum
20173	(!scoreDocsInOrder
53782	CharArraySet(CharArrayMap.unmodifiableMap(set.map));
63095	MyTokenStream(int
5193	jjMoveNfa_2(state,
28344	subScorers[0]
20697	held,
35618	~B
44778	"Ä¯"
2012	||
7961	super(path,
33088	clone.getAttribute(FlagsAttribute.class);
51030	(doWait)
67517	stopped;
65254	(!arc.target.isCompiled())
43773	Ã³
43772	Ã²
17547	singleHits
65984	bar\"~4
25283	assertEquals(0,hits.length);
31548	Long.valueOf(id),
67754	csq).hasArray())
43766	Ã­
16153	0f);
26836	buffers[1+bufferUpto]
21815	#getFieldable}
8605	decides
10282	"\2\0\1\25\1\u013d\32\36\1\141\12\142\1\u013e\1\136"+
30524	"\0\u1018\0\u107f\0\u10e6\0\u114d\0\u11b4\0\u121b\0\u1282\0\u12e9"+
8445	myid
6136	{{
1113	{}
14597	pushes
9431	"\4\25\4\26\2\11\2\111\1\4\5\111\52\4\u1900\0\u012e\144\2\0"+
36895	~8
39707	ReadOnlyDirectoryReader(directory,
68071	leftpos
24887	executors
40861	rewrite");
36914	Math.min(maxDerefNodes,
5321	defaultLexState
62651	LengthFilter(TokenStream
63110	~4
59325	"\2\0\1\55\3\0\1\73\7\0\1\57\2\0\1\60"+
58735	"\udc17abcd",
43782	Ãº
39589	output.writeVLong(ti.freqPointer
60369	"\5\232\1\352\12\232\175\0\1\351\24\232\1\u0302\5\232"+
7013	},
53398	newIOE;
20303	})
7973	.getMethod("cleaner");
2891	lastDocCollected
41828	slowcompletor
16325	zz
1867	|=
43107	"y",
25593	kids)
64894	threadCount;
43931	"Ä"
812	};
43770	Ã°
65178	ct="
1934	lengths,
21683	wildcardsearchpos
35888	assertEquals("query
64890	threadCount)
40893	accepted,
52150	newdsname
19383	accepted.
28665	stpf.getAttribute(CharTermAttribute.class);
37111	this.count
43777	Ã¸
26908	Ã·
11750	Lao,
38503	assertTermDocsCount(String
10476	"\3\0\1\136\4\0\2\136\150\0\1\376\16\264\1\u0103"+
35137	qtest(pt("w1",
67009	testIllegalEOF()
16203	yy
15494	"2.x"
3544	super(message);
66982	zo
43776	Ã¶
60017	"\1\136\4\u01b5\2\137\1\u01b5\15\137\1\u01b5\6\137\12\u01b5"+
2956	myhc
18176	theoretically
27819	"\u0061\u0027\u2060\u0308\u00AD",
56008	declaration:
28705	TestPrefixFilter
16202	xx
18626	testAramaic()
9246	pushed
18183	createWeight(Searcher
59193	"\3\uc215\3\uc2b8\3\uc35b\3\uc3fe\3\uc4a1\3\uc544\3\uc5e7\3\uc68a"+
45609	"Å¡"
28688	standardtokenizer
34228	#setDefaultWriteLockTimeout(long)
35627	~B[i+4]),
43036	swapReference(null);
11984	(zzAction
4940	jjmatchedKind
61292	"\1\u034d\32\u02e2\1\u034e\1\u02e2\1\u061f\10\u02e2\175\0\1\u034d"+
58151	snapshots.put(f.name(),
27525	"\u005F\u0308\u0061\u0027",
58744	"\ufffd\ufffd",
52338	PayloadTokenStream("p2");
32307	_TestUtil.rmDir(dirName);
52541	PhraseQuery}
34827	typeAtt.setType(prevType);
68013	_TestUtil.randomHtmlishString(random,
36316	(this.startNode
54738	lockDir.getAbsolutePath());
62421	testFromInts()
63143	findTerms(IndexReader
45847	"Å±"
52489	doc.add(newField("field1",
55626	id50),
1721	@Deprecated
36977	totWasted
46322	U+278F:
7945	useUnmapHack
38611	assertTrue("old
43255	assertTrue(tdocs.skipTo(15));
53750	#CharArraySet(Version,
44577	"Ä¢"
25928	commitpoint
65190	next,
45768	"Å¨"
33780	next)
58805	utf16.result[i]);
50480	LogMergePolicy");
46299	U+278E:
24817	maxDoc
49551	fuzzySlop=null,
36950	int[topNodeMap.size()];
66519	textUpto
4024	newcharacterbuffer
60064	"\1\352\12\232\175\0\1\351\15\232\1\u016f\14\232\1\352"+
24197	getYIndex()
49294	PhraseQuery.
35088	bytesToCopy);
1441	checkpoint
39104	PhraseQuery,
8424	verifyLF
6256	PhraseQuery)
48582	valueLength
65496	lastSegmentInfos;
17006	TermVectorReader.
6200	setDefaultOperator(AND_OPERATOR)
46276	U+278D:
32866	maxNumPostings
19438	next;
64091	ByteArrayDataInput
39863	newReader.writer
24499	testSortCombos()
40416	LUCENE_36,
4677	assertEquals(16.0,
6877	<code>float</code>
45841	"Å«"
10428	"\1\230\1\u016a\3\230\1\u016a\1\230\1\u016a\1\230\1\u016a"+
57579	termIndex,
40838	dir.createOutput("fst.bin");
26878	endOffset);
44825	"Ä´"
57320	newLen
57575	termIndex)
53071	s2.charAt(i));
11983	zzNext;
65038	this.freezeTail
46253	U+278C:
44746	"áµ»"
45989	"Åµ"
18488	TokenStreamComponents
29332	Posting
60428	"\4\0\2\137\150\0\1\u0101\25\266\1\u0334\4\266\1\142"+
11640	"\2\0\1\u055e\15\0\1\u055e\6\0\12\u055e\1\u0534\13\0"+
30381	TPCTool
18661	à¦ªà¦°à¦¿à¦à¦¾à¦²à¦¨à¦¾
16156	scorecachingwrappingscorer
42415	sb.append("0");
39987	subReaders[0].terms(term);
65684	incref'd).
19053	randomTextWithURLs;
42067	comparators[i].compare(hitA.slot,
46230	U+278B:
21834	ArrayList<Field>();
10390	"\1\u016a\2\230\1\u016a\2\230\1\u016a\1\347\12\230\175\0"+
31796	this(dir,
57501	this.totalIndexInterval
29366	out.writeBytes(buffer,
35949	testExclusiveLowerNull()
27930	"\u0031\u003A\u0308\u0031\u002C",
9733	"\1\0\7\32\1\0\2\32\2\0\1\32\1\0\1\32"+
44612	"Ä£"
25534	InsanityType#VALUEMISMATCH
64852	BYTES_PER_POSTING
28871	nextPerThread.consumer.startDocument();
11166	"\1\u03fb\15\0\1\u03fb\6\0\2\u03fc\1\u03fb\2\u03fc\2\u03fb"+
46207	U+278A:
25230	matchNone[]
21957	out.writeBytes(copyBuf,
34227	ms).
57916	extensions.add(ext);
57973	PerDoc[]
17573	d1.add(newField("f2",
54634	this.match
27552	"\u00AD\u003A",
25151	"m*tals"));
15613	long[numFields];
59733	"\1\331\1\0\1\137\1\153\1\137\1\0\2\154\1\140"+
58225	#EMPTY_BYTES}
19796	doTestRank(INT_FIELD,FieldScoreQuery.Type.SHORT);
5769	inside
31541	id<15;
64209	lock.obtain(Lock.LOCK_POLL_INTERVAL);
60647	"\216\0\1\u02d4\175\0\4\u040b\2\0\1\u040b\15\0\1\u040b"+
51260	as-is
11200	"\4\0\2\136\150\0\1\376\7\264\1\u0417\22\264\1\141"+
54774	(markedHeld
9955	"\1\66\1\0\1\66\2\0\1\25\1\135\32\155\1\136"+
40047	segmentInfos.pruneDeletedSegments();
65174	pos1Stop
37287	toString()-able
38641	reader.setNorm(1,
33167	errors
55463	TokenFilter(new
34214	DISABLE_AUTO_FLUSH
39284	termArrays1.listIterator();
29906	"\1\0\3\52\1\0\1\52\2\0\4\52\2\0\1\52"+
3994	LUCENE_31,
42674	numStartDocs
21509	assertEquals(currentPos
3653	tokens
3898	({@link
39520	Currently
39497	isIndex);
25355	KeywordMarkerFilter(new
5335	switch(curLexState)
45620	"áµ´"
40314	TermScorer
23616	flushAtDelCount
23666	testnonramdelete
10342	"\150\0\1\u014e\5\264\1\u0151\4\264\1\u0103\17\264\1\141"+
67072	assertTrue(this.seeksCounter
11587	"\1\u053c\6\0\1\u053d\2\u053e\1\u053d\5\u053e\1\u053f\1\u0540"+
34296	getAnalyzer()
35333	newStop.tokenStream("test",
40403	LUCENE_30,
50521	setMaxFieldLength(mfl.getLimit());
59440	"\3\34\1\0\1\34\2\0\4\34\2\0\1\34\303\0"+
64085	dir.openInput("foo");
56885	"\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12"+
44174	"áµ¬"
65162	input.compareTo(lastInput)
20546	java.text.Collator
37310	stopWords)
3826	super(factory,
37294	stopWords,
26470	getdecodedlength
46604	FIGURE
43610	getCachedResult(reader);
14834	comparatorSource.hashCode();
28019	"\u0031\u002C\u0061\u002C",
37052	ovewrite
3436	error;
3500	b.append(segments.get(i).toString(dir,
57823	TestIndexWriter.addDoc(w);
41562	nextID,
32452	dereferenced
37273	stopWords;
51702	"refCount
33565	aaaa,0,4
7611	error.
26852	endOffset()
3455	error)
45663	"Å¦"
23314	nextID;
45869	"áµ¤"
5897	bulk-read
22483	(buffer.length()
38565	reader.setNorm(0,
19710	"ExactPhraseScorer("
14771	interpreted.
939	doc.add(newField("crash",
59443	"\12\232\13\0\1\233\13\0\1\175\1\0\1\51\1\0"+
35129	length).hashCode()
56141	*super*
65490	ArrayList<Collection<String>>();
31931	DoubleParser()
40411	LUCENE_35,
38557	reader.setNorm(5,
11537	"\2\0\1\u0516\15\0\1\u0516\6\0\12\u0516\1\u04d9\175\0"+
26883	http://www.unicode.org/Public/6.0.0/ucd/auxiliary/WordBreakTest.txt
1374	idfield
30099	origEnum;
26078	#setScorer(Scorer)}.
32475	update(writer1);
37103	//System.out.println("nextCount="
9175	int.
5756	int,
34446	MergePolicy.MergeSpecification}
26111	int)
55213	(((long)r2r1[d2])<<32)
38917	testtermvectors
16470	snapshots.size());
40409	LUCENE_34,
49923	prefixterm
28920	org.apache.lucene.search.function.FieldCacheSource#getCachedValues(org.apache.lucene.search.FieldCache,
21978	state.directory;
63180	bterms
41896	verifyunpruned
22367	mergeSorts:
57465	allFiles)
5019	jjCheckNAddStates(3,
35084	remainInBuffer;
57886	(otherBuffer
1706	org.apache.lucene.document.NumericField;
39048	assertTrue(map.containsKey("bar"));
46412	U+2789:
38313	Collections.<Integer>emptyList(),
40407	LUCENE_33,
27620	"\u0300\u0031\u003A",
18770	"ÏÎ·Î¼Î±Î¯Î½ÎµÎ¹",
2051	output="
46142	"Å¼"
39465	"dictionary"
26192	next.set(i,
5408	setdebugstream
25893	requirements
33977	sortRptGroups(ArrayList<ArrayList<PhrasePositions>>
5016	jjCheckNAddStates(0,
25287	System.out.println("match
25543	Set<Integer>>
41682	rootNode.arcs[0].isFinal
3863	token.
8495	source2.addSinkTokenStream(sink1);
18510	URLFilter(tokenizer);
20943	token,
66636	in"));
5659	floattointbits
31215	on/off
46391	U+2788:
67557	reader.setNorm(4,
16810	testSegmentReaderCloseReferencing()
1808	into
54565	ArrayUtil.insertionSort(a1,
29142	tvfPointer
23412	deleteAll,
6102	interface
6623	ints
45546	"áµ£"
46806	token:
3782	runtime.
49652	token;
25262	"hij**"},
22685	FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}.
44793	"áµ¢"
9411	"\12\134\6\0\u2ba4\146\14\0\27\146\4\0\61\146\4\0\1\10\1\5"+
40405	LUCENE_32,
52178	ramsizeinbytes
50713	#setMaxBufferedDeleteTerms}
46367	U+2787:
28850	this.termsHash
53064	s1.length());
16318	testexplanations
42786	FlagsAttribute,
46214	"â´"
51684	sourceSegments)
22037	<li>Run
55618	testAddIndexes2()
8609	accept(AttributeSource
26092	(docsScoredInOrder)
59161	"\3\u1f15\3\u1fb8\3\u205b\3\u20fe\3\u21a1\3\u2244\3\u22e7\3\u238a"+
23810	ms="
11411	"\4\u04b9\2\0\1\u04b9\15\0\1\u04b9\6\0\12\u04b9\1\u0445"+
11586	"\6\0\12\u053b\1\u0526\175\0\4\u053c\2\0\1\u053c\15\0"+
27868	"\u0061\u002C\u0300",
60015	"\1\u016e\2\u0145\1\u018b\1\u016e\2\u0145\1\u018c\2\u0145\1\137"+
23732	IndexReader#openIfChanged},
2227	"NoMergePolicy";
36037	filteredquery.getBoost(),
18726	"Ø¯Û",
68140	RollingBuffer<Position>
44780	"Ä±"
68033	right.addAttribute(PositionIncrementAttribute.class);
67917	colonIndex);
10323	"\2\0\1\345\42\0\1\172\1\64\6\0\1\172\3\0"+
67006	rmDir
67038	seeksCounter
35750	x33333333
60452	"\1\174\3\0\1\u0274\33\u0219\12\u0277\1\0\3\u0219\1\0"+
38060	-2.3E25,
39539	cmp;
35963	//assertEquals("C
3755	</ul>
32218	_testStressLocks(null,
34367	this.writeLockTimeout
48630	likelihood
44610	"Ä¡"
6875	NumericRangeQuery<Double>(field,
46290	"â¤"
55228	assertEquals(info1[i],
27058	"\r\u0061\u2060",
39935	!hasDeletions();
23661	bridges
48449	org.apache.lucene.index.IndexWriter}.
23022	itself....",
39703	segmentFileName)
15563	SegmentInfos.FORMAT_3_1)
10688	"\1\136\4\0\2\136\150\0\1\376\24\264\1\u0248\5\264"+
29849	"\11\0\1\27\115\0\2\27\6\0\1\27\56\0\1\27"+
26528	fieldInfo
63893	TestingCharTokenizerNormalizeIsTokenChar
243	assertTermDocsCount("deleted
17747	alter
46446	"â¬"
2655	"one
57677	Direct64(int
41083	cmo2
45081	,"m",
15602	dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment,
29377	(nextIndex
29570	"\1\0\2\132\1\0\2\132\2\0\1\133\1\0\5\133\4\0\2\133"+
49625	RANGEEX_TO:
35302	storepayloads
5712	setKeyword(boolean
46414	U+2793:
34043	i<distinctGroupIDs.size();
17315	qwf,
53448	testmultivaluednumericrangequery
27864	"\u0061\u002C\u005F",
54275	sizes.length;
30444	checkonetermreuse
31965	FieldCache.class.getName()+".NUMERIC_UTILS_DOUBLE_PARSER";
43816	assertTermEquals("i",
46403	"â©"
35914	"\u0638",true,
53232	outupto
9675	"\1\25\2\0\1\25\2\0\1\25\17\0\1\25\11\0"+
15528	reset(SegmentInfo
8637	init
52408	numerically.</p>
8480	extraction
50747	#setMergeFactor
45690	"Å£"
54602	ArrayUtil.insertionSort(a);
2534	infostream
8056	this.chunkSizePower
46376	"â»"
20109	wIter
36428	in.readShort()&0xFFFF;
44642	"Ä¦"
31523	merge";
29484	Assert.assertNull(System.getProperty(PROP_KEY1));
36350	(emptyOutput
56655	ITER
50763	segString()
575	"content2",
46369	U+2791:
39403	checkSkipTo(tp,
18830	"äºº",
11199	"\4\0\2\136\150\0\1\376\1\u0416\31\264\1\141\12\264"+
53265	other.first
60408	"\1\u0325\27\266\1\142\12\266\1\0\3\137\1\0\2\137"+
45659	"Å¢"
44837	"Äµ"
18618	"Numbers",
25180	question
59686	"\3\u0107\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
40200	(topReader
39705	segmentFileName);
15388	gettempdir
31643	actualsize
28595	IOException("read
68108	<code>size</code>.
35030	buffer.append("filtered(");
36569	nodeAddress.length)
17718	<code>size</code>,
30796	buffer.buffer;
46393	U+2792:
48753	TermVectorOffsetInfo[testTerms.length][];
29777	"\1\67\14\0\1\70\16\0\1\71\2\0\1\72\21\0"+
41040	intensive!!
66852	assertEquals(expected.get(i).intValue(),
44774	"Ä«"
19724	cs.lastPos
51757	merger.createCompoundFile(compoundFileName,
56865	"\6\12\112\0\46\12\12\0\47\12\11\0\132\12\5\0\104\12\5\0"+
16046	indexerThread2
16662	cloning
18247	"ok"
33345	x.substring(x.lastIndexOf("-")+1);
49135	conjunction:
45772	"Å¬"
1788	directory.createOutput(IndexFileNames.segmentFileName(segment,
162	info
33050	copy.hashCode());
51507	merge),
28222	MultiCollector(collectors);
40915	termsMap
21880	removefield
44925	"Ä»"
45839	"Å©"
16209	expDocNrs
7621	customize
17757	represented
16044	indexerThread;
17574	d1.add(newField("f3",
27105	"\n\u0308\u0061\u003A",
56009	append(CharSequence
20742	Clones
51575	merge);
4524	ascfield
39800	(Map.Entry<String,byte[]>
41600	b.add(Util.toIntsRef(term,
59529	"\1\65\135\0\1\342\3\0\1\343\2\0\1\344\12\0"+
52838	publish,
51081	forceMergeDeletes()
50721	config.setRAMBufferSizeMB(mb);
11805	Refills
11928	again
20808	merge(T
45661	"Å¤"
20896	are:<ul>
7959	LockFactory
44772	"Ä©"
59253	"\1\0\4\32\1\0\2\32\1\0\21\32\1\0\1\32"+
32868	perThread.doc.perDocTvf;
19934	testcachingfloat
8483	saving
57972	TermsHashConsumer
46345	U+2790:
50829	docWriter.close();
25776	another.
20875	techniques
32444	testwindowsmmap
3222	delegate
64639	#readInternal(byte[],int,int)
67454	threads!
51408	"flush");
190	READER
44727	"Ä¬"
39358	nextSetBit(disiDoc
50405	readerMap.values())
67529	createReaderMutex
64987	options
66928	common(Pair<A,B>
52224	matchedcount
32055	default_float_parser
33605	map.add(key,
34822	TestFilter(TokenStream
42987	threads,
45964	"Å´"
15997	threads)
42046	<code>a</code>
35362	DocIdBitSet(BitSet
2609	threads.
14902	represents
48670	(this.__test_dir
47898	(non-Javadoc)
44639	"Ä¤"
996	didFail;
15999	threads;
40576	intIdx
30189	numScans
8681	flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>
42399	(UnsupportedEncodingException
24055	"-50",
59206	"\4\u044d\4\u04f0\4\u0593\4\u0636\4\u06d9\4\u077c\4\u081f\4\u08c2"+
35423	image);
18398	doc1.equals("d4"));
15627	(includeDocStores)
49406	input.charAt(i);
28649	option.
44723	"Ä¨"
21113	stateless
28518	binaryvalcompressed
59800	"\3\0\2\137\2\0\1\50\1\0\1\51\1\0\1\52"+
66479	tokenTextLen
63345	0x754321,
17782	inc)
40144	SegmentMergeInfo[readers.length+1];
36651	fixed-array
41262	end!");
41401	option:
18646	"ÜÜÜªÜ¬Ü",
5876	Packed32-structure.
28094	"\u0061\u0062\u00AD\u0062\u0079",
10758	"\7\230\175\0\1\346\7\230\1\u0285\22\230\1\347\12\230"+
46244	"â¢"
30829	reader.read(buffer.buffer);
17783	inc;
20081	clauses.size();
5265	this(stream);
5290	lexical
22183	alignment
59694	"\2\137\150\0\1\u0101\1\u0107\2\266\1\u0107\1\u0115\1\266"+
54592	"equal"
37916	keyIterator()
49452	sb.append(c);
22279	float[][]
4842	getmaxbuffereddocs
489	termdocs
23883	trackers)
20488	testreversedatesort
55669	AtomicInteger(0);
38004	-2000L,
31908	Short.parseShort(value);
29374	(buffer[3+limit]&0xff);
64213	testobtain
52491	doc.add(newField("field2",
46267	"â£"
36062	bq.add(query,
23498	dir.failOn(failure.reset());
18322	h.length;
38728	itField1
39966	mid++;
38730	itField2
52830	Permission
54586	ArrayUtil.quickSort(),
26338	outputOffset);
9170	undercount
30127	DoubleBarrelLRUCache<CloneableTerm,TermInfoAndOrd>(DEFAULT_CACHE_SIZE);
67079	assertEquals(tp.doc(),
66006	+(b:two^5.0
40114	ReaderCommit(sis,
48168	matchPayload
30818	Consumer
20918	positionIncrement);
16358	StringReader("")
60800	"\6\0\12\u0472\1\u040f\13\0\1\u033c\160\0\1\u03a1\4\u0472"+
7481	incs
19730	incr
11775	UAX29URLEmailTokenizer.HANGUL;
46111	"Å»"
19358	»¾
47049	»
47382	»
47081	»
66401	(0xffff
47200	»
20573	CollationKeyFilter(streams.source,
47202	»
36812	"willRewrite"
47047	»
47079	»
37300	ctors
47577	»§
55384	d.add(fields.get(i));
47180	»
25445	estimateRam
47085	»
54834	NRTManager.TrackingIndexWriter}
28769	this.skipInterval
65362	divergent'
43678	calendar.set(year,
34761	qp.setPhraseSlop(99);
52496	doc.add(newField("field0",
7019	NumericUtils.floatToSortableInt(min.floatValue());
5273	jjround
41157	_TestUtil.randomRealisticUnicodeString(random);
58235	surrogates.
41785	(long)weight);
20798	output);
47592	»¼
27605	"\u0300\u0308\u005F",
26502	assertTrue(result
4383	Filter
47652	»µ
62693	_TestUtil.randomRealisticUnicodeString(random),
59546	"\1\25\4\0\2\67\11\0\1\25\11\0\2\25\2\67"+
5821	rBits);
47288	»»
66310	postingsArray
7905	typically
52978	0xBD);
1121	before
33098	flagsAtt2.setFlags(4711);
45122	"Å"
3964	ctor.
52132	deleteall
7987	crashes
48852	offset.length;
19530	(Error)
28325	lscorer.docID();
55965	purge_multiplier
1203	crashed
49369	("*".equals(termStr))
17361	testRandom()
66263	(r<5)
7768	d.get(MAGIC_FIELD);
49075	(TokenMgrError
49637	discardEscapeChar(term.image.substring(1,
23820	ctor:
6303	parse(Version
60518	"\150\0\1\u0101\32\266\1\142\3\266\1\u038b\6\266\1\0"+
58835	utf8Data[2*i],
39280	(termArrays1.size()
62812	org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31;
47939	TwoPhaseCommit#commit()}.
12028	yyeof
32931	per-field,
16497	<code>maxSize+1</code>,
67709	newSize){
32854	(termsHashPerField.numPostings
16747	isReadOnly(IndexReader
49159	rewriting
56574	firstCommit.getTimestamp();
42266	testsimpleattributeimpls
31316	indexDir,
10005	"\1\153\1\0\1\136\1\151\1\136\1\0\2\152\1\137"+
51900	MaxFieldLength("LIMITED",
28531	compress
40489	#incrementToken}!
27613	"\u0300\u0308\u0061\u003A",
59319	"\2\25\1\65\1\0\1\66\1\0\1\66\1\67\1\0"+
22170	asymptotic
9709	"\1\0\7\25\1\0\4\25\1\0\2\25\1\0\20\25"+
51149	finishMerges(boolean
20897	<li>Set
2971	dotestmultithreads
32227	indexDir)
15317	NumericField.DataType.LONG;
4389	testFloatRange(4);
53378	readLength;
1153	out.close();
62503	summing.
18264	"good"
24602	instantiate
25487	Set<CacheEntry>>(17));
37966	carefully
51148	deleteAll");
9415	"\1\126\1\114\1\114\1\114\1\123\1\121\17\0\1\115\u02c1\0\1\70"+
23564	doIndexing);
33137	FlagsAttributeImpl",
50913	re-index
29502	Assert.assertEquals(VALUE1,
20963	newSize);
36312	nodeAddress.length
30984	indexDir;
47052	»
27313	"\u003A\u0308\u0061\u2060",
47364	»
9553	"\1\u55eb\1\u568e\1\u5731\1\u57d4\1\u5877\1\u591a\1\u59bd\1\u5a60"+
47362	»
30327	TwoPhaseCommitTool.execute(objects);
27610	"\u0300\u0061\u2060",
45089	"Å"
11384	"\1\u0325\160\0\1\u04a7\33\0\12\u046f\175\0\1\u04a7\33\0"+
6582	target="_blank"
47386	»
47354	»
47352	»
47384	»
65979	(b:\"dd
19249	»
10013	"\1\25\1\64\5\0\1\25\2\0\1\25\2\0\1\25"+
47356	»
47388	»
47392	»
50198	IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL}
47394	»
47359	»
47390	»
68091	IllegalArgumentException(String.format(
47582	»¿
47396	»
47083	»
56886	"\50\0\14\12\164\0\3\12\1\0\1\12\1\0\207\12\23\0\12\2"+
43116	runTest(IndexSearcher
39876	doOpenIfChanged(openReadOnly,
10480	"\1\141\12\u0191\1\0\1\136\1\151\1\136\1\0\2\152"+
53649	subdoc
32223	_TestUtil.getTempDir("index.TestLockFactory7");
21334	".ten",
8653	entitydetect
58663	NRTCachingDirectory(fsDir,
54456	keywordSet));
8397	0..255");
23382	String.valueOf(value)));
14589	fetch
6009	t.term());
56434	segmentCount);
20874	default="
10607	"\1\u01e9\22\264\1\141\4\264\1\u01ea\5\264\1\0\3\136"+
34773	+foo",
65302	newArcs,
7609	retval.append(ch);
10572	"\1\u01d6\15\0\1\u01d6\6\0\1\u01d7\2\u01d8\1\u01d7\5\u01d8"+
31322	(!oldName.startsWith("19.")
36787	this.bytes
45845	"Å¯"
3481	defensively
27902	"\u0031\u003A\u0308\u003A",
22648	newStringRange(String
65306	newArcs;
24921	dhjfb
57556	(PagedBytesDataInput)
15477	fields/vectors
42395	generateRandomData(byte[]
25542	Map<ReaderField,
36334	Arc[0x80];
24479	"ZWXY");
51038	IOException("background
6036	variant
9245	queryandlimit
26242	interprets
55429	getidstring
6762	Sorting
10773	"\1\230\1\u0289\10\230\175\0\1\346\32\230\1\347\1\u029a"+
21591	preLen);
23215	Sort.RELEVANCE).scoreDocs;
22071	x923f64b9
5298	endLine;
10900	"\1\264\1\u0318\10\264\1\0\3\136\1\0\2\136\1\137"+
62850	init(Version
57512	dataPagedBytes
53933	helloworld
44531	"áµ®"
4591	conf.getOpenMode());
27493	"\u005F\u3031"
6517	NumericRangeFilter}
18625	"2008"
36299	INPUT_TYPE.BYTE4;
42965	reusabletoken
36487	targetHasArcs
35908	testExclusiveCollating()
65010	doing...)
64004	EIGHTH
21915	//read
36297	INPUT_TYPE.BYTE1;
36387	INPUT_TYPE.BYTE2)
67216	org.apache.lucene.store.LockVerifyServer
15926	"3.0").
51552	merge="
51622	mergeInit(MergePolicy.OneMerge
36207	numArcs;
61239	"\175\0\1\351\1\232\1\u05ee\30\232\1\352\12\232\175\0"+
1866	(field.isTokenized())
59804	"\1\57\2\0\1\60\4\0\1\201\14\0\1\62\4\0"+
45124	"Å"
36298	INPUT_TYPE.BYTE2;
59950	"\1\325\1\326\1\327\1\137\12\266\1\u0154\3\137\1\0"+
64491	includeSpans.doc()
36732	seekToNextNode(BytesReader
14930	sortpos
7282	returned.
7328	returned,
23320	nextID-1;
27591	"\u0300\u0308\u000B",
33179	testReflectionOfToString()
53247	returned;
41220	LuceneTestCase.TEST_NIGHTLY)
3754	details.</li>
66940	outputs2.subtract(output.output2,
40517	returned:
59628	"\1\67\1\0\1\25\2\0\1\25\1\141\4\36\1\355"+
898	IOException("now
8496	source2.addSinkTokenStream(sink2);
6947	accessible
33139	FlagsAttributeImpl);
51244	mergedName,
37003	nodeArcCount++;
59091	int[1709];
3708	standard
9082	impl
22692	Byte.MIN_VALUE;
25639	readerKey;
28706	testPrefixFilter()
35525	c=A[i+3];
55553	writer.addDocument(DocHelper.createDocument(1,
25641	readerKey,
32704	decoded.length,
36386	INPUT_TYPE.BYTE1)
55507	Index.NO));
22696	Byte.MIN_VALUE)
11301	"\12\u0465\1\u0424\175\0\4\u0466\2\0\1\u0466\15\0\1\u0466"+
15524	this.hasVectors
24275	Byte.MIN_VALUE,
7452	"drunken",
30265	tiord
36449	shouldExpand(nodeIn);
4472	getdocidset
1495	NUMBER_OF_DOCUMENTS
53051	HALF_BASE;
36880	queue.get(queue.size()-1).arc.isLast())
67279	iterations.
8689	setFieldInfos(FieldInfos
55061	iterations,
5130	(!jjCanMove_2(hiByte,
17692	RewriteMethod()
4855	defaults
42980	clearnotermbuffer
66575	intstart
55016	dw.writer.commit();
4033	correctoffset
54860	newGeneration
7781	"+fname,
56812	lastdeletetime
361	doc.add(newField("f",
7999	#setUseUnmap
59299	"\12\65\1\66\1\0\1\67\3\0\1\66\166\0\1\136"+
17501	MapFieldSelector("f2",
17287	readerfinished
19253	¼
14650	Byte
11135	"\1\u020c\3\0\2\u01ca\4\0\1\u01ca\155\0\1\u03e4\272\0"+
48432	disjunctionsumscorer
19265	¼
3492	segString(Directory
968	NUM_THREAD
38253	0x800000000000043L,
24013	"0.0f",
14780	FieldComparatorSource}
17071	Note,
25801	IllegalArgumentException("Clauses
17671	default.
576	"content3",
42445	(payload
48752	TermVectorOffsetInfo[][]
16519	default,
38710	norms1[i],
55645	mainWriter.setInfoStream(infoStream);
31260	(binary
27034	"\r\u0308\r",
17116	AtomicInteger(1);
28625	caught
1885	default:
64399	compressionLevel)
56663	deleted",
38433	setOpenMode(OpenMode.APPEND).
66424	nextPerField.start(f);
55970	getanddecrement
56469	SpanQueue(int
20106	cIter
31168	testCreateCFS()
67309	(withReopen)
29960	"\2\65\10\0\1\26\1\0\2\25\1\0\1\65\10\0"+
3874	Note:
9309	"\1\200\1\173\1\230\1\236\1\231\1\241\1\217\1\241\1\150\1\174"+
64710	testEasy()
39208	"+doc+
24658	"IDHFGJAEBC";
32164	allocslice
55080	iterations;
11310	"\12\u046d\1\u03da\13\0\1\u0325\160\0\1\u0386\4\u046d\2\0"+
57490	dataInput;
50133	LockObtainFailedException}
10862	"\175\0\1\346\21\230\1\u02f7\10\230\1\347\12\230\175\0"+
48169	LinkedList<byte[]>();
41602	nothing);
23908	<p><b>NOTE:
9043	Math.min(term1.length,
903	takes
29508	prop_key1
10809	"\6\0\12\u02c0\176\0\4\u02c1\2\0\1\u02c1\15\0\1\u02c1"+
24587	Sort(SortField.FIELD_DOC),
66745	Usage</h3>
31345	non-ascii
7438	riw.addDocument(doc);
8700	setfieldinfos
17975	taken
11964	(zzAttributes
68070	rightoffset
39729	initialize(readers);
66763	Sort(SortField.FIELD_DOC);
28635	not");
42584	read(c,
56544	exclDoc)
43368	lastInt;
63606	x6321
59615	"\1\141\6\36\1\355\7\36\1\355\13\36\1\142\12\143"+
42514	testdata
5338	jjMoveStringLiteralDfa0_2();
21344	extraneous
39174	reader.docFreq(terms[termIdx]);
41059	(output1.equals(outputs.getNoOutput()))
22579	attributeimpl's
2909	collect(final
10983	"\12\264\1\u036c\17\264\1\141\12\264\1\0\3\136\1\0"+
9381	"\4\132\1\133\15\0\300\132\47\133\25\0\4\133\u0116\132\2\0\6\132"+
18290	DisjunctionMaxQuery(0.0f);
44931	"Å"
48989	take,
52410	Field(name,
64119	charsToRead);
44795	"áµ¼"
11633	"\1\u055b\15\0\1\u055b\6\0\12\u055c\1\u0549\174\0\1\u0332"+
40720	s.charAt(idx2);
138	newIndexWriterConfig(TEST_VERSION_CURRENT,
32701	empty",
35854	assertEquals("A,B,D
36290	byte[numBytes];
37871	views
66655	Assert.assertTrue(Arrays.asList(runAndReturnSyserr().split("\\s")).contains("-Dtestmethod=test"));
44970	"Å"
37843	Character.isLetter(c);
66886	output2;
30139	indexDivisor);
45007	,"l",
40206	(tenum
44972	"Å"
55942	stillAliveCount
53295	output1;
29682	"\0\0\0\147\0\316\0\u0135\0\u019c\0\u0203\0\u026a\0\u02d1"+
28016	"\u0031\u002C\u0308\u0061\u0027",
57037	</tr>
10953	"\5\230\1\347\12\230\175\0\1\346\1\u034d\1\u034e\1\230"+
48229	(start1
42258	att.hashCode(),
56037	output2)
6030	assertEquals(buf.length(),
17575	d1.add(newField("f4",
58596	cldr
33660	ldmp.setMergeFactor(4);
38571	assertTrue("not
58312	b.length)
61167	"\1\u034d\24\u02e2\1\u05a8\5\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
45774	"Å®"
59819	"\12\266\1\u0154\3\137\1\0\2\137\1\140\1\u0143\1\u0144"+
58992	assertEquals(new
4847	getmergedsegmentwarmer
29889	"\2\0\2\34\1\0\3\34\1\0\1\34\2\0\4\34"+
35941	addDoc(String
25600	kid);
34313	this.delPolicy
1280	w.updateDocuments(new
39120	phrase.
41523	idx=0;idx<NUM_IDS/10;idx++)
50380	(drop
20787	output1,
27994	"\u0031\u002C\u0308\u0041",
66805	terms.add(termAtt.toString());
53712	assertquery
28689	testtypetokenfilter
20734	targetOffset
56480	initSpanQueue(int
19309	wanted
38651	addDocumentWithDifferentFields(IndexWriter
15268	simOutage();
51201	noDupDirs(dirs);
53468	CachedDfSource
45708	"áµµ"
20774	algebra
25721	frequently
64152	clef
4603	conf.getRAMBufferSizeMB(),
48689	testindexwriter
5777	right-shift
31164	index.<VERSION>.nocfs.zip
8350	(args.length
320	deleted);
38116	intVals[i]=NumericUtils.floatToSortableInt(vals[i]);
27746	"\u0061\u0027\r",
54362	setMaxTokenLength(int
58107	pp2.ord;
53072	(!validUTF16String(s1))
14874	(Double)
45087	"Å"
67284	RAMDir
19673	phrases
6784	e.g.
46835	cles
5598	SmallFloat.floatToByte315(Float.MAX_VALUE)
34665	(other.function
58275	System.arraycopy(other.bytes,
66716	Types
39181	ExactPhraseScorer(this,
17935	pad(unsignedIndexDir.maxR);
58739	"ab\udc17\udc17cd",
10760	"\1\346\7\230\1\u0287\22\230\1\347\3\230\1\u0288\6\230"+
58194	release(String
35780	xf0000000
10023	"\7\0\3\64\2\0\2\64\12\0\2\64\1\0\3\64"+
33503	test1to1()
27907	"\u0031\u003A\u0030",
57850	NIOFSDirectory
20018	disableCoord;
10280	"\1\u0139\1\u013a\1\u013b\1\u013c\1\0\12\230\176\0\32\230"+
47103	µ¾
21917	please
52841	Software,
57784	MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));
2918	base="
14907	missingvalue
20027	disableCoord)
47305	µ¿
20177	disableCoord,
51496	currentReader.isDeleted(j);
38099	plusInf);
19960	map.clear();
7192	restrict
57262	BitUtil.pop_array(a.bits,
36842	readFirstTargetArc(arcAndState.arc,
3527	add(OneMerge
45905	"áµ«"
15985	TestAtomicUpdate
23821	tracker.close();
11451	"\1\u04db\5\u04dc\1\u04dd\14\0\1\u02cf\161\0\4\u04de\2\0"+
5400	datetools
9262	termsiterable
18551	"Õ°Õ¡Õ´Õ¡ÖÕµÕ¡",
31920	Float.parseFloat(value);
60907	"\5\u04c1\1\u04c2\175\0\1\u0475\242\0\1\u0475\33\0\2\u0476"+
23783	closed");
22503	clazz.getName();
45424	"áµ±"
17038	//ignoring
33398	<code>end()</code>
51920	midStartCommitSuccess
47176	µ»
528	java.io.PrintStream;
32237	exceptions",
54845	waiting.
47931	discarding
59709	"\2\137\150\0\1\u0101\4\266\1\u0107\5\266\2\u0107\3\266"+
50835	waiting:
38440	Field("keyword2","test1",
66186	{2,3};
47195	µ¼
47529	µµ
36709	nodeRefToAddress.length);
27920	"\u0031\u003A\u0308\u0061\u0027",
37365	[got
58303	b.length;
43460	SpanNotQuery(new
55469	'0');
58104	(pp1.offset
59747	"\1\0\2\137\1\0\3\137\3\0\1\137\1\164\3\0"+
66261	(r<2)
54239	assertFalse(bits.get(key));
58488	testSingleHighSurrogate()
27170	"\u3031\u0308\n",
59848	"\2\u015d\1\u015c\5\u015d\1\u015e\1\0\3\137\1\0\2\137"+
50440	info.dir,
47135	µ¹
22533	LinkedList<WeakReference<Class<?
54802	locked)
54004	owner.cloneNormBytes(bytes);
67484	readers.add(c);
53098	Lead
38822	testUniqueTermCount()
19094	"å£¹ã",
19176	ØØ§ØØ
32131	allocSlice(final
38390	org.apache.lucene.store.LockReleaseFailedException;
38546	fieldables.length);
47429	µ?
55614	doc150
27277	"\u0041\u0031"
16529	MyQueue<MyObject>(numHits);
59314	"\1\66\1\137\1\144\1\137\1\0\1\137\1\145\1\140"+
30000	standardtokenizerimpl31
54734	locked:
28515	assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue("stringCompressed")).equals(binaryValCompressed));
4187	testRange_2bit()
16622	PriorityQueue.
53553	extract
34896	getStreamCount();
54695	locked,
3109	Allocate
35687	{n+=32;
7496	serializing
51875	locked.
41439	BytesRefFSTEnum<Object>(b.finish());
61665	uc9b9
18053	dependent
9032	term.text;
25660	entries)
11049	"\1\u039e\15\0\1\u039e\6\0\12\u03a0\1\u039f\13\0\1\u0122"+
25505	entries,
40604	"ftop",
23860	entries.
39583	other.add(lastFieldNumber,
67952	RemoveATokens
65727	currentcommitpoint
16160	testgetscores
60181	"\3\0\1\137\4\0\2\137\150\0\1\u0101\24\266\1\u0257"+
13176	uc9c3
27784	"\u0061\u0027\u0061\u002C",
25657	entries;
30611	"\2\0\2\102\1\0\3\102\1\0\1\102\2\0\4\102"+
30758	mimics
23714	searching...
32946	startOffset);
22090	quantity.
32934	shrinkHash()
14937	intcomparator
36876	arcAndState.chain.ints[arcAndState.chain.length-1]
12374	uc9d7
7233	PriorityQueue}
10873	"\1\376\32\264\1\141\5\264\1\u0156\4\264\1\0\3\136"+
25384	}))));
27247	"\u0041\u0030"
32132	upto)
7578	retval
9349	"\1\132\1\0\2\132\2\133\2\0\12\134\1\0\2\132\17\0\2\133"+
57325	pos=Math.min(wlen,other.wlen);
55880	didwarm
23549	upto,
11937	occurs.
22960	CollectionUtil.insertionSort(list1,
2645	TimerThread
48679	(!this.__test_dir.mkdirs()
5913	writeMasks
62379	"s("
26924	"\u0001\u0308\u0001",
46482	"â¯"
3987	CharTokenizer>
7113	dramatically
26121	EMPTY_SCOREDOCS;
27791	"\u0061\u0027\u0308\u0031\u002C",
54849	notified
60554	"\260\0\12\u03a7\11\0\1\u0213\231\0\1\u0272\175\0\4\u03a8"+
3106	cachedScorer.doc
26870	startOffset).
23366	Term("city",
32936	start(Fieldable
27131	"\u000B\u0308\u0041",
49435	escape(String
21530	cfw.addFile("file."
30341	railOnRollback);
2025	code
33348	System.out.print("\tRolling
26491	testDoc);
48528	UnsupportedOperationException}
43566	assertTrue(doCompare(bv,bv2));
26853	startOffset()
3115	upto;
57422	getandset
17792	RewriteMethod}.
58540	assertFalse(copy.contains(string));
10085	"\1\25\21\0\14\25\2\0\2\25\5\0\3\25\1\0"+
33175	"foo=bar,moo=mae";
50266	anyNonBulkMerges;
3283	(!other.acceptsDocsOutOfOrder()
2678	large
51309	kept.
15832	dir.fileExists(delFileName)))
43266	assertTrue(tdocs.skipTo(74));
3749	CharTokenizer}
4177	2*distance+startOffset,
9807	"\2\42\2\153\1\42\1\153\1\42\1\0\1\136\1\151"+
59534	"\2\25\2\66\4\0\2\25\3\66\11\0\2\25\2\0"+
66435	postingsHashMask;
48095	is);
5183	jjMoveStringLiteralDfa0_2()
62767	subHits.scoreDocs)
5393	calendar
37038	abs");
37752	String.valueOf(i),
15754	(hasDeletions())
2980	lastdoccollected
19224	ÏÏ¿Ï
389	reader.numDocs());
24698	buff.toString());
32183	makeLock
38642	testOpenReaderAfterDelete()
59960	"\2\0\2\77\1\100\1\0\1\26\2\0\1\25\1\u0196"+
46362	"â¼"
39067	changed",
62271	"dixit")
28230	this.collectors
65594	locked();
51895	getLimit()
26265	CodingCase(10,
50208	MERGE_READ_BUFFER_SIZE
20356	noopcollector
10633	"\1\u01cc\5\0\2\u01c8\4\0\1\u01c8\151\0\1\u0209\32\u01c9"+
30787	#fill(CharacterBuffer,
16076	searcherThread1.count
15246	fileLength(String
34480	getIndexingChain()
46425	"â«"
34420	2048");
49404	codePointMultiplier
26661	Implementations
17697	readResolve()
26313	(int)((numEncodedChars
29788	"\1\0\1\53\1\0\1\53\1\54\1\0\1\34\2\0"+
17902	assertEquals("max,max,T,T",
10445	"\1\u0185\45\u0141\1\u0169\2\u0141\1\u0186\1\u0169\2\u0141\1\u0187"+
15446	lockLess
31630	oldsinglesegmentnames
26263	CodingCase(11,
37874	carefully.
27817	"\u0061\u0027\u2060\u0308\u005F",
27969	"\u0031\u0027\u0061\u0027\u2060",
21986	abstraction
39982	subReaders[i].setNorm(n-starts[i],
23827	recorded
26541	s.equals(""));
34882	posincrementanalyzer
9925	"\3\25\1\0\1\25\6\0\1\25\1\0\2\25\123\0"+
66103	testStopWordSearching()
26262	CodingCase(12,
48678	hand)");
56179	junit.framework.TestSuite;
9210	for(Map.Entry<Query,Integer>
15383	testloadfirst
17743	ConstantScoreAutoRewrite#setTermCountCutoff}
41112	fstEnum.next())
49014	OR_OPERATOR
67773	appendNull()
46007	"â¦"
25131	String[]{"prefix",
53864	java5.codePointAt(cpAt3,
98	org.apache.lucene.index.TestIndexReader.addDocumentWithFields;
38494	assertTrue("map
10397	"\175\0\1\346\1\u016a\1\230\3\u016a\1\u0172\14\u016a\2\230"+
26260	CodingCase(13,
48181	matchPayload.isEmpty()
34251	mergeScheduler;
60991	"\1\u04ff\15\0\1\u04ff\6\0\12\u04ff\1\u04c6\175\0\4\u0500"+
40694	Long.MAX_VALUE));
30492	sortedset
40021	this.writeLock
28660	TypeTokenFilter(false,
46198	"âµ"
64780	t.length()
53478	available");
23326	mergeScheduler)
59330	"\1\137\4\0\2\137\2\0\1\70\1\0\1\51\1\0"+
25839	spanNearQuery
5430	startstate
26533	indexedFieldNames.add(name);
29594	"\1\0\1\142\1\0\1\142\2\0\2\142\1\0\4\142\1\143\2\142"+
59952	"\3\0\2\137\204\0\12\u0183\175\0\1\u0101\5\266\1\u0107"+
62973	set2.iterator();
57429	pop_xor
30572	"\1\43\5\0\1\44\3\0\1\141\11\0\1\46\2\0"+
22967	CollectionUtil.insertionSort(list);
9545	"\1\u2dce\1\u2e71\1\u2f14\1\u2fb7\1\u305a\1\u30fd\1\u31a0\1\u3243"+
57650	addOffCorrectMap(int
63610	x6421
12775	uc9cd
31002	f.delete();
36864	arcAndState.chain.length-2;
4682	IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);
45562	"â¡"
3934	bufferIndex);
51445	bufferedDeletesStream.numTerms()
43090	TestElevationComparator
29578	"\3\0\3\132\1\0\4\132\3\0\2\132\1\0\1\132\1\0\2\132"+
30556	"\32\0\15\25\5\0\3\25\1\0\1\25\5\0\3\25"+
29846	"\3\0\1\65\1\0\1\65\2\0\1\25\2\0\1\27"+
40907	fstEnum.next();
16116	mscores
53608	scoreDocs.length;
53660	searchAfter()
18928	"bar",
20796	"bar")
1636	LockObtainFailedException,
18769	"ÏÎ¿Ï",
9064	readstring
52636	testCompoundFiles()
17086	storeoffsets
48785	token.endOffset
19857	TEST_SCORE_TOLERANCE_DELTA);
4695	("indexingChain".equals(f.getName()))
25656	msg;
17923	extremes",
2396	//there
64653	checkbuffersize
4301	"':");
4523	testfloatrange
19378	FieldValueFilter
36997	arc.bytesPerArc;
66664	testErrorRule()
21226	msg,
16836	clonedReader.deleteDocument(2);
66569	initpostingsarray
2709	oneHour
3635	msec
47655	»¹
8872	contrib/misc),
61303	"\2\137\216\0\1\u057e\175\0\4\u0628\2\0\1\u0628\15\0"+
25967	updateBottom(doc);
6541	below.</p>
7109	database
39952	this.starts,
61244	"\2\0\1\u05f1\15\0\1\u05f1\6\0\12\u05f1\1\u05f2\175\0"+
29961	"\1\25\1\0\3\25\1\0\1\65\1\0\2\25\4\0"+
49855	hasnewapi
4294	totalTermCountT,
46497	"â±"
15279	indexDir
40673	doTest(int
24729	Float)
7135	includesmin
42032	"slot:"
22568	'this'
9637	"\3\u01cb\3\u026e\3\u0311\3\u03b4\3\u0457\3\u04fa\3\u059d\3\u0640"+
54536	-10000);
56891	"\2\7\1\10\1\0\1\10\3\0\2\10\1\11\1\12"+
18192	(ConstantScoreQuery)
43103	ipod
51392	doFlush(boolean
52485	ir2;
44918	,"k",
50491	mergePolicy.setUseCompoundFile
51	copy
11898	occured
3900	#normalize(char)})
29198	prevOffset
45082	"â¨"
48701	assertTrue(comp.compare("1.1",
18064	encapsulated
3175	curbase
31369	compare(String
48333	org.apache.lucene.util.ScorerDocQueue;
52484	ir1;
50306	termInfosIndexDivisor
61127	"\2\u0584\2\u0583\1\u0584\1\u0583\1\u0584\1\u053b\13\0\1\u033c"+
50811	rollbackInternal();
67954	RemoveATokens(TokenStream
49199	conj
63613	x6432
63612	x6431
827	conf
23970	locale-specific
24927	dhfbj
66784	encapsulates
53725	java.util.Set
33243	alltermdocs
20195	BooleanWeight(searcher,
19182	§
9285	<tt>C:/cygwin/home/s/svn/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34.jflex</tt>
33304	comm
64889	testTermPositionVectors(final
22422	comp
44547	"â¡"
29691	"\0\u188b\0\u18f2\0\u1959\0\u19c0\0\u1a27\0\u1a8e\0\u1af5\0\u1b5c"+
8168	curBuf.getInt();
19186	§§
7723	come
19184	§
58527	newWords.add(string+"_1");
19183	§
9591	"\2\u177b\2\u181e\2\u18c1\2\u1964\2\u1a07\2\u1aaa\2\u1b4d\2\u1bf0"+
19187	§
19185	§
54882	tryIncRef(IndexSearcher
47944	TwoPhaseCommit#commit()}
5612	orig_floatToByte(f);
8574	tee");
40117	ReaderCommit
7114	practice
9791	"\14\0\1\61\4\0\1\74\2\0\1\75\41\0\1\25"+
5655	orig_bytetofloat
5318	t.endLine
45170	"â©"
598	IndexerThread:
8950	docFreq
18416	doc1);
38405	assertEquals(sis.getSegmentsFileName(),
66697	testerrorinitializer
24427	slotValues[slot1]
2811	System.out.println("Informative:
53301	_output;
56696	i=0;i<107;i++)
44517	"â»"
45115	"â"
11472	"\175\0\1\346\32\230\1\347\1\230\1\u04e9\10\230\175\0"+
39503	(isIndex
8428	verifierHost,
29306	segmenttermpositionvector
8205	cost
22710	lowerVal.shortValue();
23654	assertTrue(sawAfterFlush.get());
53307	_output)
21414	expected.seek(0);
53297	_output,
40322	computations.
31114	newestsegment
26258	CodingCase(14,
56504	ArrayList<byte[]>(theTop.getPayload());
5292	unchanged.",
36711	findTargetArc(int
56379	ByteSliceWriter(ByteBlockPool
65787	getCount()
14791	buffer.append("<string_val:
34180	rptterms
42497	pool.release(payload);
40692	PositiveIntOutputs.getSingleton(random.nextBoolean());
62477	super(scorer.weight);
20464	expectedOrder[4]
357	MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
38713	norms2);
55622	MockAnalyzer(random)).setReaderTermsIndexDivisor(2));
52586	uniques.iterator().next();
65592	refresh(String
47917	commit(commitData);
8059	"+getMaxChunkSize());
28392	CharsRef.getUTF16SortedAsUTF8Comparator());
36703	nodeRefToAddress[code];
18360	BooleanClause.Occur.MUST);//
64086	dir.createOutput("bar");
36437	//System.out.println("FST.addNode
40821	_outputs
42202	att.getPositionIncrement()));
8183	buffers[bi];
10481	"\1\26\2\0\1\25\1\u0190\32\36\1\141\1\u0158\1\u0192"+
34979	IndexSearcher,
23785	IndexSearcher.
22676	(inclusiveUpperPoint
12025	core
48003	enforcesinglesegment
58550	assertTrue(CharArraySet.EMPTY_SET.isEmpty());
18335	printHits("testSimpleEqualScores2",
23862	IndexSearcher)
22575	chartermattributeimpl
16406	(snapshots
14569	copybuffer
44876	"â"
46106	"â´"
40922	minLong-7));
27191	"\u3031\u005F",
19312	getresourceasstream
7136	includesmax
20460	expectedOrder[2]
16991	TVPositionInfo
35790	Kohlschuetter
66926	noOutput2)
50618	fieldInfos.add(segFieldInfos.fieldInfo(fieldNumber));
40569	ir);
44947	"â"
4944	jjMoveStringLiteralDfa0_3()
58461	CharArraySet.unmodifiableSet(null);
27739	"\u0061\u003A\u0308\u0031\u0027",
40632	for(IntsRef
4967	jjStartNfaWithStates_3(int
54145	stopwords0
21453	a2.getFilePointer());
55554	1+random.nextInt(5)));
54147	stopwords1
20462	expectedOrder[3]
53703	paged.scoreDocs[i].doc);
62247	TestFieldMaskingSpanQuery
54358	stopwords)
51218	origName="
32427	stopwords,
8640	restoreState(state);
27883	"\u0061\u002C\u0308\u0031\u0027",
7486	TermVectorsTermsWriter
27839	"\u0061\u0027\u2060\u0308\u0031\u0027",
40580	ir.ints.length)
44819	"â¤"
46461	"â®"
15072	assertTrue(doc
20456	expectedOrder[0]
34718	blah\"").toString());
28839	IntBlockPool
3814	CharacterUtils.getInstance(matchVersion);
58371	"at",
14645	according
31213	BINARY_PLAIN_LENGTH
38677	assertEquals("Single
35805	ParallelTermEnum)
64834	actual=null");
63155	Collections.shuffle(terms);
47961	enforceSingleSegment
58169	no-op.
59706	"\1\u0107\10\266\1\142\12\266\1\0\3\137\1\0\2\137"+
57442	TestNeverDelete
57127	no-op)
26842	charupto
30359	impl.prepareCommitData);
20458	expectedOrder[1]
676	return
40715	Integer.toString(idx);
7102	framework
24919	dhfjb
58224	Length
2672	qtxt
40859	verifyPruned(inputMode,
45048	"â"
45478	"â¬"
46431	"â¾"
46541	,"(20)",
59477	"\1\50\1\0\1\51\1\0\1\52\2\0\1\53\3\0"+
60252	"\175\0\1\351\7\232\1\u0297\22\232\1\352\12\232\175\0"+
36510	lastArcStart;
48886	sortedSet.size()
33646	ldmp.setMergeFactor(5);
36675	bytes[in.pos];
49820	jj_2_rtns[index];
22202	bytesPerElement);
22667	lowerPoint;
4185	testRange_4bit()
33249	records.
53240	lead_surrogate_offset_
15659	hasVectors);
20345	assertTrue(cc.isCached());
33386	lastindexof
46360	"â§"
9933	"\1\0\3\136\1\0\2\136\1\137\3\136\3\0\1\136"+
5902	size(int
60829	"\4\u02e2\1\u0428\17\u02e2\1\u034e\12\u02e2\175\0\1\u034d\20\u02e2"+
54758	channel.tryLock();
35547	//CSA(foursB,
65276	inputCount;
55838	testaddcloseopen
10444	"\1\u0140\1\u0141\2\0\1\u0168\1\u0140\4\0\2\136\150\0"+
28078	"\u0031\u002E\u2060\u0308\u0031\u002E\u2060",
41788	//System.out.println("add:
42918	((PayloadAttribute)
7374	priorityqueue
54878	IndexReader.open(writer.getIndexWriter(),
31954	NUMERIC_UTILS_LONG_PARSER
44636	"â¢"
29347	endIndex-startIndex
15698	IOException("cannot
54840	periodically.
22745	FieldCache.DEFAULT.getLongs(reader,
9843	"\1\0\1\50\1\0\1\51\2\0\1\166\3\0\1\53"+
43040	periodically,
57482	org.apache.lucene.util.packed.GrowableWriter;
24339	v[j]
32471	Intentionally
11564	"\6\0\12\u052c\1\u0511\13\0\1\u0325\160\0\1\u0386\4\u052b"+
26953	"\u0001\u0308\u3031",
57326	System.arraycopy(otherArr,
36237	(flag(BIT_FINAL_ARC))
23548	assertEquals(NUM_DOCS
701	System.out.println("TEST:
56097	"pres*")));
64873	bytes_per_posting
44708	"â£"
36274	nodeRefToAddress
18719	Ø´Ø¯.",
28220	col;
50075	checkAbort.work(length);
8774	testrandomstoredfields
42083	getReverseMul()
6794	MultiTermQuery
42752	endOffset[,
30843	java4characterutils
14905	fieldcomparatorsource
3123	MAX_ARRAY_SIZE;
20574	setPreviousTokenStream(streams);
42663	merge(MergePolicy.OneMerge
51680	info.setDiagnostics(diagnostics);
6748	Using
56347	first_cut
57349	Math.min(this.wlen,
14850	getComparator(final
3122	MAX_ARRAY_SIZE)
65910	occur[]
48261	matchSlop
35529	//CSA(foursA,
51366	pendingCommit.finishCommit(directory);
17814	multitermquerywrapperfilter
40009	ReadOnlySegmentReader.noWrite();
8396	System.out.println("myID
6180	MultiFieldQueryParser.
27236	"\u0041\u0041"
26755	frequencies
516	isdeleted
7944	FSDirectory
52906	dealings
42495	termAtt.append(term);
57526	fieldStrs.add(currentField);
62241	testnullorsubscorer
16615	log(n)
62604	search(c2));
33190	assertSame(FlagsAttribute.class,
65058	fst.setAllowArrayArcs(b);
37382	header
1158	fallback
2094	fst.addNode(nodeIn);
25454	defaults"
54055	StopFilter(TEST_VERSION_CURRENT,
47761	
39242	boq.add(new
47767	
53800	goNext()
47769	
25169	"*tall")),
33736	slop-valid
47771	
47775	
52620	weightings
19761	endminus1
35437	specialtoken
47773	
52355	numPayloads);
47777	
65719	commitsToDelete.add(this);
32604	encodedBuf1
47781	
32614	encodedBuf2
47778	
16896	testLucene1516Bug()
47211	¿
38774	testReadOnly()
46970	
46925	
46994	
47026	
59987	"\12\232\175\0\1\u01a9\15\232\1\u0133\14\232\1\352\12\232"+
59344	"\1\77\1\137\4\0\2\137\2\0\1\107\1\0\1\51"+
29583	"\2\132\6\0\2\132\2\133\2\0\12\134\22\0\2\133\1\0\10\132"+
34089	rp.toArray(new
3104	cachedScorer.score
34961	docIdSetIterator
43446	SpanTermQuery(t1));
47088	
15064	assertTrue(dir
47108	
63372	0x765421,
47021	
46987	
37270	StopFilter
47205	
47164	
47139	
23901	age="
41707	fst.readFirstTargetArc(startArc,
42277	attrimpl
47239	
47216	
66303	consumer.getStreamCount();
47274	
47312	
47401	
47680	¿
47337	
47691	
47286	§
44462	CLOSED
47436	
46400	"â¼"
47703	
34311	setIndexDeletionPolicy(IndexDeletionPolicy
47709	
64069	assertEquals(INTS[i],
20042	minNrShouldMatch
152	(doFullMerge)
32338	super.setLockPrefix(lockPrefix);
47697	
47782	
60701	"\5\u02e2\3\u0428\3\u02e2\1\u0428\2\u02e2\3\u0428\1\u034e\12\u02e2"+
17572	d1.add(newField("f1",
47741	
47723	
47183	¾
47716	
41331	fst.getArcWithOutputCount()
47764	
47758	
51146	++changeCount;
8931	precede
47751	
47732	
11935	expression
47125	¼
47765	¿
60364	"\12\232\175\0\1\351\1\232\1\u02fc\30\232\1\352\12\232"+
27299	"\u003A\u0308\u003A",
59663	"\2\137\150\0\1\u0101\1\266\2\u0107\1\u0108\1\u0109\10\u0107"+
18260	"elephant"));
63051	"\"^\"",
47678	µ
58941	this.indexOptions.compareTo(indexOptions)
55873	lastcount
53579	terms.toArray(new
47665	
47322	
46919	
46967	
31419	writer.maxDoc());
47225	
47257	
47754	¾
47296	
64220	un_tokenized.</li>
35211	freqOutput,
47496	
47467	
47525	
35223	freqOutput)
47594	
48157	collectPayloads
35033	buffer.append(filter);
41692	fst.finish(fst.addNode(rootNode));
47638	§
47735	¼
61329	"\1\u02e1\160\0\1\u0349\4\u063b\2\0\1\u063b\15\0\1\u063b"+
7684	replaces
55086	dw.writer
39110	"app"
47684	µ
24780	collectorMinRev,
3770	replaced
53922	cpat3
7163	minbound
38396	"fighters");
47095	»
8466	verifylf
47762	¾
17261	coreref
15223	(size>>>
19346	
49000	#setAutoGeneratePhraseQueries}
47734	§
56778	assertEquals(expectedCount,
4391	testFloatRange(2);
57256	BitUtil.pop_union(a.bits,
11125	"\161\0\4\u03de\2\0\1\u03de\15\0\1\u03de\6\0\12\u03de"+
54079	a0.add(a.get(i));
54058	testIgnoreCase()
47698	µ
7222	spanquery
47752	¼
30765	CharSequence}.
55091	WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)
4778	IWC,
16606	Removes
5147	jjMoveStringLiteralDfa0_1()
5572	i<256;
42848	newTermOffset,
66860	max-frequency
47726	»
15349	faultyindexinput
6074	Token("hello",
52202	mergeinit
56614	KeepLastNDeletionPolicy
19903	testName()
4091	functionality
60151	"\1\u022d\5\u022e\1\u022f\175\0\1\u01e4\242\0\1\u01e4\33\0"+
20919	#setPositionIncrement
35540	c=A[i+5];
59349	"\1\115\2\0\1\25\1\136\32\157\1\137\12\160\1\0"+
46237	"âµ"
52463	64");
59729	"\7\0\1\57\2\0\1\60\4\0\1\74\14\0\1\62"+
31361	testHits(hits,
35202	freqOutput;
37586	//float
19357	
52197	applymergechanges
399	testIndexReaderUnDeleteAll()
47742	»
46336	"â¦"
29488	JUnitCore.runClasses(InTestMethod.class);
61290	"\1\u061c\175\0\1\u034d\1\u02e2\1\u061d\30\u02e2\1\u034e\12\u02e2"+
10712	"\1\u0207\163\0\51\u0207\1\u025d\3\0\3\u0207\1\u0169\3\0"+
10207	"\1\u0103\1\264\2\u0103\12\264\1\141\12\264\1\0\3\136"+
58627	testiterator
43351	nextInt
51869	prepared.
47717	
59408	"\5\0\1\25\2\0\1\25\2\0\1\25\4\0\2\115"+
19356	¿
40940	assertEquals(scratch,
19360	
50833	(waitForMerges)
9594	"\2\u26c3\2\u2766\2\u2809\2\u28ac\2\u294f\2\u29f2\2\u2a95\2\u2b38"+
19151	
19131	
6227	queryText,
16207	queryText)
47087	
47637	
47699	
46917	
47692	
51821	directory.fileExists(fileName):
47711	
57576	input.setPosition(indexToDataOffset.get(termIndex));
50256	laser
19364	
46434	"â«"
47704	
59910	"\1\u016f\2\232\1\u016f\14\232\1\352\12\232\175\0\1\351"+
16035	i=0;i<100;i++)
10194	"\2\264\1\u0103\2\264\1\u0103\1\141\12\264\1\0\3\136"+
28591	input.read(buffer,
47679	
65284	UnCompiledNode(Builder<T>
47807	
66427	nextPerField.start(fields,
59357	"\5\0\3\25\1\0\1\25\10\0\1\25\2\65\2\0"+
31863	-(low
53055	UNI_SUR_LOW_START);
47683	
64681	terms.get(upto));
50334	msec");
47733	
38319	e15f
67479	ReaderThreadTask()
47744	
47725	
63899	'Î´';
2689	counterThread.join();
19068	"é",
22126	NumberFormatException("Unable
49903	newprefixquery
29111	fieldInfos.fieldName(number);
64473	exclude.clone());
48577	docState.analyzer
62380	+")";
47336	¿
50442	readerMap.put(info,
47809	
47175	iota
47817	
17184	applyDeletes
18583	"á¢áá³á­á­ááá²á«",
25022	testtopdocsscores
28068	"\u0031\u002E\u2060\u0308\u0061\u002C",
19193	Ø
52977	0xBF);
20909	across
2695	search(Collector
47866	
47825	¾
187	DELETE
47878	
47856	
49994	Segment
19363	
40256	infosupto
63093	savedTerms
22382	harmony
47849	
19365	µ
56271	inspired
19355	
43104	"str_s","c"}));
19140	
47794	
30230	ensureIndexIsRead()
32974	toArray
8236	(Iterator<MMapIndexInput>
47795	
47785	
18433	-------");
47786	
47784	
15012	
19146	
11803	map[j++]
28935	toString(int
6322	bQuery;
47845	
47871	
24549	(multi.search
4760	conf.setReaderTermsIndexDivisor(-2);
30928	tdc.topDocs(numResults
19270	
28215	(Collector
55994	empty_term_pos
65972	mfqp.parse("\"aa
19142	
47802	
19297	o'reilly's
19141	
46506	"â±"
47803	
50615	getFieldInfos(info);
47806	
19136	
16512	insert
9259	entryset
17499	MapFieldSelector(Arrays.<String>asList("f4")));
47793	
11396	"\161\0\4\u04b2\2\0\1\u04b2\15\0\1\u04b2\6\0\12\u04b2"+
8244	cleanMapping(b);
19145	
42862	other.positionIncrement
47838	¼
8462	lockdir
60184	"\1\u0258\30\266\1\142\12\266\1\0\3\137\1\0\2\137"+
47710	µ
62707	subSearchers[searcherIDX]
19134	
29566	"\2\132\2\0\26\132\1\0\7\132\1\0\1\132\3\0\4\132\2\0"+
28126	"\u0062\u2060\u2060"
19147	
46221	"â¡"
68065	testletterunicode
19143	»
19148	
63618	x6521
59243	"\3\0\2\25\2\0\2\25\1\0\2\25\1\0\3\25"+
19130	
59360	"\3\25\1\0\3\25\1\0\6\25\1\0\1\25\1\65"+
50820	(closes
19179	
33578	MappingCharFilter(normMap,
51832	startCommit(SegmentInfos
34344	average,
4367	upper-lower,
47844	¼
23502	(closed
47796	µ
5566	underflow
59607	"\1\36\1\355\3\36\1\355\2\36\2\355\1\142\12\143"+
53939	testfilljava14
59902	"\175\0\1\351\6\232\1\u016f\7\232\1\u016f\13\232\1\352"+
53936	testfilljava15
53343	bottleneck)
7424	startdocument
19135	
55648	AddDirectoriesThreads(numIter,
52590	#rewrite
19149	
11493	"\1\u04f8\2\u04f9\2\u04f8\1\u04f9\1\u04f8\1\u04f9\1\u04cf\13\0"+
15124	field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT)
19132	µ
62145	assertEquals(bq1,
41755	57L));
46384	"â¨"
25116	wq.setBoost(0.2F);
563	this.writer
63627	x6543
22729	upperVal.intValue();
63624	x6541
63625	x6542
23455	(updates)
16850	clonedReader.deleteDocument(3);
14555	south_east_asian_type
15845	!useCompoundFile)
19153	
60069	"\12\232\175\0\1\351\16\232\1\u016f\13\232\1\352\12\232"+
11023	"\1\u01cc\1\0\1\u020c\3\0\2\u01ca\4\0\1\u01ca\167\0"+
43485	
19137	
62429	BooleanScorer.java,
22534	Attribute>>>
18187	.append((query
66769	Sort(SortField...
59240	"\1\0\1\25\117\0\1\25\12\0\1\25\12\0\2\25"+
19144	
19139	µ
19152	
19150	
67174	entry.setOffsets(newOffsets);
39056	assertFalse("Test
63620	x6531
24037	"343.034435444",
19133	
63621	x6532
58999	sliceStart
19138	
18914	"bones"});
58987	byte[1<<i];
21982	termsOut
19197	Ø
19200	Ø§
19188	Ø
36771	posWrite)
19174	Ø
6366	multifieldqueryparser
36247	(flags
36794	bytes[pos--];
37457	query.add(new
27228	"\u0041\u000B",
10418	"\11\230\1\u016a\6\230\1\u016a\10\230\1\347\12\230\175\0"+
19175	Ø
604	idTerm
44858	,"j",
19196	Ø¿
62291	"smith"));
16159	ioob
16438	Directory");
46101	"â¨"
49485	function");
8422	lockFactory).setLockDir(lockDir);
48776	testTerms[i].length());
56610	commits.size();
35403	interpreter.
60522	"\3\0\1\137\4\0\2\137\150\0\1\u0101\11\266\1\u038d"+
55788	excs.size());
52982	stopping
36766	posWrite;
66842	statistic
9976	"\1\25\2\0\1\25\1\140\17\36\1\272\12\36\1\141"+
21971	termsOut;
24824	bits.set(docID);
42834	setPayload(Payload
25552	ArrayList<CacheEntry>(valMismatchKeys.size()
8549	Instantiates
36780	posWrite,
20666	assertTrue(dir.fileExists(name));
47820	?
30291	commitData
19055	randomTextWithURLs
28814	skipBuffer.length
567	"content1",
24615	assertTrue(!Float.isNaN(td.getMaxScore()));
37695	PRIORITY_FIELD
10591	"\1\u016a\14\230\1\347\12\230\175\0\1\346\10\230\1\u016a"+
66549	occupied).
65555	(currentSegmentsFile
39598	lastIndexPointer
9347	"\10\132\1\0\3\132\1\0\27\132\1\0\12\132\1\0\5\132\2\0"+
20	NOTICE
28118	"\u2060\u0063\u2060\u0061\u2060\u006E\u2060\u0027\u2060\u0074\u2060\u2060",
21086	thisdiskfree
16571	(T[])
38591	FileNotFoundException");
5500	invalid_lexical_state
58399	cas.add(TEST_STOP_WORDS[i]);
16100	SimpleScorer()
52096	handleoom
16996	super(false,
58459	assertTrue(set.contains(stopword));
18337	printHits("testSimpleEqualScores3",
29924	"\1\53\1\0\2\25\4\0\3\25\1\0\1\25\10\0"+
30612	"\2\0\1\102\153\0\1\103\46\0\1\161\15\0\1\162"+
47693	
47686	
49012	Operator.AND;
47694	
48568	doInvert)
66738	<p>String
47729	
47706	
47720	
47700	
46168	"â©"
33873	initComplex();
47756	
47737	
47747	
47719	
47797	¹
58524	stopwordsUpper)
47748	
47738	
47757	
67940	MGTF
47713	
1657	indexdivisor
10826	"\1\u02d2\32\u026f\1\u02d3\12\u026f\1\u014f\7\0\1\u0167\1\u0168"+
47728	
46338	"â»"
6433	Closeable
32617	++testNum)
37463	assertEquals("exact
54426	toHtml()
41980	ftation
47743	¹
16361	cs.correctOffset(
49231	prohibited");
42169	otherupto
46986	
47746	¾
54960	newReader);
59745	"\2\0\1\u0122\15\0\1\u0122\6\0\1\u0123\2\u0124\1\u0123"+
19477	IOUtils()
36540	repack
45897	"â¤"
46470	"â®"
34069	cnt0
47755	¿
47798	
48817	termAtt.append(testToken.text);
38318	e25f
54045	cnse
26751	servers
66992	English.intToEnglish(num*docsPerThread+j).trim(),
58370	"as",
34540	cnt;
34962	DocIdSet.EMPTY_DOCIDSET.iterator()
19633	posUpto;
8370	use\n"
14558	ideographic
866	"aa");
9829	"\1\25\2\0\4\25\1\0\2\25\1\0\1\25\4\0"+
48178	matchEnd;
64167	u00bfne
47799	
47787	
31760	commit.");
46437	"â¬"
47790	
40104	fnfe)
41866	BytesRef.deepCopyOf(output));
34204	OpenMode
34861	super's
65968	assertEquals("b:\"foo
64425	compress(result.result,
48417	Until
43605	supported");
47718	»
27278	"\u0041\u0308\u0031\u003A",
61004	"\20\u02e2\1\u050b\11\u02e2\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2"+
1856	indexStream);
23801	risky
18465	testbooleanoptionalnotiebreaker
46533	"â´"
47833	µ
37811	(MatchAllDocsQuery)
1716	backwards-compatibility
32366	indexwriters
36484	(arc.nextFinalOutput
49887	hasattribute
18414	doc0);
48165	spanNearQuery.getSlop();
49513	BAREOPER:
64166	u00bfce
10695	"\1\376\1\264\1\u024b\30\264\1\141\12\264\1\0\3\136"+
49966	oldtoken
19347	¹
1847	mismatch:
56005	setEmpty();
33376	testrepeatedrollbacks
47727	¼
67007	(indexDir);
43240	ccc");
1268	"subs",
15414	readinternal
9422	"\2\45\10\103\1\45\7\101\1\15\2\101\32\103\1\15\4\101\1\15"+
56324	swap(left,
45720	"â£"
59666	"\4\266\4\u0107\1\266\1\u0107\1\266\3\u0107\1\142\12\266"+
54001	Norm"
64349	(pendingTerms.size()
66194	-xx";
17813	constantscorequery
64346	runs,
56070	readability
38029	encoding,
24368	encoding.
25386	"Trees",
20104	sumExpl.setDescription("sum
59250	"\52\0\3\25\5\0\3\25\17\0\1\25\6\0\1\25"+
6494	brokencloseable
23975	encoding'
631	ioe;
59498	"\1\136\32\157\1\137\12\160\1\0\1\137\1\153\1\137"+
626	ioe)
17820	addclause
60007	"\12\u01b3\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
24583	fillFields
65654	incRef(SegmentInfos
32198	take",
18083	innerWeight;
14755	this.missingValue
2252	org.apache.lucene.search.DefaultSimilarity;
6096	assertEquals(pl,
17236	storesSegment,
53606	nDocs);
57048	<td>3.90</td>
30817	surrogate)!
58041	outputs:
5796	elementBits
36181	outputs;
66326	(postingsArray
63881	TestingCharTokenizer(TEST_VERSION_CURRENT,
63374	0x765431,
47973	{//Simple
66960	outputs2
22902	SpanNearPayloadCheckQuery((SpanNearQuery)
15589	storesSegment;
19272	¼
36262	outputs,
869	marked
40211	Optimized
45638	"â¢"
48879	fsMapper.getFieldToTerms();
66959	outputs1
19966	containskey
41446	outputs.
48826	//Check
36276	outputs)
19058	randomTextWithURLs,
30305	assertFalse("commit
32050	marker
6882	NumericRangeQuery<Float>(field,
11508	"\2\0\1\u0504\15\0\1\u0504\6\0\12\u0504\1\u04ae\13\0"+
50921	risk!
63375	0x765432,
50567	segmentInfos.read(directory);
66563	numpostingint
33598	randomMap()
27952	[11.0]
28128	"\u0033\u2060\u0061\u2060\u2060"
9029	scratch.offset
64773	numTermsSamePrefix)
57839	testnocommits
37639	sb.append(text).append('
54593	assertTrue(act.val
38666	index1.numDocs(),
42957	termattributeimpl
36103	encodings
32408	c+1));
28056	"\u0031\u002E\u2060\u0308\u00AD",
65718	(!deleted)
43004	reopenLock
60833	"\12\u02e2\1\u034e\12\u02e2\175\0\1\u0486\24\u02e2\1\u0489\5\u02e2"+
746	IndexerThread[NUM_THREADS];
58076	addField(final
50571	pending:
55924	initialValue();
56518	reqScorer;
53687	pageSize);
51648	setDiagnostics(merge.info,
66682	testassumeinitializer
57483	org.apache.lucene.util.packed.PackedInts;
10269	"\160\0\46\136\1\0\3\136\1\0\2\136\1\0\3\136"+
35125	PayloadBoostSimilarity());
18037	danish
56525	reqScorer,
20439	testReverseDateSort()
1645	topdocs
31712	easy-to-use
54291	offsetKey);
39877	doOpenIfChanged(final
42278	default_attribute_factory
21235	test.length());
16958	testlucene1516bug
30308	commitCalled);
32982	System.arraycopy(lastOffsets,
46077	"Å·"
15806	SegmentInfo.
4454	20L,
3592	SegmentInfo,
64138	read_test_bytes
15918	SegmentInfo)
59071	termcollector
24089	"m",
48437	disjunctionscorer
32760	++charNum)
44756	"â¾"
60854	"\4\u049b\2\0\1\u049b\15\0\1\u049b\6\0\12\u049b\1\u03d4"+
35682	alternate
22401	oversize
62846	http://issues.apache.org/jira/browse/LUCENE-1068
18104	normalize(float
11012	"\12\u037d\1\u02c2\175\0\4\u037e\2\0\1\u037e\15\0\1\u037e"+
37860	violates
65742	(this.type
10911	"\1\u0321\6\0\1\u0322\2\u0323\1\u0322\5\u0323\1\u0324\14\0"+
31692	tokenStream
64230	quality
18228	TestDisjunctionMaxQuery
43704	violated
46303	"â"
8406	(IllegalAccessException
52717	spanQuery
52924	HALF_BASE
12373	uc934
22915	payloadToMatch.hashCode();
65315	arcs[numArcs-1].target;
29590	"\1\0\1\132\2\0\7\132\3\0\1\133\4\0\6\133\1\0\1\133"+
32927	termsHashPerField.initReader(reader,
53269	Long(0);
62970	i1.next();
42288	Payload(testData);
12774	uc92a
24236	"BDFHJ");
26309	(numChars
36796	b[offset+i]
46257	"â"
57211	fastFlip(long
50029	entry.dir
49071	+query+
38684	ReaderUtil.getMergedFieldInfos(index2);
17430	termNumbers
56373	presorted
20405	http://issues.apache.org/jira/browse/LUCENE-1045
11949	ZZ_TRANS;
25046	outofordermulticomparatorscoringmaxscorecollector
46637	"ï¼½"
23762	compareTo(SearcherTracker
20474	dateTimeString
36847	scratchArc.isLast());
26930	(CR)
46280	"â"
65096	(minSuffixCount2
43628	CachingSpanFilter))
65243	(minSuffixCount1
30727	StandardTokenizerImpl(java.io.InputStream
8171	curBuf.getLong();
5288	Ignoring
45943	"â¥"
46397	"â"
9481	ZZ_ROWMAP
9734	"\1\0\14\32\1\0\4\32\1\0\2\32\1\0\21\32"+
32044	setInfoStream(PrintStream
37736	MAX_DOCS,
61354	"\1\u064f\4\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
37720	MAX_DOCS)
4559	java.lang.reflect.Field;
57592	compareField(Term
46349	"â"
37725	MAX_DOCS;
50558	!IndexReader.indexExists(directory);
1391	startdoflush
43092	testSorting()
9965	"\1\0\1\51\2\0\1\52\3\0\1\53\2\0\1\54"+
38436	writer.getConfig().getMergePolicy()).getMergeFactor();
57967	sd[i].score,
8588	(input.incrementToken())
11397	"\1\u0435\13\0\1\u02cf\160\0\1\u0332\4\u04b2\2\0\1\u04b2"+
64028	COUNT;
55380	getString(bigFieldSize),
65340	minsuffixcount2
62716	docStarts[subIDX]
18227	DisjunctionMaxQuery.
65339	minsuffixcount1
29496	pass"));
569	ddd",
11741	UAX29URLEmailTokenizer.NUM;
51637	bufferedDeletesStream.applyDeletes(readerPool,
48470	flush(Map<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>>
52220	mergevectors
27425	"\u0030\u000B",
18102	queryWeight
28002	"\u0031\u002C\u0030"
45469	"â "
46373	"â"
16391	(psdp
68106	prePopulate;
30848	boarders
37201	dofixedarray
5044	((0xfffffffbffffffffL
29314	#freq()}
29965	"\2\0\1\25\1\65\4\0\1\25\2\0\1\25\1\0"+
50033	performed");
10262	"\3\136\3\0\1\136\1\162\3\0\2\136\2\0\1\207"+
43815	assertTermEquals("e",
42697	w.mergeCount.get(),
68125	prePopulate)
6221	this(matchVersion,
11127	"\1\u0380\6\0\1\u0381\2\u0382\1\u0381\5\u0382\1\u0383\231\0"+
56923	"\1\34\4\0\1\34\1\35\1\0\1\60\1\0\1\11"+
61029	"\1\u052c\23\232\1\352\12\232\175\0\1\351\32\232\1\352"+
20542	href="http://site.icu-project.org/charts/collation-icu4j-sun"
1271	docs.clear();
33969	rptStack
64204	TestLock
28022	"\u0031\u002C\u0031"
10681	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\14\264"+
40624	doTest(inputMode,
14774	getLocale()
28895	setnext
46326	"â"
34558	advantage
50103	re-open.
49222	(!prohibited
56511	spanqueue
8673	InvertedDocConsumer
61401	"\175\0\1\u034d\32\u02e2\1\u034e\4\u02e2\1\u066c\5\u02e2\175\0"+
54893	delegated
2307	.setSimilarity(similarity).setMergePolicy(newLogMergePolicy()));
31585	oldSingleSegmentNames)
5552	(((bits
58392	"to",
17518	"v1",
23406	modifier.deleteDocuments(terms);
11882	newState)
33238	(parent)
16260	snot(SpanQuery
1036	isDelete
24047	"4.043544",
9207	Query[deletes.queries.size()];
46452	"â"
15185	0ms.
4324	q.getEnum(reader);
19937	java.util.AbstractSet;
15113	field.stringValue()
3287	support
60766	"\1\351\32\232\1\352\6\232\1\u0447\3\232\175\0\1\351"+
56106	*this*
11455	"\1\u04de\15\0\1\u04de\6\0\12\u04df\1\u04ae\13\0\1\u02cf"+
34983	delegate:
48960	Clause
40885	assertNull(fst);
67133	assertEquals(tokens.length,
15256	delegate;
19248	testlao
65840	(termflag.get(tnum))
55532	preanalyzed
34649	suppose
15700	IndexFileNameFilter
50733	config.getMaxBufferedDeleteTerms();
54398	(0.0f
29009	(tvx.length()
46428	"â"
15258	delegate)
6730	float)</em>
25490	MapOfSets<ReaderField,
48453	delegate,
42977	newtermlength
52718	Term(FIELD_TEXT,
11289	"\1\u045d\6\264\1\141\12\264\1\0\3\136\1\0\2\136"+
29931	"\2\53\1\0\3\53\1\0\1\53\2\0\4\53\2\0"+
24051	"1.4E-45",
3022	easily
5508	getbeginline
2387	boostingFuncTermQuery2);
38195	assertLongRangeSplit(Long.MAX_VALUE-0xfL,
64536	rewritteninclude
46440	"â"
2466	tests
46826	testu
26469	inputlength
26391	filled.
5922	(int)(majorBitPos
24187	getRandomNumber(start,
21292	data[i];
19750	(posIndex
67031	docstoadd
35409	Token(int
14894	reserved
54032	norms_header
32155	allocator
37590	sloppy-phrase
42212	att2.type());
54818	reserves
46416	"â"
57721	218,
56067	data[i],
56066	data[i])
8704	random;
27903	"\u0031\u003A\u002C",
61664	uc916
66366	postingsHash[j]
61066	"\6\0\12\u054b\1\u0503\13\0\1\u02e1\160\0\1\u0349\4\u054a"+
53497	searchables.length;
25834	newClauses
40229	result.seek(smi.termEnum);
23113	random,
46500	"â"
65807	random.nextInt(maxClauses-1)+2;
10427	"\175\0\1\346\3\230\2\u016a\2\230\2\u016a\1\230\2\u016a"+
26281	inputArray
49528	Clause(String
17165	core,
1501	newLogMergePolicy();
25377	Houses"),
17570	random)
4528	testfloatrange_4bit
28317	heapAdjust(int
50470	infoStream.println("IW
25765	readerkey
104	extends
22755	easier
9960	"\1\177\14\0\1\61\4\0\1\200\2\0\1\201\41\0"+
49299	part1.toLowerCase();
21689	forceMerge,
23863	peridiocally
9753	"\1\111\2\0\1\112\21\0\1\113\17\0\1\25\1\114"+
46476	"â"
59857	"\1\333\1\u011c\1\0\1\137\1\153\1\137\1\0\2\154"+
61070	"\1\u0503\13\0\1\u02e1\226\0\1\u047e\13\0\1\u02e1\214\0"+
3343	lastreader
57189	Long.rotateLeft(0xfffffffe,bit);
13175	uc920
6615	values).
26694	docFreq(Term
62202	terms="
53498	searchables[i].maxDoc();
19864	doTestCaching(INT_FIELD,FieldScoreQuery.Type.INT);
21236	position",
8075	chunkSizePower);
51548	forceMerge:
29188	(mapper.isIgnoringPositions()
34448	forceMerge.
56356	new_mid
64750	"aa9"));
57258	b.wlen)
51159	mergingSegments.size();
46046	"Å¸"
58373	"but",
61287	"\15\u02e2\1\u0619\14\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
67884	termAtt.append(t.toString());
4243	(float
27924	"\u0031\u003A\u0308\u0061\u002C",
18699	"à¦¬à§à¦¶à§",
58141	readSnapshotsInfo(Directory
21571	cidx
7471	testsametokensameposition
57263	b.wlen,
59771	"\1\144\1\137\1\0\1\137\1\145\1\140\1\u0143\1\u0144"+
20438	1192209943000L));
66357	postingsHash[i]
51667	Constants.LUCENE_VERSION);
22794	(FieldCacheRangeFilter)
11883	newState;
35484	registers
60677	"\12\u0422\1\u03ac\13\0\1\u02e1\160\0\1\u0349\4\u0422\2\0"+
44535	"á¸"
46464	"â"
11664	"\1\u04e0\15\0\1\u04e0\6\0\12\u04e0\14\0\1\u02cf\160\0"+
30602	"\4\0\1\102\1\0\2\102\4\0\1\25\5\0\1\25"+
11697	"\2\1\1\0\2\1\1\0\3\1\7\0\2\1\20\0"+
24626	delegates
60029	"\1\u01ce\12\u01cf\1\u01d0\2\u01ce\1\u01d1\3\u01ce\1\u01d2\3\0"+
9645	"\3\u2a8b\3\u2b2e\3\u2bd1\3\u2c74\3\u2d17\3\u2dba\3\u2e5d\3\u2f00"+
56323	++left;
40448	Tokenizer},
18962	numCharsRead;
54681	lockDirName:
44695	"â"
19480	suppressing
56207	TestSuite(TestIndexReader.class));
22861	SpanPositionCheckQuery
4942	jjmatchedPos
47712	¹
37791	termDocs.skipTo(target)
59875	"\1\232\3\u016f\1\352\12\232\175\0\1\351\3\232\1\u016f"+
38804	r.clone();
47745	?
61662	uc7d0
64759	(terms
34712	foobar").toString());
64527	(h<<1)
53842	gonext
502	testmultireaderdeletes
26179	getMutable()
28991	d.openInput(idxName,
59718	"\1\u0107\2\266\1\u0107\1\266\1\142\12\266\1\0\3\137"+
31293	targetDir
60523	"\20\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
8669	setfinalstate
44852	"â"
52775	testbooleanquerywithspanqueries
58851	System.arraycopy(utf8.result,
7084	numerictokenstream
40290	keeponlylastcommitdeleter
33678	dir.fileLength(files[i]);
31405	reader.setNorm(22,
47005	¹
9449	"\1\0\1\2\10\0\1\3\15\0\1\2\24\0\2\2"+
47150	?
26012	comparators[i].compareBottom(doc);
25411	Provides
54486	delegee.sloppyFreq(distance);
4065	noDocs;
49712	token.next;
6075	assertEquals(t.termLength(),
31180	testCreateSingleSegmentCFS()
57314	otherArr[pos];
33854	terms):
39171	terms);
44629	"â"
50850	closing");
4157	noDocs,
31661	testhits
14775	FieldCache}
43861	/case\s+'\\u(....)':.*\[([^\]]+)\]/)
52709	addDocument(final
5827	elementBits);
60980	"\12\u04fa\1\u04bb\13\0\1\u033c\161\0\4\u04f6\2\0\1\u04f6"+
35607	B[i+6]),
66368	(term1
17142	this.readBufferSize
57234	elems
4457	numericutils
32849	termsWriter.getPerDoc();
53707	searchafter
31427	reader.setNorm(21,
33989	rgs.get(i).toArray(new
26306	getDecodedLength(char[]
32608	ByteBuffer.wrap(original2);
62593	"files"));
57069	numBits
916	reader.docFreq(new
10046	"\14\25\2\0\2\25\5\0\3\25\1\0\1\25\5\0"+
28453	c.subSequence(2,
52645	assertTrue("that
18041	u00c5t
14916	setmissingvalue
41935	isvalidunicode
44810	"â"
52172	keepfullydeletedsegments
21810	(it.hasNext())
45570	,"r",
62786	mergedHits);
52386	pertermpayloadprocessor
61496	"\1\1\1\0\4\1\53\0\32\1\3\0\5\1\32\0"+
20491	textfield
39265	termArraysEquals(this.termArrays,
47724	¹
5392	dateformat
34520	maxthreadstates
19804	doTestRank(FLOAT_FIELD,FieldScoreQuery.Type.FLOAT);
43414	sortedvintlist
7605	Integer.toString(ch,
30242	terms()
37620	newField("f",
54683	lockDirName)
17486	pr.getFieldInfos();
47759	?
52081	getminmergedocs
30665	"\3\25\1\0\1\25\10\0\1\25\4\0\1\25\10\0"+
23493	(!failed)
25434	FieldCache.
32761	Integer.toHexString(charArray[charNum]);
16024	test.
2747	TIME_ALLOWED,
4540	test1
1124	MockIndexWriter4(dir,
4732	assertEquals(MyIndexingChain.class,
6728	<em>32
63047	"\"(\"",
52278	this.freqPointer
18431	test,
14980	q2.add(t3,
16016	Field("contents",
21227	test)
46186	"â¿"
67373	(subReaders1[i]
59032	junk.setValue(_TestUtil.randomUnicodeString(random));
34074	Integer(1+cnt0.intValue());
23585	test:
54526	test;
4548	test8
4549	test9
59648	"\4\0\2\137\2\0\1\167\1\0\1\51\1\0\1\52"+
4545	test6
4546	test7
28448	c.subSequence(0,
4543	test4
12371	uc7ee
4544	test5
41174	charIDX=0;charIDX<charCount;charIDX++)
4541	test2
943	terms",
4542	test3
39428	PayloadFilter(new
17297	getdocstoresegment
51860	toSync.getGeneration();
14967	q2.add(t2,
59919	"\4\0\1\202\2\0\1\203\41\0\1\25\1\66\7\0"+
32980	to.freqs,
5399	datefield
45158	"â"
760	start"))
1861	writeField(FieldInfo
9015	add(Term
16170	insure
13173	uc7da
44995	"â"
46515	"â"
37926	nextIsSet;
4998	(curChar
573	Field.Index.ANALYZED,
718	start");
3891	lowercase
52770	spantermquerys
18629	Wikipedia)
28427	'd',
25432	"insane"
62742	(topHits.scoreDocs
62430	<br>Implements
11401	"\1\u047c\243\0\1\u03f6\175\0\4\u04b6\2\0\1\u04b6\15\0"+
44906	"â"
3409	java.io.Closeable
8940	endEnum();
5340	(jjmatchedKind
38306	0x00,0xff
10956	"\1\u0352\13\230\1\u0353\4\230\1\347\12\230\175\0\1\346"+
1648	junit
49694	token_source
50894	doFlush
8795	Before}
38846	assertTrue(r.isCurrent());
17822	toptermsboostonlybooleanqueryrewrite
3468	checkAborted(Directory
49730	jj_scan_token(int
12772	uc7e4
32301	_TestUtil.getTempDir("TestLockFactory.10");
45737	"â¯"
35361	bitSet;
45434	"â"
47932	rollback(TwoPhaseCommit...
14749	lacks
27133	"\u000B\u0308\u003A",
27316	"\u003A\u0061\u0027",
58441	assertFalse("Changed
59720	"\2\0\1\77\1\137\4\0\2\137\2\0\1\70\1\0"+
7477	tokencount
42545	getAttribute
6019	"junk");
7978	IndexInput},
55596	"index2",
15884	(would
20868	analyzer.getPositionIncrementGap(fieldName);
64538	IndexInput}.
7775	fname
63885	TestingCharTokenizerNormalize(TEST_VERSION_CURRENT,
2438	"junk"),
55675	this.mainWriter
19281	chte
27134	"\u000B\u002C",
6723	<em>64
36365	bytes[posSave+upto]
65559	startingCommitDeleted
20150	coordFactor
33218	testtostringandmultiattributeimplementations
52601	coordDisabled
10261	"\1\135\32\155\13\136\1\0\3\136\1\0\2\136\1\137"+
47965	SimpleDocIdSetFilter(filterBits);
6610	database,
32525	atLeast(300);
45077	"â"
4166	ScoreDoc[]
387	reader.undeleteAll();
32421	dereferenced.
40525	Streams
57472	nodeletionpolicy
6014	22);
41343	fst.bin.");
21999	IOUtils.closeWhileHandlingException(termsOut,
17141	si.name;
14819	other.field
10816	"\4\u02c8\2\0\1\u02c8\15\0\1\u02c8\6\0\12\u02c8\1\u0268"+
40633	terms2)
66509	robust
39320	-DocumentsWriter.INT_BLOCK_SIZE;
15966	getdelfilename
45355	"â"
46527	"â"
4443	20f,
43672	year,
51474	sourceSegments
21726	runSearchThreads(System.currentTimeMillis()
50608	getCurrentFieldInfos()
16901	setMergePolicy(newLogMergePolicy(false))
55038	iter=random.nextInt(5)+1;
36837	arcAndState.arc.target
4182	@Test
35363	bitSet)
20056	clauses.add(clause);
9450	"\1\0\3\2\1\0\1\3\1\0\2\3\1\2\1\3"+
66795	Byte.class.hashCode()
12372	uc891
55713	testIndexWriterReopenSegmentFullMerge()
8578	this.cloneAttributes().getAttributeImplsIterator();
8379	own\n"
36464	nodeIn.numArcs;
45776	"Å°"
46539	"â"
31603	random.nextInt(30);
29327	allocated
49326	cal.getTime();
35928	SingleCharTokenizer(reader);
67203	setoffsets
67417	assertNotNull(parallelReader2);
58381	"of",
36453	nodeIn.numArcs)
10094	"\1\115\5\0\1\115\2\0\3\115\7\0\1\115\1\0"+
22722	newIntRange(field,
16644	allocates
57540	(!indexEnum.next())
42816	this.positionIncrement
67645	parallelreader's
61092	"\175\0\1\u034d\3\u02e2\1\u0569\26\u02e2\1\u034e\12\u02e2\175\0"+
28947	other.parser==null
46234	"â"
23246	Term("contents","x")));
14985	q2.add(t);
23595	1010)
38905	assertFalse(toInc.tryIncRef());
47736	?
66789	string-to-byte
63847	assertTokenStreamContents(tokenizer,
8110	chunkSizePower="
50153	(non-Lucene)
47705	¹
53281	Long.valueOf(v);
22140	amortized
30255	cloneablekey
11162	"\2\u03f9\1\u03f8\5\u03f9\1\u03fa\175\0\1\u0163\4\u03fb\2\0"+
31166	checkout
27044	"\r\u003A",
65184	prefixLenPlus1
23611	100K:
64489	excludeSpans.skipTo(includeSpans.doc());
53680	searcher.maxDoc()*2);
60235	"\2\0\1\u0289\15\0\1\u0289\6\0\12\u0289\1\u0228\13\0"+
64370	cutofftermcollector
43989	CIRCLED
63917	0x1043C;
45020	"â§"
57514	PagedBytesDataOutput
30354	String>();
30587	"\53\0\1\145\3\0\1\146\5\0\1\147\3\0\1\150"+
3382	#findMerges}
16446	TEST_VERSION_CURRENT).close();
46211	"â"
29359	upto+firstSize-4;
3868	predicate.
3446	SegmentInfos
18687	"à¦à¦à¦à¦¿",
56291	(compare(j
28794	numLevels;
6687	formula
24204	getYIndex();
57034	<th>nextSetBit</th>
17408	sb.append(field).append(":
17153	(termsIndexDivisor
53828	StringBuilder("[");
21761	getfinalsearcher
25385	assertTokenStreamContents(ts,
40188	seek(Term
53138	becoming
11658	"\1\u0534\13\0\1\u02cf\160\0\1\346\7\230\1\u0566\22\230"+
29154	FORMAT_VERSION){
45683	"â"
15818	IndexFileNames.NON_STORE_INDEX_EXTENSIONS)
64066	vLong"));
50871	discarded.
1820	fieldsStream.writeVInt(numStoredFields);
45514	"â"
17251	"SegmentCoreReader(owner="
54117	3",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());
66488	UnicodeUtil.UNI_REPLACEMENT_CHAR;
263	view
66558	(newHash[hashPos]
15320	NumericField("id",
64504	includeSpans.end();
8494	WhitespaceTokenizer(reader2));
1393	runtimeexception
44620	SCRIPT
57359	numWords);
55905	removed:
23792	#acquire}
42386	reader.termPositions(new
44509	"â "
7324	execution
49393	removed,
65779	sets[i]
22456	removed.
19646	PhraseQuery.PostingsAndFreq[]
4995	(++jjround
45826	"â"
46467	"â"
40154	smi.close();
27267	"\u0041\u0061"
28708	{"/Computers/Linux",
56541	reqDoc
21482	cr.openInput("bogus");
48467	limittokencountfilter
54080	a1.add(a.get(i));
25401	jumps
35965	"","C",
36951	FST<T>(inputType,
5877	backing
5926	"elementPos:
57769	(RUN_SEC*1000));
45921	"â"
46455	"â"
63239	byte[size];
20272	shouldmatchcount
3387	MergeSpecification}
44859	"â¥"
67078	tp.seek(new
803	Reader
32753	charBuf)
24966	slotvalues
37673	testexact
55847	numdirs
19121	urlfilter
30649	"\4\0\2\52\3\0\2\52\1\0\1\52\4\0\1\52"+
46407	"â¾"
46479	"â"
33093	flagsAtt2,
48744	{true,
56683	modTime)
26873	(OffsetAttributeImpl)
15735	(hasSeparateNorms(number))
15820	IndexFileNames.segmentFileName(name,
61075	"\175\0\1\u034d\3\u02e2\1\u054f\26\u02e2\1\u034e\12\u02e2\175\0"+
36179	access$NNN
29572	"\2\133\3\132\1\133\13\0\3\133\1\0\11\132\1\0\3\132\1\0"+
15597	(isCompoundFile)
16306	Term(FIELD,"w1")),
52215	java_version
7756	doc.add(newField("f"+f,
30210	indexPos;
18695	"à¦¸à¦¾à¦²à§",
19941	Set<E>
41204	docFreq");
67329	ReaderCouple
45649	"â®"
45982	"â"
30260	getmaxskiplevels
41336	(doPack)
57932	"accept"
46130	"â"
46491	"â"
20555	vice
37500	phraseQuery
371	assertFalse(r.hasDeletions());
22125	(digit
67853	testsinglemergeablesegment
54285	sizes[i]);
58134	information,
7581	str.length();
7194	information.
46021	"â"
59045	package.
3354	noscorecachingcollector
43698	start()
47987	docBasePerSub
58025	tvd.writeVInt(0);
17403	this.terms
43818	assertTermEquals("d",
52817	attached.
52696	TestSpansAdvanced
11901	yypushback(int)
2213	findMerges(SegmentInfos
54607	getnextsize
7351	start);
27694	"\u0061\u003A\u0308\r",
16092	yield
28061	"\u0031\u002E\u2060\u0061\u003A",
53033	0xe0)
23216	(LUCENE-789).
26411	caseNum)
53053	UNI_SUR_HIGH_START);
33513	"ll"
65783	count=0;
58280	compareTo(BytesRef
44072	"â"
29503	System.getProperty(PROP_KEY1));
53565	rewrittenQuery.extractTerms(terms);
2037	unfrozen");
27989	"\u0031\u002C\u000B",
31772	args[i];
6991	DataType.DOUBLE;
48546	interacts
25398	chararrayset
26980	"\u0001\u0030",
14638	DOUBLE
14996	MultiPhraseQuery
35308	vint
10130	"\1\352\1\36\3\352\1\141\12\142\1\65\1\136\1\143"+
64925	verifyVectors(vectors,
6672	records
46068	"â"
3735	org.apache.lucene.util.VirtualMethod;
11050	"\160\0\1\u0163\4\u039e\2\0\1\u039e\15\0\1\u039e\6\0"+
19332	subject
30374	(isNull)
37070	(!changed)
37872	error-prone
21624	looking
6876	DataType.DOUBLE,
36355	outputs.write(emptyOutput,
66666	testErrorTest()
50348	ent.getValue().hasChanges
5804	currentShifts[base
41847	List<Util.MinResult<Pair<Long,Long>>>
38796	testFieldCacheReuseAfterClone()
19798	testRankInt
3551	getDirectory()
28007	"\u0031\u002C\u00AD",
11617	"\174\0\1\u0386\4\u0553\2\0\1\u0553\15\0\1\u0553\6\0"+
42486	numThreads);
49838	mod_req
18375	1].doc).get("id"));
40341	freqs[pointer];
44323	"â"
7253	aren't
9400	"\u048d\132\103\0\56\132\2\0\u010d\132\3\0\20\132\12\134\2\132\24\0"+
48703	assertTrue(comp.compare("1.0",
66185	+xx";
39964	(mid+1
21670	prelen
58489	"ABC\uD800",
16423	persisted
26450	this.middleMask
21038	full";
15043	NoMergeScheduler()
9383	"\1\0\1\132\1\0\37\132\2\0\65\132\1\0\7\132\1\0\1\132"+
60353	"\1\u02ee\6\0\1\u02f0\1\u02f2\1\u02f1\2\u02f0\2\u02f1\1\u02f0"+
53006	end-1))
8382	pointing
27008	"\u0061"
33611	normmap
21677	design
44186	"â"
60726	"\1\u0428\13\u02e2\1\u0428\12\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
3701	char
48834	assertTrue(vector
53798	CharArraySetIterator()
22599	deeply
62371	FieldMaskingSpanQuery(qA2,
1459	filenameout
10170	"\1\274\1\275\1\276\1\277\1\300\1\301\1\302\1\303"+
28115	"\u0062"
44501	"â"
64079	checkRandomReads(is);
6926	minInclusive
2690	add(String
20022	scoring,
7889	underlying
19781	scoring.
31579	names.addAll(Arrays.asList(oldSingleSegmentNames));
59336	"\2\154\1\140\3\137\2\0\1\77\1\137\4\0\2\137"+
22036	scoring)
12051	zzunpackcmap
19956	map.put(o,
5160	jjStartNfaWithStates_1(int
51195	full),
9379	"\2\132\12\134\6\0\46\132\16\133\14\0\44\132\24\133\10\0\12\134"+
65481	Other
913	assertFalse(hitError);
5935	readMasks[bitPos]);
52440	NumericTokenStream(precisionStep).setLongValue(value))</code>
44243	"â"
16714	(readOnlyReader.hasChanges)
27251	"\u0041\u005F"
21784	Returns,
33072	testCloneAttributes()
58853	bytePrefix,
2186	executing
37221	dereflen
30588	"\14\0\1\151\16\0\1\152\2\0\1\153\42\0\1\64"+
56798	numoninit
26499	assertTrue(reader.numDocs()
41809	e.getKey());
26686	non-high-scoring
1449	openinput
65039	this.doShareNonSingletonNodes
43195	Integer.valueOf(values[slot]);
56131	q.add(rq,
66943	newPair(outputs1.add(prefix.output1,
39495	IOUtils.closeWhileHandlingException(output,
34607	similarity1.sloppyFreq(matchLength);
60256	"\7\232\1\u029c\22\232\1\352\12\232\175\0\1\351\31\232"+
50100	MaxFieldLength)
52396	numexpected
8458	illegalaccessexception
46503	"â"
40068	startCommit()
64991	tuning
33664	writer.waitForMerges();
8333	unsetbuffers
48237	start1,
54393	this.description
22457	CharTermAttributeImpl#toString}
9786	"\1\25\1\140\17\36\1\147\12\36\1\141\12\142\1\65"+
38864	ic.getGeneration());
7449	terms[]
36943	inCount="
59562	"\1\25\2\0\4\25\1\0\1\100\1\25\1\0\1\25"+
16259	SpanNotQuery
46070	"ï¼¹"
65523	(SegmentInfos.generationFromSegmentsFileName(fileName)
38682	ReaderUtil.getMergedFieldInfos(index1);
51198	incomning
48866	assertTrue("set
49636	Float.valueOf(fuzzySlop.image.substring(1)).intValue();
44540	"â"
63133	bigOrdTerms
45958	"â±"
24476	difference:
59581	"\1\66\1\67\1\0\1\25\2\0\1\25\1\141\3\36"+
38760	tp1.doc(),
15827	(hasVectors)
23198	hits[1].score
65842	(tnum<0
43326	org.apache.lucene.store.IndexOutput}.
15149	references",
17171	this.owner
38289	0x7fffec8,
45258	"â"
27845	"\u0061\u002C\u0308\u0001",
36095	org.apache.lucene.store.InputStreamDataInput;
9342	"\2\132\3\0\2\132\3\0\3\132\3\0\14\132\4\0\5\133\3\0"+
17668	QueryParser}
42240	assertFalse(att.isKeyword());
28795	(numLevels
53222	utf16toutf8withhash
16592	dropped
20215	clause.getQuery().extractTerms(terms);
7044	term)
48230	start2)
11996	URL_TYPE;
54182	bpostings
59619	"\11\36\1\355\6\36\1\355\10\36\1\142\12\143\1\66"+
25436	FieldCacheSanityChecker.InsanityType
32907	start2,
46044	"Å¶"
61425	"\1\u0349\4\u0679\2\0\1\u0679\15\0\1\u0679\6\0\12\u0679"+
1632	term;
196	term:
57022	-Xmx64M
9076	term1
55533	term3
9077	term2
7053	term,
35259	differences
6184	term.
67616	(4+i)+"");
50123	#setMaxBufferedDeleteTerms})
6902	.append((min
1784	this.directory
3950	overflow!
45477	,"q",
45447	"â«"
28656	StringReader(sb.toString());
54273	random.nextInt(31),
3791	implemented
48998	QueryParser:
58757	"\ufffd\ud917\udc17\ufffdabcd",
21223	os.writeByte(start);
51168	while(pendingMerges.size()
10108	"\1\57\4\0\1\60\14\0\1\61\4\0\1\62\2\0"+
64893	MultiThreadTermVectorsReader[threadCount];
179	100);
9606	"\2\u63e3\2\u6486\2\u6529\2\u65cc\2\u666f\2\u6712\2\u67b5\2\u6858"+
63448	0x87321,
5557	overflow:
49454	QueryParser,
48946	JavaCC.
6011	t.type());
3111	abort
6298	QueryParser.
35160	maxTermFrequency;
48591	valueLength;
56752	i=0;i<N+1;i++)
23568	w.getFlushCount();
26731	org.apache.lucene.document.FieldSelector
23814	tracker)
51512	testPoint("startCommitMerge");
31812	(!deletePriorCommits)
1596	terms
40717	output.length
60034	"\1\u0101\3\266\1\u0112\26\266\1\142\12\266\1\0\3\137"+
4234	testRightOpenRange(2);
39185	SloppyPhraseScorer(this,
46177	"âµ"
66690	testfailurerule
23408	testDeleteAll()
717	after
21779	Thus,
48162	IllegalArgumentException("Less
9071	lastbytes
18587	"Ø§ÙÙÙÙÙ
48658	readervalue
37881	ReferenceQueue<Object>();
41892	allowrandomsuffixsharing
21015	diskRatio
33833	i=n-1;
60326	"\1\67\1\0\1\65\2\0\1\25\1\u02e4\32\u021a\1\u0219"+
30514	<li>&lt;IDEOGRAPHIC&gt;:
62432	<br>Uses
51430	result.allDeleted
34800	fox\"",
2450	BooleanClause(q2,
55769	Stress
38873	IndexReader.ReaderClosedListener()
63873	testWhitespaceTokenizer()
44919	"â¦"
41761	Util.MinResult<Pair<Long,Long>>[]
16848	lbfe)
33992	cmprtr);
22937	testQuickSort()
54630	encourage
54337	(PayloadAttribute)
5407	debugstream
66635	Assert.assertTrue(runAndReturnSyserr().contains("NOTE:
51188	sub-collections.
11501	"\1\u0332\4\u04ff\2\0\1\u04ff\15\0\1\u04ff\6\0\12\u0501"+
30489	getComparator()
29222	this.storingOffsets
22167	overflows
4372	testRangeSplit_2bit()
62361	spanB",
40100	SegmentInfos.generationFromSegmentsFileName(fileName)
2754	assertNotNull(
25222	"*1",
27337	"\u002C\u0308\u000B",
50171	"front"
24556	SortField.FLOAT));
54739	(!lockDir.isDirectory())
20545	ICU4J
2616	about
45406	"â"
57597	max_page_bits
2447	BooleanClause(q1,
59054	(bq.clauses().isEmpty())
26103	MultiComparatorNonScoringCollector(queue,
6339	above
26014	Here
55694	Directory[numDirs];
54609	copycost
19392	FieldCache.DEFAULT.getDocsWithField(
51843	sync()
56499	ArrayList<byte[]>
34883	testfilter
9044	term2.length);
39698	deletionPolicy,
59896	"\12\232\175\0\1\351\6\u016f\1\232\5\u016f\3\232\2\u016f"+
24523	variety
39678	deletionPolicy;
46473	"â¯"
40109	listing
50707	(lmp.getMinMergeDocs()
50385	sync'd
50054	100%:
25392	termAtt.toString().toLowerCase(Locale.ENGLISH);
2514	termspans
67067	performTest(int
33703	reader.getSequentialSubReaders().length);
27772	"\u0061\u0027\u0061\u2060",
44597	"â¼"
46443	"â¿"
48293	(matchSlop
57479	org.apache.lucene.util.PagedBytes.PagedBytesDataInput;
67061	this.term3
25999	(score
43814	assertTermEquals("c",
67058	this.term1
24884	fd.fields[0]);
49306	Date
67362	subReaders1[i]);
11427	"\7\264\1\u04c5\2\264\1\0\3\136\1\0\2\136\1\137"+
55562	"index1",
48455	this.maxTokenCount
30126	termsCache
54130	bufferedState
28685	VERBOSE
31022	indexDoc(writer,
56676	1000)
57130	((int)(bits[i]>>>bit))
4191	1000,
26039	tracked,
23376	addDoc(modifier,
55723	10000
9376	"\2\142\40\0\27\132\5\133\4\0\65\142\12\143\1\0\35\143\2\0"+
27748	"\u0061\u0027\n",
19198	ØµØØ
29414	buffer.append(":");
2310	1000;
31230	i<reader.maxDoc();
67180	positions.length
53417	flushbuffer
25367	Set<?>
21532	IndexInput[]
52876	CLAIM,
6907	.append((max
47907	TwoPhaseCommitTool
6370	title
43896	result\n\n!;
37665	start="
37585	Term("palindrome",
40945	toIntsRef(getRandomString(),
54477	delegee;
66837	processterms
21006	Iterate
17040	HashMap<String,Map<Integer,TVPositionInfo>>(numTerms);
7448	nextTokenIndex
34802	Expands
49320	23);
29364	writeTo(IndexOutput
15899	'c';
29007	FORMAT_VERSION2)
10623	"\1\376\6\264\1\u01fc\1\u01fd\22\264\1\141\12\264\1\0"+
45453	"â"
43670	d.get("contents"));
48637	tokens");
22673	(includeUpper
28417	'c',
20323	fail("replay
7226	spanfilterresult
67465	firstReader;
37899	containsKey(Object
37229	setallowarrayarcs
49108	this.phraseSlop
58576	set.stringIterator();
7151	defaultreadobject
58443	NOT_IN_SET);
43855	chomp($line);
65342	sharemaxtaillength
10735	"\1\141\2\u0218\1\330\2\u0218\2\330\1\u0218\1\330\1\u0218"+
61378	"\2\u065e\2\u065d\1\u065e\1\u065d\1\u065e\1\u062f\13\0\1\u033c"+
2716	e.printStackTrace();
33750	twice:
30975	testgetresultsfromstart
63210	Object#equals(java.lang.Object)
26950	(Katakana)
33907	twice,
33767	twice.
49387	newPrefixQuery(t);
22735	newLongRange(String
54480	delegee)
67765	1)[termLength++]
27741	"\u0061\u003A\u0308\u0031\u002C",
54478	delegee
27406	"\u0027\u0061\u0027\u2060",
33094	flagsAtt);
22063	QueryWrapperFilter))
18499	isTokenAvailable;
53420	ensures,
25697	datatypes,
29986	int[10609];
39083	assertTrue(cm.keySet().toString().contains(",
8411	(InstantiationException
33982	cmprtr
40771	term.length)
46605	DASH
10016	"\1\25\2\0\4\25\1\0\1\64\1\25\1\0\1\25"+
46034	"â§"
34377	#setRAMBufferSizeMB
66406	}.quickSort(0,
65011	doShareSuffix
40782	term.length;
66492	UnicodeUtil.UNI_SUR_HIGH_END)
64318	100.)
29025	tvx.seek((docNum
9396	"\1\144\31\0\11\144\4\133\2\133\1\0\5\135\2\0\3\144\1\132"+
41474	a));
9958	"\1\50\1\0\1\174\2\0\1\175\3\0\1\53\2\0"+
55743	(multiSegment
27680	"\u0061\u2060\u0308\u0061\u002C",
39376	fastflip
45594	"â"
57808	fail("listCommits
26556	terms.term();
32075	PostingVector
64306	100.0
52886	DATA
65536	lastSegmentInfos.getGeneration())
12370	uc74b
41825	r[hit].input);
41929	inputmodetostring
44750	"á¸®"
20970	truncated
57956	++numPositiveScores;
32832	this.perThread
34564	PayloadFunction
36623	Follow
48857	testFields[1]);
56475	spans1.end()
33079	attribute",
29466	System.getProperties();
3888	Subclasses
25681	buf.append('\n');
28939	getInnerArray()
44036	"á¸"
18199	this.query.equals(other.query));
16527	getSentinelObject()
20205	(Query)query.clone();
4387	testFloatRange(8);
9943	"\3\136\1\0\2\136\1\137\3\136\3\0\1\136\1\162"+
33140	PayloadAttributeImpl",
9778	"\1\65\1\66\1\0\1\25\2\0\1\25\1\140\10\36"+
29264	vectors_documents_extension
44595	"á¸ "
43959	"á¸"
62823	segmentation.
21029	bytes");
67107	segmentation,
47951	PrepareCommitFailException(t,
42380	singleTerm
1387	mockindexwriter
35057	BUFFER_SIZE
61661	uc72d
35071	(nextPos
22312	paranoia:
15633	!IndexFileNames.isDocStoreFile(fileName))
35097	(pointer
13172	uc737
35172	uniqueTermCount
54921	targetGen
59267	"\1\0\3\32\1\0\7\32\1\0\2\32\2\0\1\32"+
47887	<P>Values
18011	testrangefilteridcollating
26587	DocHelper.fields[i];
38231	testSplitLongRange()
49837	mod_not
777	incrementToken()
19918	testrankbyte
12771	uc741
938	contents",
4064	testing
25897	points.</p>
37092	nodeCount="
18834	{});
50670	truncates
8590	lazily
55778	ArrayList<Throwable>());
52771	testspansadvanced
41042	tally
35066	currentBuffer
35203	proxOutput;
8577	(Iterator<AttributeImpl>
19669	ANDing.
27201	"\u3031\u0308\u0300",
4211	(distance/3)
67634	assertTrue(subs[1]
64771	(prefix.length()
10014	"\4\0\2\64\11\0\1\25\11\0\2\25\2\64\4\0"+
24435	FieldCache.IntParser()
44180	"á¸"
31334	d.getField("utf8");
35212	proxOutput)
17588	getDir1(Random
4498	totaltermcountt
33090	clone.getAttribute(TypeAttribute.class);
9042	pos1End
15189	System.gc();
29431	CheckHits#checkNoMatchExplanations
18713	ÙÚ©ÙÙÛ
4499	totaltermcountc
36911	IllegalArgumentException("this
22814	distinguish
20567	streams
9407	"\11\0\3\132\1\133\10\132\2\133\2\0\12\134\6\0\33\142\1\143"+
67632	assertTrue(subs[0]
36836	br.length--;
60177	"\2\137\150\0\1\u0101\24\266\1\u024f\5\266\1\142\12\266"+
21266	seek(mid)",
62863	StandardTokenizerInterface.YYEOF)
434	analysis
21412	assertSameStreams("basic
57143	fastSet(int
6328	Usage:
26981	"\u0030"
43468	subquery[]
28784	resetSkip()
6886	name
35872	searcher.rewrite(query);
65766	terms[j].text(),
17587	newSearcher(pr);
1932	stream,
25903	<p><u>Note:</u>
1811	stream.
26334	outputLength
47894	based.
11063	"\5\230\1\u01ab\4\230\175\0\1\346\26\230\1\u03a8\3\230"+
4135	lower=(distance*3/2)+startOffset,
1803	stream)
8291	cleanmapping
44157	"á¸"
20424	1192001126000L));
25817	buffer.append(clause.toString(field));
66169	MockAnalyzer(random))).parse(queryText);
51029	maybeMerge(maxNumSegments);
40361	weightvalue
27019	"\u0031"
22351	fromIndex
30253	termord
44685	"á¸¥"
1805	stream;
12005	StandardTokenizerInterface.YYEOF;
27486	"\u005F\u0308\r",
34772	assertEquals("+(multi
9345	"\5\132\3\0\1\132\7\133\1\0\3\133\1\0\4\133\7\0\2\133"+
53386	Users
37708	knowing
39956	numSubReaders
51883	unlock(Directory
55366	idString,
41505	idString;
21825	(!field.isBinary()))
25633	subs.length);
22738	FieldCache.LongParser
55595	writer2.setInfoStream(infoStream);
21919	IndexInput()
20225	(needParens)
31045	//System.out.println(multiFileOutput);
36476	BIT_LAST_ARC;
38052	NumericUtils.prefixCodedToInt(prefixVals[i])
40682	ArrayList<FSTTester.InputOutput<Long>>(terms.length);
33552	testTokenStream()
16800	testSegmentReaderUndeleteall()
39722	sis.size()-1;
9712	"\21\0\14\25\2\0\2\25\5\0\3\25\1\0\1\25"+
42538	lvalue
58952	testqueryparser
38903	assertFalse(toInc.hasDeletions());
40127	infos.getVersion();
41387	(args[idx].equals("-prune"))
60196	"\1\u0263\31\266\1\142\12\266\1\0\3\137\1\0\2\137"+
67565	reader.setNorm(55,
33142	PayloadAttributeImpl);
50623	IndexWriterConfig#setMergePolicy(MergePolicy)}
19840	matched!",N_DOCS,td.totalHits);
58439	set.add(new
65396	crash(writer);
54603	ArrayUtil.quickSort(a,
64033	(rarely())
34389	#DISABLE_AUTO_FLUSH}
42262	att.copyTo(copy);
2105	in))
25987	OneComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>
38345	x7fffffffffffec78l
22950	(worst
44815	"Ä²"
7852	java.security.PrivilegedExceptionAction;
66879	PairOutputs<A,B>
2002	in);
18468	testbooleanoptionalwithtiebreakerandboost
16909	readonlyreader
44945	"á¸¼"
19823	assertTrue("res
48483	Scorer(Weight
34339	positional
56266	testoverridemethods
54330	PayloadAttributeImpl()
42334	performTest(dir);
22492	VirtualMethod<AttributeImpl>(AttributeImpl.class,
3837	bufferIndex
6929	q.precisionStep
39718	this.termInfosIndexDivisor
38842	subReaders.length);
27965	"\u0031\u0027\u0061\u003A",
28617	getBeginLine()
55841	nrtreader
41106	(ent.getValue().isFinal)
48407	matchers.
67961	posIncAtt.getPositionIncrement();
53036	0xf0)
37484	stopAnalyzer
21537	ins[fileIdx]
41417	storeDocFreqs)
43137	topDocs.scoreDocs[1].doc);
52730	expectedIds,
59097	"\0\u324d\0\u32f0\0\u3393\0\u3436\0\u34d9\0\u357c\0\u11d4\0\u361f"+
34578	PayloadTermWeight(PayloadTermQuery
55510	Index.ANALYZED);
920	cycle
22624	restriction
51007	<tt>false</tt>,
53460	kinds
21780	Fieldable#setBoost(float)
60867	"\3\232\1\352\12\232\175\0\1\351\30\232\1\u04a7\1\232"+
52315	term.setEmpty();
12769	uc5fb
15232	newFSDirectory(dir);
10359	"\6\264\1\141\12\264\1\u014f\3\136\1\0\2\136\1\137"+
62916	copyFile(dir,
28027	"\u0031\u002C\u0031\u002C",
5995	sizeof
4594	assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,
10049	"\1\65\153\0\1\65\5\0\1\65\2\0\3\65\7\0"+
17444	termnumbers
44776	"Ä­"
55523	testdocumentwriter
896	(sawAppend
48228	.end()
56773	expectedCount
31746	System.err.println("Usage:");
17445	restricting
64782	BytesRef(ts);
42588	off);
43624	missCount++;
41824	assertEquals(matches.get(hit).input,
24311	un-valued
61279	"\175\0\1\u034d\4\u02e2\1\u0611\25\u02e2\1\u034e\12\u02e2\175\0"+
53025	1-for-1
61659	uc5e7
4941	kind;
64721	"aa0"));
18848	"mo"
16127	8.9925785f,
43207	testTermDocs()
15168	tmpDir
4968	kind,
6821	(especially
27074	"\r\u0031\u002E\u2060",
5768	positioned
40485	AttributeSource#captureState}
4939	kind)
20384	Field#name()}
67897	fillTokens()
20840	analyzerMap
17665	TopTermsScoringBooleanQueryRewrite}
43062	release(reference);
33844	collide(PhrasePositions
57891	otherByteBuf.limit(len);
43494	sizes.
24460	"AECIG");
52856	INCLUDING
13170	uc5f1
16640	Object[]
28312	heapify()
19206	testgreek
23104	contents1,
41885	newpair
50067	tmp.close();
26488	bytesleft
39381	ThreadInterruptedException
11738	UAX29URLEmailTokenizer.ALPHANUM;
29966	"\1\25\103\0\2\65\6\0\1\65\56\0\1\65\3\0"+
39701	SegmentInfos.FindSegmentsFile(directory)
7785	(!dataset.contains(vals[0])
11156	"\1\u03f4\15\0\1\u03f4\6\0\12\u03f4\1\u0339\175\0\4\u03f5"+
40646	PositiveIntOutputs.getSingleton(true);
37002	arcStartPos
6048	{'a',
57110	array-index-out-of-bounds-exception,
30731	cjkv
56521	reqScorer
41750	PositiveIntOutputs.getSingleton(true),
64884	Field.TermVector.YES);
22373	getSorter(a).mergeSort(fromIndex,
30472	this(false,
8072	MMapIndexInput("MMapIndexInput(path=\""
52688	expl;
58568	CharArraySetIterator",
30574	"\1\25\1\54\1\52\1\103\3\0\1\54\1\0\1\54"+
44182	"á¸"
7155	int_negative_infinity
41955	dopack
59186	"\3\u9e6d\3\u9f10\3\u9fb3\3\ua056\3\ua0f9\3\ua19c\3\ua23f\3\ua2e2"+
36721	labelToMatch);
58566	hset.addAll(Arrays.asList(TEST_STOP_WORDS));
17831	useless
65082	idx=lastInput.length;
15517	(isCompoundFile
153	writer.forceMerge(1);
65445	ReverseOrdFieldSource.class.hashCode();
59602	"\1\25\2\0\1\25\1\141\1\372\1\355\1\36\1\361"+
21069	hits.length
4711	clone.getIndexDeletionPolicy());
10203	"\1\u0103\13\264\1\u0103\2\264\1\u0103\1\141\12\264\1\0"+
23111	contents2,
23105	contents2)
37602	matter",score2,
29867	"\3\0\1\102\2\0\1\102\3\0\1\102\5\0\1\102"+
67108	"https://issues.apache.org/jira/browse/LUCENE-1068"}
16437	writer.addDocument(new
7171	intvalue
35926	getPreviousTokenStream();
42690	Force
22405	getshrinksize
45446	,"p",
29928	"\1\53\56\0\1\53\3\0\1\53\2\0\1\53\3\0"+
19400	DocIdSet)
32256	isLocked():
17715	TopTermsRewrite<BooleanQuery>
8867	DocIdSet.
59713	"\2\u0107\1\266\1\u0107\3\266\2\u0107\2\266\1\u0107\4\266"+
67831	testAllSegmentsLarge()
45778	"Å²"
8076	raf.close();
52302	(!term.field().equals("p")
19478	<p>Closes
8259	fsdirectory
53154	0xf8:
53040	0xf8;
15138	mismatched",
21991	whereby
63060	"\"TO\"",
52007	sooner
30788	boarders.
56765	wasFullyMerged
34357	scheduler
29909	"\1\52\6\0\1\116\5\0\1\53\11\0\3\25\5\0"+
55140	r2.termDocs();
57922	accept(File
21735	releaseSearcher(IndexSearcher
48985	whereas
63235	numBuffers()
34136	(pq.size()>0)
64906	totalTime
5479	lexstatenames
4736	succeeded
15065	assertTrue(fieldInfos
10876	"\4\0\2\136\150\0\1\376\26\264\1\u0303\3\264\1\141"+
42191	Collections.singletonMap(FlagsAttribute.class.getName()
8600	sink.addState(state);
60918	"\1\u02e1\160\0\1\u0349\4\u04cb\2\0\1\u04cb\15\0\1\u04cb"+
55085	dw.docs
62268	"costas")
29673	"\4\0\20\133\1\137\2\0\1\136\1\137\13\0\7\133\14\0\2\141"+
48677	(please
15228	FaultyFSDirectory
39638	writeterm
66004	assertEquals("+(b:one^5.0
48895	setDocumentNumber()
53992	byte[count];
59062	collect(Term
67559	reader.setNorm(44,
22578	reflectwith
45849	"Å³"
38122	FLOAT_NANs
18630	ÜÜ
46893	fullwidth
61213	"\175\0\1\u034d\16\u02e2\1\u05cb\4\u02e2\1\u05cc\6\u02e2\1\u034e"+
8780	toarray
44801	"á¸¯"
23630	AtomicBoolean
17703	non-trivial
49246	buffer.reset();
39326	docWriter.getIntBlock();
40508	(NoSuchMethodException
65647	(Collection<String>
57252	b.bits,
53371	super(resourceDesc,
66543	b[i]);
63487	0x876432,
6816	minInclusive;
63877	WhitespaceTokenizer(Version.LUCENE_30,
26091	(queue.getComparators().length
64880	org.apache.lucene.index.TermFreqVector;
61225	"\1\u034d\11\u02e2\1\u05dd\20\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
18230	0.0000f;
43023	Obtain
11348	"\1\u0487\31\230\1\347\12\230\175\0\1\346\32\230\1\347"+
45843	"Å­"
51263	dsFilesCopied)
59183	"\3\u8f25\3\u8fc8\3\u906b\3\u910e\3\u91b1\3\u9254\3\u92f7\3\u939a"+
67719	allocation:
62449	sim.coord(i,
4022	offsetatt
39149	IDFExplanation
49629	jj_consume_token(RANGEEX_END);
55037	nThreads=random.nextInt(5)+1;
38232	hard-coded
19216	Ï
19221	Ï
19234	Ï¾
34545	prefix.text())));
6239	(boosts
19689	chunkStates[0].posEnum.doc();
36607	arc.arcIdx
17646	#getEnum}
62610	BooleanClause(t1,
4154	rewrite)";
7861	mapping
611	20);
11157	"\2\0\1\u03f5\15\0\1\u03f5\6\0\12\u03f5\1\u03f6\175\0"+
49768	jj_expentry[i]
1276	crashAt
10352	"\3\0\1\136\4\0\2\136\150\0\1\u014e\12\264\1\u0154"+
12770	uc69e
37511	"map
30357	wrapper.prepareCommit();
23367	"Amsterdam");
35278	skipBuffer.writeVInt((int)
13171	uc694
32952	addTerm(final
51831	succeeds,
63486	0x876431,
62424	IntsRef(new
43361	builder.addInt(doc);
6801	minInclusive,
61660	uc68a
43246	tdocs.doc());
570	Field.Store.YES,
18755	Î®
67102	ClassicAnalyzer:
44511	,"(e)",
40173	TermDocs[]
3030	<tt>contrib/grouping</tt>
44159	"á¸"
67570	(checkNormsClosed
14983	testRepetitiveIncreasingSloppiness()
4612	assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES,
6739	<b>&ge;64</b>
63529	obs.getNumWords());
21206	org.apache.lucene.store._TestHelper;
57388	(int)((h>>32)
62611	BooleanClause(t2,
67422	testNormsRefCounting()
53811	stringIterator()
17708	Like
6061	testTermBufferEquals()
6257	((PhraseQuery)
62928	"_1_1.del");
33073	src.addAttribute(FlagsAttribute.class);
37584	matter",score0,
22663	(lowerPoint
54072	"+stopWords[i]);
23558	20",
61418	"\2\0\1\u0675\15\0\1\u0675\6\0\2\u0676\1\u0675\2\u0676"+
61371	"\12\u065c\14\0\1\u033c\161\0\4\u065d\2\0\1\u065d\15\0"+
43122	newq.add(getElevatedQuery(new
51840	First,
32549	binaryDumpNIO(binaryBuf)
18870	"dogs,chase,cats",
10692	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\24\264"+
58418	char[]{'1'}));
33506	test1to2()
52304	DeletePayloadProcessor();
4319	upper
21477	testRandomAccessClones()
4853	getdeclaredmethods
17447	DocIdSet}
30405	isnull
38752	enum1.term(),
63327	0x7431,
29461	NonStringProperties
62884	https://issues.apache.org/jira/browse/LUCENE-1068,
11546	"\6\0\12\u051d\1\u0500\13\0\1\u02cf\160\0\1\u0332\4\u051d"+
53810	#iterator},
21458	assertEquals(be2,
52460	termAtt.resizeBuffer(NumericUtils.BUF_SIZE_INT);
48348	<code>currentSumScore</code>
41277	toString(fstEnum.current().input),
64265	Type#INT},
56156	farsiIndex,
59256	"\1\0\2\32\1\0\3\32\1\0\1\32\2\0\1\32"+
29186	//does
35858	(TOP_TERMS_SCORING_BOOLEAN_REWRITE)
41125	non-pruned
6718	<li>The
36536	destPos
63328	0x7432,
21324	1Mb.
39825	buffer.append('(');
21447	assertEquals(be1,
19323	testmailtoschemeemails
24192	(high
25409	2009
29663	"\1\131\3\117\1\115\2\117\5\115\4\117\4\116\1\115\3\116\1\115"+
58686	2006
7188	2007
1704	2004
5521	2005
33102	4711,
44276	"á¸"
51465	"carries
67220	s.setReuseAddress(true);
30280	terminfos
41703	FST.Arc<Long>());
67740	csq.length();
23399	200;
5811	Single
58410	String(findme,1,4)));
58333	0xee)
60179	"\1\137\4\0\2\137\150\0\1\u0101\1\266\1\u0255\30\266"+
48845	this.positions[i].length);
14560	hiragana
36527	sizeNeeded);
36258	inCounts;
22620	(except
6746	sorting
28342	re-establish
51069	wait:
28085	2019
6608	engine
17502	"f3"));
23812	SearcherTracker(searcher);
2451	BooleanClause.Occur.MUST_NOT);
44274	"á¸"
49976	fileCount
49097	this.fuzzyMinSim
58320	0xef)
6763	<code>precisionSteps</code>.
23591	.setRAMBufferSizeMB(0.1f).setMaxBufferedDocs(1000).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));
66121	EmptyTokenStream
1644	termquery
52887	PROFITS,
23565	(doIndexing)
44315	"á¸"
64291	20.0
19780	FieldScoreQuery
8009	(useUnmapHack)
54359	WordlistLoader.getWordSet(stopwords,
25802	field.");
55445	doc.getFields(DocHelper.TEXT_FIELD_3_KEY);
21544	testcompoundfile
26356	(inputLength
8412	IOException("InstantiationException
46196	"â "
5896	faster
33418	writeByte(byte
39159	MultiPhraseQuery.this;
67994	optimizations
61663	uc873
45042	"á¸¾"
62914	segment/field
62418	i.ints);
13174	uc87d
27144	"\u000B\u0300",
4610	conf.getIndexingChain());
12773	uc887
31092	positions.freq();
27876	"\u0061\u002C\u0061\u0027\u2060",
2422	200,
63236	buffers.size();
9970	"\1\65\1\136\1\143\1\136\1\0\1\136\1\144\1\137"+
11762	Line
25971	gathered
65259	n.isFinal
863	normal
41775	slowCompletor
63505	bitlist
44278	"á¸"
43242	(assumption
54152	Test2BPostings
6205	(title=>5
48389	optimization.
19599	codingerroraction
19660	optimization:
37443	WhitespaceTokenizer(TEST_VERSION_CURRENT,
67504	fail(msg);
64080	RAMIndexInput
55108	idField)
44317	"á¸"
22264	grow(boolean[]
42687	Term("docid",
30471	FieldSortedTermVectorMapper(Comparator<TermVectorEntry>
20005	TooManyClauses}
21060	newReader.docFreq(searchTerm);
21816	ClassCastException
58047	perDoc.fieldPointers[0];
52610	subclassing/delegation,
39055	"SirGallahad";
29589	"\12\0\6\132\2\0\2\133\1\0\22\132\3\0\30\132\1\0\11\132"+
63851	triggered.
56821	TestNewestSegment
49418	sequence.");
44319	"á¸"
25087	assertEquals(wq2,
17561	assertEquals(docParallel.get("f2"),
50813	waits
60359	"\1\0\2\u028c\2\0\1\u028c\1\0\1\u028c\175\0\1\351"+
36820	IntsRef()));
15807	List
62423	assertEquals(ints,
25085	assertEquals(wq1,
34063	pp.offset;
11366	"\150\0\1\376\3\264\1\u0499\26\264\1\141\12\264\1\0"+
62777	mergedHits.scoreDocs[hitIDX];
22244	RamUsageEstimator.NUM_BYTES_SHORT);
42605	List<SpanFilterResult.PositionInfo>
44280	"á¸"
65917	mfqp.parse(qtxt);
3195	lastReader;
41729	FST.Arc<Long>()),
36637	nextArc="
42053	hitA.slot
21165	approach
54721	manner
19757	freq++;
5961	datainput
51508	!mergedReader.hasChanges
18717	ÙÙÙ¾Ø¯ÛØ§
58468	falsePos
15248	createOutput(String
40367	actualTSDCClass
34944	enclosed
44161	"á¸"
34116	Term[0]);
16956	testclonesubreaders
37048	(rarely,
67341	assertReaderClosed(index1,
19065	"ð©¬è±éä¹æ¯ç",
57582	mid's
4267	inclusive
15871	clearFiles()
1159	correct
56794	lastversion
57193	Clearing
1353	indexoutput
56316	mid);
11662	"\1\u0568\15\0\1\u0568\6\0\12\u0568\14\0\1\u0325\226\0"+
46815	expectedIter
28928	DocValues()
3913	if(useOldAPI)
40691	doShare).doTest();
27122	"\u000B\r",
25807	SpanQuery[clauses.size()]);
43534	doTestWriteRead(8);
35861	"K"});
6803	IllegalArgumentException("precisionStep
9533	"\0\uf151\0\uf1f4\0\uf297\0\uf33a\0\uf3dd\0\uf480\0\uf523\0\uf5c6"+
23806	searchers.get(version);
5620	SmallFloat.floatToByte(f,5,2);
8835	JUnitCore.runClasses(Nested.class);
37773	this(null);
36442	(nodeIn.isFinal)
25783	inOrder;
21598	WILDCARD_CHAR
35875	assertEquals(allowedTerms.size(),
16892	x++)
26428	byte[getDecodedLength(input)];
62733	numDocs+5);
25793	inOrder,
16276	inOrder)
35357	ERROR
44687	"á¸§"
22766	(FieldCache.FloatParser)
41739	assertEquals(22L,
41337	System.out.println("Pack...");
26959	"\u0041"
23400	batched
65109	lastInput.ints[lastInput.offset+idx-1])
67339	assertReaderClosed(index2,
66865	ch++)
63925	udc1ctest
18134	product
66272	littlereader
38827	r1.getUniqueTermCount());
29075	account
2979	myhitcollector
6263	getFuzzyQuery(String
3333	scorecachingcollector
6744	produce
60649	"\1\u040c\6\0\12\u040c\1\u040d\175\0\4\u040e\2\0\1\u040e"+
37320	CharArraySet})
18759	"ÎÏÎ¬ÏÎµÏÎ±Î¹",
37283	CharArraySet},
45162	,"n",
29815	"\2\0\1\25\41\0\1\35\1\0\1\36\1\0\1\37"+
46313	"â¥"
68088	(totBitCount/32
50767	getInfoStream()
55678	NUM_INIT_DOCS;
44184	"á¸"
53719	CharArraySet}:
29669	"\4\36\2\32\2\107\1\4\5\107\52\4\u1900\0\u012e\144\2\0\76\144"+
38050	Integer.MAX_VALUE-1,
53773	CharArraySet}.
28338	rchild;
50435	(poolReaders)
34404	2048
27006	"\u0001\u0308\u0061\u2060",
64553	"buffer="
27001	2060
33654	writer.forceMerge(3);
49064	TopLevelQuery(field);
34915	"jumps
44214	"á¸"
67805	testNot()
38049	Integer.MAX_VALUE-2,
27750	"\u0061\u0027\u000B",
62921	"not
32065	getcustom
11021	"\2\u0388\1\u0387\1\u0388\1\u0387\1\u0385\13\0\1\u0325\237\0"+
31312	i=0;i<hitCount;i++)
20421	1192001122000L));
42926	reflector.reflect(OffsetAttribute.class,
57414	expandingwordnum
22520	reflector.reflect(CharTermAttribute.class,
32476	update(writer2);
58750	"\ud917\ud917",
39584	lastTermBytes,
59698	"\3\0\1\137\4\0\2\137\150\0\1\u0101\1\266\2\u0107"+
17390	not_exist
30966	mytopdocscollector
59407	"\1\27\131\0\1\25\3\0\1\25\3\0\1\25\1\115"+
44313	"á¸"
40045	subReaders[i].commit();
17214	listener
37727	HIGH_PRIORITY,
53491	searchables;
37865	wherein
27891	"\u0031\u003A\u0308\r",
62159	q.add(pq,
54061	"Now"
46140	"Åº"
55134	r1.numDocs()==r1.maxDoc());
53494	searchables)
18737	testGreek()
43089	afterrefresh
53624	searchables.
4714	clone.getMergeScheduler().getClass());
21146	inclusion
51518	deleter.refresh()
33641	5*incrMin))
11321	"\1\u02cf\161\0\4\u0475\2\0\1\u0475\15\0\1\u0475\6\0"+
44238	"á¸"
56858	"\1\0\11\12\1\0\1\12\2\0\7\12\71\0\1\1\60\12\1\1"+
21697	stopTime)
5296	curTokenImage;
41467	42L);
40573	charLength
44832	"â¿"
15009	position);
45510	"á¹"
15050	org.apache.lucene.search.FieldCache;
51102	getMergingSegments()
50221	pendingCommit;
67498	ReaderThread(task);
56897	"\0\u0142\0\u0150\0\u015e\0\u016c\0\u017a\0\u0188\0\u0196\0\u01a4"+
54523	elemSize);
15309	NumericField.DataType.DOUBLE;
48064	this.lockFactory
26193	current.get(i));
48555	perThread.consumer.addField(this,
43138	(reversed)
34723	foo").toString());
44477	"á¸"
21609	stringIdx)
4903	java.util.Calendar;
45558	"á¹"
4928	setDebugStream(java.io.PrintStream
44191	"â"
48288	possibleMatchPayloads.addAll(possiblePayload);
20777	NO_OUTPUT
29297	preutf8
53616	MultiSearcherCallableWithSort
49229	BooleanClause.Occur.MUST_NOT));
44479	"á¸"
18472	TestUAX29URLEmailTokenizer
26732	org.apache.lucene.document.SetBasedFieldSelector
33014	newterm
20255	17:0);
54505	copyCostPerElement
53521	docs.totalHits;
57462	IndexReader.open(d);
7091	linkplain
6831	CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
45560	"á¹"
35037	filter.equals(fq.filter)
53315	out.writeVLong(output<<1);
44115	"â"
8883	visited,
65231	lastInput.copyInts(input);
33369	record_id
9145	localFieldsWriter.writeField(fieldInfo,
21612	stringIdx;
31300	testSearchOldIndex()
44397	"á¸"
59312	"\1\66\1\0\1\66\1\67\1\0\1\25\2\0\1\25"+
19209	Ï¹
58067	numVectorFields;
15077	assertTrue(field.getOmitNorms()
2100	(table.length
39143	positions.size();
45512	"á¹"
44252	"â"
51665	diagnostics.put("source",
5672	*This
51874	testPoint("finishStartCommit");
60499	"\10\232\175\0\1\351\24\232\1\u037c\5\232\1\352\12\232"+
30882	encodedlength
64311	/*ignored*/)
9437	"\5\132\1\0\207\132\2\0\1\133\7\0\1\140\4\0\1\137\1\0"+
22345	slice
63983	'e',
45366	,"o",
59545	"\3\0\1\25\1\67\5\0\1\25\2\0\1\25\2\0"+
24669	"sane"
62791	(hits
906	testDocumentsWriterAbort()
15447	norms.
35516	c=A[i+1];
34408	norms,
46488	"â"
55506	Index.ANALYZED_NO_NORMS));
19648	norms)
17939	"\u0633\u0627\u0628",
45071	"á¸¿"
20250	object.*/
38702	norms2
38700	norms1
56136	assertEquals("mismatch
15424	norms;
11648	"\1\u0554\174\0\1\u0386\4\u0560\2\0\1\u0560\15\0\1\u0560"+
15621	norms:
66361	Collapse
16740	assertTrue(isReadOnly(reader2));
16809	norms?
8905	Implementation
55482	Term("preanalyzed",
48326	laststart
7827	dotest
66297	int[postingsHashSize];
46512	"â"
39650	field.setValue("tangfulin");
4895	By:JavaCC:
44481	"á¸"
41594	compile(String[]
37605	searcher.explain(query,
29665	"\35\55\3\122\35\126\3\122\6\126\2\33\31\126\1\33\17\126\6\122"+
44822	"Ä³"
21645	"ca??"
5669	floattorawintbits
5934	shifts[base+2])
28150	repeat
65027	packing,
58367	"an",
46536	"â"
4131	testRange(int
2905	setScorer(Scorer
44399	"á¸"
35446	twiddling
50260	getReader()
18040	u00d8t
65029	FST#pack(int,
8474	separate
6818	maxInclusive;
11439	"\6\0\12\u04d0\1\u04cf\13\0\1\u0325\160\0\1\u0386\4\u04ce"+
12369	uc6a8
60089	"\1\u0101\7\266\1\u01f9\22\266\1\142\3\266\1\u01fa\6\266"+
54049	TestStopFilter
64100	utf8Str.getBytes("UTF-8");
46524	"â"
1693	totalhits
25229	"\\\\*"
50392	sr.hasChanges
7182	lowerbound
29554	"\1\136\3\132\1\0\1\132\1\0\24\132\1\0\123\132\1\0\213\132"+
44515	"á¸"
58066	perDocTvf
43633	filtercache
35035	(FilteredQuery)
57861	SimpleFSDirectory}
28524	docfromreader
54573	Integer.toString(val);
22791	.append(includeUpper
36300	IllegalStateException("invalid
34342	cost.
23664	city
58597	unicodeset
23980	"4f",
11801	char[0x10000];
26211	getnextfixedsize
44321	"á¸"
57975	PerDoc[1];
56835	"\2\0\11\12\2\0\7\12\16\0\2\12\16\0\5\12\11\0\1\12"+
1541	IndexReader.open(directory);
25469	check(CacheEntry...
27323	"\u003A\u0308\u0031\u003A",
9851	"\1\65\7\0\1\65\2\0\1\25\1\0\32\25\42\0"+
31667	trieint
45506	"á¹"
42371	tp.skipTo(5);
10542	"\150\0\1\135\1\264\1\u01b1\1\u01b2\2\264\1\u01b3\1\u01b4"+
26633	testterms
26184	set(int
44282	"á¸"
1952	storedCount++;
15782	output.writeLong(delGen);
18803	"à½¡à½²à½",
4265	lower=upper;
3507	[maxNumSegments="
6750	ideal,
34363	getMergeScheduler()
51842	locking,
45404	"á¹"
9164	pushed.
43717	clÃ©s
35449	BitUtil()
5536	21);
9177	RamUsageEstimator.NUM_BYTES_OBJECT_REF
24485	multiSearcher.
11376	"\15\0\1\u04a5\6\0\12\u04a5\1\u0469\13\0\1\u0325\161\0"+
35744	delight
59763	"\1\137\1\0\1\137\1\145\1\140\1\u0143\1\u0144\1\u0145"+
44391	"á¸"
23237	testDocFreq()
8547	List<WeakReference<SinkTokenStream>>
38973	keyStr
36407	read(File
46814	Iterator<String>
32168	Verify:
37097	fst.bytes.length
45554	"á¹"
63325	0x7421,
62639	environment.",
23561	doIndexing
57109	signed
63484	0x876421,
52335	payloadTS1
52337	payloadTS2
44473	"á¸"
38590	fail("opening
41217	builder.add(toIntsRef(term.text()),
33830	(pp2.rptGroup
45432	"á¹"
23878	Collections.sort(trackers);
62154	"not_in_index"));
56371	mergesort_threshold
27634	"\u0061\u2060\u0308\n",
60234	"\2\u0287\1\u0286\5\u0287\1\u0288\14\0\1\u0126\161\0\4\u0289"+
57746	mid="
67574	(checkSubReaders)
55019	mergeFactor=2;
56834	"\5\0\27\12\1\0\37\12\1\0\u0128\12\2\0\22\12\34\0\136\12"+
8572	(!this.getAttributeFactory().equals(sink.getAttributeFactory()))
31216	List<IndexReader>
54247	bits.set(compact[i],
35747	newcode
59432	"\1\25\4\0\2\34\11\0\1\25\11\0\2\25\2\34"+
35079	currentBufferIndex++;
57452	w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random,
53111	newString(int[]
41272	(fstEnum.current()
35249	Case
45508	"á¹"
25976	comparator.setScorer(scorer);
44341	"â"
21084	diskfree
59838	"\150\0\1\u0101\22\266\1\u0107\7\266\1\142\12\266\1\0"+
41240	randomTerm.charAt(0)));
44393	"á¸"
17224	si.name.equals(segment);
37064	//totWasted
45556	"á¹"
49823	p.gen
16681	non-readOnly
28878	recyclePostings)
33509	test1to3()
44395	"á¸"
121	"aaa");
80	specific
19006	emailList.add(line);
10704	"\4\264\1\u0254\25\264\1\141\12\264\1\0\3\136\1\0"+
18293	"DOES_NOT_EXIST"));
10364	"\1\324\1\136\1\u0157\2\u0158\1\u0157\5\u0158\1\u0159\1\0"+
2377	QueryUtils.check(boostingFuncTermQuery);
19367	testcombiningmarksbackwards
65369	parentnode
4081	NumericField("field"+Integer.MAX_VALUE,
8790	org.junit.runners.model.Statement;
43554	doTestDgaps(10000,40,43);
66162	i=0;i<NUM_EXTRA_DOCS/2;i++)
29831	"\5\0\1\25\3\0\1\26\4\0\1\26\2\25\2\26"+
54662	abnormally.</p>
45941	"á¹¿"
57015	<code>java.util.BitSet</code>.
18530	Õ¯Õ¡ÖÕ¸Õ²
44475	"á¸"
52296	getReaderProcessor(IndexReader
4966	jjMoveNfa_3(0,
53207	uni_sur_low_start
55007	mergeFactor=3;
29670	"\2\0\152\144\46\0\7\132\14\0\5\132\5\0\1\132\1\133\12\132"+
61104	"\175\0\1\351\3\232\1\u0573\26\232\1\352\12\232\175\0"+
2354	assertTrue(doc.score
16727	reader1.clone(false);
29773	"\1\40\1\0\1\41\1\0\1\55\3\0\1\56\5\0"+
41169	term.toString();
60521	"\1\137\4\0\2\137\150\0\1\u0101\11\266\1\u038c\20\266"+
63572	curDocId;
18155	this.docIdSetIterator
31592	Log-
18365	q.add(q2,
4190	NumericRangeFilter.newIntRange("field8",
39826	segmentsFile
17946	RuleBasedCollator.
48640	docState.analyzer.getOffsetGap(field);
11715	textposition
41074	keep;
16857	reopenedReader.clone();
56595	numOnInit;
56502	(theTop
30755	JAVA_4;
65220	validOutput(wordSuffix);
60548	"\15\0\1\u039f\6\0\12\u03a2\1\u03a0\13\0\1\u033c\160\0"+
4293	right
49116	allowLeadingWildcard)
34234	#setReaderPooling}.
23992	"i",
23617	atLeast(1020);
18359	q.add(q1,
49118	allowLeadingWildcard;
54252	native
40277	dosetnorm
20006	#setMaxClauseCount(int)
19883	warned
67553	Field("field"
3784	ensures
2454	query.add(c1);
53580	Term[terms.size()]);
41806	ArrayList<Util.MinResult<Long>>();
57478	org.apache.lucene.util.BitUtil;
11946	zzCMapL
56215	assertTrue((positions.doc()
27929	"\u0031\u003A\u0031\u002C",
43155	scores[i]);
65044	NodeHash<T>(fst);
10009	"\1\25\1\332\32\155\1\136\12\156\1\0\1\136\1\151"+
40529	#reset()}
42163	<code>other</code>
19895	"field
4935	jjStartNfa_3(int
3474	(paused)
16999	ignoringOffsets);
21918	resourceDescription
4229	testRightOpenRange_8bit()
30282	TestTwoPhaseCommitTool
39047	map.get("foo").intValue());
30144	Load
59864	"\1\u0165\14\0\1\u0126\161\0\4\u0166\2\0\1\u0166\15\0"+
50167	modified/new
19987	TermQuery}s,
50434	config.getReaderTermsIndexDivisor());
64950	(maps
61656	uc3fe
54968	newGeneration.signalAll();
62717	subReaders[subIDX].maxDoc();
29631	"\1\0\7\132\1\0\7\132\1\0\7\132\1\0\40\133\57\0\1\132"+
16904	deleteddocs
30475	ignoringPositions,
7493	this.termsHashPerThread
56144	testRangeQueryIdCollating()
25240	{"h*",
28270	DisjunctionMaxScorer(Weight
1237	token"),
2528	addattribute
50795	close(true);
41742	minPairWeightComparator
28668	stpf.reset();
61481	"\11\u02e2\175\0\1\u034d\24\u02e2\1\u06a8\5\u02e2\1\u034e\12\u02e2"+
59384	"\1\25\2\0\1\25\4\0\2\26\11\0\1\25\11\0"+
34730	multi2))",
59079	"\1\0\4\2\1\0\1\3\1\0\2\3\1\2\1\3"+
29622	"\3\132\1\0\7\132\17\0\2\133\2\133\10\0\2\140\12\0\1\140"+
61485	"\1\u034e\11\u02e2\1\u06aa\175\0\1\u034d\4\u02e2\1\u0428\25\u02e2"+
39023	entry.getKey();
36940	downTo);
60535	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\2\266"+
51295	#prepareCommit(Map)
8430	Lock
40129	segmentCount
5354	input_stream.backup(1);
27734	"\u0061\u003A\u0061\u002C",
35276	skipBuffer.writeVInt(curDoc
16458	keeps
60644	"\1\142\6\266\1\u0159\3\266\1\0\3\137\1\0\2\137"+
14833	(comparatorSource
37972	removals
6071	assertFalse(t1a.equals(t2));
42239	attrImpl;
51342	beware:
6327	<p><pre>
19783	Hits
18237	http://issues.apache.org/jira/browse/LUCENE-323
9940	"\1\237\1\240\1\241\1\242\1\243\1\244\1\245\1\246"+
3908	LUCENE_31
19842	td.scoreDocs;
15751	IndexFileNames.COMPOUND_FILE_EXTENSION));
35619	pop_andnot(long
31292	_TestUtil.getTempDir(name);
54188	java.util.TreeSet;
9759	"\42\0\1\33\7\0\1\33\100\0\1\130\1\0\1\50"+
21293	createSequenceFile(dir,
65895	assertStopQueryEquals("one",
1517	IndexFileNames.FIELD_INFOS_EXTENSION));
33779	(pp.position
1875	field).getDataType())
55084	DocsAndWriter();
24521	locale-sensitive
62222	nextDoc;
2081	scratchArc.nextFinalOutput.hashCode();
62709	List<SortField>
22970	CollectionUtil.insertionSort(list,
64096	byte[]{(byte)
60488	"\13\232\1\u036e\4\232\1\352\12\232\175\0\1\351\32\232"+
22051	formatted
24330	doc2.getValues("tracer");
24964	myfieldcomparator
27427	"\u0030\u3031",
16351	testnoop
10221	"\3\264\2\u0103\1\264\10\u0103\1\141\12\264\1\0\3\136"+
23205	indexSearcher2.setDefaultFieldSortScoring(true,
39229	fieldExpl.addDetail(fieldNormExpl);
42920	payload.clone());
27608	"\u0300\u0300",
23718	session
6422	charreader
48275	(lastStart,
26165	PackedInts.getMutable(valueCount,
56368	upper(int
27402	"\u0027\u0061\u003A",
25403	jdkset
40686	(random
5954	size()
53794	<code>nextCharArray</code>
25597	(badChildren.containsKey(kid))
16820	norm.bytesRef().get());
66973	docsToAdd;
65479	(segments_N)
62919	"_2_2."
34450	setMergePolicy(MergePolicy
60685	"\160\0\1\u034d\1\u02e2\2\u0428\1\u0429\1\u042a\10\u0428\1\u02e2"+
8959	currentTerm;
9421	"\1\31\1\16\1\64\6\31\1\16\66\31\5\116\6\103\1\45\4\103"+
67245	lockedid
15830	(!useCompoundFile)
32504	dir1.setPreventDoubleWrite(false);
65283	size).
41777	TreeSet<String>
19327	ietf
33942	{B,C},
36535	srcPos
4071	.setMergePolicy(newLogMergePolicy()));
27827	"\u0061\u0027\u2060\u0061"
61498	"\1\1\2\0\2\1\1\0\1\1\10\0\3\1\15\0"+
32981	size);
65831	matches="+(nMatches/iter));
42761	source.type()]);
38892	IncThread[numThreads];
48751	int[testTerms.length][];
62797	docFieldLocs.add(fieldIDX);
33215	flagsatt2
34964	DocIdSet.EMPTY_DOCIDSET.iterator();
33191	attClass);
21152	scanned
64208	Lock.LOCK_POLL_INTERVAL
65864	atLeast(3));
22741	1L);
1543	sample(reader,1000);
56896	"\0\322\0\340\0\356\0\374\0\u010a\0\u0118\0\u0126\0\u0134"+
46123	U+1D22:
30651	"\2\0\4\52\2\0\1\52\53\0\1\166\3\0\1\167"+
9282	scanner
45393	,"oo",
23207	hits=searcher.search(query,
63972	org.apache.lucene.store.ByteArrayDataOutput;
49727	java.lang.Error
36971	absCount
45971	U+1D21:
34941	Filter.getDocIdSet()
4873	snapshotdeletionpolicy
40824	twoLongs
10531	"\6\136\12\u01ae\1\0\3\136\1\0\2\136\1\137\3\136"+
64214	lockmock
53187	distribute
55209	termDocs2.seek(termEnum2);
53975	bytesRef.decrementAndGet();
37507	Term("contents","foobar"));
55378	tvVal));
59979	"\1\u01a1\15\0\1\u01a1\6\0\12\u01a1\1\u0167\13\0\1\u0126"+
39126	add(terms,
1511	SegmentReader.getOnlySegmentReader(directory);
23708	drills
65304	arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++)
15719	(normGen[i]
48809	MyTokenizer
25325	expectedmatches
61193	"\1\u05bd\15\0\1\u05bd\6\0\12\u05bd\1\u053b\13\0\1\u033c"+
25215	abcdefg1",
49798	jj_expentry[0]
33080	FlagsAttribute.class,
54208	1+random.nextInt(39);
64811	targetTerm);
34298	<p>Only
37501	phraseQuery.add(new
24616	testOutOfOrderDocsScoringSort()
29399	nextslice
47214	Äµ
9119	getuserdata
47267	Ä¼
19315	urllist
66832	tmpFreqs)
4218	testLeftOpenRange(8);
47251	Ä»
21277	seek(end+1)",
25902	IndexCommit}.</p>
37594	//assertTrue("ordered
4691	f.getModifiers();
52522	assertEquals("field2:brown",
16625	bottom
39811	oldReaders[oldReaderIndex.intValue()].norms.get(field)
9391	"\51\132\u032d\0\64\132\u0716\0\57\132\1\0\57\132\1\0\205\132\6\0"+
28309	Organize
22636	includeUpper;
22104	NumberFormatException();
18964	(numCharsRead
23154	searcher.doc(hits[0].doc);
41454	System.out.println("DOT
34953	weight.normalize(v
10584	"\1\u01dd\33\0\1\u019d\1\u01df\1\u01de\2\u019d\2\u01de\1\u019d"+
40313	<code>Term</code>.
27931	"\u0031\u003A\u0031\u002E\u2060",
60920	"\2\0\1\u04cb\15\0\1\u04cb\6\0\2\u04cc\1\u04cb\2\u04cc"+
31408	doCFS,
51064	forceMergeDeletes");
45953	,"v",
30711	"\1\103\5\0\1\103\7\0\1\103\4\0\2\103\3\0"+
66212	DefaultSimilarity(){
21721	(r.numDocs()
32093	allocator)
12766	uc412
10055	"\10\0\1\64\2\25\2\0\1\66\6\0\1\25\122\0"+
54316	testget
12365	uc41c
45914	U+1D20:
15522	delCount
25317	testlotsofasterisks
64348	reader.docFreq(t);
22641	includeUpper)
22720	FieldCacheRangeFilter<Integer>
7720	"for
18924	"foo
17832	gettotalnumberofterms
35045	searchwithfilter
7318	'page'.<br>
66537	bytePool.buffer;
57636	BaseCharFilter(CharStream
55321	High
4810	reflect
66906	newPair(A
11557	"\6\0\12\u0524\1\u04f3\175\0\4\u0525\2\0\1\u0525\15\0"+
21593	/********************************************
42302	assertByteArrayEquals(testData,
16102	purpose,
9333	"\2\133\2\0\3\133\3\0\1\133\7\0\4\132\1\0\1\132\7\0"+
39078	assertEquals("[test]",cm.keySet().toString());
62490	requiredScorers.size();
34911	SpanMultiTermQueryWrapper<WildcardQuery>(wq);
25437	FieldCacheSanityChecker
29328	purpose.
34492	sb.append("analyzer=").append(analyzer
58773	0xfffd;
10789	"\2\136\150\0\1\376\32\264\1\141\11\264\1\u02ae\1\0"+
65886	doSloppyPhrase(s,25,2,1000);
59362	"\2\0\1\25\1\0\1\25\117\0\1\25\13\0\1\25"+
1677	readbuffersize
60103	"\4\0\2\137\150\0\1\u0101\32\266\1\142\3\266\1\u0208"+
23869	init'ing
64676	isEnd;
37073	"forwards":
50701	minMergeDocs,
19556	suppressed)
27361	"\u002C\u0308\u0061\u0027",
21903	"modified
20547	several
28071	"\u0031\u002E\u2060\u0308\u0031\u003A",
32091	allocator;
59194	"\3\uc72d\3\uc7d0\3\uc873\3\uc916\3\uc9b9\3\uca5c\3\ucaff\3\ucba2"+
52996	0xffff)
35717	0xFFFF0000)
28389	CharsRef(s);
59617	"\7\36\1\142\12\143\1\66\1\137\1\144\1\137\1\0"+
15616	leaving
46973	Ä
21741	newSearcher(r2);
26551	assertTrue(noTVFieldNames.size()
60799	"\1\u033c\160\0\1\u03a1\4\u0472\2\0\1\u0472\15\0\1\u0472"+
47122	Ä
47123	Ä
50979	optimize()
49110	getPhraseSlop()
47064	Ä
23383	testMaxBufferedDeletes()
47065	Ä
23094	mSearcher3
47036	Ä
66405	0xffff;
23067	mSearcher2
47063	Ä
47191	Ä¿
21589	wildcardEquals(text,
27274	"\u0041\u0061\u002C",
47133	Ä
55512	norms",
46899	Ä
47012	Ä
46996	Ä
47034	Ä
60463	"\2\0\1\u0353\15\0\1\u0353\6\0\12\u0353\1\u0354\175\0"+
47061	Ä
47062	Ä
940	"this
47035	Ä
33808	re-queuing
46866	Ä
46983	Ä
50684	message("setMaxFieldLength
46982	Ä
46897	Ä
46862	Ä
46864	Ä
47174	Ä¾
46898	Ä
47011	Ä
5953	size="
21745	congruent
54034	originalnorm
18533	ÖÕ¡Õ¶Õ¯Õ¡Ö
47156	Ä§
35322	stream.getAttribute(CharTermAttribute.class);
46974	Ä
37694	TestSearchForDuplicates
46981	Ä
32009	RamUsageEstimator.sizeOf(getValue());
3023	very
21647	Look
62782	ReaderUtil.subIndex(sd.doc,
22229	newArray;
8282	lockfactory
41810	matches.add(new
21646	WILDCARD_CHAR)
60128	"\3\0\1\137\4\0\2\137\2\0\1\70\1\0\1\51"+
22511	AttributeReflector#reflect}
16338	multiphrasequeries
56814	segments_gen
9244	buffereddeletesstream
33200	TestAttributeImpl2().reflectWith(reflector);
14948	TestSloppyPhraseQuery2
31025	si1);
52802	exchange
16069	!searcherThread1.failed);
4447	Long
9465	int[1384];
54384	wordlistloader
36140	BIT_TARGET_NEXT
67523	task)
27520	"\u005F\u0061\u003A",
41244	fstEnum.seekCeil(toIntsRef(randomTerm));
48533	MUST:
15797	(hasVectors
31894	FieldCache#getDoubles(IndexReader,
33701	writer.forceMerge(1,
67475	task;
8311	nrbuffers
15927	purposes
22222	(array.length
40275	midvalue
58536	setIngoreCase);
66520	charPool.charUpto;
56621	doDeletes(commits,
56075	ih);
43162	vals[i
23636	docsInSegment.get()
35838	termvectorswriter
57758	multi-seg
23899	//System.out.println("PRUNE
49024	FuzzyQuery.defaultMinSimilarity;
7054	fall-through
4468	numericrangefilter
58098	(pp1.doc
47861	slash
38272	itsself
39830	buffer.append(":nrt");
29847	"\37\0\1\27\1\0\2\27\16\0\1\27\4\0\1\27"+
48549	DocInverterPerField
712	thread.failure.printStackTrace(System.out);
42715	Context">KWIC</abbr>
22227	newArray,
5178	jjStopStringLiteralDfa_2(int
2113	rehash
713	fail("thread
47598	vend
49693	QueryParser(CharStream
62315	testNoop0()
3516	info.sizeInBytes(true);
37610	q2.add(new
24253	SortField.BYTE),
21041	DefaultSimilarity();
34577	SpanWeight
1127	checksum
33721	repeats
39913	commit.getDirectory())
43890	qq!"
56579	commit.getVersion();
54543	bar".toCharArray(),
16272	SpanNearQuery
51572	mergeMiddle(merge);
54813	lockfilename
40326	this.weightValue
24230	testBuiltInSorts()
26580	norms);
29892	"\1\0\2\52\4\0\1\25\5\0\1\25\3\0\1\52"+
15717	norms):
16666	testCloneReadOnlySegmentReader()
27263	"\u0041\u0061\u2060"
41589	close-to-root
66598	"abcdefga",
58308	UTF8SortedAsUTF16Comparator
16331	bqtest
38749	while(enum1.next())
30875	termAtt.setLength(encodedLength);
349	testDeleteReaderWriterConflictFullMerge()
62475	lastDocScore
60335	"\1\25\1\66\7\0\1\66\2\0\1\25\1\u0274\32\u021a"+
54027	SegmentNorms.NORMS_HEADER.length);
35183	"the"
4911	org.apache.lucene.search.FuzzyQuery;
9095	getTimestamp()
45505	U+1D1A:
40990	pairs.size()-1
38505	TermDocs",
67269	dir3);
49176	fieldToDateResolution.put(fieldName,
6165	positionincrement
39156	idfExp
4826	getindexcommit
40995	for(;attempt<10;attempt++)
31343	d.getField("fie\u2C77ld");
63107	toHexString(s)
58164	super(primary,
35070	nextPos
1497	NUMBER_OF_FIELDS
21501	largeBuf
51974	getFlushDeletes()
45674	U+1D1B:
65841	tnum=termflag.nextClearBit(tnum);
56965	ClassicTokenizerImpl(java.io.Reader
17468	testQueries()
15728	advanceNormGen(int
26630	isindexed
48129	Successive
39754	oldReaders,
19419	(!field.equals(other.field))
2327	"seventy"),
50552	directory.makeLock(WRITE_LOCK_NAME);
20408	"text";
45799	U+1D1C:
3827	#CharTokenizer(Version,
65824	o=0;
8384	"that
57515	dataOutput
23106	document=new
12575	u4a75
1763	higher
18321	h[0].score;
12976	u4a6b
33727	colliding
53252	.second
65468	2.2.
8717	ArrayList<Integer>();
12366	uc4bf
60889	"\1\u04b4\4\266\1\0\3\137\1\0\2\137\1\140\3\137"+
23317	Integer.toString(nextID++),
10424	"\12\230\175\0\1\346\2\u016a\1\230\1\u016a\3\230\2\u016a"+
56650	2.0;
14897	comparable
50700	usage),
34376	usage).
13168	uc4ab
17833	inctotalnumberofterms
23516	assertTrue(failed);
7031	UnsupportedOperationException("not
12174	u4a7f
4934	(pos)
29764	"\6\32\1\0\2\32\1\0\2\32\1\0\10\32\1\0"+
5359	'\n'
14587	newstate
37845	letters
9653	"\3\u534b\3\u53ee\3\u5491\3\u5534\3\u55d7\3\u567a\3\u571d\3\u57c0"+
50450	external)
54866	warmed
52631	assertNull(mp.findMerges(null));
11368	"\4\0\2\136\150\0\1\376\3\264\1\u049b\26\264\1\141"+
26402	numOutputBytes
31068	merger.fieldInfos().hasVectors());
15523	this.hasProx
52184	commitmergeddeletes
32986	bytesPerPosting()
34528	warmer
58634	2.0,
17352	f.getDocIdSet(rdr);
3476	could
54211	(str.length()
59889	"\1\351\5\u016f\1\u0179\1\232\1\u016f\1\u017a\7\u016f\1\u017b"+
55310	r.nextInt(end-start);
24915	bdfhj
56029	formatpostingsdocsconsumer
1868	FIELD_IS_TOKENIZED;
25275	qtxt="+qtxt+"
21023	2.0)
16008	IndexerThread(IndexWriter
13377	u4a61
2455	query.add(c2);
39985	subReaders[0].terms();
19104	"å£¹");
9726	"\117\0\1\32\52\0\1\32\1\0\1\32\7\0\1\32"+
57517	indexToTerms
28870	consumer.startDocument();
16997	PositionBasedTermVectorMapper(boolean
9019	scratch.copyChars(term.text);
38723	doc1.getFields();
35990	five",
24305	t.max
34080	each,
40772	FST.END_LABEL;
37567	five")
29073	fieldInfos.fieldNumber(field);
67710	slight
66138	testanalyzerreturningnull
56668	each:
823	name.equals("startMergeInit"))
33516	test2to1()
40796	FST.END_LABEL)
65746	t.setType(type);
65218	fst.outputs.subtract(lastOutput,
9670	"\3\2\1\30\2\31\1\32\1\33\1\34\1\35\6\36"+
43065	doTryRefresh;
6980	termTemplate
24922	eacgi
65048	idx=0;idx<frontier.length;idx++)
41048	idx;
16595	minimum,
27590	"\u0300\u000B",
56405	offsetend
16231	int2str(int
60609	"\1\352\2\232\1\u03eb\7\232\175\0\1\351\32\232\1\352"+
36925	q.add(new
40704	idx,
55288	(pos1
39719	applyAllDeletes
54732	(lockExists())
27696	"\u0061\u003A\u0308\n",
27841	"\u0061\u0027\u2060\u0308\u0031\u002C",
8429	verifierPort);
42763	2.4,
66127	ldcard
59204	"\3\ufa1d\3\ufac0\3\ufb63\3\ufc06\3\ufca9\3\ufd4c\3\ufdef\3\ufe92"+
43063	afterRefresh();
67506	readersToClose)
53950	IndexInput:
38781	r3.deleteDocument(0);
65409	testCrashAfterCloseNoWait()
21444	e1.readByte();
16525	non-null
838	testExceptionFromTokenStream()
31958	NumericUtils.prefixCodedToLong(val);
50456	readerPool.getIfExists(info);
56447	setmaxmergeatonce
29641	"\2\133\62\132\21\133\13\0\12\134\6\0\22\133\6\132\3\0\1\132"+
1594	Random();
2544	getmaxscore
5979	currentshifts
34713	assertEquals("\"foo
19488	normally.</p>
11945	zzBuffer;
67696	here!
51698	merge.readerClones.size()
34173	advancerepeatgroups
29299	vints
20844	here.
1837	here,
11819	zzBuffer,
58642	ids.add(new
4138	(distance/3);
49998	ids;
67222	lockedID
26514	SegmentReader.get(false,
53419	TestMultiValuedNumericRangeQuery
3965	incrementTokenOld()
38346	x7fffffffffffec7fl
20451	actualOrder[i]
35925	(Tokenizer)
60591	"\1\0\1\u035b\14\0\1\u0126\160\0\1\351\1\232\1\u03d9"+
47325	preceded
55749	warmCount++;
11944	zzBufferL
25292	assertEquals(1,hits.length);
43168	vals[i+1]
49760	int[100];
21669	wildcardtermenum
8196	length()
26581	assertTrue(norms
30828	limit");
24552	(scoresA,
43933	OGONEK
27479	"\u0030\u0031\u002C",
12368	uc605
31498	Integer.toString(id),
33331	RollbackDeletionPolicy
3255	RamUsageEstimator.NUM_BYTES_FLOAT;
28969	length-in-bytes
42209	assertEquals("type=hallo",
9310	"\1\151\1\152\1\153\1\156\1\157\1\175\1\160\1\176\1\201\1\161"+
49562	FUZZY_SLOP:
2741	testTimeoutGreedy()
10494	"\2\u015f\1\u015e\5\u015f\1\u0160\231\0\1\u019c\2\u019d\1\u019c"+
28089	"\u0063\u0061\u006E\u2019\u0074",
57703	writer",
54765	here;
16605	here:
23269	assertEquals(Integer.valueOf((i*2)
43858	<maybe
50791	IndexWriter.unlock(directory);
56381	pool.buffers[address
16949	reopenedreader
32312	this.numIteration
65933	+(b:two
15008	pq.add(terms,
20642	FileSwitchDirectory.getExtension(files[x]);
37628	non-empty-string
488	count
21498	pointer.
61168	"\32\u02e2\1\u034e\1\u05a9\11\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
21294	data[i]);
40317	pointer;
42999	REFERENCE_MANAGER_IS_CLOSED_MSG
60352	"\4\u02ee\2\0\1\u02ee\15\0\1\u02ee\6\0\12\u02f1\1\u02ef"+
5248	jjnewLexState
21304	assertSameStreams(name,
67240	serversocket
37940	Reference<?>
48482	<code>Weight</code>.
64543	this(resourceDesc,
59888	"\3\u016f\3\232\1\u016f\2\232\3\u016f\1\352\12\232\175\0"+
11350	"\175\0\1\346\1\u0489\31\230\1\347\12\230\175\0\1\346"+
42801	length),
25100	testTermWithoutWildcard()
64150	musical
4013	getinstance
24307	t.min
24004	"j",
3946	length);
65328	owner.validOutput(arcs[arcIdx].output);
66151	mulFactor;
57092	this.wlen
30387	twophasecommit
49726	LookaheadSuccess
10651	"\1\136\1\0\2\152\1\137\1\u013f\1\u0140\1\u0141\2\0"+
53635	hq.setFields(docs.fields);
32171	MockLockFactory();
28807	pointers
20247	this.getMinimumNumberShouldMatch()
62789	hits)
14743	hits.
25187	"metal?"));
32926	tvf.writeVInt(freq);
17624	(LUCENE-1805).
15265	network
6853	hits,
10259	"\1\57\4\0\1\177\14\0\1\61\4\0\1\200\2\0"+
23096	hits3
23069	hits2
31119	ids.
36044	hits1
64438	decompressString(byte[]
23538	ids)
66233	hits4
23189	hits;
3393	#findForcedMerges(SegmentInfos,int,Map)}
26427	java.nio.CharBuffer)}.
60737	"\1\u0440\15\0\1\u0440\6\0\1\u0441\2\u0442\1\u0441\5\u0442"+
57519	indexSize,
10610	"\150\0\1\376\7\264\1\u01f0\22\264\1\141\12\264\1\0"+
33592	"gzw
56807	expirationtimeseconds
26459	similarly
29939	"\1\25\1\0\1\25\1\0\3\25\1\0\1\54\1\0"+
20251	Float.floatToIntBits(getBoost())
50787	held.</p>
10891	"\1\141\2\264\1\u0310\7\264\1\0\3\136\1\0\2\136"+
41529	allIDsList.get(random.nextInt(allIDsList.size()));
57493	indexSize;
23920	(searchers.size()
41162	testBigSet()
58214	length)}
38225	0xfffff00000
20972	termattribute
799	MockAnalyzer(random)).setMaxBufferedDocs(2));
31649	udd1ece
49792	(1<<j))
43590	CachingWrapperFilter.FilterCache<SpanFilterResult>
33429	Starts
2034	PRIME
9666	"\3\2\1\7\2\2\1\10\3\2\1\11\7\2\1\12"+
36809	this.arc
8643	ACCEPT_ALL_FILTER
50673	anticipate
21378	fsdir,
8403	Integer.parseInt(args[5]);
29694	"\0\u2233\0\u229a\0\u2301\0\u2368\0\u23cf\0\u2436\0\u249d\0\u2504"+
54465	normsWriter)
35138	{0,1,2,3});
2127	addNew(address);
3806	Tokenizer
60116	"\1\u01d2\5\0\2\u01d0\4\0\1\u01d0\152\0\4\u0215\2\0"+
58177	IndexCommits
65052	getTotStateCount()
55372	Field.TermVector.NO;
10237	"\1\u0116\4\264\1\u0103\2\264\1\u0103\14\264\1\141\12\264"+
65692	message("unable
65056	getMappedStateCount()
51705	(suppressExceptions
23303	testcustomsimilarity
20107	clauses.iterator();
61658	uc544
54463	normsWriter;
56866	"\122\12\6\0\7\12\1\0\77\12\1\0\1\12\1\0\4\12\2\0"+
30268	scanto
19421	"FieldValueFilter
35905	Collator.getInstance());
34321	IndexCommit}
55995	empty_offset_info
20948	termBuffer.
5368	error_after,
67700	termBuffer,
36358	(!packed)
9363	"\4\142\3\143\1\142\3\143\2\142\7\143\3\142\4\143\15\142\14\143"+
55264	d1.length);
24299	SortField.DOUBLE,
67706	termBuffer;
34582	reader.norms(query.getField()));
52979	matches(source,
13169	uc54e
14872	SortField.DOUBLE:
28868	(nextPerThread
12768	uc558
45901	,"u",
20525	</li>
45654	,"ss",
14815	used).
31941	(shift>0
52877	SPECIAL
11614	"\1\137\3\136\3\0\1\136\4\0\2\136\151\0\4\u0552"+
9916	"\2\0\1\33\136\0\1\25\3\0\1\25\3\0\1\25"+
9644	"\3\u2573\3\u2616\3\u26b9\3\u275c\3\u27ff\3\u28a2\3\u2945\3\u29e8"+
12019	cygwin
12367	uc562
60026	"\1\u01c7\2\266\1\u01c8\1\u01c9\1\u01ca\1\266\1\u01cb\1\u01cc"+
37194	sillybyteswriter
22836	includeupper
27372	"\u002C\u0031\u002E\u2060",
28587	tokenStart,
6066	content1b
1595	TermEnum
16555	heapSize
6063	content1a
37033	BIT_TARGET_DELTA))
20730	retArray,
50381	(!poolReaders
35233	this.curFreqPointer
6178	Map<String,Float>
28576	tokenStart;
53200	arising
62282	qr);
35162	attributeSource;
31816	IllegalArgumentException("This
66225	q1,searcher);
4362	length",
64885	doc.add(fld);
50653	speedier
19406	docsWithField;
10368	"\1\53\2\0\1\54\3\0\1\72\7\0\1\56\2\0"+
31879	ByteParser
6355	+(contents:query2)
10156	"\2\0\1\25\1\140\4\36\1\352\5\36\2\352\3\36"+
29958	"\1\25\4\0\1\25\4\0\1\65\1\0\2\65\4\0"+
15662	si.docStoreIsCompoundFile
42214	att.type()));
58589	testrehash
36850	//assert
20621	TestFileSwitchDirectory
38579	_0_2.s0)
40976	pairs.get(random.nextInt(pairs.size()));
8706	MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand,
7726	country!",
37315	String...)}
41695	dir.createOutput("fst");
61141	"\12\u058f\1\u0503\13\0\1\u02e1\160\0\1\u0349\4\u058f\2\0"+
31082	DF="
35746	hdcode
25943	tracking
8984	PrefixCodedTermsIterator()
42718	tokenizer),
7834	wasCalled
8316	read_only
33382	currentrecordid
9569	"\1\ua76b\1\ua80e\1\ua8b1\1\ua954\1\ua9f7\1\uaa9a\1\uab3d\1\uabe0"+
40452	2.9.
33534	cccc
12175	u4b22
53237	cover
62545	requiredCountingSumScorer)
14627	2.9,
62535	requiredCountingSumScorer,
17847	TestTermRangeFilter
35524	b=A[i+2],
2324	PayloadTermQuery
62512	requiredCountingSumScorer;
25210	testParsingAndSearching()
36573	nodeAddress["
12977	u4b0e
30219	(ti1.docFreq
38247	0x7fffffffffffec78L,0x800000000000251cL
55349	i<nTokens;
9017	Term(""))
36500	outputs.write(arc.nextFinalOutput,
26558	//System.out.println("Term:
12576	u4b18
53746	ignoreCase));
25994	OneComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>
30991	newFSDirectory(indexDir);
42366	tp.next();
41599	term.copyChars(w);
53985	read-only
47250	Ä¹
21748	dosearching
8812	after()
56870	"\37\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0\47\12\1\0"+
30897	Scores
68066	testletterunicodehuge
3056	Scorer
52691	currentpayloadscore
32637	originalComparison
20824	HashMap();
13378	u4b04
67114	WordlistLoader.getWordSet(IOUtils.getDecodingReader(stopwords,
22881	//hmm,
38067	1.0E-2,
18471	java.io.InputStreamReader;
20381	this.lazyFieldsToLoad
51234	highly
42349	verifyPayloadData
47252	Ä?
1658	termindexinterval
27073	"\r\u0308\u0031\u002C",
9828	"\2\25\1\0\1\25\1\0\1\25\1\0\4\25\2\0"+
37821	That's
15366	lazy_field_binary_key
23942	maxagesec
66487	tokenText[downto]
32309	hitException
17756	Constructs
54974	copyonwritearraylist
57165	startWord+1,
3598	findForcedMerges(
38068	1.0E-1,
32822	TermsHashPerField
48079	<i>to</i>
59016	_TestUtil.createTempFile("mmap"
32951	fieldState.position;
20732	retArray;
54176	termAtt.setLength(1);
51804	buffer.append(info.toString(directory,
24551	(scoresY,
37010	nextCount++;
9457	"\2\11\1\0\4\11\2\0\2\11\2\12\1\0\2\12"+
23123	i<nDocs;
33902	<p>Case
2353	hits.scoreDocs[i];
42353	TermPositions[numTerms];
15222	sizebytes[1]);
29896	"\1\0\11\25\2\0\1\25\4\0\1\25\4\0\6\25"+
5766	value-getter,
35951	//http://issues.apache.org/jira/browse/LUCENE-38
24546	(scoresX,
25509	FieldCache.CreationPlaceholder)
21602	Design
56125	q1.setBoost(10f);
65995	testBoostsSimple()
22803	other.upperVal
3319	iscached
25026	topfieldcollector
19165	ØØ
26038	normalizing.
51189	sub-collection
9012	Term("");
61657	uc4a1
27414	"\u0027\u0031\u002C",
67270	dir4);
17456	DocIdBitSet
25915	IndexCommit>
37250	changedcount
39694	IndexCommit:
47992	FixedBitSet(reader.maxDoc());
50641	message("setMergeScheduler
6581	publication
50169	IndexCommit.
23791	before.
39232	fieldNormExpl.getValue());
8839	before,
38246	0x8000000000001L
65458	IndexCommit,
12767	uc4b5
19199	ØØ
16842	clonedSegmentReader.deletedDocs);
62320	testNoop1()
811	tokenizer);
43174	priority;
44273	U+1D06:
66590	occupied
30748	JAVA_4
31003	FileWriter(f);
42357	tps[i].next();
56052	assertEquals(String
25855	particular
38655	doc.add(newField("unstored2","test1",
65112	doCompile="
30751	JAVA_5
53250	input/output
56026	FormatPostingsPositionsConsumer
62174	MultiReader(reader1,
17450	refer
15655	delGen++;
24844	(!allowDups)
60709	"\1\u034e\12\u02e2\175\0\1\u034d\6\u0428\1\u02e2\5\u0428\3\u02e2"+
18996	urls);
33015	lastoffsets
58964	MMapDirectory(_TestUtil.getTempDir("testCloneSafety"));
31544	Integer.valueOf(id),
31052	writer.newestSegment();
8201	clone.isClone
44271	U+1D05:
32335	makeLockCount
41062	pair.input.length)
57866	NIOFSIndexInput
55195	(term1==null)
22245	array.length)
48456	LimitTokenCountFilter(
10786	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\16\264"+
27351	"\u002C\u0308\u005F",
48253	Set<byte[]>
19115	basetokenstreamtestcase
17234	fieldsReaderOrig
16464	Reading
64957	parameterized
44466	U+1D08:
57272	nextSetBit(int
4737	maxBufferedDeleteTerms
23162	SetBasedFieldSelector(ftl,
28603	amount;
65378	newoutput
52682	numPayloadsSeen
51851	toSync.setUserData(commitUserData);
43637	corekey
28602	amount)
44390	U+1D07:
57728	setMaxBufferedDocs(10).
51323	toCommit.files(directory,
15502	in-RAM
43293	LOAD.
67013	dir.openInput("out");
31071	".cfs",
53821	AbstractSet#keySet()'s
26188	while(currentMaxValue
52719	"work"));
19886	s.getIndexReader().getSequentialSubReaders();
31087	positions.doc());
9370	"\15\132\1\0\4\132\3\133\13\0\22\132\3\133\13\0\22\132\2\133"+
28664	termAttribute
32707	encoded);
60022	"\1\140\3\137\3\0\1\137\4\0\2\137\150\0\1\136"+
29072	mapper)
28755	1))).
61392	"\27\u02e2\1\u034e\12\u02e2\175\0\1\u034d\6\u02e2\1\u0433\23\u02e2"+
55146	term.field()
6693	<p><em>(this
23873	trackers
57715	rollback()");
67447	reader4.close();
16282	SpanQuery[]
31362	searcher.getIndexReader());
15907	getDelCount();
7403	termsHashPerThread
35945	"id"
54843	basis,
62813	grammar-based
67116	ClassicTokenizer
44792	U+1D09:
2723	totalResults,
63206	java.lang.Object#hashCode()
20889	positionincrementgap
62151	LUCENE-2617:
26110	topDocs(int,
22201	oversize(targetSize,
63023	RANGEEX_TO
40168	queue.pop();
28313	heapAdjust(i);
23882	tracker:
58553	assertFalse(CharArraySet.EMPTY_SET.contains((Object)
24869	results:
33024	AttributeSource();
23997	"24",
35910	testInclusiveCollating()
15681	delGen);
8876	Instead,
25471	cacheEntries.length)
26707	<p>Applications
27143	"\u000B\u0308\u00AD",
31387	"24")
3545	this.dir
6383	getprefixquery
32047	#setInfoStream(PrintStream)}
30911	6.8489285f,
29213	Models
65993	assertEquals("+(b:\"aa
25474	cacheEntries.length;
60491	"\175\0\1\351\26\232\1\u0372\3\232\1\352\12\232\175\0"+
28429	testCopyCharsRef()
11173	"\1\u0401\4\230\175\0\1\346\32\230\1\347\5\230\1\u03b3"+
22141	linear-time
41360	(!actual.equals(intsRef))
37473	assertEquals("just
36486	arc.nextFinalOutput
3817	source
3626	retrieve
53858	'\ud801',
63536	>>>32;
5129	(jjCanMove_2(hiByte,
52354	assertEquals(numExpected,
58342	otherbytes
16942	clonedsegmentreader
994	MockDirectoryWrapper.sync
51346	appearance
55603	assertEquals(200,
67305	reader.document(n);
40499	getClass();
45969	WYNN
14728	FieldCache
25659	CacheEntry...
8440	verifyinglockfactory
65960	assertEquals("(b:[a
60608	"\1\351\1\u03dc\31\232\1\352\12\232\175\0\1\351\32\232"+
16937	testsegmentreaderundeleteall
18520	(4,600`
42542	NumericTokenStream
65051	idx);
20528	</ol>
29356	firstSize
24206	"x"));
67665	createreadermutex
32752	charArrayDumpNIO(CharBuffer
24175	(reader);
36019	"x")),
33485	"k",
28650	testStopPositons()
16910	isreadonly
50609	(segmentInfos.size()
27215	"\u3031\u0031\u0027",
42394	assertByteArrayEquals(portion,
24065	"4.043546",
56174	constantscorerangequery
20221	user-readable
57402	setbits
48945	QueryParser.java
61368	"\174\0\1\u03a1\4\u0657\2\0\1\u0657\15\0\1\u0657\6\0"+
53931	testnewcharacterbuffer
9636	"\2\ufcb3\2\ufd56\2\ufdf9\2\ufe9c\2\uff3f\2\uffe2\3\205\3\u0128"+
19702	(++iter
7844	java.io.RandomAccessFile;
36267	outputs.getNoOutput();
43958	U+1D00:
24623	"OutOfOrderOneComparatorScoringMaxScoreCollector"
50264	PayloadProcessorProvider
14626	reserved,
7214	results,
26066	results'
35015	(scorerDoc
53486	results)
53340	java.io.RandomAccessFile.
66005	t:one^10.0)
39347	disi.nextDoc())
63839	builder.append("\ud801\udc1cabc");
60966	"\1\137\4\0\2\137\150\0\1\u0101\2\266\1\u04ec\27\266"+
63277	0x5421,
7255	results.
16678	worked");
39733	writer.getDirectory();
58619	containsall
27805	"\u0061\u0027\u2060\u0041"
24477	("nosuchfield",
64765	atLeast(1000))];
6381	termstr
59870	"\1\u016a\2\u0169\2\u016a\1\u0169\1\u016a\1\u0169\1\u0167\13\0"+
50796	dangerous
64634	bufferStart);
51951	PayloadProcessorProvider.ReaderPayloadProcessor}
34539	Partially
33198	map.get("moo"));
41455	FileOutputStream("/mnt/scratch/before.dot"));
38940	dirfile
50863	(docWriter.anyDeletions())
66458	bytePool.byteUpto
55952	refs;
52407	capabilities
50840	commit()");
2392	Hash:
60222	"\5\0\2\u021e\4\0\1\u021e\152\0\4\u0280\2\0\1\u0280"+
2986	interruptedexception
54153	newFSDirectory(_TestUtil.getTempDir("2BPostings"));
33637	testPartialMerge()
18339	DisjunctionMaxQuery(0.01f);
30709	"\1\103\153\0\2\103\11\0\1\103\115\0\2\103\6\0"+
32684	encoded2,
32668	numBytes1);
49701	JJCalls();
44129	U+1D02:
56024	FormatPostingsDocsConsumer
11461	"\14\0\1\u02cf\214\0\1\u04b4\1\u04e1\1\u04e0\2\u04b4\2\u04e0"+
44093	U+1D01:
34083	repeatingPPs(HashMap<Term,Integer>
520	numdocs
16488	testsnapshotrelease
41376	build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.10.jar
48801	tv));
38417	r3.getIndexCommit().getSegmentCount());
31763	-dir-impl
17435	indexOf(termNumbers[start+
42186	assertEquals(1234,
63548	(int)word;
9414	"\1\114\1\114\1\114\1\114\1\114\1\114\1\114\1\114\1\114\1\114"+
32600	originalStringBuf1
32610	originalStringBuf2
955	reader.maxDoc());
67906	parts)
30782	char[bufferSize],
53276	doShare)
41518	ArrayList<String>(allIDsList);
1804	this.fieldsStream
51745	merger.getAnyNonBulkMerges();
23052	mSearcher
31112	multifileoutput
68009	CharTokenizer's
51926	//System.out.println("IW.nrtIsCurrent
44213	U+1D04:
54587	ArrayUtil.mergeSort(items);
37571	occuriong
8245	eofexception
6098	assertNotSame(pl,
58582	Collections.singleton("test"));
56262	getfieldnames
55409	indexrandomiwreader
60011	"\1\u0145\2\0\1\u016d\1\u0144\1\164\3\0\2\137\150\0"+
59527	"\2\25\2\65\4\0\2\25\3\65\10\0\1\65\2\25"+
24304	(t.sortField.setMissingValue(
22993	getMultiSearcherInstance(Searcher[]
28365	heapify
66668	testErrorAfterClass()
53270	doShare;
44155	U+1D03:
16781	assertTrue(Similarity.getDefault().decodeNormValue(r1.norms("field1")[4])
5429	xfffefffffffffffel
6089	copy.term());
32674	encoded1,
36250	ints...:
64529	getinclude
60597	"\1\u03dd\3\232\1\352\12\232\175\0\1\351\1\232\1\u03de"+
12362	uc233
7960	lockFactory)
34945	Weight.
8427	lockFactory,
36870	chain));
55456	"repeated"));
3435	aborted;
22074	manipulating
33381	keepalldeletionpolicy
3472	aborted:
8404	lockFactory;
22583	attributeclass
66993	testSerializable()
15677	CHECK_DIR,
27018	"\u0001\u0031\u003A",
53462	Frequency
60216	"\1\u0275\3\u0219\3\0\1\u0219\4\0\2\u0219\150\0\65\u021b"+
15724	CHECK_DIR)
35570	i+=4;
55700	doBody(x,
6964	queries.
66036	queries5
66031	queries4
50030	entries.add(entry);
66029	queries3
66023	queries2
54016	clone.in
15646	CHECK_DIR:
6849	queries)
57613	termindex
15605	CHECK_DIR;
31131	<li>{@link
1616	always
6304	queries,
1257	"content"));
66042	queries6
66047	queries7
56183	FilterIndexReader
67679	testdeletes2
9188	queries;
62596	"production"));
45726	,"t",
54109	i+=3)
51318	pendingCommitChangeCount
61653	uc215
55969	maybepurge
22985	testemptylistsort
8804	TestJUnitRuleOrder()
42253	(AttributeImpl)
39555	ch2)
18999	("random.text.with.email.addresses.txt"),
4844	getreaderpooling
40186	current.doc();
2599	correctness
41333	(fst.getNodeCount()
35574	i+=2;
56330	MERGESORT_THRESHOLD)
19205	ØØØ
9800	"\12\153\1\0\1\136\1\151\1\136\1\0\2\152\1\137"+
40287	transactional
19039	",personB@example.com",
38995	hm.put("foo",1);
12763	uc229
60245	"\1\u028c\2\u022e\2\u028c\1\u022e\1\u028c\1\u022e\175\0\1\351"+
18470	java.io.BufferedReader;
17954	U+0698
53330	outputToString(Object
51689	suppressExceptions)
48529	Weight}
13164	uc21f
3461	aborted.
54647	super.getSummary();
51154	aborted,
50774	IndexWriterConfig#getWriteLockTimeout()}
31943	FieldCacheImpl.StopFillCacheException();
36735	BIT_ARC_HAS_FINAL_OUTPUT))
56034	PositiveIntOutputs(false);
51569	idx="
25069	testlucene2142
11861	lost).
60750	"\32\232\1\352\3\232\1\u0447\6\232\175\0\1\351\17\232"+
29290	setdocumentnumber
30259	getskipinterval
31290	testAddOldIndexes()
29793	"\1\25\24\0\1\25\1\0\1\52\7\0\2\25\2\0"+
34029	ArrayList<HashSet<PhrasePositions>>
27721	"\u0061\u003A\u0308\u0300",
4058	values
37893	ConcurrentHashMap<IdentityWeakReference,V>());
26664	Queries,
41748	testShortestPathsWFST()
8065	ensureOpen();
41351	(actual
62203	BooleanClause(new
27852	"\u0061\u002C\u3031",
708	writer);
6527	valued
7325	topDocs(int
10233	"\1\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
54369	src);
19610	suppress_method
11116	"\175\0\4\u03d6\2\0\1\u03d6\15\0\1\u03d6\6\0\12\u03d6"+
53897	assertEquals("hellow",
26153	topfielddocs
61036	"\4\0\2\137\150\0\1\u0101\32\266\1\142\11\266\1\312"+
35500	i+=8)
38809	ints2[0]);
39632	utf16result2
42867	type.hashCode();
2236	mergespecification
39631	utf16result1
21663	string.length();
17509	doc24.get("f4"));
10806	"\150\0\1\376\5\264\1\u02be\23\264\1\u02bf\1\141\12\264"+
23164	emptySet());
28416	'b',
33740	PhrasePositions.
15897	cfs;
62323	"james"));
9003	remove()
16704	dir1);
41931	numiter
41202	System.out.println("FST
40344	tf(f)*weight
21287	tested:
28315	Bubble
42754	string.length(),
66672	resulted
31470	i=0;i<fieldInfos.size();i++)
25430	Later.
1564	random.nextInt(NUMBER_OF_FIELDS)
20968	manipulation
26481	outputlength
61281	"\32\u02e2\1\u034e\1\u0613\11\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
15763	getDocStoreIsCompoundFile()
36945	newID="
42374	tp.seek(terms[1]);
7865	mapped.
58845	byte[60];
58671	dir.listAll().length);
2378	SpanTermQuery
43238	Term("content","ccc");
58648	totHits
12177	u4c68
8674	InvertedDocConsumerPerThread
42346	d.add(newField(fieldName,
17537	i=0;i<NUM_DOCS;i++)
23744	SearcherTracker
38185	bits.flip(0,upper-lower+1);
18157	docIdSetIterator.docID();
48485	this(null,
54709	lockDir;
54685	lockDir:
33066	src3.addAttribute(CharTermAttribute.class);
33423	main.writeBytes(b,
54687	lockDir)
12578	u4c5e
54776	LOCK_HELD.remove(canonicalPath);
25137	asterisk.
11970	(zzAtEOF)
15274	delegate.close();
54727	lockDir,
54534	ArrayUtil.parseInt("-10000".toCharArray());
52043	readermap
17761	getEnum(IndexReader
40191	this.tenum
8231	extra
12979	u4c54
33761	a"~4,
56569	assertEquals(last,
58262	this.bytesEquals((BytesRef)
17953	U+062F
5577	3,15);
13380	u4c4a
18195	other.filter
40003	org.apache.lucene.store.LockObtainFailedException
53753	CharArraySet(Collection<?>
51771	(mergedSegmentWarmer
17952	U+0633
34741	foo\"").toString());
28470	otherchars
38750	assertTrue(enum2.next());
9476	value;
49723	c.next;
25554	value:
41090	1)));
42392	System.arraycopy(payloadData,
23836	#acquire}.
29510	value1
40730	value2
15934	bufferedDeletesGen
39612	ArrayUtil.grow(lastTermBytes,
31024	printSegment(out,
21452	e2.getFilePointer());
43180	bottomVal;
50751	#setInfoStream
6335	BooleanClause.Occur.MUST_NOT};
6978	rangeBounds
17048	sub-Map
48665	(IndexWriter
10879	"\3\0\1\136\4\0\2\136\150\0\1\376\1\u0305\31\264"+
45658	,"st",
57649	cumulativeDiff
49185	examined.
650	ThreadLocal<Thread>
25540	valMismatchKeys.isEmpty()
5858	value.
5938	value)
24563	nDocs=10;
2691	value,
59080	"\53\0\32\2\3\0\5\2\32\0\4\3\17\0\1\11"+
49177	dateResolution);
32836	termsHashPerField.fieldState;
17069	offsets.add(info);
4156	searcher.search(q,
6109	testTokenAttributeFactory()
49774	(int[])(it.next());
2242	segmentinfo
67456	writer.addDocument(createDocument(i,
54945	waitOnGenCondition(long
39748	readers.add(reader);
60066	"\175\0\1\351\3\232\1\u01ea\26\232\1\352\12\232\175\0"+
49247	success==false
20862	analyzerMap.get(fieldName);
25416	enhancements
7875	#setMaxChunkSize}
30849	lasttrailinghighsurrogate
6290	effectively
48450	LimitTokenCountAnalyzer
60315	"\175\0\4\u02dd\2\0\1\u02dd\15\0\1\u02dd\6\0\1\u02de"+
25661	("Insanity
66552	newHash
56722	testOpenPriorSnapshot()
174	reader1.docFreq(searchTerm2));
1953	fieldsStream.writeVInt(storedCount);
35977	notcontent
56129	expected.length;
15530	clearFiles();
52323	multipleCommits)
42555	encoded",
38830	i=0;i<subs.length;i++)
60901	"\4\u04ba\2\0\1\u04ba\15\0\1\u04ba\6\0\1\u04bc\1\u04be"+
26644	LookaheadTokenFilter<LookaheadTokenFilter.Position>
44193	,"(b)",
67927	t.setPositionIncrement(firstAtPos
31196	"29.cfs",
15625	sizeInBytes(boolean
29731	"\1\25\2\0\1\25\17\0\1\25\3\0\1\25\5\0"+
52673	numPayloadsSeen,
54238	assertTrue(bits.get((-key)-1));
1000	purpose
31469	contentFieldIndex
23415	updateDoc(modifier,
64666	numPayloadsSeen)
60274	"\3\0\1\137\4\0\2\137\150\0\1\u0101\4\266\1\u02b4"+
9228	queriesIterable()
16121	couple
16410	sdp.registerSnapshotInfo(e.getKey(),
40477	availability
10594	"\12\230\175\0\1\346\27\230\1\u01e4\2\230\1\347\12\230"+
4341	termCountT);
16939	assertdeldocsrefcountequals
61465	"\12\u02e2\175\0\1\u034d\2\u02e2\1\u0698\27\u02e2\1\u034e\12\u02e2"+
30576	"\1\0\1\25\1\0\1\25\4\0\1\25\4\0\1\26"+
30834	$access
56148	assertEquals("min,min,T,T,c",
30701	"\1\65\1\0\2\25\4\0\3\25\1\0\1\25\10\0"+
50944	deleteDocuments(Query
48935	testoffsetreader
27636	"\u0061\u2060\u0308\u000B",
40177	seeking...
62493	requiredScorers.size()),
6247	BooleanClause(q,
35895	other.hashCode());
19858	caches/reuses
41375	lookup...
8624	super(source);
62967	set2.add(files2[x]);
23551	analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));
14760	this.type
9615	"\2\u91bb\2\u925e\2\u9301\2\u93a4\2\u9447\2\u94ea\2\u958d\2\u9630"+
12363	uc2d6
36750	&gt;=
2985	sleep
45503	U+1D19:
60987	"\13\0\1\u033c\226\0\1\u040f\13\0\1\u033c\160\0\1\u04fc"+
2007	Builder.Arc<T>
28833	skippointer
32087	byte[10][];
35873	allowedTerms
2938	n_threads
13165	uc2c2
45401	U+1D18:
39666	testprefixinbooleanquery
52873	INCLUDED
2611	SLOW_DOWN
20495	org.apache.lucene.collation;
22805	!this.parser.equals(other.parser)
34795	assertEquals("\"quick
33917	(!advancePP(pp2))
20485	datetime
47918	tpc.commit(this.commitData);
27230	"\u0041\u3031",
58736	"\ufffdabcd",
33484	"jj"
41257	termEnum.ord());
65875	testConjunctionTerms()
5474	xffffffffdfffffffl
11716	accepting
40268	reopensegment
45317	U+1D17:
18798	"à½à½à½¼à½",
12764	uc2cc
62428	testfromints
4452	NumericRangeQuery.newLongRange("test14",
16711	readOnly
65250	root.output);
62623	q2.add(q4,
15576	long[numNormGen];
39702	doBody(String
53044	(utf8[upto+2]&0x3f);
49941	rangeex_quoted
15059	fieldInfos.add(testDoc);
3579	count.
62622	q2.add(q3,
4172	count,
42360	(tps[j].isPayloadAvailable())
60309	"\4\0\1\u01d0\152\0\4\u02d7\2\0\1\u02d7\15\0\1\u02d7"+
53204	xd800
6770	count)
7384	populateresults
39839	initialize(SegmentReader[]
27096	"\n\u005F",
9297	2*k,
10822	"\2\u0212\4\0\1\u0212\151\0\34\u0214\12\u02d0\1\0\2\u0214"+
42936	<code>Token</code>
60417	"\1\u032b\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
50081	dataoffset
67921	Math.max(maxPos,
41891	fstreader
20365	org.apache.lucene.document;
11085	"\1\346\32\230\1\347\6\230\1\u03c1\3\230\175\0\1\346"+
9125	StoredFieldsWriter.PerDoc
26662	indices,
28718	Term("category",
2589	java.util.BitSet;
1781	indexStream;
40549	org.apache.lucene.util.fst.FST.BytesReader;
48932	testpositionreader
61654	uc2b8
48015	indices;
8692	inverteddocconsumer
11108	"\1\376\32\264\1\141\2\264\1\u03d1\7\264\1\0\3\136"+
23786	Always
30562	"\1\0\1\25\2\0\4\25\2\0\1\25\41\0\1\35"+
40684	FSTTester.InputOutput<Long>(terms[idx],
63958	TestTokenStream1();
20489	actualorder
65098	compiled,
17279	getfieldsreaderorig
58502	CharArraySet(Version.LUCENE_30,
958	(reader.isDeleted(j))
40431	compareTo(other)
60761	"\2\232\1\u0455\27\232\1\352\12\232\175\0\1\351\32\232"+
18825	ï¼´ï½ï½ï½ï½
21043	reader.deleteDocument(docId);
39796	(prior
31266	(!shouldStillBeCompressed)
32908	utf8Result);
38290	0x7fffecf,
1877	INT:
32015	b.append("'").append(getFieldName()).append("',");
43702	JustCompileSpanScorer
58532	assertFalse(setCaseSensitive.contains(string));
39044	map.put("foo",1);
33781	minimizing
38339	executeonerandomsplit
22840	inclusivelowerpoint
20833	StandardAnalyzer
56611	i=0;i<size-1;i++)
34327	similarity)
18149	similarity,
34603	similarity1
11436	"\1\u04cc\15\0\1\u04cc\6\0\12\u04cc\1\u04cd\175\0\4\u04ce"+
57939	index_extensions
67255	testReopen()
18084	similarity;
17244	counts
39027	assertEquals(val*100,
29146	tvf.seek(tvfPointer);
34608	processPayload(similarity1);
64019	INTS
22505	!name.startsWith("org.apache.solr."))
29013	docStoreOffset:
51065	spec.merges.get(i);
15471	docStoreOffset;
45225	U+1D10:
61416	"\6\0\12\u0676\1\u0658\174\0\1\u03a1\4\u0675\2\0\1\u0675"+
27280	"\u0041\u0031\u0027",
31935	NumericUtils#intToPrefixCoded(int)},
51480	sourceSegments.get(i);
24775	collectorMaxRev
28987	docStoreOffset,
62917	"_2_1."
55175	i=0;i<tv1.length;i++)
55570	newDoc.add(newField("id",
29011	docStoreOffset)
13167	uc408
64945	multithreadtermvectorsreader
41297	this.doPack
24278	SortField.SHORT
31497	Field("content",
21674	searchtext
29981	"\1\116\115\0\2\116\6\0\1\116\56\0\1\116\3\0"+
41089	prefix.length
68105	PriorityQueue<ScoreDoc>
58556	assertFalse(CharArraySet.EMPTY_SET.contains("foo".toCharArray(),0,3));
54637	setMatch(Boolean
14795	buffer.append("<short:
64879	SpanWeight(this,
66954	"<pair:"
60000	"\32\232\1\u01b0\12\232\175\0\1\351\22\232\1\u016f\7\232"+
22268	grow(char[]
40557	br.bytes[i]
9783	"\1\55\7\0\1\56\2\0\1\57\4\0\1\60\14\0"+
54305	count:
40503	(Modifier.FINAL
10062	"\13\0\1\25\21\0\14\25\2\0\2\25\5\0\3\25"+
14691	SortField(String
4034	getlength
770	count;
65650	decRef(lastFile);
735	count2
39600	lastTi.set(ti);
56407	byte_block_not_mask
43584	count1
6519	query.</p>
22429	fromindex
4582	IndexWriterConfig(TEST_VERSION_CURRENT,
10399	"\2\230\4\u016a\3\230\2\u016a\1\u0173\1\u016a\1\230\2\u016a"+
478	recreate
41356	outputs.outputToString(actual)
39090	chararraymap
64193	in.readShort();
4193	assertSame("A
17091	termvectoroffsetinfo
12176	u4bc5
45314	U+1D16:
27432	"\u0030\u0041",
32678	numBytes2);
482	searchterm
33665	writer.forceMerge(7);
16993	currentPositions;
5235	"\124\117",
66404	p1==p2
12577	u4bbb
67803	1091277
66669	runAndReturnSyserr()
42874	#setEndOffset},
45381	U+1D15:
25395	keywordmarkerfilter
54823	permanent
9684	"\5\0\3\25\1\0\1\25\10\0\1\25\2\26\2\0"+
41823	hit);
48737	sorted,
43682	searchtest
66984	searcher.doc(i);
53373	Descriptor(path,
35719	0xFF000000)
42694	doStop.set(true);
6411	read(char[]
1386	threadlocal
66822	Integer.valueOf(j++));
30281	org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper;
16449	illegal.
27577	"\u00AD\u0308\u0031\u003A",
45389	U+1D14:
63279	0x5431,
13379	u4ba7
35231	this.curPayloadLength
1201	remove",
21164	besides
10415	"\2\u016a\1\347\12\230\175\0\1\346\6\230\1\u016a\7\230"+
58458	TEST_STOP_WORDS)
19529	Error)
7540	Error.
59937	"\1\0\1\25\2\0\1\25\1\141\15\36\1\355\14\36"+
64354	(prime
12978	u4bb1
59906	"\6\u016f\1\u0181\1\232\2\u016f\2\232\2\u016f\1\232\1\u016f"+
63280	0x5432,
22834	upperval
28550	pointcut
59435	"\2\25\5\0\3\25\1\0\1\25\5\0\1\25\2\34"+
20891	offsetgap
20994	i=0;i<157;i++)
49749	t.next
14913	byteparser
22867	SpanNearPayloadCheckQuery(SpanNearQuery
35452	Delight
63012	PREFIXTERM
6421	input.reset();
40495	TokenStream(AttributeFactory
4624	getters.add("getAnalyzer");
55706	doBody(int
7837	wasCalled()
59178	"\3\u75ad\3\u7650\3\u76f3\3\u7796\3\u7839\3\u78dc\3\u797f\3\u7a22"+
56252	checkOverrideMethods(FilterIndexReader.FilterTermPositions.class);
31028	si2);
10534	"\2\u0141\1\136\2\0\1\u0169\1\u0141\1\162\3\0\1\u0141"+
54011	clone.bytesRef.incrementAndGet();
43812	assertTermEquals("a",
12178	u4d0b
22565	f.getName(),
48075	super.toString()
23423	updateDoc(IndexWriter
15044	merge(IndexWriter
52207	conflict
39432	CountingStream(IndexInput
17907	Collator
51175	HashSet<Directory>
67951	'a':
25494	HashMap<ReaderField,
54180	'a';
53273	singletonNoShare
53243	ceil
65799	DocIdBitSet(rnd);
15668	HashMap<String,
45644	,"s",
3942	termAtt.resizeBuffer(2+length);
66319	postingsCompacted
28963	cachedfieldsourceequals
51179	IllegalArgumentException("Directory
31564	checkAllSegmentsUpgraded(Directory
12579	u4d01
9750	"\1\66\24\0\1\106\1\0\1\50\1\0\1\70\2\0"+
45223	U+1D0F:
59198	"\3\udb8d\3\udc30\3\udcd3\3\udd76\3\ude19\3\udebc\3\udf5f\3\ue002"+
29010	(tvx.length()-FORMAT_SIZE)
61355	"\4\u02e2\1\u063e\5\u02e2\175\0\1\u034d\32\u02e2\1\u034e\6\u02e2"+
26561	assertTrue(fieldValue.indexOf(term.text())
51236	non-CFS
59457	"\2\270\1\140\3\137\2\0\1\174\1\137\4\0\2\137"+
38476	assertTrue(indexedFieldNames.contains("tvposition"));
13166	uc365
3763	eventually
43692	JustCompileSearchSpans
54025	owner.directory().createOutput(normFileName);
56315	swap(lo,
21750	anyopendelfiles
61655	uc35b
19099	testCombiningMarksBackwards()
16376	corrected
30535	"\16\0\1\107\2\0\1\110\42\0\1\32\7\0\1\32"+
58821	s2);
42052	hitB;
3042	1024;
3739	tokenizers.
62880	posIncr++;
54006	(SegmentNorms)
34151	hasrpts
53996	bytes();
53418	java.text.DecimalFormatSymbols;
50203	1024,
3259	1024)
23185	testNormalization(int
16440	testNoSnapshotInfos()
37713	MAX_DOCS
20011	1024.
11489	"\1\u0386\4\u04f8\2\0\1\u04f8\15\0\1\u04f8\6\0\12\u04f9"+
60658	"\1\u039b\15\0\1\u039b\6\0\1\u039c\2\u039d\1\u039c\5\u039d"+
34026	res.add(rl);
54907	writer.deleteDocuments(terms);
23709	down/up,
32085	blocks);
54292	assertEquals(offsetHash.size(),
48870	assertTrue("tve
28281	(subScorers[0].docID()
15006	'a',
38840	re-open
2464	weight
23292	contents2
23291	contents1
15960	setdiagnostics
39137	contents.
860	contents,
27038	"\r\u000B",
25197	contents)
32783	chararraydumpnio
17219	coreClosedListeners.add(listener);
39953	this.subReaders.length);
38919	getmergefactor
39928	dispatch
55028	dir2);
49548	q.setBoost(f);
21636	pattern.length()
20931	#termBuffer()}
51559	directories,
6960	NumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);
53447	decimalformatsymbols
27383	"\u0027\u0308\u3031",
56759	writer");
19527	RuntimeException)
30756	Depending
34487	IllegalArgumentException("divisor
22804	(this.parser
65249	root.output="
20390	precedence.
43400	MAX_BYTES_PER_INT
6989	min.longValue();
8157	curBuf.remaining();
65333	cycles
37982	(last!=null)
56892	"\1\4";
53031	0xc0)
14925	xff5685dd
35539	b=A[i+4],
60233	"\175\0\4\u0285\2\0\1\u0285\15\0\1\u0285\6\0\1\u0286"+
12981	u4d9a
11004	"\1\u0367\3\264\1\0\3\136\1\0\2\136\1\137\3\136"+
54429	buffer.append("<br
702	initial
6025	t.termBuffer().length);
42614	assertTrue("info.getPositions()
14814	(unless
762	failing");
63544	bitlist[(int)word
60098	"\1\u0202\7\266\1\0\3\137\1\0\2\137\1\140\3\137"+
57350	other.wlen);
10907	"\2\136\151\0\4\u0207\2\0\1\u0207\15\0\1\u0207\6\0"+
43518	doTestClearVectorOfSize(20);
66020	{"one",
31932	Double.parseDouble(value);
38156	addRange(long
65383	newDirectory(random),
2681	queryParser
5293	TokenMgrError.INVALID_LEXICAL_STATE);
17245	fieldsReader
11609	"\1\u02cf\160\0\1\u0332\4\u054e\2\0\1\u054e\15\0\1\u054e"+
27124	"\u000B\n",
11347	"\13\0\1\u0122\226\0\1\u039f\13\0\1\u0122\160\0\1\346"+
55014	indexRandomIWReader(5,
54408	sub-nodes
18796	à¼",
67170	existingOffsets.length);
40672	102);
42049	hitA,
37799	MatchAllScorer(reader,
13382	u4d90
49055	setAutoGeneratePhraseQueries(false);
66667	testErrorAfter()
51419	message("force
29196	(mapper.isIgnoringOffsets()
8453	correctly
59106	"\0\u178f\1\u5176\1\u5219\1\u52bc\1\u535f\1\u5402\1\u54a5\1\u5548"+
53905	"1234\ud801\udc1c789123\ud801\ud801\udc1c\ud801";
33924	k++)
42050	hitB)
37684	testwrappedphrase
58974	three.readVInt();
10711	"\4\0\2\136\150\0\1\u025b\32\u0206\1\u025c\12\u0206\11\0"+
10823	"\1\u026d\3\u0214\1\u0216\5\0\2\u0214\4\0\1\u0214\152\0"+
15844	(!hasSingleNormFile
66823	tmpList.add(term);
37444	doc.add(newField("repeated",
1662	atleast
32510	dir2.setFailOnOpenInput(false);
38129	assertTrue(Float.isNaN(nan));
39186	result.setDescription("weight("+getQuery()+"
12765	uc36f
6487	fail("TestException
45041	U+1D0D:
55814	didWarm.set(true);
51184	#addIndexes(Directory...)}
19582	Opens
55555	testUpdateDocument()
27940	"\u0031\u0027\u0308\u000B",
30436	martin
14867	FieldComparator.FloatComparator(numHits,
12364	uc379
17104	org.apache.lucene.index.SegmentReader.CoreClosedListener;
49710	((oldToken
41093	remove");
58636	conf.setMergeScheduler(cachedDir.getMergeScheduler());
26681	<i>all</i>
45106	U+1D0E:
5333	matchedToken
4232	testRightOpenRange(4);
35440	idtoken
56566	firstCommit
51255	merger.createCompoundFile(mergedName
44869	U+1D0B:
59701	"\6\266\1\u0107\6\266\1\u0107\4\266\1\u0107\4\266\2\u0107"+
42056	hitB.slot);
24019	String.valueOf(Byte.MIN_VALUE),
41321	"%6.2fs:
27893	"\u0031\u003A\u0308\n",
3951	surrogate
38078	NumericUtils.sortableLongToDouble(longVals[i]))==0
37771	MatchAllDocsQuery
5172	jjMoveNfa_0(0,
6243	(boost
41247	assertNull("got
55785	endTime)
38248	splitting,
29512	setproperty
39721	SegmentReader[sis.size()];
1096	OutOfMemoryError("fake
29358	(startIndex+firstSize
44831	U+1D0A:
29684	"\0\u0670\0\u06d7\0\u073e\0\u07a5\0\u080c\0\u0873\0\u08da\0\u0941"+
44938	U+1D0C:
40574	s.length();
21811	(field.name().equals(name))
49825	p.first
64040	checkReads(DataInput
8123	nrBuffers;
49286	multiTerms.clear();
21881	removefields
43546	bit-set
20288	subquery
37555	testNonExistingPhrase()
55338	buffer[end]
41218	ord++;
49801	exptokseq
67303	k*M;
53733	Iterator<String>}.
59795	"\1\325\1\326\1\327\1\137\12\266\1\0\3\137\1\0"+
33886	cyclic
23436	doTestOperationsOnDiskFull(true);
66568	postingshash
22665	inclusiveLowerPoint
56872	"\32\12\5\0\113\12\225\0\64\12\54\0\12\2\46\0\12\2\6\0"+
11714	char[ZZ_BUFFERSIZE];
33197	assertEquals("mae",
13982	u0348
13983	u0349
13978	u0344
13979	u0345
13980	u0346
13981	u0347
65652	checkpoint/commit:
13974	u0340
13975	u0341
13976	u0342
13977	u0343
60801	"\2\0\1\u0472\15\0\1\u0472\6\0\2\u0473\1\u0472\2\u0473"+
30484	fieldToTerms.put(field,
12062	u032f
26795	writer.addDocument(doc2);
13957	u032c
13956	u032b
13958	u032e
48495	declared
67724	termBuffer.length
18663	à¦à¦à¦à¦¿à¦®à¦¿à¦¡à¦¿à¦¯à¦¼à¦¾
12039	u032d
12594	u568e
63683	x76531
13955	u032a
28673	termAttribute.toString()
63684	x76532
21907	readByte();
38069	1.0E15,
3928	decrement
13967	u0339
13965	u0337
21255	expectedBuffer,
13966	u0338
13963	u0335
13964	u0336
7812	u0333
13962	u0334
13960	u0331
13961	u0332
19584	getDecodingReader(File
13959	u0330
24660	"GDHJCIEFAB");
25759	subreader
43674	day)
20135	meet
62606	T:deleting
24920	gciea
13945	u031f
11889	yytext().charAt(pos),
62964	files1.length;
13944	u031e
37847	european
13943	u031d
22056	day.
13942	u031c
12864	u031b
49036	getFieldQueryMethod
16911	deleteworked
13941	u031a
63688	x76542
63690	x76543
65366	compilealltargets
43419	sortedvintlistbuilder
36577	getFirstArc(Arc<T>
25782	slop;
63687	x76541
34755	slop:
14012	u0366
14013	u0367
670	name);
14014	u0368
6982	currentUpperBound
14015	u0369
42477	tp.freq();
42028	slot;
43189	prio.intValue();
14006	u0360
6815	this.minInclusive
14007	u0361
24969	slot1
14008	u0362
2173	name).
24970	slot2
14009	u0363
14010	u0364
14011	u0365
1507	config.setMergePolicy(mp);
13988	u034e
13987	u034d
24440	slot)
57865	name),
13989	u034f
39421	tp.freq(),
24422	slot,
33699	pass=0;pass<2;pass++)
13984	u034a
2152	outputs
13986	u034c
13985	u034b
49776	jj_expentry.length)
13997	u0357
13998	u0358
13995	u0355
41057	cmo.count++;
13996	u0356
64744	makeIndex(terms);
35919	SingleCharTokenizer(Reader
13999	u0359
35513	A[i],
13990	u0350
67826	testNumDocsLimit()
25462	CacheEntry[]
14673	Locale
13993	u0353
13994	u0354
13991	u0351
59455	"\2\0\2\174\1\67\1\0\1\65\2\0\1\25\1\267"+
13992	u0352
13973	u033f
13972	u033e
13971	u033d
49777	jj_expentry.length;
19552	SUPPRESS_METHOD
13970	u033c
52805	days
24444	fieldname,
60619	"\175\0\1\351\32\232\1\352\3\232\1\u03f7\6\232\175\0"+
13969	u033b
18631	ÜÜÜ¢Ü£Ü©Ü ÜÜ¦ÜÜÜ
13968	u033a
41638	assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW
17841	positives',
13193	ud496
67912	colonIndex
4015	attributefactory
46844	output'
41046	scratch.copyInts(pair.input);
2518	fieldinvertstate
13921	u0305
20793	output,
13920	u0304
27627	"\u0300\u0308\u0031\u002E\u2060",
15774	output)
13923	u0307
1375	stoptime
13922	u0306
13917	u0301
13916	u0300
13919	u0303
13918	u0302
4923	output.
61682	ud48c
7175	endenum
20814	output2
20813	output1
45145	U+1D70:
26431	output;
65228	output:
7796	NUM_DOCS-1,
53736	EMPTY_SET
5825	long[ENTRY_SIZE][ENTRY_SIZE
34907	broxn
42548	shift=0;
66293	perThread.intPool;
50126	#commit()}
31346	name",
68102	align
18486	"1234"
2631	double
41681	17L;
51279	newFileName;
20617	org.apache.lucene.index.IndexFileNames;
10736	"\1\u0140\1\u0141\2\0\1\76\1\136\4\0\2\136\151\0"+
30315	RuntimeException("failOnCommit");
61314	"\13\0\1\u033c\161\0\4\u0633\2\0\1\u0633\15\0\1\u0633"+
27535	"\u005F\u0308\u0031\u0027",
60751	"\1\u044b\12\232\1\352\12\232\175\0\1\351\12\232\1\u044c"+
55113	verifyEquals(Directory
16275	slop,
12995	u5684
48291	slop.
51521	(merge.info.docCount
13947	u0321
13946	u0320
13949	u0323
13948	u0322
12463	u0325
10205	"\2\264\2\u0103\2\264\1\u0103\1\264\1\141\12\264\1\0"+
13950	u0324
13952	u0327
57269	exclusive-or
13951	u0326
36779	posWrite);
13954	u0329
27511	"\u005F\u0308\u005F",
17144	(si.getUseCompoundFile())
13953	u0328
7983	completely
13940	u0319
8174	(((long)
43489	<code>TestBitVector</code>
66673	in:\n"
21174	especially
29993	StandardTokenizer.HIRAGANA;
54170	CheckIndex(dir);
25359	browN
13926	u030a
45549	U+1D72:
13927	u030b
13928	u030c
13929	u030d
67823	lmp.setMaxMergeMBForForcedMerge((min
13930	u030e
13931	u030f
18794	testTibetan()
1126	Simulate
6228	slop)
12193	u5698
864	dd",
13932	u0310
13935	u0314
13934	u0313
13933	u0312
22491	toStringMethod
13265	u0311
13939	u0318
8560	SinkTokenStream(this.cloneAttributes(),
13938	u0317
13937	u0316
13936	u0315
12017	mailto
13924	u0308
13925	u0309
63681	x76521
13396	u567a
37701	MED_PRIORITY
67806	store);
25400	brown
45425	U+1D71:
17195	(cfsReader
3709	chartermattribute
45621	U+1D74:
8012	Method
27885	"\u0061\u002C\u0308\u0031\u002C",
47186	longa
48406	ConjunctionScorer
53153	(utf8[offset+1]&0x3f));
8195	iae)
31263	incorrect",
4687	MockAnalyzer(random)).toString();
23424	modifier,
35369	DocIdBitSetIterator
5988	longs
67021	o.writeBytes(bytes,
55620	IW.deleteDocuments
45551	U+1D73:
34904	broun
40505	Modifier.isFinal(clazz.getMethod("incrementToken").getModifiers())
18584	"áá",
53128	(Math.ceil((double)
66601	mockcharfilter
55423	termdocs2
3621	readerclones
29113	tvx/tvd
50999	completes,
26582	assertTrue(false);
42559	correct",
5787	int[ENTRY_SIZE][ENTRY_SIZE
40746	InputOutput<T>
46159	U+1D76:
51013	completes.
11181	"\175\0\1\346\1\230\1\u016a\30\230\1\347\12\230\175\0"+
34554	org.apache.lucene.search.spans.SpanWeight;
35154	payloadtermqueries
20869	offsetGap
19972	long.
23765	long,
17150	this.termsIndexDivisor
54334	(o.payload
9274	"mailto:"
38146	long:
4690	modifiers
11810	I/O-Error
33837	lesser(PhrasePositions
23819	incRef
41975	commotion
37680	marketing
45709	U+1D75:
10465	"\1\65\7\0\1\65\2\0\1\25\1\0\32\25\24\0"+
58384	"such",
66437	Locate
58003	perThread.termsHashPerThread.reset(true);
67153	(entry
18879	O'Reilly,
45383	"âª"
51731	(clone.numDocs()
35833	unpatched
13641	u01e5
15319	typeAnswers[id]
13642	u01e6
60209	"\4\u01ce\2\0\1\u01ce\15\0\1\u01ce\6\0\12\u01ce\175\0"+
53046	UNI_MAX_BMP)
13639	u01e3
13640	u01e4
24298	SortField.FLOAT,
13637	u01e1
7981	<p><b>NOTE:</b>
9793	"\1\150\32\36\1\141\12\42\1\0\1\136\1\151\1\136"+
13638	u01e2
63353	0x764,
16885	IndexReader[]
13636	u01e0
16706	assertNotNull(reader2);
3367	org.apache.lucene.util.SetOnce.AlreadySetException;
2952	exceptiondoc
12060	u01e9
19839	s.search(q,null,1000);
13643	u01e7
13644	u01e8
63594	x542
22151	java-dev
13635	u01de
63593	x541
13634	u01dd
13633	u01dc
13632	u01db
13631	u01da
9919	"\3\34\10\0\1\64\2\25\2\0\1\34\6\0\1\25"+
63596	x543
14866	SortField.FLOAT:
63349	0x763,
62744	hitIDX=0;hitIDX<topHits.scoreDocs.length;hitIDX++)
43231	testSkipTo(int
7285	howMany
59411	"\4\25\1\0\1\115\1\25\1\0\1\25\4\0\3\25"+
12461	u01df
13624	u01d2
51941	met,
13625	u01d3
13626	u01d4
12862	u01d5
62136	"value2")),
63361	0x765,
13622	u01d0
41844	FST.Arc<Pair<Long,Long>>
13623	u01d1
60940	"\175\0\4\u04d9\2\0\1\u04d9\15\0\1\u04d9\6\0\12\u04d9"+
40722	FSTTester<IntsRef>(random,
44622	U+1D77:
13627	u01d6
13628	u01d7
13629	u01d8
13630	u01d9
13263	u01cb
12035	u01ca
63589	x531
13619	u01cd
43873	$output_char
13618	u01cc
63590	x532
36205	bytesPerArc;
16087	_TestUtil.getTempDir("lucene.test.atomic");
54976	trackingindexwriter
57324	numBits))
40180	mere
13621	u01cf
13620	u01ce
12390	ud407
41196	doRewrite
62358	going",
9788	"\3\0\1\136\4\0\2\136\2\0\1\67\1\0\1\50"+
57642	offsets[mid])
59285	"\1\71\2\0\1\110\3\0\1\54\2\0\1\55\3\0"+
46545	ANGLE
38338	testrandomsplit
31650	udd60ne
13663	u01fc
38802	ints.length);
13662	u01fb
38725	doc2.getFields();
67964	t3);
53637	fieldDoc.doc
13661	u01fa
63587	x521
3086	ScoreCachingCollector(Collector
13666	u01ff
13665	u01fe
8538	sink2.consumeAllTokens();
13664	u01fd
37450	doc.add(newField("palindrome",
57994	state.hasVectors
63346	0x761,
30827	IndexOutOfBoundsException("offset
13651	u01f0
13652	u01f1
13653	u01f2
13654	u01f3
40225	termDocs(readers[i]);
13655	u01f4
13656	u01f5
901	errant
13657	u01f6
43894	,"$folded",
13658	u01f7
13659	u01f8
13660	u01f9
33597	randomMap();
25535	Collection<Insanity>
16869	17.0f);
23696	NRTManager}),
2511	booleanquery
44624	U+1D79:
13646	u01eb
13645	u01ea
48923	testfieldsstorepos
19963	abstractset
13648	u01ed
22166	accidentally
13647	u01ec
65219	commonOutputPrefix);
13650	u01ef
59599	"\3\36\1\355\2\36\3\355\1\142\12\143\1\66\1\137"+
13649	u01ee
63040	7>",
34940	FilteredQuery
57494	Loads
24474	SortField.FLOAT)
63347	0x762,
13834	u02ad
13835	u02ae
13832	u02ab
11377	"\4\u04a1\2\0\1\u04a1\15\0\1\u04a1\6\0\1\u04a2\2\u04a3"+
41117	assertNotNull(cmo);
41395	(args[idx].equals("-noArcArrays"))
13833	u02ac
61589	u9955
13836	u02af
19029	"mailto",
61194	"\160\0\1\u03a1\4\u05bd\2\0\1\u05bd\15\0\1\u05bd\6\0"+
13831	u02aa
42881	newTermLength);
5307	beginLine
27408	"\u0027\u0061\u002C",
58190	lastCommit.getSegmentsFileName());
13843	u02b6
13842	u02b5
13841	u02b4
13840	u02b3
33745	match).
59379	"\1\57\2\0\1\60\4\0\1\206\14\0\1\62\4\0"+
30339	railOnRollback
13846	u02b9
42436	HashMap<String,PayloadData>();
58166	CREATE*,
13845	u02b8
13844	u02b7
7695	substring
17131	storeCFSReader;
35447	routines.
24407	parseShort(final
38499	set.iterator();
46975	stretched
13839	u02b2
13838	u02b1
13837	u02b0
13849	u02bc
37102	fst.sizeInBytes();
13850	u02bd
13851	u02be
13852	u02bf
63914	num);
41052	CountMinOutput<T>();
64499	moreInclude;
6676	Step</h3>
28057	"\u0031\u002E\u2060\u0300",
39375	inplacexor
50660	LogMergePolicy#setMaxMergeDocs(int)}
13847	u02ba
20662	list()
13848	u02bb
13857	u02c5
2067	hash(int
13856	u02c4
41498	NUM_IDS
13859	u02c7
13858	u02c6
13861	u02c9
58575	set.iterator())
55651	addDirThreads.joinThreads();
13860	u02c8
25606	seen.add(rf);
8417	lockDir
3902	favor
12046	u02c1
13853	u02c0
29393	bufferoffset
33508	String[]{"jj"},
13855	u02c3
33958	bipartite
13854	u02c2
59050	ScoringRewrite<BooleanQuery>()
51196	been.
13867	u02cf
12298	u9973
65996	boosts.put("b",
13865	u02cd
13866	u02ce
13863	u02cb
13864	u02cc
13862	u02ca
5234	"\173",
63147	savedTerms.add(termEnum.term().text());
25322	meta
15775	docCount:
13877	u02d9
13100	u995f
13876	u02d8
15432	docCount;
13875	u02d7
13874	u02d6
41842	e.getValue().b;
13873	u02d5
13872	u02d4
21476	a2.close();
13871	u02d3
13870	u02d2
66535	(bytes[offset]
13869	u02d1
13868	u02d0
50537	#getConfig}.
25011	sensitive
13882	u02de
13883	u02df
1227	docCount,
13878	u02da
13879	u02db
40522	#getAttribute(Class)},
13880	u02dc
13881	u02dd
29215	offsets[][];
12699	u9969
28577	(tokenStart
48558	endConsumer.abort();
13891	u02e7
13890	u02e6
13893	u02e9
65663	pre-incr
63199	allowing)
55320	end-1)
13892	u02e8
34729	+(bar
13887	u02e3
13886	u02e2
33127	printed
13889	u02e5
13888	u02e4
3389	necessary.
63338	0x754,
13885	u02e1
53400	file.close();
13884	u02e0
41278	termEnum.term().text(),
57219	changed...)
12791	ud3fd
46105	,"y",
62660	threadSafe
52273	ti.skipOffset;
11894	region.
32553	binaryDumpNIO(decoded),
61373	"\2\0\1\u065c\15\0\1\u065c\6\0\12\u065c\175\0\1\u03a1"+
17240	agree:
16138	testGetScores()
1377	println
28976	STORE_OFFSET_WITH_TERMVECTOR
29687	"\0\u0ce0\0\u0d47\0\u0dae\0\u0e15\0\u0e7c\0\u0338\0\u039f\0\u0ee3"+
24959	parsedouble
11863	Internal
33061	assertEquals("FlagsAttribute
61	agreed
55611	r1.document(5);
25929	oninit
26546	assertTrue(notIndexedFieldNames.size()
54787	IndexWriter.unlock(),
461	test_version_current
11007	"\32\264\1\141\1\u037a\11\264\1\0\3\136\1\0\2\136"+
46775	,"??",
47834	?
33556	String[]{"i","i","jj","kkk","llll","cc","b","a"},
47880	?
47112	?
47831	?
63866	StringReader("Tokenizer
47091	?
41841	e.getValue().a;
18438	System.err
15537	docStoreOffset
47406	?
28740	levels.
46968	?
2998	replay
28758	levels,
46923	?
47514	?
47456	?
47445	?
46992	?
4807	writer.setMergePolicy(new
47585	?
47538	?
54619	createsparserandomarray
38554	reader.deleteDocument(4);
47489	?
34179	regions
47658	?
47629	?
47639	?
5179	0x8000000L)
45747	U+1D7A:
47023	?
49826	p.arg
7277	TopDocsCollector(PriorityQueue<T>
60952	"\31\232\1\352\12\232\175\0\1\351\7\232\1\u04df\22\232"+
13192	ud3f3
4768	conf.setMergePolicy(null);
2328	MaxPayloadFunction());
7935	interrupted
52793	agrees
49687	JJCalls[]
47168	?
33951	doc.<br>
52743	hits.score(i)
47247	?
47219	?
36497	outputs.write(arc.output,
47143	?
47207	?
5915	maxPos
51647	Integer.toString(merge.segments.size()));
59157	"\3\u0ab5\3\u0b58\3\u0bfb\3\u0c9e\3\u0d41\3\u0de4\3\u0e87\3\u0f2a"+
20526	strength
29417	((prefix
18947	15},
44747	U+1D7B:
25059	cbefghiajd
13821	u02a0
981	finalI)
13822	u02a1
58432	unmodifiableSet
13827	u02a6
13828	u02a7
13829	u02a8
25053	idhfgjaebc
13830	u02a9
67748	((StringBuilder)
67404	initReader2.close();
13823	u02a2
13824	u02a3
3465	notifyAll();
6548	indexing.
13825	u02a4
13826	u02a5
6539	indexing,
37761	max_docs
29028	canReadRawDocs()
48059	lockFactory.clearLock(name);
68032	rightPos
14065	u039b
45648	,"SS",
14064	u039a
14067	u039d
5184	jjMoveStringLiteralDfa1_2(0x8000000L);
14066	u039c
14069	u039f
14068	u039e
61005	"\1\u0433\26\u02e2\1\u034e\12\u02e2\176\0\1\u02e2\1\u050c\1\u050d"+
59448	"\1\257\1\260\1\261\1\262\1\263\1\264\1\265\1\137"+
44796	U+1D7C:
28352	visitor)
11521	"\4\264\1\u0103\25\264\1\141\12\264\1\0\3\136\1\0"+
67530	refreshReader(IndexReader
25955	bottom.score
4964	18);
18397	doc1.equals("d2")
32010	setEstimatedSize(RamUsageEstimator.humanReadableUnits(size));
34385	getMaxBufferedDeleteTerms()
25696	reader+fieldname
67493	readers.size();
61681	ud3e9
24524	testMultiSort()
52807	Limitations
9231	Iterator<QueryAndLimit>()
28803	skipBuffer[level]);
45427	U+1D7D:
27770	"\u0061\u0027\u0300",
28653	sb.append(w).append("
54736	(!lockDir.mkdirs())
5285	(lexState
40866	packed);
27702	[6.0]
54550	a1);
53327	_o);
66962	nooutput2
50606	(info.getUseCompoundFile()
64658	usebuffer
3054	this.end
25591	(Object
34370	#setWriteLockTimeout(long)
1328	overflowingTokenStream);
45801	U+1D7E:
12190	u54af
3212	Collector()
61502	"\1\1\2\0\1\1\4\0\2\1\43\0\1\1\57\0"+
32945	termsHashPerField.writeVInt(1,
10550	"\1\u01ce\163\0\1\376\20\264\1\u01cf\11\264\1\141\12\264"+
66961	nooutput1
51661	CFS:
60329	"\1\0\1\51\1\0\1\52\2\0\1\205\3\0\1\54"+
305	CONTAINING
12591	u54a5
18313	match",
27937	"\u0031\u0027\n",
49907	newwildcardquery
20680	simplefsdirectory
28015	"\u0031\u002C\u0061\u0027",
32192	NoLockFactory
17941	"body",
49345	newRangeQuery(String
29698	"\1\2\1\7\1\2\1\10\3\2\1\11\5\2\1\12"+
58092	inittermvectorswriter
32948	termsHashPerField.writeVInt(0,
19755	chunkStates[endMinus1];
56241	FilterIndexReader:
28959	getcachedfieldvalues
43273	testTermDocs(2);
2640	"body";
9758	"\6\0\1\124\32\0\1\125\21\0\1\126\2\0\1\127"+
53993	orig,
15469	demand)
42738	#resizeBuffer(int)},
6388	parses
27884	"\u0061\u002C\u0031\u002C",
64680	assertEquals(upto,
14000	u035a
14001	u035b
14002	u035c
14003	u035d
14004	u035e
42189	att.clear();
14005	u035f
41877	nooutputs
60280	"\1\u0101\1\u02b9\1\u02ba\1\266\1\u02bb\20\266\1\u02bc\5\266"+
16293	optB(String
49626	jj_consume_token(RANGEEX_TO);
20012	setMaxClauseCount(int
63163	termEnum.term().text();
14022	u0370
55795	count*10;
14024	u0372
14023	u0371
6302	differs
14026	u0374
14025	u0373
16795	multiReader
14028	u0376
14027	u0375
14030	u0378
14029	u0377
14031	u0379
17816	scoringrewrite
55266	v2.size());
14016	u036a
41295	this.dirOut
14019	u036d
34301	this.openMode
14020	u036e
14017	u036b
21985	nasty
14018	u036c
14021	u036f
32848	perThread.doc
14041	u0383
14040	u0382
14039	u0381
53028	utf8[upto]&0xff;
14702	parsed
14038	u0380
14045	u0387
14044	u0386
62870	'if'
56279	slots
14043	u0385
14042	u0384
1580	(Term
14047	u0389
31311	hits",
43152	System.out.println("documents[i]
14046	u0388
5492	parser
63840	if((i
14034	u037c
14035	u037d
4073	NumericField("field8",
68161	freeBeforePos)
14036	u037e
60281	"\3\0\1\137\4\0\2\137\150\0\1\u0101\16\266\1\u02bd"+
14037	u037f
3838	dataLen
14032	u037a
14033	u037b
9046	while(pos1
49186	slow.
2911	docBase;
14054	u0390
41377	org.apache.lucene.util.fst.TestFSTs
22611	slow)
7110	encoded
35544	b=A[i+6],
14060	u0396
51212	name="
14059	u0395
14062	u0398
14061	u0397
64831	te.next();
14056	u0392
4556	equality
14055	u0391
23533	ArrayList<Integer>(NUM_DOCS);
14058	u0394
14057	u0393
43303	fieldSelections.get(field);
3214	docBase)
62788	docBase,
60068	"\27\232\1\u01eb\2\232\1\352\12\232\176\0\32\232\1\u01ec"+
11474	"\1\u04eb\31\230\1\347\12\230\175\0\1\346\26\230\1\u04ec"+
14063	u0399
20502	encodes
31781	}else
32492	differ:
14053	u038f
3883	isTokenChar((int)c);
14621	SortField
14051	u038d
14052	u038e
14049	u038b
14050	u038c
7326	topDocs(start,
14048	u038a
31770	dirImpl
23675	testapplydeletesonflush
2615	searches
1578	searcher
3582	maxSegmentCount
64414	bos.write(buf,
62774	(mergedHits.scoreDocs
6535	searched
59974	"\1\u01a1\6\0\12\u01a1\1\u0167\13\0\1\u0126\161\0\4\u0162"+
15910	s.append('?');
36924	(bottom
13730	u0240
29781	"\1\57\3\0\1\75\11\0\1\46\2\0\1\76\16\0"+
13731	u0241
13732	u0242
13733	u0243
60589	"\1\u03d8\15\0\1\u03d8\6\0\12\u03d8\1\u02ef\13\0\1\u0126"+
13734	u0244
914	assertTrue(hitError);
50267	covering
13735	u0245
13736	u0246
13737	u0247
40892	visit
13738	u0248
9313	"\1\133\7\0\1\132\1\0\1\136\2\0\1\132\5\0\27\132\1\0"+
13739	u0249
32303	assertNull("Default
32657	char[MAX_RANDOM_BINARY_LENGTH
7010	maxPrefixCoded)
13709	u022b
13708	u022a
13711	u022d
30790	IOException}.
13710	u022c
13713	u022f
13712	u022e
5607	something
61256	"\15\0\1\u05f9\6\0\12\u05f9\1\u05c0\175\0\4\u05fa\2\0"+
14787	STRING:
13716	u0232
13717	u0233
39155	allTerms.add(term);
13714	u0230
13715	u0231
52635	mp.close();
13720	u0236
13721	u0237
13718	u0234
13719	u0235
59210	"\4\u18ad\4\u1950\4\u19f3\4\u1a96\4\u1b39\4\u1bdc\4\u1c7f\4\u1d22"+
13722	u0238
13723	u0239
13693	u021a
39405	190);
37139	sourceforge
13697	u021e
10192	"\1\137\3\136\3\0\1\136\4\0\2\136\150\0\1\376"+
13696	u021d
13695	u021c
13694	u021b
22493	"toString");
17591	w1.close();
5964	packed32
56557	reqscorer
13698	u021f
13699	u0220
13700	u0221
7811	u0222
49100	fuzzyPrefixLength;
29895	"\6\0\2\25\5\0\1\25\1\0\1\25\1\0\1\25"+
13705	u0227
68047	right.end();
13706	u0228
13707	u0229
13099	u98bc
13701	u0223
13702	u0224
13703	u0225
13704	u0226
33512	test2to4()
49098	fuzzyPrefixLength.
7502	utf8Results[]
48590	docState.docWriter.setAborting();
3494	StringBuilder();
14768	STRING,
48468	InvertedDocEndConsumer
50793	anymore.</p>
13682	u020f
12698	u98c6
13681	u020e
4054	entries
17021	pos.addTerm(term,
25009	france
49102	fuzzyPrefixLength)
13678	u020b
13677	u020a
13680	u020d
49704	QueryParser(QueryParserTokenManager
13679	u020c
13683	u0210
28017	"\u0031\u002C\u0061\u0027\u2060",
54417	details.add(detail);
13684	u0211
67214	((System.currentTimeMillis()-startTime)/1000)
50993	afterwards,
13691	u0218
13692	u0219
13689	u0216
13690	u0217
42037	FieldValueHitQueue<T>
17268	termvectorsreaderorig
13687	u0214
8918	chainedfilter
13688	u0215
13685	u0212
17453	represent
13686	u0213
36546	(srcPos
38886	assertFalse(r.tryIncRef());
52708	mDirectory.close();
40593	i=0;i<br.length;i++)
7057	(actualEnum.next())
13676	u0209
12297	u98d0
56775	rwReader.close();
13669	u0202
13668	u0201
13671	u0204
29230	terms[currentPosition]
13670	u0203
60687	"\2\u0428\1\u02e2\1\u0428\1\u042d\6\u0428\4\u02e2\4\u0428\1\u02e2"+
13673	u0206
13672	u0205
13675	u0208
13674	u0207
35874	HashSet<String>(Arrays.asList(terms));
8071	"r");
10398	"\2\u016a\2\230\1\u016a\1\230\1\347\12\230\175\0\1\346"+
13667	u0200
23824	(new="
16185	"alt";
64919	t.isAlive();
18800	"à½£à½¦",
21884	getfieldables
50344	(infos
61680	ud346
64484	includeSpans.next();
25048	testsortwithscoreandmaxscoretrackingnoresults
64288	shortfieldsource
21693	TestNRTThreads
34057	res.add(new
60756	"\2\232\1\u03dc\27\232\1\352\12\232\175\0\1\351\1\232"+
13191	ud350
5887	Packed64-content.
61588	u98b2
3010	against
39215	scorer.freq();
20338	terminate
12592	u5548
66019	testStaticMethod1()
4729	conf.setSimilarity(null);
54957	referenceToRefresh.getIndexReader();
14661	FieldCache.STRING_INDEX
67093	writer.getNextMerge();
9123	StoredFieldsWriter
4220	testLeftOpenRange(4);
61186	"\2\0\1\u05b6\15\0\1\u05b6\6\0\12\u05b6\1\u05b7\175\0"+
10082	"\1\0\1\25\1\0\4\25\2\0\1\25\2\0\4\25"+
33217	othertype
24576	full.search(queryE,
17934	pad(unsignedIndexDir.minR);
12389	ud364
11955	yychar+=
12191	u5552
60440	"\1\u0342\175\0\4\u0343\2\0\1\u0343\15\0\1\u0343\6\0"+
37023	newNodeAddress[arc.target]
28510	doc.add(binaryFldCompressed);
22265	boolean[oversize(minSize,
45376	,"OO",
3745	CharTokenizer}:
49702	Reinitialise.
58825	assertEquals(utf8.length,
12790	ud35a
25326	viceversa
12993	u553e
7758	data.length]
22639	upperVal,
63986	"INVERTED
66180	hits1,
34462	getMaxThreadStates()
17920	maxRP,
32906	UnicodeUtil.UTF16toUTF8(text2,
45870	U+1D64:
38159	min>=lower
9404	"\14\0\2\133\62\132\21\133\13\0\12\134\6\0\22\133\6\132\3\0"+
22634	upperVal;
41673	rootNode
28320	scorer.docID();
35521	CSA(twosB,
55500	"f2");
42401	data.length;
25470	cacheEntries
66388	pivotBufPos,
65580	(!commit.deleted)
66181	hits2,
27752	"\u0061\u0027\u3031",
45547	U+1D63:
63992	(U+2620
13394	u5534
10363	"\42\0\1\76\1\26\6\0\1\76\3\0\1\135\1\273"+
218	earlier
8288	enabling
38206	executeOneRandomSplit(random);
66390	pivotBufPos;
53548	subSearcher(doc);
37132	arccount
59468	"\1\136\32\157\13\137\1\0\3\137\1\0\2\137\1\140"+
20949	termBuffer();
57729	setReaderPooling(false).
48341	scorerDocQueue
28065	"\u0031\u002E\u2060\u0061\u0027\u2060",
59182	"\3\u8a0d\3\u8ab0\3\u8b53\3\u8bf6\3\u8c99\3\u8d3c\3\u8ddf\3\u8e82"+
30810	(buffer.length
65892	(qtxt,
33868	initPhrasePositions()
2004	node.numArcs
7868	plenty
62725	(random.nextInt(10)
59883	"\1\u016f\2\232\1\u016f\1\352\12\232\175\0\1\351\1\u016f"+
55446	assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));
20707	data.length)
66608	where;
58798	assertEquals(b[i],
53930	testcodepointatchararrayintint
44794	U+1D62:
43159	(vals.length
67524	this.task
18071	(rewritten
6080	t.setTermBuffer("hello3".toCharArray(),
63602	x621
54052	Time");
34521	readerpooling
54050	testExactCase()
22809	lowerVal.hashCode()
50689	message("setReaderTermsIndexDivisor
18494	URLFilter
66623	where)
23868	thread-safe
6995	Long.MAX_VALUE)
10255	"\1\141\12\330\1\0\1\136\1\151\1\136\1\0\2\152"+
51024	isMaxNumSegments:
31550	Long.MAX_VALUE,
60005	"\1\u0145\2\0\1\u016c\1\u0143\1\164\3\0\1\u0143\1\137"+
61422	"\13\0\1\u033c\160\0\1\u03a1\4\u0678\2\0\1\u0678\15\0"+
37039	writer.writeVInt(absPtr);
30745	unified
35512	CSA(twosA,
64255	Type("byte");
55776	1000.*SECONDS);
22744	Long.MAX_VALUE;
19422	[field="
46184	"âª"
24903	u00e9
48585	valueLength);
32299	setLockFactory
39809	(oldReaders[oldReaderIndex.intValue()]
40073	getCommitUserData()
42986	java.util.concurrent.Semaphore;
56774	176;
65800	(validate)
15879	looks
18536	Õ¢Õ¡ÖÕ¥Õ¬
29175	ArrayUtil.grow(charBuffer,
59166	"\3\u388d\3\u3930\3\u39d3\3\u3a76\3\u3b19\3\u3bbc\3\u3c5f\3\u3d02"+
41022	(pairs.get(upto).input.compareTo(t)
63611	x643
8246	randomaccessfile
63609	x642
63608	x641
56257	filterindexreader
17524	exptected
48704	"1.0")
24003	"1.0",
61073	"\14\0\1\u02e1\160\0\1\u034d\12\u02e2\1\u0428\17\u02e2\1\u034e"+
64326	col);
52464	typeAtt.setType((shift
1040	"deleteFile".equals(trace[i].getMethodName()))
66245	rnd,
56857	"\1\0\20\12\46\0\2\12\4\0\12\2\25\0\22\12\3\0\30\12"+
42724	tokenattributes}
24284	SortField.LONG
63605	x632
53607	docs.scoreDocs;
63604	x631
24498	TimeUnit.MILLISECONDS);
48509	UnsupportedOperationException(this
37164	version_short_byte2_labels
605	id);
5965	packed64
58963	mmapDir
22887	(Arrays.equals(candBytes,
38891	IncThread[]
51071	expungeDeletes()
59261	"\7\0\1\32\17\0\1\32\6\0\1\32\122\0\1\32"+
3125	smaller
1416	fieldname
19640	this.offset
36630	follow.isFinal());
48970	TermRangeQuery}s,
64165	u00bf
51626	testPoint("startMergeInit");
38712	assertSame(norms1,
7552	various
37650	f.setValue(sb.toString());
67943	t2);
51233	IndexReader}.
40161	matchingSegments[0]
45936	U+1D65:
64757	testZeroTerms()
57044	<td>1.99</td>
6797	dataType,
21195	termsfilter
25024	maxscore
3915	LUCENE
40952	seekFloor
6810	dataType;
28169	u00ad
27693	"\u0061\u003A\r",
11777	UAX29URLEmailTokenizer.EMAIL;
63617	x652
63616	x651
63623	x654
63619	x653
13586	u01aa
13587	u01ab
10535	"\1\136\150\0\1\135\4\u01af\2\136\1\u01af\15\136\1\u01af"+
11312	"\226\0\1\u0385\13\0\1\u0325\214\0\1\u046e\2\u046f\1\u046e"+
26937	(LF)
40507	final";
6049	'l',
704	writer.commit();
13590	u01ae
27990	"\u0031\u002C\u0308\u000B",
13591	u01af
26702	Low-level
35562	loop:
13588	u01ac
13589	u01ad
13595	u01b3
13594	u01b2
7306	pq.size();
13593	u01b1
36835	br.bytes[br.length-1]
13592	u01b0
39669	testprefixquery
58506	setIngoreCase
67776	'l';
13601	u01b9
26857	#endOffset()*/
13600	u01b8
13599	u01b7
2755	"Timeout
13598	u01b6
13597	u01b5
13596	u01b4
13602	u01ba
13603	u01bb
13604	u01bc
62755	subHits;
35728	0x80000000)
52604	BooleanQuery(coordDisabled);
13605	u01bd
13606	u01be
13607	u01bf
13610	u01c2
35464	0x3333333333333333L)
48805	j=0;j<5;j++)
13609	u01c1
13612	u01c4
13611	u01c3
13608	u01c0
13617	u01c9
67973	t1);
5278	0x80000000;
2823	maxTimeStr(multiThreaded));
35725	y<<=4;
13614	u01c6
13613	u01c5
28123	"\u0061\u2060\u0062\u2060\u00AD\u2060\u0062\u2060\u0079\u2060\u2060"
13616	u01c8
2241	findforceddeletesmerges
36827	BytesRef()));
58240	UnicodeUtil.UTF16toUTF8(text,
13615	u01c7
10045	"\1\25\1\0\1\25\117\0\1\25\13\0\1\25\21\0"+
31574	getNumberOfSegments(Directory
54590	items[i];
13392	u53ee
46493	,"(16)",
36271	inCounts
12991	u53f8
67824	conf.setMergePolicy(lmp);
7312	pq.size())
31653	udc17cd
7301	pq.size().
23418	testDeleteAllRollback()
7313	pq.size(),
52402	testregularmerges
50676	LimitTokenCountAnalyzer}
23912	ArrayList<SearcherTracker>(searchers.values());
13576	u01a0
13578	u01a2
13577	u01a1
13580	u01a4
13579	u01a3
13582	u01a6
13581	u01a5
13584	u01a8
13583	u01a7
39219	fieldExpl.addDetail(idfExpl);
42535	hasmaybepayload
13585	u01a9
6856	newLongRange(final
67920	part2;
15840	IndexFileNames.SEPARATE_NORMS_EXTENSION
26822	CharBlockPool(DocumentsWriter
46176	,"z",
64368	doccountcutoff
6281	part2,
27529	"\u005F\u0308\u0061\u002C",
36361	posSave)/2;
17393	testrandom
32367	testramdirectorynolocking
39305	postingsfreqs
47985	this.docs
62741	hits="
15535	src.preLockless;
8085	curBufIndex;
11248	"\1\0\2\u03f1\2\0\1\u03f1\1\0\1\u03f1\175\0\34\u0214"+
6280	part1,
58644	(random.nextInt(20)
50387	Thread.holdsLock(IndexWriter.this);
59078	"\1\7\1\10\1\1\4\2\3\3\3\1\15\0\1\2"+
49899	hour_of_day
8175	curBufIndex)
41874	bytesreffstenum
31262	assertEquals("size
35720	y<<=8;
793	w.doFail
9785	"\1\0\1\65\1\0\1\65\1\66\1\0\1\25\2\0"+
42192	att.getFlags()));
9527	"\0\ud2c1\0\ud364\0\ud407\0\ud4aa\0\ud54d\0\ud5f0\0\ud693\0\ud736"+
61033	"\175\0\1\u0101\32\266\1\142\11\266\1\u0530\1\0\3\137"+
56783	reader.deleteDocument(3);
16011	Update
55693	launchThreads(final
30548	"\2\25\1\0\3\25\1\0\4\25\1\0\5\25\1\52"+
21595	********************************************/
55483	"term1"));
31202	"32.cfs",
50804	seconds),
60857	"\175\0\1\351\6\232\1\u017a\23\232\1\352\12\232\175\0"+
10435	"\1\u013f\1\u0140\1\u0141\3\0\1\136\1\162\3\0\2\136"+
9467	result);
26801	searcher.search(sfq,
56117	q1.setBoost(.1f);
11959	zzState
40910	t.input),
21381	i<2000;
18235	TestRankingSimilarity
57643	diffs[mid];
38524	assertNotNull(fields);
29938	"\11\25\2\0\1\25\4\0\1\25\4\0\6\25\2\0"+
20078	BooleanWeight(Searcher
22426	quicksorts
32579	decoded[]
1521	directory.fileLength(segmentFileName);
2876	doTestTimeout(true,true);
6210	body:term2^10.0)
18159	wrapCollector(final
20105	shouldMatchCount
13820	u029f
11663	"\1\u0542\13\0\1\u0325\226\0\1\u0549\175\0\4\u04e0\2\0"+
13817	u029c
13816	u029b
65562	getLastSegmentInfos()
13819	u029e
13818	u029d
17809	numberofterms
34300	openMode)
42893	prototype
63091	TOKEN_LEN
7413	DocumentsWriter.DocWriter
36799	DataInput..
32765	testindexablebinarystringtools
1488	config
52559	<b>top-level</b>
52104	compression
37175	end_label
43263	assertTrue(tdocs.skipTo(40));
44175	U+1D6C:
24185	sb.append(new
25421	IndexReaders.
41758	outputs.newPair(17L,
29220	termFreqs
61679	ud2a3
60439	"\175\0\4\u0341\2\0\1\u0341\15\0\1\u0341\6\0\12\u0341"+
55069	w.setMergeFactor(10);
20628	secondaryDir.setCheckIndexOnClose(false);
29611	"\3\0\14\133\4\0\14\133\12\0\12\134\36\142\2\0\5\142\13\0"+
67017	files[i].delete();
54552	ArrayUtil.quickSort(a1,
58525	assertFalse(copyCaseSens.contains(string));
29944	"\1\25\1\0\1\25\103\0\2\54\6\0\1\54\56\0"+
36749	&lt;=
22225	RamUsageEstimator.NUM_BYTES_SHORT)];
30605	"\1\0\1\102\1\0\2\25\4\0\3\25\1\0\1\25"+
43324	compressing
61454	"\175\0\1\u034d\30\u02e2\1\u0690\1\u02e2\1\u034e\12\u02e2\175\0"+
63970	testtokenstreams
58889	Access
15038	Hence
40911	t.input);
44308	U+1D6D:
11264	"\175\0\1\346\6\230\1\u0175\23\230\1\347\12\230\175\0"+
27523	"\u005F\u0308\u0061"
13785	u027a
13787	u027c
13786	u027b
13789	u027e
20126	r.addDetail(e);
13788	u027d
27865	"\u0061\u002C\u0308\u005F",
13790	u027f
30470	Comparator
24088	first/last
11780	yychar()
12789	ud2b7
13806	u0291
13805	u0290
55002	junit.framework.Assert;
13807	u0292
7828	testlazyalsoworks
13808	u0293
13809	u0294
13810	u0295
13811	u0296
59626	"\2\0\1\25\1\141\1\355\1\36\6\355\1\377\1\36"+
22602	<p>{@code
13812	u0297
60816	"\1\u0349\4\u047d\2\0\1\u047d\15\0\1\u047d\6\0\12\u0480"+
13813	u0298
13814	u0299
28208	non-<code>null</code>
49057	org.apache.lucene.search.Query}.
13802	u028d
12061	u028c
13801	u028b
13800	u028a
10731	"\12\u026f\13\0\1\u0217\13\0\1\67\1\0\1\50\1\0"+
13804	u028f
12388	ud2c1
23512	harmless
13803	u028e
30174	termsCache.get(cacheKey);
5258	jjstateSet
25925	onCommit(List<?
13190	ud2ad
1094	thrown.size())
43208	testTermDocs(1);
36875	arcAndState.chain.length);
51536	segmentInfos.applyMergeChanges(merge,
65685	deleteNewFiles(Collection<String>
63967	testtokenstream1
1994	this.fst
45906	U+1D6B:
65467	completed.
63968	testtokenstream2
20649	newFSSwitchDirectory(Set<String>
23734	completed,
24002	"2147483647",
13815	u029a
63969	testtokenstream3
34250	openMode;
10962	"\5\230\1\u035a\24\230\1\347\12\230\175\0\1\346\10\230"+
13761	u025f
35418	Simply
52089	waitformerges
33628	testfinaloffsetspecialcase
13757	u025b
13758	u025c
18605	2008.",
13759	u025d
13760	u025e
47009	insular
13756	u025a
42294	payload.copyTo(target,
30221	(ti1.freqPointer
13784	u0279
54731	lockExists()
12863	u0278
13781	u0275
62408	testsimple2
13780	u0274
62407	testsimple1
13783	u0277
13782	u0276
5366	error_line,
13777	u0271
13776	u0270
13779	u0273
13778	u0272
5966	packedints
13791	u0280
33639	numDocs=10;numDocs<500;numDocs
7946	UNMAP_SUPPORTED;
50832	flush(waitForMerges,
24090	"4.0",
13264	u026e
13775	u026f
12037	u026c
13774	u026d
13772	u026a
13773	u026b
8335	Simple
48957	<code>+</code>/<code>-</code>
13799	u0289
40790	arcs.add(new
13798	u0288
58181	Snapshots
13797	u0287
13796	u0286
2936	multi_thread_slack
13795	u0285
40002	StaleReaderException
13794	u0284
13793	u0283
12462	u0282
13792	u0281
13727	u023d
13728	u023e
11539	"\175\0\4\u0519\2\0\1\u0519\15\0\1\u0519\6\0\1\u051a"+
13729	u023f
59014	100));
35730	y<<=1;
5274	0x80000001;
57400	openbitsetiterator
54600	ArrayUtil.quickSort(a);
21734	getCurrentSearcher()
11745	South
13724	u023a
13725	u023b
13726	u023c
13753	u0257
13752	u0256
51301	#commit(Map)}
13755	u0259
62210	hits.add(new
13754	u0258
23045	VITAL
44532	U+1D6E:
6680	mean
13747	u0251
13746	u0250
13749	u0253
13748	u0252
13751	u0255
13750	u0254
60217	"\1\u027a\1\u021b\1\u027b\1\0\2\u021b\150\0\46\u021c\1\u021e"+
13744	u024e
35727	y<<=2;
13745	u024f
67091	SerialMergeScheduler
61103	"\12\232\175\0\1\351\3\232\1\u0572\26\232\1\352\12\232"+
54591	(act.order
3910	isTokenChar(int)");
13742	u024c
13743	u024d
13740	u024a
30761	NullPointerException
13741	u024b
12992	u549b
31443	sb.append(alphabet[c-'0']);
13771	u0269
13770	u0268
13769	u0267
1601	random.nextInt(size);
30876	IndexableBinaryStringTools.encode(collationKey,
8649	sinktokenstream
45068	U+1D6F:
53450	testmultivaluednrq
13764	u0262
13763	u0261
13762	u0260
13768	u0266
13767	u0265
13766	u0264
64952	NoOutputs.
13765	u0263
19067	"è±",
61297	"\175\0\1\u034d\32\u02e2\1\u034e\11\u02e2\1\u0624\175\0\1\u034d"+
14466	u0539
34632	#score()
14454	u052d
33818	bits.set(k);
24287	SortField.FLOAT
14455	u052e
9036	output.close();
41854	minPairWeightComparator));
14456	u052f
14451	u052a
14452	u052b
14453	u052c
33710	org.apache.lucene.util.OpenBitSet;
14474	u0541
14473	u0540
7545	Increment
14480	u0547
14479	u0546
16305	reqB(Query
14482	u0549
28946	this.parser==null
14481	u0548
14476	u0543
14475	u0542
14478	u0545
14477	u0544
14449	u0528
14450	u0529
15331	doc.getFieldable("nf");
14439	u051e
14440	u051f
28922	org.apache.lucene.index.IndexReader)
14437	u051c
14438	u051d
14435	u051a
1913	fieldsStream.writeLong(n.longValue());
14436	u051b
28910	FieldCacheSource
64699	makeIndex(String...
14457	u0530
59969	"\160\0\1\u0168\4\u019c\2\0\1\u019c\15\0\1\u019c\6\0"+
20590	project
67731	termBuffer[index];
11486	"\161\0\4\u04f8\2\0\1\u04f8\15\0\1\u04f8\6\0\12\u04f8"+
63882	fail("version
33168	TestAttributeImpl
2259	org.apache.lucene.index.IndexReader;
14465	u0538
14464	u0537
14463	u0536
14462	u0535
14461	u0534
14460	u0533
14459	u0532
14458	u0531
4960	16);
62726	randomSortFields
53990	origNorm,
14483	u054a
14484	u054b
11773	UAX29URLEmailTokenizer.KATAKANA;
14485	u054c
48434	minimumnrmatchers
14486	u054d
59417	"\2\0\4\115\2\0\1\115\247\0\1\116\130\0\1\225"+
14487	u054e
26210	getbitspervalue
14488	u054f
49711	token).next
31785	File(path));
42591	reusablestringreader
9706	"\15\0\1\25\6\0\1\25\122\0\1\25\3\0\2\25"+
28111	SEVEN
61260	"\2\0\1\u05ff\15\0\1\u05ff\6\0\12\u0601\1\u0600\13\0"+
53989	origNorm:
14506	u0561
18276	d3.add(newField("hed",
14505	u0560
65374	setlastoutput
14508	u0563
53951	origNorm;
14507	u0562
14510	u0565
14509	u0564
14512	u0567
16422	snapshots
14511	u0566
1262	testUpdateDocsNonAbortingException()
61825	u0569
58730	adddocs
14513	u0568
41400	System.err.println("Unrecognized
12387	ud21e
36002	newStaticFilterB()
14469	u053c
14470	u053d
14467	u053a
14468	u053b
10611	"\2\136\150\0\1\376\7\264\1\u01f1\22\264\1\141\12\264"+
34628	getPayloadScore()
14471	u053e
14472	u053f
68114	top.doc
37760	testrun
14491	u0552
55919	WeakReference<T>
14490	u0551
14489	u0550
26733	org.apache.lucene.document.LoadFirstFieldSelector
14495	u0556
14494	u0555
58246	bytesEquals(BytesRef
14493	u0554
14492	u0553
26780	other.start
66977	RAMDirectory(dir));
19010	emails.length
14498	u0559
14497	u0558
7894	collects
14496	u0557
37445	part",
67494	(numReaders
61830	u056e
61829	u056d
60514	"\1\u0387\17\266\1\142\12\266\1\0\3\137\1\0\2\137"+
61831	u056f
61826	u056a
15003	Term[depth];
61828	u056c
61827	u056b
49943	rangeex_end
15664	si.delCount
7396	termsHashPerThread;
42735	#append(CharSequence)}
39743	infos.info(i);
36790	byteCount);
61854	u0586
61855	u0587
34965	(docIdSetIterator.advance(i)
61856	u0588
61857	u0589
8785	org.junit.Before;
61850	u0582
61851	u0583
21257	readLen;
61852	u0584
23248	searcher1.close();
61853	u0585
25652	readerKey.toString()
61848	u0580
61849	u0581
26292	15L)
61590	u99f8
16123	++idx;
67413	parallelReader1.add(reader1);
14504	u055f
14503	u055e
14502	u055d
14501	u055c
14500	u055b
14499	u055a
18310	r.document(ds.docID()).get("id"));
19211	ÏÏÏ?ÏµÏÏ
57980	termsHashPerThread)
61841	u0579
61839	u0577
61840	u0578
61837	u0575
37656	r.nextInt(doc.size()-numTerm);
61838	u0576
61835	u0573
37016	targetHasArcs(arc)
61836	u0574
61833	u0571
49287	multiTerms.add(new
61834	u0572
61832	u0570
7490	termsHashPerThread,
39783	infos.info(i),
26062	collect.
61863	u058f
59856	"\1\u011b\32\36\1\142\2\u011c\1\333\2\u011c\2\333\1\u011c"+
42539	4573245871874382L;
61858	u058a
21463	a1.seek(1910);
61860	u058c
61859	u058b
61862	u058e
61861	u058d
20641	files.length;
31976	#getDocsWithField}
35831	rdout
64316	docCountCutoff
18846	incorrectly
61847	u057f
61846	u057e
23284	msearcher
30903	5.383931f,
18413	assertEquals("doc0
57685	Direct64(long[]
18419	assertEquals("doc3
63954	assertion",
18415	assertEquals("doc1
18417	assertEquals("doc2
61845	u057d
61844	u057c
61843	u057b
61842	u057a
61872	u0599
41613	out.add(seq);
61870	u0597
61871	u0598
61865	u0591
61866	u0592
7216	org.apache.lucene.index.IndexReader}
61864	u0590
61868	u0595
61869	u0596
61751	u0593
61867	u0594
49953	x300
48702	"1.1")
2724	createTimedCollector(MyHitCollector
26364	CODING_CASES[caseNum].numBytes
7508	doc.reset();
26001	super.setScorer(scorer);
36116	reusable
60845	"\175\0\4\u0491\2\0\1\u0491\15\0\1\u0491\6\0\1\u0492"+
49020	MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;
8670	cachedstates
16514	Those
24443	newComparator(String
42841	t.payload
16614	Still
32999	sortpostings
60358	"\5\u02f5\1\u02f6\175\0\1\u028b\242\0\1\u028b\33\0\2\u028c"+
9417	"\21\122\2\62\7\72\1\71\7\72\7\47\1\21\1\47\1\75\2\35"+
7997	this.useUnmapHack=useUnmapHack;
50226	HashMap<SegmentInfo,Boolean>();
59241	"\11\0\1\25\3\0\1\25\5\0\3\25\5\0\3\25"+
26190	getSize(bpv));
26619	writedoc
35913	"\u0633\u0627\u0628"});
62171	iw2.addDocument(doc2);
51741	matchedCount="
10532	"\3\0\1\136\4\0\2\136\150\0\51\u0168\1\u01a1\3\0"+
68074	Packed64}
18451	testskiptofirsttimemiss
32302	SimpleFSDirectory(dirName);
42941	TOKEN_ATTRIBUTE_FACTORY
58284	getUTF8SortedAsUnicodeComparator()
41081	scratch.ints,
61046	"\6\0\12\u0538\1\u0539\175\0\4\u053a\2\0\1\u053a\15\0"+
51574	handleMergeException(t,
18606	"Ø§ÙÙÙÙÙ",
66053	{BooleanClause.Occur.MUST,
25052	idhfgjabec
18790	àºàº°àºàº²àºàº»àºàº¥àº²àº§",
24527	runMultiSorts(searcher,
25747	getfieldname
56438	w.getSegmentCount());
52776	dotestbooleanquerywithspanqueries
66363	sortPostings()
61419	"\2\u0675\1\u0676\1\u0675\1\u0676\1\u0658\175\0\4\u0677\2\0"+
5524	orig_byteToFloat(byte
50855	#numDocs
57334	thisArr[idx]
23937	putifabsent
15556	setDiagnostics(Map<String,
10902	"\32\264\1\141\6\264\1\u031a\3\264\1\0\3\136\1\0"+
48197	Advance
57056	<td>2.50</td>
26256	CodingCase(
15727	rewritten
108	void
65148	(DEBUG)
17055	List<TermVectorOffsetInfo>
41427	(storeOrds)
51616	conflicting
1589	searcher.close();
58725	repeatingtokenstream
19982	flags);
10768	"\7\230\1\u0293\5\230\1\u0294\14\230\1\347\12\230\175\0"+
54190	TestBytesRefHash
12867	u0504
16169	themselves)
14416	u0505
14414	u0502
14415	u0503
14412	u0500
8008	ByteBuffer
35441	myparserconstants
14731	this.parser
14413	u0501
25141	"metals"});
16489	snapshot0
26553	testTerms()
52556	themselves.
43462	SpanFirstQuery(A,
738	count2);
12788	ud214
3167	"CachingCollector
13399	u5863
52475	fullprecnumeric
66113	ramDir.close();
27165	"\u3031\u0308\u0001",
27298	"\u003A\u003A",
10314	"\1\25\2\0\1\25\1\u013d\23\36\1\352\6\36\1\141"+
13189	ud20a
1447	segmentsfilename
7257	TopDocs(0,
27204	"\u3031\u0308\u0061\u2060",
42390	tp.getPayload(verifyPayloadData,
53977	bytesOut,
41888	uptotwopositiveintoutputs
12597	u5877
52985	bytesOut.
55049	indexRandom(nThreads,
21920	this("anonymous
61678	ud200
10001	"\1\72\7\0\1\56\2\0\1\57\4\0\1\73\14\0"+
10805	"\1\376\32\264\1\141\4\264\1\u02bd\5\264\1\0\3\136"+
7799	NUM_DOCS/2,
5640	Float.intBitsToFloat(i);
18224	firstdocid
19271	¼¼¼¼
54901	writer.updateDocument(t,
14443	u0522
14444	u0523
14441	u0520
14442	u0521
14447	u0526
14448	u0527
14445	u0524
14446	u0525
60565	"\1\u0344\2\u0345\1\u0344\5\u0345\1\u0346\231\0\1\u03b1\2\u03b2"+
37880	ReferenceQueue<Object>
14425	u050f
36373	save(DataOutput
61430	"\12\u02e2\175\0\1\u034d\1\u067d\31\u02e2\1\u034e\12\u02e2\175\0"+
51524	started),
12196	u5881
42873	#setStartOffset},
14421	u050a
31882	FieldCache#getShorts(IndexReader,
27437	"\u0030\u0308\u003A",
36395	out.writeVInt(arcWithOutputCount);
37329	stopSet;
12466	u050e
14424	u050d
11950	zzRowMapL
35315	while(it.hasNext())
14600	zzaction
14423	u050c
14422	u050b
54091	stopSet0
58518	assertEquals(setIngoreCase.size(),
54093	stopSet1
14434	u0519
12065	u0518
14433	u0517
12998	u586d
50049	Pre-allocate
34014	repetition:
58691	percentDocs,
14426	u0510
35751	x0f0f0f0f
14427	u0511
14428	u0512
58699	percentDocs)
14429	u0513
14430	u0514
14431	u0515
2301	Payload(payloadMultiField2));
14432	u0516
58956	MultiMMapIndexInput
24607	assertTrue(Float.isNaN(td.getMaxScore()));
19634	posLimit;
2990	org.apache.lucene.util.RamUsageEstimator;
26018	comparators.length;
4702	-1);
58688	percentDocs;
14418	u0507
19930	testcachingbyte
14417	u0506
14420	u0509
14419	u0508
6641	matched
20991	157;
14333	u04b0
4860	getreturntype
14336	u04b3
28298	scoreAll(int
14337	u04b4
14334	u04b1
14335	u04b2
14340	u04b7
14341	u04b8
14338	u04b5
14339	u04b6
64497	excludeSpans.start())
2415	matches
62483	matcher
14342	u04b9
14329	u04ac
52523	assertEquals("field2:fox",
14328	u04ab
14327	u04aa
25799	clause.getField();
14332	u04af
14331	u04ae
14330	u04ad
14349	u04c0
14350	u04c1
14351	u04c2
14352	u04c3
14353	u04c4
54831	SearcherManager
21938	intermediate
14354	u04c5
20132	sumExpl.setValue(0.0f);
14355	u04c6
14356	u04c7
41849	Util.MinResult<Pair<Long,Long>>(Util.toIntsRef(new
14357	u04c8
33715	repetitions
55624	id50
14358	u04c9
51674	diagnostics.put("java.version",
23173	indexSearcher2.close();
32306	NIOFSDirectory(dirName);
14344	u04bb
14343	u04ba
66854	single-char
14346	u04bd
14345	u04bc
14348	u04bf
14347	u04be
14366	u04d1
14367	u04d2
33232	AbstractAllTermDocs
14365	u04d0
751	threads[i].join();
52031	stopmerges
62452	coordination
14374	u04d9
14372	u04d7
14373	u04d8
9222	this.gen
14370	u04d5
14371	u04d6
55575	assertTrue(r2.isCurrent());
14368	u04d3
14369	u04d4
14359	u04ca
18709	Ø¯Û
33432	#close}
60605	"\11\232\175\0\1\351\32\232\1\352\2\232\1\u0133\7\232"+
9688	"\1\25\2\0\2\25\1\0\1\25\1\0\1\25\1\0"+
58026	tvx.writeLong(tvfPosition);
57456	indexThreads.length;
55158	id1;
14364	u04cf
14363	u04ce
2545	scoredocs
46422	"âª"
14362	u04cd
14361	u04cc
41023	t.compareTo(pairs.get(upto+1).input)
14360	u04cb
15716	definitely
14381	u04e0
14382	u04e1
14383	u04e2
14384	u04e3
510	adddocument
60538	"\1\142\1\u0395\11\266\1\0\3\137\1\0\2\137\1\140"+
14389	u04e8
14390	u04e9
53175	cvtutf
14385	u04e4
14386	u04e5
14387	u04e6
31737	reorder
14388	u04e7
14376	u04db
14375	u04da
27392	"\u0027\u0030",
10167	"\4\0\2\136\2\0\1\337\3\0\1\340\2\0\1\341"+
14378	u04dd
8913	FilteredDocIdSetIterator(iterator)
14377	u04dc
40214	(current
14380	u04df
27416	"\u0027\u0031\u002E\u2060",
14379	u04de
14405	u04f8
14404	u04f7
14403	u04f6
17828	percent
14402	u04f5
60928	"\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2\1\u0428\26\u02e2\1\u034e"+
33431	#finishCommit}
59074	URL</li>
14406	u04f9
27697	"\u0061\u003A\u000B",
59725	"\1\25\1\u011b\32\36\1\142\12\u011c\1\0\1\137\1\153"+
14397	u04f0
40303	doclose
31993	getStringIndex
36404	OutputStreamDataOutput(os));
14401	u04f4
33945	identified
14400	u04f3
14399	u04f2
14398	u04f1
38299	assertIntRangeSplit(0,
14396	u04ef
43923	RING
14394	u04ed
14395	u04ee
27509	"\u005F\u0308\u0030"
62357	assertTrue("spanB
46013	,"w",
9560	"\1\u7993\1\u7a36\1\u7ad9\1\u7b7c\1\u7c1f\1\u7cc2\1\u7d65\1\u7e08"+
50134	name="deletionPolicy"></a>
14392	u04eb
11880	newState
22668	Math.max(1,
14393	u04ec
42758	source.length(),
14391	u04ea
2362	assertTrue("spans
55565	id10
26474	outputcharnum
980	iter=0;iter<NUM_ITER;iter++)
39485	isIndex;
11195	"\3\230\1\u012f\6\230\175\0\1\346\24\230\1\u0413\5\230"+
14410	u04fe
14411	u04ff
39910	(isCurrent())
67301	iwriter.addDocument(doc);
24352	lastDocId);
3907	UnsupportedOperationException("since
27533	"\u005F\u0308\u0031"
67298	i+"_"+j,
33835	pq.add(rptStack[i]);
13268	u04fa
14407	u04fb
7543	identifier
14408	u04fc
14409	u04fd
39496	isIndex)
352	Exception
56813	segments_n's
66108	mfqp.setDefaultOperator(QueryParser.Operator.AND);
238	reader1.close();
37630	(term.length()
25797	clauses.length;
9833	"\2\25\1\0\4\25\1\0\2\25\1\0\3\25\1\0"+
35189	maxtermfrequency
15863	i=0;i<allFiles.length;i++)
53024	offsets[upto];
67005	indexDir.exists())
62746	sd.doc
52127	updatependingmerges
10964	"\26\230\1\347\12\230\175\0\1\346\21\230\1\u035d\6\230"+
21085	testname
55258	i=0;i<d1.length;i++)
28218	IllegalArgumentException("At
10502	"\3\0\1\u0168\1\u0167\1\u0168\1\u0169\2\0\2\u0168\156\0"+
34273	delPolicy
63576	x321
37800	reader.norms(normsField)
18466	testbooleanoptionalwithtiebreaker
3257	((maxRAMMB
36733	(flag(flags,
40778	fstReader)
57639	offsets[hi])
35286	lastSkipFreqPointer[level]
52037	payloadprocessorprovider
30655	"\1\25\4\0\1\25\4\0\1\53\1\0\2\53\4\0"+
37959	referencequeue
67852	testmergefactor
17522	pr.add(ir);
1904	NumericField
37729	Integer.toString(j),
36797	ByteArrayDataInput...?
52612	RuntimeException("Clone
61873	u059a
61874	u059b
61875	u059c
13269	u059d
61876	u059e
61877	u059f
56855	"\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\44\0\1\12"+
57948	-8.108544f,
19931	dotestcaching
48355	currentScore
62676	ShardSearcher
57291	(63-subIndex));
30094	pairs
48867	//three
1376	currenttimemillis
31204	oldSingleSegmentNames
23651	id="
17800	Float.floatToIntBits(other.getBoost()))
52482	buf_size_int
60053	"\1\u0168\4\u01e1\2\0\1\u01e1\15\0\1\u01e1\6\0\2\u01e2"+
52349	(tp.next())
45770	"Åª"
63019	RANGEIN_END
34771	qp.setDefaultOperator(QueryParser.AND_OPERATOR);
41714	Comparator<Long>
4213	q=NumericRangeQuery.newIntRange(field,
26166	getSize(startBitsPerValue));
63182	bigordterms
31902	Byte.parseByte(value);
53908	assertTrue(instance.fill(buffer,
17734	topLevel.add(q,
61466	"\175\0\1\u034d\3\u02e2\1\u0699\26\u02e2\1\u034e\12\u02e2\175\0"+
55119	id:"
26361	CodingCase
22134	APACHE
51213	info.name;
40880	pair:
9110	testindexcommit
37379	(actualHeader
66964	pair2
59082	"\1\12\1\0\3\12\6\2\1\0\1\2\2\0\2\2"+
23987	"126",
4230	testRightOpenRange(8);
67327	index2);
66494	pair.
66963	pair1
33934	MTP,
61001	"\12\u0507\1\u047e\13\0\1\u02e1\214\0\1\u0508\2\u0509\1\u0508"+
29870	"\1\0\1\102\2\0\4\102\2\0\1\102\153\0\1\103"+
66916	pair)
17608	testincompatibleindexes
6860	NumericUtils#PRECISION_STEP_DEFAULT}
43032	#release
36770	(bytes.length
57974	docFreeList
25990	OutOfOrderOneComparatorScoringNoMaxScoreCollector
25850	clauses.hashCode();
39386	lists.
25810	in-order.*/
53560	search()
57888	otherByteBuf
29318	#nextPosition()}
34224	DEFAULT_RAM_BUFFER_SIZE_MB
29742	"\1\25\2\0\1\25\5\0\3\25\1\0\1\25\15\0"+
33706	testindexwriterforcemerge
54827	java.util.concurrent.CopyOnWriteArrayList;
59757	"\1\0\1\50\1\0\1\51\1\0\1\52\2\0\1\53"+
9114	getversion
66062	flags2,
38797	doc.add(newField("number",
9838	"\5\0\1\25\3\0\2\25\1\0\1\25\2\0\1\25"+
64434	(!decompressor.finished())
19826	"+prevID,
4222	testLeftOpenRange(2);
38531	b1.getBinaryLength());
39398	SegmentTermPositions
54867	NRTManager(TrackingIndexWriter
36463	fixedArrayStart);
40470	retrieves
8990	hasNext();
67395	{reader1,
58352	abyte
54636	getMatch()
3346	replayed
5884	retrieved
5241	"Boost",
28257	Multiplier
8599	this.captureState();
58456	testUnmodifiableSet(){
16656	negativearraysizeexception
15733	getNormFileName(int
32097	Fully
42429	b2[i])
55548	(random.nextInt(5))
14325	u04a8
43030	(!tryIncRef(ref));
15474	begin
14326	u04a9
14324	u04a7
49373	termStr.startsWith("?")))
14323	u04a6
14322	u04a5
14321	u04a4
14320	u04a3
14319	u04a2
8888	ChainedFilter.
14318	u04a1
18859	"2B",
14317	u04a0
28125	"\u0033\u2060\u0034\u2060\u002C\u2060\u0035\u2060\u0036\u2060\u0037\u2060\u002E\u2060\u0031\u2060\u0034\u2060",
7439	riw.close();
36303	idx=0;idx<nodeRefCount;idx++)
55628	id75
25892	storage
14204	u042a
25618	parent.toString(),
16651	pqtop
14205	u042b
14206	u042c
14207	u042d
14208	u042e
39209	docs");
14209	u042f
29679	"\1\7\1\10\15\0\1\2\1\0\1\2\10\0\1\3"+
25293	assertEquals(i,hits[0].doc);
35959	assert:
53549	searchables[i].explain(weight,
14230	u0444
14229	u0443
52174	cleardeletes
14232	u0446
14231	u0445
37361	BytesRef(codec);
48980	org.apache.lucene.document.DateTools.Resolution}
14234	u0448
14233	u0447
31703	lowercases",
14235	u0449
54435	un-serializable
14226	u0440
42840	deep
14228	u0442
14227	u0441
51369	segmentInfos.setUserData(pendingCommit.getUserData());
14189	u041b
14190	u041c
14188	u041a
14193	u041f
50532	mfl,
14191	u041d
29874	"\5\0\1\25\1\0\1\25\1\0\1\25\4\0\1\25"+
39364	inPlaceXor(DocIdSetIterator
14192	u041e
50518	mfl)
14203	u0429
27617	"\u0300\u0308\u0061\u0027\u2060",
62801	(fd.fields
466	forcemerge
14215	u0435
14214	u0434
14213	u0433
4950	15);
14212	u0432
10662	"\1\u0122\160\0\1\u0163\4\u0222\2\0\1\u0222\15\0\1\u0222"+
14219	u0439
14218	u0438
31654	autf8
43454	SpanTermQuery(t1),
14217	u0437
27080	"\n\n",
14216	u0436
49651	jj_scanpos
27877	"\u0061\u002C\u0308\u0061\u0027\u2060",
39892	(commit
14211	u0431
14210	u0430
51067	runningMerges.contains(merge))
52829	Reserved.
36443	FINAL_END_NODE;
14174	u040c
14175	u040d
14176	u040e
25734	idea
22008	terminfoswriter
14177	u040f
65651	decr
64229	superior
39151	idf;
14172	u040a
58641	docs.nextDoc();
14173	u040b
28619	javacc's
43511	i=0;i<bv.size();i++)
56061	false)).setMergePolicy(newLogMergePolicy()));
65351	dosharesuffix
2732	timeAllowed);
33743	distance=0
14186	u0418
18286	index.close();
14187	u0419
55569	newDoc.removeField("id");
25872	<p>Implement
58826	j=0;j<utf8.length;j++)
14200	u0426
14199	u0425
14202	u0428
14201	u0427
14196	u0422
63075	Best
20807	asserts
14195	u0421
14198	u0424
14197	u0423
3217	Create
18575	"á¨á£á",
3291	"Therefore
34429	setMaxBufferedDocs(int
14194	u0420
27709	"\u0061\u003A\u0308\u003A",
64088	RANDOM_TEST_BYTES.length);
23301	testnormalization10
3640	numsegments
30986	needs
22370	(toIndex-fromIndex));
14171	u0409
43349	builder.done();
14169	u0407
14170	u0408
36040	newStaticFilterA()
54538	1923,
14185	u0417
14184	u0416
1797	FieldsWriter(IndexOutput
14183	u0415
14182	u0414
14181	u0413
14180	u0412
23911	toClose
14179	u0411
14178	u0410
53578	allTermsArray
48375	initScorerDocQueue();
53915	assertFalse(instance.fill(buffer,
12465	u046b
14266	u046a
14268	u046d
14267	u046c
14270	u046f
14269	u046e
32079	address").
60455	"\3\u0219\1\0\2\u0219\1\u0275\3\u0219\3\0\1\u0219\4\0"+
59862	"\15\0\1\u0160\6\0\12\u0160\1\u0161\175\0\4\u0162\2\0"+
53873	fail("string
20030	isCoordDisabled()
14286	u0480
14287	u0481
14288	u0482
14289	u0483
30819	deal
48058	cleared.
14290	u0484
6167	flagsattribute
24757	expose
14291	u0485
14292	u0486
28224	colls
14293	u0487
32226	_testStressLocks(LockFactory
14294	u0488
14295	u0489
37135	dead
39099	sirgallahad
7150	classnotfoundexception
14253	u045c
14252	u045b
14251	u045a
8552	SinkTokenStream}
64551	setBufferSize(int
14256	u045f
14255	u045e
14254	u045d
26291	14L)
19156	Ø§ØØØ
14271	u0470
11881	yybegin(int
14272	u0471
14275	u0474
12064	u0475
20211	clone.clauses.set(i,
14273	u0472
14274	u0473
41195	docs.nextDoc())
65493	commitsToDelete
51072	forceMergeDeletes();
14278	u0478
14279	u0479
919	i=0;i<2;i++)
14276	u0476
14277	u0477
18047	enforce
10595	"\176\0\32\230\1\u01e5\12\230\175\0\1\346\16\230\1\u016a"+
14237	u044b
14236	u044a
10197	"\6\264\3\u0103\11\264\1\141\12\264\1\0\3\136\1\0"+
50946	"deleteDocuments(Query)");
28154	colon
33574	String[]{"a","llllllll","i"},
16983	frequency
14239	u044d
14238	u044c
14241	u044f
14240	u044e
12866	u0461
14258	u0462
14259	u0463
30594	"\2\0\1\25\2\0\1\27\37\0\1\27\1\0\2\27"+
21849	String[0];
14260	u0464
40873	(doReverseLookup)
14257	u0460
18125	Explanation
14265	u0469
27252	"\u0041\u0308\u005F",
63959	TestTokenStream2();
14261	u0465
27421	"\u0030\r",
14262	u0466
59345	"\1\0\1\71\2\0\1\110\3\0\1\54\2\0\1\55"+
14263	u0467
37452	"phrase
38762	frequence
14264	u0468
14220	u043a
33528	String[0],
61677	ud15d
26465	export
14225	u043f
4404	continue;
14224	u043e
48063	setLockFactory(LockFactory
14223	u043d
53630	j2++)
14222	u043c
7334	memory
40381	outofordertopscoredoccollector
65054	getTermCount()
14221	u043b
12787	ud171
14244	u0452
14245	u0453
13188	ud167
11902	match-all
14242	u0450
14243	u0451
53483	preparedWeight()).
29486	JUnitCore.runClasses(InAfterClass.class);
21654	continue.
7730	\u1111
14249	u0458
14250	u0459
14248	u0456
13267	u0457
14246	u0454
54043	oldref
14247	u0455
33446	getchecksum
12996	u5727
6774	complete,
41899	validoutputs
43045	complete.
64682	assertEquals(terms.get(upto),
24531	testNormalizedScores()
34746	field:foo").toString());
11204	"\3\0\1\136\4\0\2\136\150\0\1\376\25\264\1\u041b"+
50843	segString());
1458	filenamein
31485	Arrays.sort(actual);
8415	LockFactory");
9318	"\1\0\1\137\7\0\55\133\1\0\1\133\1\0\2\133\1\0\2\133"+
51596	registerMerge(MergePolicy.OneMerge
51679	diagnostics.putAll(details);
11352	"\31\230\1\347\12\230\175\0\1\346\1\u048c\31\230\1\347"+
21893	Cloneable,Closeable
31559	"trieLong");
12595	u5731
2513	spantermquery
42473	ingesters[i].start();
43666	parser.parse(queries[j]);
50802	complete;
31962	DoubleParser(){
15539	docStoreIsCompoundFile
13397	u571d
24529	searchX,
57740	150X
9482	zzUnpackRowMap();
7380	hitqueue
2863	withTimeout)
6759	facets
64547	super(resourceDesc);
63579	x421
13915	u02ff
64955	cycles).
13914	u02fe
59159	"\3\u14e5\3\u1588\3\u162b\3\u16ce\3\u1771\3\u1814\3\u18b7\3\u195a"+
13913	u02fd
65860	doConjunctions(atLeast(10000),
13912	u02fc
13911	u02fb
13910	u02fa
19487	completes
42641	PayloadHelper
28324	subScorers[lchild];
64240	Type#FLOAT}
67640	dotestreopenwithcommit
41251	fstSeekResult);
10075	"\136\0\1\25\3\0\1\25\3\0\1\25\1\77\5\0"+
65659	incRef(String
51457	merge.segments)
16567	0-based.
3066	situation
20343	150;
53255	output")!
23927	completed
2566	testnopayload
67886	posIncrAtt.setPositionIncrement(t.getPositionIncrement());
39962	starts[mid];
13899	u02ef
64020	int[COUNT];
13896	u02ec
51475	merge.segments;
13895	u02eb
67348	DirectoryReader);
13898	u02ee
13897	u02ed
62825	JFlex-constructed
13894	u02ea
59967	"\15\0\1\u019a\6\0\12\u019a\1\u019b\175\0\4\u019c\2\0"+
34397	#setMaxBufferedDeleteTerms(int)}
13907	u02f7
61391	"\1\u0663\26\u02e2\1\u034e\12\u02e2\175\0\1\u034d\2\u02e2\1\u0428"+
13908	u02f8
59473	"\41\0\2\25\1\65\1\0\1\66\1\0\1\66\1\67"+
13909	u02f9
36498	output");
13903	u02f3
25986	OneComparatorScoringNoMaxScoreCollector
13904	u02f4
13905	u02f5
13906	u02f6
2150	subsample
13900	u02f0
13901	u02f1
2714	oneHour,
35822	iw.forceMerge(1);
22260	byte[oversize(minSize,
13902	u02f2
19431	fieldcachedocidset
14163	u0401
14164	u0402
57564	termInfo.freqPointer
14162	u0400
14167	u0405
14168	u0406
9055	ramfile
55068	w.setRAMBufferSizeMB(1);
14165	u0403
14166	u0404
63096	tokensPerDoc)
53758	reusing,
58517	CharArraySet.copy(setCaseSensitive);
49333	newTermQuery(Term
6593	XML-based
25605	seen.add(kid);
25139	getIndexStore("body",
52685	minPayloadScore
33602	//System.out.println("NormalizeCharMap=");
33778	!advanceRpts(pp))
29850	"\3\0\1\27\2\0\1\27\3\0\1\27\5\0\1\27"+
38581	dir.fileExists("_0_1.s0"));
24170	num2,
54216	if(i
61442	"\22\232\1\352\12\232\176\0\4\u068a\2\0\1\u068a\15\0"+
4175	assertEquals("First
64510	rewrittenInclude
23955	searchX;
10520	"\6\230\1\347\12\230\175\0\1\u01a3\24\230\1\u01ab\5\230"+
33955	checked.
10496	"\1\u019b\6\0\12\u019f\1\u0162\13\0\1\u0122\160\0\1\u0163"+
15486	omitTermFreqAndPositions==false
48441	currentsumscore
2483	payload[0];
65915	mfqp
15453	checked;
9235	queryLimits[upto]);
57308	this.bits;
63088	tokensPerDoc;
53634	fd.fields[j]).intValue()
61291	"\175\0\1\u034d\32\u02e2\1\u034e\3\u02e2\1\u061e\6\u02e2\175\0"+
23956	searchY;
51003	all),
32300	dirName
23046	STEP:adding
12194	u573b
11328	"\1\u0391\13\0\1\u02cf\160\0\1\u047b\33\0\12\u043b\175\0"+
14093	u03b8
37446	repeatedField
14094	u03b9
18561	testAmharic()
14091	u03b6
67774	'n';
53266	other.second;
14092	u03b7
13266	u03b4
14090	u03b5
14088	u03b2
14089	u03b3
14086	u03b0
18664	à¦«à¦¾à¦à¦¨à§à¦¡à§à¦¶à¦¨
14087	u03b1
997	"org.apache.lucene.store.MockDirectoryWrapper".equals(trace[i].getClassName())
4052	org.junit.Test;
59881	"\4\232\1\u0176\5\232\1\u016f\17\232\1\352\12\232\175\0"+
14085	u03af
14084	u03ae
16918	modifyindex
14083	u03ad
63984	'n',
14082	u03ac
14081	u03ab
26572	assertTrue(positions
14080	u03aa
18333	q.add(tq("dek",
18066	null}
26394	#decode(char[],
26783	spanpositionrangequery
14107	u03c7
12464	u03c8
14108	u03c9
17101	getoffsets
14103	u03c3
60362	"\5\232\1\352\12\232\175\0\1\351\1\232\1\u02fa\30\232"+
14104	u03c4
14105	u03c5
14106	u03c6
5786	SHIFTS
37206	srcpos
14100	u03c0
14101	u03c1
14102	u03c2
9999	"\1\136\4\0\2\136\2\0\1\67\1\0\1\50\1\0"+
50562	applyDeletes,
14099	u03bf
9887	"\1\25\3\0\1\25\3\0\1\25\1\114\5\0\1\25"+
62500	counting.
14097	u03bc
27499	"\u005F\u0308\u0041"
14096	u03bb
12865	u03be
28562	counting,
14098	u03bd
31060	merger.add(r1);
50330	message("return
20652	SimpleFSDirectory(_TestUtil.getTempDir("bar"));
10302	"\1\65\1\66\1\0\1\25\2\0\1\25\1\140\27\36"+
20139	sumExpl;
14095	u03ba
959	numDel++;
27789	"\u0061\u0027\u0308\u0031\u0027",
65548	abandoned
35596	b=(A[i+2]
48046	index.<br/>
46847	desc
25412	wasteful
39538	"OK".
9150	null.
12192	u55f5
21694	ThreadedIndexingAndSearchingTestCase
2329	null,
6248	BooleanClause.Occur.SHOULD));
711	null)
38006	-1L,
67071	assertEquals(numHits,
52149	null'
27429	"\u0030\u0308\u3031",
64035	LONGS[i]
42673	11));
56916	"\1\11\2\52\1\0\1\26\4\0\2\27\1\0\1\56"+
50739	maintained.
327	null;
39895	null:
12593	u55eb
14071	u03a1
67747	StringBuilder)
14072	u03a2
14073	u03a3
14074	u03a4
18267	"d2"));
14075	u03a5
14076	u03a6
14077	u03a7
30458	pop().close();
54259	hash.get(sort[i++],
14078	u03a8
39341	Perform
56709	policy.numOnCommit);
10727	"\1\u0215\3\u0212\1\u0216\1\u0167\1\u0168\1\u0169\2\0\2\u0212"+
13187	ud0c4
14070	u03a0
12994	u55e1
36781	getBytesReader(int
53697	pageStart,
48097	dest
14079	u03a9
4305	(((double)totalTermCountT)/(num
57572	compareTo(term,
35603	b=(A[i+4]
6250	happens
55576	count(new
54039	singlenormstream
14151	u03f5
7653	Constructors
14150	u03f4
14149	u03f3
26601	reader.getTermFreqVector(0,
14148	u03f2
42138	Math.min(this.length,
14147	u03f1
30958	decreasing
14146	u03f0
12385	ud0d8
27322	"\u003A\u0031\u003A",
29579	"\3\0\2\132\3\0\3\132\3\0\14\132\4\0\5\133\3\0\3\133"+
55872	num_thread
14155	u03f9
37805	Explanation(getBoost(),"boost"));
14154	u03f8
14153	u03f7
14152	u03f6
63581	x431
14142	u03ec
63582	x432
14143	u03ed
61676	ud0ba
14140	u03ea
14141	u03eb
43011	release(oldReference);
21355	csr.openInput(segment
35059	currentBufferIndex;
26554	assertTrue(terms
46038	,"x",
14144	u03ee
14145	u03ef
22012	skiplistwriter
41213	term.text()
64763	testRandomTerms()
15098	lazyFieldNames);
50320	getReader(termInfosIndexDivisor,
32807	testencodedsortability
48256	(subSpans[subSpans.length
55613	doc5.get("indexname"));
22567	happen,
44861	,"(j)",
41186	(CodecProvider.getDefault().getDefaultFieldCodec().equals("SimpleText"))
6663	reduce
24853	(random.nextInt(40)
40421	happen.
14157	u03fb
14158	u03fc
14159	u03fd
14160	u03fe
12786	ud0ce
14156	u03fa
8216	happen:
14161	u03ff
33919	happen?
14117	u03d3
55122	verifyEquals(IndexReader
12063	u03d2
56016	StringBuilder}
14116	u03d1
14115	u03d0
14121	u03d7
14120	u03d6
5260	Constructor.
27690	"\u0061\u2060\u0308\u0031\u002E\u2060",
14119	u03d5
14118	u03d4
65837	tnum;
53477	IllegalArgumentException("df
14123	u03d9
14122	u03d8
43527	doTestCountVectorOfSize(1000);
25869	newclauses
55407	testrandomiwreader
14109	u03ca
14110	u03cb
40600	"elation",
15435	lock-less
14113	u03ce
14114	u03cf
14111	u03cc
14112	u03cd
62941	"_1.cfs",
34782	multiphrase
58533	#copy()
43317	getTermFrequencies();
10193	"\3\264\1\u0103\1\264\1\u0103\4\264\1\u0103\10\264\1\u0103"+
55896	enrolling
14130	u03e0
7626	errorLine,
14132	u03e2
14131	u03e1
14134	u03e4
14133	u03e3
14136	u03e6
14135	u03e5
14138	u03e8
59690	"\2\137\1\140\3\137\3\0\1\137\4\0\2\137\150\0"+
14137	u03e7
14139	u03e9
42484	tp.close();
62971	(!set2.contains(o))
19608	closesafely
55853	launchthreads
17712	ScoringRewrite.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;
14124	u03da
11373	"\1\u049f\15\0\1\u049f\6\0\12\u049f\1\u04a0\175\0\4\u04a1"+
29068	IOUtils.close(tvx,
14125	u03db
14126	u03dc
14127	u03dd
14128	u03de
58136	safetyness
14129	u03df
56282	<code><em>valueOf(i)</em>.compareTo(<em>valueOf(j)</em>)</code>
17877	all",
43792	filter.reset();
3717	apostrophe
21679	stringidx
21018	thisDiskFree;
58015	RamUsageEstimator.NUM_BYTES_OBJECT_REF)];
12386	ud17b
750	threads[i].start();
61262	"\6\0\12\u0602\1\u0600\13\0\1\u02e1\160\0\1\u0349\4\u05ff"+
18022	unsignedindexdir
14591	yycharat
11288	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\23\264"+
36972	deltaCount
43318	<code>term</code>
10330	"\1\140\16\36\1\u014c\13\36\1\141\12\142\1\u014d\1\136"+
31731	refuses
63140	CheckIndex.Status
14314	u049d
14315	u049e
14316	u049f
16505	<tt>a</tt>
14311	u049a
62231	nextDoc);
14312	u049b
26456	charbuffers
14313	u049c
27391	"\u0027\u0308\u0027",
30990	indexDir.mkdirs();
33692	usage)",
11874	yycolumn
52389	payloadtokenstream
65768	randBitSet(int
19869	prepare
3078	nextDoc()
35645	range(256)
18653	"Ü¡ÌÜ Ü¬Ü",
25155	query7.add(query3,
40236	readerTermDocs[i].close();
40084	directory()
42813	(positionIncrement
57268	BitUtil.pop_andnot(a.bits,
14310	u0499
58140	directory).
53955	rollbackDirty;
14309	u0498
6606	paper:</em>
14302	u0491
14301	u0490
14304	u0493
1794	finally
14303	u0492
14306	u0495
28712	directory);
14305	u0494
14308	u0497
14307	u0496
19643	chunkStates;
14285	u047f
67081	SeeksCountingStream
50165	modified)
55771	Directory[10];
744	IndexerThread[]
28717	PrefixFilter(new
57281	bits[i];
27308	"\u003A\u00AD",
2844	modified.
58857	utf16a.length);
17360	rdr.close();
55946	stillAliveCount++;
14280	u047a
14281	u047b
38829	r2.getSequentialSubReaders();
14282	u047c
14283	u047d
14284	u047e
7237	Extending
28785	empties
53262	(_other
55153	termDocs1.doc();
29789	"\1\34\2\0\1\25\11\0\3\25\5\0\1\25\1\0"+
59695	"\2\u0107\1\266\3\u0107\2\266\2\u0107\1\266\1\u0107\3\266"+
6841	<code>NumericRangeQuery</code>,
34407	factors,
68049	right.close();
25156	query7.add(query5,
65826	o++)
51105	(pendingMerges.size()
59355	"\2\25\11\0\1\25\11\0\4\25\4\0\5\25\10\0"+
14296	u048a
14297	u048b
9988	"\4\0\1\220\14\0\1\61\4\0\1\221\2\0\1\222"+
35353	expectedincr
36722	arc.numArcs-1;
14299	u048e
14300	u048f
41178	char[ints.length];
14298	u048c
67608	KeepAllCommits
12043	u048d
31047	assertEquals(multiFileOutput,
62840	replaceInvalidAcronym;
6949	minInclusive,maxInclusive;
23496	modifier.getConfig().getMergePolicy();
22606	fast)
55987	offsets[index];
34309	alive
31985	getLongs(IndexReader
17593	getDir2(Random
62893	replaceInvalidAcronym)
3660	ClassicFilter(TokenStream
33622	test4to2
66695	testfailureafterclass
30712	"\2\103\1\0\1\103\4\0\1\103\1\0\1\103\2\0"+
21150	fast,
13395	u55d7
34959	docIdSet
40709	FSTTester.InputOutput<BytesRef>(terms[idx],
27874	"\u0061\u002C\u0061\u0027",
40847	Util.toDot(fst,
29159	mapper.setExpectations(field,
14943	newcomparator
8889	FilteredDocIdSet
20440	SortField(DATE_TIME_FIELD,
21570	searchTermText.indexOf(WILDCARD_STRING);
37746	out.println(i
64940	numthreads
9428	"\6\127\4\41\1\37\37\41\1\37\4\41\25\57\1\125\11\57\21\56"+
40972	seekTerm);
62985	testindexfiledeleter
56470	lessThan(Spans
38039	testIntSpecialValues()
28112	PERCENT
39145	positions.get(i).intValue();
5722	object
31478	{"_0.cfs",
34425	#setRAMBufferSizeMB(double)}
55110	verifyEquals(r1,
55803	id.setValue("0");
51701	merge.readerClones.get(i).getRefCount()
55730	r3.maxDoc());
31081	out.println("
34120	((ord=bits.nextDoc())!=NO_MORE_DOCS)
24008	"125",
29060	tvfLengths[count]
15408	touchfile
30457	(top()
60445	"\4\u0347\2\0\1\u0347\15\0\1\u0347\6\0\12\u034b\1\u0348"+
6669	(index
4567	org.apache.lucene.search.Similarity;
54558	testQuickToMergeSortFallback()
51695	readerPool.release(merge.readers.get(i),
99	org.apache.lucene.index.TestIndexReader.assertTermDocsCount;
11429	"\1\u04c6\26\264\1\141\12\264\1\0\3\136\1\0\2\136"+
50748	LogMergePolicy#getMergeFactor()}
32922	termBytesCount;
43636	misscount
11555	"\1\347\12\230\175\0\1\376\1\u0523\31\264\1\141\12\264"+
34885	prevstartoffset
3670	typeAtt
21789	(For
65859	atLeast(10));
21372	cw.addFile("f"
66856	shuffles
23247	multiSearcher.close();
36815	revisit
1914	fieldsStream.writeInt(Float.floatToIntBits(n.floatValue()));
67019	testSeekToEOFThenBack()
22609	(around
62989	filespre
36942	n.node
50720	config.getRAMBufferSizeMB
25058	bafecijhdg
59287	"\1\62\4\0\1\112\2\0\1\113\21\0\1\114\17\0"+
61152	"\10\u02e2\1\u034e\12\u02e2\175\0\1\u034d\24\u02e2\1\u0599\5\u02e2"+
20755	Payload)
33820	re-queued
290	made
37952	super(obj
15341	setbasedfieldselector
5603	SmallFloat.floatToByte315(-Float.MAX_VALUE));
55903	WeakHashMap
39483	experiments
11895	yylength()
3931	ioBuffer.getLength();
10321	"\1\136\1\162\3\0\2\136\2\0\1\337\3\0\1\340"+
52946	result.bytes;
44991	"á¸»"
48067	this.lockFactory;
18463	testbooleanrequiredequalscores
60876	"\4\0\2\137\150\0\1\u0101\2\266\1\u04ae\27\266\1\142"+
66039	catch(IllegalArgumentException
64486	moreExclude)
6001	"hello".toCharArray();
20993	144;
60508	"\2\137\150\0\1\u0101\32\266\1\142\5\266\1\u0385\4\266"+
52672	currentScore(int
53241	trail_surrogate_min_value
35610	b=(A[i+6]
32917	termBytesCount)
2939	field_name
36148	NUM_ARCS_ARRAY:
29330	Payloads
35867	BooleanQuery.setMaxClauseCount(savedClauseCount);
40588	intIdx;
22319	comp)
44900	"á¸±"
61124	"\13\0\1\u033c\160\0\1\u03a1\4\u0583\2\0\1\u0583\15\0"+
65286	arcs[0]
9001	term.set(field,
28157	comma
15911	s.append(delCount);
40239	super(topReader,r,s);
11918	display
26233	indicating
15373	field_utf1_text
17271	storecfsreader
44627	"á¸¡"
601	String
8091	WeakIdentityMap<MMapIndexInput,Boolean>
15631	fileName
31905	Short#toString(short)}
58261	BytesRef)
53410	getreadchunksize
6807	this.precisionStep
58244	BytesRef,
40063	Have
58348	aupto
334	make
58221	BytesRef.
60389	"\6\266\1\u0316\23\266\1\142\12\266\1\0\3\137\1\0"+
63875	"\ud801\udc1ctest"
25463	indication
42750	specified):<br/>
67121	classicanalyzer
48973	"date"
59033	numAsserts
23840	#prune}.
19742	chunkStart;
19707	(!chunkStates[0].posEnum.skipTo(target))
66813	//filter
20102	BooleanQuery.this.getMinimumNumberShouldMatch();
6921	field==q.field
57762	assertEquals("Reader
22211	smaller,
41514	//w.forceMerge(1);
22205	smaller.
67892	!tokens.isEmpty())
9401	"\57\132\4\133\11\0\2\133\1\0\31\132\10\0\120\132\2\133\45\0"+
17375	assertEquals(aDocs.size(),
36944	n.count
53205	uni_sur_high_end
2591	org.apache.lucene.search.TimeLimitingCollector.TimeExceededException;
22163	oversize(int
37173	arcwithoutputcount
63169	dtests
59094	"\0\u1b61\0\u07a4\0\u1c04\0\u1ca7\0\u1d4a\0\u1ded\0\u1e90\0\u1f33"+
10336	"\1\u014e\15\264\1\307\14\264\1\141\12\264\1\u014f\3\136"+
57752	startDiskUsage="
16695	r1));
41434	b.add(Util.toIntsRef(new
8443	main
29126	tvfPointers);
44654	"á¸¨"
18051	Strips
63919	testreadsupplementarychars
36673	arc.nextArc);
44904	"á¸µ"
37676	testmulipleterms
60227	"\1\100\1\0\1\26\2\0\1\25\1\u011e\32\36\1\142"+
8887	costly,
35208	curProxPointer;
21156	costly.
4948	14);
52748	topdocs.totalHits;
19760	scorecache
51308	carried
22833	lowerval
28805	skipBuffer[level].getFilePointer();
32878	termsHashPerField.sortPostings();
53759	Set#remove}.
13000	u59b3
56492	skipCalled
7649	report
38841	carries
19901	innerArray[j],
24585	Sort)
38430	assertNotNull(fieldInfos.fieldInfo("text"));
43124	Sort(
37022	topNodeMap.size()
36217	other.nextArc;
52935	(result.length
3284	this.other.acceptsDocsOutOfOrder())
55816	doc.add(newField("foo",
13401	u59a9
61246	"\1\u05f4\5\u05f5\1\u05f6\14\0\1\u033c\161\0\4\u05f7\2\0"+
44691	"á¸«"
37810	MatchAllDocsQuery))
3517	total;
37172	lastfrozennode
53382	total,
38392	TestIndexReader
9817	"\12\160\1\161\174\0\65\162\1\163\1\162\1\164\1\0"+
42566	NumericUtils.intToPrefixCoded(ivalue,
5581	assertEquals(f2,f3,0.0);
2966	testmodifyresolution
34589	SpanScorer
17988	"H\u00C5T"
22879	payloadToMatch.size())
34542	PrefixTermEnum
53103	LEAD_SURROGATE_OFFSET_
22344	Sorts
15163	testLazyPerformance()
56495	(skipCalled)
53162	chars.length
25636	all.size());
37772	MatchAllDocsQuery()
62533	addProhibitedScorers(
27360	"\u002C\u0061\u0027",
61312	"\1\u03a1\4\u062e\2\0\1\u062e\15\0\1\u062e\6\0\1\u0630"+
13186	ud021
42181	assertEquals("flags=1234",
67935	"input
40496	factory)
22154	algorithms",
26806	testspanfirstquery
40491	factory.
27908	"\u0031\u003A\u0308\u0030",
12599	u59bd
3825	factory,
29110	fields[i]
41701	FST.Arc<Long>
5595	smallest
53246	non-negative
60304	"\2\137\151\0\32\u020d\1\0\12\u020d\176\0\32\u020d\1\u0266"+
18145	ConstantScorer
12384	ud035
18467	fourth
29232	frequency;
43904	ASCII
58272	BytesRef}
12198	u59c7
59154	"\2\ufb6d\2\ufc10\2\ufcb3\2\ufd56\2\ufdf9\2\ufe9c\2\uff3f\2\uffe2"+
27935	"\u0031\u0027\r",
24322	SortField("string2",
55981	super(field,
55345	Half
56583	out-of-order",
17009	frequency,
12785	ud02b
11604	"\15\0\1\u054d\6\0\12\u054d\14\0\1\u02cf\161\0\4\u054e"+
38149	Iterator<Long>
38448	Field("tvoffset","tvoffset",
9662	ZZ_TRANS
54067	stopWords[]
26890	Han}
20119	sumExpl.addDetail(r);
60444	"\1\u0347\6\0\12\u034a\1\u0348\13\0\1\u02e1\160\0\1\u0349"+
19123	emailfilter
26335	getEncodedLength(input.array(),
15829	IndexFileNames.VECTORS_FIELDS_EXTENSION));
1365	analyzed
67442	assertTrue(segmentReader1.normsClosed("field2"));
64628	byte[bufferSize]);
62711	ArrayList<SortField>();
35156	testpt2
35157	testpt4
20851	fieldAnalyzers)
35158	testpt5
63551	bitlist[y
61675	ud017
35155	testpt1
41494	cycle=0;cycle<2;cycle++)
683	analyzer
34887	analyzes
60803	"\4\u0474\2\0\1\u0474\15\0\1\u0474\6\0\12\u0474\1\u03a0"+
48827	assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg,
23350	"Amsterdam
65118	target.clear();
33822	re-queue
22992	MultiSearcher
11182	"\1\346\11\230\1\u0408\20\230\1\347\12\230\175\0\1\346"+
4115	val=l-(noDocs/2);
65623	(deletable
49834	conj_and
36754	scan)
23635	assertTrue("only
18380	testBooleanOptionalWithTiebreaker()
1405	rollback
55431	TestDocumentWriter
57357	(bits.length
11770	HIRAGANA_TYPE
43630	0x1117BF25;
54501	ArrayUtil.oversize(1+currentSize,
67360	(subReaders0[i]
613	c=0;c<count;c++)
60838	"\1\u048c\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u048d"+
54289	offsetKey
53029	offsets[upto++]
10186	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\1\264"+
15914	s.append('C');
18657	"ÜÜÜ¢Ü£Ü©Ü ÜÜ¦ÜÜÜ"});
40916	HashMap<IntsRef,T>();
44652	"á¸¦"
52235	startstartcommit
19600	utf_8
30564	"\11\0\1\46\2\0\1\125\16\0\1\126\2\0\1\127"+
4833	default_term_index_interval
36320	byte[writer.posWrite];
21384	primes
26414	codingCase.initialShift);
14542	complex_context
9571	"\1\ub19b\1\ub23e\1\ub2e1\1\ub384\1\ub427\1\ub4ca\1\ub56d\1\ub610"+
11187	"\1\346\10\230\1\u040d\21\230\1\347\12\230\175\0\1\346"+
10740	"\1\u0274\2\u0275\1\u0274\5\u0275\1\u0276\14\0\1\u0122\161\0"+
17951	Locale("ar"));
30973	testsecondresultspages
42885	#setEndOffset}
313	information");
36575	'start'
28075	"\u0031\u002E\u2060\u0031\u002C",
31152	java.io.DataInputStream;
25781	List<SpanQuery>
41437	outputs.getNoOutput());
55605	index2df
8801	WithNestedTests
40234	readerTermDocs.length;
5791	long[][]
37991	i=-100000;
6814	max;
56890	"\2\0\1\5\1\0\1\5\3\4\6\5\1\6\1\4"+
17773	#clearTotalNumberOfTerms
36076	10).scoreDocs;
6800	max,
41916	tointsref
53117	0x10ffff)
32118	max.
28403	ref.append(charArray,
38135	neededBounds
63250	bitlist={
38171	max)
5489	lexstate
66324	newSize/2;
56283	<code>pivot.compareTo(<em>valueOf(j)</em>)</code>
57700	i=0;i<3;i++)
31806	this.iwc
51292	info.getDocStoreIsCompoundFile());
49836	mod_none
60802	"\2\u0472\1\u0473\1\u0472\1\u0473\1\u040f\13\0\1\u033c\161\0"+
31527	CompressionTools.compressString()
26543	DocHelper.indexed.size());
62852	this.scanner
1623	written
27136	"\u000B\u0027",
59831	"\1\140\3\137\3\0\1\137\4\0\2\137\150\0\1\u0153"+
3606	alreadysetexception
64417	BEST_COMPRESSION
54512	elemSizes:
11349	"\11\230\1\u03b3\175\0\1\346\1\u0488\31\230\1\347\12\230"+
53677	assertQuery(Query
7443	BugReproTokenStream
67636	openreader
1663	math
6026	testGrow()
36176	emptyOutput;
46784	REVERSE
4830	getopenmode
8211	clone.buffers[bufNr]
31154	org.apache.lucene.util.ReaderUtil;
66271	bigsearcher
24907	u00edn
4197	DocIdSet.EMPTY_DOCIDSET,
64969	loses
18028	farsi
28388	utf16[i]
39858	doOpenIfChanged((SegmentInfos)
22678	DocIdSet.EMPTY_DOCIDSET;
32158	byteupto
62617	(+C:production
46697	,"}",
48675	this.__test_dir.getPath()
17644	FilteredTermEnum}
28601	backup(int
10619	"\150\0\1\376\7\264\1\u01f8\1\264\1\u01f9\20\264\1\141"+
31959	NUMERIC_UTILS_LONG_PARSER;
27409	"\u0027\u0308\u0061\u002C",
27901	"\u0031\u003A\u003A",
32466	this.dir2
56809	numdelete
32465	this.dir1
9528	"\0\ud7d9\0\ud87c\0\ud91f\0\ud9c2\0\uda65\0\udb08\0\udbab\0\udc4e"+
52459	buffer));
7459	11};
3425	mergeGen;
22785	StringBuilder(field).append(":");
17163	decRef();
36461	fixedArrayStart
27922	"\u0031\u003A\u0308\u0061\u0027\u2060",
26809	org.apache.lucene.util.RamUsageEstimator.NUM_BYTES_OBJECT_REF;
47980	indexSearcher.close();
64566	getBufferSize()
32232	searcher.start();
5597	assertEquals(255,
35550	fours,
41928	testrandomwords
17589	w1.addDocument(d1);
65085	doPrune
16944	testsegmentreaderdeldocsreferencecounting
6159	endoffset
6430	java.io.StringWriter;
18017	maxr
35839	TestTermRangeQuery
60853	"\1\u049b\6\0\12\u049b\1\u03d4\13\0\1\u0126\160\0\1\u0168"+
26373	0xFF)
14701	reverse;
63977	0xFF,
25323	metals'
29177	tvf.readChars(charBuffer,
24567	full.search(queryE,null,nDocs,sort);
48426	(float)currentScore;
32803	x100
10957	"\32\230\1\347\11\230\1\u0354\175\0\1\346\23\230\1\u0355"+
14696	reverse,
32445	abcdefghijklmnopqrstuvwzyz
27911	"\u0031\u003A\u00AD",
56804	dodeletes
16751	testParallelReader()
14699	reverse)
63859	builder.toString()));
6038	content.length());
19950	map)
31323	!oldName.startsWith("20.")
18042	mand
56386	pool.allocSlice(slice,
17085	currentpositions
54728	lockFileName)
7218	DocIdSet
52501	this.ir1
52503	this.ir2
24512	"BFJDH");
2626	many
11804	map;
44874	"á¸´"
4458	testnumericutils
21664	--i)
33635	randomsimplestring
31695	tokenStream.getAttribute(CharTermAttribute.class);
7786	!dataset.contains(vals[1]))
37912	map.
39759	map,
42295	fail("Expected
11797	translation
32722	IndexableBinaryStringTools.encode(binaryBuf,
33326	doc.add(newField(FIELD_RECORD_ID,""+currentRecordId,Field.Store.YES,Field.Index.ANALYZED));
65418	reverses
42836	this.payload
21044	reader.setNorm(docId,
31217	ArrayList<IndexReader>();
8018	(cleaner
66689	testfailureinitializer
6556	<b>8</b>.
61357	"\7\u02e2\175\0\1\u034d\16\u02e2\1\u0650\13\u02e2\1\u034e\12\u02e2"+
17419	termText)
14909	reversed
44648	"á¸¢"
7289	<code>results</code>
30687	"\2\54\3\0\2\54\1\0\1\54\4\0\1\54\1\0"+
38121	intVals[i]
66966	java.io.ObjectOutputStream;
58695	this.termAtt
62383	male
26520	deleteReader.close();
66115	AnalyzerReturningNull
59645	"\2\137\2\0\1\342\3\0\1\343\2\0\1\344\12\0"+
8156	curAvail
47906	valuesourcequery
31490	expected:\n
9590	"\2\u1263\2\u1306\2\u13a9\2\u144c\2\u14ef\2\u1592\2\u1635\2\u16d8"+
11291	"\1\376\32\264\1\141\3\264\1\u0154\6\264\1\0\3\136"+
31269	tests",
35558	binary-search
9596	"\2\u30f3\2\u3196\2\u3239\2\u32dc\2\u337f\2\u3422\2\u34c5\2\u3568"+
44683	"á¸£"
57023	<br/>BitSet
1683	corruptindexexception
56700	(needsMerging)
34414	setRAMBufferSizeMB(double
16561	indicative
1177	dir.createOutput(fileNameOut);
40954	fstEnum.seekFloor(term);
1992	mask
46378	,"(8)",
31061	merger.add(r2);
39763	SegmentName->SegmentReader
62133	TestBooleanQuery
20326	replay()
26139	neg_inf
50994	space.</p>
44748	"á¸¬"
68054	mockreaderwrapper
25610	ArrayList<CacheEntry>(kids.size()
30515	CJKV
5570	orig_floatToByte(float
27538	"\u005F\u0031\u002E\u2060",
60037	"\1\311\1\312\1\313\1\314\1\315\1\316\1\317\1\320"+
21567	searchTermText
3628	mark
2428	comes
18518	Õ´Õ«Õ¬Õ«Õ¸Õ¶
50633	#setMergePolicy
30558	"\1\0\1\25\103\0\2\25\6\0\1\25\56\0\1\25"+
20353	testcachingcollector
54572	other.order;
50772	config.setWriteLockTimeout(writeLockTimeout);
31537	(oldNames[i].compareTo("30.")
7177	tenum
44689	"á¸©"
2103	(nodesEqual(nodeIn,
7733	mary
3667	attribute
53109	codePoints
17355	assertNotNull(it);
16031	conf.getMergePolicy()).setMaxMergeAtOnce(3);
27550	"\u00AD\u0041",
38333	x10l
24173	//System.out.println(writer.getSegmentCount());
29843	"\1\41\1\0\1\142\3\0\1\56\5\0\1\57\3\0"+
22304	(left[offsetLeft
57428	xorcount
18799	"à½à½",
9368	"\4\132\2\0\103\132\2\0\3\133\40\0\20\132\20\0\125\132\14\0"+
37944	backingStore.remove(zombie);
57184	Long.rotateRight()
57124	bittest
6985	(dataType
10936	"\1\u033b\2\u033c\1\u033b\5\u033c\1\u033d\175\0\1\u0163\4\u033e"+
36710	replacing
52011	default_max_field_length
7582	(str.charAt(i))
50231	HashSet<SegmentInfo>();
60794	"\2\u0470\1\u046f\5\u0470\1\u0471\14\0\1\u033c\161\0\4\u0472"+
48600	(readerValue
57553	seekEnum(SegmentTermEnum
40762	run(FST<T>
24707	maps
5161	jjMoveNfa_1(state,
35149	testpayloadexplanations
54230	strings.entrySet())
30208	tiOrd.termOrd;
44650	"á¸¤"
64190	Direct16(int
16070	search2",
51494	j=0;j<docCount;j++)
10878	"\1\u0304\10\264\1\0\3\136\1\0\2\136\1\137\3\136"+
57546	indexToDataOffset
30238	enumerator.next())
33479	"bbb",
17693	ConstantScoreQuery(new
35124	searcher.setSimilarity(new
18615	"Ø¨Ø§ÙØ¥ÙØ¬ÙÙØ²ÙØ©",
34687	StandardFilter
21879	buffer.append(">");
19890	q.valSrc.getValues(reader).getInnerArray();
10180	"\1\64\2\0\1\25\1\377\32\155\1\136\12\267\1\0"+
64956	http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.3698</p>
43272	testIndexDivisor()
24555	SortField("float",
11962	zzAttributes
24933	testsortmissinglast
65521	sis.read(directory,
56906	"\1\24\1\25\7\0\1\26\4\0\2\27\7\0\1\27"+
4584	conf.getAnalyzer().getClass());
41171	UnicodeUtil.newString(term.ints,
31348	reader.getTermFreqVector(i,
66172	//System.out.println("Query:
67435	assertNotNull(reader5);
37423	QueryTermVector(null);
35760	seal's
57063	<td>3.49</td>
49195	conj,
48034	FileNotFoundException
62293	FieldMaskingSpanQuery(q2,
27818	"\u0061\u0027\u2060\u00AD",
51600	isExternal
64001	SYMBOL
51015	IllegalArgumentException("maxNumSegments
65128	trouble
54425	HTML.
63119	newFSDirectory(new
60720	"\1\u0428\1\u02e2\6\u0428\1\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
43962	"áº "
53146	utf8[offset++]&0xff;
51337	loss.
42482	String(payload,
20318	130;
26409	inputChar
52936	ArrayUtil.grow(result,
38025	i<prefixVals.length;
18578	"á¨á°áá",
6068	"hello2".toCharArray();
61376	"\1\u065d\6\0\12\u065d\1\u062f\13\0\1\u033c\160\0\1\u03a1"+
1270	docCount=0;docCount<numDocs3;docCount++)
1944	addDocument(Document
43436	horribly
9601	"\2\u4a6b\2\u4b0e\2\u4bb1\2\u4c54\2\u4cf7\2\u4d9a\2\u4e3d\2\u4ee0"+
31979	getShorts
42560	(shift
65385	MockAnalyzer(random)).setMaxBufferedDocs(10)
58058	free(perDoc);
64562	numToCopy
5463	xfffffffeffffffffl
2661	multiThree",
18850	lost.
40779	(prefixLength
1359	setname
43154	System.out.println("scores[i]
50719	mb);
56730	IndexReader.listCommits(dir).size());
36118	non-final
21531	cfw.close();
44047	"áº¥"
29210	tvd.clone();
3360	replayinit
42630	positioninfo
60193	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\32\266"+
33726	switching
9909	"\7\0\3\32\2\0\2\32\12\0\2\32\1\0\3\32"+
4599	IndexWriterConfig.getDefaultWriteLockTimeout());
37857	general-purpose
40262	doclone
48433	nrscorers
18774	"Î½Î±",
48831	TermVectorsReader(dir,
30324	objects[i]
22586	reflection
19986	combinations
55505	testLUCENE_1590()
54689	(lockPrefix
51144	MergePolicy.MergeAbortedException}s.
28836	termsHash;
8511	final3));
38138	understanding
31698	lowercase",
38043	-64765767,
30151	origEnum.skipInterval;
48302	getClass().getName()
55751	Enroll
50861	numDeletedDocs(info);
23646	"0"));
67535	test.modifyIndex(modify);
48462	"LimitTokenCountAnalyzer("
65700	IncRef()
25646	ReaderField))
63833	TestCharTokenizers
29338	bufferUpto;
5297	beginLine;
58684	CharFilter(s)
28846	termsHash,
57960	SimpleScorer(fake);
59342	"\1\156\1\155\2\43\2\155\1\43\1\155\1\43\1\0"+
29701	"\1\23\2\2\1\24\1\2\1\25\1\2\1\26\1\27"+
27180	"\u3031\u0308\u0041",
4535	testsorting_8bit
45169	,"Nj",
11109	"\150\0\1\376\12\264\1\u03d2\17\264\1\141\12\264\1\0"+
33580	numRounds
8057	Integer.numberOfLeadingZeros(maxChunkSize);
33590	"c");
20687	occurrence
17603	testfieldnames
30778	(bufferSize
46861	ring
7014	minBound,
36495	flags="
29273	startdocid
61211	"\1\u034e\12\u02e2\175\0\1\u034d\15\u02e2\1\u05c9\14\u02e2\1\u034e"+
50964	flushCount.get();
37634	ts.addAttribute(CharTermAttribute.class);
6984	minBound;
14724	LONG);
30762	IndexOutOfBoundsException
34893	inverts
7367	caller
64723	"aa"));
40919	minLong)
34501	sb.append("default
56598	numOnInit++;
30869	collator.getCollationKey(termAtt.toString()).toByteArray();
67352	subReaders0[i]);
18014	signedindexdir
15118	doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);
36767	BytesWriter()
66136	teststaticmethod3
66132	teststaticmethod2
66129	teststaticmethod1
49509	CONJ_NONE,
21730	non-zero
30426	PorterStemFilter(new
53790	(CharArraySet)
52200	handlemergeexception
4194	inverse
22235	RamUsageEstimator.NUM_BYTES_FLOAT)];
4253	Float.POSITIVE_INFINITY,
6630	detailed
22764	Float.POSITIVE_INFINITY;
49892	newmultiphrasequery
40687	doShare
18855	similar
7818	magic_field
56825	ClassicTokenizerImpl.jflex
54171	ci.setInfoStream(System.out);
57927	extension.matches("f\\d+"))
56238	FilterIndexReader.class
49469	CONJ_NONE;
36810	this.chain
58094	numvectorfields
50064	os.length();
9483	ZZ_ROWMAP_PACKED_0
8206	clone.clones
11346	"\2\u0486\1\u0485\2\u0486\2\u0485\1\u0486\1\u0485\1\u0486\1\u0445"+
25706	subtle
55916	linear.
20820	non-default
28907	(single
33872	initSimple();
62267	"bob"),
55739	multiSegment)
62892	setReplaceInvalidAcronym(boolean
16889	IndexReader[subs.length];
31223	ir).getFieldsReader();
4621	covered.
60888	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\5\266"+
58954	startDocument();
55746	multiSegment,
12014	issues
1104	called
67332	index1.close();
59283	"\1\106\20\0\1\27\1\0\1\27\3\0\1\67\1\0"+
66448	postingsHash[hashPos]
11251	"\4\u043e\2\0\1\u043e\15\0\1\u043e\6\0\12\u043e\1\u03f6"+
63043	"<NOT>",
5051	((0x3ff000000000000L
29194	believe
26054	super(pq);
64584	Throw
47423	flourish
23755	risk
43047	refreshing.
62372	FieldMaskingSpanQuery(qB,
38353	x7fffffffffffefl
37397	headerlength
35148	payloadnear
53159	(char)ch;
59526	"\1\25\2\0\1\25\4\0\2\65\11\0\1\25\11\0"+
24331	doc2.getValues("tracer2");
53561	createNormalizedWeight(Query
2540	newsearcher
20208	rewrote:
42845	#copyBuffer})
66643	testAssumeTest()
42119	ints[i];
58054	"lastDocID="
62349	FieldMaskingSpanQuery(qA,
35359	org.apache.lucene.search.DocIdSet;
42066	comparators[i]
25044	testoutoforderdocsscoringsortmulti
37395	codec_magic
20172	BooleanScorer
55439	assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));
42760	source.endOffset()[,
60791	"\2\0\1\u046b\15\0\1\u046b\6\0\12\u046b\1\u039a\175\0"+
62556	countingSumScorer.advance(target);
64007	0xF0,
51488	(previousReader.hasDeletions())
4589	conf.getMergeScheduler().getClass());
64610	0xF0)
53347	File(directory,
18020	testrangefilterrandcollating
62648	LengthFilter
10756	"\1\u0280\4\230\1\u0281\5\230\1\u0282\6\230\1\347\12\230"+
30598	"\3\0\1\27\5\0\1\27\7\0\1\27\4\0\2\27"+
35453	function:
58105	pp2.offset)
17283	termsindexisloaded
34565	function;
21056	(transactional
62406	testnoop1
22043	searchermanager
33477	"aa",
62405	testnoop0
52757	doc.get(FIELD_ID));
38352	x7fffffffffffedl
14740	function.
8518	analysis,
34570	function,
41631	FST.Arc<Object>().copyFrom(arc),
34568	function)
40026	undeleteAll,
6051	'h',
58841	utf8Data[2*i+1],
7573	escaped)
7290	return,
50805	return.
8289	sigsegv
31740	preserved),
15753	(delCount
62329	Term("gender",
32638	originalStringBuf1.compareTo(originalStringBuf2);
53298	_inc)
53302	_inc;
10067	"\2\0\2\66\12\0\2\66\1\0\3\66\1\0\1\66"+
12195	u57de
42602	assertContainsDocId("docIdSet
8985	RAMInputStream("PrefixCodedTermsIterator",
24719	m1.keySet().iterator();
33400	<code>super.end()</code>
20267	booleanweight
33987	pp2.offset;
60485	"\1\352\12\232\175\0\1\351\1\u0368\1\u0369\1\232\1\u036a"+
60818	"\1\u047f\1\u0480\1\u047f\1\u047e\13\0\1\u02e1\161\0\4\u0482"+
39711	}.run(commit);
65208	parentNode.getLastOutput(input.ints[input.offset
37784	MatchAllScorer(IndexReader
56989	boost(float
43259	assertFalse(tdocs.skipTo(26));
48802	//Create
17301	agree
11209	"\32\264\1\141\6\264\1\u0150\3\264\1\0\3\136\1\0"+
43736	Ä²
39313	listiterator
29138	tvfPointers[i],
64943	timeelapsed
30330	numObjects
13398	u57c0
53259	this.first
19654	chunkStates
9160	org.apache.lucene.util.ArrayUtil;
16871	assertEquals(encoded,
57552	MAX_PAGE_BITS),
23501	merge");
1730	FIELD_IS_NUMERIC_FLOAT
34633	super.score();
32167	TestLockFactory
21319	csr.openInput("d2");
63549	(int)(word
51075	operation;
24953	jihgfedcba
46800	,"~",
63948	TestTokenStream3
63321	0x7321,
63947	TestTokenStream2
12596	u57d4
63946	TestTokenStream1
49021	allowLeadingWildcard
66179	CheckHits.checkHitsQuery(query,
35799	IndexWriter(rdOut,
40662	output));
16015	Integer.toString(i),
435	mockanalyzer
3414	operation,
778	(this.fieldName.equals("crash")
22888	payBytes)
12997	u57ca
35955	assertEquals("A,B,<empty
56701	WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(
22975	testOneElementListSort()
67474	ReaderThreadTask
43149	searcher.doc(ids[i]);
40590	toIntsRef(BytesRef
18361	true,false);
50449	sr.loadTermsIndex(termsIndexDivisor);
16970	LowerCaseFilter(Version
10569	"\1\136\4\0\2\136\151\0\4\u01d3\2\0\1\u01d3\15\0"+
27376	"\u0027\r",
1919	contiguous
25072	randomfilter
64256	Type("short");
42026	FieldValueHitQueue<T
35105	input.readBytes(currentBuffer,
35150	functions
58520	assertEquals(setCaseSensitive.size(),
27963	"\u0031\u0027\u0061\u2060",
30938	10).scoreDocs.length);
49975	<li>{Directory}
33493	cs.read(buf,
67024	i.seek(RAMInputStream.BUFFER_SIZE);
2021	(arcUpto
11177	"\25\230\1\u0404\4\230\1\347\12\230\175\0\1\346\1\u0405"+
27742	"\u0061\u003A\u0031\u002E\u2060",
891	sawFlush
29353	bufferOffset
22152	"Dynamic
3574	operations
23540	while(upto
49819	jj_save(int
34478	DocumentsWriter.defaultIndexingChain
7482	setempty
31620	oldnames
5560	(byte)((exponent
59748	"\2\137\14\0\1\174\20\0\2\174\25\0\2\174\6\0"+
17559	assertEquals(docParallel.get("f1"),
12197	u5924
67588	r1.document(2);
28696	stopset
57825	commit(Map)
7120	comparisons
57146	(endIndex
49405	codePoint
10942	"\1\u021e\13\0\1\u0122\214\0\12\u02de\14\0\1\u0122\214\0"+
8434	(LockObtainFailedException
53002	0xEF;
64241	<b>Caching:</b>
3044	128;
60885	"\150\0\1\u0101\30\266\1\u04b1\1\266\1\142\12\266\1\0"+
51436	(!mergingSegments.contains(info))
52245	revisitpolicy
22552	UnsupportedOperationException("The
5076	128)
34208	128.
12598	u591a
57792	(c.getUserData().get("tag").equals("first"))
4972	jjMoveNfa_3(state,
51733	clone.numDocs();
34527	rambuffersize
2125	oldTable[idx];
43315	correspond
13400	u5906
55986	offsets.length)
26759	#getMatch()}
63400	0x85321,
27480	"\u0030\u0308\u0031\u002C",
41010	fstEnum.seekFloor(pairs.get(upto).input)
21840	NO_FIELDABLES
67020	byte[3*RAMInputStream.BUFFER_SIZE];
18565	ááá
29189	int[freq];
60259	"\20\232\1\352\11\232\1\u029b\175\0\1\351\22\232\1\u02a1"+
5081	126)
41105	ent.getValue().isFinal);
12999	u5910
18820	bigrams
43599	CachingWrapperFilter.DeletesMode}
63317	0x721,
2824	maxTime(boolean
1130	testSegmentsChecksumError()
55531	testpreanalyzedfield
11600	"\1\u0549\174\0\1\u0332\4\u0548\2\0\1\u0548\15\0\1\u0548"+
5150	125:
11005	"\2\264\1\u0367\7\264\1\0\3\136\1\0\2\136\1\137"+
60970	"\1\u04ee\26\266\1\142\12\266\1\0\3\137\1\0\2\137"+
39402	tp.seek(term);
10216	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\1\u0103"+
30887	super(new
67416	IndexReader.openIfChanged(parallelReader1);
656	conf)
7228	org.apache.lucene.util.PriorityQueue;
41073	cmo.isFinal);
23390	false)).setMaxBufferedDocs(4)
27555	"\u00AD\u0308\u002C",
67816	conf;
2169	returns
35979	testinclusivecollating
5315	Token.newToken(jjmatchedKind,
5084	124)
16477	testexistingsnapshots
54129	termAtt.setEmpty().append("hte");
17967	"\u0633",
54986	getindexwriter
57702	assertEquals("reader
58876	KeywordTokenizer(Reader
4965	123:
9441	ZZ_CMAP
51953	#addIndexes}
49549	Term(String
32480	writer1.rollback();
64376	Direct32(int
51194	handled:
60074	"\3\0\1\137\4\0\2\137\150\0\1\136\4\u0145\2\137"+
23373	false)).setMaxBufferedDocs(2)
19415	1231
18482	UAX29URLEmailTokenizer(TEST_VERSION_CURRENT,
31705	testperfieldanalzyerwrapper
39537	comparison,
41922	brute
58960	MMapDirectory.UNMAP_SUPPORTED);
57966	return:
10551	"\4\0\2\136\150\0\1\376\3\264\1\u010e\26\264\1\141"+
3108	return;
1329	doc.add(field);
28913	super(field);
64237	bytes.</li>
7099	diepenbroek
2280	PayloadFilter(result,
50430	#release(SegmentReader)
29134	fields[],
37417	QueryTermVector(queryTerm);
27695	"\u0061\u003A\n",
6561	details.
51664	details)
25506	getDocWithField())
41212	//System.out.println("ADD:
18833	testEmpty()
40158	(smi==null)
54389	details;
66704	prevsyserr
3325	initial_array_size
9087	getSegmentsFileName()
7011	rangeBounds.add(minPrefixCoded);
65935	-three");
32599	char[MAX_RANDOM_BINARY_LENGTH];
42523	payloaddatalength
53451	mupper
52882	WHATSOEVER
29434	testsimpleexplanationsofnonmatches
37063	wasted);
25896	details.</p>
5072	12);
66480	tokenTextLen;
49812	disable_tracing()
41655	10L);
16068	search1",
2583	coord
16883	testCloneSubreaders()
25482	MapOfSets<Integer,
52316	getConfig(Random
53809	CharArraySetIterator}).
26118	FieldDoc(entry.doc,
39508	output.writeInt(indexInterval);
26009	queue.getReverseMul();
54450	keywordSet
54533	assertTrue(test
5188	jjStopStringLiteralDfa_2(0,
29351	this.endIndex
35845	assertEquals("A,B,C,D,
7619	prefix
10924	"\1\u0333\1\u0335\1\u0334\2\u0333\2\u0334\1\u0333\1\u0334\1\u0333"+
41234	TermsEnum
66412	tokenTextLen)
16874	orig.close();
54855	waitingListeners
49883	getrangecollator
65678	refCounts.put(fileName,
26557	assertTrue(term
32799	testnum
53089	LEAD_SURROGATE_SHIFT_
3650	org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
66518	charPool.buffer;
59239	"\3\25\1\0\6\25\1\0\1\25\1\26\1\0\1\25"+
26522	allFieldNames
57463	ic.getFileNames());
9689	"\4\25\2\0\1\25\2\0\4\25\2\0\1\25\1\0"+
33891	//System.err.println("initComplex:
48354	nrMatchers
6632	stored,
17077	stored.
2203	NO_COMPOUND_FILES
18640	Ü\"ÜÜÜ©Ü\"
28223	Collector[]
22944	assertEquals(list2,
51376	flush(boolean
24316	sorting:
20935	String(token.termBuffer(),
14658	sorting.
10268	"\6\0\1\u011f\2\u0120\1\u011f\5\u0120\1\u0121\14\0\1\u0122"+
20402	sorting,
2581	sloppyfreq
7920	workaround
32064	getcachetype
64982	FST/FSA
22746	(FieldCache.LongParser)
64122	is.readChars(chars,
8672	java.util.Collection;
45320	U+1D97:
66465	postingsArray.intStarts[termID]
64017	LONGS;
55646	AddDirectoriesThreads
39789	Steal
60825	"\175\0\1\u0486\4\u02e2\1\u0487\25\u02e2\1\u034e\12\u02e2\175\0"+
1556	enumerator
33021	bytesperposting
52318	WhitespaceAnalyzer(
11552	"\24\230\1\u0521\5\230\1\347\12\230\175\0\1\346\1\230"+
23283	vital
51138	deleteDocuments(
42079	create(SortField[]
58217	platform's
68007	CharTokenizer.IO_BUFFER_SIZE*2
18384	s.doc(h[0].doc).get("id");
57560	fields[fieldId];
65868	validate=false;
3941	bounds
37981	act=NumericUtils.longToPrefixCoded(l);
67432	assertNotNull(reader4);
50233	LinkedList<MergePolicy.OneMerge>
48649	inverteddocendconsumerperfield
64514	(SpanNotQuery)
34207	CREATE_OR_APPEND
41723	BytesRef("ax"),
59212	"\4\u22dd\4\u2380\4\u2423\4\u24c6\4\u2569\4\u260c\4\u26af\4\u2752"+
7020	max.intValue();
17322	Occur.MUST_NOT);
1160	file");
22866	java.util.Collection}
20608	WhitespaceAnalyzer}
65631	"Clarification:
32127	120,
40392	@SuppressWarnings("dep-ann")
15957	lucene_main_version
30939	testSecondResultsPages()
8939	difference();
45872	U+1D99:
8526	names).
65201	lastNode
28047	"\u0031\u002E\u2060\u0027",
29853	"\1\0\1\27\2\0\4\27\2\0\1\27\153\0\1\27"+
31016	PrintWriter(sw,
18806	"à½à½¼à½",
52668	getmethods
59543	"\1\0\1\25\2\0\1\25\1\0\1\25\117\0\1\25"+
18951	20});
56682	(lastDeleteTime
21058	newReader
31477	names:
36357	byte[writer.posWrite-posSave];
67811	testnot
6444	System.err.println("WARNING:
5239	names.
21096	Lock}
66650	testFailureBeforeClass()
15251	names)
22258	long[newSize];
32395	numiteration
49010	Operator
64435	decompressor.inflate(buf);
31048	singleFileOutput);
4363	upper-lower+1,
44470	U+1D93:
35653	rhs.
58354	utf8sortedasutf16sortorder
40621	terms2[idx]
1322	t2.setPositionIncrement(200);
33685	maxDiskUsage
64698	"body".equals(actualTerm.field()));
59006	ii.seek(sliceStart);
59489	"\1\77\1\26\6\0\1\77\3\0\1\136\1\276\1\277"+
44472	U+1D94:
26136	startup
10010	"\4\0\2\136\151\0\4\333\2\0\1\333\15\0\1\333"+
41542	IDs:
15666	si.isCompoundFile
26140	multicomparatornonscoringcollector
64827	numNext);
50568	segmentInfos.clear();
30212	(tiOrd.termOrd
54755	Denied"
28005	"\u0031\u002C\u005F",
67985	firstatpos
3216	maxRAMMB);
5221	((jjbitVec1[i2]
44039	U+1D95:
33111	assertTrue("Iterator
59038	multimmapindexinput
65353	inputcount
59717	"\2\u0107\1\266\1\u0107\3\266\1\u0107\1\266\1\u0107\1\266"+
17686	visiting
55976	SegmentTermPositionVector
67440	assertFalse(segmentReader1.normsClosed());
21856	NO_STRINGS;
11504	"\1\u0332\4\u04ff\2\0\1\u04ff\15\0\1\u04ff\6\0\1\u0501"+
39686	starts;
60963	"\175\0\1\u0101\24\266\1\u04ea\5\266\1\142\12\266\1\0"+
44798	U+1D96:
4613	conf.getMaxThreadStates());
5218	((jjbitVec1[i1]
52168	frequent
50634	IndexWriterConfig#getMergePolicy()}
52371	IndexReader.open(dirs[i]);
64173	u0000ne
15604	dirToTest.close();
16824	SegmentReader.getOnlySegmentReader(origReader);
29234	this.offsets[currentPosition]
4689	IndexWriterConfig.class.getDeclaredFields())
29103	get(docNum,
5397	cachingtokenfilter
65804	doConjunctions(int
49268	newBooleanQuery(positionCount
188	DOCS
38089	plusInf
22880	//TODO:
14785	DOC:
54613	testmaxsize
23938	tryincref
20346	151's
59421	"\25\0\2\32\6\0\3\32\15\0\1\32\226\0\1\32"+
60892	"\13\266\1\u04b6\16\266\1\142\12\266\1\0\3\137\1\0"+
14761	DOC)
14689	DOC.
52749	System.out.println(i
62907	System.out.println(j
14767	DOC,
9054	pos2++;
21766	stored}
19322	emaillist
13432	u0107
48800	Field(testFields[i],
13431	u0106
13434	u0109
13433	u0108
7024	NumericUtils.IntRangeBuilder()
13428	u0103
13427	u0102
18609	"Ø¹Ù",
13430	u0105
13429	u0104
13426	u0101
68152	posUpto="
12036	u0100
10120	"\1\65\1\66\1\0\1\25\2\0\1\25\1\140\1\352"+
33424	getChecksum()
11624	"\13\0\1\u0325\161\0\4\u0558\2\0\1\u0558\15\0\1\u0558"+
29038	Arrays.fill(tvdLengths,
8960	enumerated
34522	readertermsindexdivisor
63669	x76321
62132	org.apache.lucene.index.MultiReader;
27305	"\u003A\u0308\u0030",
40447	enumerates
50902	IDs,
29219	String[numTerms];
44312	U+1D91:
34921	SpanPositionRangeQuery(sfq,
3227	IDs.
43675	GregorianCalendar
16367	CharFilter
3420	subset
1295	testExceptionOnCtor()
12038	u0116
13444	u0115
62239	nestedvalue1
56935	"\2\24\7\0\1\24\4\0\2\30\7\0\1\30\4\0"+
13443	u0114
13442	u0113
52480	buf_size_long
33427	main.close();
13447	u0119
13446	u0118
29387	numLeft;
42000	toutf32
13445	u0117
50821	successfully)
13441	u0112
62240	nestedvalue2
7810	u0111
54148	enableicrements
13440	u0110
16444	successfully.
13436	u010b
615	writer.updateDocuments(idTerm,
13437	u010c
56093	"pre*")),
4442	10f,
2988	setnextreader
12044	u010d
13438	u010e
13439	u010f
38401	r.getIndexCommit();
49194	addClause(List<BooleanClause>
24095	inherited
16921	haschanges
36281	experimental):
55828	assertTrue(r3.getVersion()
13435	u010a
44468	U+1D92:
13459	u0125
43503	assertEquals(n,bv.size());
13458	u0124
13461	u0127
36206	arcIdx;
63909	highlightedText.codePointAt(j);
13460	u0126
57181	set...
13462	u0129
13262	u0128
4302	System.out.println("
65925	two");
13455	u0121
13454	u0120
13457	u0123
13456	u0122
13482	u0140
13483	u0141
13486	u0144
13487	u0145
52356	addToEmptyIndex,
13484	u0142
13485	u0143
13489	u0148
13490	u0149
2588	org.apache.lucene.search;
66594	"ab",
12059	u0146
13488	u0147
50223	pendingCommitChangeCount;
13465	u012c
13464	u012b
3348	acceptdocsoutoforder
13463	u012a
13467	u012f
12048	u012e
13466	u012d
32004	stores)
49904	minimumsimilarity
25441	CacheEntry
13468	u0130
13469	u0131
12861	u0132
13470	u0133
13471	u0134
2046	//System.out.println("
13472	u0135
13473	u0136
53369	chunkSize);
13474	u0137
39052	unmodifiableMap
13475	u0138
13476	u0139
36055	TermRangeQuery(
66752	sort)</code>
13449	u011b
13448	u011a
4676	IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);
13451	u011d
13450	u011c
13453	u011f
13452	u011e
64172	u0000ce
13519	u0166
13520	u0167
13517	u0164
8127	chunkSize))
62732	Sort(randomSortFields);
13518	u0165
13515	u0162
13516	u0163
49310	DateField.dateToString(d1);
13513	u0160
13514	u0161
57159	endWord)
9984	"\1\320\1\321\1\322\1\323\1\324\1\136\1\325\2\326"+
57166	endWord,
13521	u0168
13522	u0169
29930	"\2\53\1\0\1\53\4\0\1\53\1\0\1\53\2\0"+
13495	u014e
42325	set.",
66787	<code>getBytes()</code>
13494	u014d
13493	u014c
13492	u014b
24760	false).setMissingValue(new
13491	u014a
51391	synchronized,
57855	synchronized.
51614	synchronized)
419	agreements
57311	pos=newLen;
13496	u014f
13500	u0153
1558	index.seekEnum(enumerator,
13501	u0154
39970	norms(String
13502	u0155
13503	u0156
42044	comparators[0]
13497	u0150
13498	u0151
61125	"\1\u0583\6\0\12\u0583\1\u053b\13\0\1\u033c\160\0\1\u03a1"+
13499	u0152
13504	u0157
13505	u0158
27078	"\n\r",
13506	u0159
6953	LONG_NEGATIVE_INFINITY
26452	(finalShift
33548	bbb,16,19
13478	u013b
13477	u013a
13479	u013d
42355	reader.termPositions(terms[i]);
12460	u013c
45418	SQUIRREL
53479	int[terms.length];
42404	byte[n];
39407	4800,
14559	hiragana_type
13481	u013f
13480	u013e
29949	"\1\64\37\0\1\64\1\0\2\64\16\0\1\64\4\0"+
62763	shardIDX
59731	"\2\77\1\100\1\0\1\26\2\0\1\25\1\u011b\32\36"+
21700	!failed.get())
785	super.reset();
14770	getType()
46016	,"(w)",
52549	supposed
13549	u0185
13548	u0184
13547	u0183
13546	u0182
40141	this.topReader
13553	u0189
13552	u0188
13551	u0187
13550	u0186
13544	u0180
39921	starts,
13545	u0181
53598	starts)
53558	Steps
12049	u016b
13524	u016c
29646	"\1\142\30\0\5\142\41\0\6\132\2\0\6\132\2\0\6\132\11\0"+
13523	u016a
13527	u016f
13525	u016d
13526	u016e
61384	"\1\u065f\6\0\12\u065f\1\u0636\174\0\1\u0349\4\u065f\2\0"+
46692	,"{",
13537	u0179
64262	tells
312	reader.deleteDocuments(searchTerm);
58101	pp2.position)
20316	triggering
15323	r.numDocs());
13530	u0172
41643	'i',
13529	u0171
13532	u0174
13531	u0173
13534	u0176
13533	u0175
13536	u0178
13535	u0177
56152	assertEquals("med,med,T,T,c",
29976	"\1\103\1\0\1\103\2\0\2\103\1\0\3\103\1\0"+
13528	u0170
37030	writer.writeByte(flags);
13507	u015a
58109	pp2.position;
13508	u015b
13509	u015c
63159	1).totalHits;
13510	u015d
28340	subScorers[lchild]
13511	u015e
13512	u015f
13571	u019b
5754	BLOCK_SIZE
13570	u019a
6100	TestSimpleAttributeImpls.assertCopyIsEqual(t);
60620	"\1\351\1\u03e8\31\232\1\352\12\232\175\0\1\351\32\232"+
53407	out.copyBytes(this,
31913	IntParser()
60502	"\5\232\1\u037f\23\232\1\u0380\1\352\12\232\175\0\1\u0101"+
60249	"\1\352\4\232\1\u0291\5\232\175\0\1\351\10\232\1\u0292"+
49758	jj_expentry;
3379	calls,
22591	testattributeimpl
32242	NativeFSLockFactory
21371	2000);
13559	u018f
39624	isindex
51157	runningMerges.size()
26698	calls.
32784	testsinglebinaryroundtrip
13557	u018d
31191	"22.nocfs",
13558	u018e
30752	Java5CharacterUtils();
13555	u018b
13556	u018c
36688	arc.arcIdx*arc.bytesPerArc);
41256	ord="
13554	u018a
32587	charArrayDump(encoded,
56968	EMAIL;
52481	longtoprefixcoded
13568	u0198
40164	top.term;
13567	u0197
13569	u0199
38900	toInc,
13564	u0194
13563	u0193
54343	English
13566	u0196
13565	u0195
32658	10];
13560	u0190
13561	u0191
43811	assertTermEquals("Y",
13562	u0192
33124	assertFalse("There
13542	u017e
13543	u017f
18594	Ø¨Ø§ÙØ£Ø±ÙØ§Ù:
38898	toInc;
59865	"\1\u0166\6\0\12\u0166\1\u0167\13\0\1\u0126\160\0\1\u0168"+
13538	u017a
13539	u017b
13540	u017c
13541	u017d
34617	spans.end(),
20124	coord++;
18541	"Õ´Õ«Õ¬Õ«Õ¸Õ¶",
22827	({@code
22798	(this.lowerVal
40106	others),
29627	"\1\0\13\132\2\0\4\132\5\0\5\132\4\0\1\132\21\0\51\132"+
8877	#match}
61263	"\2\0\1\u05ff\15\0\1\u05ff\6\0\1\u0601\1\u0603\1\u0602"+
13575	u019f
65200	frontier[idx].inputCount++;
13574	u019e
64292	million
13573	u019d
13572	u019c
30311	commit(null);
68153	posUpto);
6941	java.io.IOException,
43322	indexesOf(String[]
19464	IOUtils
54807	abnormally
48276	lastEnd)
18209	highlighting
8764	testID)),
47545	strikethrough
25559	badness
67661	stopped
37833	LetterTokenizer(Version
16916	multireader
62317	FieldMaskingSpanQuery(q1,
43422	initbytes
4171	count"+type,
67142	Map<String,TermVectorEntry>
60118	"\12\u0216\13\0\1\u01d3\162\0\4\u0217\2\0\1\u0217\15\0"+
21104	TimeUnit
54155	double-checkindex
15773	write(IndexOutput
48924	testfieldsstoreoff
33746	higher.
59508	"\1\100\1\0\1\26\2\0\1\25\1\152\32\36\1\142"+
52689	this.getClass().hashCode();
34652	result.addDetail(payloadBoost);
54286	org.apache.lucene.util.BytesRefHash#addByPoolOffset(int)}
29378	advancing
35295	curstorepayloads
21196	characteristics
54064	stopWords);
41483	assertEquals(Util.toIntsRef(new
57279	BitUtil.ntz(word);
26767	spans.end();
37200	writeint
67944	k");
65143	compiled
27221	"\u0041\u0001",
35402	compiler
33130	testDefaultAttributeFactory()
30395	preparecommit
60355	"\1\u02f3\15\0\1\u02f3\6\0\12\u02f3\1\u0228\13\0\1\u0126"+
63320	0x732,
26637	testnorms
33263	iterator.hasNext();)
40469	TokenStream#reset()}.
6909	.append(maxInclusive
29955	"\1\64\4\0\1\64\1\0\1\64\2\0\2\64\1\0"+
32142	buffer[newUpto]
4511	checktermcounts
31748	IndexUpgrader.class.getName()
7499	vectorSliceReader
15324	for(IndexReader
67827	lmp.setMaxMergeDocs(3);
9303	"\1\237\10\235\2\237\2\235\1\237\23\235\1\240\1\234\1\227\1\240"+
26944	"\u0001\u0308\u000B",
18900	String[]{"21.35"});
40766	fst.getFirstArc(new
9133	(IndexOutput)
57741	150X:
49775	(oldentry.length
35010	filterIter.nextDoc();
54198	newHash(ByteBlockPool
43394	newBytes
25736	mapofset
19533	Closeable...)
3137	float[nextLength];
9634	"\2\uf283\2\uf326\2\uf3c9\2\uf46c\2\uf50f\2\uf5b2\2\uf655\2\uf6f8"+
19631	posEnum;
33570	i,8,9
28046	"\u0031\u002E\u2060\u0308\u002C",
23177	highest
36963	nextCount;
59236	"\2\25\10\0\2\25\2\0\2\25\5\0\3\25\5\0"+
58110	pp1.doc
53848	testCodePointAtCharArrayInt()
60420	"\3\266\1\u032d\6\266\1\0\3\137\1\0\2\137\1\140"+
4398	descending
31367	"Lu\uD834\uDD1Ece\uD834\uDD60ne")),
51310	"stick"
20080	ArrayList<Weight>(clauses.size());
3273	Reused
28813	output.getFilePointer();
55279	assertEquals(freq1[j],
88	java.io.IOException;
28263	definition
35937	insertDoc(writer,
22484	buffer.append(',');
53234	chhalf
2269	payloadField
63319	0x731,
67380	assertEquals(subReaders3.length,
6045	20000;
19637	posEnum,
37087	startNode="
49895	getdateinstance
22155	started
41396	(args[idx].equals("-ords"))
385	reader.deleteDocument(0);
38413	assertFalse(c.equals(r3.getIndexCommit()));
54071	log("Stop:
61204	"\1\u0349\4\u05c5\2\0\1\u05c5\15\0\1\u05c5\6\0\12\u05c6"+
11495	"\1\u0325\214\0\12\u04fa\14\0\1\u0325\214\0\1\u04d5\1\u04fb"+
15936	check_dir
1770	FORMAT_LUCENE_3_2_NUMERIC_FIELDS;
7968	supports
34393	accounting
14718	FLOAT);
31199	"30.nocfs",
18358	q1.add(tq("dek",
8665	addattributeimpl
59365	"\153\0\1\25\5\0\1\25\2\0\3\25\7\0\1\25"+
57026	java.util.BitSet
59234	"\3\25\2\0\1\25\2\0\3\25\1\0\1\25\6\0"+
6811	this.min
2654	"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero",
15087	lazyFieldNames
26617	results.length
52253	waitupdate
649	stopTime);
67050	SeeksCountingStream(ii);
10461	"\41\0\1\25\1\65\7\0\1\65\2\0\1\25\1\0"+
65386	(initialCommit)
23313	System.out.println(Thread.currentThread()
7751	lmp.setUseCompoundFile(false);
39239	one-term
43299	MapFieldSelector(String...
60999	"\1\u0507\15\0\1\u0507\6\0\12\u0507\1\u047e\13\0\1\u02e1"+
533	java.util.Random;
37237	minincountderef
57815	assertNotNull(reader3);
2923	setNextReader(IndexReader
34466	IndexWriter#getReader}.
48151	Comparator<Spans>()
63332	0x752,
27850	"\u0061\u002C\u000B",
33385	lastval
37946	GCed:
64483	(moreInclude)
7148	readobject
66167	bigSearcher.close();
59202	"\3\uefed\3\uf090\3\uf133\3\uf1d6\3\uf279\3\uf31c\3\uf3bf\3\uf462"+
15653	advanceDelGen()
45553	U+1D89:
21387	in.seek(1099);
63334	0x753,
58822	String(utf16.result,
15318	answers[id]
688	checking
63331	0x751,
24956	parsefloat
53394	outOfMemoryError;
28202	Collector}s
40707	Sequence-of-bytes
55223	(len1==0)
28381	CharsRef
49008	Alternative
48519	visitProhibited(P
54790	(!(obtained
32461	(RUN_TIME_MSEC);
23904	future
1324	CannedTokenStream(
26830	char[ArrayUtil.oversize(buffers.length+1,
26318	Encodes
33978	rgs)
45147	U+1D87:
62501	similarity.coord(2,
60041	"\1\25\1\u0196\32\36\1\142\2\u0197\1\333\2\u0197\2\333"+
52027	mergingsegments
59359	"\2\25\121\0\1\65\1\0\2\25\3\0\1\25\4\0"+
49389	newFuzzyQuery(t,
58888	default_buffer_size
9513	"\0\u8b71\0\u8c14\0\u8cb7\0\u8d5a\0\u8dfd\0\u8ea0\0\u8f43\0\u8fe6"+
35920	super(r);
651	doFail
9258	mergesort
61043	"\32\266\1\142\7\266\1\u0536\2\266\1\0\3\137\1\0"+
30860	Source
31295	WhitespaceAnalyzer(TEST_VERSION_CURRENT)));
48781	token.pos
61339	"\1\u0614\4\u02e2\175\0\1\u034d\32\u02e2\1\u034e\3\u02e2\1\u063e"+
49822	p.next
6713	<b>Important:</b>
34517	indexwriterconfigs
52701	"TEXT";
4318	distance*noDocs+startOffset;
45429	U+1D88:
32964	lastOffsets
10980	"\3\264\1\u0367\6\264\1\0\3\136\1\0\2\136\1\137"+
11261	"\4\u0449\2\0\1\u0449\15\0\1\u0449\6\0\12\u0449\1\u039f"+
38478	assertTrue(indexedFieldNames.contains("tvpositionoffset"));
38045	-3000,
8456	assubclass
6492	stringwriter
30746	Character-related
38270	Collections.<Integer>emptyList());
21898	#readByte()}
44986	U+1D85:
67891	lastOffset;
60897	"\1\u04ba\6\0\12\u04ba\1\u04bb\13\0\1\u033c\160\0\1\u03a1"+
11110	"\2\136\150\0\1\376\17\264\1\u010b\12\264\1\141\12\264"+
27423	"\u0030\n",
56506	"spans("+SpanOrQuery.this+")@"+
6673	uniform
6537	fewer,
4453	10L,
27153	"\u000B\u0308\u0061\u0027\u2060",
41452	builder.add(Util.toIntsRef(new
43690	per-se,
25241	"hi*",
16139	SimpleScorer();
28421	c.append(new
45070	U+1D86:
20282	booleanscorer2
64108	System.arraycopy(utf8Bytes,
19425	matchallbits
24408	ShortParser");
26128	queuefull
44626	U+1D83:
34155	rptgroups
66675	//super.prevSysErr.println("---");
8791	verifies
19951	this.map
5325	jjmatchedKind;
51358	commitInternal(Map<String,String>
53685	paged
6813	this.max
20713	this.data;
2803	verified
32746	0xFF);
65745	(TypeAttribute)
57104	getNumWords()
57033	<th>union</th>
26117	Entry
30435	porterstemfilter
11485	"\6\0\1\u04f5\2\u04f6\1\u04f5\5\u04f6\1\u04f7\14\0\1\u0325"+
44899	U+1D84:
33336	userData=commit.getUserData();
52753	topdocs.scoreDocs[i].doc;
32375	testlockfactory6
11869	zzEOFDone
32377	testlockfactory7
40474	#close()}
19776	chunkstart
53457	<code>Searchables</code>.
52119	underway
31394	"6");
41567	assertEquals(actual,
28021	"\u0031\u002C\u0031\u003A",
10320	"\1\316\1\317\1\320\1\321\1\322\1\323\1\324\1\136"+
55666	Thread[NUM_THREADS];
21950	byte[BufferedIndexInput.BUFFER_SIZE];
56237	m.getName();
30131	ThreadResources
44310	U+1D81:
58689	maxTF;
24494	full);
2612	TIME_ALLOWED
27954	"\u0031\u0027\u0030"
63543	indexArray
4662	assertEquals("method
36817	queue.add(new
32360	lockscreated
40784	List<FST.Arc<T>>
25557	valMap.get(value))
27840	"\u0061\u0027\u2060\u0031\u002C",
31286	_TestUtil.rmDir(oldIndxeDir);
19762	chunkstate
10069	"\25\0\2\76\6\0\3\76\10\0\1\26\4\0\1\76"+
44534	U+1D82:
53711	pages
3098	maxDocsToCache)
52277	this.docFreq
7555	Lexical
20051	BooleanClause(query,
43899	Alternating
27974	"\u0031\u0027\u0031"
25664	non-null/non-empty
58692	maxTF)
3189	maxDocsToCache;
31990	telling
24465	testEmptyFieldSort()
29726	"\12\0\1\25\24\0\1\25\1\0\1\26\7\0\2\25"+
58703	maxTF,
42701	mergecount
48926	tokenupto
34253	ramBufferSizeMB;
37130	readonlyfst
16494	pop()'s
34113	termGroups(LinkedHashMap<Term,Integer>
531	java.util.ArrayList;
10782	"\4\264\1\u02a4\25\264\1\141\12\264\1\0\3\136\1\0"+
64451	best_compression
63675	x76431
41674	Builder.UnCompiledNode<Long>(b,
44178	U+1D80:
63676	x76432
59749	"\3\174\10\0\1\65\4\0\1\174\236\0\2\65\231\0"+
65822	random.nextInt(maxOuterClauses-1)+2;
23330	numThread
31651	u0000
6534	TermRangeQuery}
29311	TermDocs.
51022	mergeMaxNumSegments
28143	u0001
2962	multithreaded
63673	x76421
20375	empty,
62775	mergedHits.scoreDocs.length));
65133	parent.replaceLast(lastInput.ints[lastInput.offset
6979	LinkedList<String>();
51592	participating
54899	AtomicLong(1);
54126	(bufferedState
7390	page'
42265	copy;
23707	page,
16099	SimpleScorer
31822	c.setIndexDeletionPolicy(new
3099	maxDocsToCache);
21160	TermDocs}
38269	Collections.<Long>emptyList(),
8227	copy,
21987	violation
37740	MED_PRIORITY);
26991	HYPHEN
21940	copy.
62619	testParenthesisMust()
32215	testSimpleFSLockFactory()
56597	verifyCommitOrder(commits);
15595	IndexFileNames.COMPOUND_FILE_EXTENSION;
34415	ramBufferSizeMB)
10400	"\12\230\1\347\12\230\175\0\1\346\2\u016a\2\230\1\u016a"+
59597	"\1\36\2\355\12\36\1\142\12\143\1\66\1\137\1\144"+
57212	flip(long
19737	chunkEnd)
46097	"á»¹"
28153	u0041
64983	pruning.
62769	mergedHits
53251	Builder,
5667	floattobyte315
27488	"\u005F\u0308\n",
20560	this.collator
28176	u002e
64961	pruning:
57440	x98761234
28187	u002d
28159	u002c
37088	startNode);
65891	TestMultiFieldQueryParser
28191	u0036
28192	u0037
581	Field.Index.NOT_ANALYZED,
37974	valueiterator
1678	terms_extension
28188	u0033
61306	"\1\u062d\175\0\4\u062e\2\0\1\u062e\15\0\1\u062e\6\0"+
266	"aaa"
28189	u0034
28190	u0035
38178	"inner
40096	dir));
28162	u0030
28175	u0031
19086	"<HIRAGANA>",
9937	"\1\56\2\0\1\57\4\0\1\177\14\0\1\61\4\0"+
48541	visitprohibited
35712	leading
28296	scoreMax)
67611	KeepAllCommits()).
39581	lastTi.proxPointer
67945	testMockGraphTokenFilterOnGraphInput()
28161	u0027
20558	CollationKeyAnalyzer(Collator
28193	u0025
31457	.setMergePolicy(mergePolicy);
10488	"\1\u0196\6\0\12\u0198\1\u0197\13\0\1\u0122\160\0\1\u0163"+
303	data
57187	instruction.
19824	"+resID+"
5394	date
66595	"aab"
28186	u0024
53338	allowdouble
17590	w1.addDocument(d2);
42702	numstartdocs
50640	this.mergeScheduler.close();
28147	u000b
52465	TOKEN_TYPE_LOWER_PREC);
19390	Bits
41782	allPrefixes.add(s.substring(0,
19821	"+resID);
20324	cached");
33160	src2.addAttribute(TypeAttribute.class).setType("bar");
33572	"aaaa
21634	non-wildcard
47804	dash
26327	(input.hasArray()
35136	functions)
5588	orig_floatToByte_v13(5.8123817E-10f));
20997	IndexReader.open(startDir);
31250	ourselves):
37957	(this.get()
52864	THIRD
16390	snapshotDir
9187	Query[]
28597	charsRead;
26547	DocHelper.unindexed.size());
59426	"\15\0\1\33\226\0\1\33\247\0\2\33\12\0\1\33"+
10243	"\2\u0103\2\264\2\u0103\1\264\2\u0103\1\264\1\u0103\3\264"+
24313	a,d)
28178	u006e
37216	readlabel
48754	TERM_FREQ
58243	text[],
890	sawAppend
49169	setDateResolution(String
65194	minimize/compile
28183	u0079
53899	assertEquals("orld",
28179	u0074
49839	alternative
48371	(nrScorers
36761	shouldExpand(UnCompiledNode<T>
3644	mergespec
42195	PositionIncrementAttributeImpl();
28301	subScorers[root].docID()
28164	u005f
49915	u005c
64944	threadcount
60457	"\3\u0219\3\0\1\u0219\1\u021b\3\0\2\u0219\150\0\34\u021e"+
21506	os.getFilePointer();
7411	fieldInfo);
28177	u0063
6404	(CharStream)input
28182	u0062
28173	u0061
37186	incounts
65425	ord("pear")=1
42985	x0a45aa31
54958	newSearcher
35616	pop_union(long
790	doc.add(newField("field",
34032	ArrayList<OpenBitSet>
44034	U+1D8F:
37062	wasted="
53047	0xFFFF
15859	IndexFileNames.PLAIN_NORMS_EXTENSION);
24706	scoreMap;
53132	temp,
29511	inbeforeclass
40829	(Builder<Object>)
24987	undefined
40993	fstEnum.next()
66008	assertEquals("(b:one^5.0
62799	FieldDoc)
36031	filteredquery.setBoost(boost);
21770	ScoreDoc#doc},
6971	NumericUtils#splitLongRange}
60698	"\1\u0428\1\u02e2\1\u034e\12\u02e2\175\0\1\u034d\2\u02e2\4\u0428"+
20246	this.clauses.equals(other.clauses)
53133	temp;
53889	(Version
16961	testclosestoredfields
46161	U+1D8E:
42850	newStartOffset,
11403	"\15\0\1\u0484\6\0\12\u0484\1\u0340\174\0\1\u0163\4\u04b6"+
28156	u003a
57418	x03f
55299	assertTrue(offsets2
60981	"\15\0\1\u04f6\6\0\1\u04f7\2\u04f8\1\u04f7\5\u04f8\1\u04f9"+
4056	shift
64826	numNext="
58717	tdocs.seek(tenum);
56615	numToKeep;
54106	log("--->
23668	testmaxbuffereddeletes
144	100;
51632	Bind
32069	maintaining
56618	numToKeep)
25820	buffer.append(inOrder);
20446	String[5];
46027	U+1D8D:
40974	(seekResult==null
23414	101,
54355	STOP_WORDS_SET);
67790	o.termBuffer[i])
34991	getFilteredScorer(final
34532	InputStreamDataInput
42882	newStartOffset;
41819	matches.subList(topN,
51599	MergePolicy.MergeAbortedException("merge
54507	assertTrue("cost
20748	clone.data
66998	ObjectOutputStream(bos);
48167	Spans[clauses.length];
22991	concrete
52164	triggermerge
58711	percentDocs);
40046	100%
45938	U+1D8C:
41334	100)
172	100,
5852	adjusted
3479	1000
54310	newhash
3803	might
373	SlowMultiReaderWrapper(IndexReader.open(dir,
8743	delID);
62934	"deletable");
31267	assertFalse("uncompressed
38362	x00l
50213	hitOOM;
3470	(aborted)
43857	<char>
22316	getSorter(final
39115	ArrayList<Term[]>();
42659	TestForceMergeForever
67139	Mapper
6665	precision).
29978	"\1\116\1\0\2\116\16\0\1\116\4\0\1\116\2\0"+
58537	setCaseSensitive);
42982	newtype
20562	CollationKeyFilter(result,
5441	jjchecknaddstates
37652	i=0;i<num;i++)
67120	src.setMaxTokenLength(ClassicAnalyzer.this.maxTokenLength);
31381	WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));
33056	flagsAtt
45623	U+1D8A:
29048	lastTvdPosition
63324	0x742,
56781	testKeepLastNDeletionPolicyWithCreates()
62434	DisjunctionScorer,
1294	super.openInput(name);
66776	buffer.append(fields[i].toString());
15075	assertTrue(field
18314	DocIdSetIterator.NO_MORE_DOCS);
58130	dedicated
10834	"\1\u02d9\1\u02db\1\u02da\2\u02d9\2\u02da\1\u02d9\1\u02da\1\u02d9"+
42654	writer.infoStream
8137	(BufferUnderflowException
37745	105)
63323	0x741,
38751	dictionary.",
31171	createIndex("index.nocfs",
46853	alternating
65309	isFinal)
63326	0x743,
43384	~VB1);
18132	(exists)
67832	lmp.setMaxMergeDocs(2);
33169	getFlags()
40376	sd[j].doc,
63165	toHexString(text)
48364	nrScorers
50528	OpenMode.APPEND).setIndexDeletionPolicy(deletionPolicy));
4020	max_word_len
4823	testdefaults
14864	(Integer)
49641	somehow?
3730	org.apache.lucene.analysis;
11934	Resumes
27673	"\u0061\u2060\u0308\u0061\u003A",
60614	"\1\232\1\u03f1\30\232\1\352\12\232\175\0\1\351\32\232"+
22234	float[oversize(minSize,
54497	copyCost
59744	"\1\u0120\15\0\1\u0120\6\0\12\u0120\1\u0121\175\0\4\u0122"+
22605	100x
52020	hitoom
23255	"c"};
16439	(IllegalStateException
20667	assertTrue(Arrays.asList(dir.listAll()).contains(name));
3258	1024
67631	FieldCache.DEFAULT.getInts(subs[0],
3349	order
36636	isFinal;
32415	fb.toString();
4593	conf.getSimilarity());
59328	"\2\0\1\25\1\152\32\36\1\142\12\43\1\0\1\137"+
28262	scoreMax;
16130	2.6356435f,
24391	val.charAt(0)
60143	"\1\u0228\13\0\1\u0126\160\0\1\u0168\4\u0227\2\0\1\u0227"+
5740	Packed32}
18399	assertEquals("score0
5143	0x80000000L)
50724	config.getRAMBufferSizeMB();
66218	i<num;
61360	"\1\u034e\3\u02e2\1\u03c1\6\u02e2\175\0\1\u034d\24\u02e2\1\u0653"+
36269	nodeAddress
23416	102,
43061	release(newReference);
386	reader.deleteDocument(1);
33250	"keep
20660	(NoSuchDirectoryException
23994	"HAT",
62378	s(int
57672	getlastcumulativediff
35522	A[i+2],
30098	CloseableThreadLocal<ThreadResources>();
56681	assertTrue("commit
62632	d.add(newField(
61037	"\4\0\2\137\150\0\1\u0101\3\266\1\u0532\26\266\1\142"+
43522	bv.clear(i);
50631	mp);
1134	generation
40699	o2);
24255	"DHFBJ");
62946	Arrays.sort(files2);
57696	close":
33771	PhrasePositions
23838	release(IndexSearcher
41684	nothing;
15615	nothing:
16336	keyfield
19092	"ãµã",
3887	nothing.
36266	byte[128];
21318	dir.openInput("d2");
59635	"\1\67\1\0\1\25\2\0\1\25\1\141\3\36\2\355"+
48358	<code>minimumNrMatchers</code>
57720	close",
55766	fail("failed
43563	i=count1;
10967	"\1\u0360\10\230\175\0\1\346\24\230\1\u0361\5\230\1\347"+
65708	--count;
53473	this.dfMap
2893	docBase
66947	write(Pair<A,B>
25566	badness));
40658	ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);
41822	hit=0;hit<r.length;hit++)
1093	close")
33404	java.util.zip.CRC32;
2481	ignore
17707	ScoringRewrite.SCORING_BOOLEAN_QUERY_REWRITE;
25674	CacheEntry.toString()
7251	illegal
48941	getdocumentnumber
23600	taking
58561	NPE");
14784	buffer.append("<score>");
42518	somedata
16315	spannotquery
34536	EOFException();
22878	(candidate.size()
52617	(Float.floatToIntBits(boost)
29568	"\4\0\2\132\1\0\3\132\2\133\2\0\12\134\2\132\17\0\3\133"+
37721	conf.getMergePolicy();
55203	(len1>0)
691	close()
503	exception
65482	policies
19072	"<IDEOGRAPHIC>",
32940	docState.testPoint("TermVectorsTermsWriterPerField.newTerm
55003	TestStressIndexing2
42418	assertByteArrayEquals(byte[]
1544	@AfterClass
51416	IndexWriterConfig.DISABLE_AUTO_FLUSH
11360	"\10\230\1\u0493\21\230\1\347\12\230\175\0\1\346\31\230"+
36664	IllegalArgumentException("cannot
26721	(more
4885	logdocmergepolicy
3358	num_bytes_float
8750	idsList
25666	this.msg
64535	moreexclude
10215	"\6\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
37262	abscount
55212	info2[len2]
55058	o1.name().compareTo(o2.name());
17160	(fieldInfos.hasProx())
57426	andnotcount
40660	BytesRef(Integer.toString(idx));
49473	jj_consume_token(AND);
37554	found"
10083	"\1\0\1\77\1\25\1\0\1\25\4\0\3\25\1\0"+
55744	(!multiSegment)
48994	thread-safe.</p>
22660	found,
40853	fst.getNodeCount()
37288	ignoreCase
17082	fieldtoterms
36960	absCount;
30422	testWithKeywordAttribute()
30889	EMPTY_TOPDOCS;
17401	terms[],
31864	found.
41219	100000
15402	sizebytes
28526	stringfldstoredtest
9506	"\0\u686c\0\u690f\0\u69b2\0\u6a55\0\u6af8\0\u6b9b\0\u6c3e\0\u6ce1"+
15306	random.nextDouble();
48573	UnsupportedOperationException("You
7539	Manager
57990	tvx.getFilePointer()
50397	readerMap.remove(sr.getSegmentInfo());
29997	StandardTokenizerImpl31(java.io.InputStream
31817	found:
37651	w.addDocument(d);
29093	found;
37076	totWasted);
14571	inputstreamreader
5948	((value
17398	terms[];
33967	!rptTerms.isEmpty();
20766	getdata
24945	lastsub
35272	skipBuffer.writeVInt(delta
55550	DocHelper.createDocument(
52880	DAMAGES,
64539	BufferedIndexInput()
51511	commitMerge(MergePolicy.OneMerge
34060	PhrasePosition,
65681	deleteFiles(List<String>
59977	"\175\0\1\u0168\4\u01a1\2\0\1\u01a1\15\0\1\u01a1\6\0"+
33758	PhrasePosition.
9947	"\1\56\2\0\1\57\4\0\1\167\14\0\1\61\4\0"+
24971	comparebottom
52387	getprocessor
33581	10000;
32108	newSlice(final
29439	org.junit.*;
29562	"\41\132\11\133\2\132\2\0\1\137\1\0\1\132\5\0\26\132\4\133"+
14725	FieldCache.DoubleParser)
43876	/break;/
8517	<code>reader2</code>
4312	lower
67783	this.termLength);
51635	SegmentInfo(newSegmentName(),
61334	"\11\u02e2\175\0\1\u034d\1\u063e\31\u02e2\1\u034e\12\u02e2\175\0"+
15005	terms[j]
10031	"\126\0\2\25\2\0\2\25\4\0\3\25\4\0\1\25"+
36867	by-depth
34841	this.prevEndOffset
2303	this.numSeen
66308	nextPerThread.addField(docInverterPerField,
10245	"\1\u0117\32\36\1\141\12\326\1\0\1\136\1\151\1\136"+
22136	CODE
55260	d2[i];
31451	_TestUtil.rmDir(outputDir);
29079	Pointer:
29786	"\5\0\1\44\3\0\1\105\11\0\1\46\2\0\1\106"+
56736	MockAnalyzer(random)).setIndexCommit(lastCommit));
15422	Cloneable
3477	wait()
30367	TwoPhaseCommit[]
7096	panfmp
53655	alltermsarray
45810	"á¹º"
67482	readersToClose.add(c.newReader);
62859	org.apache.lucene.analysis.TokenStream#next()
35000	advance()
67977	testgraphtokenizers
23404	terms[i]
57964	c.collect(0);
8214	catch(IOException
66139	analyzerreturningnull
35950	SingleCharAnalyzer();
5636	Java5
11354	"\175\0\1\346\25\230\1\u048e\4\230\1\347\12\230\175\0"+
57658	offsets[size]
50868	10,000
48933	gettermpositions
23387	testRAMDeletes()
16281	SpanNearQuery(new
4233	testRightOpenRange_2bit()
48772	positions[i][j]
9010	RAMOutputStream(buffer);
23381	Term("value",
35700	Java.
65381	TestCrash
17054	TVPositionInfo{
9809	"\4\0\2\136\2\0\1\106\1\0\1\50\1\0\1\70"+
35482	Java,
3404	ConcurrentMergeScheduler}
60351	"\1\u02ee\6\0\12\u02f0\1\u02ef\13\0\1\u0126\160\0\1\u0168"+
16808	origSegmentReader.close();
360	Document();
62141	bq1.add(nested1,
16821	clonedSegmentReader.close();
22446	clears
65626	message("delete
1323	overflowingTokenStream
8687	freed
9151	storedfieldswriterperthread
45837	"Ã¼"
26754	frees
40657	List<FSTTester.InputOutput<BytesRef>>
30474	FieldSortedTermVectorMapper(boolean
35313	Iterator<?>
18568	áá»
16040	indexerThread
11269	"\1\u044e\3\230\175\0\1\346\32\230\1\347\5\230\1\u044f"+
15475	docStoreSegment;
55357	i=0;i<nTokens;i++)
50972	ConcurrentMergeScheduler.
21263	expected.seek(seekTo);
60844	"\4\u0490\2\0\1\u0490\15\0\1\u0490\6\0\12\u0490\1\u043f"+
26964	"\u0001\u003A",
250	assertTermDocsCount("reopened
61509	rfcs
6046	buf.append("a");
37714	atLeast(225);
4883	termsindexdivisor
63816	x8765421
1155	e.printStackTrace(System.out);
39852	Preserve
56921	"\1\32\5\0\1\33\1\0\1\55\2\0\3\55\1\33"+
40198	MultiTermEnum)
16724	readOnlyReader));
37661	j=0;j<hits.scoreDocs.length;j++)
19446	this.consumer
4467	precisionstep
59817	"\1\0\2\137\1\140\1\u0143\1\u0144\1\u0145\3\0\1\137"+
33897	fillQueue()
44430	"Ã«"
59225	"\1\0\2\25\1\0\21\25\1\0\1\25\2\0\3\25"+
22622	allowed).
42134	aUpto
59027	newField("docid",
66600	testmockcharfilter
63819	x8765432
63818	x8765431
32930	clear,
26709	Searcher#search(Query,Filter,int)}
11568	"\1\u0511\13\0\1\u0325\226\0\1\u04cf\13\0\1\u0325\226\0"+
5854	valueCount
33681	dir.resetMaxUsedSizeInBytes();
45275	"Ãµ"
15561	SegmentInfo(Directory
21955	readBytes(copyBuf,
25969	Startup
21261	seekTo
18616	"Truth",
52139	newsegname
59484	"\2\0\1\50\1\0\1\51\1\0\1\52\2\0\1\53"+
16246	generating
44122	"Ã¦"
57723	cleans
29478	runClasses
34256	mergedSegmentWarmer;
20473	document.add(textField);
11249	"\12\u043d\1\0\2\u0214\1\u026d\3\u0214\1\u0216\1\u0167\1\u0168"+
51482	minGen);
32894	postings.freqs[termID];
30714	"\1\103\42\0\1\130\37\0\1\130\1\0\2\130\16\0"+
65852	q.setSlop(termsInIndex);
30606	"\5\0\1\25\2\102\5\0\1\25\2\0\1\25\1\102"+
43996	"Ã¡"
30933	0).scoreDocs.length);
35716	(int)(x);
42076	first);
26252	CODING_CASES
9080	testEqualsHashCode()
30397	testrollback
36227	FST.flag(flags,
6457	BrokenCloseable(1),
15756	getDelFileName();
32283	NativeFSLockFactory(fdir2));
5486	jjtoskip
2590	org.apache.lucene.queryParser.QueryParser;
46458	"â­"
67218	ServerSocket
58417	assertTrue(set.contains("1"));
51243	config.getTermIndexInterval(),
42159	sb.append('[');
58788	testRandomUnicodeStrings()
49217	(mods
18272	"better"
8033	platform,
15416	testexceptions
34289	maxThreadStates
67098	org.apache.lucene.analysis.WordlistLoader;
41138	(mode
1492	config.getTermIndexInterval();
42766	<code>TokenStreams</code>
2281	fieldName);
32861	numPostings
59936	"\1\25\2\0\1\25\1\141\5\36\1\355\24\36\1\142"+
7873	platforms
34375	<p>Disabled
52810	Code
41423	Random(17);
33925	(!rg[j].nextPosition())
19981	setFlags(int
53091	significant
7904	platforms,
23085	"doc1");
59915	"\1\u016f\1\232\1\u016f\1\232\1\u016f\2\232\1\u016f\1\232"+
42997	released}.
45120	"Ã±"
21668	string.charAt(s))
1239	CrashingFilter("crash",
59175	"\3\u6665\3\u6708\3\u67ab\3\u684e\3\u68f1\3\u6994\3\u6a37\3\u6ada"+
34717	blah\"",
37753	testsearchforduplicates
16135	2.2423935f,
10926	"\34\u0214\12\u0336\1\0\2\u0214\1\u026d\3\u0214\1\u0216\1\u0167"+
6143	put(PositionIncrementAttribute.class.getName()
59095	"\0\u028c\0\u1fd6\0\u0518\0\u2079\0\u211c\0\u21bf\0\u2262\0\u2305"+
1508	populate(directory,
52130	getnextmerge
33885	pp=(prev=pp).next)
48180	Would
4782	iw.setXYZ().
59388	"\1\25\1\0\2\25\123\0\1\25\13\0\1\25\21\0"+
38145	expectedShifts
38293	0x7fffef,
34716	foobar\"").toString());
11786	zzMarkedPos-zzStartRead);
35222	setFreqOutput(IndexOutput
56303	(Integer.SIZE
36865	chain.ints[0]
35287	lastSkipProxPointer[level]
40121	segmentCount;
25698	necessarily
1667	populate
30815	mal-formed
45902	"â°"
35518	twosA=(ones
10524	"\1\u013f\1\136\150\0\1\135\4\u01ad\2\136\1\u01ad\15\136"+
62259	field("last",
59589	"\1\66\1\67\1\0\1\25\2\0\1\25\1\141\4\36"+
22013	segmentname
2606	sanity
58294	b.bytes;
58937	(this.omitNorms
25450	Insanity[]
29801	"\3\0\2\25\1\0\1\25\5\0\3\25\1\0\1\25"+
57690	Arrays.fill(values,
17480	testFieldNames()
39645	TestPrefixInBooleanQuery
58407	set.addAll(Arrays.asList(words));
9727	"\17\0\1\32\6\0\1\32\122\0\1\32\1\0\1\32"+
33421	writeBytes(byte[]
39757	doClone,
64917	Thread(this);
38292	0x7fffed,
66286	postingsHashHalfSize
18869	"phrase"});
28472	testcharsequencecharat
24133	("i18n",
21659	pattern.charAt(p)
31701	analyzer.tokenStream("special",
44424	"Ã¨"
28474	testcharsequencesubsequence
39803	(!hasNorms(field))
27828	"\u0061\u0027\u2060\u0308\u0061\u003A",
6116	ts.addAttribute(SenselessAttribute.class)
4043	setoffset
5735	performance
30871	IndexableBinaryStringTools.getEncodedLength(
11093	"\3\0\1\136\4\0\2\136\150\0\1\376\3\264\1\u03c6"+
40292	updategeneration
2053	isFinal?="
32314	(e.toString().indexOf("
62659	newCounter(false);
42218	assertNull(att.getPayload());
52269	TermInfo(TermInfo
34297	OpenMode}
40208	smi.ord;
56909	"\1\40\7\0\1\41\4\0\1\42\1\43\7\0\1\44"+
54290	offsetHash.addByPoolOffset(hash.byteStart(key));
2016	scratchArc.target
43020	successful.
19961	Iterator<E>
47867	semicolon
53030	outUpto;
40979	fstEnum.seekCeil(pair.input);
52955	(out[upto++]
68069	leftoffset
56122	assertTrue(hits[0].score
3639	stringbuilder
17883	first",
7976	buffers
10271	"\2\172\25\0\2\172\6\0\3\172\10\0\1\64\4\0"+
26116	queue.fillFields(queue.pop());
40920	(output
44764	"Ã¬"
33377	expectedlastrecordid
63542	>>>=8;
23458	Integer.toString(docId)));
36737	BIT_STOP_NODE)
36492	(arc.output
18675	à¦ªà¦°à§à¦¯à¦¨à§à¦¤
54655	java.nio.*
17284	applydeletes
37742	out.println(hits.length
49745	(token.next
37344	filteringtokenfilter
43459	assertSubsetOf(new
32217	testStressLocks()
53061	String(result,
24718	Iterator<K>
43568	i=count2-1;
44002	"Ã¤"
771	CrashingFilter(String
9526	"\0\ucda9\0\uce4c\0\uceef\0\ucf92\0\ud035\0\ud0d8\0\ud17b\0\ud21e"+
15881	<code>_a</code>;
65649	lastFiles)
21312	csw.addFile("d1");
34790	PosIncrementAnalyzer());
4278	assertEquals("Returned
16551	initialize(int
54295	hash.get((-offsetKey)-1,
33519	test3to1()
22518	reflectWith(AttributeReflector
54232	assertEquals(ref,
50085	format_pre_version
45835	"Ã»"
44417	"âº"
26979	(Numeric)
29465	Properties
24882	hits.scoreDocs[hitIDX];
2530	setpayload
10034	"\4\0\1\25\6\0\1\25\122\0\1\25\6\0\3\25"+
57473	testneverdelete
5729	optimized
52135	addindexesnooptimize
35175	setLength(int
30166	get(Term
48841	(TermPositionVector)
39291	Arrays.equals(termArray1,
57246	pop(ones);
44426	"Ã©"
21188	i=0;i<terms.length;i++)
2693	d.add(newField(FIELD_NAME,
11287	"\14\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
53961	this.normSeek
48944	documentnumber
10129	"\1\364\1\36\1\352\1\365\7\352\1\366\3\352\1\36"+
43333	SortedVIntList
20681	switchdir
60062	"\1\u01e8\6\0\12\u01e8\176\0\4\u01e9\2\0\1\u01e9\15\0"+
25996	NEG_INF,
67195	getTermVectorEntrySet()
64448	setlevel
33461	maxVersion)
42061	hitB.doc;
42844	start/end
54309	newpool
30780	2");
6399	function
62960	difFiles(String[]
3872	boundaries
59992	"\7\232\1\u016f\22\232\1\352\12\232\175\0\1\351\27\232"+
65829	nMatches
56929	"\1\13\1\41\4\0\2\42\1\0\1\13\2\0\3\13"+
35758	robert
1224	doc.add(newField("id",
44000	"Ã£"
53851	cpAt3
10940	"\2\0\1\u033e\15\0\1\u033e\6\0\2\u033f\1\u033e\2\u033f"+
32107	allocator.getByteBlock();
58971	fail("Must
4178	Integer.parseInt(doc.get(field))
48126	distance(s)
18182	super.score(collector,
45681	"á¹°"
1506	mp.setUseCompoundFile(false);
28360	subscorers
66567	postingshashmask
10639	"\2\0\1\u0210\15\0\1\u0210\6\0\12\u0210\1\u0211\174\0"+
64920	runsToDo;
2687	1000);
41628	fst.isExpandedTarget(arc);
57224	0x3f));
8761	idsList[rand.nextInt(idsList.length)];
65296	"arc[-1].label="
39080	assertEquals("[test=1]",cm.entrySet().toString());
60560	"\1\u0349\4\u03ab\2\0\1\u03ab\15\0\1\u03ab\6\0\12\u03ae"+
46518	"â²"
49378	(similar
60226	"\1\140\1\u0143\1\u0144\1\u0145\2\0\1\77\1\137\4\0"+
20443	queryParser.parse("Document");
31683	segcount
6732	<li>For
52217	suppressexceptions
9334	"\12\134\2\133\3\132\1\133\13\0\3\133\1\0\11\132\1\0\3\132"+
684	MockAnalyzer(random);
57204	(endWord
35938	values[i]);
15527	Copy
51985	while(flushPending)
49668	(jj_scan_token(TERM))
62155	subQuery.setBoost(0);
35766	ntztable
24160	i<NUM_STRINGS;
7860	writing.
5312	input_stream.getEndLine();
20111	wIter.hasNext();)
4070	1000))
62	writing,
24329	searcher.doc(result[x].doc);
46530	"â³"
49138	this.operator
51966	flushing)
31747	System.err.println("
45273	"Ã´"
36489	BIT_STOP_NODE;
42571	succeed.");
11794	UAX29URLEmailTokenizerImpl34(java.io.InputStream
21912	nothing,
33340	1-30"
36211	other.target;
7076	Closes
58808	ch=0;ch<0x0010FFFF;ch++)
828	MockAnalyzer(random))
51963	flushing;
66000	MockAnalyzer(random),
59398	"\4\0\1\222\14\0\1\62\4\0\1\223\2\0\1\224"+
61462	"\6\0\12\u0585\14\0\1\u033c\160\0\1\u034d\24\u02e2\1\u0696"+
66028	(+t:two)",
25604	(rfToValIdSets.containsKey(kid))
1858	close();
20112	wIter.next();
60628	"\1\u0101\32\266\1\142\3\266\1\u03fc\6\266\1\0\3\137"+
52247	setpayloadprocessorprovider
14962	assertSubsetOf(q1,
25803	this.clauses.add(clause);
57695	"commit
23107	document.add(newField("contents",
2432	theSearcher
8039	seeks)
34335	located
65009	McCandless
57659	Arrays.toString(offsets)
41860	input.length
20604	CharTokenizer#normalize(int)}
35343	expectedIncr[]
59415	"\2\0\3\115\7\0\1\115\1\0\2\115\7\0\3\115"+
21166	seeks"
32933	recycle/reuse
6691	(bitsPerValue/precisionStep
25898	locates
17739	ConstantScoreAutoRewrite
59011	BytesRef(slice));
22121	digit
54157	.setRAMBufferSizeMB(256.0)
40149	SegmentMergeInfo(starts[i],
31599	.setMergePolicy(mp);
43038	close(),
19008	emailList.toArray(new
57753	close().
43998	"Ã¢"
49587	jj_consume_token(RANGEIN_START);
493	setinfostream
19298	she's
52693	/*******************************************************************************
38904	toInc.decRef();
11914	handling
42691	w.getReader().close();
1967	isstored
24714	m1.size();
39742	infosUpto
44163	"â·"
57570	locate.
8112	chunkSizeMask
60864	"\175\0\1\351\1\u04a3\31\232\1\352\12\232\175\0\1\351"+
55858	didclose
5815	blocks
33052	copy);
21554	seekto
55474	termPositions.isPayloadAvailable());
61251	"\160\0\1\u03a1\4\u05f7\2\0\1\u05f7\15\0\1\u05f7\6\0"+
49005	MOD_NOT
60656	"\13\0\1\u033c\161\0\4\u0413\2\0\1\u0413\15\0\1\u0413"+
58212	#utf8ToString}.
27418	"\u0030\u0001",
49958	x7da6000
25818	buffer.append("],
49150	getLowercaseExpandedTerms()
2630	noise.
48979	DateTools}
11751	Myanmar,
19503	resource3);
37358	0x3fd76c17;
55300	k=0;k<pos1.length;k++)
54119	stupid
23296	indexsearcher2
58073	numVectorFields
23295	indexsearcher1
18511	TokenStreamComponents(tokenizer,
37936	Iterator<V>
27176	"\u3031\u0308\u3031",
18100	(innerWeight
43557	doTestDgaps(int
24148	("parser",
58852	last,
22651	lowerPoint
44216	"â¸"
28847	nextTermsHash,
33257	System.out.println("Attempting
62339	s(span));
38118	NumericUtils.sortableIntToFloat(intVals[i]))==0
62420	i.length);
5778	block.
66613	block/
11957	zzAction
11806	buffer.
67835	lmp.setMergeFactor(2);
62567	coordfactors
3945	buffer,
64719	block:
1818	buffer)
15296	doc.add(nf);
32028	WeakReference.
31782	printUsage();
8971	buffer;
36956	coarse
67293	OpenMode.CREATE).setMergeScheduler(new
6726	double)</em>
56064	"all",
68038	rightTerm.toString());
41450	IntsRef();
25536	checkValueMismatch(MapOfSets<Integer,
38523	doc.getFields("bin1");
19910	"cached
19973	FlagsAttribute
53379	(total
32881	(doVectorPositions)
40856	prune2
25135	PrefixTermEnum);
5770	block,
40805	prune1
42190	_TestUtil.assertAttributeReflection(att,
41292	prune,
25683	getCacheEntries();
23717	pruned
20756	other.length)
42238	attrImpl.getClass());
55832	assertFalse(r3.isCurrent());
15071	reader.doc(0,
2386	QueryUtils.checkUnequal(boostingFuncTermQuery,
24412	MyFieldComparator
42148	other.length;
63074	tokenimage
46315	"âº"
51495	(previousReader.isDeleted(j))
20156	ComplexExplanation(sumExpl.isMatch(),
11428	"\1\141\11\264\1\307\1\0\3\136\1\0\2\136\1\137"+
2366	score
48618	(!hasMoreTokens)
25406	birds
59447	"\7\0\1\66\2\0\1\25\1\136\1\234\1\235\1\236"+
23587	rambuffer
59540	"\3\0\2\25\3\0\6\25\2\0\2\25\1\0\4\25"+
66389	pivotTerm,
19555	addSuppressed(Throwable
62427	testintsref
58484	set.contains(upperArr[i]));
17380	testThousandDocuments()
63826	indexarray
50310	N*termIndexInterval
48622	(position
12023	branches
67003	header",
36512	bytesPerArc[arcIdx]);
8632	cachedStates.add(state);
22793	FieldCacheRangeFilter
60377	"\1\351\21\232\1\u0309\10\232\1\352\12\232\175\0\1\351"+
65273	"end"
68023	left.addAttribute(CharTermAttribute.class);
28113	"\u0061\u0024\u002D\u0033\u0034\u002C\u0035\u0036\u0037\u002E\u0031\u0034\u0025\u0062",
64837	assertTrue(result);
27431	[10.0]
52578	if(splittable){
39077	Collections.singletonMap("test",1),
31161	index.<VERSION>.cfs.zip
17178	this.tis;
27942	"\u0031\u0027\u0308\u3031",
18959	("LuceneResourcesWikiPage.html"),
59573	"\12\0\2\116\1\0\3\116\1\0\1\116\2\0\4\116"+
900	LUCENE-1072:
26056	this.fillFields
56944	ALPHANUM
8015	getCleanerMethod.setAccessible(true);
47908	TwoPhaseCommit},
51975	clearFlushPending()
38897	IncThread
65397	157);
23354	"Amsterdam",
32758	charArray,
24649	runMultiSorts(Searcher
36128	Morfologik
32737	decodedLen));
2972	testtimeoutmultithreaded
41063	cmo.isFinal
8138	curBufIndex++;
33087	flagsAtt2
64313	cutoffs,
65205	forward,
60121	"\3\0\1\200\7\0\1\57\2\0\1\60\4\0\1\201"+
9004	Builds
29256	store_positions_with_termvector
31264	shouldSize,
577	Field.Index.NO));
8705	RandomIndexWriter(rand,
20761	offset+length);
28727	"/Computers/AAA"));
20070	clauses().iterator();
39691	HashMap<String,byte[]>();
54452	keywordSet)
16482	testillegalsnapshotid
56692	(pass
26829	newBuffers
35523	A[i+3])
57017	Results</h3>
54448	keywordSet;
66816	tmpFreqs
21051	corrupt,
63812	x8765321
31546	assertEquals(String.valueOf(id),
50437	ref,
9336	"\1\132\10\133\1\0\3\133\1\0\3\133\2\0\1\132\17\0\2\132"+
45877	"á¹·"
18106	this.queryNorm
6609	conventional
42713	<abbr
29642	"\4\0\12\134\34\132\10\133\2\0\27\132\15\133\14\0\35\146\3\0"+
38586	File(dirName);
58258	sliceEquals(other,
49327	DateField.dateToString(d2);
22105	NumberFormatException("chars
10966	"\17\230\1\347\12\230\175\0\1\346\32\230\1\347\1\230"+
55373	(nextInt(4))
11832	newBuffer,
57136	parity
57876	newBuffer)
42700	myindexwriter
10606	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\7\264"+
66811	tmpSet
7387	newtopdocs
40599	"commotion",
7041	forwards
56157	search.search(csrq("content",
2628	real
36008	DocIdBitSet(bitset);
33550	aa,20,22
21144	Then,
11835	newBuffer;
3925	read
7819	makeindex
37044	arcBytes
3815	useOldAPI
42090	fillFields(final
64130	is.skipChars(1);
29348	startIndex
31775	(path
49565	fuzzy=true;
63396	0x8521,
55851	adddirectoriesthreads
37970	reap
43877	length($folded)
45808	"á¹¸"
24469	Locale.ENGLISH));
9769	"\1\56\2\0\1\57\4\0\1\60\14\0\1\61\4\0"+
43817	assertTermEquals("ij",
67775	'u';
6754	These
53488	filter,int
24244	SortField.FLOAT),
30011	u09a8
39604	(termBytes[start]
9507	"\0\u6d84\0\u6e27\0\u6eca\0\u6f6d\0\u7010\0\u70b3\0\u7156\0\u71f9"+
43987	"â¶"
16661	downheap
54410	getDetails()
17964	collator),
53256	minimal!
19540	addSuppressed(th,
50454	numDeletedDocs(SegmentInfo
11102	"\1\u03ce\5\264\1\0\3\136\1\0\2\136\1\137\3\136"+
65018	minimal,
6832	happen
38415	!r2.hasDeletions());
33794	(!pp.nextPosition())
20563	collator);
64323	CutOffTermCollector(reader,
35090	switchCurrentBuffer()
11787	There
29979	"\2\116\10\0\1\52\4\0\1\116\37\0\1\52\102\0"+
46586	"â¹"
63982	'u',
48002	testfilteredsearch
6431	TestIOUtils
49413	'u')
58011	Grow
16817	refs
29719	"\3\0\2\25\1\0\1\25\1\0\2\25\1\0\2\25"+
27786	"\u0061\u0027\u0031\u003A",
52623	mergebooleanqueries
11463	"\1\u04e2\15\0\1\u04e2\6\0\12\u04e2\1\u0480\174\0\1\u0163"+
30640	"\1\0\1\34\2\0\4\34\2\0\1\34\42\0\1\52"+
31331	d.getField("id");
18425	t));
57809	(IndexNotFoundException
57437	intersects
45806	"á¹¶"
57339	intersect}
3202	later
42699	testforcemergeforever
56977	classictokenizerimpl
946	indexed",
22349	falls
5752	PackedInts.ReaderImpl
43027	ref;
6217	appear.</p>
35731	n+=1;}
61160	"\175\0\1\u034d\1\u02e2\1\u05a0\30\u02e2\1\u034e\12\u02e2\175\0"+
3917	variable
35317	assertTrue(stop
27420	"\u0030\u0308"
65165	validOutput(output);
48791	Field.TermVector
5198	jjnextStates
48030	<li>Throws
61565	u8a0d
12675	u8a21
1685	findtermthatwouldbeatindex
13076	u8a17
54853	TrackingIndexWriter
27043	"\r\u0308\u0041",
63567	circumstances.
53857	java4.codePointAt(cpAt3,
28607	GetSuffix(int
4198	f.getDocIdSet(searcher.getIndexReader()));
17872	maxIP,
43277	testtermdocs
37242	topnodemap
38687	fieldInfos2.size());
28583	newBuffer
57266	not(b))".
48463	delegate.toString()
6599	Geosciences
32857	//perThread.postingsCount
46485	"â°"
2795	late.
6879	Float.NaN}.
47899	java.lang.Object#toString()
41855	testLargeOutputsOnArrayArcs()
9078	pos1end
43453	SpanOrQuery(new
11265	"\1\346\1\230\1\u03bd\30\230\1\347\12\230\175\0\1\346"+
57470	indexThreads)
37496	doc.add(newField("source",
536	org.apache.lucene.analysis.MockTokenizer;
41296	this.wordsFileIn
26462	initialshift
409	"a"));
27037	"\r\u0308\n",
24735	doc.add(newField("t",
31121	#NO_MORE_DOCS}
32133	slice[upto]
5822	masking
60033	"\20\266\1\u01d6\11\266\1\142\12\266\1\0\3\137\1\0"+
64276	Type.INT)
62150	"a")),
34490	getReaderTermsIndexDivisor()
30580	"\2\0\1\25\1\0\1\25\1\0\3\25\1\0\1\26"+
50300	outstanding
12274	u8a2b
44240	"â"
48346	<br>If
44939	"á¸¶"
52554	QueryParser.</li>
8698	segmentwritestate
31315	searchIndex(File
34485	(divisor
53891	CharacterUtils.getInstance(version);
15231	fsDir
1604	sample.add(terms.term());
53762	<code>off</code>
48328	prevspans
48399	<br>In
331	System.out
32203	locking");
16219	reqB
47444	a7fc
47100	a7fb
60808	"\1\u033c\160\0\46\u01d0\1\0\2\u01d0\1\u0214\3\u01d0\1\u01d2"+
47185	a7fe
47299	a7fd
35806	iwOut.addIndexes(pr);
31134	docID();
47301	a7ff
54757	f.getChannel();
32498	j<7;
35691	n+=16;
1161	corrupt
42855	t.flags
22608	#newStringRange}.
67443	assertFalse(segmentReader1.normsClosed("field3"));
28237	Directory.
1056	failure.fail2);
58535	CharArraySet.copy(TEST_VERSION_CURRENT,
15835	normGen[i];
469	false
11460	"\13\0\1\u02cf\214\0\12\u04b4\14\0\1\u02cf\214\0\12\u04e0"+
62257	field("first",
27002	WORD
53145	ArrayUtil.grow(chars.chars,
30836	lastTrailingHighSurrogate;
29454	InTestMethod
1838	prevent
18659	"à¦à¦
23356	false)).setMaxBufferedDeleteTerms(1));
23847	pruner
18775	"ÏÏÎ¿ÏÏÎµÎ¸Î¿ÏÎ½",
46810	expected.append(foldings[n
46640	"â½"
62578	req2
10468	"\3\136\1\0\2\136\1\137\1\u013f\1\u0140\1\u0141\3\0"+
62577	req1
54620	testquicktomergesortfallback
40308	segmentcount
58115	altogether.
11911	Usual
48330	prevend
11665	"\1\346\1\230\1\u03fe\30\230\1\347\12\230\243\0\1\u0554"+
65711	Collection<CommitPoint>
23321	j<5;
17388	createweight
3549	Directory}
57969	testpositivescoresonlycollector
63172	tokensperdoc
11538	"\4\u0517\2\0\1\u0517\15\0\1\u0517\6\0\12\u0517\1\u0518"+
62936	"segments_1");
42327	assertTrue("Payload
11034	"\4\u0395\2\0\1\u0395\15\0\1\u0395\6\0\12\u0395\1\u0331"+
53967	(owner.singleNormRef.decrementAndGet()
30403	testnulltpcs
57914	IndexFileNameFilter()
22403	x7ffffffc
47884	expectediter
59908	"\1\u016f\5\232\2\u016f\3\232\2\u016f\10\232\1\u016f\1\352"+
22402	x7ffffffe
7648	Please
5435	x7fffffff
64743	"xx"};
7915	rely
64018	RANDOM_TEST_BYTES;
1863	Fieldable
17044	HashMap<Integer,TVPositionInfo>();
30323	objects.length;
38550	fb1.getBinaryLength());
16858	cloneSegmentReader2
22045	indexsearchers
9724	"\1\0\2\32\1\0\5\32\1\0\5\32\2\0\3\32"+
25231	"a*h",
4907	org.apache.lucene.analysis.CachingTokenFilter;
21798	appended
9876	"\1\0\1\70\2\0\1\217\3\0\1\53\2\0\1\54"+
20903	stem's
29349	endIndex
22404	x7ffffff8
56528	this.reqScorer
52609	"runtime"
876	assertEquals(reader.docFreq(new
34449	(The
55621	testDeleteFromIndexWriter()
56325	right);
27456	"\u0030\u0300"
37099	fst.bytes
23422	modifier.getReader();
9214	ent.getKey();
64106	(byte)utf8Str.length();//Add
52552	backslash.</li>
46351	,"7.",
40056	deletable
17293	opendocstores
48397	<br>On
28396	CharsRef();
35992	four",
48078	<i>src</i>
27139	"\u000B\u0308\u0030",
54766	(usually
17771	seeked
24488	ExecutorService
40583	ir.ints[intIdx]
42064	numComparators
7857	mmap
38704	(norms1
35031	buffer.append(query.toString(s));
5555	(exponent
2400	rest
23380	modifier.deleteDocuments(new
15357	text_field_3_key
52275	proxPointer,
52071	segfieldinfos
20956	#setTermBuffer(String)},
53995	copyOnWrite()
17962	"\u062F",
3702	buffer[i];
9236	ret;
48837	assertTrue(term.equals(testTerms[i]));
22003	termsWriter.setField(field);
17025	vector
66353	i=0;i<postingsHashSize;i++)
61285	"\175\0\1\u034d\32\u02e2\1\u034e\2\u02e2\1\u0617\7\u02e2\175\0"+
28540	SorePoint
49410	output[length++]
60375	"\1\352\12\232\175\0\1\351\1\232\1\u0307\30\232\1\352"+
51193	Directory,
38673	index1.hasDeletions(),
41139	"utf8";
7635	addEscapes(String.valueOf(curChar))
41103	ent.getKey(),
28875	doc.setNext(doc2);
4239	NumericField("float").setFloatValue(Float.POSITIVE_INFINITY));
16330	reqb
2736	res;
33317	//Build
52281	proxPointer;
19278	latin
60703	"\1\u0434\3\u0428\1\u02e2\1\u0428\1\u02e2\3\u0428\1\u034e\12\u02e2"+
22930	createRandomList(int
4379	upper=+2000;
43750	Ã
43746	Ã
3688	(type
43779	Ã
28323	lscorer
14828	hashCode
34789	QueryParser(Version.LUCENE_24,
36219	(bytesPerArc
34988	(deprecated)
36400	OutputStream
67697	String(termBuffer,
36349	setEmptyOutput(T
16176	also.
51722	segUpto
59068	termcollectingrewrite
50304	getReader(boolean
6041	buf.append(content);
43726	Ã
49558	jj_consume_token(BAREOPER);
43728	Ã
43727	Ã
43760	Ã§
43730	Ã
43732	Ã
3973	buffer[length++]
43729	Ã
43731	Ã
12275	u8ace
43735	Ã
31766	IDs!");
43734	Ã
44987	"á¸·"
43780	Ã¾
31787	Version.LUCENE_CURRENT,
43733	Ã
43740	Ã
43741	Ã
59944	"\7\0\1\66\2\0\1\25\1\0\32\25\24\0\1\u0190"+
43737	Ã
43744	Ã
43743	Ã
43742	Ã
43749	Ã
43747	Ã
26919	Ã
24092	Ã
43751	Ã
43786	Ã¿
43748	Ã
18862	delimiters:
29015	docStoreOffset="
38860	IndexReader.listCommits(dir))
15288	Number[]
31814	IndexReader.listCommits(dir);
34609	spans.next();//
58034	IOUtils.closeWhileHandlingException(tvx,
49288	mpq;
34121	tg.put(t[ord],i);
53063	//System.out.println("DIFF:
46352	"âº"
67781	System.arraycopy(this.termBuffer,
18619	"The",
6277	BooleanClause(getWildcardQuery(fields[i],
14693	initFieldType(field,
12676	u8ac4
64867	System.arraycopy(textStarts,
45692	"Å¥"
34498	sb.append("similarity=").append(similarity.getClass().getName()).append("\n");
61445	"\2\0\1\u068b\15\0\1\u068b\6\0\12\u068b\14\0\1\u033c"+
40833	_outputs.get(twoLongs.second));
13077	u8aba
5630	Takes
38518	bin));
53408	bottleneck
1254	PhraseQuery();
58935	(this.storePayloads
20243	(BooleanQuery)o;
18410	printHits("testBooleanOptionalWithTiebreaker",
35115	addbuffer
34406	precise
29927	"\1\25\2\0\1\25\1\0\1\25\103\0\2\53\6\0"+
50218	lastCommitChangeCount;
46269	"â¸"
56390	writeBytes(final
36919	here...
52560	#createWeight},
21442	a1.getFilePointer());
64990	this(inputType,
4079	NumericField("field2",
37611	PhraseQuery(),
43810	assertTermEquals("U",
21282	test[i]);
30694	"\1\64\3\0\1\64\5\0\1\64\7\0\1\64\4\0"+
58771	(nextInt(10)
66236	NUM_EXTRA_DOCS/2,
61200	"\6\0\1\u05c2\2\u05c3\1\u05c2\5\u05c3\1\u05c4\14\0\1\u02e1"+
60392	"\2\137\150\0\1\u0101\32\266\1\142\5\266\1\u015b\4\266"+
33842	pp2.offset))
63440	0x8654321,
41895	builderobject
199	closed,
9827	"\1\25\2\0\1\25\1\0\1\25\4\0\1\25\2\0"+
7898	closed.
52498	doc.add(newField("field3",
30500	Annex
37383	header="
23774	closed;
8152	closed:
34244	IndexWriterConfigs.
16157	no_more_docs
59155	"\3\205\3\u0128\3\u01cb\3\u026e\3\u0311\3\u03b4\3\u0457\3\u04fa"+
42091	Object[n];
9346	"\1\0\2\132\6\0\2\132\2\133\2\0\12\134\22\0\2\133\1\0"+
56186	FilterTermEnum
18783	à¹à¹à¹à¹",
4040	overflow
66176	assertEquals(mulFactor
8491	source1.newSinkTokenStream();
31507	Integer.toString(TEXT_COMPRESSED_LENGTH),
51837	lastCommitChangeCount)
48847	this.positions[i][j]);
9928	"\3\0\1\25\1\34\1\0\1\25\2\0\1\25\3\0"+
26814	bufferUpto
37328	stopSet.addAll(Arrays.asList(stopWords));
42094	maxscore;
46246	"â·"
22223	newArray
57653	diffs
50580	IllegalArgumentException("IndexCommit's
1985	FST.Arc<T>
50108	#deleteDocuments(Term)}
11079	"\1\346\32\230\1\347\7\230\1\u03ba\2\230\175\0\1\346"+
61129	"\214\0\12\u0585\14\0\1\u033c\214\0\1\u0541\1\u0586\1\u0585"+
5957	ramBytesUsed()
24888	fieldvaluehitqueue
44941	"á¸¸"
66498	UnicodeUtil.UNI_SUR_HIGH_END
9555	"\1\u601b\1\u60be\1\u6161\1\u6204\1\u62a7\1\u634a\1\u63ed\1\u6490"+
51595	conflicts)
9945	"\2\136\2\0\1\165\1\0\1\50\1\0\1\51\2\0"+
37592	736)
56233	methodsThatShouldNotBeOverridden.add("reopen");
53370	SimpleFSIndexInput(String
11985	ZZ_ACTION[zzAction])
8439	Thread.sleep(sleepTimeMS);
67094	(merge
33905	advanced,
17985	doc.add(newField("body",
46285	,"(4)",
58786	asUnicodeChar(s.charAt(1));
33795	advanced.
34731	qp.parse("+(foo
57961	TopScoreDocCollector.create(scores.length,
22176	RAM:
35537	A[i+4],
5169	((0xdfffffffffffffffL
27744	"\u0061\u0027\u0001",
34388	RAM.
41404	(wordsFileIn
39917	(readOnly
43387	diff;
42224	testOffsetAttribute()
67161	diff.
60385	"\31\232\1\352\12\232\175\0\1\351\1\u0313\31\232\1\352"+
8685	RAM,
9552	"\1\u50d3\1\u5176\1\u5219\1\u52bc\1\u535f\1\u5402\1\u54a5\1\u5548"+
37264	arcbytes
63399	0x8532,
23730	RAM)
31	ownership.
48344	<br>An
3025	RAM!
66325	newSize-1;
49107	phraseSlop)
58649	"the")),
33075	src.cloneAttributes();
57831	r.getCommitUserData().get("label"));
62650	#LengthFilter(boolean,
35903	value",
19605	priore
11726	newline
52700	FIELD_TEXT
27470	"\u0030\u0308\u0061\u0027\u2060",
67376	subReaders2[i]);
37612	q2.toString();
59418	"\6\0\1\226\32\0\1\227\21\0\1\230\2\0\1\231"+
48748	testTerms
26458	arrayoffset
50234	pendingMerges
20692	TermPositions#getPayload(byte[],
51915	startDoFlush
19495	priorE
6452	supported
49109	phraseSlop;
39797	prior;
59956	"\1\u0101\3\266\1\u0194\26\266\1\142\12\266\1\0\3\137"+
54820	denied
17803	toomanyclauses
33971	ArrayList<ArrayList<PhrasePositions>>
48930	mytokenizer
63398	0x8531,
60569	"\1\u0348\13\0\1\u02e1\160\0\1\u0349\4\u03b0\2\0\1\u03b0"+
38890	atLeast(2);
11565	"\2\0\1\u052b\15\0\1\u052b\6\0\12\u052b\1\u0511\13\0"+
43428	getbytesize
24071	".5",
39437	this.input.readBytes(b,
55826	testReopenAfterNoRealChange()
24746	"a"+i,
65212	(lastOutput
50605	IndexFileNames.segmentFileName(info.name,
3157	(curUpto
31467	FieldInfos(cfsReader,
62225	nextDoc
55634	r4.close();
17492	pr.close();
57336	xor(OpenBitSet
26141	multicomparatorscoringmaxscorecollector
61566	u8ab0
3580	IndexWriter#forceMerge}
31837	monotonicity
37879	WeakIdentityMap<K,V>
33443	main.length();
3824	AttributeFactory
59962	"\1\0\1\26\2\0\1\25\1\u0196\32\36\1\142\12\u0197"+
51270	newDsName;
11690	"\1\1\15\0\1\1\24\0\2\1\1\0\3\1\1\0"+
8535	LowerCaseFilter(source1.newSinkTokenStream());
30155	origEnum.close();
3429	List<SegmentReader>
45580	"Å "
5415	jjmatchedkind
64423	UnicodeUtil.UTF16toUTF8(value,
56127	TermRangeQuery("data",
36654	<code>arc</code>'s
33518	String[]{"a"},
55735	deleteDocument(Term
19429	docswithfield
10968	"\12\230\175\0\1\346\24\230\1\u0362\5\230\1\347\12\230"+
60342	"\1\0\2\u021e\1\u027f\3\u021e\1\u0220\5\0\2\u021e\4\0"+
15815	useCompoundFile
63221	RAMFile(RAMDirectory
24193	low))
41926	copyints
37115	Tie-break:
21270	seek(0)",
64449	setinput
9935	"\1\231\13\0\1\173\1\0\1\50\1\0\1\174\2\0"+
18202	query).hashCode();
33476	normMap.add(
11743	\p{Line_Break
22489	value);
30408	org.apache.lucene.analysis.VocabularyAssert.*;
7487	termsWriter;
24151	writer.addDocument
10239	"\2\u0103\2\264\1\u0103\4\264\1\u0103\11\264\1\141\12\264"+
62436	ReqExclScorer.
65267	"frontier":
36447	startAddress);
53825	map.originalKeySet().iterator()
67310	iwriter.close();
12358	ubfa7
6736	Integer#MAX_VALUE}
1230	newField("crash",
22666	(includeLower
43365	addInt(int
33057	src2.addAttribute(FlagsAttribute.class);
36811	countSingleChains()
21576	Math.min(idx,
26368	CODING_CASES[caseNum];
13078	u8b5d
39001	cm.keySet();
33927	Heavy
58917	this.storePayloads
7491	termsWriter)
12677	u8b67
39113	ArrayList<Term[]>
12276	u8b71
27202	"\u3031\u0308\u0300"
62551	countingSumScorer.nextDoc())
57631	value).
14585	yystate
67052	createIndex(int
29042	seekTvx(startDocID);
8580	sink.addAttributeImpl(it.next());
30859	CollationKeyFilter
24976	testreversesort
15984	org.apache.lucene.document.*;
62273	check(SpanQuery
30302	commitData)
47909	commitData.
58451	Arrays.asList(TEST_STOP_WORDS),
30959	testResultsOrder()
52187	sourcesegments
30908	3.1796896f,
30304	commitData;
24755	c.getTotalHits());
31327	numFields
54413	sub-node
9444	ZZ_ACTION
24379	(val.charAt(0)-'A')
61006	"\2\u02e2\1\u050e\1\u050f\1\u0510\1\u02e2\1\u0511\1\u0512\2\u02e2"+
21275	expected.length();
43593	miss,
63234	buffers.get(index);
61567	u8b53
58508	Arrays.asList(TEST_STOP_WORDS);
21262	expected.length())
17281	getcfsreader
63516	iterator...
21234	expected.length(),
27643	"\u0061\u2060\u0308\u0041",
33676	usage");
51291	newDsName,
48176	matchDoc;
18073	rewritten.setBoost(this.getBoost());
10312	"\1\25\2\0\1\25\1\140\32\36\1\u0148\12\142\1\65"+
45873	"á¹³"
19351	¿¼
65317	setLastOutput(int
3556	SetOnce<IndexWriter>
63402	0x8541,
32211	LockFactory:
32257	assertTrue(l.isLocked());
16145	advances.
34161	advancepp
23360	unindexed[i],
67297	j<M;
44870	"á¸°"
62217	iter2=0;iter2<10;iter2++)
20228	buffer.append("+");
8341	LockFactory.
64817	!FIELD.equals(actualTerm.field()));
57902	synchronizing
45802	"á¹²"
25889	minutes",
50467	non-null),
5831	=~((elementPosMask
6865	NumericRangeQuery<Integer>(field,
26548	storing
52431	this(NumericUtils.PRECISION_STEP_DEFAULT);
11498	"\6\0\12\u04fc\1\u04d9\175\0\4\u04fd\2\0\1\u04fd\15\0"+
46379	"â¹"
46494	"â°"
24335	v[j].compareTo(last);
63177	randomfixedlengthunicodestring
63041	"<AND>",
7937	immediately
38681	fieldInfos1
27270	"\u0041\u0061\u0027",
38683	fieldInfos2
1530	fieldInfos,
62552	countingSumScorer.nextDoc();
16680	dir1.close();
4406	j=1;
36985	newNodeAddress[node];
51268	DSName
48493	this.similarity;
3159	cachedDocs.get(chunkUpto);
38093	NumericUtils.doubleToSortableLong(nan);
43132	nDocsReturned
57449	closes.
1771	fieldInfos;
43560	BitVector(size);
23566	triggered
41339	100000000);
36468	maxBytesPerArc
36091	java.io.BufferedInputStream;
42719	naming
48576	field.name()
66918	pair.output1.equals(outputs1.getNoOutput());
10155	"\1\36\1\352\1\36\6\352\1\36\1\141\12\142\1\65"+
54251	strings.add(str);
11240	"\1\u0434\6\0\12\u0437\1\u0435\13\0\1\u02cf\160\0\1\u0332"+
23315	j=0;
66393	comparePostings(final
5743	strives
35198	lastSkipDoc;
59048	TermCollectingRewrite<Q>
35300	setproxoutput
38279	bits.getAndSet(i-lower)
39157	similarity.idfExplain(allTerms,
37697	ID_FIELD
8690	fieldInfos)
34403	somewhat
34282	DEFAULT_MAX_BUFFERED_DELETE_TERMS;
49902	newrangequery
66678	triggeron
61301	"\12\232\175\0\1\351\32\232\1\352\6\232\1\u0133\3\232"+
9632	"\2\ue853\2\ue8f6\2\ue999\2\uea3c\2\ueadf\2\ueb82\2\uec25\2\uecc8"+
4799	writer.getConfig().getTermIndexInterval());
32961	TermVectorsPostingsArray(size);
10326	"\1\0\1\25\2\0\1\25\1\140\32\36\1\141\12\142"+
57938	extensionsincfs
30407	org.apache.lucene.analysis.BaseTokenStreamTestCase;
46223	"â¶"
48778	TestToken();
6333	{BooleanClause.Occur.SHOULD,
63190	untokenized,
48106	copying.
20780	insane
29473	invariant
34838	(text.equals("multi"))
34865	wraps.
53535	Math.max(maxScore,
52001	docWriter.balanceRAM();
21116	unlock
25995	maxScore
36984	newNodeAddress[node])
42340	generateTerms(fieldName,
28326	rdoc
29676	"\1\0\12\134\1\136\1\137\5\0\32\132\4\0\1\141\1\0\32\132"+
19567	Charset}.
36788	this.pos
45712	"á¹­"
22026	newSearcher(IndexReader
29830	"\4\0\1\25\4\0\1\26\1\0\2\26\4\0\1\25"+
55791	add/delete
38705	assertEquals(norms1.length,
50686	#setMaxFieldLength
883	clearDoFail()
21072	newReader.close();
42569	stream.reset();
66819	queryTerms[i];
65329	(isFinal)
54654	LockFactory}
57772	String.valueOf(count++);
51533	insert"));
54717	LockFactorys
64123	tmpStr
66347	DocumentsWriter.INT_BLOCK_SHIFT];
58125	persistence
17336	Store.YES,
50864	(info.hasDeletions())
39647	"meaninglessnames",
26376	codingCase.finalShift)
22031	per-segment
31333	f.stringValue());
51247	docWriter.getFieldInfos().clone()));
31450	_TestUtil.getTempDir(outputDirName);
10564	"\3\0\1\53\2\0\1\54\3\0\1\72\7\0\1\56"+
41859	input.grow(1);
25956	add().
51121	pendingCommit
41123	current.output);
29460	testMethod1();
18368	testBooleanOptionalNoTiebreaker()
53201	connection
7265	'top
40862	fst.pack(_TestUtil.nextInt(random,
42016	shortestpaths
884	eval(MockDirectoryWrapper
63912	Character.isLetter(cp));
55109	IndexReader.open(dir2);
18599	Numbers:
59699	"\1\u0112\1\u0116\3\u0107\1\266\3\u0107\1\266\1\u0107\1\266"+
26877	t.setOffset(startOffset,
32956	fieldState.position
10959	"\12\230\175\0\1\346\26\230\1\u0357\3\230\1\347\12\230"+
38982	map.put(keyStr,val).intValue());
43764	Ã«
43775	Ãµ
43759	Ã¦
57243	ones=u2^v3;
53415	isfdvalid
43783	Ã»
43083	refreshifneeded
43761	Ã¨
43754	Ã¡
43771	Ã±
43756	Ã£
65083	downTo;
43755	Ã¢
43774	Ã´
43757	Ã¤
21617	sEnd
34162	advancerpts
43762	Ã©
43765	Ã¬
3972	termAtt.resizeBuffer(1+length);
30555	"\2\0\1\25\1\0\1\25\1\0\3\25\1\0\1\25"+
60137	"\1\u0143\1\u0144\1\u0145\2\0\1\77\1\137\4\0\2\137"+
158	Both
36304	nodeRefToAddress[idx]
43768	Ã¯
43725	Ã
25027	fillfields
43724	Ã
43721	Ã
43718	Ã
43723	Ã
43722	Ã
43767	Ã®
42769	correct.</li>
43784	Ã¼
22570	supports.
38023	(prefixVals
25601	badKids.putAll(rf,
7080	resources.
1348	tokenstream
61568	u8bf6
8979	PrefixCodedTermsIterator
48545	(InvertedDocConsumerPerField).
66161	"xxx",
47830	curly
19621	SCORE_CACHE_SIZE
30165	resources;
53863	CharacterUtils.getInstance(TEST_VERSION_CURRENT);
57997	entry.getValue()
45281	"Å"
18807	"à½ à½à½ºà½£",
15191	70ms
36582	Follows
45191	"Å"
7823	stringvalue
19996	WildcardQuery,
20121	(e.isMatch())
8766	r.document(hits.scoreDocs[0].doc);
52144	mergedname
21698	anyOpenDelFiles
52492	doc.add(newField("field4",
8974	getSizeInBytes()
20510	independently
19718	cs.posLimit
36115	explicit
58486	set.contains(lowerArr[i]));
56091	"p*u?")));
45283	"Å"
35385	JavaCCParser,
5738	optimal.
57930	(name.equals(IndexFileNames.DELETABLE))
139	MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));
45193	"Å"
9535	"\0\ufb81\0\ufc24\0\ufcc7\0\ufd6a\0\ufe0d\0\ufeb0\0\uff53\0\ufff6"+
21914	readByte();//read
11563	"\1\u052a\175\0\1\u0386\4\u052b\2\0\1\u052b\15\0\1\u052b"+
51697	merge.readers.set(i,
60712	"\1\u02e2\1\u0428\1\u02e2\1\u0428\1\u02e2\1\u0428\1\u02e2\3\u0428"+
68109	yourself.<br>
614	docs.add(doc);
37017	(doWriteTarget)
34458	#DEFAULT_MAX_THREAD_STATES}.
7145	x14fa55fb
29533	"float("
48993	<em>not</em>
29971	"\1\103\1\0\2\103\16\0\1\103\4\0\1\103\2\0"+
45285	"Å"
28917	"int("
26668	top-scoring
8173	getFilePointer()
6343	Flags
15988	(RANDOM.nextInt(4)
2278	LowerCaseTokenizer(TEST_VERSION_CURRENT,
64369	termcountlimit
34088	(pp.terms.length
59853	"\3\0\1\73\7\0\1\57\2\0\1\60\4\0\1\74"+
45386	"Å"
38361	x80000000000003l
24028	String.valueOf(Short.MAX_VALUE),
52918	UNI_SUR_LOW_END
46306	"â¸"
56602	lastCommit.getSegmentCount()
55949	(nextCount
52712	testBooleanQueryWithSpanQueries()
1915	fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue()));
42403	generateRandomData(int
21470	a2.seek(17);
1039	("org.apache.lucene.store.MockDirectoryWrapper".equals(trace[i].getClassName())
58419	testClear(){
8444	nusage
4495	newfloatrange
21095	DummyConcurrentLock
43307	getTerms()[5],
51656	info.sizeInBytes(true)
24830	bits;
33824	seeing
4565	org.apache.lucene.index.DocumentsWriter.IndexingChain;
27640	"\u0061\u2060\u0308",
56002	buffer();
54694	strictly
45367	"Å"
47977	indexSearcher
65584	commits.get(readFrom));
57090	bits,
24321	SortField("string",
6648	bits)
2247	org.apache.lucene.search.QueryUtils;
52336	PayloadTokenStream("p1");
30401	phase
42785	PositionIncrementAttribute,
5731	bits.
4980	0xffffffffffffffffL,
41720	22L);
8475	ways.
53767	map.containsKey(cs);
2087	table.length);
22146	listobject.c
45485	"Å"
38461	assertTrue(allFieldNames.contains("tvnot"));
66632	testAssumeBeforeClass()
34611	processPayload(Similarity
22649	FieldCacheRangeFilter<String>(field,
47984	SimpleDocIdSetFilter(int[]
32846	(doVectors)
20285	prints
59205	"\3\uff35\3\uffd8\4\173\4\u011e\4\u01c1\4\u0264\4\u0307\4\u03aa"+
24286	"float",
8104	chunkSizePower
39230	fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));
45526	"Å"
2517	payloadattribute
31137	unpredicted
66530	intUptos;
11820	zzEndRead-zzStartRead);
22137	minTargetSize,
45056	ARCHAIC
51738	merge(),
65690	thread).
6412	cbuf,
34833	offsetAtt.startOffset();
67204	existingpositions
41623	childCount
45694	"Å§"
39740	(SegmentInfos)
15178	FieldsReader(tmpDir,
27575	"\u00AD\u0308\u0061\u002C",
58742	"\ufffd\ufffdabcd",
25331	opqrstu1
41405	args[idx];
8103	(chunkSizePower
30384	twophasecommitwrapper
63403	0x8542,
57499	indexEnum,
63052	"<QUOTED>",
16608	move
33593	quaxot";
49811	enable_tracing()
9367	"\7\132\1\0\1\132\1\0\4\132\2\0\17\132\1\0\71\132\1\0"+
45126	"Å"
4026	normalizemethod
39841	this.subReaders
1443	segments_n
40209	starts[pointer];
53429	c=random.nextInt(10);
43200	elevationcomparatorsource
18147	theScore;
38360	x80000000000000l
65888	createdummysearcher
63405	0x8543,
62215	next/advance
736	"ddd"));
14592	region
21300	csw.close();
16890	x=0;
18075	extractTerms(Set<Term>
13159	ubef0
1830	most
42469	ingesters[i]
45091	"Å"
6275	termStr);
44943	"á¸º"
62673	atomiccounter
6273	termStr),
46283	"â·"
23628	docsInSegment
54649	"(MATCH)
65325	arcs[arcIdx].output
55504	(LUCENE-1590)
3380	cascade,
65270	Node.
55820	.setReaderTermsIndexDivisor(-1));
45128	"Å"
51094	mergePolicy.findMerges(segmentInfos);
23831	#release}
21553	assertsamestreams
62263	"sally"),
12758	ubefa
62277	"sally"))
58614	testcopychararraysetbwcompat
20024	WildcardQuery}
35538	A[i+5])
45132	"Å"
1498	atLeast(Math.max(10,
19450	docfieldprocessorperfield
16101	super((Similarity)null);
67205	newpositions
26518	assertTrue(deleteReader.isDeleted(0)
17436	i]);
5313	endColumn
4124	super.tearDown
15	more
48938	gettermvectorentryset
15409	deletefile
4845	defaultindexingchain
45093	"Å"
23547	""+ids.get(upto++)));
8875	materializes
3555	MergeAbortedException(String
16314	spannearquery
11431	"\1\376\16\264\1\u04c8\13\264\1\141\12\264\1\0\3\136"+
25333	matchnone
58259	endsWith(BytesRef
5760	representing
10952	"\32\230\1\347\11\230\1\u034b\175\0\1\346\24\230\1\u034c"+
26329	input.arrayOffset();
16478	numsnapshots
36225	other.numArcs;
36566	Nodes
54517	ArrayUtil.oversize(Integer.MAX_VALUE-1,
874	count++;
66338	this.postingsArray
34810	MultiAnalyzer
45189	"Å"
15285	_TestUtil.rmDir(indexDir);
1290	name.startsWith("segments_"))
8228	un-set
19345	¹¿
1129	segments_N
49113	WildcardQuery.
66531	intUptoStart;
7590	retval.append("\\f");
40111	segments_X
67129	implicitly
27804	"\u0061\u0027\u2060\u0041",
43745	Å
43778	Å
15828	IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));
57096	bits.length
26468	inputoffset
46144	"Å¾"
60744	"\1\351\32\232\1\352\1\u0446\11\232\175\0\1\351\1\u0447"+
19590	resource
66468	bytePool.newSlice(ByteBlockPool.FIRST_LEVEL_SIZE);
30744	CharacterUtils}
37183	arcarray
4414	last=act;
4563	java.util.Set;
9973	"\1\54\3\0\1\55\7\0\1\56\2\0\1\57\4\0"+
517	testundeleteall
39625	lasttermbyteslength
22734	FieldCacheRangeFilter<Long>
1675	tiifilelength
57329	newLen-this.wlen);
51882	code,
41445	code)
52112	deleteterms
65569	commitsToDelete.get(i);
51993	flushByRAMUsage("add
8870	ChainedFilter
32647	differently:"
55245	i<ff1.size();
66349	reader.init(bytePool,
17282	gettermsreader
26565	termDocs.seek(new
45605	"Å"
38516	MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));
15725	(hasSeparateNorms(i))
23871	ourselves:
25739	mapofsets
26604	freqs
18593	\"Ø§ÙØ­ÙÙÙØ©
9918	"\2\34\11\0\1\25\11\0\2\25\2\34\4\0\2\25"+
36183	NO_OUTPUT;
19644	freq;
43410	lastBytePos)
17019	currentPositions.put(posVal,
16356	CharFilter1(
45611	"Å¿"
5272	ReInitRounds()
11735	code:
22286	code;
53253	second.
36485	NO_OUTPUT)
55161	System.out.println("FAILED
33428	main.getFilePointer();
33777	(hasRpts
25233	"*a*h",
24644	"OutOfOrderMultiComparatorScoringNoMaxScoreCollector",
60006	"\150\0\1\136\4\u01b3\2\137\1\u01b3\15\137\1\u01b3\6\137"+
20809	second)
15696	code.
41745	left.output1.compareTo(right.output1);
14945	stringvalcomparator
54322	assertallin
54083	i<a0.size();
27405	"\u0027\u0308\u0061\u0027",
65814	hc.getSum();
59213	"\4\u27f5\4\u2898\4\u293b\4\u29de\4\u2a81\4\u2b24\4\u2bc7\4\u2c6a"+
51929	!docWriter.anyChanges()
21888	getbinaryvalues
53258	second;
51550	handleMergeException(Throwable
16363	CharFilter2(
2501	freq)
45578	"Å"
29203	freq,
43335	lastBytePos;
48244	docSpansOrdered(subSpans[i-1],
55271	freq1
55855	num_init_docs
27231	"\u0041",
55273	freq2
2260	org.apache.lucene.index.Payload;
52577	splittable
8612	overridden.
63025	RANGEEX_QUOTED
49293	overridden,
59505	"\1\72\3\0\1\54\2\0\1\55\3\0\1\73\7\0"+
63432	0x865321,
5916	(int)((((long)blocks.length)
25531	Insanity
67881	tokens.size())
61039	"\1\u0533\5\266\1\0\3\137\1\0\2\137\1\140\3\137"+
28840	intPool;
45576	"Å"
15744	WITHOUT_GEN);
5632	seconds
43319	appears.
16132	7.1490803f,
11637	"\175\0\4\u055d\2\0\1\u055d\15\0\1\u055d\6\0\12\u055d"+
37624	8200);
64037	Math.abs(random.nextLong());
65913	TestQueryParser.QPTestAnalyzer
60346	"\1\u016c\1\u016d\1\u016e\230\0\1\u01dc\175\0\4\u02eb\2\0"+
6475	System.out.println(trace);
10471	"\1\376\15\264\1\u0103\14\264\1\141\12\264\1\0\3\136"+
59769	"\1\137\1\145\1\140\1\u0143\1\u0144\1\u0145\3\0\1\137"+
22669	-lowerPoint
43785	Ã½
61569	u8c99
20300	this.acceptDocsOutOfOrder
32181	lf.locksCreated.size());
55098	ArrayList<Fieldable>
61648	ubee6
40521	#addAttribute(Class)}
43280	testbadseek
15945	sizeinbytesnostore
15086	loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);
40233	reader.termDocs(null)
43781	Ã¹
11513	"\1\346\26\230\1\u016a\3\230\1\347\12\230\175\0\1\346"+
45607	"Å"
19295	o'reilly
37824	letters,
9355	"\5\0\7\142\10\143\1\0\12\134\47\0\2\142\1\0\1\142\2\0"+
59237	"\3\25\1\0\1\25\15\0\1\25\6\0\1\25\124\0"+
20743	Start
31952	FieldCache.class.getName()+".NUMERIC_UTILS_FLOAT_PARSER";
28441	(IndexOutOfBoundsException
28906	(multi-segment)
62809	docfieldlocs
27944	"\u0031\u0027\u0308\u0041",
50386	!sr.hasChanges
28018	"\u0031\u002C\u0308\u0061\u0027\u2060",
42517	setpayloaddata
53603	call()
1306	uoe.doFail
63846	StringReader(builder.toString()));
22251	RamUsageEstimator.NUM_BYTES_INT);
48583	stringValue.length();
54913	writer.addDocuments(docs);
5246	State
42871	Shorthand
50690	divisor);
15140	DocHelper.LAZY_FIELD_BINARY_BYTES[i]);
22807	field.hashCode();
49993	FORMAT_PRE_VERSION
39556	ch1-ch2;
64273	ByteFieldSource(field);
47814	shell
41802	treemap
11168	"\13\0\1\u0122\160\0\1\346\32\230\1\347\1\u03fd\11\230"+
46260	"â¶"
28233	c.setNextReader(reader,
42416	sb.append(i);
19735	chunkStates[0];
2130	lookup
3206	acceptDocsOutOfOrder
39750	segmentInfos.remove(infosUpto);
32977	super.copyTo(toArray,
45488	"Å"
17321	"missing")),
15950	docstoreiscompoundfile
37641	ts.close();
16268	sor(SpanQuery
23670	testramdeletes
14846	comparators
18724	"ØªØ§Ø±ÛØ®",
47974	doc.add(newField(FIELD,
40924	(maxLong
66397	text1[pos1++];
43691	violated.
55932	t.set(new
16966	lowercased.
13160	ubf93
62204	s.createNormalizedWeight(q);
32570	IndexableBinaryStringTools.getEncodedLength(binary,
32941	postings.freqs[termID]
37929	setNext()
67049	seek()
60067	"\1\351\3\232\1\u016f\26\232\1\352\12\232\175\0\1\351"+
29383	numLeft
4130	mode
8855	withnestedtests
42964	typical
41512	allIDs.add(idString);
52499	iw2.addDocument(doc);
64199	(short)(value
61649	ubf89
45528	"Å"
14747	comparator;
49505	mods
66550	rehashPostings(final
24309	(Note:
28278	this.numScorers
35080	currentBuffer[bufferPosition++]
23488	mock
42035	comparator.
64975	serialized.
65263	serialized)
10608	"\150\0\1\376\10\264\1\u01eb\4\264\1\u01ec\5\264\1\u01ed"+
43074	semaphore
67819	Prepare
14748	comparator,
38974	String(key);
52451	(valSize
33017	skippinglongterm
14744	comparator)
13079	u8c00
57358	ArrayUtil.grow(bits,
65532	commits.add(commitPoint);
30883	TestTopDocsCollector
57129	getBit(int
45490	"Å"
36172	serialized;
24353	v[j];
31751	indexDir");
24281	"int",
62233	assertEquals(hit.doc,
42930	"payload",
52721	expectedIds
12678	u8c0a
45603	"Å"
25498	valMismatchKeys
33220	flagsattributeimpl
11104	"\3\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
21600	<small>Work
12277	u8c14
56264	declaringclass
19472	Charset#forName(String)}
11642	"\175\0\1\376\1\264\1\u0367\30\264\1\141\12\264\1\0"+
37566	Field("field",
18395	doc0.equals("d4"));
24590	MatchAllDocsQuery();
10916	"\1\u0329\15\0\1\u0329\6\0\12\u0329\1\u0268\175\0\4\u032a"+
4769	assertEquals(LogByteSizeMergePolicy.class,
33704	assertTrue(reader.getSequentialSubReaders().length
39200	Explanation(queryNorm,"queryNorm");
43581	dotestconstructofsize
2742	doTestTimeout(false,
2231	nomergepolicy
17162	IndexFileNames.PROX_EXTENSION),
45530	"Å"
67763	csq.charAt(start++);
35235	(proxOutput
39668	tangfulin
62538	minNrShouldMatch)));
27882	"\u0061\u002C\u0031\u0027",
25109	wq.setBoost(0.1F);
17548	single.search(query,
40978	fstEnum.seekFloor(pair.input);
51737	LUCENE-3403:
10577	"\1\u01da\6\0\12\u01db\1\u0197\13\0\1\u0122\160\0\1\u0163"+
23719	fresh
26440	this.numBytes
41153	inputMode));
65400	testCrashAfterReopen()
44288	INSULAR
26826	1+bufferUpto);
50620	IndexWriterConfig},
12759	ubf9d
38283	upper-lower+1);
58856	utf16a);
51294	doBeforeFlush()
2315	doc.add(noPayloadField);
4164	MatchAllDocsQuery(),
30923	MatchAllDocsQuery().
42570	fail("reset()
40207	tenum.matchingSegments[matchingSegmentPos++];
8868	Technically,
28431	CharsRef(otherchars,
11536	"\2\0\1\u04fa\1\0\1\u04fa\14\0\1\u0325\161\0\4\u0516"+
16794	MultiReader
33325	doc=new
45574	"Å"
41983	testsimple
51849	filesExist(toSync);
27301	"\u003A\u0308\u002C",
18725	"Û²Ûµ",
41960	gettermcount
38660	doc.add(newField("tvposition","tvposition",
169	false);
13271	u06e3
35133	PayloadTermQueries
65880	doTermConjunctions(s,25,5,1000);
37366	codec
16155	simplescorer
31815	(commits.size()
36149	coded
24141	(data[i][9]
64239	Type#INT}
29278	formats
29929	"\1\53\5\0\1\53\7\0\1\53\4\0\2\53\3\0"+
25362	false),
41625	arc);;
347	testDeleteReaderWriterConflictNoFullMerge()
23446	false))
59075	<li>&lt;EMAIL&gt;:
43364	initBytes();
4854	getdeclaringclass
64848	actualterm
11103	"\3\0\1\136\4\0\2\136\150\0\1\376\26\264\1\u03cf"+
60458	"\12\u0351\1\0\2\u021e\1\u027f\3\u021e\1\u0220\1\u016c\1\u016d"+
30004	u06d7
67606	sr1.deletedDocs;
63129	(savedTerms
49323	cal.set(Calendar.SECOND,
33046	copy.restoreState(state);
2959	gettimeallowed
51995	flushByRAMUsage(String
15971	fieldnumber
24138	(data[i][8]
4288	countTerms(cq,
33151	AttributeSource(Token.TOKEN_ATTRIBUTE_FACTORY);
10552	"\1\136\4\0\2\136\2\0\1\207\3\0\1\210\2\0"+
31684	TestPerFieldAnalzyerWrapper
35542	A[i+6],
56119	bq.add(q1,
48586	fieldState.attributeSource
22280	grow(float[][]
8965	codes
55468	posIncrAtt.setPositionIncrement(termAtt.buffer()[0]
19711	raw;
61753	u06d9
1814	format.
18639	Ü¡ÌÜ Ü¬Ü
12679	u8cad
1762	format,
11458	"\1\u04de\15\0\1\u04de\6\0\2\u04df\1\u04de\2\u04df\2\u04de"+
16413	testExistingSnapshots()
17092	posval
41588	format)
67054	WhitespaceAnalyzer(TEST_VERSION_CURRENT)).
12185	u5180
65712	commitsToDelete;
36441	(nodeIn.numArcs
65288	this.depth
4783	WhitespaceAnalyzer(TEST_VERSION_CURRENT));
42895	reinit(Token
56120	bq.add(q2,
65714	commitsToDelete,
65706	DecRef()
1768	format!
10051	"\2\65\1\0\3\65\1\0\1\65\2\0\4\65\2\0"+
31839	getsimplename
48191	(subSpans[0].skipTo(target))
18220	setmatch
28715	categories[i],
53475	setSimilarity(similarity);
27469	"\u0030\u0061\u0027\u2060",
48828	IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));
62128	u06aa
28982	format;
24914	acegi
16902	"yes
62131	u06ad
62130	u06ac
4693	Modifier.isFinal(modifiers))
62129	u06ab
22618	<p>As
35696	(ntzTable[
22239	RamUsageEstimator.NUM_BYTES_DOUBLE)];
1562	testCompareTo()
14681	comparatorSource;
9384	"\3\0\3\132\1\0\7\132\3\0\4\132\2\0\6\132\4\0\15\132"+
29553	"\21\0\160\133\5\132\1\0\2\132\2\0\4\132\1\137\7\0\1\132"+
49850	fieldtodateresolution
62121	u06a3
62120	u06a2
62123	u06a5
28889	bytepool
42141	aStop)
62122	u06a4
4321	countTerms(MultiTermQuery
37625	while(doc.size()
62119	u06a1
13388	u5162
62118	u06a0
30545	"\2\25\1\0\1\25\10\0\1\25\24\0\1\25\1\0"+
62124	u06a6
29887	"\3\0\1\34\5\0\1\34\7\0\1\34\4\0\2\34"+
62125	u06a7
58310	aStop;
62126	u06a8
56999	<code>java.util.BitSet</code>
49897	datetostring
62127	u06a9
58985	MMapDirectory(_TestUtil.getTempDir("testSeekEnd"));
20631	FileSwitchDirectory(fileExtensions,
9885	"\3\27\2\0\2\27\12\0\2\27\1\0\3\27\1\0"+
68037	leftTerm.toString(),
65462	(onCommit),
56388	pool.byteOffset;
33695	kicked
13080	u8ca3
58496	"\uD800\ud801\udc44b"
2171	execute
24842	maxLength);
12586	u5176
7297	getTotalHits()
65260	compileNode(n,
19723	cs.posUpto
8738	often
66478	tokenText
2881	assertEquals("some
59143	"\2\uc408\2\uc4ab\2\uc54e\2\uc5f1\2\uc694\2\uc737\2\uc7da\2\uc87d"+
12278	u8cb7
29064	in.readInt();
42492	pool.get();
12987	u516c
31880	parseByte(String
10328	"\1\25\1\65\7\0\1\65\2\0\1\25\1\0\32\25"+
35595	B[i+3]))
23536	Collections.shuffle(ids,
35598	B[i+3]);
65556	policy.onInit(commits);
49901	millisecond
14920	getparser
35939	shouldnt
55495	assertNotNull(tfv1);
4899	QueryParserTokenManager.java
9308	"\1\155\1\165\1\164\1\154\1\166\1\167\1\170\1\177\1\171\1\172"+
33194	map.size());
3781	layer
29412	(!prefix.field().equals(field))
17332	non-atomic
16420	"snapshot");
10621	"\3\0\1\136\4\0\2\136\150\0\1\376\22\264\1\u01fa"+
23118	IndexWriter(directory,
36342	END_LABEL;
29573	"\10\133\1\0\3\133\1\0\3\133\2\0\1\132\17\0\2\132\2\133"+
49521	NUMBER:
55521	IndexOptions.DOCS_ONLY,
64115	is.readVInt();//number
49495	jj_consume_token(NOT);
4979	0xfffffffffffffffeL,
67223	startTime
19782	rank
31280	(oldNames[i].startsWith("29."))
59055	ConstantScoreQuery(bq);
4003	oriented
38165	l<=max;
4309	testEmptyEnums()
8703	rand
57742	System.out.println("start
66111	IndexSearcher(ramDir,
56612	((IndexCommit)
29982	"\1\116\2\0\1\116\3\0\1\116\5\0\1\116\7\0"+
50876	href="#flush">above</a>),
61002	"\5\u0509\1\u050a\175\0\1\u04cd\242\0\1\u04cd\33\0\2\u04ce"+
63195	this.field=field;
36661	END_LABEL)
59991	"\1\351\20\232\1\u016f\11\232\1\352\12\232\175\0\1\351"+
11370	"\1\136\4\0\2\136\150\0\1\376\26\264\1\u049d\3\264"+
37793	MatchAllDocsWeight(Searcher
1357	nextlong
49356	getBooleanQuery(List<BooleanClause>
48109	src.copy(dest,
42772	<li>When
54085	"+stopWords0[i]);
9855	"\1\206\21\0\1\113\17\0\1\25\1\66\1\64\1\115"+
51001	smaller.</p>
2074	next?="
2961	maxtimestr
1223	docCount=0;docCount<7;docCount++)
15568	SegmentInfos.FORMAT_SHARED_DOC_STORE)
5222	((jjbitVec4[i1]
3880	supplementary
6185	<p>It
48150	spanDocComparator
55319	nextInt(6);
10092	"\2\115\6\0\3\115\15\0\1\115\226\0\1\115\247\0"+
46259	,"3.",
42658	LuceneTestCase.newSearcher(reader);
2439	testNoPayload()
3315	ctor
18553	"Õ¯Õ¡ÖÕ¸Õ²",
6211	<p>In
16581	heap[i]
41289	VisitTerms(String
22526	<p>If
25727	setramusageestimator
49817	jj_3_1();
6183	apply
51099	<p>Do
18743	Î¼Îµ
11139	"\1\u03e9\15\0\1\u03e9\6\0\1\u03ea\2\u03eb\1\u03ea\5\u03eb"+
23307	testcreatedocfrequencymap
64596	((buffer[bufferPosition++]
23849	newest
8635	this.finalState
25572	checkSubreaders(
50107	addDocument}
37864	rare
58231	BytesRef(int
522	testundeleteallafterclosethenreopen
59343	"\1\137\1\153\1\137\1\0\2\154\1\140\3\137\2\0"+
19251	?¼
65878	System.out.println("Starting
694	MockIndexWriter(dir,
12357	ubf04
31867	(int[]
48848	vector.getOffsets(i);
28885	charpool
47204	superscript
15606	setNumFields(int
55324	0xdc00);
8767	docExp
39343	DocIdSetIterator,
8907	DocIdSetIterator.
19259	?
4077	NumericField("field4",
26112	(fillFields)
65447	apple
19258	?
19261	?
48093	IOUtils.closeWhileHandlingException(priorException,
61023	"\10\232\1\u03dc\1\232\175\0\1\351\15\232\1\u0133\14\232"+
19262	?§
43909	WITH
19263	?
17384	testquerywrapperfilter
10442	"\2\0\1\u0167\1\u013f\4\0\1\u013f\1\136\150\0\1\u0182"+
19255	?
59813	"\1\u0154\3\137\1\0\2\137\1\140\1\u0143\1\u0144\1\u0145"+
52948	maxLen
19254	?
19257	?
19260	?
50412	(sr.hasChanges)
21449	e2.seek(1027);
19252	?
19256	?
4598	assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT,
25982	OutOfOrderOneComparatorNonScoringCollector(FieldValueHitQueue<Entry>
50516	IndexWriterConfig)}
38925	adddocumentwithtermvectorfields
59587	"\3\36\1\355\1\36\1\355\10\36\1\355\1\36\2\355"+
21013	rate
18095	sumOfSquaredWeights()
51690	merge.readers.size();
15647	pre-LOCKLESS
5921	elementPos
16845	assertTrue(!origSegmentReader.isDeleted(2));
50272	functionally
19264	?
57081	significant.
20895	<p>Some
12870	u06ed
6050	'o',
66932	valid(pair2);
59682	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\2\266"+
50940	"deleteDocuments(Term)");
25099	rewriteMethod.
3886	implementation
60126	"\1\u021e\2\u021c\1\u021f\3\u021c\1\u0220\3\0\1\u0221\1\0"+
6084	'o';
17790	rewriteMethod;
12469	u06f7
28226	colls[n++]
34749	assertEquals("triplemulti
17767	<p>On
35042	filtered
30005	u073e
19520	addSuppressed((priorException
52106	indexsorter
7156	floattosortableint
1535	TermInfosReaderIndex(indexEnum,
7414	finishDocument()
62796	(fieldHits.fields[fieldIDX].getType()
12279	u8d5a
60120	"\1\0\1\176\2\0\1\177\3\0\1\54\2\0\1\55"+
5664	orig_floattobyte
28285	heapRemoveRoot();
2204	NoMergePolicy(false);
38878	reader2.addReaderClosedListener(listener);
66145	BooleanQuery2
9910	"\1\0\1\32\2\0\4\32\2\0\1\32\147\0\1\33"+
37374	Safety
34325	Similarity#setDefault(Similarity)
11831	char[zzCurrentPos*2];
64488	excludeSpans.doc())
24696	(msg,
42437	setPayloadData(String
60625	"\23\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
6318	BooleanQuery)
4875	setindexingchain
32642	encodedBuf2);
52917	0xDC00;
59553	"\2\67\7\0\3\67\2\0\2\67\12\0\2\67\1\0"+
17700	BooleanQuery,
50728	maxBufferedDeleteTerms);
20009	BooleanQuery.
11710	zzLexicalState
30695	"\2\64\3\0\2\64\1\0\1\64\4\0\1\64\1\0"+
10059	"\1\25\1\0\1\25\1\0\4\25\2\0\1\25\2\0"+
41253	fstEnum,
62724	tokens[random.nextInt(tokens.length)]));
2622	fails
10510	"\175\0\1\346\7\230\1\u016a\22\230\1\347\12\230\175\0"+
55677	IndexWriter(addDir,
20992	END_COUNT
13081	u8d46
56591	assertEquals(now,
21407	cr.openInput("f11");
27539	"\u005F\u0308\u0031\u002E\u2060",
61570	u8d3c
49481	jj_la1[1]
33531	01234567890123456789012
21973	DefaultSkipListWriter
38953	curfield1
38954	curfield2
12680	u8d50
48792	(testFieldsStorePos[i]
26788	mimic
48188	subSpans[i].skipTo(target))
35997	blindly
65627	oldDeletable.get(i));
20103	sumExpl
38721	index2.document(i);
6769	BooleanQuery}
64858	intStarts
21539	fileIdx,
19564	CharsetDecoder}.
49477	jj_la1[0]
39995	super.termDocs(term);
47318	¹
47463	¹
47465	¹
47533	¹¿
47482	¹
60537	"\3\0\1\137\4\0\2\137\150\0\1\u0101\16\266\1\u0394"+
47329	¹
47478	¹
47480	¹
47460	¹
12757	ube57
47434	¹
31711	org.apache.lucene.util.CommandLineUtil;
19240	¹
47432	¹
19247	¹
19245	¹
37894	WeakIdentityMap(Map<IdentityWeakReference,
19246	¹
19244	¹
47347	¹
47310	¹
9390	"\4\132\1\0\13\132\2\0\4\132\5\0\5\132\4\0\1\132\21\0"+
47377	¹
47294	¹
47522	¹¾
19242	¹
19243	¹
47334	¹
19241	¹
47331	¹
19239	¹
2463	results);
12040	u0716
58785	asUnicodeChar(s.charAt(0))
53242	trail_surrogate_mask_
47507	¹§
14964	posincr
64249	interpreted/parsed.
12356	ube61
45729	THORN
57058	<td>1.00</td>
6850	<code>null</code>.
54209	797;
23665	gethitcount
63158	toHexString(term)
12184	u50dd
20788	output2);
8630	IllegalStateException("The
13158	ube4d
63513	hex(bits2int(val)).strip('L')
51455	numRamDocs()
24029	String.valueOf(Byte.MAX_VALUE),
42990	ReferenceManager}
53143	chars.offset
54088	i<a1.size();
43613	getCachedResult(IndexReader
39794	newReaders[i].close();
54237	BitSet(size);
16010	super(threads);
67497	c.refreshedReader);
52486	rd1;
56000	#resizeBuffer(int)}
15785	output.writeByte((byte)
39179	positions.get(pos).intValue(),
17984	words[docnum],
12986	u50c9
32943	offsetAttribute.startOffset();
37148	bit_last_arc
3357	num_bytes_int
55076	th.base
51720	merger's
66314	sugar:
13387	u50bf
24836	maxLength="
5748	clarity
12068	u0701
12585	u50d3
27838	"\u0061\u0027\u2060\u0031\u0027",
43369	(diff
52487	rd2;
14655	String.compareTo)
64664	currentScore;
58064	DocumentsWriter.PerDocBuffer
51998	docWriter.bytesUsed();
42507	pool.size();
21640	this/these
10097	"\1\346\32\230\1\347\12\230\175\0\61\231\1\0\1\350"+
49545	jj_la1[7]
18120	(disi
31320	//Query
4663	IndexWriterConfig",
10852	"\24\230\1\u02e7\5\230\1\347\12\230\175\0\1\346\24\230"+
48277	prevSpans.next())
56487	(queue
6799	min,
20040	min)
35936	values.length;
19311	luceneresourceswikipage
24804	Integer.parseInt(data[doc][2]);
41908	seekresult
6812	min;
44799	"á¸­"
61646	ubda0
59111	"\2\u2108\2\u21ab\2\u224e\2\u22f1\2\u2394\2\u2437\2\u24da\2\u257d"+
34811	MultiAnalyzer()
19875	expectedArrayTypes.put(FieldScoreQuery.Type.SHORT,
49544	jj_la1[6]
22961	testEmptyListSort()
60429	"\1\137\4\0\2\137\151\0\4\u020e\2\0\1\u020e\15\0"+
55879	testsegmentwarmer
55241	assertEquals(ff1
17616	testInitValue()
59147	"\2\ud7c5\2\ud868\2\ud90b\2\ud9ae\2\uda51\2\udaf4\2\udb97\2\udc3a"+
18604	ÙÙ
38920	with_offsets
12756	ubdb4
10910	"\6\0\12\u031f\1\u0320\175\0\4\u0321\2\0\1\u0321\15\0"+
7478	nexttokenindex
47574	¹»
49566	jj_la1[9]
37276	(true
16541	pqTop.change().
635	exception2");
47569	¹µ
24120	(data[i][2]
18055	(query
12470	u079a
58154	PersistentSnapshotDeletionPolicy}
2815	probably
47589	¹¼
59640	"\3\137\3\0\1\137\4\0\2\137\2\0\1\342\3\0"+
13157	ubdaa
68107	<code>prePopulate</code>
63884	TestingCharTokenizerNormalize(Version.LUCENE_30,
3597	cascaded
16804	assertDelDocsRefCountEquals(1,
18015	minr
12186	u5223
49561	jj_la1[8]
30568	"\5\0\1\133\3\0\1\134\11\0\1\46\2\0\1\135"+
12988	u520f
12355	ubdbe
24123	(data[i][3]
66298	Arrays.fill(postingsHash,
62337	span.next());
52674	currentScore,
30220	ti2.docFreq)
67076	performTest(10);
52190	mingen
16460	fail,
12871	u0790
64248	ValueSourceQuery
66486	Unpaired
15153	testLoadFirst()
44902	"á¸³"
48329	prevstart
63950	TestAnalyzer1();
16816	assertDelDocsRefCountEquals(2,
37439	PhraseQuery}.
49497	jj_la1[3]
10057	"\1\25\1\0\2\25\1\0\2\25\2\0\1\25\2\0"+
31602	RANDOM_MULTIPLIER
12587	u5219
4814	documentswriter
912	fail:
24126	(data[i][4]
10416	"\1\u016a\13\230\1\347\12\230\175\0\1\346\13\230\1\u017a"+
17854	minIP
38370	x80002510
41242	IntsRefFSTEnum.InputOutput<Long>
61754	u077c
9923	"\1\0\1\25\1\0\1\25\1\0\4\25\2\0\1\25"+
38533	assertEquals(bin[i],
1046	fail2
35848	addDoc("C");
1043	fail1
30510	Southeast
32429	filters.
59680	"\1\266\3\u0107\1\u010f\14\u0107\2\266\2\u0107\2\266\1\u0107"+
24620	"OutOfOrderOneComparatorNonScoringCollector",
40370	inOrder.length;
8040	fail.
20684	nosuchdirectoryexception
59059	"trick"
13389	u5205
49496	jj_la1[2]
44872	"á¸²"
50504	<code>a</code>.
7546	<i>serialized</i>
64868	toArray.textStarts,
51077	<p>To
24129	(data[i][5]
11395	"\2\u04af\2\u04b0\1\u04af\1\u04b0\1\u04af\1\u04ae\13\0\1\u02cf"+
11148	"\1\u03ee\1\u0391\13\0\1\u02cf\161\0\4\u03ef\2\0\1\u03ef"+
49538	jj_la1[5]
48445	topdoc
19988	PhraseQuery}s
38371	x8000251c
9846	"\2\0\1\25\1\172\32\25\1\0\12\64\2\0\1\66"+
11406	"\1\u0480\174\0\1\u0163\4\u04b6\2\0\1\u04b6\15\0\1\u04b6"+
57688	values[index]
56980	u0773
43806	assertTermEquals("N",
24511	"BFJHD"
67136	checktokens
24132	(data[i][6]
28925	(FieldCache
67976	testMockGraphTokenFilterAfterHolesRandom()
55592	dirReader.close();
40906	IntsRefFSTEnum.InputOutput<T>
50497	config.getSimilarity
66510	(pruning
60532	"\2\137\150\0\1\u0101\32\266\1\142\4\266\1\u0382\5\266"+
37750	results",
28725	"/Computers/ObsoleteOS"));
21808	removeField(String
49522	jj_la1[4]
16409	snapshots.entrySet())
4905	java.util.HashMap;
59276	"\1\70\1\0\1\51\1\0\1\71\2\0\1\72\3\0"+
54048	getnormfilename
13272	u0786
59569	"\20\0\2\116\25\0\2\116\6\0\3\116\15\0\1\116"+
50077	startPtr;
8285	misc
24135	(data[i][7]
58565	hset
35349	teststoplist
18588	Ø§ÙÙØ«Ø§Ø¦ÙÙ
3572	Determine
16397	PersistentSnapshotDeletionPolicy(
50358	mapToLive(SegmentInfo
40347	miss
56155	testRangeQueryRandCollating()
25592	kidKey
4485	testrightopenrange
61878	u05a0
61879	u05a1
30001	u05a2
39524	utf16Result2;
61880	u05a3
61881	u05a4
38354	x80000000000020l
61882	u05a5
61883	u05a6
61884	u05a8
12868	u05a7
34708	qp.parse("\"foo\"").toString());
61885	u05a9
54595	assertTrue(act.order
40192	this.smi
18186	StringBuilder("ConstantScore(")
1349	search
7951	location.
7886	MMapDirectory's
51910	location)
59685	"\1\u0107\3\266\1\u0107\5\266\3\u0107\3\266\1\u0107\2\266"+
18791	"àºªàº²àºàº²àº¥àº°àºàº°àº¥àº±àº",
4410	assertTrue("Docs
31936	NumericField}/{@link
13082	u8de9
15992	TimedThread[]
53492	<i>searchers</i>.
12681	u8df3
25607	parent
20233	parens
61571	u8ddf
26149	trackmaxscore
60468	"\2\u0357\1\u0356\5\u0357\1\u0358\175\0\1\u0168\4\u0359\2\0"+
50764	"version="
9718	"\1\0\2\32\1\0\4\32\1\0\14\32\1\0\4\32"+
60192	"\3\0\1\137\4\0\2\137\150\0\1\u0101\24\266\1\u0260"+
618	writer.updateDocument(idTerm,
64137	testindexinput
40284	undelete
61906	u05c0
24342	v2[j].compareTo(lastSub);
61645	ubcfd
20483	text_field
32061	computes
61911	u05c5
61912	u05c6
49619	jj_consume_token(RANGEEX_START);
9989	"\21\0\1\113\17\0\1\25\1\77\1\26\1\115\3\0"+
61913	u05c7
61914	u05c8
61907	u05c1
61908	u05c2
61909	u05c3
61910	u05c4
3710	typeattribute
12280	u8dfd
35217	int[numberOfSkipLevels];
41889	doreverselookup
61915	u05c9
43323	locations
15946	computed
61904	u05be
61903	u05bd
39013	cs.add("test");
61905	u05bf
36739	BIT_TARGET_NEXT))
61901	u05ba
43252	assertFalse(tdocs.skipTo(10));
61902	u05bc
51880	Caution:
12066	u05bb
67414	parallelReader1.add(initReader2);
8604	sink.setFinalState(finalState);
53393	outOfMemoryError.initCause(e);
54964	MAX_SEARCHER_GEN)
61897	u05b6
61898	u05b7
61895	u05b4
61896	u05b5
8655	desired
61893	u05b2
39523	utf16Result1;
61894	u05b3
1880	FIELD_IS_NUMERIC_LONG;
61892	u05b0
60735	"\14\0\1\u0126\161\0\4\u0444\2\0\1\u0444\15\0\1\u0444"+
56816	needsmerging
12467	u05b1
30673	"\1\53\2\0\4\53\2\0\1\53\42\0\1\54\11\0"+
41002	seekCeil("
59189	"\3\uadb5\3\uae58\3\uaefb\3\uaf9e\3\ub041\3\ub0e4\3\ub187\3\ub22a"+
26063	(FieldDoc).
54969	MAX_SEARCHER_GEN;
52048	dropall
61900	u05b9
61899	u05b8
6542	href="#precisionStepDesc"><code>precisionStep</code></a>
48172	clauses[i].getSpans(reader);
61891	u05af
61890	u05ae
61889	u05ad
61888	u05ac
61887	u05ab
61886	u05aa
56589	lastTimestamp,
38355	x80000000000024l
16347	inorder
9541	"\1\u196e\1\u1a11\1\u1ab4\1\u1b57\1\u1bfa\1\u1c9d\1\u1d40\1\u1de3"+
65349	mike
53041	((b&0x7)<<18)
18216	scoresdocsoutoforder
19507	completion
50758	IndexWriter.defaultInfoStream;
11647	"\1\u0386\4\u0560\2\0\1\u0560\15\0\1\u0560\6\0\12\u0560"+
60721	"\4\u02e2\1\u0428\5\u02e2\2\u0428\3\u02e2\2\u0428\10\u02e2\1\u0428"+
10391	"\1\346\1\230\1\u016a\1\u0170\2\u016a\2\230\1\u016a\6\230"+
12985	u5026
59291	"\21\0\1\122\2\0\1\123\42\0\1\32\7\0\1\32"+
63540	>>>=16;
12584	u5030
15572	SegmentInfos.FORMAT_SINGLE_NORM_FILE)
64371	hascutoff
57985	state.numDocs)
59405	"\2\27\7\0\3\27\2\0\2\27\12\0\2\27\1\0"+
13386	u501c
64200	0xFFFF);
21981	state.numDocs;
39608	output.writeVInt(length);
35182	term-frequency
38659	doc.add(newField("tvoffset","tvoffset",
6779	machine,
50877	use.</p>
39068	map.put(NOT_IN_MAP,
51191	machine.
60012	"\1\136\4\u01b4\2\137\1\u01b4\15\137\1\u01b4\6\137\12\u01b4"+
10994	"\1\u0373\31\264\1\141\12\264\1\0\3\136\1\0\2\136"+
15781	output.writeInt(docCount);
61097	"\2\0\1\u056d\15\0\1\u056d\6\0\12\u056d\1\u04d5\175\0"+
30201	termsCache.put(cacheKey,
59414	"\177\0\2\115\6\0\1\115\153\0\1\115\5\0\1\115"+
39192	idfExp.explain()
57615	CharFilter}.
56203	Main
23225	srchr.setSimilarity(customSimilarity);
12183	u503a
67739	csqlen
4487	testrightopenrange_4bit
20920	getPositionIncrement();
11306	"\1\u0468\6\0\12\u046b\1\u0469\13\0\1\u0325\160\0\1\u0386"+
18401	third",
7716	NUM_FIELDS
38628	reader.deleteDocument(11);
19333	subjectivity
32479	writer1.prepareCommit();
19434	DocFieldProcessorPerField
26030	OutOfOrderMultiComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>
29284	readvlong
30809	again:
14742	comparator
64247	again!
65436	org.apache.lucene.search.function.DocValues#strVal(int)
60990	"\1\u04c1\255\0\1\u016e\230\0\1\u041d\175\0\4\u04ff\2\0"+
4638	getters.add("getMergePolicy");
32546	results:"
48032	<li>Returns
37040	(absPtr
43638	delcorekey
21461	again,
316	again.
65099	cut,
52289	Map<Directory,
52739	/*****
59466	"\1\60\4\0\1\201\14\0\1\62\4\0\1\202\2\0"+
34183	sortrptgroups
2726	timeAllowed,
46984	curl
58383	"or",
10915	"\1\u0327\245\0\12\u0328\11\0\1\u020c\164\0\4\u0329\2\0"+
30830	if(read
61647	ube43
24297	SortField.LONG,
20588	collationkeyanalyzer
62948	difFiles(files,
58516	copyCaseSens
46648	"âª"
17913	minRP
33058	src2.addAttribute(CharTermAttribute.class);
22896	buffer.append(match.toString(field));
27207	"\u3031\u0061\u0027",
23203	ramDirectory2=newDirectory();
14869	SortField.LONG:
52074	measured
37431	goldFreqs[i]);
58950	qp.setDefaultOperator(QueryParser.OR_OPERATOR);
29984	"\1\116\1\0\1\116\2\0\2\116\1\0\3\116\1\0"+
23933	nanotime
9774	"\2\0\1\47\1\0\1\50\1\0\1\51\2\0\1\52"+
9621	"\2\ub04b\2\ub0ee\2\ub191\2\ub234\2\ub2d7\2\ub37a\2\ub41d\2\ub4c0"+
19112	standardanalyzer
57697	testCommitOnClose()
4816	indexreaderwarmer
3170	cached)";
37465	assertEquals("reverse
49608	("*".equals(goop1.image))
61469	"\1\u069c\26\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u069d\31\u02e2"+
5132	(jjCanMove_1(hiByte,
32383	temp_dir
45426	"áµ½"
21838	result.toArray(new
43111	"z",
46801	expectedOutputTokens
67258	TestReopen()
50899	flush(true,
8625	this.filter
29424	getprefix
52827	Machines
2290	payloadAtt
67726	setLength(length);
36517	measure,
16103	consecutive
31562	35L);
30116	this.term
22372	mergeSort(a,
5737	machines
61573	u8f25
56082	WildcardQuery(wild);
2429	through.
43594	CachingWrapperFilter.DeletesMode#RECACHE}.
57397	opteron
48427	nrMatchers()
11849	zzEndRead
53929	testcodepointatcharsequenceint
53586	aggregatedDfs[j]
61935	u05dd
28637	Collections.singleton("<NUM>");
63887	TestingCharTokenizerNormalizeIsTokenChar(Version.LUCENE_30,
61936	u05de
16045	indexerThread.start();
29644	"\3\132\1\133\10\132\2\133\2\0\12\134\6\0\33\142\1\143\4\0"+
61933	u05db
61934	u05dc
25863	collectpayloads
61937	u05df
62167	doc1.add(newField("field",
49805	jj_expentries.get(i);
56333	mid,
23935	ensureopen
61932	u05da
56314	mid)
61944	u05e6
51514	merge.segString(directory)
61943	u05e5
17704	compute,
61942	u05e4
20210	(BooleanQuery)this.clone();
61941	u05e3
61947	u05e9
61946	u05e8
61945	u05e7
8682	threadsAndFields,
64232	certainly
19768	lastpos
61940	u05e2
23579	3000);
65069	nodeIn.clear();
61939	u05e1
52398	addtoemptyindex
31862	mid;
61938	u05e0
61916	u05ca
61917	u05cb
61918	u05cc
61919	u05cd
61920	u05ce
61921	u05cf
28462	randomrealisticunicodestring
55586	nrtReader.close();
29410	PrefixTermEnum(reader,
28452	c.subSequence(-1,
41971	testsinglestring
15973	indexfilenamefilter
61925	u05d3
61924	u05d2
61927	u05d5
61926	u05d4
61929	u05d7
50331	r.getVersion()
67815	conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);
61928	u05d6
61931	u05d9
35803	NoSuchElementException
61930	u05d8
4648	assertTrue("method
19813	matched!",N_DOCS,h.length);
61923	u05d1
20206	query.setBoost(getBoost()
61922	u05d0
27082	"\n\u000B",
61969	u05ff
55204	(!termEnum1.next())
61967	u05fd
42789	startOffset,endOffset;
61968	u05fe
61965	u05fb
57302	fast(er)
5793	long[ENTRY_SIZE][ENTRY_SIZE];
61966	u05fc
45172	,"(n)",
61964	u05fa
34019	res.size();
35020	filterIter.advance(scorerDoc);
35943	false)).setOpenMode(OpenMode.APPEND));
11542	"\1\u02cf\161\0\4\u0519\2\0\1\u0519\15\0\1\u0519\6\0"+
30582	"\2\0\1\25\1\0\1\25\103\0\2\26\6\0\1\26"+
24701	HashMap<String,Float>();
39653	11377;
55230	termEnum1.next();
64177	testbufferedindexinputread
11353	"\12\230\175\0\1\346\32\230\1\347\6\230\1\u048d\3\230"+
7515	lastVectorFieldName;
30091	monotonically
67037	TestLazyProxSkipping
66931	valid(pair1);
61950	u05ec
61951	u05ed
61952	u05ee
49197	prohibited;
61953	u05ef
61948	u05ea
37279	<code>ignoreCase</code>
61949	u05eb
6326	prohibited.
17232	storeDir
36375	pre-packed
61963	u05f9
61962	u05f8
59970	"\12\u019e\1\u019d\13\0\1\u0126\160\0\1\u0168\4\u019c\2\0"+
49228	prohibited)
67680	deldocs
61959	u05f5
20179	prohibited,
61958	u05f4
61961	u05f7
56180	junit.textui.TestRunner;
1463	numdocs2
61960	u05f6
21682	justwildcardsleft
61955	u05f1
34470	setReaderPooling(boolean
61954	u05f0
61957	u05f3
61956	u05f2
43835	warnings;
30002	u0609
61977	u0607
61978	u0608
61975	u0605
61976	u0606
27755	"\u0061\u0027\u0041"
7309	rage
24924	agice
64211	lock.lockAttempts,
52069	getformat
47970	searchFiltered(IndexWriter
6403	get(Reader
32856	perThread.termsHashPerThread.reset(false);
61990	u0615
59323	"\1\140\3\137\3\0\1\137\4\0\2\137\2\0\1\70"+
3612	tieredmergepolicy
37119	initialize(topN);
61989	u0614
48246	(matchDoc
61988	u0613
61987	u0612
61986	u0611
18665	(à¦à¦à¦à¦¿
61985	u0610
59179	"\3\u7ac5\3\u7b68\3\u7c0b\3\u7cae\3\u7d51\3\u7df4\3\u7e97\3\u7f3a"+
50460	AlreadyClosedException}
61991	u0616
52779	asserthits
61992	u0617
33486	"kkk"
61993	u0618
61994	u0619
61979	u060a
61980	u060b
61981	u060c
20401	org.apache.lucene.search.SortField;
61982	u060d
15678	pre-lockless-commit
53090	Mask
64587	bufferStart+bufferPosition+len;
54038	closeinput
68137	prepopulate
61984	u060f
61983	u060e
5390	queryparsertokenmanager
62005	u0624
62004	u0623
61079	"\1\u034e\2\u02e2\1\u0556\7\u02e2\175\0\1\u034d\7\u02e2\1\u0557"+
62007	u0626
11506	"\13\0\1\u02cf\161\0\4\u0504\2\0\1\u0504\15\0\1\u0504"+
62006	u0625
62001	u0620
8771	wrong",
62003	u0622
62002	u0621
16516	non-sentinel
62008	u0629
18026	u0627
22904	payloadToMatch);
18027	u0628
64343	Loading
39064	map");
30495	treeset
61995	u061a
61998	u061d
61999	u061e
61996	u061b
38855	sdp.snapshot("c2");
61997	u061c
60165	"\1\u0101\24\266\1\u024a\5\266\1\142\12\266\1\0\3\137"+
62000	u061f
12682	u8e96
55977	EMPTY_TERM_POS
18025	u0633
62017	u0632
62016	u0631
62014	u0630
65100	'distinguished
62020	u0637
61752	u0636
62019	u0635
19154	testarabic
62018	u0634
20893	positionIncrement
41388	Integer.valueOf(args[1
18034	u0638
62021	u0639
65679	rc);
56411	tmp.setSegmentsPerTier(100);
39036	assertEquals(hm.get(new
38877	closeCount[0]);
62009	u062a
4067	atLeast(4096);
2244	setindexwriter
62010	u062b
2234	factor
62011	u062c
8120	rafc
62012	u062d
16450	directory");
62013	u062e
19550	Throwable.class.getMethod("addSuppressed",
18032	u062f
53214	half_base
51163	AlreadyClosedException.
64186	charstoread
13270	u0640
61572	u8e82
62029	u0642
62028	u0641
28751	skipInterval-th
62031	u0644
62030	u0643
62033	u0646
62032	u0645
62035	u0648
62034	u0647
28929	org.apache.lucene.search.function.DocValues#floatVal(int)
28273	numScorers)
20709	this.data
52483	TestParallelTermEnum
30386	twophasecommitimpl
30610	"\3\0\2\102\1\0\1\102\4\0\1\102\1\0\1\102"+
29444	TestSystemPropertiesInvariantRule
42540	ivalue
17817	toptermsrewrite
16517	#lessThan}
27687	"\u0061\u2060\u0031\u002C",
62806	shardsearcher
62683	"ShardSearcher("
36504	writer.writeInt(target.node);
23590	128,999)
9920	"\122\0\1\25\6\0\3\25\2\0\1\25\2\0\2\25"+
63089	tokenCount;
31184	{"19.cfs",
62450	coordinator;
37513	"woo
7372	populateResults(results,
63897	testCrossPlaneNormalization()
60312	"\176\0\32\u0216\1\u026f\12\u0216\231\0\12\u02d9\176\0\4\u02da"+
51643	merge.info.setBufferedDeletesGen(result.gen);
16856	cloneReader2
7464	tokenCount)
3231	maxRAMMB
28256	numScorers;
54783	existence/absence
60107	"\12\266\1\142\1\u020b\11\266\1\0\3\137\1\0\2\137"+
52079	getmaxfieldlength
63496	0x8765321,
49945	lookaheadsuccess
11872	yyline
49517	PREFIXTERM:
34874	multi2
40254	findsegmentsfile
34750	multi3
11192	"\175\0\1\346\16\230\1\u0410\13\230\1\347\12\230\175\0"+
43356	SortedVIntList.
61412	"\3\137\3\0\1\137\4\0\2\137\216\0\1\u05f2\175\0"+
58873	DEFAULT_BUFFER_SIZE
15238	fsDir.fileExists(name);
34732	multi)
41309	intsRef
24650	multi,
48788	MyAnalyzer()).setMaxBufferedDocs(-1).setMergePolicy(newLogMergePolicy(false,
21073	(!gotExc)
64633	(int)(pos
32858	enabled,
7990	enabled.
12354	ubd1b
52990	result.result
31717	lucene-core.jar
34051	tmp.get(g).add(pp);
48686	newFSDirectory(this.__test_dir);
15315	nf.setLongValue(l);
11136	"\12\u03e5\11\0\1\u020c\164\0\4\u03e6\2\0\1\u03e6\15\0"+
4331	cur;
51624	mergeInit");
61970	u0600
61971	u0601
7739	MAGIC_FIELD
61972	u0602
11011	"\2\136\151\0\4\u037d\2\0\1\u037d\15\0\1\u037d\6\0"+
61973	u0603
2292	hasNext
61974	u0604
20516	<li>JVM
68146	FixedBitSet(maxPos
57392	server
19313	html
14849	FieldComparator<?>
30162	resources.termEnum
59764	"\2\0\1\25\1\u0141\15\36\1\250\14\36\1\142\12\143"+
25856	serves
39350	bitSetDoc
41656	//Writer
62106	u0693
62105	u0692
41102	prefixes.entrySet())
49006	MOD_REQ
62108	u0695
28251	subqueries
62107	u0694
35897	assertFalse("Different
33426	main.flush();
62104	u0691
62103	u0690
11230	"\175\0\1\u0386\4\u042b\2\0\1\u042b\15\0\1\u042b\6\0"+
62110	u0697
62109	u0696
62111	u0699
18033	u0698
62081	u067a
62082	u067b
62083	u067c
24245	"GCIEA");
22997	directories
66827	Integer.valueOf(integer.intValue()
20085	maxCoord++;
62084	u067d
62085	u067e
62086	u067f
56632	obsoleted
64338	this.docCountCutoff
3134	cachedScores.clear();
25695	InsanityType("SUBREADER");
27706	"\u0061\u003A\u0308\u0041",
48074	this.toString();
1990	table
8017	getCleanerMethod.invoke(buffer);
57031	<th>cardinality</th>
62099	u068c
62100	u068d
24264	SortMissingLastTestHelper(
62097	u068a
62098	u068b
62101	u068e
41361	System.out.println(((System.currentTimeMillis()-tStart)/1000.0)
62102	u068f
210	Make
1935	position
67704	buffer.getChars(offset,
37290	#StopFilter(Version,
64135	tmpStr.equals(utf8Str.substring(1))
17047	Map.
5817	(BLOCK_SIZE
25944	maxScore.
35074	nextPos;
16267	SpanQueries
35701	Many
58925	FieldInfo(name,
27647	"\u0061\u2060\u002C",
62112	u069a
6081	"hello3");
62113	u069b
62114	u069c
62115	u069d
40500	(!clazz.desiredAssertionStatus())
62116	u069e
62117	u069f
41705	startArc.output);
58967	io.close();
18185	toString(String
7524	termswriter
28667	stpf.getAttribute(PositionIncrementAttribute.class);
53215	x0010000
40182	MultiTermDocs(IndexReader
52767	tolerance);
20271	sumexpl
26000	maxScore)
36388	out.writeByte(t);
25977	maxScore,
64694	-(upto+1);
48743	testFieldsStorePos
4600	assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS,
38403	assertEquals(c.getUserData(),
40372	inOrder[i]);
62047	u0656
62048	u0657
54272	ByteBlockPool.BYTE_BLOCK_SIZE
49227	(!required
8726	""+i;
62049	u0658
62050	u0659
63935	testingchartokenizernormalizeistokenchar
62044	u0652
62045	u0653
12468	u0654
62046	u0655
62042	u0650
62043	u0651
51615	race
35543	A[i+7])
41477	BytesRefFSTEnum.InputOutput<Long>
62026	u063e
10389	"\1\346\3\230\1\u016a\1\230\1\u016a\4\230\1\u016a\10\230"+
62025	u063d
28231	(!c.acceptsDocsOutOfOrder())
62027	u063f
16190	""+i,
62022	u063a
15076	assertTrue(field.isTermVectorStored()
62024	u063c
62023	u063b
14934	stringcomparatorlocale
56414	(i%4),
54726	NativeFSLock(File
5596	positive
62036	u0649
44623	"áµ¹"
36644	getNodeAddress(node);
40321	</code>Similarity</code>
62065	u0669
62063	u0667
62064	u0668
62061	u0665
62062	u0666
62059	u0663
62060	u0664
62057	u0661
67461	modifier.addDocument(createDocument(n
62058	u0662
34109	(bb.get(i).intersects(bb.get(j)))
62056	u0660
8074	raf,
62041	u064f
43659	""+j,
62040	u064e
62039	u064d
62038	u064c
62037	u064b
12869	u064a
16735	assertTrue("deleting
13083	u8e8c
5986	conditional
39262	(MultiPhraseQuery)o;
35100	file.setLastModified(System.currentTimeMillis());
28580	alloc
62075	u0674
43807	assertTermEquals("O",
62076	u0675
62077	u0676
62078	u0677
62079	u0678
924	allow
62080	u0679
37231	tobytesref
18004	minid
37937	valueIterator()
30003	u0670
62072	u0671
62073	u0672
62074	u0673
10313	"\2\0\1\25\1\140\22\36\1\352\7\36\1\141\12\142"+
34655	result.setValue(payloadScore);
62053	u065c
62052	u065b
12067	u065e
62054	u065d
3460	Mark
62055	u065f
21142	(normally
17205	storeCFSReader);
62051	u065a
59887	"\175\0\1\351\2\u016f\2\232\1\u016f\3\232\1\u016f\5\232"+
18005	minip
31575	testUpgradeOldIndex()
62094	u0687
62095	u0688
62092	u0685
62093	u0686
18092	query.createWeight(searcher);
15000	Random(seed);
29804	"\1\0\1\25\1\0\1\25\1\0\11\25\2\0\1\25"+
37214	getnodeaddress
62096	u0689
62087	u0680
62090	u0683
20319	assertFalse("CachingCollector
62091	u0684
62088	u0681
62089	u0682
34597	spans.getPositions();
62071	u066f
62070	u066e
31909	DEFAULT_SHORT_PARSER;
62069	u066d
62068	u066c
25381	}))),
57849	FSDirectory.FSIndexOutput}.
62067	u066b
62066	u066a
37185	nodeaddress
60189	"\2\137\150\0\1\u0101\24\266\1\u025d\5\266\1\142\12\266"+
45762	"Ã"
7355	howMany);
53618	MultiSearcherCallableWithSort(Lock
49690	jj_rescan
50677	behvaior
30009	u08da
35270	(curPayloadLength
32539	binaryBuf
40638	FSTTester<Object>(random,
31033	siMerge);
54858	genLock
26176	current.size();
50924	DWPT
12472	u08e0
25488	ReaderField
29227	if(storeOffsets)
6484	fail("IOException
42520	performtest
45764	"Ã"
46026	"á¶"
51477	docUpto
10561	"\32\36\1\141\12\330\1\0\1\136\1\151\1\136\1\0"+
11591	"\1\u0386\4\u0541\2\0\1\u0541\15\0\1\u0541\6\0\12\u0544"+
20068	{}</pre>
13274	u08cc
31305	testIndexOldIndex()
65290	getLastOutput(int
24447	FieldComparator
12873	u08d6
57950	testNegativeScores()
8949	termCompare(term))
26655	lookaheadtokenfilter
56540	exclDisi.docID();
34711	qp.parse("foo
13154	ubbc1
46075	"Ã¿"
61322	"\1\u0349\4\u0635\2\0\1\u0635\15\0\1\u0635\6\0\1\u0637"+
25306	testemptyterm
62258	"james"),
26899	Katakana}
34734	field:\"bar
62288	"james"))
54306	bytesrefhash
35370	DocIdBitSetIterator(BitSet
44033	"á¶"
40535	#reset()}).
58440	StringBuilder(NOT_IN_SET));
9780	"\1\143\1\136\1\0\1\136\1\144\1\137\3\136\3\0"+
27041	"\r\u0308\u3031",
30895	anything.
67656	testreferencecountingmultireader
60109	"\1\u0101\32\266\1\142\1\u020c\11\266\1\0\3\137\1\0"+
61756	u08c2
10482	"\1\u0191\2\u0158\2\u0191\1\u0158\1\u0191\1\u0158\1\0\1\136"+
61414	"\175\0\4\u065c\2\0\1\u065c\15\0\1\u065c\6\0\12\u065c"+
8933	member
59740	"\42\0\1\77\1\26\6\0\1\77\3\0\1\136\33\137"+
20795	add("foo",
47130	a77e
47142	a77f
56740	KeepNoneOnInitDeletionPolicy();
47111	a77c
21089	java.util.concurrent.TimeUnit;
47128	a77d
47022	a77a
47098	a77b
37295	ignoreCase)
61643	ubbb7
27767	"\u0061\u0027\u0308\u005F",
46160	"á¶"
60704	"\175\0\1\u034d\1\u0435\1\u0428\1\u02e2\1\u042c\6\u0428\3\u02e2"+
18930	"BAR"});
40912	t.output);
31820	c.setMergePolicy(new
3756	introduced
60004	"\45\u0143\1\u016c\2\u0143\1\u0185\1\u016c\2\u0143\1\u0186\2\u0143"+
9532	"\0\uec39\0\uecdc\0\ued7f\0\uee22\0\ueec5\0\uef68\0\uf00b\0\uf0ae"+
29443	SystemPropertiesInvariantRule
15986	RANDOM;
30231	IllegalStateException("terms
47281	a781
47265	a780
4355	testRangeSplit(int
45766	"Ã"
45552	"á¶"
1175	1+gen);
50602	getFieldInfos(SegmentInfo
59125	"\2\u6858\2\u68fb\2\u699e\2\u6a41\2\u6ae4\2\u6b87\2\u6c2a\2\u6ccd"+
56703	1:0,
45727	"Ã"
47472	a782
47488	a783
47513	a784
47499	a785
47527	a786
35834	nosuchelementexception
2312	newField(PayloadHelper.NO_PAYLOAD_FIELD,
7903	exception;
51748	Very
646	exception:
65789	MatchingHitCollector
17584	IndexSearcher(dir,
42122	intsEquals(IntsRef
47486	a75b
54326	offsethash
47469	a75a
24863	docValues);
66354	(postingsHash[i]
46042	"Ã"
47607	a75f
67647	refreshreader
12352	ubbd5
47596	a75e
47008	a779
62514	nrOptRequired)
21108	newCondition()
52531	assertEquals("field3:over",
8298	gibytes
5478	names
23066	mulitSearcher
67100	LowerCaseFilter}
30114	DoubleBarrelLRUCache.CloneableKey
55142	StringHelper.intern(idField);
12753	ubbcb
7950	named
35850	testInclusive()
54140	testexactcase
47414	a74f
56966	ClassicTokenizerImpl(java.io.InputStream
47370	a74c
47404	a74b
47408	a74e
45622	"á¶"
47405	a74d
47368	a74a
1266	exception)
31901	ByteParser()
7340	exception,
47597	a768
3550	exception.
9224	Iterable<Term>()
46614	MINUS
4489	testinfinitevalues
47541	a766
39620	format_version_utf8_length_in_bytes
47547	a767
47609	a760
59796	"\2\137\1\140\3\137\3\0\1\137\1\164\3\0\2\137"+
47611	a761
64254	#FLOAT}
6202	be:</p>
47667	a762
47676	a763
59809	"\13\36\1\142\12\143\1\u0152\1\137\1\144\1\137\1\0"+
12071	u08ea
7472	april
32374	teststresslocks
62264	"greta"),
34001	repeatingPPs(rptTerms);
46991	a73f
46989	a73e
34036	HashMap<Term,Integer>
45937	"á¶"
46952	a73d
46938	a73c
46950	a73b
15431	name;
46935	a73a
63313	0x654321,
45652	"Ã"
62844	Attaches
47455	a759
56724	((1+i)%2
47453	a757
47449	a758
47442	a755
8062	name.
47447	a756
47440	a753
8063	name,
47425	a754
28383	CharsRef[numStrings];
47438	a751
47422	a752
56047	outputToString(Long
47420	a750
47242	a741
47228	a740
47246	a745
57307	thisArr
47233	a744
47244	a743
47230	a742
13390	u52a8
47279	a749
32835	fieldState
47263	a748
2601	timeout),
47277	a747
57977	lastDocID;
47261	a746
27459	"\u0030\u0061\u2060",
8946	actualEnum;
31039	siMerge2,
2851	assertEquals(resolution,
34497	sb.append("openMode=").append(openMode).append("\n");
2600	(regardless
660	name)
6190	consists
44471	"á¶"
60899	"\13\0\1\u033c\160\0\1\u03a1\4\u04ba\2\0\1\u04ba\15\0"+
4415	testSorting_8bit()
25838	clauses.get(i).clone();
64105	theBytes[bytes.length]
50175	Closeable,
12989	u52b2
37984	last.compareTo(act)
47096	a730
21434	testRandomAccess()
59772	"\1\u0145\3\0\1\137\4\0\2\137\2\0\1\50\1\0"+
46926	a732
47497	a731
46929	a734
46941	a733
46931	a736
16385	getDeletionPolicy
6223	super(matchVersion,
46945	a735
46933	a738
46946	a737
32699	assertNotNull("decode()
46948	a739
46544	LEFT-POINTING
423	http
33242	deletedDocs.get(doc);
8944	actualEnum)
66322	postingsHash.length;
44038	"á¶"
36230	flag(BIT_LAST_ARC);
44797	"á¶"
66320	postingsHash.length)
37850	java.lang.ref.ReferenceQueue;
47548	a729
47542	a728
19535	Closeable>
18641	Ü\"ÜÜÜ¢Ü£Ü©Ü ÜÜ¦ÜÜÜ\"Ü",
52618	Float.floatToIntBits(other.boost))
32650	"encoded
38969	i<iter;
22743	upperVal.longValue();
16964	LowerCaseFilter:
26794	"quick
65664	rc.count);
61277	"\1\u034e\12\u02e2\175\0\1\u034d\1\u060e\27\u02e2\1\u060f\1\u02e2"+
41967	storeords
16968	LowerCaseFilter,
11979	zzRowMapL[zzState]
1620	termEnum.term();
50035	IllegalStateException("No
1679	totalindexinterval
38757	assertTrue(tp2.next());
27975	"\u0031\u0027\u0308\u0031\u003A",
37482	right",
40036	deletionPolicy
7977	closing
66701	testerrorafter
13156	ubd07
25207	Although
41952	visitterms
19944	AbstractSet<E>
55528	omitnorms
25763	rftovalidsets
22417	offsetleft
6209	+(title:term2^5.0
60459	"\1\u016e\2\0\2\u021e\4\0\1\u021e\152\0\4\u021e\2\0"+
39856	doOpenIfChanged
24238	testTypedSort()
65723	commitstodelete
4008	argument
23894	minus
2683	FIELD_NAME,
59627	"\2\355\2\36\2\355\1\36\1\355\1\36\6\355\1\36"+
40463	follows:</b>
51846	segString(toSync)
44311	"á¶"
31176	non-3.1
42448	payload.data,
49018	MultiTermQuery.RewriteMethod
221	STALE
48871	assertTrue("tve.getOffsets()
37174	nodereftoaddress
59514	"\2\137\2\0\1\50\1\0\1\51\1\0\1\52\2\0"+
57580	dataInput.clone(),
2862	doTestMultiThreads(final
18013	minrp
19848	aSd.doc));
12187	u52c6
1527	SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment,
57557	dataInput.clone();
9878	"\14\0\1\61\4\0\1\221\2\0\1\222\21\0\1\113"+
137	IndexWriter(dir,
44469	"á¶"
16775	(IndexReader)
22576	textually
8942	automatically
42668	mergeCount.incrementAndGet();
30684	"\1\54\4\0\1\25\2\0\1\25\1\0\1\25\103\0"+
52824	1999-2010,
39914	IOException("the
12588	u52bc
60504	"\1\u0382\31\266\1\142\12\266\1\0\3\137\1\0\2\137"+
41457	FileOutputStream("/mnt/scratch/after.dot"));
28283	NO_MORE_DOCS)
12755	ubd11
20239	buffer.append('~');
16112	NO_MORE_DOCS;
44467	"á¶"
7315	convenient
9439	"\32\132\13\0\70\135\2\133\37\146\3\0\6\146\2\0\6\146\2\0"+
11149	"\15\0\1\u03ef\6\0\12\u03ef\1\u0331\13\0\1\u02cf\160\0"+
18035	testdanish
67165	newOffsets
40693	random.nextLong()
38173	0x8000000000000000L;
63655	x754
68068	rightterm
11382	"\15\0\1\u04a5\6\0\2\u04a6\1\u04a5\2\u04a6\2\u04a5\1\u04a6"+
63649	x752
15596	dirToTest;
63651	x753
62484	DisjunctionSumScorer(weight,
63648	x751
48878	fsMapper);
6137	put(CharTermAttribute.class.getName()
25785	SpanNearQuery.
1776	manage
34551	org.apache.lucene.search.Weight;
17488	assertNotNull(fieldInfos.fieldInfo("f1"));
61265	"\161\0\4\u0604\2\0\1\u0604\15\0\1\u0604\6\0\12\u0604"+
44715	"Ã"
65544	commits.add(currentCommitPoint);
61364	"\6\0\12\u0656\1\u05f2\175\0\4\u0657\2\0\1\u0657\15\0"+
30953	assertEquals(MAX_SCORE,
16292	along
51411	alone
63666	x763
63670	x764
65031	minSuffixCount2,
63678	x765
63662	x754321
35320	stop.tokenStream("test",
8561	filter);
52514	assertEquals("field1:brown",
63663	x761
3490	waiting
63664	x762
32621	originalBuf1.limit(numBytes1);
60558	"\1\u03ac\13\0\1\u02e1\160\0\1\u0349\4\u03ab\2\0\1\u03ab"+
55623	id10));
43490	<code>BitVector</code>,
61757	u0965
64964	minSuffixCount2;
45744	"Ã¾"
23490	fail");
31109	merge2
31111	merge3
63123	//w.setInfoStream(System.out);
50561	merge,
64818	-validTerms.length;
3512	merge.
14837	FieldComparator}
63128	ts.savedTerms;
11342	"\161\0\4\u0484\2\0\1\u0484\15\0\1\u0484\6\0\12\u0484"+
3528	merge)
57986	tvx.getFilePointer())
7536	TokenMgrError.java
53651	fielddocsortedhitqueue
65006	minSuffixCount1,
65091	minSuffixCount1)
59704	"\1\u0101\13\266\1\u0117\6\266\1\u0118\7\266\1\142\12\266"+
8882	docIDs
65355	traverse
17199	IOUtils.close(tis,
44156	BARRED
38502	entry);
44717	"Ã"
24139	("double",
64963	minSuffixCount1;
49308	DateField
6181	Allows
58202	Field(id,
12282	u8f43
53532	FieldDocSortedHitQueue(n);
13084	u8f2f
65469	file(s)
30010	u0941
59518	"\1\0\1\66\1\67\1\0\1\25\2\0\1\25\1\334"+
8024	buffer");
7596	retval.append("\\\'");
33439	main.seek(pos);
44721	"Ã"
39904	doOpenNoWriter(final
12683	u8f39
52109	updatedocuments
48425	(nrMatchers
10505	"\25\230\1\347\12\230\175\0\1\u01a3\15\230\1\u012f\14\230"+
5720	copyto
9781	"\1\136\4\0\2\136\2\0\1\47\1\0\1\50\1\0"+
17035	RuntimeException("You
16039	writer.addDocument(d);
2388	testMultipleMatchesPerDoc()
36285	VERSION_PACKED);
50960	getDocCount(int
1559	assertEquals(term,
49339	PrefixQuery(prefix);
37340	Prior
49328	DateTools.dateToString(d2,
28058	"\u0031\u002E\u2060\u0308\u0300",
19688	docID;
65047	frontier
5457	x80000000l
58402	assertTrue(cas.contains(TEST_STOP_WORDS[i]));
59018	"tmp",
45871	"á¶"
4281	cTopDocs.totalHits,
35224	setProxOutput(IndexOutput
42330	analyzer.setPayloadData("f3",
54297	bytesRef);
44719	"Ã"
53436	true).setIntValue(value));
21139	Terms
12590	u5402
63634	x721
12072	u098d
57363	Lowers
18344	h[1].score;
13155	ubc64
27156	"\u000B\u0031\u003A",
50573	conf.getIndexCommit();
2506	english
44255	"Ã"
45319	"á¶"
37669	repeatedfield
31273	oldIndxeDir
16568	heap[0]
57618	replacements
54874	(searcherFactory
45085	"Ã"
33273	HashMap<String,String>();
61644	ubc5a
52252	getflushpending
30988	_TestUtil.getTempDir("TestDoc");
63637	x732
63636	x731
56261	filtertermpositions
5830	currentMasks[base
56095	Term(
15266	outage");
4636	getters.add("getIndexingChain");
12353	ubc78
46514	,"18.",
12473	u0983
50128	href="#mergePolicy">below</a>
16578	heap[1]
43701	JustCompilePayloadSpans
45179	"Ã"
48745	false};
53994	bytesRef()
49311	DateTools.dateToString(d1,
17758	Term.
41214	ch[0]="
63641	x742
12754	ubc6e
63640	x741
38562	testLockObtainFailed()
63643	x743
22519	reflector)
13275	u096f
7503	{new
37663	docID)
36385	(inputType
65061	nodeIn,
54069	String[0]);
21158	docID,
12874	u0979
2084	nodeIn)
36926	NodeAndInCount(node,
10719	"\4\0\1\u01ca\151\0\51\u020c\1\u0261\3\0\3\u020c\1\u0169"+
36866	Arc()
53300	valid(_inc,
58422	set.addAll(Arrays.asList(TEST_STOP_WORDS));
52614	e.getMessage());
24666	"IDHFGJEABC");
34634	calculated
5883	updateCached();
3107	other.collect(doc);
8170	readLong()
67981	filltokens
17316	CachingWrapperFilter(qwf),
26113	casting
45176	"Ã"
47914	this.tpc
37480	assertEquals("slop
68165	buffer.freeBefore(freeBeforePos);
45571	"â­"
67547	sb.append(n);
23194	assertEquals(message,
15639	getHasVectors()
48270	possiblePayload.addAll(payload);
16927	readonlysegmentreader
28764	skipBuffer;
52165	flushdeletes
33435	"commit"
9038	sharedPrefix(BytesRef
28792	skipBuffer)
22998	indices
45181	"Ã"
18257	"elephant",
27934	"\u0031\u0027\u0308\u0001",
37514	entry",
53587	dfs[j];
15429	WITHOUT_GEN
53016	result.offsets
67077	testSeek()
40181	info...
15928	exceptions
9801	"\3\136\2\0\1\76\1\136\4\0\2\136\2\0\1\67"+
36129	(http://sourceforge.net/projects/morfologik).
44237	CURL
2900	milliseconds;
32067	getestimatedsize
38977	keyStr;
37693	org.apache.lucene.queryParser.*;
39746	(reader.numDocs()
45183	"Ã"
51216	dsName
7470	this.nextTokenIndex
67330	refreshReader(index2,
29540	1:23
12189	u540c
26275	getEncodedLength(original.array(),
36892	nodeRefToAddress,
34364	milliseconds)
65702	initDone
66927	(pair
10169	"\42\0\1\172\1\64\6\0\1\172\3\0\1\135\1\273"+
36188	nodeRefToAddress;
22476	prependAttClass)
59422	"\247\0\2\32\12\0\1\32\210\0\2\32\6\0\1\32"+
35893	assertEquals("hashcode
26695	calculates
38488	Field("tvoffset","one
67451	refreshReader(index1,
48561	maxFieldLength
19459	java.nio.charset.CodingErrorAction;
13393	u5491
6028	StringBuilder("ab");
65619	IndexWriter#deleteUnusedFiles()},
6305	(queries.length
63198	(RAM
43390	resizeBytes(lastBytePos);
56599	lastCommit
55573	newDoc);
26815	charUpto
8249	bufferunderflowexception
42434	Map<String,PayloadData>
67134	testcachingtokenfilter
61359	"\32\u02e2\1\u034e\3\u02e2\1\u0652\6\u02e2\175\0\1\u034d\32\u02e2"+
39011	assertEquals(cm.size(),
46014	"â²"
61400	"\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\4\u02e2\1\u066b\5\u02e2"+
5287	TokenMgrError("Error:
45185	"Ã"
67753	((CharBuffer)
59844	"\6\0\1\77\3\0\1\136\1\276\1\277\1\300\1\301"+
39378	Thread.interrupt()
22398	algorithms
8418	File(lockDirName);
40747	Comparable<InputOutput<T>>
34099	bb.add(b);
64895	mtr[i]
2552	multi_field
53917	assertEquals("1234\ud801",
10449	"\15\36\1\352\14\36\1\141\12\142\1\65\1\136\1\143"+
54579	sorted).
52974	unpaired
60590	"\242\0\1\u0126\214\0\2\u035b\1\0\2\u035b\2\0\1\u035b"+
12281	u8ea0
66052	testStaticMethod2()
45187	"Ã"
32481	writer2.rollback();
30526	"\0\u1688\0\u0941\0\u16ef\0\u1756\0\u17bd\0\u1824\0\u188b\0\u18f2"+
14705	Instance
65326	owner.fst.outputs.add(outputPrefix,
59471	"\1\0\1\51\1\0\1\52\2\0\1\53\3\0\1\54"+
64800	iter=0;iter<100*RANDOM_MULTIPLIER;iter++)
31595	merge:
51108	merge;
18167	collector.acceptsDocsOutOfOrder();
66615	triggerOn(SorePoint.INITIALIZER);
48471	inverteddocendconsumer
62706	searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++)
22348	algorithm,
15015	assertsubsetof
22375	algorithm.
2170	merges
31056	merger
42184	(FlagsAttributeImpl)
60729	"\1\u02e2\1\u034e\12\u02e2\175\0\34\u021e\12\u043c\1\0\2\u021e"+
7418	docstate
61503	"\2\1\10\0\1\1\53\0\1\1\71\0\1\1\147\0"+
56246	checkOverrideMethods(FilterIndexReader.FilterTermEnum.class);
44028	TURNED
46039	"â³"
45760	"Ã"
3421	merged
24633	tfcOptions.length;
40944	exist:
59779	"\12\36\1\142\12\143\1\u0142\1\137\1\144\1\137\1\0"+
12283	u8fe6
51078	IndexReader#numDeletedDocs}.</p>
30006	u07a5
44533	"á¶"
65904	assertStopQueryEquals("((stop))",
60604	"\4\232\1\352\12\232\175\0\1\351\32\232\1\352\1\u03e7"+
53513	nDocs
37616	assertTrue(rewritten
65670	SegmentInfos:
30538	"\1\0\1\116\3\0\1\43\5\0\1\44\3\0\1\117"+
12069	u07a4
37096	//System.out.println("resize
22529	interfaces
40017	(!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT))
50398	drop(List<SegmentInfo>
27678	"\u0061\u2060\u0308\u0061\u0027\u2060",
34727	assertEquals("+(foo
37898	reap();
38640	close");
40462	<b>The
53438	upper=random.nextInt(Integer.MAX_VALUE);
4720	conf.setIndexDeletionPolicy(null);
21874	buffer.append("Document<");
24593	TopFieldCollector.create(sort[i],
43921	"Ã"
23922	concurrenthashmap
17636	test_value
39924	segmentInfos.getVersion();
7415	freqproxtermswriterperthread
15460	exist)
12684	u8fdc
24398	parseDouble(final
21820	exist,
37992	i<100000;
41659	assertTrue(w.toString().indexOf("label=\"t/[7]\"")
20657	exist.
10844	"\175\0\1\346\14\230\1\u02e4\15\230\1\347\12\230\175\0"+
15713	Character.isDigit(fileName.charAt(patternLength)))
39897	segmentInfos.getVersion())
53610	scoreDoc.doc
34584	super.explain(reader,
29879	"\1\0\1\25\1\0\11\25\2\0\1\25\4\0\1\25"+
59413	"\1\25\1\115\1\0\1\25\2\0\1\25\3\0\1\25"+
44309	"á¶"
28560	interface.
42907	newTerm)
22538	interface,
10803	"\1\u02bb\5\264\1\141\12\264\1\0\3\136\1\0\2\136"+
3119	nextLength
30683	"\1\25\5\0\1\25\2\54\5\0\1\25\2\0\1\25"+
41252	assertSame(termEnum,
3589	SegmentInfos.
65882	createRandomTerms(100000,25,.2,
63518	interface?
55458	termPositions.freq();
50576	SegmentInfos,
57157	-endIndex
55311	char[100];
65456	SegmentInfos)
49436	s.charAt(i);
25861	19);
62461	Coordinator();
65811	MatchingHitCollector(result)
17097	getfieldtoterms
37227	getarccount
67521	ReaderThread
67350	reader0.getSequentialSubReaders();
164	exists
15947	sizeinbyteswithstore
27032	"\r\u0308\u0001",
7685	addescapes
9031	lastTerm.text
27336	"\u002C\u000B",
34434	#setMaxBufferedDocs(int)
7249	ScoreDoc>
64335	TermCollector
7368	However
45372	,"OE",
709	thread.run();
33318	committing
28302	subScorers[root].score();
19612	unlike
31160	"zip
61298	"\25\u02e2\1\u0625\4\u02e2\1\u034e\12\u02e2\175\0\1\351\32\232"+
24272	"byte",
44085	"Ã"
42889	newTerm,
2254	org.apache.lucene.search.spans.Spans;
44177	"á¶"
32521	NUM_RANDOM_TESTS;
41604	generate(ArrayList<String>
10961	"\1\346\32\230\1\347\3\230\1\u0359\6\230\175\0\1\346"+
15198	testLoadSize()
26516	assertTrue(deleteReader.numDocs()
29877	"\1\0\2\25\1\0\1\34\10\0\1\25\24\0\1\25"+
48746	testFieldsStoreOff
34524	setdefault
60099	"\3\0\1\137\4\0\2\137\150\0\1\u0101\6\266\1\u0203"+
57828	"test1");
4838	getmaxbuffereddeleteterms
27959	"\u0031\u0027\u00AD",
39572	lastText="
42235	attrImpl
48447	topnextandadjustelsepop
40125	infos.getUserData();
52147	indexwriter's
45573	,"(r)",
56522	exclDisi
65877	createRandomTerms(100000,25,.5,
60707	"\1\u0428\2\u02e2\1\u0428\1\u0436\1\u02e2\2\u0428\1\u02e2\3\u0428"+
9048	(term1.bytes[term1.offset
26996	GRAVE
20538	ICUCollationKeyAnalyzer
60959	"\1\351\32\232\1\352\6\232\1\u01aa\3\232\175\0\1\351"+
64184	utf8bytes
52419	<code>NumericTokenStream</code>
41717	left.compareTo(right);
64078	MockIndexInput(RANDOM_TEST_BYTES);
50549	BufferedDeletesStream(messageID);
22153	reallocation
44770	"Ã¯"
34981	FilteredQuery#getFilteredScorer
64295	DEFAULT_TERM_COUNT_CUTOFF
40605	"ftation",
54464	NormsWriterPerThread(DocInverterPerThread
30932	-1).scoreDocs.length);
28107	THREE
26125	((FieldValueHitQueue<Entry>)
48365	subScorers.size();
15967	advancedelgen
43669	DateField.stringToDate(d.get("modified"))
29604	"\1\0\1\132\1\0\4\132\2\0\17\132\1\0\71\132\1\0\4\132"+
37809	buffer.append("*:*");
44358	"Ã"
57099	#cardinality}
33717	hasMultiTermRpts;
7259	Float.NaN);
32648	binaryDumpNIO(originalBuf1)
3646	determine
65437	strVal(int
51275	dsNames.put(dsName,
30517	<li>&lt;HIRAGANA&gt;:
49255	buffer.incrementToken();
25467	idea?
37436	querytermvector
62211	ScoreDoc(scorer.docID(),
15321	true).setIntValue(id));
33302	showAvailableCommitPoints()
51660	enroll
53517	MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,
59641	"\1\343\2\0\1\344\12\0\1\345\17\0\1\346\21\0"+
32649	binaryDumpNIO(originalBuf2)
44221	"Ã§"
55840	newdoc
24799	assertTrue(a
42320	analyzer.setPayloadData("f2",
44898	"á¶"
57351	(--pos>=0)
51769	config.getMergedSegmentWarmer();
62750	searcher.createNormalizedWeight(query);
42922	target).setFlags(flags);
6024	assertTrue(i
52659	assertTrue(m
16843	assertDocDeleted(origSegmentReader,
42581	init(String
25111	assertTrue(q
67627	assertTrue(r
48784	offsets[i][j].getStartOffset();
50463	(includePendingClose
51817	filesExist(SegmentInfos
54524	assertTrue(v
19835	testExactScoreFloat
70	WITHOUT
28009	"\u0031\u002C\u0300",
1303	iw.addDocument(new
21274	seek(end-1)",
16125	0.7767749f,
25816	i.next();
48457	delegate.tokenStream(fieldName,
66156	mulFactor
48490	<code>Weight</code>
19639	this.posEnum
1415	testexceptionjustbeforeflush
52180	ensurevalidmerge
37316	makeStopSet(String...
38772	assertNull(IndexReader.openIfChanged(r2));
285	subsequent
6711	ideal
4515	filteredtermenum
11080	"\32\230\1\347\11\230\1\u03bb\175\0\1\346\1\230\1\u03bc"+
32420	Windows
24349	lastDocId)
20427	07:12:13
32834	termsHashPerField.docState;
40276	numsubreaders
32957	postings.lastPositions[termID]);
44363	"Ã"
56979	u51a6
64041	expectedEx)
60113	"\4\0\1\u01ce\151\0\1\u0210\32\u01cf\1\u0211\12\u01cf\1\u0212"+
25611	entr(ies)
11216	"\6\0\12\u0423\1\u0424\175\0\4\u0425\2\0\1\u0425\15\0"+
55452	!reader.hasNorms(fi.name));
4282	tTopDocs.totalHits
55412	doreaderpooling
6067	t1b.setTermBuffer(content1b,
28310	earliest
27580	"\u00AD\u0031\u002C",
30690	"\2\64\16\0\1\64\4\0\1\64\2\0\2\64\10\0"+
57845	java.nio's
11627	"\13\0\1\u0325\160\0\1\u0386\4\u0559\2\0\1\u0559\15\0"+
44365	"Ã"
4881	rambuffersizemb
62468	makeCountingSumScorer(disableCoord,
65183	input.ints[pos2])
2595	Tests
4328	cur.field());
28930	floatVal(int
19758	exactphrasescorer
15271	//simOutage();
48811	MyTokenizer(Reader
18030	arabic
66788	ByteFieldSource
42347	analyzer.setPayloadData(fieldName,
59567	"\7\0\3\100\2\0\2\100\12\0\2\100\1\0\3\100"+
27031	"\r\u0001",
25419	improve
44361	"Ã"
4862	disable_auto_flush
8336	standalone
17108	(freqStream,
60858	"\1\351\1\232\1\u03f2\30\232\1\352\12\232\175\0\1\351"+
64366	constantbooleanqueryrewrite
36351	outputs.merge(emptyOutput,
39643	subScorerDocID=11378,
45879	"á¹¹"
29935	"\1\54\2\25\2\54\10\0\1\52\1\0\2\25\1\0"+
6352	"query3"};
44625	"á¶"
22763	upperVal.floatValue();
55959	threadlocals
30307	were",
55501	assertNotNull(tfv2);
35736	isPowerOfTwo(long
52270	ti.docFreq;
49698	jj_la1[i]
44194	"Ã"
60938	"\1\u0168\4\u04d4\2\0\1\u04d4\15\0\1\u04d4\6\0\1\u04d6"+
15760	delCount)
22293	section
56384	slice.length;
14801	buffer.append("<custom:\"").append(field).append("\":
12042	u51cc
2136	bytesreader
15480	delCount;
16943	segmentnorms
27537	"\u005F\u0308\u0031\u002C",
36256	"usually"
24687	assertEquals(expectedResult.length(),hits.totalHits);
58737	"\udc17",
8587	(incrementToken())
27265	"\u0041\u0308\u0061\u2060"
67577	MultiReader)
61642	ubb14
42879	clearNoTermBuffer();
59297	"\41\0\1\25\1\34\1\65\1\0\1\66\1\0\1\66"+
60595	"\1\351\32\232\1\352\10\232\1\u01b1\1\232\175\0\1\351"+
63125	System.out.println("TERMS_PER_DOC="
52589	occurring
18306	(skipOk)
15221	(size>>>16),
54276	ref.bytes
34424	this.ramBufferSizeMB
59191	"\3\ub7e5\3\ub888\3\ub92b\3\ub9ce\3\uba71\3\ubb14\3\ubbb7\3\ubc5a"+
31186	"20.cfs",
33371	rollbacklast
44768	"Ã®"
24064	"332422459999",
30977	testresultsorder
38584	"test.empty";
43799	assertTermEquals("CHAINE",
26206	startbitspervalue
61390	"\6\0\12\u0662\1\u0600\13\0\1\u02e1\160\0\1\u034d\3\u02e2"+
30007	u080c
49462	QueryParser(Version.LUCENE_CURRENT,
12752	ubb28
21740	getFinalSearcher()
55597	writer2);
15558	this.diagnostics
43913	"Ã"
26408	++inputCharNum)
11333	"\15\0\1\u047e\6\0\12\u047e\1\u03f6\175\0\4\u047f\2\0"+
46849	output_char
12872	u0833
63773	x875
61755	u081f
63789	x876
63761	x873
19103	Works
40625	pre-determined
65356	compilenode
63765	x874
63758	x871
20067	booleanQuery)
63759	x872
39925	getTermFreqVectors(int
59019	workDir);
33354	commit.getFileNames();
27042	"\r\u0041",
9679	"\1\0\4\25\1\0\14\25\1\0\4\25\1\0\2\25"+
43907	"Ã"
56031	termdocfreq
8663	getattributefactory
13273	u0829
46521	"â³"
29109	String[fieldCount];
40070	subReaders[i].startCommit();
46445	,"(12)",
41843	outputs.newPair(weight,
17457	org.apache.lucene.document.MapFieldSelector;
43910	"Ã"
44985	"á¶"
55662	mainDir.close();
9523	"\0\ube61\0\ubf04\0\ubfa7\0\uc04a\0\uc0ed\0\uc190\0\uc233\0\uc2d6"+
49611	goop2.image
63718	x854
63714	x853
63712	x852
24773	collectorMinRev
63711	x851
66654	testFailureRule()
42223	att2.getPayload());
54570	this.val
11977	zzNext
15125	doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);
43226	"bad"));
1243	didn't
2474	docId,
3091	cachedScorer
3093	cachedScores
40732	outputs.get(value,
60676	"\160\0\1\u0349\4\u0422\2\0\1\u0422\15\0\1\u0422\6\0"+
12070	u0847
12471	u083d
32833	perThread.termsWriter;
26620	namevalues
65736	deletefiles
9894	"\1\25\1\0\4\25\2\0\1\25\2\0\4\25\1\0"+
49515	STAR:
42620	docId)
66290	postingsHash;
20110	weights.iterator();
32349	MockLock
63726	x861
2922	docId;
63729	x863
59363	"\5\0\3\25\5\0\1\25\3\0\2\25\1\0\1\25"+
38883	testTryIncRef()
63727	x862
63741	x865
63733	x864
32640	encodedBuf1);
45939	"á¹½"
57125	x86)
51612	conflict;
687	workflow
16971	#LowerCaseFilter(Version,
64095	testSkipChars()
63700	x832
63699	x831
450	testindexreaderdelete
27753	"\u0061\u0027\u0308\u3031",
17754	setDocCountPercent(double
48928	getendoffset
4314	assertTrue(0
19638	useAdvance)
30008	u0873
67829	testFirstSegmentTooLarge()
13153	ubb1e
16645	maxsize
12351	ubb32
2223	SegmentInfo
6469	pw.flush();
65740	TypeAttributeImpl(String
23336	assertTrue(!
9660	packed.charAt(i++)
23842	ageSec
4947	jjStopAtPos(0,
63703	x841
62172	iw2.getReader();
52205	conflicts
63706	x843
63704	x842
19632	useAdvance;
36659	In-place
46868	schwa
61197	"\161\0\4\u05be\2\0\1\u05be\15\0\1\u05be\6\0\12\u05be"+
41851	prefixOutput.output1,
43345	SortedVIntListBuilder
29034	tvdLengths,
43916	"Ã"
49570	(wildcard)
53224	x800
27777	"\u0061\u0027\u0061"
36728	Linear
27913	"\u0031\u003A\u0300",
50593	docWriter.setMaxFieldLength(maxFieldLength);
59637	"\1\36\1\355\1\36\1\355\2\36\1\355\1\36\1\142"+
54648	(isMatch()
31726	forceMerge
46449	"â­"
60186	"\21\266\1\u025a\10\266\1\142\12\266\1\0\3\137\1\0"+
18889	String[]{"Jim's"});
52319	TEST_VERSION_CURRENT));
58726	percentdocs
45146	"á¶"
15555	src.delCount;
8727	docs.put(id,
19917	functiontestsetup
31827	Constants.LUCENE_MAIN_VERSION
52725	{expectedScore,
10422	"\10\230\1\u016a\1\347\12\230\175\0\1\346\3\230\1\u016a"+
8185	chunkSizeMask));
38636	testExceptionReleaseWriteLockJIRA768()
5973	fac_bitpos
11912	syntax/scanner
8608	shall
43658	docs[j],
41911	seekterm
67343	mode++)
1125	intentional
10714	"\12\u025e\1\u025f\174\0\1\u01c8\32\u01c9\1\u01c8\12\u01c9\1\u01ca"+
45428	"á¶"
67268	performTestsWithExceptionInReopen(new
55370	i<nFields;
51988	skipWait
63697	x821
22034	ExecutorService)}
40674	Arrays.sort(terms);
5487	x80l
34454	#setMergePolicy(MergePolicy)
18305	DocIdSetIterator.NO_MORE_DOCS;
53017	ArrayUtil.grow(result.offsets,
24441	Integer.valueOf(slotValues[slot]);
1192	writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);
7382	encountered
25297	assertEquals(WildcardQuery.class,
29132	SegmentTermVector[]
53692	paged.scoreDocs.length;
62805	testtopdocsmerge
41028	fstEnum.beforeNext(t));
65121	parent.deleteLast(lastInput.ints[lastInput.offset+idx-1],
8457	newinstance
67848	testfirstsegmenttoolarge
55652	//assertEquals(100
22818	-1572457324;
4734	conf.setIndexingChain(null);
8752	String[docs.size()]);
38151	expectedBounds.iterator();
31046	singleFileOutput
60090	"\4\0\2\137\150\0\1\u0101\32\266\1\142\5\266\1\u01fb"+
54542	1923
7045	(term.field()
53632	fd.fields[j]
18961	char[1024];
16148	DocIdSetIterator.NO_MORE_DOCS)
23204	indexSearcher2=new
42194	PositionIncrementAttributeImpl
47572	¹¹
65535	sis.getGeneration()
16061	searcherThread1.join();
22208	"running
26430	decode(input,
37042	absCount++;
47602	¹?
10065	"\177\0\2\66\6\0\1\66\153\0\1\66\5\0\1\66"+
16300	bq.add(new
36120	(NON_FINAL_END_NODE=0),
39360	clearing
8221	this.clones.put(clone,
54280	sizes[i];
58840	utf8Data[2*i+1])));
12990	u5355
27629	"\u0061\u2060\u0308\u0001",
51728	MERGE_READ_BUFFER_SIZE,
26482	numinputchars
46509	"â²"
65978	cc\")
54761	"you
67450	performTestsWithExceptionInReopen(TestReopen
10764	"\30\230\1\347\12\230\175\0\1\346\7\230\1\u028d\1\230"+
20409	DATE_TIME_FIELD
21074	fail("never
29842	"\2\0\1\141\42\0\1\64\1\26\6\0\1\64\4\0"+
45069	"á¶"
62756	subSearchers[shardIDX];
66869	expected.add(max);
66068	testStaticMethod3()
51590	end");
11843	numRead;
51994	delete/doc");
12589	u535f
39847	starts[subReaders.length]
55178	r2.getTermFreqVectors(id2);
65032	doShareSuffix,
21409	(IndexInput)
36216	nextArc
7176	setenum
41136	inputModeToString(int
4574	IndexingChain
8473	share
53123	LEAD_SURROGATE_SHIFT_));
1013	LUCENE-1044:
32040	purge(IndexReader
13085	u8fd2
18836	testLUCENE1545()
39081	assertEquals("{test=1}",cm.toString());
52029	runningmerges
37401	actualversion
47517	sharp
13391	u534b
15964	numfields
64923	reader.getTermFreqVectors(docId);
37524	writer.addDocument(doc3);
61574	u8fc8
12188	u5369
30862	CollationKeyFilter(TokenStream
43433	TestSpanSearchEquivalence
65721	refcounts
11594	"\2\0\1\u0546\15\0\1\u0546\6\0\12\u0546\1\u0511\13\0"+
54059	HashSet<Object>(Arrays.asList(
30176	(!mustSeekEnum
66791	"byte("
67457	TestReopen
64644	clone.bufferStart
5790	int[BLOCK_SIZE+1][BLOCK_SIZE][BLOCK_SIZE+1];
43919	"Ã"
53524	hq.size()-1;
17029	setExpectations(String
17533	assertFalse(pr.isCurrent());
11201	"\1\136\4\0\2\136\150\0\1\376\1\u0418\31\264\1\141"+
65832	doTermConjunctions(IndexSearcher
51107	runningMerges.add(merge);
60431	"\1\u0335\6\0\12\u0335\1\u02d4\175\0\4\u0336\2\0\1\u0336"+
58068	fieldNumbers
4653	testSettersChaining()
63289	0x6321,
35206	curPayloadLength;
31357	#21
55854	jointhreads
61482	"\175\0\1\u034d\1\u02e2\1\u06a9\30\u02e2\1\u034e\12\u02e2\175\0"+
40770	i=0;i<=term.length;i++)
34948	query.createWeight
59738	"\3\0\2\137\2\0\1\211\3\0\1\212\2\0\1\213"+
59623	"\3\0\1\56\7\0\1\57\2\0\1\60\4\0\1\61"+
16453	assertEquals("Should
16969	href="#version">above</a>
15685	fieldNumber)
64516	rewrittenInclude;
36393	out.writeVInt(nodeCount);
39530	fieldNumber,
41150	while(termsSet.size()
49029	dateResolution
22127	parse");
34293	readerTermsIndexDivisor
40819	(pair.output
43461	SpanTermQuery(t2)),
5649	bits="
12153	u3d20
15692	fieldNumber;
33502	int[]{1},
49909	notation
66241	hits:"+tot);
26089	count");
1523	65536);
58306	getUTF8SortedAsUTF16Comparator()
43455	SpanTermQuery(t2));
64968	cutting
61305	"\15\0\1\u0629\6\0\1\u062a\2\u062b\1\u062a\5\u062b\1\u062c"+
35240	Arrays.fill(lastSkipPayloadLength,
18211	innerweight
2777	elapsed
19340	wordbreaktestunicode_6_0_0
39782	!doClone;
58548	testEmptySet()
14904	field_doc
26221	restriction;
52835	restriction,
54725	LOCK_HELD
32632	originalBuf2.limit(numBytes2);
53178	redistribute
426	basis
8479	entity
37197	stopat
54928	elapses
22455	reflectAsString(false)}.
26333	output.arrayOffset();
31240	compressed.stringValue());
52437	enumerate
49487	MOD_NONE;
56763	assertEquals(16*(1+i),
27183	"\u3031\u0308\u003A",
17835	basic
13356	u3d02
35560	derived
63557	(indexArray
49763	jj_endpos
28832	writeskip
26162	startBitsPerValue,
49510	MOD_NONE)
8724	docCount);
26336	inputLength);
64688	Collections.binarySearch(terms,
20746	belongs
12955	u3d0c
32136	levelSizeArray[newLevel];
37849	java.lang.ref.Reference;
27473	"\u0030\u0031\u003A",
4228	(noDocs-1)*distance+startOffset,
66771	setSort(SortField
10278	"\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d\1\u012e\1\u012f\1\u0130"+
65549	for(Map.Entry<String,
29757	"\1\32\1\0\2\32\1\0\1\32\17\0\1\32\1\0"+
65790	MatchingHitCollector(BitSet
12554	u3d16
69	BASIS,
34426	getRAMBufferSizeMB()
30951	tdc.topDocs(10).scoreDocs.length);
50649	10,000)
8420	FSLockFactory)
32979	System.arraycopy(freqs,
58196	Persists
20838	defaultAnalyzer;
61229	"\1\u034e\12\u02e2\175\0\1\u034d\21\u02e2\1\u05e2\6\u02e2\1\u05e3"+
50194	10,000.
65295	arcs[numArcs-1].label:
65314	arcs[numArcs-1].label;
23875	for(SearcherTracker
26776	SpanPositionRangeQuery((SpanQuery)
28823	skipbuffer
62187	multireader.close();
65207	parentNode
41773	testShortestPathsRandom()
51588	(System.currentTimeMillis()-t0)
27210	"\u3031\u0308\u0061\u0027\u2060",
20850	defaultAnalyzer,
20846	defaultAnalyzer)
32166	newupto
56243	assertFalse("FilterIndexReader
33005	termid
68158	posData.pos
55199	info1[len1]
43602	(deletesMode
66001	boosts);
8097	super(resourceDescription);
26744	entire
58929	(this.isIndexed
66481	(downto
57253	Math.min(a.wlen,
55612	assertEquals("index1",
10582	"\15\0\1\u01dc\6\0\12\u01dc\1\u0162\13\0\1\u0122\160\0"+
15193	Non-lazy
52290	ReaderPayloadProcessor>
29741	"\2\25\17\0\1\25\6\0\2\25\4\0\1\25\5\0"+
25071	missingval
25096	TermQuery.
49238	TermQuery,
42410	Term[n];
23672	flushatdelcount
38184	flipping
65871	doConjunctions(500,6);
10920	"\1\u0330\15\0\1\u0330\6\0\12\u0330\1\u0331\13\0\1\u02cf"+
51540	deleter.deleteNewFiles(merge.info.files());
23926	prunebyage
56006	redefined
22974	LinkedList<Integer>();
38653	doc.add(newField("text2","test1",
41069	prefix="
62458	maxCoord)
42174	org.apache.lucene.util.AttributeSource.AttributeFactory;
59114	"\2\u3050\2\u30f3\2\u3196\2\u3239\2\u32dc\2\u337f\2\u3422\2\u34c5"+
15099	fieldSelector);
59211	"\4\u1dc5\4\u1e68\4\u1f0b\4\u1fae\4\u2051\4\u20f4\4\u2197\4\u223a"+
52735	tolerance
20523	constructing
20077	maxCoord;
32814	testallnullinput
9738	"\4\0\1\60\14\0\1\61\4\0\1\62\2\0\1\63"+
54701	makeLock(lockName).release();
39637	lasttext
9267	11:53
10647	"\1\136\1\151\1\136\1\0\2\152\1\137\1\u013f\1\u0140"+
39679	writeLock;
10117	"\1\65\1\66\1\0\1\25\2\0\1\25\1\140\4\36"+
62481	scorer.advance(target);
4733	conf.getIndexingChain().getClass());
38104	-1.0f,
58706	doc.add(newField(field,val,
33558	int[]{1,3,5,7,10,15,19,22},
58665	conf.setMergeScheduler(cachedFSDir.getMergeScheduler());
40357	freqs[pointer]
62456	int)})
20955	int)},
19075	"íë¯¼ì ì",
2852	counterThread.getResolution());
57241	u2=ones^v2;
5324	jjmatchedPos;
26347	int)}.
37004	(!useArcArray
53802	map.keys.length
18492	"<URL>"
62976	(!set1.contains(o))
7450	String[]{"six",
62849	org.apache.lucene.util.AttributeSource.AttributeFactory}
27663	"\u0061\u2060\u0300",
49103	this.fuzzyPrefixLength
8515	<code>sink2</code>
21271	point);
41307	FileInputStream(wordsFileIn),
11757	rather
34651	result.addDetail(nonPayloadExpl);
61208	"\1\u05c5\2\u05c6\2\u05c5\1\u05c6\1\u05c5\1\u05c6\1\u058b\13\0"+
23391	.setMaxBufferedDeleteTerms(4));
25179	term.toString()));
20887	construction
29744	"\1\25\32\0\15\25\5\0\3\25\1\0\1\25\5\0"+
59439	"\2\34\7\0\3\34\2\0\2\34\12\0\2\34\1\0"+
10742	"\13\0\1\u0122\161\0\4\u0273\2\0\1\u0273\15\0\1\u0273"+
11438	"\1\u0325\160\0\1\u0386\4\u04ce\2\0\1\u04ce\15\0\1\u04ce"+
51356	commit(Map<String,String>
50727	message("setMaxBufferedDeleteTerms
10401	"\3\230\1\u016a\5\230\3\u016a\3\230\1\u016a\2\230\3\u016a"+
50827	waitForMerges="
41147	Set<IntsRef>
52540	TermQuery}
66897	output1.hashCode()
64984	#Builder(FST.INPUT_TYPE,
51584	!closing)))
16879	assertDelDocsRefCountEquals(int
32494	r1.numDocs()
50887	U+FFFD.</p>
23462	MockRAMDir.close
60733	"\1\u043e\6\0\12\u043e\1\u043f\175\0\4\u0440\2\0\1\u0440"+
8865	on-demand
22459	recommeneded
68157	posData.pos);
1695	termposition
23507	!ac
30223	(ti1.proxPointer
62508	makeCountingSumScorerNoReq(disableCoord,
19389	getDocIdSet(final
27578	"\u00AD\u0031\u0027",
28530	compressiontools
9238	(unique
27813	"\u0061\u0027\u2060\u0308\u0027",
26250	IndexableBinaryStringTools
18701	"à¦à¦à¦à¦¿à¦ªà¦¿à¦¡à¦¿à¦¯à¦¼à¦¾",
22001	FormatPostingsTermsConsumer
21510	largeBuf.length,
11359	"\175\0\1\346\1\u0492\31\230\1\347\12\230\175\0\1\346"+
10103	"\1\25\2\0\1\25\1\140\3\36\1\352\1\36\1\352"+
67011	o.writeBytes(b,
35876	bq.clauses().size());
22274	grow(int[][]
19653	weight.getValue();
10153	"\1\0\1\136\1\144\1\137\3\136\3\0\1\136\4\0"+
59461	"\1\116\3\0\1\67\1\0\1\67\2\0\1\25\1\136"+
48023	NoSuchDirectoryException
21354	dir.openInput(segment
62894	this.replaceInvalidAcronym
57917	extensionsInCFS
28659	testPositons(typeTokenFilter);
5563	floatToBytes
56211	d3.add(newField("default","two
26608	terms[i];
32925	tvf.writeBytes(utf8Result.result,
10694	"\24\264\1\u024a\5\264\1\141\12\264\1\0\3\136\1\0"+
41898	fstlong
16597	added),
27458	"\u0030\u0308\u0300"
25158	terms:
50810	(hitOOM)
9182	terms;
31738	added).
63920	udc1cabc
2482	offset/length
35238	super.resetSkip();
28385	_TestUtil.randomUnicodeString(random);
39020	(iter1.hasNext())
67659	readerstoclose
26797	quick"
4646	IndexWriterConfig.class
39978	maxDoc());
16232	terms)
27419	"\u0030\u0308\u0001",
58192	snapshotted
1615	terms,
59980	"\160\0\1\u0168\4\u01a1\2\0\1\u01a1\15\0\1\u01a1\6\0"+
6334	BooleanClause.Occur.MUST,
8925	terms.
27196	"\u3031\u00AD"
49007	setDefaultOperator()
14800	CUSTOM:
55268	terms1
40611	terms2
9070	lastterm
42791	positionLength
343	testDeleteReaderReaderConflictNoFullMerge()
10565	"\2\0\1\57\4\0\1\73\14\0\1\61\4\0\1\74"+
50998	factors).</p>
35400	sugar
26170	bpv)
8253	mapmode
27325	"\u003A\u0308\u0031\u0027",
30549	"\1\0\1\25\1\0\1\25\1\0\3\25\2\0\1\25"+
33480	"b"
65622	policy.onCommit(commits);
12953	u3bc6
22237	grow(double[]
60824	"\1\u0426\1\0\1\u0426\175\0\1\u0486\32\u02e2\1\u034e\12\u02e2"+
57573	termIndex
6064	t1a.setTermBuffer(content1a,
22199	currentSize,
19975	although
26173	bpv;
21965	numbytes
65466	IndexFileDeleter.
43443	testSpanTermVersusTerm()
35457	0x55555555);
3751	codepoints.
22214	currentSize;
6213	query's
33478	"a"
64747	"aa4"));
33333	RollbackDeletionPolicy(int
35890	query);
25303	getindexstore
31393	setNorm
22080	ArrayUtil()
37828	terrible
17936	testFarsi()
15962	emptymap
8741	delID
55154	assertFalse(termDocs1.next());
40541	nosuchmethodexception
18171	(docIdSetIterator
34276	OpenMode.CREATE_OR_APPEND;
22240	shrink(short[]
18173	((Scorer)
43618	reader.getDeletesCacheKey()
64093	RuntimeException.class);
63430	0x86531,
56646	"by
64024	byte[COUNT
35982	insertdoc
848	"aa
17099	getposition
52847	documentation.
41670	testNonFinalStopNode()
50166	point".
16589	upHeap();
9191	numTermDeletes;
6307	IllegalArgumentException("queries.length
34423	"at
34681	docscore
4938	jjStopAtPos(int
50828	waitForMerges);
37069	nodeArcCount;
39525	initUTF16Results()
21596	WILDCARD_STRING
18174	docIdSetIterator).score(wrapCollector(collector));
56990	"^"
5771	requiring
18191	ConstantScoreQuery)
25214	"\\
23530	"\n
54068	a.toArray(new
49027	Locale.getDefault();
25143	"metal"));
33733	postings.length;
27186	"\u3031\u0027",
11475	"\3\230\1\347\12\230\175\0\1\376\7\264\1\u04ed\22\264"+
16308	freaks
27666	"\u0061\u2060\u0308\u0300"
62381	testfieldmaskingspanquery
26446	finalShift;
26436	finalShift,
31674	rmdir
54914	writer.addIndexes(dirs);
8775	fieldcount
50474	"]:
63431	0x86532,
41352	RuntimeException("unexpected
11692	"\4\1\17\0\1\11\1\0\24\1\2\0\1\1\1\0"+
58424	added",
49162	getMultiTermRewriteMethod()
28852	(nextTermsHash
16081	MockIndexWriter.RANDOM
40629	NoOutputs.getSingleton();
26833	newBuffers,
36163	VERSION_INT_NUM_BYTES_PER_ARC
21889	Directory}.
10349	"\1\u0152\5\264\1\141\12\264\1\u014f\3\136\1\0\2\136"+
64083	os.writeBytes(READ_TEST_BYTES,
60466	"\1\u0359\15\0\1\u0359\6\0\12\u0359\1\u02ef\13\0\1\u0126"+
14884	sortPos,
14852	sortPos)
51161	waitForMerges()
37973	nextisset
33013	shrinkhash
63638	x7321
54212	ref.copyChars(str);
57145	one-past
67022	i.seek(2*RAMInputStream.BUFFER_SIZE-1);
41610	"_"
19729	subtract
26835	newBuffers;
53859	java4.codePointAt(highSurrogateAt3,
16641	getHeapArray()
29281	lasttvdposition
48657	tokenstreamvalue
54225	Integer.valueOf(key)));
16211	qtest(String
1691	compareto
39761	segmentReaders
50706	config.getMaxBufferedDocs();
8177	seek(long
15925	(either
36429	outgoing
27951	[12.0]
55064	setUseCompoundFile(w.getConfig().getMergePolicy(),
8386	working
35047	wrapperweight
27381	"\u0027\u0308\u000B",
27776	"\u0061\u0027\u0061\u003A",
37756	high_priority
26164	this.roundFixedSize
66455	DocumentsWriter.INT_BLOCK_SIZE)
19500	closeSafely(priorE,
25550	List<CacheEntry>
38618	IndexReader.getCurrentVersion(dir));
21633	haven't
26742	displayed
31010	visual
6942	ClassNotFoundException
31335	assertEquals("Lu\uD834\uDD1Ece\uD834\uDD60ne
66067	MockAnalyzer(random));//,
39318	DocumentsWriter.INT_BLOCK_SIZE;
24852	numDocs++;
38675	(!(index1
10509	"\12\230\175\0\1\346\20\230\1\u016a\11\230\1\347\12\230"+
55382	placement
42998	ReferenceManager<G>
29814	"\2\0\2\25\1\0\3\25\1\0\1\25\2\0\4\25"+
41324	tStart)
67427	segmentReader3
65671	refCounts.remove(fileName);
18301	s.getIndexReader().getSequentialSubReaders()[0];
67423	segmentReader1
20694	index.<br>
26255	finalShift)
65554	startup:
37418	assertTrue(terms.length
14836	hash;
59058	getTopLevelQuery();
15290	Number[numDocs];
19899	assertSame("field
48548	(InvertedDocEndConsumerPerField).
66444	hash.
9445	zzUnpackAction();
11778	URL_TYPE
33157	hash1
14941	bytecomparator
45732	,"TH",
48676	"\"
1090	message(final
54302	hash)
48118	isopen
31116	createcompoundfile
33797	resolve
60636	"\1\142\4\266\1\u0403\5\266\1\0\3\137\1\0\2\137"+
44069	SUBSCRIPT
54752	"rw");
54778	lock.release();
23024	"doc3",
65140	nextFinalOutput/isFinal
4696	indexingChain
16691	testCloneWriteToClone()
6415	input.read(cbuf,
67213	"["
64277	IntFieldSource(field);
7330	pagination
42765	<li>Because
28121	"\u0063\u2060\u0061\u2060\u006E\u2060\u2019\u2060\u0074\u2060\u2060"
64533	moreinclude
52651	behavior/error
61217	"\1\u034e\11\u02e2\1\u05d0\175\0\1\u034d\24\u02e2\1\u05d1\5\u02e2"+
38304	0x800003
4502	nextdouble
55843	indexname
51386	stalls
11635	"\174\0\1\u0332\4\u055b\2\0\1\u055b\15\0\1\u055b\6\0"+
22374	insertionSorts:
39118	setSlop(int
1242	BUG:
53312	TwoLongs(output.first
17998	testtermrangefilter
33501	int[]{0},
33693	4*startDiskUsage);
12151	u3bda
50667	LogMergePolicy#getMaxMergeDocs()}
50124	sooner.
62670	count.addAndGet(delta);
66574	oldsize
519	undeleteall
22652	fcsi.binarySearchLookup(lowerVal);
57192	clear(long
21562	endEnum
33319	batch
39202	queryExpl.setValue(boostExpl.getValue()
3697	characters
31482	"segments_2",
42947	createAttributeInstance(Class<?
41941	simpletext
32116	bits).
7591	'\r':
37025	(delta
67866	character!
1891	bits);
59792	"\1\136\1\276\1\277\1\300\1\301\1\302\1\303\1\304"+
17730	TopTermsBoostOnlyBooleanQueryRewrite
34740	qp.parse("\"multi
60841	"\1\u0486\24\u02e2\1\u048e\5\u02e2\1\u034e\12\u02e2\175\0\34\u021e"+
10666	"\1\u01de\1\0\1\u01de\176\0\4\u0167\2\0\1\u0167\15\0"+
33077	Attribute>>
5360	'\r')
38464	assertTrue(allFieldNames.contains("tvoffset"));
13354	u3bbc
54248	org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.
48266	(collectPayloads
41883	doshare
62213	hits.size()
53140	passed).
17957	character,
12552	u3bd0
21662	character.
6371	getfieldquery
24268	@SuppressWarnings("boxing")
25200	indexStore;
25168	query8,
41362	"s:
62342	assertEquals(s(2,0,1),
2895	wait
63820	x87654321
58542	CharArraySet#copy(Version,
54196	RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE,
41501	NUM_IDS="
22999	indexStoreA
21291	"t"
13358	u3e48
23000	indexStoreB
67215	"s]
25167	query7,
51360	synchronized(commitLock)
6255	applySlop(Query
2006	arcUpto=0;arcUpto<node.numArcs;arcUpto++)
57555	indexOffset)
12027	uax29urlemailtokenizerimpl34
50878	<p>Merges
24109	indexStore,
12957	u3e52
35611	c=(A[i+7]
60405	"\7\266\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
18885	String[]{"you're"});
40738	pairs;
16899	r1.decRef();
929	LogMergePolicy
36687	in.skip(arc.posArcsStart,
21346	".notIn",
36974	nextCount
1070	MockDirectoryWrapper(random,
7293	invalid.
28288	invalid,
49644	invalid)
12556	u3e5c
4296	(VERBOSE
64686	not";
22553	"on
2610	TestTimeLimitingCollector
33374	setindexcommit
60753	"\1\352\12\232\175\0\1\351\1\u044e\31\232\1\352\12\232"+
67145	Stand-in
62197	ArrayList<String>(Arrays.asList("a",
53199	tortious
12155	u3e66
33515	int[]{2},
52050	getreadonlyclone
4035	codepointat
9397	"\1\132\4\0\126\145\2\0\2\133\2\135\3\145\133\135\1\0\4\135"+
27793	"\u0061\u0027\u0308\u0031\u002E\u2060",
35177	0</code>.
30465	Map<String,SortedSet<TermVectorEntry>>
23124	indexWriter.addDocument(createDocument("doc"
2155	integer
25238	"ab*",
39765	segmentReaders.put(oldReaders[i].getSegmentName(),
32266	NativeFSLockFactory(TEMP_DIR).makeLock("test.lock");
35604	c=(A[i+5]
8338	forever
15736	"s"
27109	"\n\u0308\u0061\u0027\u2060",
3714	construct
954	"here")));
2940	body
43381	~VB1)
58972	ignore)
35629	~B[i+5]);
43863	$1;
36321	System.arraycopy(bytes,
49262	ignore,
35102	file.numBuffers()
41612	"_end";
26421	bytesLeft
18778	"ÏÎ¿Î½",
4203	Integer.MIN_VALUE
29696	"\0\u28a3\0\u290a";
25163	query3,
15768	setDocStoreOffset(int
55115	r.getSequentialSubReaders();
35628	~B[i+5]))
18258	Field.Index.ANALYZED));//
61326	"\6\0\12\u063b\1\u0600\13\0\1\u02e1\161\0\4\u063a\2\0"+
55714	doTestIndexWriterReopenSegment(true);
65160	(output.equals(NO_OUTPUT))
20117	"no
43865	$2;
32892	termID
5912	SHIFTS[bitsPerValue];
49577	(fuzzy)
25162	query2,
15326	r.getSequentialSubReaders())
7725	"of
453	dofullmerge
25621	walk
47933	(TwoPhaseCommit
53348	SimpleFSIndexInput("SimpleFSIndexInput(path=\""
21786	ignored
32000	getCacheType();
40818	pairs)
40639	pairs,
29094	mapper.setDocumentNumber(docNum);
25166	query6,
54967	wake
32825	doVectors;
11939	zzAction;
53552	steps:
17226	storeDir;
6105	SenselessAttributeImpl
15866	Character.isDigit(fileName.charAt(prefixLength))
29408	this.prefix
24950	funny
27554	"\u00AD\u002C",
60373	"\1\232\1\u0304\30\232\1\352\12\232\175\0\1\351\31\232"+
8521	desired.
39969	(subReaders[i].hasNorms(field))
42131	compareTo(IntsRef
61105	"\1\351\32\232\1\352\1\232\1\u0574\10\232\175\0\1\351"+
25165	query5,
59577	"\1\356\1\357\10\355\1\36\1\360\5\355\6\36\1\142"+
34909	"bro?n"));
25164	query4,
48996	modular,
43505	testGetSet()
63050	"\"*\"",
16982	ignores
52166	flushcontrol
8597	(sink.accept(this))
4730	conf.setIndexingChain(new
2056	arc.target).node;
26892	http://www.unicode.org/Public/6.0.0/ucd/Scripts.txt)
6602	href="http://dx.doi.org/10.1016/j.cageo.2008.02.023"
8797	hooks.
54202	BytesRefHash(
7069	actualEnum.close();
51262	segName,
4661	!Modifier.isStatic(m.getModifiers()))
54723	not),
27879	"\u0061\u002C\u0308\u0061\u002C",
10783	"\1\376\32\264\1\141\11\264\1\u02a5\1\0\3\136\1\0"+
63189	not).
60984	"\1\u04fa\15\0\1\u04fa\6\0\12\u04fa\1\u04bb\13\0\1\u033c"+
31289	hasTested29);
21309	testTwoFiles()
51277	segName;
8327	readlong
28286	subScorers[0].docID();
42807	termBufferOffset,
4908	org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
7718	"is
47982	Map<IndexReader,Integer>
18694	"à§¨à§¦à§¦à§§",
65609	refresh(null);
23012	"in
25991	OutOfOrderOneComparatorScoringNoMaxScoreCollector(
37495	testPhraseQueryInConjunctionScorer()
40897	fstEnum
66100	f2:[a
14889	FieldComparator.StringValComparator(numHits,
64364	getdoccountpercent
38250	assertLongRangeSplit(0L,
7909	succeed,
55890	"stale"
13060	u7fe7
62980	byte[1024];
12659	u7ff1
31445	Verifies
33507	"j"
20050	add(new
55188	long[r1.numDocs()];
35972	top_terms_scoring_boolean_rewrite
25161	query1,
67388	assertReaderClosed(reader3,
61549	u7fdd
30418	assertVocabulary(a,
2459	0;//hits.scoreDocs[0].doc;
9322	"\2\132\2\133\1\0\4\133\2\132\12\134\3\132\2\0\1\132\17\0"+
23552	"go
19059	testUnicodeWordBreaks()
37517	Term("contents","map"));
35829	kohlschuetter
29592	"\7\142\10\143\1\0\12\134\47\0\2\142\1\0\1\142\2\0\2\142"+
1702	max_radix
26894	\p{LineBreak
15799	hasProx)
29756	"\21\32\1\0\1\32\1\0\3\32\2\0\1\32\1\0"+
15509	hasProx,
33510	"k"
67039	"tokens";
43173	ElevationComparatorSource
25718	InsanityType("EXPECTED");
43451	q1.add(new
55167	d2="
21386	succeeds
26652	testlookaheadtokenfilter
18922	"developers",
31041	siMerge3);
9521	"\0\ub431\0\ub4d4\0\ub577\0\ub61a\0\ub6bd\0\ub760\0\ub803\0\ub8a6"+
50560	IndexFormatTooOldExc
15485	hasProx;
32357	mocklockfactory
67387	assertReaderClosed(reader2,
57508	initialSize
11851	(zzReader
14908	initfieldtype
15278	testExceptions()
33504	"h"
30728	segmentation
66473	consumer.newTerm(termID);
14516	zz_pushback_2big
57155	-endIndex;
20848	fieldAnalyzers
67386	assertReaderClosed(reader1,
41426	}.run(limit,
20093	sub-weight
3007	#isCached}.
67383	(mode)
38928	getbinaryoffset
60789	"\31\266\1\u046a\1\142\12\266\1\0\3\137\1\0\2\137"+
59975	"\2\0\1\u0162\15\0\1\u0162\6\0\1\u0163\2\u0164\1\u0163"+
35597	c=(A[i+3]
33483	"i"
9509	"\0\u77b4\0\u7857\0\u78fa\0\u799d\0\u7a40\0\u7ae3\0\u7b86\0\u7c29"+
2161	addnode
19085	"ã«ã¿ã«ã"
67385	assertReaderClosed(reader0,
60549	"\1\u03a1\4\u039f\2\0\1\u039f\15\0\1\u039f\6\0\12\u03a3"+
10888	"\4\0\2\136\150\0\1\376\1\u030d\1\264\1\u030e\27\264"+
21592	endEnum;
48605	perThread.stringReader;
65045	(UnCompiledNode<T>[])
18107	norm;
3279	IllegalStateException("cannot
16772	norm1
63750	x86541
63751	x86542
66861	norm.
63753	x86543
15745	"f"
18105	norm)
53691	paged);
58756	"\udc17\ud917\udc17\ud917abcd",
49708	jj_consume_token(int
27275	"\u0041\u0308\u0061\u002C",
33271	MockAnalyzer(random)).setIndexDeletionPolicy(
50379	(pooled
25310	asterisk
50411	for(Map.Entry<SegmentInfo,SegmentReader>
63747	x86532
35590	c=(A[i+1]
63746	x86531
35017	exhausted,
31132	exhausted.
34330	getSimilarity()
26532	(fieldInfo.isIndexed)
20122	sumExpl.addDetail(e);
10386	"\10\u016a\1\230\1\u016d\5\u016a\6\230\1\347\12\230\175\0"+
10160	"\2\352\1\36\1\352\3\36\2\352\2\36\1\352\4\36"+
815	"do
59905	"\1\u016f\10\232\1\352\12\232\175\0\1\351\1\u016f\1\232"+
272	reader.docFreq(searchTerm2));
23962	queryG;
19114	testuax29urlemailtokenizer
5974	getter
37068	anyNegDelta;
31823	KeepOnlyLastCommitDeletionPolicy());
65639	un-deletable
18441	d.get("id"));
57006	reuse.
54566	Item
24478	queryG,
37085	newNodeAddress[startNode];
32238	!writer.hitException);
6788	stamps
52890	ACTION
37782	MatchAllScorer
57581	reuse)
54361	reusableTokenStream
42945	<b>Expert</b>:
61184	"\1\137\4\0\2\137\216\0\1\u04f5\175\0\4\u05b5\2\0"+
28941	org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)
8891	innerSet
36906	NO_OUTPUT)...
54930	targetGen,
2134	builder
63949	testTokenStreams()
20978	<code>write.lock</code>
54923	targetGen)
4491	negative_infinity
8504	URLDetect(sink2);
17992	danishIndex.close();
8789	org.junit.runner.JUnitCore;
39176	reader.docFreq(terms[0]);
50698	config.getMaxBufferedDocs
18557	"Õ´Õ¡ÖÕ¤",
21111	reentrantlock
8646	ways
37897	backingStore.clear();
64859	byteStarts
10579	"\13\0\1\u0122\160\0\1\u0163\4\u01da\2\0\1\u01da\15\0"+
19489	<p>Sample
58900	DOCS_AND_FREQS,
63644	x7431
63645	x7432
51986	docInc;
35565	(i<=n-4)
8498	LowerCaseFilter(source1);
19929	reuses
63151	(sb.length()
32876	termsHashPerField.postingsArray;
18893	String[]{"O'Reilly's"});
7139	getprecisionstep
51980	docInc,
3359	reused
60582	"\4\u03d3\2\0\1\u03d3\15\0\1\u03d3\6\0\12\u03d5\1\u03d4"+
38055	prefixVal=NumericUtils.prefixCodedToInt(NumericUtils.intToPrefixCoded(vals[i],
21582	setEnum(reader.terms(new
37541	assertEquals("field:\"?
63642	x7421
57238	way?
36221	other.posArcsStart;
21514	CompoundFileWriter(newDir,
52438	way:
67472	readersToClose.add(reader);
6568	&le;6.
26827	nextBuffer()
31930	DEFAULT_DOUBLE_PARSER
40018	LockObtainFailedException("Index
4128	both
8136	curBuf.get();
27712	"\u0061\u003A\u0027",
35571	(i<=n-2)
9912	"\226\0\1\33\247\0\2\33\12\0\1\33\210\0\2\33"+
8391	"\n");
58232	byte[capacity];
18050	ConstantScoreQuery
60279	"\24\266\1\u02b8\5\266\1\142\12\266\1\0\3\137\1\0"+
6353	MultiFieldQueryParser.parse(query,
29836	"\103\0\2\26\6\0\1\26\56\0\1\26\3\0\1\26"+
65951	t:two)^2.0)",
53389	"OutOfMemoryError
67681	keepallcommits
21564	WildcardTermEnum(IndexReader
15164	userName
4173	sd.length
8723	docCount="
58416	Integer(1)));
54698	(lockDir.exists())
3515	(SegmentInfo
17024	numTerms
24715	m2.size();
11272	"\32\230\1\347\4\230\1\u0452\5\230\175\0\1\346\32\230"+
62738	topHits
54795	path);
5341	(jjmatchedPos
29574	"\2\0\12\134\21\0\3\133\1\0\10\132\2\0\2\132\2\0\26\132"+
62839	"<KATAKANA>",
51045	ConcurrentMergeScheduler
62496	super.score()
67836	testSingleMergeableSegment()
52321	Directory[]
43281	textfield2
65167	(input.length
55526	textfield1
7511	TermVectorsTermsWriterPerField(termsHashPerField,
12258	u7ffb
60398	"\1\u031c\31\266\1\142\12\266\1\0\3\137\1\0\2\137"+
6575	&le;4,
39136	multiphrase.
4000	characterutils
38818	r2.getSequentialSubReaders()[0];
50024	ids.add(file))
32609	originalString2
42935	"type",
35331	StopAnalyzer(Version.LUCENE_24,
23960	queryE;
35866	"D");
64768	numTermsSamePrefix
35061	bufferLength;
60562	"\1\u03ad\1\u03ae\1\u03ad\1\u03ac\13\0\1\u02e1\161\0\4\u03b0"+
16143	iterate
28117	"\u0033\u0061"
26397	getDecodedLength(input.array(),
37677	testphrasequerywithstopanalyzer
28571	bufferLength)
63428	0x86521,
58187	IllegalArgumentException(id
32598	originalString1
54710	JVM)
23641	termIDX=0;termIDX<100;termIDX++)
3065	JVM.
23252	Term("contents")
23961	queryF;
953	Term("contents",
33652	sis.size();
20445	actualOrder
8912	(iterator
33787	(matchLength2
40273	segmentsfile
24466	queryF,
23505	term="
9906	"\6\0\3\32\15\0\1\32\226\0\1\32\247\0\2\32"+
22989	TestMultiSearcher
63038	"<_QUOTED_CHAR>",
49751	((jj_nt=token.next)
31997	getReaderKey();
66706	chosen.
27079	"\n\u0308\r",
53896	buffer.getLength());
6479	trace,
55674	this.numDirs
53203	uni_sur_high_start
29812	"\3\0\1\25\5\0\1\25\7\0\1\25\4\0\2\25"+
55568	r1.document(10);
28661	testPositons(TypeTokenFilter
34238	IndexReader.DEFAULT_TERMS_INDEX_DIVISOR;
56410	tmp.setMaxMergeAtOnce(100);
30779	IllegalArgumentException("buffersize
29730	"\1\25\1\0\3\25\2\0\1\25\1\0\1\25\1\0"+
1571	compareTo
10872	"\32\264\1\141\10\264\1\u0156\1\264\1\0\3\136\1\0"+
48508	was.
25379	"Birds",
21575	(cidx
10831	"\160\0\1\u0163\4\u02d7\2\0\1\u02d7\15\0\1\u02d7\6\0"+
9685	"\1\25\6\0\1\25\122\0\1\25\6\0\3\25\2\0"+
60322	"\2\u0219\2\0\1\167\1\0\1\51\1\0\1\52\2\0"+
47822	flattened
10371	"\1\26\2\0\1\25\1\u0117\32\36\1\141\2\u0118\1\330"+
25800	(!clause.getField().equals(field))
29091	(found
51420	ramBuffer="
48881	testFields.length);
43109	boosted",
36606	in.pos;
23967	tracer
2925	base;
28883	termshash
19684	scoreCache[i]
32053	default_short_parser
63907	highlightedText.length();
18809	"à½à½à½¼à½",
55792	testDuringAddDelete()
8436	(obtained)
49599	jj_consume_token(RANGEIN_END);
41328	System.exit(0);
63079	-d64
2395	4.0);
11172	"\5\230\1\u0400\4\230\175\0\1\346\32\230\1\347\5\230"+
67183	positions.length];
57406	fastget
11791	this.zzReader
24382	queryA,
2178	want
41591	"https://issues.apache.org/jira/browse/LUCENE-2933"
68119	totalHits).
37739	parser.parse(HIGH_PRIORITY
55945	(!t.isAlive())
64808	random.nextInt(validTerms.length);
49338	prefix){
23959	queryA;
27424	"\u0030\u0308\n",
51646	details.put("mergeFactor",
3445	based
7134	getfield
25145	"metal*"));
5691	attr.setKeyword(keyword);
52134	nodupdirs
31515	addNoProxDoc(IndexWriter
67171	System.arraycopy(offsets,
2867	BitSet
57794	MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));
55775	endTime
20028	this.disableCoord
37640	ts.end();
39107	app*"
25764	getalldescendantreaderkeys
42004	bold
3471	MergeAbortedException("merge
11678	error",
50896	(!success
14642	custom
29411	prefix);
1087	thrown
60585	"\4\u03d3\2\0\1\u03d3\15\0\1\u03d3\6\0\1\u03d5\1\u03d7"+
8271	succeed
111	throws
53113	char[count];
50952	updateDocument(Term
11661	"\15\0\1\u0567\6\0\12\u0567\1\u0554\175\0\4\u0568\2\0"+
23372	testNonRAMDelete()
3802	subclass
2924	base)
7993	(useUnmapHack
56027	addDoc(int
3050	base,
23602	"x"
39660	testTermBooleanQuery()
41254	storeOrd);
68117	inserted.
10523	"\1\u0181\2\u013f\1\u0141\2\0\1\u0167\1\u013f\1\162\3\0"+
32042	warn
41024	beforeNext("
26684	efficient,
31261	TEXT_PLAIN_LENGTH);
2686	warm
60927	"\21\u02e2\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2\1\u04d0\26\u02e2"+
58338	deepCopyOf(BytesRef
31732	Specify
66192	"w3
62734	query="
16196	"w1
10113	"\1\0\1\25\2\0\1\25\1\140\3\36\1\352\1\36"+
24254	"CIGAE");
39700	termInfosIndexDivisor)
39731	termInfosIndexDivisor,
62728	3)];
26393	#getDecodedLength(java.nio.CharBuffer)}.
15614	(preLockless)
57565	input.readVLong();
51678	(details
6069	t2.setTermBuffer(content2,
56030	formatpostingspositionsconsumer
10228	"\1\136\4\0\2\136\150\0\1\376\13\264\1\u0113\6\264"+
54876	this.searcherFactory
39682	termInfosIndexDivisor;
55041	nThreads
15601	ext));
54279	ref.length
22435	org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl;
39245	boq;
7722	"to
55525	field_2_text
42236	AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY.createAttributeInstance(KeywordAttribute.class);
25425	(frequently
2344	//all
15746	setUseCompoundFile(boolean
62629	testParenthesisMust2()
64577	if(available
19772	anding
3801	<strong>Note:</strong>
59501	"\17\0\1\215\21\0\1\216\2\0\1\217\42\0\1\77"+
42022	Uses
63534	{wordShift
20665	dir.createOutput(name).close();
1656	termenum
39041	cm.entrySet().size());
4850	default_reader_terms_index_divisor
15574	(numNormGen
1041	(isCommit)
22963	Integer[0]);
38102	-2.3E25f,
67910	minPosLength
38188	LUCENE-2541:
37559	"found"));
61252	"\12\u05f7\1\u05b9\13\0\1\u033c\160\0\1\u03a1\4\u05f7\2\0"+
68138	TestRollingBuffer
19861	testCachingShort
39939	numDocs...
49977	structure:</li>
56637	this.expirationTimeSeconds
10146	"\1\352\1\36\1\352\1\36\1\352\1\36\3\352\1\36"+
24581	testSortWithoutFillFields()
65998	boosts.put("t",
26928	RETURN
36086	testrangequery
58759	"\ufffd\ud917\udc17\ufffd"
18591	ÙÙÙÙØ¨ÙØ¯ÙØ§
48179	getSubSpans()
19819	log(i+".
1974	Used
26730	org.apache.lucene.document.Fieldable
8014	buffer.getClass()
1185	opening
40663	FST<BytesRef>
23800	track;
39074	NOT_IN_MAP,
37204	sizeneeded
22859	org.apache.lucene.search.spans;
38711	norms2[i]);
8274	jvms
60690	"\1\u0428\2\u02e2\1\u0428\1\u034e\12\u02e2\175\0\1\u034d\1\u02e2"+
33521	int[]{3},
32919	termBytes[prefix])
17159	IndexFileNames.FREQ_EXTENSION),
28824	resetskip
64244	index-searchers,
48804	//terms
23450	modifier.getConfig().getMergeScheduler()).setSuppressExceptions();
4381	NumericUtils.sortableIntToFloat(lower),
56018	sb);
3871	define
67841	assertTrue(sis.info(0).hasDeletions());
57940	index_extensions_in_compound_file
65899	stop",
4692	(Modifier.isStatic(modifiers)
23758	System.nanoTime()
21330	"test";
10332	"\1\u014f\3\136\1\0\2\136\1\137\1\u013f\1\u0140\1\u0141"+
52788	Disclaimer
23677	sawafterflush
11448	"\1\u04d7\15\0\1\u04d7\6\0\12\u04d7\1\u0474\175\0\4\u04d8"+
59668	"\4\266\1\u0107\10\266\1\u0107\2\266\1\u0107\2\266\1\u0107"+
64979	prefixLenPlus1,
32716	encodedBuf
63940	testcrossplanenormalization2
65073	prefixLenPlus1)
33268	last=commit;
15896	version).append(')').append(':');
60837	"\1\u0486\5\u02e2\1\u0428\24\u02e2\1\u034e\12\u02e2\175\0\1\u0486"+
5159	jjStartNfa_1(0,
41363	totSec
54826	component
1900	fieldsStream.writeVInt(len);
83	permissions
65332	traversal
34516	writelocktimeout
22383	friday
53523	ScoreDoc[hq.size()];
1217	dir);
4031	incrementtokenold
24665	"CBEFGHIAJD");
29839	"\1\0\1\26\2\0\2\26\1\0\3\26\1\0\1\26"+
13353	u3b19
51914	points:
65551	RefCount
20644	secondaryDir.listAll();
34525	processed
55772	RAMDirectory(dir1));
19350	testkorean
31794	points.
61119	"\1\u0580\2\u0581\1\u0580\5\u0581\1\u0582\14\0\1\u033c\161\0"+
25899	points,
34784	qp.getSuperFieldQuery("","foo
40516	assumptions
4639	getters.add("getMaxThreadStates");
26615	have:
42616	getDocIdSetSize(DocIdSet
33876	common.
43572	itself.
47904	Object#hashCode()
16829	itself,
48614	common,
29287	readfields
61248	"\161\0\4\u05f3\2\0\1\u05f3\15\0\1\u05f3\6\0\1\u05f4"+
56969	ALPHANUM;
65057	traverse.
7187	activity
58197	persists
30130	ThreadLocal
41962	todot
32209	testDefaultRAMDirectory()
53619	this.sort
534	org.apache.lucene.analysis.Analyzer;
51502	(currentReader.hasDeletions())
48543	itself;
9582	"\1\ue9a3\1\uea46\1\ueae9\1\ueb8c\1\uec2f\1\uecd2\1\ued75\1\uee18"+
15956	tracks
3649	org.apache.lucene.analysis.standard;
31113	singlefileoutput
6477	assertTrue("Stack
29925	"\1\25\1\0\2\25\21\0\1\25\3\0\1\25\5\0"+
8441	lockverifyserver
38691	fieldInfos1.fieldInfo(fieldID);
28965	FORMAT_VERSION
29586	"\1\0\2\132\2\133\2\0\12\134\1\0\2\132\17\0\2\133\1\0"+
58001	perThread
21518	somehow
3658	filtering
62959	"+dif);
20995	d.add(newField("content",
1	package
29282	lasttvfposition
29331	isPayloadAvailable();
58664	IndexWriterConfig(Version.LUCENE_32,
31125	#docID()}
63736	x86421
17154	tisNoIndex
4715	testInvalidValues()
38443	Field("unstored2","test1",
20224	(getMinimumNumberShouldMatch()>0)
64524	this.include.equals(other.include)
67316	dir5,
19385	this.negate
65394	dir.clearCrash();
50519	IndexWriterConfig(Version.LUCENE_31,
18412	1.5f));
16454	!",
32990	dovectorpositions
9033	lastTerm.field
54530	ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());
64718	"bb3",
21338	".big2",
13058	u7ea1
26713	CorruptIndexException
43695	!";
53195	damages
15694	hasSeparateNorms()
8843	@AfterClass]");
28750	pointer
10033	"\5\0\3\25\5\0\3\25\1\0\1\25\10\0\1\25"+
67267	dir4,
56851	"\4\0\12\2\25\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12"+
54445	KeywordAttribute}.
62997	RegularExpression
15958	buffereddeletesgen
25120	wq.setBoost(0.3F);
22719	FieldCache#getInts(IndexReader,String)}.
1899	field.getBinaryOffset();
62275	FieldMaskingSpanQuery
8530	#consumeAllTokens}.
9652	"\3\u4e33\3\u4ed6\3\u4f79\3\u501c\3\u50bf\3\u5162\3\u5205\3\u52a8"+
66339	this.postingsArray.grow();
38456	assertTrue(allFieldNames.contains("unstored"));
12952	u3b23
67265	dir3,
41985	allidslist
29463	RuntimeException("Will
51364	prepared");
15074	doc.getField(DocHelper.TEXT_FIELD_2_KEY);
3449	for(SegmentInfo
36352	sillyBytesWriter;
12551	u3b2d
49662	(jj_3R_2())
37188	checkheader
41502	NUM_IDS);
41647	s.compile(input);
65093	inputCount
17461	dir2;
41428	VisitTerms<Long>(dirOut,
35237	proxOutput.getFilePointer();
63738	x86431
6222	this.boosts
63739	x86432
20952	preserving
18761	"ÏÏÎ½ÎµÏÎ³Î±ÏÎ¯Î±",
66482	tokenText[--downto];
55165	d1="
23610	efficiency
16753	dir2,
12150	u3b37
29671	"\1\0\15\132\1\0\5\132\1\0\1\132\1\0\2\132\1\0\2\132"+
30119	CloneableTerm(term);
59681	"\1\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
59672	"\1\137\4\0\2\137\150\0\1\u0101\3\266\1\u0107\1\266"+
17592	dir1;
51967	while(flushPending
7352	pqsize,
5592	SmallFloat.floatToByte315(0));
8369	primary
56859	"\2\12\14\1\7\12\11\1\12\2\47\0\2\12\1\0\1\12\2\0"+
30585	"\1\0\1\26\4\0\1\26\1\0\1\26\2\0\2\26"+
16669	dir1,
55754	"test",
32860	docState.testPoint("TermVectorsTermsWriterPerField.finish
19417	(FieldValueFilter)
24816	this.docValues
38665	numDocs.",
17148	dir0;
64474	spanNotQuery.setBoost(getBoost());
65847	bq.add(tq,
60340	"\1\u021c\32\u021d\1\u027d\12\u021d\1\u021e\2\u021c\1\u021f\3\u021c"+
37526	"lastname"));
58315	http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order
58604	udc1ccde
54107	enable-increments-"+(enableIcrements?"enabled":"disabled"));
26994	"\u0001\u0308\u00AD",
25267	"*u?",
12256	u7eb5
46997	african
62453	countingSumScorer;
5244	"DEFAULT",
20501	java.text.CollationKey},
8383	verify\n"
38580	generation",
39416	maxCounter);
60836	"\175\0\1\u0486\12\u02e2\1\u048b\17\u02e2\1\u034e\12\u02e2\175\0"+
57323	Math.max(other.numBits,
22825	getLowerVal()
18503	UAX29URLEmailTokenizer.TOKEN_TYPES[UAX29URLEmailTokenizer.EMAIL])
64663	currentPayloadScore
28401	charArray.length
31460	JREs
15225	sizebytes[2]);
53136	UTF-16.
8784	org.junit.Assert;
49269	BooleanClause.Occur.MUST
39511	initUTF16Results();
65793	answer.nextSetBit(pos+1);
10021	"\3\0\1\25\177\0\2\64\6\0\1\64\153\0\1\64"+
12657	u7eab
37988	NumericUtils.prefixCodedToLong(act));
40552	toBytesRef(IntsRef
42598	SpanQueryFilter(query);
61100	"\1\u056f\5\232\1\352\12\232\175\0\1\351\32\232\1\352"+
57459	""+docCount,
31089	positions.freq());
58478	"a\ud801\udc44b"};
15875	Format
21205	org.apache.lucene.store.SimpleFSDirectory;
55680	"addindex",
55581	assertFalse(r2.isCurrent());
48458	maxTokenCount
63962	testassertions
43206	TestSegmentTermDocs
1890	fieldsStream.writeByte((byte)
23572	""+count));
8968	PrefixCodedTerms
30679	"\1\25\4\0\6\25\2\0\1\25\1\0\1\25\1\0"+
61067	"\2\0\1\u054a\15\0\1\u054a\6\0\12\u054a\1\u0503\13\0"+
18647	"ÜÜÜ¢ÜÜªÜ¢Ü",
18164	ConstantScorer.this.weight));
53377	file.position
63204	this.field.equals(other.field)
46819	assertTermEquals(String
5448	x7bfff8f8ffffd9ffl
33308	point:["+comm.getUserData()+"]
49761	jj_endpos;
52415	NumericTokenStream(precisionStep);
59528	"\2\0\1\65\6\0\1\25\122\0\1\25\6\0\3\25"+
66679	unreachable
50421	enrolled
36509	bytesPerArc[arcIdx]
38018	vals[i],
52461	termAtt.setLength(NumericUtils.intToPrefixCoded((int)
10360	"\1\u014e\24\264\1\u0156\5\264\1\141\12\264\1\u014f\3\136"+
55789	dir1.getOpenDeletedFiles();
42509	Field("hasMaybepayload",
7529	utf8result
8555	newSinkTokenStream()
31096	positions.close();
52994	6));
22765	FieldCache.DEFAULT.getFloats(reader,
57296	!=0
12550	u3a8a
5339	jjMoveStringLiteralDfa0_3();
20864	analyzer.tokenStream(fieldName,
41797	(fst.findTargetArc((int)
22149	substantially
56950	EMAIL
66825	tmpFreqs.get(position.intValue());
9129	this.storedFieldsWriter
24279	Short.MIN_VALUE,
33132	src.addAttribute(CharTermAttribute.class)
36238	final");
8834	testRuleOrder()
67086	testlazyproxskipping
49382	easily,
6493	testioutils
39263	other.getBoost()
56190	(in.next())
22715	Short.MIN_VALUE)
35122	AveragePayloadFunction(),
50036	defined");
4713	SerialMergeScheduler());
38834	r.docFreq(new
22069	week
12149	u3a94
34163	rptgroup
23213	Adding
19865	testCachingFloat
19294	apostrophes
27364	"\u002C\u0061\u002C",
43542	BitVector(d,
45759	,"tz",
35439	ofkind
57194	clear(int
36080	sorter
43441	SpanTermQuery(A)
21959	readchars
65604	!refCounts.containsKey(fileName)
22713	Short.MIN_VALUE;
58317	UTF16's
17701	meaningless
6758	(e.g.
66880	Outputs<PairOutputs.Pair<A,B>>
4726	MySimilarity());
52820	library.
37235	readnextarc
22418	offsetright
3540	RuntimeException
566	doc.add(newField(r,
58211	UTF16),
59874	"\1\232\1\u016f\1\u0174\6\u016f\4\232\4\u016f\1\232\1\u016f"+
56416	w.maxDoc());
35820	IndexReader.open(rd1,false);
64496	includeSpans.end()
61018	"\161\0\4\u0525\2\0\1\u0525\15\0\1\u0525\6\0\12\u0525"+
49879	lowerterm
301	searchers/readers
40957	fstEnum.seekCeil(term);
1207	gracefully
5432	startsat
8980	"";
5078	((0x97ffffff87ffffffL
48671	this.__test_dir
10905	"\150\0\1\376\32\264\1\141\11\264\1\u031c\1\0\3\136"+
173	reader1.docFreq(searchTerm1));
15021	testrepetitiveincreasingsloppiness3
52561	weight(Searcher
41367	"")
8557	SinkFilter
37490	Term("field","words"));
22412	num_bytes_short
18143	result.setValue(0);
5077	077);
586	"",
25650	other.readerKey
31736	<p><b>Warning:</b>
3426	isExternal;
4411	sorted
15454	norms
9272	UAX29URLEmailTokenizer,
63744	x86521
26739	<code>doc</code>
17276	freq_extension
22029	IndexSearcher#setSimilarity(Similarity)}
23580	LUCENE-3340:
49778	(oldentry[i]
32325	SearcherThread(int
36562	bytes[right--]
37911	weak
43169	pri="
48969	documentation</a>.
42623	it.docID()
5909	updateCached()
42356	(tps[0].next())
54810	lockfactorys
35117	org.apache.lucene.search.TestExplanations;
36151	ARCS_AS_FIXED_ARRAY
48052	org.apache.lucene.index.CompoundFileReader}.
23030	IndexWriter(indexStoreB,
53642	cacheddfsource
41013	assertTrue(isDone);
65415	initialcommit
61340	"\6\u02e2\175\0\1\u034d\17\u02e2\1\u0642\12\u02e2\1\u034e\12\u02e2"+
55415	nthreads
41887	intsequenceoutputs
50862	(bufferedDeletesStream.any())
20240	buffer.append(getMinimumNumberShouldMatch());
11394	"\2\0\1\u04ad\15\0\1\u04ad\6\0\1\u04af\1\u04b1\1\u04b0"+
19454	docfieldprocessorperthread
9799	"\1\77\1\0\1\26\2\0\1\25\1\150\32\36\1\141"+
8489	TeeSinkTokenFilter.SinkTokenStream
38009	300L,
55759	testAfterCommit()
41061	outputs.common(output1,
5639	Integer.MIN_VALUE;;i++)
34884	prevtype
40459	Attribute}s
1613	just
3395	merges.</p>
52044	infoislive
9498	"\0\u404f\0\u178f\0\u40f2\0\u4195\0\u4238\0\u42db\0\u437e\0\u4421"+
3463	committed.
56737	committed:
16698	single-segment
51010	MergePolicy#findMerges
23727	PruneByAge(600.0));
11073	"\32\230\1\347\3\230\1\u03b3\6\230\175\0\1\346\1\u03b4"+
21921	IndexInput");
29057	numDocs-1;
67741	csqlen)
64162	random_test_bytes
21673	wildcard_char
25380	"Houses"
61407	"\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\4\u02e2\1\u0671\5\u02e2"+
57996	threadsAndFields.entrySet())
16621	updateTop()
7189	Abstract
18198	other.query
50619	getFieldInfos(segmentInfos.info(segmentInfos.size()-1));
49677	jj_la1_0;
8093	WeakIdentityMap.newConcurrentHashMap();
39308	x4ac65113
5398	positionincrementattribute
57732	SerialMergeScheduler()).
48777	tokens[tokenUpto++]
5758	BLOCK_BITS
38234	assertLongRangeSplit(-5000L,
55062	WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(
5587	testFloatToByte()
5795	shifts
11968	zzInput
10080	"\1\0\2\25\1\0\2\25\2\0\1\25\2\0\1\25"+
17496	MapFieldSelector("f1"));
33462	(needs
62417	assertEquals(IntsRef.EMPTY_INTS,
1911	(nf.getDataType())
10214	"\1\u0107\6\u0103\3\264\1\u0103\2\264\1\u0103\2\264\1\u0103"+
51654	delRatio
19613	java's
29335	jump
8895	_innerSet
31780	option");
38480	assertTrue(notIndexedFieldNames.contains("unindexed"));
25960	((reverseMul
35389	(non-special)
2927	bitset
32709	decodedBuf);
22384	june
42431	b2[i]);
18614	"ÙØµØ©",
57064	<td>1.02</td>
65620	revisitPolicy()
24525	(searchX,
6128	ts.addAttribute(PositionIncrementAttribute.class)
2565	junk
62697	(random.nextInt(100)
6911	'}')
7585	'\t':
49653	!jj_3_1();
35536	//CSA(twosA,
28983	TermVectorsReader(Directory
31563	_TestUtil.rmDir(oldIndexDir);
8607	passed-in
49678	jj_la1_1;
5654	bytetofloat
10857	"\1\346\1\u02f1\31\230\1\347\12\230\175\0\1\346\21\230"+
60434	"\1\u033b\14\0\1\u033c\160\0\34\u01d0\12\u033d\1\0\2\u01d0"+
1660	keyword
41812	BytesRef(e.getKey().substring(prefix.length())),
29319	time.<br>
6208	body:term1^10.0)
27926	"\u0031\u003A\u0308\u0031\u003A",
4526	matchalldocsquery
35678	(val>>>16)
38157	shift)
58340	noted
32059	shift0
52458	shift,
7712	accessed.
36251	nodeAddress;
63828	shift2
63829	shift3
63562	shift?
16639	Object[].
45358	U+2C7A:
41261	assertNotNull(fstEnum.next());
38451	Field.TermVector.WITH_POSITIONS));
48420	(scorerDocQueue.topDoc()
2960	gettimeelapsed
5145	jjStartNfa_1(int
18373	note:
42493	generateRandomData(payload);
35366	BitSet.
52340	Index.NOT_ANALYZED_NO_NORMS));
36359	stopAt
16223	bqtest(Query
63500	0x8765421,
52929	SURROGATE_OFFSET
36302	int[nodeRefCount];
33525	int[]{4},
30136	(indexDivisor
18865	","
53927	tocodepoint
41236	IntsRefFSTEnum<Long>
2580	sumofsquaredweights
40227	assert(smi.ord
3553	super("merge
66072	BooleanClause.Occur.MUST_NOT,
59437	"\1\25\3\0\1\25\177\0\2\34\6\0\1\34\153\0"+
36531	bytes[fixedArrayStart-2]
52584	if(uniques.size()
29238	currentPosition++;
17079	safe
31135	Advances
54690	"-"
23534	id=0;id<NUM_DOCS;id++)
39900	writer.getReader(),
28628	org.apache.lucene.analysis.standard.StandardTokenizer;
26380	codingCase.middleShift)
51008	aborts
9410	"\11\0\7\132\1\0\7\132\221\0\43\132\10\133\1\0\2\133\2\0"+
2318	writer.getReader();
39533	(lastFieldNumber
36532	bytes[fixedArrayStart-1]
43951	INVERTED
46457	,"(13)",
15531	src.version;
23027	IndexWriter(indexStoreA,
23345	"2"
4985	jjMoveNfa_3(int
65361	edge'
36528	bytes[fixedArrayStart-4]
7559	STATIC_LEXER_ERROR
65104	edge.
27111	"\n\u0308\u0061\u002C",
22497	#toString()},
6970	depends
6427	readaheadlimit
9462	"\1\12\145\0\1\12\143\0\1\12\130\0\1\12\111\0"+
54054	"Time"));
43213	SegmentTermDocs
20358	testillegalstateonreplay
61547	u7e97
25257	"*hi*",
31005	pw.println(text);
58673	NRTCachingDirectory(newFSDirectory(_TestUtil.getTempDir("doesnotexist")),
39409	checkSkipTo(TermPositions
62562	Occur.MUST,
36530	bytes[fixedArrayStart-3]
55198	termDocs1.freq();
2896	collect
19756	endMinus1)
40640	false).doTest(0,
60564	"\1\u02e1\161\0\4\u0343\2\0\1\u0343\15\0\1\u0343\6\0"+
55383	Collections.swap(fields,nextInt(fields.size()),
22841	inclusiveupperpoint
48080	<i>dest</i>.
64332	addClause(bq,
47090	notch
56883	"\u0773\0\u2ba4\12\u215c\0\u012e\13\322\13\7\12\14\0\5\12\5\0\1\12"+
53152	((utf8[offset]&0x3f)<<6)
19027	"mailto:personA@example.com,personB@example.com?cc=personC@example.com"
19625	endMinus1;
1418	crashingfilter
10553	"\1\211\12\0\1\212\17\0\1\213\21\0\1\214\2\0"+
56427	maxCount);
3057	members
66078	-t:two",
24241	SortField.FIELD_DOC
39601	writeTerm(int
52680	docScore(int
17428	leverage
3523	OneMerge}
15041	INSTANCE
33170	flags;
45204	"Çª"
66059	flags2
9763	"\1\34\1\64\1\0\1\65\1\0\1\65\1\66\1\0"+
64659	Calculate
32627	originalArray1[byteNum]
33171	flags)
40091	ArrayList<IndexCommit>();
48338	subscorers.
42796	flags.
6337	flags,
29153	storePositions;
48290	prevEnd)
7283	populateResults(ScoreDoc[]
24993	nosuchfield
29950	"\1\64\2\0\2\64\10\0\1\26\4\0\1\64\37\0"+
8155	curBuf.get(b,
44504	U+2C78:
59585	"\3\355\11\36\1\142\12\143\1\66\1\137\1\144\1\137"+
21171	Generally,
48298	prevEnd;
64619	0x7FL)
17032	storePositions)
67919	Integer.parseInt(part2.substring(1+colonIndex));
66060	{BooleanClause.Occur.MUST};
63732	x86321
40278	readerindex
31203	"32.nocfs",
63456	0x874321,
22282	float[newSize][];
37768	c.setScorer(this.scorer);
64618	0x7FL;
17260	proxstream
64717	"bb2",
58385	"that",
28032	"\u0031\u002E\u2060\u0308\u0001",
34008	j=i+1;
62831	HANGUL
5653	testsmallfloat
17404	this.termFreqs
51742	merger.getMatchedSubReaderCount()
48408	delay
17737	small
57005	fastest
62972	extra.add(o);
51394	testPoint("startDoFlush");
34903	field.setValue("jumps
18081	ConstantWeight
25651	this.fieldName.equals(other.fieldName));
43562	gradually
44700	U+2C76:
26841	bufferupto
53718	necessity
13355	u3c5f
43645	multi-file
29702	"\3\2\1\30\2\31\1\32\1\33\1\34\151\0\1\25"+
12954	u3c69
10897	"\4\0\2\136\150\0\1\376\32\264\1\141\3\264\1\u0316"+
33656	(segCount
64608	errors:
8260	fsindexoutput
24770	ndocs,
30540	"\41\0\1\25\1\34\1\52\1\0\1\53\1\0\1\53"+
475	deletedocuments
34676	setfreqcurrentdoc
48436	nrmatchers
64708	r.getSequentialSubReaders()[0]).directory();
35497	twos=0,
30413	TokenStreamComponents(t,
12553	u3c73
41182	chars[charIDX]
56331	mergeSort(mid,
7454	starts[]
38002	-4000L,
59215	"\4\u3225\4\u32c8\4\u336b\4\u340e\4\u34b1";
12152	u3c7d
17690	non-trivial.
8711	docCount
45948	U+2C74:
7638	"),
33465	").
24389	(float)
2770	lastCollected="+lastCollected,
41526	outOfBounds.add(idString);
23767	we'd
6903	"*"
42504	pool.remove(0);
623	");
19579	.onUnmappableCharacter(CodingErrorAction.REPORT);
22220	"):
12003	(zzInput
33802	advanceRpts(PhrasePositions
36708	derefLen="
21336	".big1",
44664	U+2C75:
27837	"\u0061\u0027\u2060\u0308\u0031\u003A",
66698	testerrorrule
33986	pp1.offset
36074	"three"))))),
25653	"+"
41609	b.toString()
34575	PayloadTermWeight(this,
2162	frozenhash
22431	quicksort
4342	assertTrue("Number
62360	assertEquals("spanA
57801	r.deleteDocument(1);
49530	boost=null;
22949	Collections.sort(list2,
2177	NoMergePolicy#NO_COMPOUND_FILES}
10456	"\1\25\2\0\1\25\1\140\16\36\1\352\13\36\1\141"+
60061	"\1\u01e7\6\0\12\u01e7\176\0\4\u01e8\2\0\1\u01e8\15\0"+
64103	utf8Bytes.length];
29828	"\3\0\1\54\1\0\1\54\2\0\1\25\2\0\1\26"+
53567	dfMap
10425	"\2\230\1\u016a\4\230\1\u016a\11\230\1\347\12\230\175\0"+
27855	"\u0061\u002C\u0308\u0041",
45985	U+2C72:
17930	collation
49550	boost=null,
50803	abort,
20317	abort.
24357	"("
52311	(called)
39469	faster,
51735	message("merge:
45655	"ï¬"
49072	"':
21176	faster.
46010	U+2C73:
67833	testOneLargeOneSmall()
55761	r1.numDocs());
39172	overcounts
30235	getThreadResources().termEnum;
16430	psdp.getSnapshots().size());
3363	tothits
39566	")"
31972	<code>reader.maxDoc()</code>
59442	"\3\0\1\137\1\164\3\0\2\137\151\0\32\232\1\0"+
15237	fileExists(String
51529	message("merged
2268	BoostingSimilarity();
21951	(numBytes
4818	mysimilarity
30845	java5characterutils
49560	term.image.substring(0,1);
19771	postings
27314	"\u003A\u0061\u003A",
23468	It's
19751	viable
19616	onmalformedinput
6394	wrapper.
10133	"\2\0\1\52\3\0\1\53\2\0\1\54\3\0\1\55"+
34546	getPrefixTerm()
10703	"\1\u0253\5\264\1\141\12\264\1\0\3\136\1\0\2\136"+
15895	"?"
60509	"\4\0\2\137\150\0\1\u0101\32\266\1\142\5\266\1\u0323"+
52995	0x3F));
52015	bufferedindexinputs
5483	jjnewlexstate
6930	super.hashCode();
22536	(interfaces.size()
28380	BytesRef[numStrings];
39066	assertEquals("Size
3912	clearAttributes();
10732	"\2\0\2\76\1\77\1\0\1\26\2\0\1\25\1\u011a"+
41879	fsttester
22054	week.
65816	hc.getCount());
44555	"ï¬"
38775	r.deleteDocument(0);
20453	(i.e.
26285	inputArray,
36860	BytesRef()).utf8ToString());
50149	name="thread-safety"></a><p><b>NOTE</b>:
57451	.setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));
31440	Integer.toOctalString(i);
5418	curchar
32035	"Cache
51211	dir="
64153	d160
57116	bitmask)
58777	asUnicodeChar(char
61139	"\1\u058d\2\u058c\2\u058d\1\u058c\1\u058d\1\u058c\1\u058b\13\0"+
6359	fields.length
56429	maxCount="
50182	denote
11731	zzAtEOF;
8279	default_max_buff
60708	"\2\u02e2\2\u0428\1\u02e2\1\u0428\3\u02e2\1\u0428\2\u02e2\2\u0428"+
24980	jhfdb
27667	"\u0061\u2060\u0061\u2060",
57142	bitmask;
62835	"<HOST>",
18903	String[]{"R2D2",
44567	"ï¬"
61546	u7df4
8167	readInt()
600	doFail.set(this);
9365	"\3\0\u0100\146\111\132\1\0\4\132\2\0\7\132\1\0\1\132\1\0"+
38137	(easier
53130	char[newlen];
8184	b.position((int)
38676	ParallelReader))
63437	0x86543,
55414	testmulticonfig
5937	index,
363	Field.Store.NO,
1841	index.
44550	"ï¬"
58027	lastDocID++;
38945	index1
47930	super("commit()
15682	(_<segment>_N.sX).
1610	index)
2894	amount
40490	assertions
11221	"\175\0\1\u0386\4\u0429\2\0\1\u0429\15\0\1\u0429\6\0"+
50735	unoptimized
21802	index!
18462	testsimpletiebreaker
23984	"10",
67317	ParallelReader's
41870	byteIDX=1;byteIDX<result.length;byteIDX++)
4988	startsAt
44563	"ï¬"
63435	0x86542,
32396	synchronizedmap
36748	(distance
9158	numstoredfields
8297	getcause
28049	"\u0031\u002E\u2060\u0030",
7190	providing
13057	u7dfe
11362	"\10\264\1\u0496\1\264\1\0\3\136\1\0\2\136\1\137"+
67	"AS
29161	deltaLength
61215	"\175\0\1\u034d\32\u02e2\1\u034e\11\u02e2\1\u05ce\175\0\1\u034d"+
1167	index:
1477	index;
58731	TestIndexWriterUnicode
38946	index2
63434	0x86541,
60935	"\6\0\12\u04d4\1\u04d5\174\0\1\u0168\4\u04d4\2\0\1\u04d4"+
33023	testCaptureState()
61275	"\26\u02e2\1\u060b\3\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
39484	lastIndexPointer;
64992	tweaks.
45675	"á¹ª"
55186	r2.terms
55688	readers[i].close();
33579	CharReader.get(reader));
23268	docFrequencyMap.size());
58390	"they",
17999	basetestrangefilter
27481	"\u0030\u0031\u002E\u2060",
50881	#forceMerge(int)}
34519	mergedsegmentwarmer
8777	delid
47897	description();
3411	provides
58463	unmodifiable");
20031	Specifies
6729	<em>(int,
10174	"\3\136\3\0\1\136\1\162\3\0\2\136\2\0\1\337"+
40594	ir.ints[i]
15397	no_load
21876	fields.get(i);
42938	appended)
3963	provided
64149	d11e
26232	appended,
34202	appended.
37411	lexicographically
28927	cache.getInts(reader,
37755	id_field
55248	(f1.isBinary())
56135	actual.length);
62956	files:\n
60784	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\6\266"+
31093	out.print(","
34897	processor
62662	threadSafe)
53737	CharArraySet(CharArrayMap.<Object>emptyMap());
35267	delta
44559	"ï¬"
59723	"\1\74\14\0\1\62\4\0\1\75\2\0\1\76\41\0"+
4116	ascfield8.setIntValue(val);
62814	JFlex.
65014	paths.
8936	Equality
16485	testnosnapshotinfos
38603	assertTrue(IndexWriter.isLocked(dir));
63368	0x765321,
67586	testCloseOrig()
67518	stop()
65930	mfqp.parse("+one
6823	wasted
35814	TermVectors.
67638	performtestswithexceptioninreopen
53075	matches(String
11309	"\1\u0325\161\0\4\u046d\2\0\1\u046d\15\0\1\u046d\6\0"+
15169	newFSDirectory(file);
25771	getcorecachekey
18179	firstDocID)
33315	System.out.print(filename+",
26540	assertTrue(DocHelper.nameValues.containsKey(s)
18427	tq(f,
66359	"upto="
5882	this.blocks
8739	Collections.shuffle(fieldIDs);
24186	Character((char)
42898	prototype.length());
7659	Constructor
27571	"\u00AD\u0308\u0061\u0027",
48503	firstDocID;
32829	offsetAttribute
20091	non-prohibited
54438	explain();
53135	Interprets
870	TermDocs
31888	FieldCache#getFloats(IndexReader,
35726	0xC0000000)
39891	false)");
39191	":"
57840	indexnotfoundexception
18067	wrapped.
2635	3000;
21718	r.numDocs()
36145	Arcs
10040	"\1\25\1\0\2\25\123\0\2\25\3\0\1\25\4\0"+
18079	wrapped,
9508	"\0\u729c\0\u733f\0\u73e2\0\u7485\0\u7528\0\u75cb\0\u766e\0\u7711"+
11909	producing
34973	indexReader,
30506	characters</li>
22303	right.length))
2341	contain
9312	"\1\171\1\172\1\200\1\173\3\241\1\216\1\242\52\0\1\132\2\0"+
40679	false).doTest();
41513	idField.setValue(idString);
63511	int_table():
32442	file.delete();
41411	file.");
54035	orignorm
56904	"\2\15\1\16\1\4\4\0\1\3\1\4\1\17\1\20"+
17769	non-constant-score
8431	verifyLF.makeLock("test.lock");
34914	"extrem*"));
46852	testallfoldings
12658	u7f4e
52528	assertEquals("field3:fox",
44855	U+2C7C:
7332	attempts
33349	point:"
40561	toIntsRef(String
54115	"+i+"
12257	u7f58
26362	codingCase;
61548	u7f3a
49124	this.enablePositionIncrements
24510	Locale.US));
40870	validOutputs;
40005	obtained)
52506	ir2.close();
44420	U+2C7B:
33010	termbytes
34053	pp.rptGroup==g;
2738	obtained,
13059	u7f44
67351	subReaders0.length;
32789	testencodedsortabilitynio
61189	"\1\u05b8\6\0\12\u05ba\1\u05b9\13\0\1\u033c\160\0\1\u03a1"+
31981	getInts
31933	DEFAULT_DOUBLE_PARSER;
768	TokenFilter
58962	testCloneSafety()
37335	termAtt.length());
33367	testtransactionrollback
65705	++count;
16	contributor
41354	(!actual.equals(expected))
44998	U+2C61:
49492	MOD_REQ;
54970	IndexReader#isCurrent()
20718	this.length)
15117	field.isLazy()
11435	"\15\0\1\u04cb\6\0\12\u04cb\1\u04a0\175\0\4\u04cc\2\0"+
37655	numTerm
54458	termAtt.length()))
49368	("*".equals(field))
24248	"EACGI");
7769	d.getFields();
49529	fieldToken=null,
48384	scorerDocQueue.insert(se);
26416	((inputChar
50047	os.writeString(IndexFileNames.stripSegmentName(fe.file));
17632	LUCENE-1805:
44950	U+2C60:
22273	char[newSize];
14653	comparing
14842	secondary
26529	reader.getFieldInfos())
36503	target");
15587	Collections.<String,String>emptyMap();
816	token
372	r.close();
20688	inline
8114	nrBuffers);
53206	xdbff
45409	U+2C63:
65754	nTerms,
42880	copyBuffer(newTermBuffer,
62862	(tokenType
59167	"\3\u3da5\3\u3e48\3\u3eeb\3\u3f8e\3\u4031\3\u40d4\3\u4177\3\u421a"+
20716	this.length;
65158	De-dup
5678	#isKeyword()}
4356	field="ascfield"+precisionStep;
28464	numiters
433	ioexception
49916	u005c'
62833	"<ACRONYM>",
64442	String(result.result,
42323	reader.getFieldInfos();
44952	U+2C62:
58408	assertTrue(set.contains(findme,
732	r2.docFreq(new
10317	"\1\136\4\0\2\136\150\0\1\135\1\273\1\274\1\275"+
29405	<code>prefix</code>.
63870	testLowerCaseTokenizerBWCompat()
17023	TermVectorReader
35975	savedclausecount
9403	"\10\132\1\133\3\132\1\133\4\132\1\133\27\132\5\133\30\0\64\132"+
2192	settings
37672	testbarelycloseenough
41185	testRealTerms()
12745	ub6b3
52328	multipleCommits);
33316	System.out.println();
22706	newShortRange(field,
13146	ub6a9
44075	U+2C65:
26880	org.junit.Ignore;
25947	OneComparatorNonScoringCollector(FieldValueHitQueue<Entry>
30388	commitcalled
37312	constructed.
66317	perThread.termsHash.docWriter.bytesUsed(size);
56959	'.'
43043	refresh;
16891	subs.length;
62698	intValue
29845	"\1\146\21\0\1\101\17\0\1\25\1\65\1\26\1\103"+
50130	<p>Opening
39562	termBytesLength
27404	"\u0027\u0061\u0027",
7784	fval.split("#");
64266	Type#FLOAT}.
52424	TOKEN_TYPE_FULL_PREC
50682	this.maxFieldLength
10060	"\4\25\1\0\1\66\1\25\1\0\1\25\4\0\3\25"+
24656	sort.setSort(new
42217	PayloadAttributeImpl();
66342	oldSize));
3897	Codepoints
45517	U+2C64:
49423	hexToInt(char
381	"who")));
60559	"\15\0\1\u03ab\6\0\12\u03ad\1\u03ac\13\0\1\u02e1\160\0"+
33500	String[]{"x"},
22189	switch(bytesPerElement)
49439	'-'
48897	docNumAwareMapper
34278	DEFAULT_TERM_INDEX_INTERVAL;
36905	'1'
54614	elemsizes
41224	System.out.println("FST:
8007	cleanMapping(final
64325	termCountLimit);
29409	getPrefix()
44661	U+2C67:
28086	RIGHT
49720	(c.gen
24480	criterium
67412	ParallelReader(mode
28008	"\u0031\u002C\u0308\u00AD",
4510	countterms
12344	ub6bd
48540	visitrequired
33492	normMap,
59181	"\3\u84f5\3\u8598\3\u863b\3\u86de\3\u8781\3\u8824\3\u88c7\3\u896a"+
35530	twos,
18210	constantweight
33932	involved.<p>
61227	"\1\u05df\24\u02e2\1\u034e\12\u02e2\175\0\1\u034d\10\u02e2\1\u05e0"+
43046	refresh.
33294	sval=r.document(i).get(FIELD_RECORD_ID);
45723	U+2C66:
68051	newStringReader(String
33473	normMap;
40688	PositiveIntOutputs.getSingleton(doShare);
2093	freeze
25054	gdhjciefab
35527	twosB
135	IndexWriter
59255	"\1\0\1\32\113\0\1\32\3\0\2\32\2\0\2\32"+
67179	(existingPositions
15758	delFileName).count();
9871	"\2\26\7\0\3\26\2\0\2\26\12\0\2\26\1\0"+
64716	"bb1",
58802	utf16);
44879	U+2C69:
58358	utf16's
35379	getbitset
35614	B[i]));
19035	';'
37199	writelabel
9364	"\1\142\1\143\12\134\4\143\2\142\46\132\12\0\53\132\1\0\1\132"+
31011	validation.
18288	DisjunctionMaxQuery
21395	(isCSIndexInput(is))
39561	compareToLastTerm(fieldNumber,
14804	(locale
44698	U+2C68:
67708	if(termBuffer.length
67000	bos.size();
2153	outputtostring
67191	entry.setPositions(positions);
49443	':'
57722	indeed
65607	[prefix="
40809	Builder<T>
49911	lastcharwasescapechar
32786	decodedlen
49039	String.class,
51576	(merge.info
36268	(willPackFST)
28936	'='
24390	Math.sqrt(
23427	String.valueOf(value),
42682	mp).setMaxMergeAtOnce(mergeAtOnce);
63520	SetBitsIterator,
42427	b1.length;
31232	(d.get("content3")
67131	tokens.length);
64479	excludeSpans
50111	Document)
8372	Simple/NativeFSLockFactory\n"
2957	hitcount
54028	owner.maxDoc());
62518	SingleMatchScorer(optionalScorers.get(0));
63848	builder.toString().toLowerCase().split("
42652	setUp(Random
26726	Document.
28475	Document}
32705	testAllNullInputNIO()
42751	reusableToken.reinit(string,
43219	segTermDocs.doc();
10421	"\175\0\1\346\4\230\1\u016a\5\230\2\u016a\3\230\2\u016a"+
2406	numTens
65164	lastInput="
36621	arc.nextArc
38889	numThreads
27844	"\u0061\u002C\u0001",
60630	"\2\137\150\0\1\u0101\32\266\1\142\6\266\1\u03fe\3\266"+
22002	addField(FieldInfo
67966	y");
19766	posupto
11217	"\1\u0425\6\0\1\u0426\2\u0427\1\u0426\5\u0427\1\u0428\14\0"+
5261	QueryParserTokenManager(CharStream
37370	headerLength(String
21983	TermInfosWriter(dir,
33640	incrMin,
24868	reverse="
30846	java_5
22354	quickSort(T[]
26771	getStart()
21764	Documents
56707	(needsMerging
30844	java_4
37311	permits
2656	blah
36863	reset");
26941	TABULATION>
56498	top().end();
32751	buf.append('
60851	"\1\u0498\1\u049a\1\u0499\2\u0498\2\u0499\1\u0498\1\u0499\1\u0498"+
31504	Field("compressed",
36025	"one"));
9350	"\1\0\10\132\1\0\3\132\1\0\51\132\2\0\1\132\7\133\1\0"+
22516	<p>Custom
11214	"\2\136\151\0\4\u0422\2\0\1\u0422\15\0\1\u0422\6\0"+
49380	notation;
53609	scoreDocs[j];
33966	hasRpts
54437	possible.
53596	MultiSearcherCallableNoSort(Lock
16741	deleteWorked(int
20930	possible,
36242	(flag(BIT_ARC_HAS_FINAL_OUTPUT))
3183	relevant
36017	"one")),
46723	QUESTION
31059	FieldInfos());
346	deleteReaderReaderConflict(true);
60215	"\12\u0277\1\66\1\u0219\1\u0278\1\u0219\1\0\1\u0219\1\u0279"+
53148	(char)b;
20152	similarity.coord(coord,
36912	willPackFST=true");
57571	getIndexOffset(Term
40478	Javadoc.
3674	addAttribute(CharTermAttribute.class);
63033	"<_NUM_CHAR>",
65961	t:[a
49013	QueryParser.Operator.OR
43179	idIndex;
19626	CHUNK
43521	doTestClearVectorOfSize(int
66749	<p><code>4
35870	MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));
7924	JVMs.
66027	assertEquals("(+b:one)
13149	ub892
5156	jjStartNfaWithStates_1(1,
64406	compressor
8030	JVMs)
33860	<li>no
10329	"\24\0\1\u014b\15\0\1\47\1\0\1\50\1\0\1\51"+
44909	U+2C6A:
3631	checkaborted
66631	TestReproduceMessage()
47153	descender
42345	generateRandomData(payloadDataLength);
33893	(!advanceRepeatGroups())
30552	"\4\0\1\25\1\0\1\25\2\0\1\25\1\0\2\25"+
61638	ub888
54162	LogByteSizeMergePolicy)
53018	end+1);
34763	bar",
31108	simerge2
31110	simerge3
52064	indexcommit's
49889	severaltokensatsameposition
35622	~B[i+1]))
40603	"stop",
27147	"\u000B\u0308\u0061\u2060",
46133	U+2C6B:
2121	int[2*table.length];
42165	deepCopyOf(IntsRef
28272	subScorers,
7180	termcompare
35623	~B[i+1]);
43182	values[slot1];
48997	customization
48377	subScorers)
26708	Searcher#search(Query,int)}
20170	optional.add(subScorer);
10705	"\1\376\21\264\1\u0255\10\264\1\141\12\264\1\0\3\136"+
35579	(tot8<<3);
28255	subScorers;
15642	hasDeletions()
46171	U+2C6C:
12748	ub89c
66939	inc.output1),
58095	PriorityQueue<PhrasePositions>
4792	writer.setMergeScheduler(new
10491	"\1\u0199\1\u0198\1\u0197\13\0\1\u0122\161\0\4\u019b\2\0"+
60076	"\1\67\1\0\1\25\2\0\1\25\1\141\12\36\1\355"+
15935	bitvector
37451	doc.add(newField("nonexist",
23575	quickly
38019	NumericUtils.prefixCodedToLong(prefixVals[i])
8519	"sources"
31702	assertEquals("SimpleAnalyzer
32605	CharBuffer.wrap(encoded1);
19693	cs.posEnum.doc();
11623	"\4\u0559\2\0\1\u0559\15\0\1\u0559\6\0\12\u0559\1\u0542"+
62251	newField(name,
362	"doctor",
23454	diskUsage;
25342	KeywordMarkerFilter}
4704	(IndexWriterConfig)
24586	Sort[]
8060	#setMaxChunkSize
58800	UnicodeUtil.UTF8toUTF16(utf8.result,
41122	assertEquals(cmo.finalOutput,
41282	assertEquals(termEnum.docFreq(),
62284	testRewrite1()
49680	jj_la1_init_1();
53906	StringReader(input);
24578	sort);
45051	U+2C6E:
1692	testrandomsearchperformance
49666	(jj_scan_token(COLON))
19506	rethrown
15882	'?'
37839	LetterTokenizer(AttributeSource
27570	"\u00AD\u0061\u0027",
65575	sort):
24457	"JHFDB");
52813	freely
44077	U+2C6F:
20900	stems.
57708	now",
40837	!willRewrite)
60819	"\2\0\1\u0482\15\0\1\u0482\6\0\12\u0482\1\u03ac\13\0"+
5388	javacc
8602	finalState
42043	field.reverse
2607	multiple
33038	assertEquals("TestType",
16823	origReader
17370	""+random.nextInt(numDocs);
35786	org.apache.lucene.document.Field.TermVector;
53681	pageStart
66155	multiply
65515	getRefCount(fileName);
58704	RepeatingTokenStream(reader,
29724	"\1\0\1\25\1\0\1\25\4\0\1\25\14\0\1\25"+
54218	hash.size());
66331	numPostings,
2888	collect().
22400	bytesperelement
20612	WhitespaceAnalyzer()
46381	NINE
24369	'A'
10538	"\1\0\1\231\1\0\2\u0169\4\0\1\u0169\3\0\1\47"+
52346	numExpected)
34586	PayloadTermSpanScorer
39574	ti.freqPointer
56878	"\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0"+
16675	(deleteWorked(1,
56580	nowTimestamp
1821	buffer.writeTo(fieldsStream);
55387	"+d);
30316	rollback()
16055	searcherThread2
16050	searcherThread1
25484	valIdToItems
23286	msearcher2
19713	scoreCache[freq];
64120	is.skipChars(3);
23290	msearcher3
37321	List)}
7272	criteria.
25942	criteria,
39734	this.applyAllDeletes
66731	<code>Long.MIN_VALUE</code>
44055	"áº­"
12346	ub803
3368	<p>Expert:
24733	m2.get(key));
48431	scorerdocqueue
66144	emptytokenstream
5485	x7ffffff01l
6324	required,
3386	required.
35737	nextHighestPowerOfTwo(int
2814	required:
49207	required;
67887	posLengthAtt.setPositionLength(t.getPositionLength());
46717	,"!",
66978	underlaying
17307	"value",
18963	(-1
38529	b1.getBinaryValue();
8807	WithNestedTests.AbstractNestedTest
15093	lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);
41679	fst.addNode(node);
28828	childpointer
40716	IntsRef(s.length());
66741	Reuse</h3>
10084	"\1\25\6\0\1\25\1\0\2\25\123\0\1\25\13\0"+
54449	KeywordMarkerFilter,
14606	zztransl
41565	assertTrue(actual
34994	filter.getDocIdSet(indexReader);
49144	lower-cased
27203	"\u3031\u0061\u2060",
66713	Integer.toString(x),
25373	KeywordMarkerFilter(
58625	testemptyset
64384	xffffffffl
773	TokenStream
64531	spannot
62445	float[optionalScorers.size()
34269	LogByteSizeMergePolicy}
22473	#reflectWith(AttributeReflector)
63827	curdocid
1878	FIELD_IS_NUMERIC_INT;
32826	doVectorPositions;
11022	"\1\u0207\163\0\34\u01ca\12\u038a\1\0\2\u01ca\1\u020d\3\u01ca"+
55046	sameFieldOrder
9118	gettimestamp
40497	super(factory);
58503	testSingleHighSurrogateBWComapt()
57401	getbits
4630	getters.add("getTermIndexInterval");
53814	<li>if
43981	"áº²"
59761	"\1\0\1\66\1\67\1\0\1\25\2\0\1\25\1\u0141"+
60159	"\2\232\1\u0238\1\u0239\2\232\1\u023a\1\u023b\1\u023c\1\232"+
59252	"\1\0\7\32\1\0\2\32\1\0\4\32\1\0\14\32"+
9656	"\3\u6293\3\u6336\3\u63d9\3\u647c\3\u651f\3\u65c2\3\u6665\3\u6708";
8735	mixup
64655	leftinbuffer
57954	numPositiveScores
17356	((docId
17711	CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE
14651	BYTE
19504	priorException
9066	utf8tostring
44061	"áº³"
54040	singlenormref
29963	"\1\25\3\0\1\25\5\0\1\25\32\0\15\25\5\0"+
6858	DataType.LONG,
20219	this.clauses.clone();
6986	DataType.LONG)
765	experiencing
24154	();
52581	(clauses[j].getOccur()
35777	nlztable
26935	FEED
40282	acquirewritelock
60872	"\32\232\1\352\4\232\1\u04aa\5\232\175\0\1\351\32\232"+
20442	TEXT_FIELD,
39799	(oldNormsCache
57267	andNotCount(OpenBitSet
31777	("-dir-impl".equals(arg))
11829	blow
31851	StringIndex
5136	((i
42162	sb.append(']');
60939	"\1\u04d8\1\u04d7\2\u04d6\2\u04d7\1\u04d6\1\u04d7\1\u04d6\1\u04d5"+
48009	docbasepersub
49409	codePointMultiplier;
21908	((b
45946	U+2C71:
35456	((x
55827	w.addDocument(new
35689	((y
51688	closeMergeReaders(MergePolicy.OneMerge
20738	(this.length
14557	ideographic_type
6901	'{')
65460	consulted
35734	((v
10863	"\1\346\24\230\1\u02f8\5\230\1\347\12\230\175\0\1\346"+
67575	assertReaderClosed(subReaders[i],
8874	benefit
51303	Opaque
27063	"\r\u0308\u0061\u0027",
55844	testaddindexes2
54589	items[0];
50553	(!writeLock.obtain(writeLockTimeout))
67162	(existingOffsets
46137	"ï¼º"
59495	"\1\57\2\0\1\60\4\0\1\222\14\0\1\62\4\0"+
57355	(64
66345	postingsArray.intStarts[termID];
28469	testcopychars
54022	si.advanceNormGen(this.number);
66604	abcdefga
1551	clone
19005	("email.addresses.from.random.text.with.email.addresses.txt"),
37632	StringReader(term));
63904	highlightedText
54100	stopSet1);
25329	abcdefg1
37806	Explanation(queryNorm,"queryNorm"));
3539	MergeException
58504	lowerArr.length
48133	t3</pre>
62735	sort="
18527	Õ¸Ö
35666	(lower>>>16)
18668	à¦à¦à¦à¦¿à¦ªà¦¿à¦¡à¦¿à¦¯à¦¼à¦¾à¦°
42567	testNotInitialized()
57380	i>=b.wlen;
61387	"\15\0\1\u0661\6\0\12\u0661\14\0\1\u02e1\161\0\4\u0662"+
40340	docs[pointer];
19525	(IOException)
8070	RandomAccessFile(f,
27142	"\u000B\u00AD",
58088	docfreelist
50990	(3X
38379	x7ffff
23253	{"a",
4796	writer.getConfig().getRAMBufferSizeMB(),
703	commit");
63149	toHexString(String
6547	(4)
52230	getbuffereddeletetermssize
21329	Setup
35960	//assertEquals("A,B,<empty
65391	writer.getConfig().getMergeScheduler();
38344	testsplitlongrange
52772	mdirectory
15394	emptyset
36020	(3,
41996	verifystateandbelow
50992	(30
49635	(fuzzySlop
43401	(31
23435	testUpdatesOnDiskFull()
59310	"\7\0\1\57\2\0\1\60\4\0\1\61\14\0\1\62"+
20725	toByteArray()
12747	ub7f9
16668	TestIndexReaderReopen.createIndex(random,
28909	IntFieldSource
15292	typeAnswers
6125	assertTrue("PayloadAttribute
2605	(3)
3608	addindexes
66576	int_block_shift
14961	q2.setSlop(i+1);
467	close
39423	tp.nextPosition();
4889	getxyz
5345	(1L
36018	(2,
53526	hq.pop();
11131	"\6\0\12\u03de\1\u0385\13\0\1\u0325\160\0\1\u0386\4\u03de"+
29858	"\10\0\1\25\24\0\1\25\3\0\1\25\6\0\2\25"+
42092	comparators[i].value(entry.slot);
43147	scoreDoc.score;
67242	starttime
58201	Field(e.getKey(),
42640	org.apache.lucene.util.LuceneTestCase.TEST_VERSION_CURRENT;
2602	(2)
5716	iskeyword
22396	listobject
2598	(1)
36012	(1,
42824	#length},
13148	ub7ef
32502	windows,
64790	validTerms[termIDX]
26931	"\u0001\r",
21121	TermsFilter
65682	deleteFile(file);
35426	newToken(int
39817	starts[i],
56318	swap(mid,
58036	perDoc)
34895	addTerm(int
42200	att2.getPositionIncrement());
42221	pl));
29768	"\1\37\1\0\1\40\1\0\1\41\1\0\1\42\3\0"+
36022	(0,
53540	starts[i];
58746	"\ud917abcd",
6485	here");
19523	priorException;
32219	_TestUtil.getTempDir("index.TestLockFactory6"));
39464	fraction
39814	MultiReader.reopen(),
61637	ub7e5
42872	#clear},
22007	formatpostingsfieldsconsumer
35588	B[i+1]))
27159	"\u000B\u0308\u0031\u0027",
19512	priorException,
35591	B[i+1]);
58970	one.readVInt();
26523	indexedFieldNames
1075	dir.setRandomIOExceptionRate(0.5);
15299	typeAnswer;
59754	"\1\174\2\0\4\174\2\0\1\174\304\0\1\u0127\1\u0128"+
56627	(seen.contains(fileName))
58555	assertFalse(CharArraySet.EMPTY_SET.contains("foo".toCharArray()));
38468	assertTrue(indexedFieldNames.contains("keyword"));
22813	rotate
53208	xdc00
62975	i2.next();
59061	TermCollector()
55989	getTermPositions(int
5810	elementBits)
67403	assertNull(IndexReader.openIfChanged(reader2));
64715	"bb0",
31567	infos.read(dir);
15293	NumericField.DataType[numDocs];
2159	break
24261	"DJHFB");
5808	elementBits;
23471	pending
14873	FieldComparator.DoubleComparator(numHits,
46200	"â¶"
15259	super("FaultyIndexInput("
87	import
64505	(includeSpans.isPayloadAvailable())
49444	'^'
49274	q.add(currentQuery,
2261	org.apache.lucene.index.RandomIndexWriter;
31549	lower-precision
36832	Util.toBytesRef(arcAndState.chain,
25702	(==
56171	testequalscores
62290	testRewrite2()
11375	"\5\u04a3\1\u04a4\14\0\1\u0325\161\0\4\u04a5\2\0\1\u04a5"+
4149	topDocs;
28854	CharBlockPool(termsHash.docWriter);
58155	flexible
34820	offsetAtt;
2149	prime
21819	getFieldable(String
7492	this.termsWriter
33586	testFinalOffsetSpecialCase()
67621	(s.size()
25940	queueFull
6910	']'
4388	testFloatRange_4bit()
23274	testemptyindex
65519	(<=
66277	randboolquery
16801	origSegmentReader
8826	base.evaluate();
32749	buf.append(hex.toUpperCase());
3269	lastDocBase,
26301	encoded.arrayOffset(),
9680	"\1\0\21\25\1\0\1\25\2\0\3\25\1\0\1\25"+
26289	protect
66312	bytesUsed(postingsArray.size
64360	Double.doubleToLongBits(docCountPercent))
62179	IndexSearcher(multireader,
20656	LUCENE-3380
58672	LUCENE-3382
55480	"term2"};
39527	UnicodeUtil.UTF16Result();
31540	id=10;
23756	clock
66358	numPostings:
33466	maxVersion);
41332	fst.sizeInBytes());
50154	<code>Thread.interrupt()</code>
44098	,"AO",
51334	(added
32867	numPostings;
32123	levelSizeArray
2750	timoutException
58465	"Term
58277	byte[newLen];
61080	"\22\u02e2\1\u034e\12\u02e2\175\0\1\u034d\7\u02e2\1\u0558\22\u02e2"+
3197	lastDocBase;
6900	'['
1897	field.getBinaryLength();
35131	Term(FIELD,s),
7964	location
37026	//System.out.println("neg:
11500	"\15\0\1\u04ff\6\0\12\u04ff\1\u0500\13\0\1\u02cf\160\0"+
14929	numhits
51440	bufferedDeletesStream.prune(segmentInfos);
15079	IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);
66644	SorePoint.TEST;
41881	positiveintoutput
64900	(threadsAlive
66265	occur=BooleanClause.Occur.MUST;
6454	prior
5792	MASKS
32911	UTF16toUTF8
51185	addIndexesNoOptimize(Directory...
26524	notIndexedFieldNames
65430	"rord("+field+')';
5606	exhaustive
3811	CharTokenizer(Version
59547	"\4\0\2\25\3\67\10\0\1\65\2\25\2\0\1\67"+
9810	"\2\0\1\107\3\0\1\53\2\0\1\54\3\0\1\72"+
25725	estimateram
21094	ReentrantLock}
18112	topScorer)
27311	"\u003A\u0308\u0300",
8287	getmethod
60776	"\1\u0101\7\266\1\u0460\22\266\1\142\12\266\1\0\3\137"+
18346	h[2].score;
37535	hits[2].score,
61436	"\32\u02e2\1\u034e\6\u02e2\1\u0684\3\u02e2\175\0\1\u034d\1\u0685"+
37322	makeStopSet(List<?>
56530	(reqScorer
20786	common(T
30607	"\4\0\1\25\2\0\1\25\1\0\1\25\103\0\2\102"+
64357	(other.termCountCutoff
28516	testbinarydocument
36563	endAddress="
40985	mixed
25774	default_long_parser
7991	setUseUnmap(final
7316	application
3535	").append(merges.get(i).segString(dir));
59550	"\5\0\1\25\3\0\1\25\1\67\1\0\1\25\2\0"+
10785	"\150\0\1\376\1\u02a7\1\u02a8\1\264\1\u02a9\20\264\1\u02aa"+
37686	palyndrome
2800	print
68156	(!posSet.getAndSet(pos))
43903	concatenated
57050	<td>1.04</td>
58635	25.0);
44549	,"(f)",
62729	sortIDX=0;sortIDX<randomSortFields.length;sortIDX++)
7514	lastVectorFieldName
51589	merge.info.docCount
2945	multione
34995	(filterDocIdSet
10385	"\1\u0168\1\u0169\162\0\1\346\1\230\2\u016a\1\u016b\1\u016c"+
27719	"\u0061\u003A\u0308\u00AD",
41084	(cmo2
11746	East
38048	765878989,
38819	FieldCache.DEFAULT.getInts(sub0,
19022	URIs.
66529	nextPerField.add(postingsArray.textStarts[termID]);
28422	'e'
13423	zz_trans
43150	System.out.println("ids[i]
28952	parser==null
6299	Queries
60040	"\1\0\1\26\2\0\1\25\1\u0196\32\36\1\142\12\333"+
7170	maxprefixcoded
57646	diffs[size-1];
54500	nextSize
10602	"\1\140\12\36\1\352\17\36\1\141\12\142\1\65\1\136"+
5857	available
46548	RIGHT-POINTING
20396	declare
67488	rnd.nextInt(refreshed.maxDoc()))),
2926	acceptsDocsOutOfOrder()
50020	called");
7738	HashSet<String>(Arrays.asList(data));
37391	IndexFormatTooOldException(in,
24554	SortField.INT));
66867	terms.add(Character.toString(ch));
3055	CachedScorer
46865	breve
59282	"\1\102\32\0\1\103\21\0\1\104\2\0\1\105\21\0"+
61489	"\32\u02e2\1\u034e\5\u02e2\1\u06ac\4\u02e2\175\0\1\u034d\7\u02e2"+
32457	(TestTransactions.doFail
53877	CharacterUtils.newCharacterBuffer(1024);
53786	copy(Version.LUCENE_30,
22500	assertExternalClass(Class<?
67878	//System.out.println("graphTokenizer:
54973	release(searcher);
4352	testRandomTrieAndClassicRangeQuery(2);
28083	"\u0063\u0061\u006E\u0027\u0074",
28418	'd'
25115	wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
9625	"\2\uc4ab\2\uc54e\2\uc5f1\2\uc694\2\uc737\2\uc7da\2\uc87d\2\uc920"+
48645	reclaim
57900	nio's
38330	testlongextremevalues
30531	"\0\u2639\0\u26a0\0\u2707\0\u276e\0\u27d5\0\u283c\0\u28a3\0\u290a"+
14697	reversed.
28034	"\u0031\u002E\u2060\u0308\r",
59538	"\1\0\1\25\6\0\1\25\1\0\2\25\123\0\2\25"+
11236	"\6\0\12\u0432\1\u0433\175\0\4\u0434\2\0\1\u0434\15\0"+
25864	getslop
32615	CharBuffer.wrap(encoded2);
64949	org.apache.lucene.util.fst.FST.INPUT_TYPE;
24445	reversed)
27823	"\u0061\u0027\u2060\u0061\u2060"
33850	tpPos(pp2)
67113	#ClassicAnalyzer(Version,
59162	"\3\u242d\3\u24d0\3\u2573\3\u2616\3\u26b9\3\u275c\3\u27ff\3\u28a2"+
49429	'a'
4145	NumericRangeFilter<Integer>
5294	lexState;
25068	testemptystringvsnullstringsort
16077	created");
37941	zombie;
45419	"ï¼°"
9896	"\6\0\1\25\1\0\2\25\123\0\1\25\13\0\1\25"+
54127	restoreState(bufferedState);
52823	(C)
21695	doSearching(ExecutorService
56563	reqdoc
29267	tvfformat
29462	(System.getProperties().get(PROP_KEY1)
23137	"doc0",
9862	"\2\0\2\25\1\0\1\25\1\0\2\25\1\0\2\25"+
66727	<code>1..n</code>
46677	LESS-THAN
7625	lexState,
39636	lastfield
5279	lexState)
51891	Public
5347	(jjnewLexState[jjmatchedKind]
46399	,"9.",
4283	totalTermCountT
24056	"C"},//H,y
61478	"\1\u034d\32\u02e2\1\u034e\7\u02e2\1\u06a5\2\u02e2\175\0\1\u034d"+
56715	preCount
30704	"\1\65\56\0\1\65\3\0\1\65\2\0\1\65\3\0"+
4286	totalTermCountC
2407	(doc.doc
7070	lowerBound
59711	"\1\u0101\3\266\1\u0107\1\266\1\u011a\4\266\1\u0107\2\266"+
24741	hits.scoreDocs[0].doc);
58148	store!");
40420	setting,
23275	indexstorea
23276	indexstoreb
9290	lookahead
29717	"\1\0\1\25\17\0\1\25\3\0\1\25\3\0\1\25"+
7634	("\""
60988	"\33\0\12\u04c1\175\0\1\u04fc\33\0\12\u04fd\175\0\1\u04fc"+
55582	assertTrue(!r3.isCurrent());
25311	testasterisk
61459	"\1\u03c1\10\u02e2\175\0\1\u034d\13\u02e2\1\u0695\16\u02e2\1\u034e"+
56374	unstable
15842	(NO
28	information
39429	}));
36050	hits2[i].score,
3969	(dataLen
28402	builder.append(charArray,
60101	"\7\266\1\u0205\5\266\1\u0206\14\266\1\142\12\266\1\0"+
31248	DataInputStream
6958	NumericUtils.floatToSortableInt(Float.NEGATIVE_INFINITY);
27211	"\u3031\u0061\u002C",
46724	,"!?",
10163	"\2\0\1\25\1\140\3\36\2\352\2\36\2\352\1\36"+
12348	ub949
523	testindexreaderundeleteall
28382	utf16[]
67217	port\n");
32160	recycle
15128	assertTrue("bytes
805	MockTokenizer
27081	"\n\u0308\n",
21361	components,
12749	ub93f
52357	numExpectedPayloads,
43297	fieldSelections.put(field,
19233	Ï¿ÏÏ?
31591	ramDir
45986	"ï¼·"
49833	conj_none
13150	ub935
3262	other.acceptsDocsOutOfOrder();
29394	startindex
500	testdeletereaderwriterconflictnofullmerge
61639	ub92b
25541	ReaderFields
14531	zzstartread
42161	sb.append(Integer.toHexString(ints[i]));
25578	ReaderField>
25349	"quick",
22693	(upperVal
26704	<code>n</code>
47941	terminates
59742	"\1\137\1\164\3\0\2\137\151\0\4\u011f\2\0\1\u011f"+
35051	filterdoc
46225	"â·"
50642	mergeScheduler);
62664	SerialCounter();
15024	randomphrasequery
58923	IndexOptions.DOCS_AND_FREQS_AND_POSITIONS
40138	terminated
4463	nodocs
39369	inplaceand
33846	tpPos(pp);
67802	csq's
60826	"\1\u0486\15\u02e2\1\u03c1\14\u02e2\1\u034e\12\u02e2\175\0\1\u0486"+
24007	"99999999","40.00002343",
21858	byte[][]
15289	answers
63154	terms.size()
48557	perThread.endConsumer.addField(this,
10182	"\1\172\1\136\4\0\2\136\2\0\1\47\1\0\1\50"+
26378	0x7FFF);
30319	TwoPhaseCommitImpl.commitCalled
27670	"\u0061\u2060\u0308\u0061\u2060"
65908	{"b",
56010	csq);
50625	NullPointerException("MergePolicy
6031	t.termLength());
25481	identityhashCode
40272	inheritdoc
46248	"â¸"
21070	'aaa'
36564	endAddress);
53508	ReaderUtil.subIndex(n,
65078	lastInput);
37927	(K)
4195	EMPTY_DOCIDSET
24819	docIDToID
37985	assertEquals("forward
31325	!oldName.startsWith("22."))
60379	"\1\u030b\5\232\1\352\12\232\175\0\1\351\24\232\1\u030c"+
27825	"\u0061\u0027\u2060\u0308\u0061\u2060"
10472	"\150\0\1\376\10\264\1\u0103\21\264\1\141\12\264\1\0"+
63191	(It
14803	buffer.append("<???:
5824	WRITE_MASKS
4527	testfloatrange_8bit
51246	((FieldInfos)
3559	passing
54838	(ideally,
64677	isEnd
15297	answer;
52392	populatedocs
3956	'em
2524	payloadanalyzer
66864	'z';
49463	org.apache.lucene.analysis.SimpleAnalyzer());
9643	"\3\u205b\3\u20fe\3\u21a1\3\u2244\3\u22e7\3\u238a\3\u242d\3\u24d0"+
59639	"\32\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
20386	Sets,
35584	pop_array
65791	answer)
26464	middleshift
39061	map.put(NOT_IN_MAP.toCharArray(),
1339	));
30823	Java4CharacterUtils()
53920	testcharacterutils
32379	searcherthread
50249	bufferedDeletesStream;
28377	testUTF16InUTF8Order()
7876	fragmented
66750	IndexReader.maxDoc()
54917	indexingGen.getAndIncrement();
56587	now="
41070	isLeaf="
39072	map.keySet().clear();
23221	customSimilarity
54177	'z')
40251	normscache
23056	hits.length);
65715	this.commitsToDelete
57114	bit;
51352	#commit(Map)
15359	docs_only
25280	matchNone.length;
35729	n+=1;
58643	String(doc.get("docid")));
41791	//System.out.println("SAVE
23963	queryM;
26225	bit.
53309	_prefix;
43502	BitVector(n);
8792	JUnit
67371	subReaders2.length;
24302	queryM,
38458	assertTrue(allFieldNames.contains("text2"));
61456	"\6\u02e2\1\u0692\23\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
471	opened
67326	TestIndexReader.assertIndexEquals(index1,
27287	"\u003A\u0308\u0001",
10273	"\1\64\235\0\2\172\12\0\1\172\210\0\2\172\6\0"+
42740	loading
53306	_prefix,
35709	n+=2;
57534	dataOutput.writeVInt(termInfo.docFreq);
66551	newMask
25647	(ReaderField)
63085	org.junit.runner.JUnitCore
2519	testpayloadtermquery
7055	(currentTerm
40773	term.ints[term.offset+i];
9277	prepended
22323	a[i];
15101	doc.getFieldable(DocHelper.LAZY_FIELD_KEY);
62603	search(c1));
20890	getpositionincrementgap
42768	<code>Token's</code>
54431	buffer.append(details[i].toHtml());
17510	doc223.get("f2"));
49119	#setAllowLeadingWildcard(boolean)
50512	user-specified
9589	"\2\u0d4b\2\u0dee\2\u0e91\2\u0f34\2\u0fd7\2\u107a\2\u111d\2\u11c0"+
1358	throwable
62694	content[random.nextInt(content.length)],
35706	n+=4;
46023	"ï¼¸"
64492	excludeSpans.doc()
6238	boosts
51458	(!segmentInfos.contains(info))
24539	(queryY,
11246	"\226\0\1\u0331\13\0\1\u02cf\214\0\1\u043a\2\u043b\1\u043a"+
36246	bit)
57080	bit,
49043	hasNewAPI
57578	compareTo(Term
59719	"\1\0\1\26\2\0\1\25\1\u011b\32\36\1\142\12\331"+
4400	SortField(field,
27460	"\u0030\u0061\u2060"
39976	result.length,
42660	MyIndexWriter
42171	bint
66829	//termFreqs
33135	src.addAttribute(OffsetAttribute.class)
23047	searchers[0]
53742	note</a>
32885	tvf.writeByte(bits);
34678	currentscore
40199	(MultiTermEnum)termEnum;
24536	(queryX,
1852	exists?="
42502	byte[size]);
8340	releases
27213	"\u3031\u0031\u003A",
36868	ArcAndState<T>(new
51297	opened:
39693	opened;
23049	searchers[1]
24588	Sort()
28948	this.parser.getClass()
39888	IllegalArgumentException("a
54096	stopSet0);
50448	opened)
17183	opened,
35698	ntz3(long
39923	opened.
42393	portion,
37251	nodearccount
3161	chunkUpto++;
8929	Each
63077	compile-test
55842	dirreader
66778	Sort))
38926	bin1
22055	reconstructed
39267	this.positions.equals(other.positions);
31577	oldSingleSegmentNames.length);
20983	released
2746	myHc.setSlowDown(SLOW_DOWN);
18061	ConstantScoreQuery(Filter
38144	Iterable<Integer>
40951	non-exist
1898	offset
30382	TwoPhaseCommitTool.execute(tpcs);
26028	MultiComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>
29607	"\1\0\4\132\3\133\13\0\22\132\3\133\13\0\22\132\2\133\14\0"+
3819	AttributeSource
26534	notIndexedFieldNames.add(name);
40393	release.
41954	wordsfilein
23151	indexSearcher2});
17937	farsiIndex
26562	termDocs
67041	"yy";
51371	deleter.checkpoint(pendingCommit,
56659	ITER-1)
8028	JVMs
52209	bind
15707	result.length;
5680	conditionally
65590	re-list
21487	testReadPastEOF()
27292	"\u003A\u000B",
8999	bytes.length
60484	"\1\352\11\232\1\u0366\175\0\1\351\24\232\1\u0367\5\232"+
37763	expectedcount
65656	incRef(fileName);
41900	minlong
67572	assertTrue(((SegmentReader)
59022	mmapDir.setMaxChunkSize(chunkSize);
11626	"\1\u0559\6\0\12\u055a\1\u0542\13\0\1\u0325\160\0\1\u0386"+
25890	refresh
908	failure.setDoFail();
43334	BITS2VINTLIST_SIZE
1095	thrown.add(null);
14730	")");
63874	"Tokenizer",
64367	constantfilterrewrite
37207	destpos
39446	testsimpleskip
9864	"\2\0\2\25\1\0\1\25\1\0\1\25\1\0\4\25"+
40756	(!(outputs
25762	vitoitemsets
42233	att2.endOffset());
56311	(--maxDepth
21375	demo_FSIndexInputBug(dir,
7026	next();
25258	"*hij**",
38277	i=min;
25609	badChildren.get(parent);
1555	indexPosition);
9491	"\0\u1f33\0\u0518\0\u1fd6\0\u2079\0\u211c\0\u21bf\0\u2262\0\u2305"+
46673	"â°"
52241	threadstate
21416	two);
32414	fb.append("
25997	Math.max
41406	System.err.println("Too
57857	<font
50357	segmentInfos";
29824	"\1\35\1\0\1\36\1\0\1\37\1\0\1\40\1\0"+
415	lucene
43439	intense
23958	queryY;
56209	d1.add(newField("default","one
12959	u3f98
34481	opens,
49290	pq.setSlop(phraseSlop);
18768	"ÎºÎ¬ÏÎ¹",
50050	potentially
53869	java5.codePointAt(highSurrogateAt3,
12347	ub8a6
46454	,"13.",
59759	"\1\142\12\143\1\u0142\1\137\1\144\1\137\1\0\1\137"+
13360	u3f8e
34942	filtered,
57953	filtered.
18995	luceneResourcesWikiPage,
62668	AtomicCounter
17726	boost)
2055	arc.label;
25853	boost,
17689	boost.
56962	StandardTokenizer.ACRONYM_DEP;
17277	prox_extension
18957	luceneResourcesWikiPage;
18696	"à¦à¦à¦¨",
28506	CompressionTools.compress(binaryValCompressed.getBytes()));
23127	indexWriter.close();
34758	boost:
62873	StandardTokenizer.ACRONYM_DEP)
21783	boost;
28473	indexoutofboundsexception
65142	undecided
34866	DumbQueryWrapper
34699	QueryParser's
3733	org.apache.lucene.util.CharacterUtils;
36622	arc.isLast();
24259	SortField.STRING),
3996	normalize(char).");
27415	"\u0027\u0308\u0031\u002C",
23877	trackers.add(tracker);
2843	resolution
61452	"\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\1\u02e2\1\u068f"+
52530	assertEquals("field3:lazy",
1739	bits
11900	wellformed
36670	arc.isLast()!
24233	queryX,
41509	String.format("%07d",
16433	getDeletionPolicy().snapshot("$SNAPSHOTS_DOC$");
10664	"\1\u0122\214\0\1\u0223\2\u0224\1\u0223\5\u0224\1\u0225\175\0"+
36448	doFixedArray
50484	segments.</p>
65457	actively
32422	front,
21870	non-binary
3182	front.
2701	doTestSearch()
17479	queryTest(bq1);
51964	setFlushPending(String
66300	docInverterPerField.fieldState;
23957	queryX;
29124	readTvfPointers(fieldCount);
45928	"ï¼¶"
33436	(prepare
31629	testcreatesinglesegmentnocfs
9789	"\1\0\1\70\2\0\1\71\3\0\1\53\2\0\1\54"+
61404	"\1\u0488\20\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
33095	assertNotSame("TypeAttribute
24235	queryY,
35694	n+=8;
32543	assertEquals("Round
23919	mis-use:
2947	blueberry
28523	stringstored
22916	Float.floatToRawIntBits(getBoost());
14868	(Float)
11639	"\6\0\12\u055e\1\u0534\13\0\1\u02cf\160\0\1\u0332\4\u055e"+
505	setmergepolicy
65941	assertEquals("((b:one
5029	((0xfbfffcf8ffffd9ffL
64724	"aa1"));
36166	vInt.
54556	LUCENE-3054
4577	documentsWriter)
18667	à¦¸à¦à¦¸à§à¦¥à¦¾)à¥¤
59605	"\1\67\1\0\1\25\2\0\1\25\1\141\1\355\2\36"+
66774	Representation
61369	"\1\u0659\1\u065b\1\u065a\2\u0659\2\u065a\1\u0659\1\u065a\1\u0659"+
23112	initIndex(Random
54331	PayloadAttributeImpl(Payload
10348	"\1\u0141\3\0\1\136\4\0\2\136\150\0\1\u014e\24\264"+
32853	perThread.doc.perDocTvf.getFilePointer();
40484	usecase
20218	(ArrayList<BooleanClause>)
11363	"\1\u010a\30\264\1\141\12\264\1\0\3\136\1\0\2\136"+
28374	scorervisitor
18933	"\"QUOTED\"
9631	"\2\ue33b\2\ue3de\2\ue481\2\ue524\2\ue5c7\2\ue66a\2\ue70d\2\ue7b0"+
64134	utf8Str.substring(1),
7296	TopDocs(totalHits,
32165	newlevel
11973	zzRefill();
35307	proxskip
11533	"\1\u0515\6\0\12\u0515\1\u04cf\13\0\1\u0325\160\0\1\u0386"+
56436	w.forceMerge(targetCount);
62731	sortFields.get(random.nextInt(sortFields.size()));
42759	source.startOffset(),
23007	"doc1",
14688	<code>type</code>
44403	"áºº"
11008	"\32\264\1\141\3\264\1\u037b\6\264\1\0\3\136\1\0"+
60953	"\1\352\12\232\175\0\1\351\1\u04e0\31\232\1\352\12\232"+
38079	i<longVals.length;
26079	create(Sort
50205	BufferedIndexInputs
43221	segTermDocs.freq();
9247	frozenbuffereddeletes
4922	Debug
50090	stripsegmentname
55783	threads[i].setDaemon(true);
15789	output.writeInt(NO);
10341	"\1\u0103\12\264\1\141\12\264\1\u014f\3\136\1\0\2\136"+
42423	fail("Byte
58837	correctly",
42534	testacrossfields
20348	assertFalse(cc.isCached());
4827	keeponlylastcommitdeletionpolicy
15525	this.version
25003	gicea
9751	"\1\107\3\0\1\53\2\0\1\54\3\0\1\72\7\0"+
62848	init(matchVersion);
35755	x0f0f0f0f0f0f0f0fl
50343	clear(List<SegmentInfo>
12156	u3f09
39747	writer.getKeepFullyDeletedSegments())
10603	"\1\136\4\0\2\136\150\0\1\376\11\264\1\u01e7\20\264"+
51405	segmentInfos);
55021	indexRandom(1,
40823	UpToTwoPositiveIntOutputs.TwoLongs
38527	assertTrue(b1.isBinary());
17312	QueryWrapperFilter
56619	this.numToKeep
65352	gettotstatecount
17534	"f3",
3260	bytesPerDoc);
25478	MapOfSet
45739	,"(t)",
57488	BytesRef.getUTF8SortedAsUTF16Comparator();
65008	Mike
46294	"âº"
32970	newInstance(int
37430	assertTrue(freq[i]
11848	yyclose()
34271	IndexWriterConfig(Version
65223	fst.outputs.subtract(output,
60254	"\7\232\1\u0299\22\232\1\352\3\232\1\u029a\6\232\175\0"+
38602	assertFalse(IndexReader.indexExists(dir));
59406	"\3\27\1\0\1\27\2\0\4\27\2\0\1\27\247\0"+
26107	add(int
66903	this.outputs2
17346	results.totalHits);
24449	MyFieldComparatorSource()));
31105	indexdoc
62441	coordFactors
60081	"\4\266\1\u01f1\5\266\1\0\3\137\1\0\2\137\1\140"+
66902	this.outputs1
37743	results\n");
4448	Integer
60895	"\12\u04b7\1\u046d\175\0\4\u04b8\2\0\1\u04b8\15\0\1\u04b8"+
48222	"doc1
11920	errorCode)
21733	fixedSearcher;
38517	Field("bin1",
59108	"\2\u11c0\2\u1263\2\u1306\2\u13a9\2\u144c\2\u14ef\2\u1592\2\u1635"+
49603	(goop1.kind
25670	getCacheEntries()
56398	writeVInt(int
23447	.setMaxBufferedDocs(1000)
57634	offsets[];
61467	"\1\u034d\3\u02e2\1\u069a\26\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
19268	¿
57163	startmask;
65439	Integer.toString(intVal(doc));
50867	OutOfMemoryError.<p/>
15338	assertSame(typeAnswers[ids[docID]],
21736	fixedSearcher)
52339	"doc"
11779	UAX29URLEmailTokenizer.URL;
12555	u3db9
47966	searchFiltered(writer,
4119	searcher=newSearcher(reader);
48320	docspansordered
31371	Integer.parseInt(name.substring(0,
7943	MMapDirectory
63111	hours
49434	<code>\</code>.
29495	Assert.assertTrue(runClasses.getFailures().get(0).getMessage().contains("Will
12956	u3daf
12154	u3dc3
38092	assertTrue(Double.isNaN(nan));
10506	"\1\347\12\230\175\0\1\u01a3\10\230\1\u012f\21\230\1\347"+
32060	shiftfield
10753	"\11\230\1\u027c\20\230\1\347\12\230\175\0\1\346\3\230"+
67546	sb.append("a");
21153	linearly,
39605	lastTermBytes[start])
30512	Thai,
30459	segmentmergequeue
38631	"docs
41497	MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));
2571	remove
18273	d3.add(newField("id",
380	assertTrue(r.isDeleted(0));
17258	segmentcorereaders
59609	"\2\355\1\36\10\355\1\142\12\143\1\66\1\137\1\144"+
17837	Unit
34356	getTermIndexInterval()
15594	getUseCompoundFile();
59216	"\1\37\3\36\1\40\12\36\1\41\4\36\1\35\1\42"+
51452	ramSizeInBytes()
15354	getomitnorms
7628	errorAfter,
57040	<td>3.36</td>
64989	Builder(FST.INPUT_TYPE
36572	nodeAddress[nodeCount]
65247	root.isFinal="
64649	(toCopy
18942	"íê¸ìëë¤"});
50511	UNLIMITED,
31036	siMerge2);
28957	valuesource
65916	MultiFieldQueryParser(TEST_VERSION_CURRENT,
58004	allocCount;
7569	errorCode;
60403	"\4\0\2\137\150\0\1\u0101\32\266\1\142\1\u0322\11\266"+
13357	u3da5
15406	fileexists
65762	Term("f",Character.toString((char)('A'+i)));
35773	ntz3
11595	"\1\u0325\160\0\1\u0386\4\u0546\2\0\1\u0546\15\0\1\u0546"+
28753	floor(df
35770	ntz2
33303	(Iterator
6772	30-40
24543	remote
57082	long[index/64],
54371	tok);
63656	x7541
54640	defers
56150	assertEquals("max,max,T,T,c",
9448	"\1\7\1\10\1\1\3\2\3\3\3\1\15\0\1\2"+
63659	x7543
63657	x7542
64545	BufferedIndexInput(int
29458	here.");
20579	converts
61510	uax29urlemailtokenizerimpl
65511	segmentInfos.getGeneration();
57132	get2(int
6508	org.apache.lucene.index.TermEnum;
10373	"\1\324\1\136\12\330\1\0\3\136\1\0\2\136\1\137"+
65530	segmentInfos.getGeneration())
52468	sb.append(",precisionStep=").append(precisionStep).append(')');
10466	"\1\u018d\163\0\1\135\1\273\1\274\1\275\1\276\1\277"+
58028	initTermVectorsWriter()
58040	Append
39138	List<Term[]>
2091	table[pos];
43979	"áº°"
40316	int[32];
15417	indexdir
28553	suite
65969	bar\"
34049	(rptTerms.containsKey(t))
30670	"\1\53\2\0\1\53\3\0\1\53\5\0\1\53\7\0"+
60840	"\175\0\1\u0486\23\u02e2\1\u0428\6\u02e2\1\u034e\12\u02e2\175\0"+
55147	termDocs1.seek
24473	"JZI");
21169	misses
41875	inputoutput
22343	exclusive!):
63650	x7521
27716	"\u0061\u003A\u005F",
41490	42));
3160	cachedScores.get(chunkUpto);
41151	getRandomString();
36618	Undo
15801	addIfExists(Set<String>
63653	x7532
57694	TestIndexWriterCommit
63652	x7531
33223	typeattributeimpl
43878	$first
23270	+15),
27579	"\u00AD\u0308\u0031\u0027",
58828	b[j]);
17310	termQuery
39325	(buffers.length*1.5)][];
58721	testTermDocPerf()
43864	$desc
52755	s.doc(id);
30705	"\1\65\5\0\1\65\7\0\1\65\4\0\2\65\3\0"+
31578	names.addAll(Arrays.asList(oldNames));
50466	infoStream
10035	"\2\0\1\25\2\0\2\25\1\0\1\25\1\0\2\25"+
56842	"\65\12\3\0\1\12\22\0\1\12\7\0\12\12\4\0\12\2\25\0"+
2147	islast
24336	(!(cmp
62776	hitIDX=0;hitIDX<mergedHits.scoreDocs.length;hitIDX++)
18087	ConstantWeight(Searcher
17417	getTermFrequencies()
14588	yybegin
27279	"\u0041\u0308\u0031"
39076	3));
54940	waitingListeners)
67643	previtereationdoc
7804	num_docs
54998	getcurrentsearchinggen
15300	random.nextFloat();
37892	newConcurrentHashMap()
27249	"\u0041\u0308\u0030"
20804	outputToString(T
60748	"\175\0\1\351\32\232\1\352\5\232\1\u044a\4\232\175\0"+
2554	boostingfunctermquery2
25805	this.slop
56536	reqScorer.doc()
22325	a[j];
24862	random.nextFloat(),
25586	readerFields)
42031	this.slot
12056	zz_rowmap
43375	Biggest
17068	(offsets
26208	getsize
63668	x7632
63667	x7631
8842	after,
25519	valMismatchKeys.add(rf);
65593	segmentName)
5420	readchar
64591	after;
65055	frontier[0].inputCount;
31444	surrogates
31297	targetDir.close();
15057	FieldInfos();
60511	"\3\0\1\137\4\0\2\137\150\0\1\u0101\17\266\1\u0386"+
53710	after'
63665	x7621
8224	curBufIndex
26782	getmatch
19001	randomTextWithEmails.length()
42562	NumericTokenStream.TOKEN_TYPE_LOWER_PREC,
23051	multiSearcher
35205	curStorePayloads;
38400	r.flush(commitUserData);
48065	lockFactory.setLockPrefix(this.getLockID());
42384	generateRandomData(2000);
35305	docskip
11356	"\1\347\6\230\1\u0490\3\230\175\0\1\346\1\u0491\31\230"+
18270	"albino"));
63178	term_count
19957	Boolean.TRUE)
6781	step).
50305	#getReader},
52462	IllegalArgumentException("valSize
36201	ord/address
42152	System.arraycopy(other.ints,
25908	careful
29300	isignoringoffsets
33163	captured
18072	ConstantScoreQuery(rewritten);
52222	segupto
12558	u3fa2
34315	#setIndexDeletionPolicy(IndexDeletionPolicy)}
28487	Field.Index.NO,
2098	table[pos]
29614	"\12\134\6\0\12\134\6\0\16\142\122\0\5\133\57\132\21\133\7\132"+
20982	LockReleaseFailedException(String
30808	surrogate,
7437	BugReproTokenStream()));
33914	collide
49841	lowercaseexpandedterms
30799	surrogate:
16049	indexerThread2.start();
35818	TermVector.YES));
48601	readerValue;
18394	doc0.equals("d2")
22820	-365038026)
56789	(expectedCount
11222	"\12\u042a\1\u03da\13\0\1\u0325\160\0\1\u0386\4\u0429\2\0"+
38148	OpenBitSet(upper-lower+1)
23815	Another
52370	IndexReader[dirs.length];
65217	wordSuffix
9703	"\1\0\1\25\1\0\1\25\2\0\1\25\1\0\1\25"+
53474	this.maxDoc
36818	ArcAndState<T>(getFirstArc(new
22824	includesUpper()
17212	synchronized(coreClosedListeners)
58898	indexed:
12157	u3fac
37390	minVersion)
35699	Delight,
33460	minVersion,
48571	indexed.
51288	info.dir.copy(directory,
24136	("long",
55571	Integer.toString(8000),
61064	"\1\u0546\15\0\1\u0546\6\0\1\u0547\2\u0548\1\u0547\5\u0548"+
23657	testsimplecase
54890	#addWaitingListener}.
21796	indexed,
35193	setnumoverlap
67122	setreplaceinvalidacronym
65310	arcs[numArcs-1];
38115	int[vals.length];
15579	input.readByte();
52042	maybemerge
17918	TermRangeFilter("rand",
33491	MappingCharFilter(
26834	buffers.length);
26618	testsegmentreader
25970	transient:
10026	"\21\0\1\344\2\0\1\345\42\0\1\172\1\64\6\0"+
50195	#setMaxFieldLength(int)}.
20998	TermQuery(searchTerm),
66997	ObjectOutput
32033	WeakReferences).
24541	(queryA,
51109	called).
51558	called),
56757	TermQuery(searchTerm);
34760	foo\"^2").toString());
62758	subSearcher.search(w,
7587	'\n':
4754	conf.setReaderTermsIndexDivisor(0);
3799	fully
49725	generateParseException();
53271	singletonShare
23910	freed.
3773	#normalize(int)}.
35952	"D"},
8073	"\")",
58069	fieldPointers
17996	positives'
52741	hits.doc(i).get(FIELD_ID)
39518	utf8Result.length,
40512	Implementing
29199	offsets[j]
43516	testClear()
24611	testSortWithScoreNoMaxScoreTrackingMulti()
32328	System.out.println(hits.length()
32910	utf8Result.length;
59403	"\2\27\12\0\1\27\210\0\2\27\6\0\1\27\153\0"+
36090	testchainedfilters
3061	accessing
65858	sets=randBitSets(atLeast(1000),
3480	msec,
38535	b1.getBinaryOffset()]);
44065	"áº·"
21892	DataInput
53502	getStarts()
56684	msec)
32593	testEncodedSortabilityNIO()
57826	r.getCommitUserData().size());
37353	headers.
39681	stale;
26631	storetermvector
35145	{2,3});
11118	"\12\u03d7\1\u03d8\175\0\4\u03d9\2\0\1\u03d9\15\0\1\u03d9"+
6820	CONSTANT_SCORE_FILTER
52003	full:
40842	dir.deleteFile("fst.bin");
24814	this.random
492	null
31302	oldNames[i]);
21011	full;
15369	islazy
49324	cal.set(Calendar.MILLISECOND,
42932	reflector.reflect(FlagsAttribute.class,
5591	SmallFloat.floatToByte315(5.8123817E-10f));
59845	"\1\302\1\303\1\304\1\305\1\306\1\307\1\310\1\311"+
7901	Windows,
58002	(TermVectorsTermsWriterPerThread)
7917	Windows)
15017	testincreasingsloppiness3
40101	currentGen)
65940	mfqp.parse("one^2
66013	mfqp.parse("one^3
30360	wrapper.prepareCommit(new
25426	DirectoryReader)
39455	TermInfo();
44401	"áº¸"
39607	output.writeVInt(start);
2662	"blueberry
38933	testwritingnorms
60850	"\1\u0496\15\0\1\u0496\6\0\12\u0499\1\u0497\13\0\1\u0126"+
44575	"Ä "
37942	((zombie
21009	full,
47988	HashMap<IndexReader,Integer>();
64446	compresses
16593	full.
4260	num;
48592	fieldState.length++;
50872	full)
2143	compilednode
66988	i<numThreads;
3795	anymore
43268	assertTrue(tdocs.skipTo(75));
818	w.addDocument(crashDoc,
24164	num,
20990	START_COUNT
1753	compressed
24182	num)
61173	"\1\u05ad\175\0\1\351\26\232\1\u016f\3\232\1\352\12\232"+
22654	fcsi.binarySearchLookup(upperVal);
36141	nuke
38031	prefixVal=NumericUtils.prefixCodedToLong(NumericUtils.longToPrefixCoded(vals[i],
24166	num2
29884	"\5\0\1\25\2\34\5\0\1\25\2\0\1\25\1\34"+
12349	ub9ec
16730	worked",
25160	"M*tal*"));
17112	coreRef
24653	"ABCDEFGHIJ"
48472	inverteddocendconsumerperthread
38399	r.deleteDocument(5);
27229	"\u0041\u0308\u000B",
57790	"second");
51225	dsNames,
32545	decode/decode
17022	offsets[i]
44668	"Ä¥"
64786	BytesRef[]
64702	cp.unregister(cp.lookup("Standard"));
57016	<h3>Performance
35046	getfilteredscorer
63014	RANGEIN_START
36249	growable
64709	docFreq(IndexReader
22855	includeslower
50570	(zero
1455	writebyte
56396	(offset0
12750	ub9e2
29758	"\1\32\1\0\1\32\3\0\1\32\1\0\3\32\1\0"+
13151	ub9d8
67834	testMergeFactor()
22462	well-defined
30414	PorterStemFilter(t));
61640	ub9ce
14551	breaking
3340	nextlength
31219	(IndexReader
6670	500,000
15783	output.writeInt(docStoreOffset);
56188	super(termEnum);
43488	testspannearinorderversusoutoforder
23503	above)
7441	above,
53443	trTopDocs
37878	weak!
1618	terms.",
29019	above.
8628	addState(AttributeSource.State
55433	//System.out.println("Document:
60983	"\12\u04fb\1\u04bb\13\0\1\u033c\160\0\1\u03a1\4\u04fa\2\0"+
62583	requiredcountingsumscorer
64507	includeSpans.isPayloadAvailable();
57294	LUCENE-3197
68003	newStringReader(s)));
34598	setFreqCurrentDoc()
64693	actualTerm);
5617	assertEquals(b1,b2);
52194	startcommitmerge
16957	getsequentialsubreaders
16378	charfilter2
54779	LOCK_HELD.remove(path.getCanonicalPath());
16375	charfilter1
456	content
48360	produced.
51859	segmentInfos.getGeneration()
51298	syncs
39997	subReaders[0].termPositions();
59385	"\2\25\2\26\4\0\2\25\3\26\10\0\1\26\2\25"+
57789	"second"
10558	"\1\323\1\324\1\136\1\u01d0\2\u01d1\1\u01d0\5\u01d1\1\u01d2"+
51476	message("commitMergeDeletes
68123	#getSentinelObject()
1520	tiiFileLength
67800	appendnull
41857	Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,
26965	"\u0001\u0308\u003A",
11602	"\15\0\1\u0548\6\0\1\u054a\1\u054c\1\u054b\2\u054a\2\u054b"+
8305	chunksize
61048	"\4\u053a\2\0\1\u053a\15\0\1\u053a\6\0\12\u053c\1\u053b"+
67998	testLetterAscii()
16715	fail("readOnlyReader
10984	"\1\376\25\264\1\u036d\4\264\1\141\12\264\1\0\3\136"+
33815	(!advancePP(pp))
28569	readChar()
43430	org.apache.lucene.search.SearchEquivalenceTestBase;
57161	(startmask
36133	INPUT_TYPE
57668	charfilters
8113	nrBuffers="
21846	NO_FIELDABLES;
49220	(conj
30650	"\1\0\1\52\2\0\2\52\1\0\3\52\1\0\1\52"+
49913	hextoint
16217	wrapping
7759	'#'
32336	setLockPrefix(String
3769	<i>char</i>
68143	pos.pos
26680	Applications
16392	psdp.close();
64785	validTermStrings)
34550	org.apache.lucene.index.TermPositions;
50138	name="OOME"></a><p><b>NOTE</b>:
1718	indexes;
24998	parallelsearcher
31410	indexes:
53499	starts[searchables.length]
50551	conf.getReaderPooling();
34312	delPolicy)
29664	"\5\116\26\56\4\23\1\105\2\104\4\122\1\104\2\122\3\76\33\122"+
51555	addMergeException(merge);
3859	normalizeMethod
55072	IndexingThread
21026	6.0)
17426	indexes.
15496	indexes,
36079	testfilteredquery
8656	consumealltokens
14910	intparser
34248	delPolicy;
16839	(copy
66430	"interned"
37674	testslop1
49440	'!'
21837	NO_FIELDS;
3075	UnsupportedOperationException();
2525	payloadfilter
36383	out.writeBytes(emptyOutputBytes,
25012	testinternationalmultisearchersort
24519	Locale.FRANCE));
16091	startcommit
5826	elementPosMask
9790	"\3\0\1\72\7\0\1\56\2\0\1\57\4\0\1\73"+
23016	"doc2",
8899	isCacheable()
47968	stateful
51827	deleter.exists(fileName):
48999	#setEnablePositionIncrements}
59298	"\1\67\1\0\1\34\2\0\1\34\1\66\32\25\1\0"+
9556	"\1\u6533\1\u65d6\1\u6679\1\u671c\1\u67bf\1\u6862\1\u6905\1\u69a8"+
4256	s.close();
5251	0x7ffffff01L,
66086	+(f2:blo
21415	two",
67619	hit");
39435	this.input.readByte();
61101	"\10\232\1\u0570\1\232\175\0\1\351\1\232\1\u0176\30\232"+
64386	java.util.zip.Deflater;
59624	"\14\0\1\62\4\0\1\63\2\0\1\64\41\0\2\25"+
8105	((length
10212	"\12\264\1\0\3\136\1\0\2\136\1\137\3\136\3\0"+
20455	expectedOrder
53190	noninfringement
3344	lastdocbase
9474	packed.charAt(i++);
43842	'';
11286	"\3\0\1\136\4\0\2\136\150\0\1\376\15\264\1\307"+
43985	"áº¶"
51691	anyChanges
16868	orig.setNorm(1,
9420	"\1\110\2\107\2\110\2\107\1\110\3\24\1\2\2\24\12\64\1\74"+
29908	"\14\0\1\160\16\0\1\161\2\0\1\162\42\0\1\116"+
26442	initialShift;
17385	testbasic
36701	(code
49441	'('
26254	initialShift,
14885	reverse);
31721	Alternatively
2651	TimerThread(counter);
55963	gc'able
36435	appending
40726	UpToTwoPositiveIntOutputs
6284	inclusive),
50991	format).
7654	flavors
35643	','.join([
48736	//Must
5772	shifting
4722	assertEquals(SerialMergeScheduler.class,
6286	inclusive);
65060	compileNode(UnCompiledNode<T>
30336	failures
7121	rangequeries
11478	"\3\0\1\136\4\0\2\136\150\0\1\376\24\264\1\u04ef"+
64238	Type#SHORT}
659	testPoint(String
7428	Attempt
32250	obtaining
37977	TestNumericUtils
35335	stream.addAttribute(PositionIncrementAttribute.class);
61405	"\2\u02e2\1\u066f\7\u02e2\175\0\1\u034d\12\u02e2\1\u0670\17\u02e2"+
20708	IllegalArgumentException();
18430	printHits(String
68094	%d.
39089	dorandom
36610	while(!arc.isLast())
41165	60000),
42657	Field(NO_PAYLOAD_FIELD,
4405	last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));
66841	tmpfreqs
39934	segmentInfos.size()
62684	subSearcher
16562	big.
15492	with,
12958	u3ef5
66107	{"body"},
43309	with.
63674	x7643
49703	token_source.ReInit(stream);
49438	'+'
63672	x7642
63671	x7641
57098	*not*
370	w.close();
37291	Set)}
2374	testQuery()
13359	u3eeb
27057	"\r\u0308\u0300",
51534	dropSegment
22593	properties
8133	bufSize;
65072	freezeTail(int
22777	NumericUtils.doubleToSortableLong(f);
24420	int[numHits];
16480	assertsnapshotexists
63682	x7653
63680	x7652
53084	Valid
19032	','
63686	x7654
18980	"UTF-8"));
50911	perhaps
20274	witer
63679	x7651
12557	u3eff
3499	');
37540	is\"");
67495	readers.get(rnd.nextInt(numReaders));
6145	put(PayloadAttribute.class.getName()
22250	shrink(int[]
53791	CharArraySet(CharArrayMap.copy(source.map.matchVersion,
52954	31*hash
995	FailOnlyInSync
8041	parameter
10122	"\1\36\1\141\12\142\1\65\1\136\1\143\1\136\1\0"+
49442	')'
28716	PrefixFilter
22563	(Modifier.isStatic(f.getModifiers()))
60295	"\1\u0101\21\266\1\u02c9\6\266\1\u02ca\1\266\1\142\12\266"+
16583	ArrayIndexOutOfBoundsException}
35804	(caused
51856	sync:
33494	'x',
67902	sb.length();
65291	arcs[numArcs-1].label
25408	keywordattr
51560	rollbackTransaction
29772	"\1\25\1\0\1\35\1\0\1\36\1\0\1\37\1\0"+
3648	origin
33806	OpenBitSet
64772	while(seen.size()
58712	System.out.println("milliseconds
30864	sync,
60075	"\1\u0145\15\137\1\u0145\6\137\12\u0145\1\0\3\137\1\0"+
28259	summed
56500	theTop
52669	context
21657	'*'
33305	(IndexCommit)
47981	fail(e.getMessage());
999	didFail
17635	testcloseablethreadlocal
59233	"\4\25\1\0\2\25\1\0\5\25\1\0\6\25\1\0"+
43403	getByteSize()
48889	(field.equals(testFields[0]))
36939	topNodeMap.put(n.node,
16447	@Test(expected=IllegalStateException.class)
23637	segment",
35612	B[i+7]);
39290	(!(termArray1
15386	username
10004	"\32\36\1\141\2\153\1\330\2\153\2\330\1\153\1\330"+
35609	B[i+7]))
6309	bQuery
14857	locale);
65825	o<oClauses;
42599	filter.bitSpans(reader);
54065	(i%3
38555	fail("deleteDocument
60169	"\1\137\4\0\2\137\150\0\1\u0101\1\266\1\u024e\30\266"+
30277	proxpointer
52457	termAtt.setLength(NumericUtils.longToPrefixCoded(value,
22355	fromIndex,
29053	(docID
43204	bottomval
26377	codingCase.finalMask)
25637	"readerKey
30994	"This
64728	rewind:
25712	InsanityType("VALUEMISMATCH");
42005	testnonfinalstopnode
2789	"elapsed="+timoutException.getTimeElapsed()+"
60534	"\3\266\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
42899	prototype.positionIncrement;
50545	conf.getSimilarity();
4927	debug
4755	termsIndexDivisor
24982	bjfhd
35372	(docId
31871	this.lookup
45287	"Æ¡"
20803	getNoOutput();
2969	dotesttimeout
2083	add(Builder.UnCompiledNode<T>
7929	#UNMAP_SUPPORTED}
24645	"OutOfOrderMultiComparatorScoringMaxScoreCollector"
2977	join
56320	(comparePivot(right)
29953	"\1\64\3\0\1\64\2\0\1\64\3\0\1\64\5\0"+
12338	ub2eb
40918	(doReverseLookup
38191	assertLongRangeSplit(Long.MAX_VALUE,
57836	testcommitthreadsafety
35651	nextSetBit()
23459	modifier.setNorm(docId,
58872	KeywordTokenizer
55081	threads[i];
37120	lessThan(NodeAndInCount
22109	(negative
52152	isdocstorefile
17344	Term("text",
34515	setdefaultwritelocktimeout
24459	"BJFHD");
48553	DocInverterPerField(DocInverterPerThread
27284	"\u0041\u0031\u002E\u2060",
60771	"\175\0\1\351\24\232\1\u045c\5\232\1\352\12\232\175\0"+
13140	ub2d7
32949	fieldState.position);
42480	tp.getPayload(payload,
32672	IndexableBinaryStringTools.encode(originalArray1,
57873	super("NIOFSIndexInput(path=\""
21484	found");
61629	ub2cd
36975	changedCount
17768	MultiReaders,
32890	perThread.termsHashPerThread.charPool.buffers;
12739	ub2e1
31893	parseLong(String
43411	advance();
1361	override
31887	parseInt(String
56613	commits.get(i)).delete();
24763	Integer(Integer.MAX_VALUE)));
52998	source[i]
40680	PositiveIntOutput
38719	(!index1.isDeleted(i))
54057	"The"
63057	"\"[\"",
6396	CharStream},
53182	business
31535	CompressionTools.compress(BINARY_TO_COMPRESS).length;
39474	indexInterval
8262	setmaxchunksize
35640	(val&0x01)==0:
48925	term_freq
66712	("byNumber",
10143	"\1\140\6\352\1\36\5\352\3\36\2\352\1\36\10\352"+
29818	"\16\0\1\114\2\0\1\115\41\0\1\25\2\52\2\0"+
29421	(prefix
5950	writeMasks[base+2]);
60979	"\1\u033c\161\0\4\u04fa\2\0\1\u04fa\15\0\1\u04fa\6\0"+
66301	initPostingsArray();
30657	"\2\53\12\0\2\25\1\0\1\53\10\0\1\25\24\0"+
35273	VInt.
64833	validTerms.length)
2834	maxTimeStr(boolean
27161	"\u000B\u0308\u0031\u002C",
59500	"\2\0\1\211\3\0\1\212\2\0\1\213\12\0\1\214"+
13142	ub41d
52883	RESULTING
62618	+C:optimize)</code>
55541	(td.next())
65172	fst.setEmptyOutput(output);
4279	NumericRangeQuery
66224	Sort.INDEXORDER;
17495	pr.document(0,
33770	(!initPhrasePositions())
49283	mpq.add(multiTerms.toArray(new
21620	pEnd
26811	char[][]
12741	ub427
67969	testMockGraphTokenFilterRandom()
2062	(h&Integer.MAX_VALUE));
18634	ÜÜ Ü«Ü¢ÌÜ
2095	hash(node)
6973	sub-ranges.
31368	"ab\ud917\udc17cd")),
56479	Spans()
6398	identify
24433	slotValues[bottom];
22249	RamUsageEstimator.NUM_BYTES_INT)];
61249	"\2\u05f5\1\u05f4\5\u05f5\1\u05f6\175\0\1\u03a1\4\u05f7\2\0"+
28735	category
7532	termvectorstermswriterperfield
9311	"\1\162\1\163\1\155\1\165\1\164\1\154\1\166\1\167\1\170\1\177"+
21143	segment).
2215	findForcedMerges(SegmentInfos
15473	segment's
12340	ub431
28045	"\u0031\u002E\u2060\u002C",
4920	QueryParserTokenManager
29071	TermVectorMapper
65161	lastInput.length
62201	terms.remove(random.nextInt(terms.size()));
60587	"\1\u0126\161\0\4\u03d8\2\0\1\u03d8\15\0\1\u03d8\6\0"+
35303	payloadlength
24009	"15",
52403	org.apache.lucene.search.NumericRangeFilter;
18919	wanted",
23392	String.valueOf(value))));
15264	IOException("Simulated
25959	(queueFull)
36110	job,
41382	doPack
65079	compileTail
65043	dedupHash
17498	pr.document(1,
25261	"*m?1",
39791	(i++;
19122	istokenavailable
61631	ub413
27604	"\u0300\u005F",
27972	"\u0031\u0027\u0308\u0061\u002C",
8410	lockFactoryClassName);
24646	testSortWithScoreAndMaxScoreTrackingNoResults()
38613	IndexReader.lastModified(dir),
26747	<code>sort</code>.
50632	config.getMergePolicy
31007	pw.close();
29528	testignoredproperty
38606	IndexReader.lastModified(dir);
40850	(fst
22395	python
33259	ids="-"+id;
54469	normswriterperthread
15291	NumericField.DataType[]
57423	flipandget
10111	"\1\360\2\352\2\36\1\352\6\36\3\352\11\36\1\141"+
50693	first.</p>
9671	"\1\37\16\36\1\40\4\36\1\35\1\41\2\42\1\41"+
32533	(byte)0xB2,
19273	????
64995	INPUT_TYPE}
52655	getMethods()
4919	Manager.
41478	fstEnum.seekFloor(a);
33357	commit.delete();
35077	BUFFER_SIZE);
48844	assertTrue(positions.length
51221	dsName="
35503	a,b,c)
59270	"\112\0\1\50\1\0\1\51\1\0\1\52\2\0\1\53"+
25453	checkSanity(cache.getCacheEntries());
30154	(origEnum
28180	quotation
25442	calculateed.
45696	"Æ«"
1388	super
65341	dosharenonsingletonnodes
52234	tosync
61504	"\1\11\1\0\1\1\175\0\1\1\130\0\6\1\3\0"+
26635	no_norms_key
51054	message("forceMergeDeletes:
5365	curLexState,
46115	"Æµ"
25973	add(slot,
7404	perThread;
54125	MockSynonymFilter(TokenStream
18684	"à¦à¦°à§",
30706	"\2\65\1\0\1\65\4\0\1\65\1\0\1\65\2\0"+
25394	testcase
27945	"\u0031\u0027\u003A",
54905	writer.updateDocuments(t,
2258	org.apache.lucene.index.FieldInvertState;
21545	testindex
52666	isprivate
61579	u92f7
19445	perThread,
59541	"\1\0\2\25\1\0\3\25\1\0\3\25\1\0\6\25"+
55309	r.nextInt(lim);
4583	assertEquals(MockAnalyzer.class,
7400	perThread)
42529	randomfixedbytelengthunicodestring
27067	"\r\u0308\u0061\u002C",
13090	u9301
54407	getDescription();
39314	termarray1
39315	termarray2
30416	output.txt
46635	"â³"
31742	IndexUpgrader
813	crashDoc
1568	BytesRef(term.text);
16926	testclonereadonlydirectoryreader
54582	(i+1)
55732	iwr1.close();
44554	,"ff",
15476	derive
57223	(64-(endIndex
6141	"#startOffset",
12339	ub38e
7137	getmin
20359	testillegalcollectoronreplay
12288	u9315
5109	33);
2820	,&&
12740	ub384
34187	uniontermgroups
5561	mantissa);
5851	structures
31043	multiFileOutput
8702	testRandomStoredFields()
38017	"forward
66785	getsort
39931	readerIndex(docNumber);
52943	Encode
66541	writeBytes(int
18231	eliminate
53738	PLACEHOLDER
13141	ub37a
51031	IllegalStateException("this
54584	System.out.println("Before:
57684	structure.
57504	indexEnum.size
12689	u930b
40661	FSTTester.InputOutput<BytesRef>(terms2[idx],
6131	testAttributeReflection()
6455	TestException();
46625	"â²"
26693	org.apache.lucene.index.IndexReader#docFreq(Term)
67787	o.termLength)
61630	ub370
7940	remain
62834	"<COMPANY>",
18281	"d4"));
11150	"\1\u03f0\33\0\12\u0397\175\0\1\u03f0\33\0\12\u03f1\175\0"+
4933	active0)
42120	IntsRef)
49605	goop1.image
17018	storeOffsets);
10682	"\1\u0242\15\264\1\141\12\264\1\0\3\136\1\0\2\136"+
29115	tvfPointers
1548	testSeekEnum()
29276	tvflengths
59132	"\2\u8c00\2\u8ca3\2\u8d46\2\u8de9\2\u8e8c\2\u8f2f\2\u8fd2\2\u9075"+
52759	Math.abs(expectedScores[i]
3975	correctOffset(start+length));
68084	int[size
64314	ConstantBooleanQueryRewrite;
21823	get(String
46679	"â­"
61351	"\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\4\u02e2\1\u042f\5\u02e2"+
52264	TermInfo(int
9060	iterable
30794	Character.codePointAt(seq,
32006	Value
52025	filestocommit
26398	decode(input.array(),
59399	"\21\0\1\114\17\0\1\25\1\100\1\26\1\116\3\0"+
7033	setEnum(TermEnum
7849	java.nio.channels.FileChannel;
24559	testTopDocsScores()
15924	upgrade
36671	readNextArcLabel(Arc<T>
8678	(called
42983	tokenattributefactory
25485	CacheEntry>(new
38761	tp2.doc());
3242	Prevent
31353	tfv);
39818	starts[i+1]
1567	termBytesRef
10127	"\3\352\1\141\12\142\1\65\1\136\1\143\1\136\1\0"+
5650	Integer.toHexString(Float.floatToRawIntBits(i)));
59459	"\2\0\1\60\4\0\1\206\14\0\1\62\4\0\1\207"+
32259	assertFalse(l.isLocked());
14729	(got
39297	termarrays
33947	other.<p>
46855	acute
33301	,expecteds.cardinality());
45756	,"ts",
16241	super(keyField,
67771	ta.length();
65461	(onInit)
9605	"\2\u5ecb\2\u5f6e\2\u6011\2\u60b4\2\u6157\2\u61fa\2\u629d\2\u6340"+
56230	above",
23155	assertTrue("document
25029	testsortwithoutscoretracking
5257	int[38];
58763	hasIllegal
62935	"segments");
10295	"\1\141\12\142\1\u013e\1\136\1\143\1\136\1\0\1\136"+
11677	"Unkown
57558	input.setPosition(indexToDataOffset.get(indexOffset));
58554	"foo"));
6961	Subclass
49498	TopLevelQuery(String
40898	IntsRefFSTEnum<T>(fst);
3169	(base+upto)
62615	<code>(T:files
54405	"Details"
55852	adddirthreads
55343	nTokens!=0
15336	assertEquals(answers[ids[docID]],
29962	"\3\25\1\0\1\25\10\0\1\25\1\0\2\25\21\0"+
32801	bytenum
46807	foldings[n].length();
39717	this.deletionPolicy
10605	"\26\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
55305	assertEquals(offsets1[k].getEndOffset(),
9146	docState.testPoint("StoredFieldsWriterPerThread.processFields.writeField");
39264	other.slop
53570	maxDoc();
59620	"\1\137\1\144\1\137\1\0\1\137\1\145\1\140\3\137"+
37777	boost).
17414	sb.append(terms[i]).append('/').append(termFreqs[i]);
16036	d.add(newField("id",
12054	zzunpackaction
43276	testsegmenttermdocs
41216	term.text().charAt(0)));
50040	os.writeVInt(FORMAT_CURRENT);
23844	doPrune(double
59103	"\0\u8c14\1\u05b1\1\u0654\1\u06f7\1\u079a\1\u083d\1\u08e0\1\u0983"+
49873	rangequery
32120	nextLevelArray
60411	"\1\u0101\32\266\1\142\2\266\1\u0327\7\266\1\0\3\137"+
59065	boost);
32169	testCustomLockFactory()
50543	defaultInfoStream;
11119	"\6\0\12\u03d9\1\u03da\13\0\1\u0325\160\0\1\u0386\4\u03d9"+
18905	"216.239.63.104",
64331	col.pendingTerms)
22487	buffer.append(key).append('=').append((value
33705	infos.size());
31832	commandlineutil
50025	"File
61580	u939a
9208	queryLimits
51186	addIndexes(dirs);
67760	StringBuffer)
55402	docs.size();
54466	this.normsWriter
9549	"\1\u422e\1\u42d1\1\u4374\1\u4417\1\u44ba\1\u455d\1\u4600\1\u46a3"+
8153	readBytes(byte[]
45665	"Æ¬"
61250	"\1\u05f7\15\0\1\u05f7\6\0\12\u05f8\1\u05b9\13\0\1\u033c"+
9493	"\0\u28c0\0\u2963\0\u2a06\0\u0ea5\0\u2aa9\0\u2b4c\0\u2bef\0\u2c92"+
32806	encodedcomparison
25755	getmap
61403	"\30\u02e2\1\u066e\1\u02e2\1\u034e\12\u02e2\175\0\1\u034d\11\u02e2"+
9339	"\7\133\2\0\2\133\2\0\3\133\10\0\2\133\4\0\2\132\1\0"+
7138	getmax
22332	comparePivot(int
40087	ReaderCommit(segmentInfos,
49543	jj_consume_token(NUMBER);
45397	"Æ¤"
25220	matchAll[]
24394	parseLong(final
39301	idfexp
10860	"\1\347\12\230\175\0\1\346\24\230\1\u02f5\5\230\1\347"+
27291	"\u003A\u0308\n",
18608	"Ø§ÙØ£ÙÙ",
15836	(gen
4479	testleftopenrange
34815	prevType;
54349	maxTokenLength
35264	odd,
57313	thisArr[pos]
28109	FIVE
50542	conf.getAnalyzer();
24106	odd)
833	MockIndexWriter3(dir,
7528	vectorslicereader
28864	docInverterPerField,
36223	other.arcIdx;
15518	NO);
2183	otherwise.
46079	"Æ´"
29326	otherwise,
2700	doTestSearch();
58651	cachedFiles
59100	"\0\u86fc\0\u879f\0\u8842\0\u88e5\0\u8988\0\u8a2b\0\u8ace\0\u8b71"+
8707	20)));
19958	remove(Object
31615	bytearrayinputstream
61135	"\4\u058a\2\0\1\u058a\15\0\1\u058a\6\0\12\u058c\1\u058b"+
8042	30},
23532	testDeleteAllSlowly()
6306	fields.length)
67971	MockGraphTokenFilters
48114	src.close();
39004	assertTrue(cm.containsKey(o));
43650	formats,
43548	formats.
34650	payloadBoost.setDescription("scorePayload(...)");
37548	"first"));
50250	"write
27102	"\n\u0061\u2060",
39430	hasNext;
6233	fields.length;
56705	above):
24046	"323254543543",
624	re.printStackTrace(System.out);
52227	sethasprox
8556	newSinkTokenStream(ACCEPT_ALL_FILTER);
26810	CharBlockPool
30466	HashMap<String,SortedSet<TermVectorEntry>>();
57480	org.apache.lucene.util.PagedBytes.PagedBytesDataOutput;
66085	f3:bla)
19416	1237);
49157	"TooManyBooleanClauses"
44160	U+1E04:
57007	Extra
30153	origEnum.maxSkipLevels;
41127	(ent.getKey().length
65836	BitSet(termsInIndex);
50538	<code>conf.getOpenMode()</code>.
49542	jj_consume_token(CARAT);
23477	MockDirectoryWrapper.Failure()
39387	Skipping
28266	subScorers
34484	divisor)
38220	patterns
44183	U+1E05:
62955	files2.length)
58738	"\ufffd",
41200	storeOrd
28682	stopTypes,
34488	divisor;
22770	newDoubleRange(field,
25945	OneComparatorNonScoringCollector
57496	divisor.
60540	"\32\266\1\142\3\266\1\312\6\266\1\0\3\137\1\0"+
49033	RangeQuerys.
46271	"â¹"
44158	U+1E02:
36987	newNodeAddress[node]));
63209	FieldCacheSource},
56227	m.toGenericString());
22331	pivot
20075	ArrayList<Weight>
66250	qType=0;
62966	files2.length;
21599	pattern.
15171	MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());
21607	pattern,
37552	query.setSlop(99);
31182	testCreateSingleSegmentNoCFS()
26538	assertTrue(allFieldNames.size()
39050	CharArrayMap.unmodifiableMap(map);
11133	"\2\u03de\1\u03e2\1\u03de\1\u03e2\1\u0385\13\0\1\u0325\160\0"+
35633	~B[i]));
19624	float[SCORE_CACHE_SIZE];
44181	U+1E03:
18872	"chase",
5971	mod_mask
15702	pattern;
60218	"\2\u021c\1\u021f\3\u021c\1\u0220\5\0\2\u021c\4\0\1\u021c"+
19334	corpusivity
42810	termBufferLength);
52550	QueryParser}.
52818	Additional
48710	"1.02.003")
49643	boost",
59304	"\1\62\4\0\1\63\2\0\1\64\41\0\2\25\1\65"+
2363	TermSpans.class,
5240	lexStateNames
34902	fox");
44215	U+1E08:
38224	-1L
38123	Float.intBitsToFloat(0x7f800001),
65068	-2;
64457	<code>exclude</code>.*/
10659	"\15\0\1\u021d\6\0\1\u021f\1\u0221\1\u0220\2\u021f\2\u0220"+
60065	"\12\232\175\0\1\351\10\232\1\u016f\21\232\1\352\12\232"+
55448	reader.core.fieldInfos.size();
3506	-1)
44239	U+1E09:
20985	TestIndexReaderOnDiskFull
30027	u1018
36154	FIXED_ARRAY_SHALLOW_DISTANCE
7753	d++)
9651	"\3\u491b\3\u49be\3\u4a61\3\u4b04\3\u4ba7\3\u4c4a\3\u4ced\3\u4d90"+
35668	ntzTable[lower>>>24]
5249	-1,
9124	storedFieldsWriter;
26688	search(Weight
30232	-1.
43220	assertTrue(docId
48336	skipTo()
31840	getpackage
2892	-1;
28119	"\u0063\u2060\u0061\u2060\u006E\u2060\u0027\u2060\u0074\u2060\u2060"
50353	-1:
54103	doTestStopPositons(StopFilter
49657	xla);
9728	"\1\0\2\32\1\0\3\32\1\0\2\32\1\0\3\32"+
37387	codec="
3277	replayInit(Collector
55836	IndexReader.openIfChanged(r3,
19879	expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT,
44162	U+1E06:
61336	"\25\u02e2\1\u0428\4\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
30571	"\1\37\1\0\1\40\1\0\1\41\1\0\1\140\3\0"+
35433	token_extends
39452	-4;
63918	testchartokenizers
65730	commitpoints
6633	NumericUtils}).
9128	storedFieldsWriter)
34963	docIdSet.iterator();
58226	BytesRef()
454	newdirectory
7505	UnicodeUtil.UTF8Result()};
44185	U+1E07:
65846	TermQuery(terms[tnum]);
58249	(bytes[upto]
49956	x120000
39451	-3;
28036	"\u0031\u002E\u2060\u0308\n",
67962	testMockGraphTokenFilterBeforeHoles()
52732	assertHits(Searcher
59141	"\2\ub9d8\2\uba7b\2\ubb1e\2\ubbc1\2\ubc64\2\ubd07\2\ubdaa\2\ube4d"+
4834	getdefaultwritelocktimeout
25569	ancestry
10350	"\150\0\1\376\11\264\1\u0103\20\264\1\141\12\264\1\0"+
30915	8.601509f,
8537	sink1.consumeAllTokens();
53682	lastBottom
8090	isClone
52162	flushdocstores
60291	"\1\u02c5\6\266\1\0\3\137\1\0\2\137\1\140\3\137"+
30158	getThreadResources()
27988	"\u0031\u002C\u0308\n",
50291	descriptors,
25735	estimatesize
30798	Install
25634	all.add(subs[j].getCoreCacheKey());
31854	binarySearchLookup(String
55491	TermVector.WITH_POSITIONS_OFFSETS));
1191	setMergePolicy(newLogMergePolicy(true))
608	ArrayList<Document>();
10541	"\26\36\1\141\12\142\1\65\1\136\1\143\1\136\1\0"+
51525	!segmentInfos.contains(merge.info);
41635	FST.FIXED_ARRAY_NUM_ARCS_DEEP);
19853	-->
51485	(previousReader
52452	set???Value()
26386	(inputByteNum
38357	x8000000000001l
63858	StringReader(builder.toString()
15052	org.apache.lucene.store.BufferedIndexInput;
21083	ncycle
29145	tvfPointer,
49236	getFieldQuery(field,
56446	testtieredmergepolicy
49740	tok.next;
12083	u108e
56808	modtime
41636	childCount;
62328	testSimple2()
28501	docFromReader.get("stringStored");
41880	inputmode
43426	bit_shift
40483	TeeSinkTokenFilter}).
14788	buffer.append("<string:
15532	src.name;
58480	set.add(upper);
19548	SUPPRESS_METHOD;
34543	PrefixTermEnum(IndexReader
11613	"\1\u0551\22\264\1\141\12\264\1\0\3\136\1\0\2\136"+
40373	assertEquals("org.apache.lucene.search.TopScoreDocCollector$"
3204	replayed}.
42207	att.type());
51577	!segmentInfos.contains(merge.info))
46136	VISIGOTHIC
36403	save(new
32358	setlockfactory
60626	"\1\u032d\30\266\1\142\12\266\1\0\3\137\1\0\2\137"+
56461	getClass()
64264	Type#SHORT},
43290	MapFieldSelector(Map<String,FieldSelectorResult>
45195	"Æ"
51151	merge.abort();
63162	millis");
61633	ub559
67817	testByteSizeLimit()
67207	termvectorentryset
24963	getemptyindex
2384	boostingFuncTermQuery2
43960	U+1E00:
51150	(!waitForMerges)
51051	forceMergeDeletes(doWait);
10374	"\3\136\3\0\1\136\1\162\3\0\2\136\151\0\4\u015a"+
12286	u91cf
47924	super("prepareCommit()
54377	reset(final
12885	u107a
26048	someone
12484	u1084
4756	Setting
33032	typeAtt.setType("AnotherTestType");
56727	lastCommit.getGeneration())
55169	r2.getTermFreqVectors(id2));
42921	((FlagsAttribute)
23757	recordTimeSec
9578	"\1\ud543\1\ud5e6\1\ud689\1\ud72c\1\ud7cf\1\ud872\1\ud915\1\ud9b8"+
30028	u107f
13088	u91bb
14750	setMissingValue(Object
6997	maxBound;
41949	fstseekresult
11326	"\2\0\1\u0479\15\0\1\u0479\6\0\2\u047a\1\u0479\2\u047a"+
44037	U+1E01:
15831	(delFileName
39388	testcases.
7607	s.substring(s.length()
66968	testcases,
30713	"\2\103\1\0\3\103\1\0\1\103\2\0\4\103\2\0"+
58809	0xd800)
18012	testrangefilterrand
57785	"first"
36681	readNextRealArc(Arc<T>
12687	u91c5
36494	writeLabel(arc.label);
61768	u1066
31659	termpositionvector
44176	MIDDLE
67080	assertEquals(tp.nextPosition(),
17720	super(size);
13286	u1070
39654	testPrefixQuery()
36190	END_LABEL
58048	i=1;i<perDoc.numVectorFields;i++)
54641	superclass.
66461	intUptos
5128	l2))
58175	superclass,
45780	"Æ¯"
54516	elemSize));
61577	u91b1
21079	start_count
1712	FIELD_IS_BINARY
28440	c.charAt(-1);
49540	jj_consume_token(RPAREN);
9409	"\1\143\1\142\30\0\5\142\41\0\6\132\2\0\6\132\2\0\6\132"+
34170	initcomplex
52175	deltermcount
50613	FieldInfos:
9276	scheme
17493	testDocument()
3637	wakeup
58647	run;
8324	getshort
31989	getStrings
16312	NOOP
17682	query.getEnum(reader);
17185	run,
6356	-(description:query3)
31493	asString(actual));
37357	CODEC_MAGIC
2704	MyHitCollector
2287	PayloadFilter(TokenStream
6629	(for
31350	assertNotNull("docID="
50274	IndexReader#open}
27624	"\u0300\u0031\u002C",
32129	FIRST_LEVEL_SIZE
34307	2.2).
19787	TestFieldScoreQuery
436	document
15030	irregardless
19843	(ScoreDoc
51137	#rollback()}.</p>
6516	TermRangeQuery}.
54070	i<a.size();
10801	"\1\136\4\0\2\136\150\0\1\376\12\264\1\u02b9\17\264"+
7232	accepts
9903	"\32\0\1\225\21\0\1\226\2\0\1\227\21\0\1\113"+
20302	boolean[]
56797	nowtimestamp
19920	int_field
55682	IndexReader.open(addDir,
6258	q).setSlop(slop);
46581	HIGH-REVERSED-9
58622	testcopyjdkset
23930	nanos_per_sec
4456	assertFalse(q2.equals(q1));
2444	"foo"),
39256	buffer.append("?
62568	countingsumscorer
47979	indexSearcher.search(booleanQuery,
60773	"\1\u0101\32\266\1\142\11\266\1\u0323\1\0\3\137\1\0"+
64450	deflate
65774	randBitSets(int
22897	buffer.append(",
24647	runs
9438	"\1\140\1\0\12\134\1\136\1\137\5\0\32\132\4\0\1\141\1\0"+
15180	doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);
29214	positions[][];
40705	value)));
36327	getNodeAddress(int
26906	@Ignore
30194	scanEnum
66208	zz";
54922	waitForGeneration(long
62866	posIncrAtt.setPositionIncrement(posIncr);
31677	testupgradeoldindex
32537	(byte)0xA6,
46364	"â½"
16201	zz",
60600	"\10\232\175\0\1\351\1\u03e1\31\232\1\352\12\232\175\0"+
55024	indexRandom(5,
32916	while(prefix
36938	q.pop();
41506	(cycle
59122	"\2\u5910\2\u59b3\2\u5a56\2\u5af9\2\u5b9c\2\u5c3f\2\u5ce2\2\u5d85"+
42229	34);
42749	#DEFAULT_TYPE}
30929	1).scoreDocs.length);
59249	"\2\0\1\25\2\0\1\25\3\0\1\25\117\0\1\25"+
41430	5000);
23077	mSearcher2.search(subSearcherQuery,
31139	NOTE
38893	threads.length;
14797	buffer.append("<long:
65975	ee\"");
3158	curDocs.length;
48786	offsets[i][j].getEndOffset();
63865	testLowerCaseTokenizer()
3839	finalOffset
10636	"\2\u01ca\1\u020d\3\u01ca\1\u01cc\5\0\2\u01ca\4\0\1\u01ca"+
34683	payloadboost
49488	NOT:
50339	Map<SegmentInfo,SegmentReader>
11932	zzScanError(ZZ_PUSHBACK_2BIG);
65853	testConjunctions()
67782	t.termBuffer,
61268	"\1\u034d\1\u02e2\1\u0605\30\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
49451	sb.append('\u005c\u005c');
3114	curDocs.length)
40103	sis.read(dir,
23025	lDoc3.add(newField("handle",
39060	map.get(NOT_IN_MAP));
28345	subScorers[numScorers
33286	expecteds.set(1,(expectedLastRecordId+1),true);
43538	doTestWriteRead(int
18364	q2.add(tq("dek",
42273	hallo
65686	directory.deleteFile(fileName);
2026	unfrozen
27528	"\u005F\u0061\u002C",
37341	getEnablePositionIncrementsVersionDefault(Version
38065	-0.0,
58330	(surrogate
32723	encodedBuf);
8838	"[@Rule
34431	(maxBufferedDocs
33659	testMaxNumSegments2()
67502	":\n"
55340	getString(int
59337	"\2\0\1\70\1\0\1\51\1\0\1\71\2\0\1\72"+
51762	merge.info.setUseCompoundFile(true);
52425	"fullPrecNumeric";
17762	Expert:
39887	(!openReadOnly)
30948	bring
51204	versionComparator
9377	"\1\133\12\134\6\0\12\134\6\0\16\142\122\0\5\133\57\132\21\133"+
3016	<p><b>NOTE</b>:
41504	id=0;id<NUM_IDS;id++)
8413	(ClassCastException
34280	ConcurrentMergeScheduler();
52249	getpayloadprocessorprovider
66747	HitQueue(s).
68097	bitsPerValue));
51252	Guard
1785	this.segment
29872	"\2\0\1\153\21\0\1\101\20\0\1\103\1\0\1\103"+
39938	wind
52257	flushbyramusage
11323	"\2\0\1\u0479\15\0\1\u0479\6\0\12\u047a\1\u0435\13\0"+
17202	termVectorsReaderOrig,
10918	"\4\u032c\2\0\1\u032c\15\0\1\u032c\6\0\1\u032d\2\u032e"+
44170	"Æ"
48140	Spans[]
54479	SimilarityDelegator(Similarity
49263	newTermQuery(new
15777	segment="
6138	"#term",
22414	shrink
21875	fields.size();
42551	assertTrue("New
17128	termVectorsReaderOrig;
18702	"à¦°à¦¯à¦¼à§à¦à§"
52526	assertEquals("field2:the",
60578	"\1\u0284\175\0\4\u03d0\2\0\1\u03d0\15\0\1\u03d0\6\0"+
38302	0x8000043,
1599	(sample.size()
62296	testEquality1()
13089	u925e
12688	u9268
8747	docs.size()
42541	testLongStream()
12287	u9272
50114	adding,
30199	wipe
1977	(lookup
31604	addDoc(w,
34310	passed,
28214	passed.
31707	qwerty
16182	FIELD
5652	***/
55654	addDirThreads.NUM_INIT_DOCS,
48662	posincrattribute
43250	assertTrue(tdocs.skipTo(9));
15390	tmpdir
64835	assertFalse(result);
29437	org.apache.lucene.util.SystemPropertiesInvariantRule;
15749	getUseCompoundFile()
32342	MockLock();
25715	wish
40082	writer.deletePendingFiles();
25849	spanNearQuery.getBoost();
25113	assertEquals(q.getBoost(),
10653	"\2\0\1\u021a\15\0\1\u021a\6\0\12\u021a\1\u01d5\175\0"+
53717	char[]'s
45029	"Êª"
38301	0x8000040,
53359	length=length();
62682	subSearcher.search(weight,
16251	Term[s.length];
44145	"Æ"
40299	rollbacksegmentinfos
27808	"\u0061\u0027\u2060\u003A",
7164	longvalue
42211	assertEquals("hallo",
2773	found!",
29381	upto+newSize-4;
61578	u9254
23745	Comparable<SearcherTracker>,
59391	"\1\26\153\0\1\26\5\0\1\26\2\0\3\26\7\0"+
9468	zzUnpackAction(String
31528	TEXT_COMPRESSED_LENGTH;
49355	Resulting
23928	window
41765	assertEquals(36L,
44168	"Æ"
30431	"your"});
21238	test.getFilePointer());
28308	(subScorers[0].advance(target)
64766	allowEmptyString
8845	rule
62331	"gender")},
26251	CodingCase[]
23	with
44147	"Æ"
56572	firstCommit.getVersion();
5880	Packed64(long[]
41318	500000
2715	search(tlCollector);
9926	"\1\25\13\0\1\25\21\0\14\25\2\0\2\25\5\0"+
32225	NativeFSLockFactory(dir),
41164	50000,
55726	assertTrue(iwr2
35935	analyzer).setOpenMode(OpenMode.CREATE));
58947	TestQueryParser
56367	half;
39810	subReaders[i]
45667	"Æ®"
51787	addMergeException(MergePolicy.OneMerge
24994	zwxy
15541	hasVectors
36666	arc.isLast()=true");
59921	"\1\240\1\241\1\242\1\243\1\244\1\245\1\246\1\247"+
37348	makestopset
30614	"\20\0\1\103\1\0\1\103\3\0\1\54\1\0\1\103"+
44396	U+1E18:
18474	testHugeDoc()
51428	(result.anyDeletes)
43340	sortedInts.length);
54158	ConcurrentMergeScheduler())
32274	lockPrefix
32845	field.isStoreOffsetWithTermVector();
30629	"\42\0\1\34\11\0\3\25\5\0\1\25\1\0\1\25"+
15861	prefix.length();
44110	,"AV",
18299	s.getIndexReader().getSequentialSubReaders()
44733	"Æ"
48312	subspansbydoc
65443	this.field.equals(other.field);
52603	queries[0].isCoordDisabled();
37035	writer.writeVInt(delta);
58894	omitNorms;
8629	(it
55925	(iv
40652	FST<Long>
51134	rollback");
42515	assertbytearrayequals
26725	loader.
44478	U+1E19:
18804	"à½à½²",
5304	(im
1924	(in
39420	assertEquals("Frequency
23644	(id
8290	getuseunmap
23581	(ie
31382	35+i);
11815	(if
20540	shorter
45733	"ê¨"
53094	TRAIL_SURROGATE_MASK_
29645	"\60\142\1\143\1\142\3\143\2\142\2\143\5\142\2\143\1\142\1\143"+
48008	setdocbases
22675	-upperPoint
20490	expectedorder
41284	fstEnum.current().output).longValue()));
11584	"\1\376\32\264\1\141\5\264\1\u053a\4\264\1\0\3\136"+
6204	+(title:term2
6203	+(title:term1
24292	Double.MIN_VALUE,
19602	closeables
46448	THIRTEEN
18165	collector.collect(doc);
5751	Packed64
39957	(hi
5328	getNextToken()
58938	omitNorms)
58909	omitNorms,
26508	assertTrue(DocHelper.nameValues.containsKey(field.name()));
52510	pr.termDocs();
35931	tokenizer;
33122	CharTermAttribute,
33980	PhrasePositions[rgs.size()][];
34033	ppTermsBitSets(rpp,
44711	"Æ"
11115	"\1\137\3\136\3\0\1\136\4\0\2\136\216\0\1\u02c2"+
4004	tokenizers
48966	&lt;TERM&gt;
64599	(i2
19935	expectedarraytypes
62394	dixit
54485	delegee.tf(freq);
4151	(i)
1007	doc-writing
25608	badChildren.keySet())
29116	long[fieldCount];
67749	CharTermAttribute)
67035	testramdirectorysize
55100	Collections.sort(fields,
25006	bjdfh
30983	workDir;
39487	lastTermBytesLength
44892	"Æ"
59999	"\175\0\1\u01a9\1\u01af\31\232\1\352\12\232\175\0\1\351"+
67389	testReferenceCountingMultiReader()
1265	(no
26770	spans.end()
57453	30));
44392	U+1E14:
45757	"ê©"
8759	iter=0;iter<num;iter++)
43852	(my
47285	welsh
10904	"\150\0\1\376\1\u030c\31\264\1\141\12\264\1\0\3\136"+
8829	*/}
9306	"\1\232\1\235\1\233\1\235\1\225\1\224\1\150\1\174\1\151\1\152"+
44139	"ê»"
44912	"ê"
31885	FieldCache#getInts(IndexReader,
35583	B[],
53149	(char)(((b&0x1f)<<6)
37722	(mp
24728	(o1
26874	o.startOffset
37422	goldFreqs);
44474	U+1E15:
49085	setAutoGeneratePhraseQueries(boolean
52738	s.search(query,
43591	cache;
36715	cache:
56938	"\2\24\7\0\1\63\4\0\2\62\1\0\1\56\2\0"+
67219	ServerSocket(port);
31128	following:
44864	"Æ"
42948	attClass)
22481	attClass,
50204	gains.
8358	sleepTime\n"
21133	cache.
24716	(n,
65803	result.and(rnd);
21136	cache,
40062	segmentInfos.rollbackSegmentInfos(rollbackSegments);
25452	cache)
39959	(lo
52429	set<em>???</em>Value()
23039	"fulltext",
18545	"Õ¾Õ«ÖÕ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ¸ÖÕ´",
44394	U+1E16:
48595	field.tokenStreamValue();
36641	getBytesReader(0));
65767	//System.out.println(d);
60525	"\31\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
19300	testnumericsa
57303	obs;
9107	equals",
53855	assertEquals((int)
16783	assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms("field1")[4])
10185	"\2\0\1\25\1\140\15\36\1\u0102\14\36\1\141\12\142"+
44736	"Æ"
28265	neither
63527	obs)
7338	Don't
44882	"ê"
44476	U+1E17:
3201	cached
22616	Furthermore,
22815	upperVal.hashCode()
11293	"\2\136\150\0\1\376\32\264\1\141\1\264\1\u0460\10\264"+
45991	"Æ¿"
7507	(doc
3026	caches
27378	"\u0027\n",
19784	(by
59123	"\2\u5e28\2\u5ecb\2\u5f6e\2\u6011\2\u60b4\2\u6157\2\u61fa\2\u629d"+
17065	TermVectorOffsetInfo
12343	ub61a
44281	U+1E10:
55254	(d1
33642	LogDocMergePolicy
24470	Locale.ENGLISH,
26108	Entry(slot,
26059	pre-allocate
2562	thesearcher
38088	testSortableDoubleNaN()
8816	testRule
57919	extensionsInCFS.add(ext);
22672	inclusiveUpperPoint
15078	assertTrue(field.getIndexOptions()
7600	str.charAt(i))
66761	RELEVANCE
45096	"Æ"
33976	(at
8036	(as
37378	actualHeader
54508	copyCostPerElement,
44914	"ê"
57375	(b.wlen
60718	"\6\u02e2\1\u0428\10\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u0428"+
9858	"\3\0\1\25\1\26\5\0\1\25\2\0\1\25\2\0"+
26656	newposition
44320	U+1E11:
66399	(c1
37061	bba="
53808	(an
41349	ord);
22287	hashCode(byte[]
60738	"\1\u0443\175\0\1\u0168\4\u0444\2\0\1\u0444\15\0\1\u0444"+
25548	valMap
44283	U+1E12:
5925	BLOCK_SIZE);
58285	utf8SortedAsUnicodeSortOrder;
34025	rl.add(pp);
41433	Builder<Object>(FST.INPUT_TYPE.BYTE1,
58811	chars[len++]
32870	DocWriter.
62324	"first")},
13145	ub606
53943	incRef,
1060	MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());
57277	(word!=0)
31073	info.setUseCompoundFile(true);
18974	bufferedReader
44974	"Æ"
38798	"17",
26507	result.getFields();
32912	lastTermBytes
64084	READ_TEST_BYTES.length);
62322	testSimple1()
25007	bjdhf
41653	builder.add(Util.toUTF32("stat",
44322	U+1E13:
40827	Builder<Object>
11567	"\6\0\2\u052c\1\u052b\2\u052c\2\u052b\1\u052c\1\u052b\1\u052c"+
31162	*";
12744	ub610
48584	perThread.singleToken.reinit(stringValue,
43102	"b"}));
66809	(queryTerms
44131	"êµ"
53328	(_o
5898	longs...
11821	translate
64039	bdo.writeLong(l1);
19026	(a,
30753	getInstance(final
36170	VERSION_CURRENT
45197	"Æ"
23550	testIndexingThenDeleting()
45596	"ê±"
36970	fst.arcCount
22603	FieldCacheRangeFilter}
58836	ir.document(0);
67727	***
30804	charBuffer.length
51944	deleter.revisitPolicy();
18600	Wikipedia
2263	**/
2897	iteration
56508	null)?"START"
18636	Ü«Ü¡Ü
31978	shorts.
31008	(fw
44885	"ê"
24200	getFullIndex();
15243	fsDir.touchFile(name);
59629	"\5\36\2\355\3\36\2\355\10\36\1\355\1\142\12\143"+
21245	expected.getFilePointer();
56473	(spans1.start()
22269	char[oversize(minSize,
23699	(eg
7320	execution.
26667	efficiently
55928	maybePurge();
49362	*),
38287	0x7fffec78,0x7fffec7f,
38924	adddocumentwithdifferentfields
60374	"\1\u0305\1\352\12\232\175\0\1\351\24\232\1\u0306\5\232"+
21237	expected.getFilePointer(),
64250	Different
1563	Term("field"
45037	"Æ"
49697	jj_gen
31129	<li>-1
50524	a).setIndexDeletionPolicy(deletionPolicy));
5939	blocks[elementPos
40735	FSTTester.InputOutput<Object>(terms[idx],
39692	hasDeletions
28796	(df
31338	ab\ud917\udc17cd",
26476	finalmask
67663	stopthread
7671	(do
40799	in.grow(1+in.length);
14999	seed)
37951	obj,
58563	set.contains((Object)
5696	obj)
18792	"àºàº°àºàº²àºàº´àºàº°à»àº",
7105	geosciences
7040	iterating
30090	org.apache.lucene.util.CloseableThreadLocal;
28493	doc.add(stringFldStored);
45134	"Æ"
31247	("compressed".equals(fieldName))
67941	seed:
53045	(ch
32738	binaryDumpNIO(ByteBuffer
40066	deleter.close();
5701	obj;
3672	CharTermAttribute
68075	Packed32
53116	(cp
30600	"\2\0\2\27\1\0\3\27\1\0\1\27\2\0\4\27"+
27121	"\u000B\u0308\u0001",
49717	(++jj_gc
40775	curArc:
28069	"\u0031\u002E\u2060\u0031\u003A",
6570	MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE}
18128	(cs
41155	IntsRef[termsSet.size()]));
33045	copy.addAttribute(TypeAttribute.class);
7988	<code>IndexInput</code>
53397	newIOE.initCause(ioe);
26133	updatebottom
23149	getMultiSearcherInstance(new
63987	MARK")
59564	"\1\25\3\0\1\25\1\100\1\0\1\25\2\0\1\25"+
40581	ir.grow(intIdx+1);
50514	LockObtainFailedException
44231	"Æ"
17102	java.util.LinkedHashSet;
49337	newPrefixQuery(Term
39774	segmentReaders.get(infos.info(i).name);
50781	caveats
23251	template
62205	weight.scorer(s.subReaders[0],
60954	"\175\0\1\351\1\u04e1\31\232\1\352\12\232\175\0\1\351"+
20222	needParens=(getBoost()
27904	"\u0031\u003A\u0308\u002C",
3396	<p>Note
42030	super(doc,
24347	if(cmp
54363	#setMaxTokenLength
49446	'{'
1152	(1+b));
9622	"\2\ub563\2\ub606\2\ub6a9\2\ub74c\2\ub7ef\2\ub892\2\ub935\2\ub9d8"+
28435	obey
33205	testterm
36193	cachedRootArcs[];
31556	35);
7174	dummy
36685	arc.arcIdx++;
37931	(iterator.hasNext())
28327	rchild
55117	docID=0;docID<sub.maxDoc();docID++)
54676	(unset)
12743	ub56d
11606	"\1\u02cf\161\0\4\u054d\2\0\1\u054d\15\0\1\u054d\6\0"+
11446	"\1\u04d6\175\0\1\u04a7\242\0\1\u04a7\33\0\2\u04a8\1\0"+
16812	origSegmentReader.setNorm(4,
43570	Compare
16546	behaves
67861	'x'
60503	"\32\266\1\142\1\u0381\11\266\1\0\3\137\1\0\2\137"+
46405	NUMBER
36679	in.skip((1+arc.arcIdx)*arc.bytesPerArc);
6604	<p><em>A
66566	postingshashhalfsize
34009	j<rpp.length;
17735	best
12342	ub577
1404	setmaxbuffereddocs
36200	byte[]),
63339	0x7541,
59658	"\1\142\12\143\1\u0104\1\137\1\144\1\137\1\0\1\137"+
49963	x7da2000
59003	sliceLength++)
6461	e1.getMessage());
44542	"ê¼"
59625	"\1\65\1\0\1\66\1\0\1\66\1\67\1\0\1\25"+
62175	newSearcher(multireader);
22039	IndexWriterConfig#setMergedSegmentWarmer(IndexWriter.IndexReaderWarmer)}
64101	theBytes
31995	Identifier/Description
42361	tps[j].getPayload(verifyPayloadData,
13144	ub563
22750	newFloatRange(field,
22829	String}}
49448	'~'
44316	U+1E0D:
40217	(end
63340	0x7542,
56433	targetCount
11702	"\1\1\63\0\1\1\367\0";
23322	writer.deleteDocuments(new
4010	preserved
35784	testcomplexexplanationsofnonmatches
48912	documentNumber
68050	_TestUtil
15833	filesSet.add(delFileName);
26820	DocumentsWriter
36481	"near"
40190	this.current
44266	"Æ"
17968	"\u0638",
26596	byte[reader.maxDoc()];
31165	*".
63342	0x7543,
50376	caller's
1819	indexStream.writeLong(fieldsStream.getFilePointer());
67103	preserves
19000	randomTextWithEmails
17354	dis.iterator();
4226	noDocs-count,
44277	U+1E0C:
54222	Integer>();
20499	CollationKeyFilter}.
26720	loaded.
18708	Û²Ûµ
11871	zzMarkedPos
48977	locale}.
66888	Pair(A
7001	NumericUtils.doubleToSortableLong(max.doubleValue());
47268	belt
30757	CharacterUtils#getInstance(Version)}
60129	"\1\u011e\32\36\1\142\12\u01d8\1\u0154\1\137\1\153\1\137"+
44268	"Æ"
24418	numHits)
22025	class="prettyprint">
49449	'|'
27939	"\u0031\u0027\u000B",
56913	"\2\24\1\0\1\51\1\0\1\11\2\52\1\0\1\24"+
14851	numHits,
44318	U+1E0F:
8616	filtering.
64296	350;
17045	fieldToTerms.put(currentField,
3278	(!isCached())
29423	(!prefix.equals(other.prefix))
34765	bar").toString());
26041	numHits;
59568	"\1\0\1\100\2\0\4\100\2\0\1\100\147\0\1\116"+
9240	(bytesUsed
47789	ornament
1686	seekenum
56028	termDocFreq)
2494	distance)
44263	"Æ"
63480	0x876321,
31856	Arrays.binarySearch()
49447	'}'
22215	short[]
29277	segmentmerger
33742	distance:
4055	distance;
44279	U+1E0E:
28620	bufferposition
45730	"ê¦"
9837	"\2\0\2\25\5\0\3\25\1\0\1\25\5\0\3\25"+
39384	interrupt
53057	matches(char[]
30370	setNull
38667	index2.numDocs());
6447	coverage
19589	IOUtils.close(stream);
11511	"\4\u0340\2\0\1\u0340\15\0\1\u0340\6\0\12\u0340\14\0"+
37399	mismatch
9260	getkey
4635	getters.add("getMaxBufferedDocs");
44205	"Æ"
44910	"ê"
4484	testleftopenrange_2bit
14652	Strings,
14629	Strings.
1983	FST<T>
39329	intoffset
39372	inplacenot
42876	reinit(char[]
21701	IndexReader.openIfChanged(r);
21656	beyond
23988	"J"},//A,
44377	"Æ"
59229	"\1\25\1\0\4\25\2\0\1\25\2\0\4\25\2\0"+
2232	no_compound_files
62882	scanner.yylength());
55535	with_tv'
22174	spending
17517	d3.add(newField("f3",
37896	this.backingStore
44095	"ê´"
44880	"ê"
52032	flushcount
13087	u9118
3693	's'
26559	fieldValue
30667	"\3\25\1\0\1\25\5\0\1\25\2\53\5\0\1\25"+
43934	"Æ"
49556	prefix=true;
54447	KeywordMarkerFilter
56640	expireTime
6225	getFieldQuery(String
20127	(c.getOccur()
4336	(precisionStep
24652	isFull
12686	u9122
3747	<li>As
15111	twice
3896	codepoint
24320	sort.setSort(
44314	U+1E0B:
61576	u910e
12285	u912c
44298	"Æ"
10898	"\6\264\1\0\3\136\1\0\2\136\1\137\3\136\3\0"+
31919	FloatParser()
11705	zzUnpackAttribute(String
1975	dedup
31533	byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
13376	u49be
23014	away.....",
61136	"\13\0\1\u02e1\160\0\1\u0349\4\u058a\2\0\1\u058a\15\0"+
44275	U+1E0A:
30163	terms();
56370	cglib
11610	"\6\0\2\u054f\1\u054e\2\u054f\2\u054e\1\u054f\1\u054e\1\u054f"+
12975	u49c8
21280	i<len;
26074	well.
48705	assertTrue(comp.compare("1.0.1",
3671	addAttribute(TypeAttribute.class);
21502	byte[2048];
30842	lastTrailingHighSurrogate
39062	fail("Modified
12742	ub4ca
1631	well:
50156	(eg,
393	been
50635	IndexWriterConfig#setMergeScheduler(MergeScheduler)}
34925	"broan"),
12574	u49d2
40943	iter);
9648	"\3\u39d3\3\u3a76\3\u3b19\3\u3bbc\3\u3c5f\3\u3d02\3\u3da5\3\u3e48"+
40118	segmentsFileName;
44529	"Æ"
21310	114);
53662	document.add(newField("english",
67542	refreshed);
53406	FSIndexOutput,
27726	"\u0061\u003A\u0061\u003A",
5054	jjAddStates(8,
28932	org.apache.lucene.search.function.DocValues#intVal(int)
12173	u49dc
27559	"\u00AD\u0308\u0030",
32554	binaryBuf,
40261	oldnormscache
63246	Idea:
32739	binaryBuf)
6498	jre_is_minimum_java7
22561	clazz.getDeclaredFields();
38923	testbinaryfields
16348	spanfirst
38315	testlongconversionandordering
9301	Translates
51264	copied.
48721	testversioncomparator
44579	"Æ"
62890	isReplaceInvalidAcronym()
58131	well)
12341	ub4d4
16174	well,
8130	rafc.map(MapMode.READ_ONLY,
54650	"(NON-MATCH)
62689	tokenIDX=0;tokenIDX<numTokens;tokenIDX++)
39947	doUndeleteAll()
36288	in.readVInt();
4235	testInfiniteValues()
51438	(readerPool
2510	booleanclause
44512	"Æ"
61289	"\7\u02e2\1\u061b\2\u02e2\175\0\1\u034d\32\u02e2\1\u034e\11\u02e2"+
55385	idString);
32883	(doVectorOffsets)
34412	ramBufferSize
35620	~B[\1]\)/g'
28970	length-in-chars
34260	readerTermsIndexDivisor;
54715	HashSet
13143	ub4c0
58331	dance),
63888	TestingCharTokenizerNormalizeIsTokenChar(TEST_VERSION_CURRENT,
57991	state.directory.fileExists(idxName));
51598	(merge.registerDone)
34126	title)
18904	"C3PO"});
61632	ub4b6
58662	cachedFSDir
15070	assertTrue(reader.size()
44379	"Æ"
6600	(12),
25714	clients
60191	"\1\137\4\0\2\137\150\0\1\u0101\21\266\1\u025f\10\266"+
7244	however,
27548	"\u00AD\u3031",
16115	numToCollect)
66278	allowmust
3761	UTF-32
16832	SegmentReader.getOnlySegmentReader(clonedReader);
40812	FST.INPUT_TYPE.BYTE4,
6150	put(FlagsAttribute.class.getName()
58033	tvf.writeInt(TermVectorsReader.FORMAT_CURRENT);
11922	ZZ_ERROR_MSG[errorCode];
1108	fail("OutOfMemoryError
54053	HashSet<String>(Arrays.asList("is",
14540	numeric_type
51972	setFlushPending(reason,
61634	ub5fc
8584	instant
18168	optimization
35387	image
54809	nativefslock
44102	,"AU",
12284	u9089
66656	testFailureBefore()
10614	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\32\264"+
64518	exclude.rewrite(reader);
11693	"\7\1\3\0\2\1\1\0\4\1\2\0\2\1\1\0"+
51904	IndexWriterConfig#setMergedSegmentWarmer}
41012	fstEnum.current().input));
44521	"ê»"
12685	u907f
28207	<li>If
472	docfreq
59207	"\4\u0965\4\u0a08\4\u0aab\4\u0b4e\4\u0bf1\4\u0c94\4\u0d37\4\u0dda"+
2375	boostingFuncTermQuery
2871	++i
4326	(cur
22646	FieldCache#getStringIndex}.
45584	"á¹ "
56430	maxCount,
49258	(posIncrAtt
3759	UTF-16
50536	"live"
13086	u9075
22712	(short)
42257	assertEquals("Clone's
37885	non-synchronized
64691	r.terms(target);
23232	assertEquals("MultiSearcher
21405	assertTrue(_TestHelper.isSimpleFSIndexInput(expected));
20448	hits.length;
61575	u906b
16631	install
23816	beat
54470	normswriter
23640	sawAfterFlush.set(true);
19318	readline
42858	(startOffset
2533	setsimilarity
36897	pack(int
54935	IllegalArgumentException("targetGen="
10748	"\2\u0278\2\u0277\1\u0278\1\u0277\1\u0278\1\u021e\13\0\1\u0122"+
64342	pendingTerms.add(t);
44706	HWAIR
24152	(doc);
49411	(char)codePoint;
66705	Encapsulates
49379	#getWildcardQuery}).
44655	U+1E28:
55530	testtokenreuse
909	dir.failOn(failure);
59886	"\2\u016f\1\u0178\1\u016f\1\232\2\u016f\12\232\1\352\12\232"+
29796	"\4\25\1\0\5\25\1\52\1\0\1\25\1\0\1\25"+
1831	likely
6684	hand,
66790	ByteFieldSource(String
65151	b.bytes[x]
31287	assertEquals("test
55901	ThreadLocal<WeakReference<T>>
44690	U+1E29:
32339	lockPrefixSet
14727	IllegalArgumentException("Parser
18722	"Ø§ÙÚ¯ÙÛØ³Û",
32382	testnativefslockfactory
18287	testSkipToFirsttimeMiss()
28564	FastCharStream
25936	boolean)}
66462	intPool.buffer;
48380	initScorerDocQueue()
10148	"\1\66\1\0\1\25\2\0\1\25\1\140\6\36\1\352"+
61164	"\1\u034e\12\u02e2\175\0\1\u034d\24\u02e2\1\u05a5\5\u02e2\1\u034e"+
31246	reader.document(i,
36959	newNodeAddress[node]
38720	index1.document(i);
51052	#forceMergeDeletes()},
15355	getindexoptions
44653	U+1E26:
43839	"testcases.txt";
55941	purge()
686	disable
52006	updatedocument
61074	"\12\u02e2\175\0\1\u034d\11\u02e2\1\u054e\20\u02e2\1\u034e\12\u02e2"+
23299	testnormalization1
62152	contributes
27410	"\u0027\u0031\u003A",
19353	testjapanese
30559	"\3\0\1\25\2\0\1\25\3\0\1\25\5\0\1\25"+
42017	minpairweightcomparator
58655	cachedFiles.length);
19443	DocFieldProcessorPerField(final
19062	WordBreakTestUnicode_6_0_0();
63857	builder.append("A");
18319	q.toString(),
44688	U+1E27:
60354	"\1\u02f1\1\u02f0\1\u02ef\13\0\1\u0126\161\0\4\u02f3\2\0"+
52216	java_vendor
8048	setMaxChunkSize(final
3058	package-private
18814	"à½à½à½",
54221	testGet()
57337	compatability
40265	oldreaderindex
58595	falsepos
10709	"\4\0\2\136\150\0\1\376\1\u0259\31\264\1\141\12\264"+
49047	autoGeneratePhraseQueries;
9062	prefixcodedtermsiterator
39706	(readOnly)
63273	0x5321,
20339	suffice.
44651	U+1E24:
21186	FixedBitSet
48196	shrinkToAfterShortestMatch())
22068	queryfilter
34538	(cnt
9842	"\1\0\1\25\2\0\4\25\2\0\1\25\135\0\1\165"+
30961	assertTrue(sd[i
50617	fieldNumber=0;fieldNumber<fieldCount;fieldNumber++)
26330	input.limit()
8326	getint
24866	iter="
18738	"ÎÏÎ¬ÏÎµÏÎ±Î¹
10821	"\1\u026b\12\u0213\1\u0214\2\u0212\1\u0215\3\u0212\1\u0216\5\0"+
44686	U+1E25:
60581	"\1\u03d3\6\0\12\u03d3\1\u03d4\13\0\1\u0126\160\0\1\u0168"+
1486	@BeforeClass
48793	testFieldsStoreOff[i])
61460	"\12\u02e2\175\0\1\351\1\232\1\u0447\30\232\1\352\12\232"+
61338	"\5\u02e2\1\u0641\4\u02e2\175\0\1\u034d\32\u02e2\1\u034e\5\u02e2"+
57461	indexThreads[x].start();
23249	searcher2.close();
28292	subScorers[0].score();
46508	EIGHTEEN
61636	ub742
28671	(stpf.incrementToken())
16976	Character.toLowerCase(
10781	"\32\264\1\141\11\264\1\u02a3\1\0\3\136\1\0\2\136"+
32017	b.append("=>").append(getValue().getClass().getName()).append("#");
61480	"\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\1\u0608"+
36662	"final"
23331	over:
31999	Class<?>
65402	dir.list();
24367	searcher.getIndexReader().close();
44649	U+1E22:
24341	(cmp
22862	Collection<byte[]>
27982	"\u0031\u0027\u0308\u0031\u002E\u2060",
41051	(cmo
53093	surrogate.*/
54370	LowerCaseFilter(matchVersion,
18736	"Ø´Ø¯"
10470	"\5\264\1\u0103\24\264\1\141\12\264\1\0\3\136\1\0"+
45057	"ï¼­"
12746	ub756
60406	"\1\u0323\6\266\1\0\3\137\1\0\2\137\1\140\3\137"+
24395	1234567890L;
64388	java.util.zip.DataFormatException;
51466	over"
62274	testRewrite0()
4614	assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR,
44684	U+1E23:
23080	parser.parse("id:doc2");
50298	over,
58753	"\udc17\ud917",
13147	ub74c
28490	binaryValStored.getBytes(),
56833	"\4\0\1\10\1\0\32\12\57\0\1\12\12\0\1\12\4\0\1\12"+
11006	"\1\u0379\13\264\1\141\12\264\1\0\3\136\1\0\2\136"+
37518	Term("contents","entry"));
66183	queryText
11904	"Can't
12345	ub760
35365	DocIdBitSetIterator(bitSet);
58415	assertTrue(set.contains(val));
26626	indexedfieldnames
57895	bb.limit()
9669	"\1\23\1\2\1\24\1\2\1\25\1\2\1\26\1\27"+
32384	islocked
65974	\"dd
44583	"Ç¥"
45628	"á¹¥"
44596	U+1E20:
67734	(csq
44035	RETROFLEX
58942	!this.storePayloads;
57074	wlen
36927	inCounts[node]));
53826	(Iterator)
45925	"ê¨"
23648	w.updateDocument(new
26746	explain(Weight
65553	deleteFile(fileName);
64870	toArray.intStarts,
31319	QueryParser("contents",
10951	"\1\346\4\230\1\u034a\25\230\1\347\12\230\175\0\1\346"+
64850	targetterm
44628	U+1E21:
50478	getLogMergePolicy()
37198	writeheader
36015	SortField("sorter",
16416	getConfig(random,
36189	final/accepted
49601	startOpen=false;
4728	conf.getSimilarity().getClass());
41279	assertEquals(termEnum.ord(),
43058	"refreshIfNeeded
35557	pop(eights);
42407	maxDigits
60615	"\1\352\3\232\1\u03f2\6\232\175\0\1\351\32\232\1\352"+
19461	"Try-With-Resources"
5488	charstream
29418	prefix.hashCode());
29587	"\10\132\1\0\3\132\1\0\51\132\2\0\1\132\7\133\1\0\3\133"+
31074	fileToDelete
43942	"Ç "
14992	MultiPhraseQuery~N+1
17180	termsIndexIsLoaded()
64413	compressor.deflate(buf);
32406	++)
48231	(spans1.end()
50883	governed
6708	189</code>.
17397	TermFreqVector
57699	TestIndexWriter.addDoc(writer);
45961	"ê¡"
3009	#replay}
60243	"\1\u019d\13\0\1\u0126\160\0\1\u028b\33\0\12\u022e\175\0"+
21224	++;
10380	"\1\u0122\160\0\1\u0163\4\u0161\2\0\1\u0161\15\0\1\u0161"+
59251	"\213\0\1\33\17\0\1\27\131\0\1\32\1\0\1\32"+
10841	"\30\230\1\347\12\230\175\0\1\346\24\230\1\u02e1\5\230"+
64285	typename
3394	necessary
7747	(f.equals(MAGIC_FIELD))
20704	data.length);
2830	(multiThreaded)
41054	cmo.output
29779	"\1\27\4\0\1\35\1\0\1\36\1\0\1\37\1\0"+
11160	"\1\u03fb\15\0\1\u03fb\6\0\12\u03fb\1\u039f\13\0\1\u0122"+
29893	"\4\0\1\52\2\25\2\52\10\0\1\52\1\0\2\25"+
63202	FieldCacheSource))
10960	"\175\0\1\346\11\230\1\u0358\20\230\1\347\12\230\175\0"+
20147	Boolean.TRUE
67552	numFields;
37404	queryTerm
37589	//commented
15607	numFields)
51942	deleteUnusedFiles()
40298	recompute
68126	this.prePopulate
15533	src.docCount;
55088	indexRandom(int
18115	(dis
30248	origenum
57012	performance).
51441	!bufferedDeletesStream.any();
50006	(dir
11009	"\1\376\32\264\1\141\3\264\1\307\6\264\1\0\3\136"+
63132	savedTerms.size();
15199	FieldSelector(){
24637	assertTrue(tdc.getClass().getName().endsWith("$"+actualTFCClasses[j]));
52421	href="../search/NumericRangeQuery.html#precisionStepDesc"><code>precisionStep</code></a>
24506	international
55585	assertFalse(nrtReader.isCurrent());
7666	this(LexicalError(EOFSeen,
27811	"\u0061\u0027\u2060\u0308\u002C",
25862	0x99AFD3BD
56590	lastTimestamp);
421	ownership
36260	FST(INPUT_TYPE
18773	"Î¼ÏÎ¿ÏÎµÎ¯",
21466	Move
8264	sun's
23095	getMultiSearcherInstance(searchers3);
1597	reader.terms();
16128	7.9608946f,
16013	i<100;
27609	"\u0300\u0308\u0300",
8389	running
37841	Collects
21488	cr.openInput("f2");
53588	i<allTermsArray.length;
10039	"\1\25\1\0\1\25\4\0\3\25\1\0\1\25\6\0"+
42383	BufferedIndexOutput
41585	assertEquals("term="
15894	s.append(name).append('(').append(version
57057	<td>3.50</td>
36493	BIT_ARC_HAS_OUTPUT;
61635	ub69f
57935	(extensionsInCFS.contains(extension))
62386	smith
36436	addNode(Builder.UnCompiledNode<T>
67527	this.task.run();
48136	Most
66708	tokenized,
38656	addDocumentWithTermVectorFields(IndexWriter
1474	NUMBER_OF_DOCUMENTS;
25036	tfcoptions
48567	tokenized.
6847	&lt;/&le;
59171	"\3\u5205\3\u52a8\3\u534b\3\u53ee\3\u5491\3\u5534\3\u55d7\3\u567a"+
3215	create(other,
39045	map.put("bar",2);
8641	(finalState
26549	assertTrue(tvFieldNames.size()
39629	initutf16results
52809	Redistribute
49388	(~)
63336	0x7532,
28879	intPool.reset();
17243	CorruptIndexException("doc
9982	"\1\300\1\301\1\302\1\303\1\304\1\305\1\306\1\307"+
58220	EMPTY_BYTES
9061	getsizeinbytes
49688	jj_2_rtns
54908	writer.deleteDocuments(q);
8988	input.getFilePointer()
39426	b[0],
31624	createsurrogatesindex
52633	assertNull(mp.findForcedDeletesMerges(null));
68012	testLetterHtmlish()
33351	+")
32037	purgeAllCaches();
59284	"\1\27\53\0\1\67\24\0\1\107\1\0\1\51\1\0"+
3602	Release
39482	More
62584	addprohibitedscorers
57906	otherbytebuf
28384	numStrings;
21063	docFreq('aaa')
43218	(segTermDocs.next()
3576	segments.
6346	IllegalArgumentException("fields.length
11727	yycolumn;
27651	"\u0061\u2060\u0030",
2222	segments,
27958	"\u0031\u0027\u0308\u005F",
44536	U+1E1F:
3439	segments)
66244	randBoolQuery(Random
45600	"ï¼³"
7322	#topDocs()}
57832	mockfixedlengthpayloadfilter
51627	segments?
63693	x7654321
23625	segments:
3433	segments;
27747	"\u0061\u0027\u0308\r",
60269	"\25\266\1\u02ae\4\266\1\142\12\266\1\0\3\137\1\0"+
15195	reads");
44516	U+1E1E:
63335	0x7531,
45523	"ï¼²"
59925	"\1\51\1\0\1\176\2\0\1\177\3\0\1\54\2\0"+
32036	maintenance"
10892	"\15\264\1\u0311\14\264\1\141\12\264\1\0\3\136\1\0"+
44118	,"(a)",
22145	2.4.2
36254	in-count
1368	with_positions_offsets
6500	closewhilehandlingexception
50771	config.getWriteLockTimeout
6777	(on
7089	indexing
3018	(or
46134	"ê¢"
32186	lf.locksCreated.keySet())
56206	TestRunner.run
35428	switch(ofKind)
66807	String[terms.size()]));
9743	"\1\54\3\0\1\72\7\0\1\56\2\0\1\57\4\0"+
25147	"m*tal"));
44482	U+1E1D:
65130	isFinal
21702	(r2
10771	"\1\u0297\26\230\1\347\12\230\175\0\1\346\17\230\1\u0298"+
16598	wasn't
66622	(pt
25309	prefixtermenum
31006	(pw
55316	((1+end)*1.25)];
40232	term==null
43537	doTestWriteRead(1000);
20936	token.termLength())</b>
27184	"\u3031\u002C",
18760	"ÏÎµ",
18706	Ø¯Ø±
44400	U+1E1C:
29077	seekTvx(docNum);
35011	scorer.advance(filterDoc);
44398	U+1E1A:
49742	(jj_scanpos.kind
59381	"\1\65\1\116\3\0\1\67\1\0\1\67\2\0\1\25"+
38343	xfffff00000
4644	IndexWriterConfig.class.getDeclaredMethods())
40509	nsme)
44480	U+1E1B:
60475	"\14\0\1\u0126\214\0\1\u02f5\1\u035c\1\u035b\2\u02f5\2\u035b"+
5994	rambytesused
29778	"\1\73\20\0\1\27\1\0\1\27\3\0\1\54\1\0"+
24102	Locale("")).compare("Ã",
544	org.apache.lucene.store.RAMDirectory;
20674	secondarydir
46172	"ê£"
65644	segmentInfos));
7098	schindler
40645	PositiveIntOutputs
400	MockDirectoryWrapper
9558	"\1\u6f63\1\u7006\1\u70a9\1\u714c\1\u71ef\1\u7292\1\u7335\1\u73d8"+
16025	runTest(Directory
48299	if(collectPayloads
34913	testPrefix()
62798	(sd
53751	CharArraySet(int
48547	endConsumer
35388	image;
56908	"\1\13\4\0\1\34\1\35\7\0\1\36\4\0\1\37"+
65693	e.toString()
50401	(sr
21362	(so
3092	CachedScorer();
54925	TimeUnit.NANOSECONDS);
19521	(th
17594	d3.add(newField("f4",
910	hitError
15938	prelockless
67770	(ta
36522	"expands"
37832	LetterTokenizer.
65780	randBitSet(setSize,
55261	(v1
17074	(to
36568	(nodeCount
18135	of:");
5112	36);
15584	SegmentInfos.FORMAT_DIAGNOSTICS)
20269	isprohibited
584	newField(r,
32929	reader.writeTo(tvf);
27276	"\u0041\u0031\u003A",
24312	breaker:
64762	//return
57002	(up
67615	""+i));
34068	HashMap<Term,Integer>();
17278	gettermvectorsreaderorig
34710	foobar",
64849	not_found
22597	atributeimpls
60084	"\4\0\2\137\150\0\1\u0101\3\266\1\u01f5\26\266\1\142"+
28749	(df)
62819	tokenizer.
51908	handleOOM(OutOfMemoryError
28144	diaeresis
56827	tokenizer,
14675	"natural
53495	this.searchables
16511	attempting
24995	zyxw
53399	(!isClone)
21028	System.out.println("\ncycle:
18923	"wanted"});
33610	normalizecharmap
48182	(firstTime)
64027	ByteArrayDataOutput(RANDOM_TEST_BYTES);
35413	image)
60229	"\1\137\1\153\1\137\1\0\2\154\1\140\1\u0143\1\u0144"+
8857	abstractnestedtest
29860	"\2\0\1\25\4\0\1\25\4\0\6\25\2\0\1\25"+
18506	tokenizer.setMaxTokenLength(Integer.MAX_VALUE);
35404	image.
38438	(we
56197	TestReader(IndexReader
59907	"\1\232\6\u016f\1\232\1\352\12\232\175\0\1\351\4\232"+
63841	builder.append("
54434	Util
17793	setRewriteMethod(RewriteMethod
40187	current.freq();
19774	phrasefreq
44901	U+1E31:
59026	mmapDir);
58701	TestTermdocPerf
32914	termBytes
53248	TwoLongs.
6887	getField()
45598	"ê"
61587	u980f
33587	map.add("t",
12697	u9823
40040	roll
27489	"\u005F\u000B",
49750	jj_ntk()
31426	.s0
34444	role
19939	Lucene,
3789	Lucene.
34145	pq.add(t[i]);
44871	U+1E30:
5364	TokenMgrError(EOFSeen,
1037	("org.apache.lucene.index.SegmentInfos".equals(trace[i].getClassName())
49218	MOD_NOT);
43203	idindex
17247	segmentInfo
42040	super(fields);
19799	doTestRank(INT_FIELD,FieldScoreQuery.Type.INT);
36402	FileOutputStream(file));
5601	SmallFloat.floatToByte315(Float.POSITIVE_INFINITY)
1403	setsuppressexceptions
53263	TwoLongs)
51694	(merge.readers.get(i)
9205	builder.add(term);
19880	float[0]);
56882	"\20\13\u0100\0\200\13\200\0\u19b6\13\12\13\100\0\u51a6\13\132\13\u048d\12"+
55802	doc.add(id);
16545	relying
14719	FieldCache.ShortParser)
35445	555343
44903	U+1E33:
12296	u982d
57371	bits2words(long
4440	NumericRangeQuery.newIntRange("test13",
55655	addDirThreads.mainWriter.numDocs());
32343	locksCreated.put(lockName,
15352	text_field_2_key
41574	NUM_TERMS="
48383	(se.nextDoc()
36565	nodeCount++;
40348	getSimilarity().decodeNormValue(norms[doc]);
22504	(!name.startsWith("org.apache.lucene.")
44873	U+1E32:
48856	freqVector
37960	weakhashmap
29975	"\1\103\4\0\2\103\3\0\2\103\1\0\1\103\4\0"+
6072	assertFalse(t2.equals(t1b));
45617	SWASH
22522	term());
1080	root
21126	below.
59994	"\10\232\1\u016f\12\232\1\352\12\232\175\0\1\u01a9\24\232"+
23913	below,
9398	"\5\0\51\132\3\0\136\146\21\0\33\132\65\0\20\135\37\0\101\0"+
31506	Field("compressedSize",
23509	below)
44905	U+1E35:
39951	readerIndex(n,
27335	"\u002C\u0308\n",
29275	tvdlengths
26583	checkNorms(reader);
33053	attribute)
44247	"ê¿"
45442	"ê¼"
3085	curScores;
928	below:
51331	below;
25906	"front
52490	jumps",
43470	SpanNearQuery(subquery,
26913	HEADING>
24580	docs2.scoreDocs[0].score,
7154	long_positive_infinity
67101	StopFilter},
44875	U+1E34:
32041	FieldCacheImpl
14566	url_type
2160	nodein
67633	ReadOnlySegmentReader);
22569	attribute.
24821	docID=0;docID<maxDoc;docID++)
23214	Sort.RELEVANCE
1586	topDocs
11814	room
28287	Initially
38026	"check
25577	Set<ReaderField>>(17);
56558	excldisi
61017	"\2\0\1\u0524\15\0\1\u0524\6\0\12\u0524\14\0\1\u0126"+
6460	assertEquals("BASE-EXCEPTION",
49713	token.next
44988	U+1E37:
25808	permitted.*/
16737	testReadOnlyCloneAfterFullMerge()
60868	"\1\352\12\232\175\0\1\351\11\232\1\u01ab\20\232\1\352"+
59180	"\3\u7fdd\3\u8080\3\u8123\3\u81c6\3\u8269\3\u830c\3\u83af\3\u8452"+
1424	logmergepolicy
65289	reused).
25195	'metal'
26087	(numHits
43223	testBadSeek(1);
39058	map.containsKey(NOT_IN_MAP));
44940	U+1E36:
65343	lastinput
13098	u9819
19534	Iterable<?
65025	willPackFST
11684	attributes
25974	this.docBase
34474	DocConsumer}
48410	Scorers
49631	RANGEEX_QUOTED)
3748	3.1,
42499	capacity,
57958	Term("fake",
44990	U+1E39:
27346	"\u002C\u0027",
65869	sets=randBitSets(32,1000000);
3757	3.1.
11615	"\2\0\1\u0552\15\0\1\u0552\6\0\12\u0552\1\u0526\175\0"+
47936	Executes
57328	thisArr,
26077	Scorer}
39226	fieldNormExpl.setValue(fieldNorm);
33161	assertTrue("The
52512	pr.terms();
37089	fst.setEmptyOutput(emptyOutput);
1751	3.0:
67400	IndexReader.openIfChanged(multiReader1);
64062	assertTrue(e.getMessage().startsWith("Invalid
42113	capacity)
33106	assertEquals("Attributes
36856	(arcAndState.chain.length
8808	@Before
23433	testDeletesOnDiskFull()
10817	"\175\0\4\u02c9\2\0\1\u02c9\15\0\1\u02c9\6\0\12\u02c9"+
37297	3.0.
44942	U+1E38:
5907	((totBitCount
1549	CorruptIndexException,
36378	CodecUtil.writeHeader(out,
57983	state.segmentName
7699	errorafter
42823	getPositionLength()
26574	assertTrue(positions.doc()
36882	arcAndState2
22046	realtime
49622	RANGEEX_QUOTED:
37502	Term("source",
25613	badEntries.addAll(viToItemSets.get(value));
22410	minsize
56015	append(String
38020	NumericUtils.prefixCodedToInt(prefixVals[i]);
7832	wasCalled;
56802	keeplastndeletionpolicy
17343	IndexSearcher(rdr);
34934	broan
58522	assertTrue(copy.containsAll(stopwordsUpper));
52400	testaddindexes
1780	fieldsStream;
19606	acquisition
12002	KATAKANA_TYPE;
1756	3.2:
26010	0;;
65446	rord
19733	wraparound
35228	this.curDoc
43225	Term("textField2",
59708	"\1\266\1\u0107\1\266\6\u0107\1\266\1\142\12\266\1\0"+
11681	pushback
32555	decoded);
35075	file.setLength(0);
18753	Î½Î±
64087	os.writeBytes(RANDOM_TEST_BYTES,
3267	cachedSegs.add(new
42500	capacity;
658	conf);
9839	"\3\0\1\25\177\0\2\25\6\0\1\25\153\0\1\25"+
59990	"\5\232\1\u01ab\4\232\1\u016f\17\232\1\352\12\232\175\0"+
64508	"spans("
67111	WordlistLoader#getWordSet(Reader,
5438	jjchecknaddtwostates
29067	FORMAT_CURRENT);
22066	0x923F64B9;
30618	"\56\0\1\32\3\0\1\32\2\0\1\32\3\0\1\32"+
61435	"\175\0\1\u034d\1\u0683\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
19212	ÏÏ¿Ï
67251	reflects
36724	midLabel
45640	"ê"
53952	normSeek;
36142	BIT_STOP_NODE
6795	NumericRangeQuery(final
61585	u96c9
64962	nodes)
51296	String).
41652	Builder<Long>(FST.INPUT_TYPE.BYTE4,
64866	copyTo(newArray,
11525	"\1\u050d\6\0\12\u050d\1\u04f3\175\0\4\u050e\2\0\1\u050e"+
36580	nodes,
39769	re-opened
2722	results!",
63174	token_len
9196	termsArray[]
41226	nodes;
10762	"\1\346\7\230\1\u028a\22\230\1\347\12\230\175\0\1\346"+
53957	normSeek,
59176	"\3\u6b7d\3\u6c20\3\u6cc3\3\u6d66\3\u6e09\3\u6eac\3\u6f4f\3\u6ff2"+
5276	0;)
49642	(defaults
16847	origReader.deleteDocument(4);
13096	u96d3
53705	paged.scoreDocs[i].score,
14584	yyreset
12695	u96dd
36544	destPos);
59830	"\1\u0107\20\266\1\142\12\266\1\0\3\137\1\0\2\137"+
56554	reqScorer.advance(target);
26154	PackedInts.Mutable},
22856	includesupper
17958	below
50406	reader.hasChanges
41198	Builder<Long>(FST.INPUT_TYPE.BYTE2,
12294	u96e7
65226	row,
29107	readFields(int
63563	bitIndex
42058	(bug
48631	(++fieldState.length
34511	sb.append("readerTermsIndexDivisor=").append(readerTermsIndexDivisor).append("\n");
34359	setMergeScheduler(MergeScheduler
48105	String)}
57162	endmask);
20154	(coordFactor
32268	l.isLocked());
52801	remedy
48047	Clients
17649	#setRewriteMethod}
34682	nonpayloadexpl
4892	setwritelocktimeout
56747	j=0;j<N+1;j++)
33696	(but
3253	RamUsageEstimator.NUM_BYTES_INT;
25900	IndexCommit#delete
20592	icu4j
52787	Inc.
50241	ArrayList<MergePolicy.OneMerge>();
41575	NUM_TERMS);
23068	getMultiSearcherInstance(searchers2);
22232	grow(array,
27782	"\u0061\u0027\u0061\u0027\u2060",
22927	payloadref
44959	"ê"
8886	relatively
35318	StringReader("This
11143	"\5\u03eb\1\u03ec\175\0\1\u0332\4\u03ed\2\0\1\u03ed\15\0"+
6806	StringHelper.intern(field);
55359	getIdString()
21755	opendeletefilecount
11828	zzBuffer.length)
53329	getNoOutput()
20397	fieldstoload
30732	standardtokenizerimpl
24938	bcad
23941	doprune
17694	MultiTermQueryWrapperFilter<MultiTermQuery>(query));
45003	"ê"
61072	"\1\u0509\1\u054d\1\u054c\2\u0509\2\u054c\1\u0509\1\u054c\1\u0509"+
22436	Base
18620	"Wikipedia",
67649	assertreaderclosed
41045	HashMap<IntsRef,CountMinOutput<T>>();
50060	copyFile(fe,
27327	"\u003A\u0308\u0031\u002C",
56267	methodsthatshouldnotbeoverridden
32139	newUpto
58313	(aByte
29170	byte[20];
48315	getsubspans
43528	doTestCountVectorOfSize(int
26222	[U+D8000-U+DFFF]
30464	FieldSortedTermVectorMapper
33019	createpostingsarray
66951	outputs2.read(in);
65499	deletionPolicy="
50278	<p>It's
64701	CoreCodecProvider();
58986	bytes[]
57563	termInfo.skipOffset
50289	future).</p>
30409	PorterStemFilter
12013	https
48579	(!field.isTokenized())
24229	dirs)
51284	dsFilesCopied.add(newFileName);
62170	baz",
52322	dirs,
52362	dirs.
7408	FieldInfo
15411	simoutage
29693	"\0\u1efb\0\u1f62\0\u1fc9\0\u2030\0\u2097\0\u20fe\0\u2165\0\u21cc"+
39684	SegmentReader[]
41578	allTerms.add(simpleRandomString(random));
44657	U+1E2A:
654	MockIndexWriter(Directory
4092	doc.add(field8);
51641	merge.segments.remove(info);
41050	prefixes.get(scratch);
22580	internals
32275	testNativeFSLockFactoryPrefix()
25239	"abc*",
52879	CONSEQUENTIAL
31697	assertEquals("WhitespaceAnalyzer
44749	U+1E2C:
15144	lazyFieldNames)
57301	obs.bits.clone();
29739	"\1\25\1\0\3\25\3\0\2\25\4\0\3\25\1\0"+
9723	"\1\0\2\32\7\0\3\32\2\0\2\32\5\0\4\32"+
23621	flushAtDelCount);
17749	you'll
26819	-DocumentsWriter.CHAR_BLOCK_SIZE;
18547	"Õ¥Õ¶",
33936	visible.<br>
5911	MASKS[bitsPerValue];
5647	floatToByte315
28468	bcde
35944	insertDoc(IndexWriter
56001	#setLength}
62821	3.4,
44692	U+1E2B:
44800	U+1E2D:
38212	(lower
11389	"\12\u04ab\1\u04ac\175\0\4\u04ad\2\0\1\u04ad\15\0\1\u04ad"+
43254	assertTrue(tdocs.skipTo(5));
3726	bufferlength
7732	\u3333}",
22117	negative);
10150	"\1\140\13\36\1\372\6\36\1\373\7\36\1\141\12\142"+
3842	IO_BUFFER_SIZE
10536	"\6\136\12\u01af\1\0\3\136\1\0\2\136\1\137\3\136"+
52110	delterm
5308	input_stream.getBeginLine();
22087	https://svn.apache.org/repos/asf/harmony/enhanced/classlib/archive/java6/modules/luni/src/main/java/java/lang/Integer.java
44523	"ê»"
45566	"ê"
31849	org.apache.lucene.util.FieldCacheSanityChecker
49827	parentheses
25583	HashSet<ReaderField>(17);
27556	"\u00AD\u0027",
82	governing
44751	U+1E2E:
59582	"\1\355\1\36\1\355\4\36\1\355\10\36\1\355\2\36"+
35301	setskipdata
6864	newIntRange(final
25671	Multi-Line
33035	src.hashCode());
2226	toString()
29291	parallelarraytermvectormapper
38678	differs.",
38949	fieldinfos2
38947	fieldinfos1
39383	super(ie);
25448	dirty
42306	payload.byteAt(testData.length
9190	bytesUsed;
33248	introducing
42446	(payload.numFieldInstancesToSkip
26660	protocol
29155	tvf.readByte();
44802	U+1E2F:
41142	maxNumWords,
26290	(int)((8L
14821	other.reverse
35429	Token(ofKind,
61134	"\1\u058a\6\0\12\u058a\1\u058b\13\0\1\u02e1\160\0\1\u0349"+
35382	Token.java
44245	"ê¾"
45521	"ê"
37286	stopWords
58890	Info
33712	PhraseScorer
27045	"\r\u0308\u003A",
39871	hasDeletions;
32450	getabsolutepath
37084	fst.startNode
2044	arcIdx=0;arcIdx<node.numArcs;arcIdx++)
5908	0:1));
51484	merge.readerClones.get(i);
12295	u978a
18077	MultiSearcher,
59828	"\4\0\2\137\150\0\1\u0153\24\266\1\u0157\5\266\1\142"+
22775	0.0
66452	Init
41458	Util.toDot(rewrite,
66439	(termID
26900	Numeric}
55956	WeakReferences.
10545	"\1\u01c0\1\141\1\u01c1\2\264\1\u01c2\1\u01c3\1\u01c4\1\264"+
30599	"\3\0\2\27\1\0\1\27\4\0\1\27\1\0\1\27"+
64487	(includeSpans.doc()
52565	MultiSearcher.
65765	d.add(newField("f",
39294	idfexplanation
8345	VerifyingLockFactory
61586	u976c
27803	"\u0061\u0027\u2060\u0308\u3031",
27875	"\u0061\u002C\u0308\u0061\u0027",
36236	last");
45923	"ê"
56198	TestTermEnum.
12696	u9780
21910	0){
67481	(refreshReader(r,
48688	test_dir
34052	pp.rptGroup==-1
55514	assertEquals("omitTermFreqAndPositions
57835	assertnounreferencedfiles
9353	"\11\132\1\0\1\132\2\0\7\132\3\0\1\133\4\0\6\133\1\0"+
42649	English.intToEnglish())
67946	GraphTokenizer(reader);
63333	0x7521,
30699	"\1\65\4\0\1\65\2\25\2\65\10\0\1\26\1\0"+
44631	"ê¿"
57438	lowers
38295	0x800024,
41311	is.readLine();
49174	HashMap
61096	"\15\0\1\u056d\6\0\12\u056d\1\u04d5\174\0\1\u0168\4\u056d"+
51276	segName);
36053	testRangeQuery()
25831	this.clone();
20988	usable.
36717	cachedRootArcs[labelToMatch];
40095	ReaderCommit(latest,
18746	wiki,
10114	"\1\352\10\36\1\352\1\36\2\352\10\36\1\141\12\142"+
15083	testLazyFields()
5798	elementBits++)
6639	lowest
58624	smoketests
33007	utf16toutf8
53623	belong
41713	arc.output.longValue());
38213	lower)
4143	lower,
208	0);
54018	0):
30207	enumerator.position
24388	parseFloat(final
65812	CountingHitCollector();
34509	sb.append("maxThreadStates=").append(maxThreadStates).append("\n");
4320	lower;
5163	((0xfffffffeffffffffL
60964	"\2\137\150\0\1\u0101\32\266\1\142\10\266\1\u04eb\1\266"+
28989	IndexFileNames.VECTORS_INDEX_EXTENSION);
32046	counterpart
58210	<b>UTF8</b>
9805	"\41\0\1\25\2\26\2\0\2\76\1\77\1\0\1\26"+
64939	testmultithreadtermvectors
28010	"\u0031\u002C\u0308\u0300",
50279	<i>near</i>
19403	knows
32080	0's
23594	(count
35130	pt(String
42815	greater:
15922	dir.hashCode()
15483	known
24337	0))
36543	destPos="
4365	0),
39554	(ch1
66490	(ch2
31660	increased
13097	u9776
26895	http://www.unicode.org/Public/6.0.0/ucd/LineBreak.txt)
31797	IndexWriterConfig(matchVersion,
54400	setValue(float
5668	tohexstring
24176	getRandomNumberString(int
11223	"\1\u0429\15\0\1\u0429\6\0\12\u0429\1\u03da\13\0\1\u0325"+
33279	expectedLastRecordId=100;
3229	increases
30730	southeast
45949	"ê"
15512	this.docCount
50140	(buffered
4496	testrandomtrieandclassicrangequery
64463	(!include.getField().equals(exclude.getField()))
40413	greatest
56513	skipcalled
22988	MultiSearcher}
38294	0x800020,
61062	"\14\0\1\u02e1\161\0\4\u054a\2\0\1\u054a\15\0\1\u054a"+
27106	"\n\u0061\u0027",
6990	dataType
22254	long[oversize(minSize,
22524	"positionIncrement",
4649	m.getName()
33523	"cccc"
45455	"ê"
1993	15;
22477	reflectWith(new
5038	15:
56214	Term("default",
21772	IndexReader#document(int)}.
11277	"\175\0\1\346\12\230\1\u0457\17\230\1\347\12\230\175\0"+
22350	insertion
24756	LUCENE-3390:
20340	150
45149	U+1E45:
68139	RollingBuffer.Resettable
25341	Testcase
10019	"\5\0\3\25\1\0\1\25\5\0\1\25\2\64\5\0"+
59598	"\1\141\2\355\2\36\1\355\3\36\1\355\5\36\3\355"+
36228	flag);
5042	16:
32695	encodedLen2)
20029	#BooleanQuery(boolean)
9661	16;
57094	wlen);
45108	U+1E44:
32718	ByteBuffer.wrap(decoded);
21181	getFieldCache()
62485	coordinator.nrMatchers
33894	fillQueue();
52551	limitations:
26314	15L
57379	i=a.wlen-1;
26972	APOSTROPHE
52126	warranted
43243	16)
45440	"ê"
60496	"\1\352\12\232\175\0\1\351\21\232\1\u0378\6\232\1\u0379"+
62437	requiredScorers;
45471	"ê"
17273	synchronizedset
45076	U+1E43:
7146	x733fa5fe
48337	DisjunctionSumScorer
49348	newMatchAllDocsQuery()
2060	17;
28088	QUOTATION
66428	Secondary
5043	17:
34046	rpp)
19342	testsupplementary
32477	TestTransactions.doFail
667	17)
8725	i=0;i<docCount;i++)
4953	17,
29027	16L
34092	rpp,
3299	(and
45457	"ê"
27867	"\u0061\u002C\u0308\u00AD",
31810	(!IndexReader.indexExists(dir))
42900	prototype.flags;
45047	U+1E42:
23850	PruneByAge
5104	18:
57485	18;
67914	posLength;
38596	dirFile
67477	18)
5199	18,
19822	log(s.explain(q,h[i].doc));
21157	FixedBitSet},
21147	FixedBitSet}.
6619	(all
19715	phraseFreq()
30333	10]
45564	"ê"
55430	nfields
39346	disi)
5101	11:
5083	11;
9953	"\4\0\1\204\14\0\1\61\4\0\1\205\2\0\1\206"+
721	close:");
18122	disi,
32329	results");
4956	11,
8119	FileChannel
45153	U+1E49:
67099	ClassicFilter},
51854	10s
3027	128
28634	123
5097	124
5102	12:
45473	"ê"
9090	12;
42197	att.setPositionIncrement(1234);
38879	closeCount[0]
22086	12.
7268	example
38668	maxDoc.",
45112	U+1E48:
50073	os.copyBytes(is,
52973	12)
15916	s.toString();
4958	12,
60593	"\11\232\175\0\1\351\6\232\1\u03db\23\232\1\352\12\232"+
32687	encodedLen1)
60900	"\1\u04ba\6\0\12\u04bd\1\u04bb\13\0\1\u033c\160\0\1\u03a1"+
52102	today
16533	MyObject
5035	13:
5041	13;
3466	Returns
2703	totalTLCResults
50515	read/written
36584	<code>arc</code>
33063	12345,
5040	13)
36119	dead-end
48201	subSpansByDoc[subSpansByDoc.length
65176	input.length);
29548	StandardTokenizerImpl31
45151	U+1E47:
20315	130
34562	pluggable
14586	enters
42579	ReusableStringReader
5037	14:
57698	14;
29782	"\1\77\2\0\1\100\21\0\1\101\17\0\1\25\1\102"+
37455	testNotCloseEnough()
38467	indexedFieldNames.size());
60798	"\2\0\1\u0472\15\0\1\u0472\6\0\12\u0473\1\u040f\13\0"+
56824	testnewestsegment
16188	docFields.length;
65889	createrandomterms
40558	br.length
22990	ReturnS
45518	"ê"
51997	(ramBufferSizeMB*1024*1024);
4887	testindexwritersetters
15379	testlatentfields
25860	14)
66717	Values</h3>
18950	14,
2291	addAttribute(PayloadAttribute.class);
59872	"\1\351\1\232\2\u016f\1\u0170\1\u0171\10\u016f\1\232\1\u0172"+
61032	"\10\232\175\0\1\351\13\232\1\u052f\16\232\1\352\12\232"+
7846	java.nio.BufferUnderflowException;
38874	onClose(IndexReader
45110	U+1E46:
65234	validOutput(T
53827	stringIterator();
10992	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\11\264"+
45391	"ê"
6544	you've
67620	commit.getUserData();
66699	testerrorbefore
39154	allTerms
11087	"\31\230\1\347\12\230\175\0\1\346\32\230\1\347\11\230"+
26278	original.arrayOffset());
35191	docboost
30337	failOnCommit
27422	"\u0030\u0308\r",
14926	x08150815
2145	nextfinaloutput
9096	1;}
57102	getBits()
31605	id++);
45362	"ê"
14984	q1.add(t);
63514	','.join(tbl)
29445	PROP_KEY1
27295	"\u003A\u0308\u3031",
7704	constructors
21579	preLen
27192	"\u3031\u005F"
46802	inputText
59318	"\1\61\14\0\1\62\4\0\1\63\2\0\1\64\41\0"+
57928	(extension.startsWith("s")
38831	subs[i].getUniqueTermCount());
47821	parenthesis
4808	writer.getConfig().getMergePolicy().getClass());
32073	getinfostream
15188	cache???
4329	(last
59630	"\1\25\2\0\1\25\1\141\3\36\1\355\1\36\1\u0100"+
66088	anyway:
29621	"\3\132\1\0\7\132\3\0\4\132\2\0\6\132\4\0\15\132\5\0"+
45410	"ê"
25845	spanNearQuery.inOrder)
11121	"\1\u0325\160\0\1\u0386\4\u03d9\2\0\1\u03d9\15\0\1\u03d9"+
50101	constructor}
55933	WeakReference<T>(object));
32530	(byte)0xE4,
42072	anyway.
67141	correlate
4700	toString",
28809	//remember
45373	"ê"
19545	closeWhileHandlingException(Iterable<?
15104	field.stringValue();
25097	preserved,
3796	preserved.
62912	normSuffix
56665	simplistic
27482	"\u0030\u0308\u0031\u002E\u2060",
19916	testfieldscorequery
67069	this.seeksCounter
242	2",
38718	index2.isDeleted(i));
48854	offset[j];
31846	19,
19296	you're
5048	19)
45114	U+1E4A:
45438	"ê"
7870	JRE,
2295	payloadAtt.setPayload(new
65171	frontier[0].isFinal
22810	550356204;
33373	rollbackdeletionpolicy
41078	prefix.length-1;
56762	2.0F);
36024	2.5f;
42249	"#keyword",
5045	19:
5049	19;
16873	orig.clone();
57852	JRE.
16427	psdp,
20342	random.nextInt(10000)
34373	in-memory
63552	(wordShift
42281	copied
16030	((TieredMergePolicy)
11170	"\32\230\1\347\10\230\1\u03ff\1\230\175\0\1\346\25\230"+
45436	"ê"
10254	"\2\76\1\77\1\0\1\26\2\0\1\25\1\u011a\32\36"+
34567	PayloadTermQuery(Term
2332	be",
66334	nextPerField.abort();
20724	copies
30156	threadResources.close();
42459	payloadAtt.setPayload(p);
66242	randBoolQuery.
2951	pizza
37840	LetterTokenizer(AttributeFactory
67687	OutputStreamDataOutput(OutputStream
41624	(arc
45416	"ê"
17094	numterms
20118	c.getQuery().toString()
20603	CharTokenizer#isTokenChar(int)}
14924	xaf5998bb
23469	"recoverable"
59942	"\1\137\4\0\2\137\150\0\1\136\32\266\1\u018f\12\266"+
33974	sortRptGroups(rgs);
63510	(arr
62488	requiredScorers)
18705	Ø§ÙÚ¯ÙÛØ³Û
10883	"\4\264\1\u0309\25\264\1\141\12\264\1\0\3\136\1\0"+
20293	(1024
22272	RamUsageEstimator.NUM_BYTES_CHAR);
12292	u95a1
10522	"\162\0\1\u017f\45\u013f\1\u0167\2\u013f\1\u0180\1\u0167\2\u013f"+
51992	setFlushPending("maxBufferedDeleteTerms",
10181	"\1\136\1\143\1\136\1\0\2\266\1\137\3\136\2\0"+
62504	requiredScorers,
17363	aDocs
16189	doc.add(newField(KEY,
45413	"ê"
22631	constructor,
2220	findForcedDeletesMerges(SegmentInfos
16389	psdp;
3904	constructor.
65495	startingCommitDeleted;
27820	"\u0061\u0027\u2060\u0300",
48572	(field.getOmitNorms()
52345	verifyPayloadExists(Directory
30460	segmentmergeinfo
55920	weakRef
36786	BytesReader(byte[]
61203	"\1\u05c1\6\0\1\u05c2\2\u05c3\1\u05c2\5\u05c3\1\u05c4\175\0"+
37770	positivescoresonlycollector
13352	u3a76
2351	hits.scoreDocs.length;
57024	1,000,000
2133	nodesequal
2774	myHc.hitCount()
17216	listener.onClose(owner);
35810	rd1.close();
40493	assertFinal();
5532	((exponent+(63-15))
31992	Array
49053	StringReader("")));
29683	"\0\u0338\0\u039f\0\u0406\0\u046d\0\u04d4\0\u053b\0\u05a2\0\u0609"+
45750	"ê§"
21754	opendelfilecount
33813	rg[k]);
58995	ii.seek(1<<i);
18998	randomTextWithEmails;
43609	IllegalStateException("DeletesMode.DYNAMIC
37126	outputstreamdataoutput
12951	u3a80
14966	q1.add(t2,
44992	U+1E3B:
19012	randomTextWithEmails,
42908	setEmpty().append(newTerm);
44994	U+1E3D:
14648	CUSTOM
36513	bytes="
39594	output.writeVInt(ti.skipOffset);
40983	pair.input),
44956	"ê"
40097	files[i];
38153	neededShifts
41130	assertEquals(ent.getKey().length,
15540	src.docStoreIsCompoundFile;
21382	os.writeByte((byte)
44946	U+1E3C:
14978	q1.add(t3,
60948	"\2\u04da\1\u04db\1\u04da\1\u04db\1\u0497\13\0\1\u0126\226\0"+
55312	addUTF8Token(int
32499	testTransactions()
28943	(o.getClass()
4316	"field4"));
21061	(success)
31090	pos=");
41460	Builder<Long>(FST.INPUT_TYPE.BYTE1,
38629	LUCENE-140
49189	setRangeCollator(Collator
64428	decompress(byte[]
56099	"p")));
21246	while(remainder
31177	happy
44999	"ê"
55529	testpositionincrementgap
21631	wildcardSearchPos
52478	valsize
54885	waiting(long
19627	int[CHUNK];
64823	validTerms[loc].utf8ToString()),
55615	r1.document(150);
19042	"subject",
45001	"ê"
17467	parallel.close();
9922	"\2\0\1\25\1\0\1\25\4\0\1\25\2\0\2\25"+
52251	setflushpending
20331	replay(),
44944	U+1E3A:
4654	Ensures
7584	retval.append("\\b");
11254	"\1\u0444\15\0\1\u0444\6\0\12\u0444\1\u0445\13\0\1\u0122"+
48507	"sloppy"
16521	Otherwise,
206	1",
38080	longVals[i-1]
53095	0x3FF;
23950	org.apache.lucene.index.CorruptIndexException;
61625	ub041
45360	"ê"
2899	milliseconds
50400	drop(SegmentInfo
9772	"\32\36\1\141\12\142\1\65\1\136\1\143\1\136\1\0"+
34780	demonstrate
59984	"\1\u016c\1\u016d\1\u016e\2\0\2\u016d\156\0\51\u016e\1\u01a8"+
64361	termcountcutoff
39109	"Microsoft",
13136	ub04b
48192	advanceAfterOrdered()
1305	iw.close();
12735	ub055
50371	readerMap.containsKey(sr.getSegmentInfo());
45260	"ê"
50297	foreign
54345	UAX29URLEmailAnalyzer
54293	offsetHash.addByPoolOffset(hash.byteStart((-key)-1));
45043	U+1E3E:
12334	ub05f
30491	fieldsortedtermvectormapper
3305	well
54264	hash.get((-key)-1,
60238	"\2\0\1\u0289\15\0\1\u0289\6\0\12\u028a\1\u0228\13\0"+
34889	dumbquerywrapper
45263	"ê"
60300	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\24\266"+
20531	Lucene's
45072	U+1E3F:
52861	PARTICULAR
17318	booleanQuery.add(termQuery,
67070	search();
52653	getDeclaredMethods()
63101	nextSave
8295	invoke
44601	"ê¾"
46755	FRACTION
10615	"\1\141\5\264\1\u01f4\4\264\1\0\3\136\1\0\2\136"+
20465	1";
32965	lastPositions
41237	IntsRefFSTEnum<Long>(fst);
6349	flags[i]);
9834	"\3\25\1\0\6\25\1\0\1\25\1\64\1\0\1\25"+
27986	"\u0031\u002C\u0308\r",
35032	buffer.append(")->");
36854	inCounts[scratchArc.target]
2493	sloppyFreq(int
6095	t.setPayload(pl);
25105	"nowildcard"));
16158	numtocollect
9225	1.6
63878	testIsTokenCharCharInSubclass()
53107	1.5
33455	1.9
49034	rangeCollator
20292	1.0
32732	encodedLen);
9092	getFileNames()
14619	1.4
4605	assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS,
38492	TermVectorEntryFreqSortedComparator());
5006	0L)
66459	numPostingInt*ByteBlockPool.FIRST_LEVEL_SIZE)
59847	"\1\322\1\323\1\324\1\325\1\326\1\327\1\137\1\u015c"+
17567	1-4
9579	"\1\uda5b\1\udafe\1\udba1\1\udc44\1\udce7\1\udd8a\1\ude2d\1\uded0"+
36903	inputs
60746	"\1\u0448\1\232\175\0\1\351\25\232\1\u016f\4\232\1\352"+
8118	0L;
55846	testaddindexesanddodeletesthreads
38007	0L,
52567	1-1
36446	startAddr="
50741	10.
8360	(should
40550	org.apache.lucene.util.fst.PairOutputs.Pair;
2411	10,
23050	IndexSearcher(indexStoreA,
5024	10)
774	input)
57516	dataPagedBytes.getDataOutput();
58722	10%
33901	collisions.
51305	retrievable
33954	collisions,
19668	.nextDoc()
5025	10;
5099	10:
22523	reflector.reflect(PositionIncrementAttribute.class,
18113	disi;
39131	(terms[i].field()
44111	"ê¼"
128	100
4852	covered
61282	"\2\u02e2\1\u03c1\7\u02e2\175\0\1\u034d\32\u02e2\1\u034e\3\u02e2"+
53980	disk:
57683	this.values
57393	xbatch
23048	IndexSearcher(indexStoreB,
65168	input:
29977	"\1\103\2\0\4\103\2\0\1\103\42\0\1\116\37\0"+
18765	"ÏÎ¿",
6402	input;
16298	BooleanQuery(true);
58521	assertTrue(copy.containsAll(stopwords));
7911	disk.
49267	(positionCount
62609	testFlat()
51544	disk,
32497	initIndex(Directory
9870	"\1\26\5\0\1\26\2\0\3\26\7\0\1\26\1\0"+
5637	-server
40634	pairs.add(new
51412	1/2
2288	input,
10345	"\7\264\1\u0103\22\264\1\141\12\264\1\0\3\136\1\0"+
11808	input.
56967	1154)
2350	1);
58895	IndexOptions
3605	setonce
648	while(System.currentTimeMillis()
8272	setuseunmap
310	were
11638	"\14\0\1\u02cf\161\0\4\u055e\2\0\1\u055e\15\0\1\u055e"+
45045	U+1E40:
52944	result.offset
12694	u963a
41549	sortedAllIDsList.get(idv+1);
21112	dummyconcurrentlock
29449	TestSystemPropertiesInvariantRule()
42439	PayloadData(0,
41280	((Long)
9348	"\1\133\1\132\7\133\1\0\3\133\1\0\4\133\7\0\2\133\7\0"+
31904	FieldCache.class.getName()+".DEFAULT_BYTE_PARSER";
12293	u9644
41576	while(allTerms.size()
10131	"\1\136\1\0\1\136\1\144\1\137\3\136\3\0\1\136"+
59043	testseekzero
65669	rc.DecRef())
48639	stream.close();
4771	setters
42667	1))
44953	"ê"
45074	U+1E41:
47900	Needed
1193	String[]
20454	1).
6146	"#payload",
46113	"Å½"
55503	omitTermFreqAndPositions
32260	assertFalse(l2.isLocked());
56167	cswcq
66735	Float.valueOf(String)}
25516	item);
36325	this.startNode
22015	proxout
52585	1){
11515	"\1\347\11\230\1\u012f\175\0\1\346\3\230\1\u0507\26\230"+
18677	à¦¬à§à¦¶à§
10861	"\12\230\175\0\1\346\4\230\1\u02f6\25\230\1\347\12\230"+
49900	minute
35787	ParallelReader}s
19061	wordBreakTest
24282	SortField.INT
41607	(depth
13095	u9630
9456	"\1\0\1\12\10\0\3\3\15\0\3\12\6\11\3\0"+
25821	getSpans(final
61484	"\6\u02e2\1\u0428\23\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
9714	"\2\0\1\25\3\0\1\25\117\0\1\25\52\0\3\25"+
61584	u9626
16001	(anyErrors())
40792	fst.readNextArc(arc);
59774	"\17\36\1\142\12\143\1\u0142\1\137\1\144\1\137\1\0"+
35067	flush();
65874	doNestedConjunctions(500,3,3);
42301	payload.toByteArray();
34514	setter2
34513	setter1
19305	testtextwithnumberssa
809	tokenizer.setEnableChecks(false);
41738	r[2].input);
41626	fst.readNextArc(arc),
4451	NumericRangeQuery.newIntRange("test14",
16466	PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);
27941	"\u0031\u0027\u3031",
58887	this.done
21590	searchText,
29193	VInts,
1064	addDoc(w);
45555	U+1E59:
48850	assertTrue(offset.length
64221	<li>That
25248	matchOneDocWild[][]
60831	"\22\u02e2\1\u034e\12\u02e2\175\0\1\u034d\27\u02e2\1\u0428\2\u02e2"+
6753	numbers.
18897	numbers,
12291	u94fe
33101	term",
8270	semantics
30241	TermInfos
28131	auxiliary
41273	fail("fstEnum.current().input="
64129	1;//since
64796	idx=0;idx<validTerms.length;idx++)
22920	acceptstatus
67176	//else
44922	"Ä¹"
45507	U+1E58:
8534	...
17519	w2.addDocument(d3);
54720	wide
17246	shows
3120	8*curDocs.length;
58289	compare(BytesRef
65401	assertEquals(314,
37934	unfold
29588	"\1\0\4\133\1\132\10\0\1\133\10\0\2\132\2\133\2\0\12\134"+
52067	startingcommitdeleted
39079	assertEquals("[1]",cm.values().toString());
54123	MockSynonymFilter
13137	ub0ee
32512	initIndex(dir2);
64526	include.hashCode();
52075	setmaxmergedocs
60148	"\6\0\12\u022c\1\u019d\13\0\1\u0126\160\0\1\u0168\4\u022c"+
18867	String[]{"some",
28732	testprefixfilter
18797	"à½¦à¾£à½¼à½",
11440	"\2\0\1\u04ce\15\0\1\u04ce\6\0\12\u04d1\1\u04cf\13\0"+
58806	testAllUnicodeChars()
26955	CAPITAL
50314	TermInfo.
18562	"ááªááµá«
43338	sortedInts)
43343	sortedInts,
43973	"áºª"
43804	assertTermEquals("IJ",
56818	postcount
49985	{directory}
46109	"Å¹"
30093	TermInfo>
12736	ub0f8
66515	30);
9732	"\1\0\1\32\1\0\1\32\113\0\1\32\1\0\1\32"+
43427	newbytes
62138	nested1.add(new
2987	base
67717	resizeBuffer(newSize);
27756	"\u0061\u0027\u0308\u0041",
9694	"\2\25\1\0\5\25\1\0\6\25\1\0\3\25\2\0"+
56985	Helper
23931	searchertracker
27749	"\u0061\u0027\u0308\n",
53672	Term("english",
26437	advanceBytes
36571	ArrayUtil.grow(inCounts);
63045	"\"-\"",
17333	getDocIdSet():
55032	System.out.println("\n\nTEST:
45431	U+1E55:
5309	beginColumn
63	software
8188	this.curBuf
42910	to.reinit(this);
64358	termCountCutoff)
21967	tocopy
30941	tdc.topDocs(10,
50338	(getReader()
3431	readerClones;
9000	suffix;
16090	testatomicupdate
24628	mandatory
42933	"flags",
48797	(!testFieldsStorePos[i]
64305	termCountCutoff;
43709	justcompilepayloadspans
29712	"\5\0\3\25\1\0\1\25\15\0\1\25\10\0\1\25"+
29514	intestmethod
55902	ThreadLocal<WeakReference<T>>();
66130	qtxts
45403	U+1E54:
27005	"\u0061\u2060"
24228	(Directory
39054	NOT_IN_MAP
43070	#acquire()}.
7375	extending
45054	"ê¿"
57011	re-implement
6420	input.mark(readAheadLimit);
43677	calendar.clear();
65982	ee\")",
45433	U+1E57:
60747	"\12\232\175\0\1\351\32\232\1\352\5\232\1\u0449\4\232"+
6993	(!minInclusive
40443	lucene_36
48506	discounts
7207	bar,
54250	SortedSet<String>
42513	testpayload
61264	"\2\u0601\2\u0602\1\u0601\1\u0602\1\u0601\1\u0600\13\0\1\u02e1"+
4547	checkequal
16574	this.maxSize
50630	message("setMergePolicy
22469	prependAttClass=true}:</em>
51139	).</p>
53744	startSize,
31679	testupgradeoldsinglesegmentindexwithadditions
14914	longparser
45405	U+1E56:
4029	lucene_31
48308	insamedoc
4016	lucene_30
40439	lucene_33
65906	qtxt,
15553	hasSingleNormFile
34523	lucene_32
40441	lucene_35
40440	lucene_34
27092	"\n\u0027",
37346	lucene_29
1241	w.addDocuments(docs);
27083	"\n\u0308\u000B",
55984	TermVectorOffsetInfo.EMPTY_OFFSET_INFO;
48251	1].start();
65110	inputCount="
58787	LUCENE-510
64409	compressor.setInput(value,
38209	random.nextInt(16384*1024);
41326	builder.getTermCount()
52975	substitution
8405	Class.forName(lockFactoryClassName).asSubclass(LockFactory.class).newInstance();
29279	tvdposition
34688	#StandardFilter(Version,
36995	useArcArray
40436	lucene_21
38432	assertNotNull(fieldInfos.fieldInfo("unstored"));
40437	lucene_22
50977	improved
40438	lucene_23
34881	lucene_24
14575	zzrefill
40435	lucene_20
49249	buffer.getAttribute(CharTermAttribute.class);
65743	o.type
22507	introspection
11454	"\2\u04dc\1\u04db\5\u04dc\1\u04dd\175\0\1\u0332\4\u04de\2\0"+
25449	#check
45509	U+1E5A:
56836	"\213\0\1\12\13\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12"+
57390	0x98761234;
25204	wild
31188	"21.cfs",
26228	bytes):
22900	bytes);
38047	300,
9173	bytes),
43091	//@Test
35415	this.image
8898	cacheable.
945	will
8392	System.exit(1);
58949	getParser(Analyzer
56931	"\1\43\4\0\1\42\1\43\1\0\1\13\2\0\3\13"+
9117	getgeneration
39838	instead");
32542	IndexableBinaryStringTools.decode(encoded);
30372	isNull
2522	payloadmultifield1
2523	payloadmultifield2
64104	theBytes,
15398	isbinary
35390	preceding
26049	visibility,
39205	result.addDetail(queryExpl);
37683	setenablepositionincrements
8163	short
62260	"jones")
53984	bytes()
26945	3031
56109	result[0].score;
38740	curField2.stringValue());
38605	assertFalse(IndexWriter.isLocked(dir));
19222	wiki
449	createdocument
8467	makelock
45511	U+1E5C:
66975	assertEquals(docsToAdd,
29771	"\1\0\1\53\1\0\1\53\1\54\1\0\1\25\2\0"+
23829	restart
4880	ram_size_mb
49753	(token.next=token_source.getNextToken()).kind);
60202	"\32\u01cf\1\u01ce\12\u01cf\1\u01d0\2\u01ce\1\u01d1\3\u01ce\1\u01d2"+
32156	recyclebyteblocks
67115	IOUtils.CHARSET_UTF_8),
18540	"13",
30707	"\1\65\42\0\1\103\37\0\1\103\1\0\2\103\16\0"+
4413	last>act
54835	NRTManager.
10028	"\1\25\1\65\5\0\1\25\2\0\1\25\2\0\1\25"+
45557	U+1E5B:
51565	//System.out.println(Thread.currentThread().getName()
9140	doc.numStoredFields
22021	NRTManager}
64730	"bb2"));
62542	combined,
29054	numTotalDocs)
161	segment
7447	tokenCount
56128	search.search(rq,
61626	ub0e4
5214	((jjbitVec0[i2]
50858	segmentInfos.totalDocCount();
31173	createSurrogatesIndex("index.surrogates");
205	assertEquals("after
40822	(UpToTwoPositiveIntOutputs)
43232	Term("content","aaa");
49699	jj_2_rtns.length;
16537	'better'
65850	doSloppyPhrase(IndexSearcher
9702	"\6\25\1\0\1\25\1\26\1\0\1\25\2\0\3\25"+
27534	"\u005F\u0031\u0027",
5351	error_column
43464	SpanNearQuery([A,
67029	testramdirectory
8527	sure,
28981	numTotalDocs;
9986	"\3\136\3\0\1\136\1\162\3\0\2\136\2\0\1\216"+
58167	sure.
64638	#readInternal(byte[],int,int)}
31313	reader.document(hits[i].doc);
61582	u94e0
64775	terms[seen.size()]
55982	org.apache.lucene.analysis.Token
51023	maxNumSegments;
49475	jj_consume_token(OR);
49181	(resolution
8911	_innerSet.iterator();
21580	pre.length();
51014	maxNumSegments,
43891	U+$code:
26936	(LF)>
29534	cache.getFloats(reader,
50986	maxNumSegments.
43614	coreKey
50874	non-compound
62899	testDeleteLeftoverFiles()
50981	maxNumSegments)
12692	u94f4
14700	this.reverse
1045	first");
59985	"\6\u016e\3\0\2\u016e\4\0\1\u016e\151\0\1\u01a9\32\232"+
20600	setprevioustokenstream
58060	free(PerDoc
13093	u94ea
34103	(O(n^^2)),
39988	subReaders[i].docFreq(t);
63193	<code>Zero</code>
23191	indexSearcher1=new
21034	bytes";
62156	q.add(subQuery,
32879	tvf.writeVInt(numPostings);
37239	locality
36213	other.output;
42116	ints.length
54046	advancenormgen
28856	intPool
38042	Integer.MIN_VALUE+2,
18078	highlighting.
9039	term1,
28812	skipPointer
66206	+xx
61627	ub187
13094	u958d
49061	TopLevelQuery
28062	"\u0031\u002E\u2060\u0308\u0061\u003A",
40184	readerTermDocs
19902	(!warned)
23108	document.add(newField("other",
12693	u9597
49754	jj_nt.kind);
13138	ub191
9072	copychars
19016	LUCENE-3880
67057	term2"
7919	supplies
38041	Integer.MIN_VALUE+1,
9040	term2)
2257	org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
62295	qr.extractTerms(set);
22816	-1674416163;
7485	TermVectorsTermsWriterPerThread
61583	u9583
22852	isinfinite
65382	initialCommit)
25595	ReaderField(kidKey,
29321	#nextPosition()}.
49791	((jj_la1_0[i]
21281	expected[i],
49223	CONJ_OR);
41209	3.x:
21717	//System.out.println("numDocs="
16227	bqtest(makeQuery(queryText),
41222	terms...");
33181	TestAttributeImpl();
25282	System.out.println("matchNone:
24573	bs.set(docs1.scoreDocs[0].doc);
34976	3.x,
39915	(segmentInfos
55066	w.setMaxMergeDocs(Integer.MAX_VALUE);
11456	"\160\0\1\u0332\4\u04de\2\0\1\u04de\15\0\1\u04de\6\0"+
26475	outputoffset
37477	moves",
26326	encode(ByteBuffer
52226	getanynonbulkmerges
41618	generate(out,
43648	Right
47779	nineteen
6220	boosts)
11926	back
1773	supplied
33228	testattributeimpl2
66207	+w2
28605	String(buffer,
56815	onesecondresolution
3014	original
63961	assertFalse("TestTokenStream3
45155	U+1E4B:
39235	result.setValue(queryExpl.getValue()
62143	nested2.add(new
59296	"\4\0\1\133\14\0\1\62\4\0\1\134\2\0\1\135"+
22732	(FieldCache.IntParser)
20877	analyzerperfield
58438	set.add(NOT_IN_SET);
50340	readerMap
27918	"\u0031\u003A\u0308\u0061\u003A",
20278	condition
45227	U+1E4C:
8306	curbufindex
41255	nextIter=0;nextIter<10;nextIter++)
56192	numbered
38998	assertEquals(hm.size(),
59329	"\1\153\1\137\1\0\2\154\1\140\3\137\2\0\1\77"+
51630	sourceSegment
28372	visitsubscorers
50352	segmentInfos.indexOf(info);
52843	whom
9254	bytesused
25813	buffer.append("spanNear([");
45322	U+1E4D:
12737	ub19b
8190	(ArrayIndexOutOfBoundsException
41097	scratch.length--;
65323	owner.validOutput(outputPrefix);
57382	i=b.wlen-1;
10870	"\23\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
45229	U+1E4E:
18613	"Ø¨Ø§ÙØ£Ø±ÙØ§Ù",
49281	multiTerms.size()
66075	-f2:two
18282	d4.add(newField("hed",
44758	"ê¾"
41065	prune");
3351	threshold
32630	(char)randomInt;
43431	Basic
20327	'src'
35421	MyParserConstants.ID
7616	errorColumn
45324	U+1E4F:
48475	<code>Similarity</code>
38540	HashSet<String>(),
42182	att.toString());
5996	org.apache.lucene.analysis.tokenattributes.*;
21161	term's
45231	U+1E50:
53183	corporation
8937	term);
12335	ub102
4623	HashSet<String>();
2317	English.intToEnglish(i)
67825	sis.size());
4893	setmergedsegmentwarmer
26351	outputArray,
36559	bytes[left];
40510	Consumers
33722	term),
27737	"\u0061\u003A\u0308\u0031\u003A",
56455	SpanOrQuery(newClauses);
23116	indexWriter=null;
37572	palyndrome,
60071	"\4\u0143\2\137\1\u0143\15\137\1\u0143\6\137\12\u0143\1\0"+
9580	"\1\udf73\1\ue016\1\ue0b9\1\ue15c\1\ue1ff\1\ue2a2\1\ue345\1\ue3e8"+
32967	lastOffsets;
39368	fastset
65120	node.clear();
45326	U+1E51:
43769	Ä³"
35381	nextsetbit
4752	conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);
31390	writer.numDocs());
4137	count*distance
9884	"\1\27\2\0\3\27\7\0\1\27\1\0\2\27\7\0"+
17611	indexreaders
20363	suffice
38320	intvals
28404	assertEquals(builder.toString(),
6006	t.startOffset());
29937	"\2\25\5\0\1\25\1\0\1\25\1\0\1\25\1\0"+
2853	doTestTimeout(false,true);
23779	ConcurrentHashMap<Long,SearcherTracker>();
49334	term){
3918	initialized
45233	U+1E52:
39989	termDocs()
20389	<code>lazyFieldsToLoad</code>,
15551	isCompoundFile
64947	runstodo
35091	(currentBufferIndex
22908	this.payloadToMatch.equals(other.payloadToMatch)
21400	testClonedStreamsClosing()
6270	getPrefixQuery(String
26467	inputarray
5943	shifts[base
54009	cnse);
25037	actualtfcclasses
24144	(data[i][10]
35798	iwOut
55270	v2.getTerms();
45328	U+1E53:
68160	(posUpto
57481	org.apache.lucene.util.PagedBytes;
1758	stored
68060	chartokenizer's
67159	entry.getOffsets();
12015	jira
7083	linkedlist
28858	bytePool
24147	(data[i][11]
6617	stores
57297	prevSetBit(long
2647	initializes
28555	initializer
6884	getEnum(final
6179	boosts;
20637	IndexReader.open(writer,
61323	"\1\u0639\1\u0638\2\u0637\2\u0638\1\u0637\1\u0638\1\u0637\1\u0636"+
43429	bytepos
52395	payloadts2
52394	payloadts1
22748	FieldCacheRangeFilter<Float>
65153	input.length;
67335	couple.refreshedReader;
48038	stable
48060	store.
28776	(numberOfSkipLevels
16841	assertTrue(origSegmentReader.deletedDocs
67762	termBuffer[termLength++]
60383	"\175\0\1\351\32\232\1\352\1\u0310\11\232\175\0\1\351"+
2142	output
11646	"\2\0\1\u0560\15\0\1\u0560\6\0\12\u0561\1\u0554\174\0"+
5502	curtokenimage
1887	"Should
59427	"\210\0\2\33\6\0\1\33\153\0\1\33\5\0\1\33"+
3978	finalOffset);
42344	payloadData
1282	"subs"),
2748	greedy);
62539	ReqOptSumScorer(
36460	writer.writeInt(0);
6664	degraded
25025	testsortwithoutfillfields
10096	"\3\115\1\0\1\115\2\0\4\115\2\0\1\115\303\0"+
4158	Sort.INDEXORDER);
34241	setDefaultWriteLockTimeout(long
62344	assertEquals(s(2,2,3),
7432	around
68011	numIterations;
34216	(because
8958	term()
50743	setMergeFactor(int
38303	0x800000,
3012	instead
22628	prices
30646	"\1\25\1\52\4\0\1\25\2\0\1\25\1\0\1\25"+
55641	mainDir
4633	getters.add("getMaxBufferedDeleteTerms");
65732	segmentprefix1
65733	segmentprefix2
58500	"broken
44114	,"AY",
23442	startDir.setNoDeleteOpenFile(false);
706	thread
48862	testMapper()
38727	fieldable2.size());
27738	"\u0061\u003A\u0031\u0027",
55466	(!hasNext)
10201	"\4\264\1\u010a\5\264\1\u0103\17\264\1\141\12\264\1\0"+
66276	qtype
11453	"\161\0\4\u04da\2\0\1\u04da\15\0\1\u04da\6\0\1\u04db"+
15106	assertTrue(value
25672	Msg,
10986	"\150\0\1\376\15\264\1\u036f\14\264\1\141\12\264\1\0"+
55131	r2.numDocs();
2826	counterThread.getResolution()
9665	"\1\2\1\3\1\2\1\4\1\2\1\5\2\2\1\6"+
41868	assertEquals(300,
57574	getTerm(int
2146	isfinal
7801	fieldselector
64931	vectors.length;
49920	bareoper
49518	WILDTERM:
37580	three:
31101	workdir
8667	addstate
36648	//+
15089	DocHelper.LAZY_FIELD_KEY,
49933	termimage
34106	i<bb.size()-1;
35063	RAMFile());
58229	this(bytes,
40212	read(final
15194	zero):
34642	QUESTION:
25582	rfToValIdSets
25296	wild:
65603	fileName.startsWith(segmentPrefix2))
51824	.checkpoint
60460	"\1\u021e\15\0\1\u021e\6\0\12\u021e\176\0\32\u0281\1\0"+
55101	fieldNameComparator);
67160	//A
35732	zero*/
22812	31);
62571	lastscoreddoc
21803	added.</p>
55712	count.addAndGet(dirs.length*NUM_INIT_DOCS);
32882	TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;
15550	src.normGen.length);
321	termDocs",
26957	(ALetter)
67893	lastOffset
60319	"\13\0\1\u02e3\13\0\1\175\1\0\1\51\1\0\1\176"+
36545	bytesPerArc[arcIdx];
56081	wild)
3573	what
1943	fieldsStream.getFilePointer()
29422	(other.prefix
45633	U+1E69:
23813	(searchers.putIfAbsent(version,
25773	getmsg
5302	jjstrLiteralImages[jjmatchedKind];
54375	TokenStreamComponents(src,
30874	termAtt.resizeBuffer(encodedLength);
40565	IntsRef(10));
41258	//}
43310	getField();
8802	Stack<String>
18138	result.addDetail(new
64745	//r
21625	string...
8800	TestJUnitRuleOrder
45593	U+1E68:
48221	spans2.doc()
36263	willPackFST)
42696	assertTrue("merge
26158	currentMaxValue;
17598	w2.addDocument(d4);
21854	getValues(String
10928	"\2\0\1\u0214\15\0\1\u0214\6\0\12\u0214\176\0\32\u026f"+
11768	IDEOGRAPHIC_TYPE
26185	currentMaxValue)
32511	initIndex(dir1);
59226	"\1\0\1\25\1\0\2\25\1\0\1\25\1\0\1\25"+
20231	(subQuery
32490	r2.numDocs())
36597	arc.node
1456	testsimulatedcorruptindex1
45631	U+1E67:
19764	posenum
48574	index-time
60796	"\1\u033c\161\0\4\u046e\2\0\1\u046e\15\0\1\u046e\6\0"+
42684	doStop
16733	(reader2.hasChanges)
9568	"\1\ua253\1\ua2f6\1\ua399\1\ua43c\1\ua4df\1\ua582\1\ua625\1\ua6c8"+
5763	ENTRY_SIZE
8380	"unique
63933	testingchartokenizernormalize
54773	f.close();
9251	parallel
571	Field.Index.ANALYZED));
30178	access:
34225	16.0;
60141	"\15\0\1\u0227\6\0\12\u0227\1\u0228\13\0\1\u0126\160\0"+
35649	ntz(long
19456	java.io.InputStream;
53538	(totalHits,
51424	flushDeletesCount.incrementAndGet();
18001	signedindexreader
57595	pagedbytesdatainput
34346	access.
53539	hq.getFields(),
45591	U+1E66:
32534	(byte)0xC9,
57293	Long.numberOfLeadingZeros(word);
12336	ub1a5
33030	src.captureState();
65090	(node.inputCount
56069	small.close();
3194	cachedDocs;
53804	nextCharArray()
18712	ØµÙØ±Øª
9746	"\1\25\1\76\32\25\1\0\12\26\2\0\1\77\2\0"+
41672	Builder.UnCompiledNode<Long>
43553	doTestDgaps(1000,4,7);
45680	U+1E6E:
58698	termAtt.append(value);
1513	FieldInfos
3780	Based
18986	urlList.add(line);
41721	BytesRef("aac"),
66463	intUptoStart
64941	threadsalive
23983	"p\u00EAche",
23379	modifier.getSegmentCount());
37147	bit_final_arc
44927	"Ä½"
31671	setindexoptions
8376	obtain/release\n"
49721	jj_gen)
6094	byte[]{1,2,3,4});
34392	approximate.
53254	(that's
8779	keyset
59169	"\3\u47d5\3\u4878\3\u491b\3\u49be\3\u4a61\3\u4b04\3\u4ba7\3\u4c4a"+
4374	int2float
45713	U+1E6D:
10384	"\1\u0164\1\u0162\13\0\1\u0122\226\0\1\u014f\7\0\1\u0167"+
42160	i=offset;i<end;i++)
21729	assertFalse("saw
60795	"\2\0\1\u0472\15\0\1\u0472\6\0\12\u0472\1\u040f\13\0"+
55330	0x800);
34908	testWildcard()
14757	NULL
35754	x3333333333333333l
51289	newFileName);
33067	src3.restoreState(state);
23192	indexSearcher1.setDefaultFieldSortScoring(true,
45678	U+1E6C:
16577	(sentinel
73	CONDITIONS
33027	termAtt.append("TestTerm");
48309	matchstart
27312	"\u003A\u0061\u2060",
56972	NUM;
15419	org.apache.lucene.util.BitVector;
8299	mibytes
23041	parser.parse("handle:1");
59820	"\1\u0145\3\0\1\137\4\0\2\137\150\0\1\u0153\5\266"+
43112	boosted
64972	"frontier"
51872	(!pendingCommitSet)
21002	diskFree
18221	adddetail
6023	t.resizeTermBuffer(i);
3102	(curDocs
45711	U+1E6B:
29467	properties.put(PROP_KEY1,
65169	'finalness'
6315	being
34588	scorer.explain(doc);
66680	testassumebeforeclass
38297	0x80001
197	when
45676	U+1E6A:
23037	writerA.close();
67410	testReferenceCountingParallelReader()
53023	outUpto
19238	testthai
31253	actualSize
41229	rewriteIter=0;rewriteIter<2;rewriteIter++)
61409	"\1\u034d\30\u02e2\1\u0672\1\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
57225	00111...111111
25018	getscores
6830	CONSTANT_SCORE_FILTER_REWRITE
4588	assertEquals(ConcurrentMergeScheduler.class,
39473	useful.*/
8850	runners
48948	prefixed
2520	boostingsimilarity
18250	elephant
26359	outputCharNum
15608	(normGen
13091	u93a4
9057	prefixes
19293	testapostrophessa
29342	endIndex;
66010	foo:test");
64185	thebytes
49478	jj_gen;
11476	"\3\0\1\136\4\0\2\136\150\0\1\376\1\u04ee\31\264"+
48829	IndexFileNames.VECTORS_INDEX_EXTENSION)));
61440	"\1\u034d\10\u02e2\1\u0687\21\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
62573	countingdisjunctionsumscorer
11112	"\1\u0154\3\264\1\0\3\136\1\0\2\136\1\137\3\136"+
23278	fulltext
3854	VirtualMethod<CharTokenizer>
27285	"\u0041\u0308\u0031\u002E\u2060",
5269	ReInit(CharStream
39158	idfExp.getIdf();
16006	(allThreads[i]
25057	caebjgfhdi
60880	"\14\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
28411	assertEquals(str,
12289	u93b8
56529	this.exclDisi
45382	,"OU",
29785	"\1\0\1\40\1\0\1\41\1\0\1\104\3\0\1\43"+
4478	assertnotnull
66198	-xx
64815	assertEquals(TermsEnum.SeekStatus.FOUND,
25043	outofordermulti
29346	endIndex)
55190	long[r2.numDocs()];
12690	u93ae
38441	Field("text2","test1",
42695	t.join();
43330	sentinel.
11316	"\2\0\1\u0472\15\0\1\u0472\6\0\12\u0472\1\u03e8\175\0"+
28439	c.charAt(1));
16579	sentinel;
36185	arcCount;
22708	FieldCache.ShortParser
5978	elementbits
9972	"\1\50\1\0\1\51\2\0\1\52\3\0\1\53\2\0"+
28351	Scorer>
49935	rangein_quoted
18177	Scorer!
41441	BytesRef("foo")));
55079	th.iterations
58982	ii.close();
33612	testreaderreset
33890	initComplex()
54231	ref.copyChars(entry.getKey());
18172	Scorer)
54256	assertTrue(strings.size()
48486	Scorer.
24864	ConstantScoreQuery(f),
3529	merges.add(merge);
7378	empty_topdocs
64223	type.</li>
4285	countTerms(tq,
40453	Token}-based
40252	maxindexversion
16973	LowerCaseFilter(TokenStream
23655	atomicboolean
60713	"\1\u02e2\1\u0428\1\u034e\12\u02e2\175\0\1\u034d\1\u0428\6\u02e2"+
63646	x74321
54386	getmaxtokenlength
18516	"ÕÕ«ÖÕ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ«
7522	termvectorstermswriterperthread
38081	longVals[i]
60318	"\1\u0219\1\u021b\3\0\2\u0219\151\0\32\u02e2\1\0\12\u02e2"+
12290	u945b
56322	comparePivot(left)
30375	tpcs[i]
8803	stack;
55441	doc.getFields("keyField");
11830	newBuffer[]
42989	documentation
20620	org.apache.lucene.index.TestIndexWriterReader;
31861	lookup[mid].compareTo(key);
54056	"Now",
49675	jj_la1
29580	"\1\0\4\133\2\0\1\132\6\0\1\133\16\0\12\134\21\0\3\133"+
48152	compare(Spans
23872	List<SearcherTracker>
49524	Conjunction();
30691	"\1\26\4\0\1\64\37\0\1\26\102\0\1\26\147\0"+
59726	"\1\137\1\0\2\154\1\140\3\137\2\0\1\77\1\137"+
29130	readTermVectors(fields,
3372	operations.</p>
27505	"\u005F\u0308\u0027",
60257	"\1\u029d\1\352\12\232\175\0\1\351\1\232\1\u029e\30\232"+
54837	<p>Then,
23749	searcher.getIndexReader().getVersion();
29228	this.offsets
50372	!pooled
21390	attempted,
50564	attempted.
820	MockIndexWriter3
37875	Iterator}
1118	MockIndexWriter4
2296	Payload(payloadField));
49674	jj_la;
55292	assertEquals(pos1.length,
17239	"maxDoc"
755	MockIndexWriter2
34254	maxBufferedDocs;
1279	crashAt)
42524	payloaddata
59575	"\61\233\1\0\1\353\4\233\1\354\1\0\3\233\1\0"+
45559	U+1E5D:
65419	(terms)
20406	TestDateSort
60246	"\12\232\1\u016f\17\232\1\352\12\232\175\0\1\351\11\232"+
53015	(result.offsets.length
47770	fifteen
66573	growparallelpostingsarray
34430	maxBufferedDocs)
66979	assertEquals(ramDir.sizeInBytes(),
64541	BufferedIndexInput(String
8978	PrefixCodedTermsIterator();
20715	this.offset;
28482	Field("binaryStored",
49594	RANGEIN_TO:
63550	>>>32);
6899	sb.append(minInclusive
58454	set.addAll(Arrays.asList(NOT_IN_SET));
45513	U+1E5E:
53211	uni_replacement_char
34153	hasmultitermrpts
36747	setAllowArrayArcs(boolean
10462	"\32\25\24\0\1\u018b\242\0\1\u018c\15\0\1\47\1\0"+
20729	this.offset,
67189	positions.length);
45561	U+1E5F:
20069	Iterator<BooleanClause>
31826	pre-"
15305	NumericField.DataType.FLOAT;
48241	stretchToOrder()
5944	shifts[base]);
45589	U+1E64:
61201	"\161\0\4\u05c5\2\0\1\u05c5\15\0\1\u05c5\6\0\12\u05c5"+
61192	"\1\u05bb\1\u05ba\1\u05b9\13\0\1\u033c\161\0\4\u05bd\2\0"+
40975	seekResult.input)),
17415	sb.append('}');
39069	map.put(new
66718	<p>There
9432	"\76\144\2\0\152\144\46\0\7\132\14\0\5\132\5\0\1\132\1\133"+
26926	[3.11]
29131	tvfPointers,
1646	lockobtainfailedexception
30096	CloseableThreadLocal<ThreadResources>
55391	docs.remove(idString);
29119	tvfPointers;
58783	(s.length()
45629	U+1E65:
25266	"op*q*",
644	without
15949	docstoresegment
66929	pair1,
29638	"\4\133\11\0\2\133\1\0\31\132\10\0\120\132\2\133\45\0\11\132"+
51834	testPoint("startStartCommit");
40964	seekResult.input));
21193	bits.get(fcsi.order[doc]);
41552	useCache
10652	"\1\76\1\136\4\0\2\136\216\0\1\u015c\175\0\4\u021a"+
42145	bInts[bUpto++];
43064	reopenLock.release();
45587	U+1E62:
33008	termbytescount
6186	will,
30916	4.1858315f,
59721	"\1\51\1\0\1\71\2\0\1\72\3\0\1\54\2\0"+
29760	"\2\32\1\0\16\32\1\0\2\32\1\0\21\32\1\0"+
48199	spanDocComparator);
59700	"\1\u0107\1\266\1\u0107\1\266\1\u0107\1\266\3\u0107\1\266"+
59013	assertChunking(random,
49685	jj_la1_1
49682	jj_la1_0
42315	analyzer));
10106	"\1\144\1\137\3\136\3\0\1\136\4\0\2\136\2\0"+
34333	regardless
35681	<br/>
9811	"\7\0\1\56\2\0\1\57\4\0\1\110\14\0\1\61"+
25428	SegmentReaders.
51506	mergedReader.hasChanges
37232	tonode
32486	update(IndexWriter
45627	U+1E63:
61628	ub22a
17114	SegmentReaders:
31716	-cp
22739	FieldCacheRangeFilter<Long>(field,
2529	hasnext
23770	other.recordTimeSec)
60884	"\1\u0101\32\266\1\142\3\266\1\u0159\6\266\1\0\3\137"+
52105	indexsplitter
13139	ub234
35094	file.getBuffer(currentBufferIndex);
64437	compressString
12691	u9451
30328	testRollback()
12738	ub23e
20938	termBuffer
61581	u943d
45585	U+1E60:
24190	randInt
57635	diffs[];
3	/**
42953	(TokenAttributeFactory)
5068	32);
12337	ub248
50150	concurrently.
64151	symbol
25745	getdocwithfield
38498	(Iterator<TermVectorEntry>
5684	KeywordAttribute
45685	"ê"
34039	bb);
45625	U+1E61:
10814	"\1\u01ca\15\0\1\u01ca\6\0\12\u01ca\176\0\32\u020f\1\0"+
63084	-ea
48139	firstTime
64932	vectors[i].getTerms();
29599	"\1\133\71\0\53\142\24\143\1\142\12\134\6\0\6\142\4\143\4\142"+
58875	finalOffset;
13092	u9447
33584	finalOffset:
48492	privately
27717	"\u0061\u003A\u0308\u005F",
41302	run(int
30968	dosearch
47942	TwoPhaseCommit#rollback()}
57474	testindexing
64630	readInternal(buffer,
21256	testBuffer,
9875	"\6\0\1\76\37\0\12\26\27\0\1\216\1\0\1\50"+
18729	"ØµÙØ±Øª",
52828	Corporation
66930	pair2)
42373	numTerms]);
36957	guess:
40936	outs="
53455	org.apache.lucene.util.DummyConcurrentLock;
11095	"\32\264\1\141\6\264\1\u03c8\3\264\1\0\3\136\1\0"+
11434	"\4\0\2\136\216\0\1\u0424\175\0\4\u04cb\2\0\1\u04cb"+
50120	<p>These
59092	"\0\u1460\0\u1503\0\u15a6\0\u1649\0\u16ec\0\u178f\0\u1832\0\u18d5"+
15438	delGen;
53441	format.format(upper),
184	reader2.docFreq(searchTerm2));
27646	"\u0061\u2060\u0308\u003A",
3264	other.setNextReader(reader,
15216	assertSizeEquals(int
56820	testkeepnoneoninitdeletionpolicy
27434	"\u0030\u0308\u0041",
19578	.onMalformedInput(CodingErrorAction.REPORT)
49580	if(fms
20835	"lastname",
28558	java.io.*;
35978	testexclusivecollating
11598	"\2\0\1\u0548\15\0\1\u0548\6\0\12\u0548\1\u0549\174\0"+
16161	advances
9473	packed.length();
51314	toCommit
46002	U+1E87:
45396	,"ou",
64736	{"aa0",
23288	subsearcherquery
15367	text_field_utf2_key
31538	oldIndexDir
29605	"\2\0\103\132\2\0\3\133\40\0\20\132\20\0\125\132\14\0\u026c\132"+
43967	"áº¤"
33825	advanced
36557	(left
38803	ints[0]);
7489	TermVectorsTermsWriterPerThread(TermsHashPerThread
15780	output.writeString(name);
50443	sr);
19519	object.close();
39199	queryNormExpl
21218	os.close();
33800	initialization
45979	U+1E86:
43975	"áº¬"
25259	"hi*k*",
61561	u8781
22397	attribution
64741	"aa8",
3418	spec
25475	cacheEntries[i].estimateSize();
12671	u8795
29865	"\1\25\2\0\1\25\1\102\4\0\1\25\2\0\1\25"+
56932	"\1\44\6\0\1\17\6\0\1\45\4\0\1\24\1\25"+
50817	(!closing)
43715	("Des
13298	u1814
2637	50;
44355	"Ê¥"
22433	insertionsorts
52714	0.3884282f);
18019	biggest
46004	U+1E89:
25299	testequals
26974	"\u0001\u0027",
13072	u878b
43983	"áº´"
3041	512
24648	multisearchers
26611	assertTrue(freq
37969	newhashmap
60332	"\1\67\1\0\1\67\2\0\1\25\1\u0274\32\u021a\1\u0219"+
57738	50X
32455	TestTransactions
25724	insanitytype
55400	indexDoc();
2048	arc.label
10426	"\1\346\3\230\1\u016a\13\230\1\u016a\12\230\1\347\12\230"+
10354	"\1\u014e\5\264\1\u0103\24\264\1\141\12\264\1\u014f\3\136"+
23484	(sawMaybe
56795	lasttimestamp
32088	byteUpto
35932	initializeIndex(String[]
41017	assertEquals(pairs.get(upto).output,
45981	U+1E88:
45467	"Ê "
58768	i=offset;i<len;i++)
56389	slice[upto++]
15564	input.readString();
10769	"\1\346\23\230\1\u0295\6\230\1\347\12\230\175\0\1\346"+
63078	-Xmx8g
11833	zzBuffer.length);
26573	positions.seek(new
12897	u181e
3720	typeatt
12095	u1832
61175	"\1\351\32\232\1\352\11\232\1\u0133\175\0\1\351\3\232"+
22835	includelower
17399	termFreqs[];
31391	document",
34050	tg.get(t);
12496	u1828
18805	"à½à½à½¦",
9286	UAX29URLEmailTokenizerImpl34
44045	"áº£"
12270	u879f
45998	U+1E83:
18839	U+0364
24691	doc.getValues("tracer");
40016	directory.makeLock(IndexWriter.WRITE_LOCK_NAME);
4536	testsorting_4bit
13369	u4549
11484	"\12\u04f2\1\u04f3\175\0\4\u04f4\2\0\1\u04f4\15\0\1\u04f4"+
30047	u1824
40456	preferred
57561	field.createTerm(input.readString());
33790	PhrasePosition
61269	"\32\u02e2\1\u034e\1\u0606\11\u02e2\175\0\1\u034d\6\u02e2\1\u0607"+
61779	u180a
45975	U+1E82:
58729	testtermdocperf
5773	span
4959	58:
12968	u4553
4403	(topDocs.totalHits==0)
57322	ensureCapacityWords(newLen);
31228	fr.canReadRawDocs());
5353	EOFSeen
56338	(len1
57812	writer.prepareCommit()
33965	repeatingTerms();
46000	U+1E85:
17543	queryTest(Query
17402	termFreqs[])
12166	u4567
55979	termFreqs[],
15365	lazy_field_key
37866	reference-equality
17169	assigned
33906	3rd
15917	(obj
68148	(freeBeforePos
17731	TopTermsBoostOnlyBooleanQueryRewrite(int
3737	simple,
60267	"\1\u029b\10\232\175\0\1\351\32\232\1\352\1\u02ac\11\232"+
48799	Field.TermVector.YES;
526	flush
33889	simple.
34427	Segment.
35675	56;
22164	bytesPerElement)
31150	exhaust
42166	clone.copyInts(other);
45977	U+1E84:
58427	set.clear();
43964	"áº¢"
62531	requiredScorers);
6867	<code>double</code>
51433	result.allDeleted)
31424	"7");
19505	<tt>null</tt>
49196	mods,
22531	properties!
11636	"\2\u055c\1\u055b\2\u055c\2\u055b\1\u055c\1\u055b\1\u055c\1\u0549"+
11414	"\1\346\32\230\1\347\10\230\1\u03a7\1\230\175\0\1\346"+
20101	minShouldMatch
15461	hasSingleNormFile;
12567	u455d
54298	offsetHash.clear();
48939	fsmapper
19936	innerarray
51543	in-flight
16175	rewrites
11673	ZZ_UNKNOWN_ERROR
9890	"\2\25\2\0\1\114\6\0\1\25\122\0\1\25\6\0"+
36058	searcher.search(filteredquery,
49062	end-of-input
54638	(i.e.:
26787	testStartPositions()
60680	"\2\0\1\u0424\15\0\1\u0424\6\0\12\u0424\1\u0348\13\0"+
62522	makeCountingSumScorerSomeReq(boolean
35099	file.setLength(pointer);
53559	5+6
49504	mods;
51401	applyAllDeletes="
43492	TestBitVector
17642	testdefaultvaluewithoutsetting
44043	"áº¡"
45996	U+1E81:
19596	.getResourceAsStream(resource);
6142	"#endOffset",
35078	switchCurrentBuffer();
43379	org.apache.lucene.store.IndexOutput.writeVInt()
49175	HashMap<String,DateTools.Resolution>();
56441	tmp.setForceMergeDeletesPctAllowed(0.0);
26264	5),
63658	x75421
3309	(i.e.,
48616	document),
17784	simpler
67123	TestCachingTokenFilter
15084	loadFieldNames
39371	disidoc
64272	Type.BYTE)
58697	(num
657	super(dir,
48311	matchpayload
5271	defaultLexState;
34832	prevStartOffset
63661	x75432
63660	x75431
45973	U+1E80:
66137	teststaticmethod3old
6054	5);
60425	"\2\137\150\0\1\u0101\32\266\1\142\3\266\1\u0332\6\266"+
49679	jj_la1_init_0();
18912	"has",
43971	"áº¨"
53946	byte[]{'N','R','M',-1};
54327	offsetkey
4327	assertSame(field,
67346	reader0);
14895	integers
53461	href="https://issues.apache.org/jira/browse/LUCENE-2756">LUCENE-2756</a>).
27396	"\u0027\u00AD",
5343	((jjtoToken[jjmatchedKind
38997	cm.putAll(hm);
52054	segmentinfo's
56020	appendable
42425	b1.length
32054	default_int_parser
11066	"\175\0\1\346\32\230\1\347\1\230\1\u03ab\10\230\175\0"+
56796	nowversion
376	r.deleteDocuments(new
3323	cachingcollector
53078	validUTF16String(String
50113	document).
3200	wrap
30048	u188b
8393	Integer.parseInt(args[0]);
27250	"\u0041\u005F",
66707	document's
14704	Must
21004	50,
10098	"\4\231\1\351\1\0\3\231\1\0\1\47\1\0\1\50"+
14618	1:25:29
7715	500
66546	50%
19703	50)
9587	"\2\u031b\2\u03be\2\u0461\2\u0504\2\u05a7\2\u064a\2\u06ed\2\u0790"+
9626	"\2\uc9c3\2\uca66\2\ucb09\2\ucbac\2\ucc4f\2\uccf2\2\ucd95\2\uce38"+
17798	(MultiTermQuery)
43500	doTestConstructOfSize(int
256	searchTerm.text());
66248	BooleanQuery(rnd.nextInt()<0);
14578	numread
32954	postings.freqs[termID]++;
35714	{8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
30642	"\5\0\1\25\3\0\1\52\4\0\1\52\2\25\2\52"+
18958	InputStreamReader(getClass().getResourceAsStream
6696	integer;
43406	org.apache.lucene.store.IndexInput.readVInt()
39300	multiphraseweight
24636	tfcOptions[j][2],
17505	doc223.getFields().size());
44051	"áº©"
6533	corresponding
17049	integer,
16528	PriorityQueue<MyObject>
67396	initReader2},
59200	"\3\ue5bd\3\ue660\3\ue703\3\ue7a6\3\ue849\3\ue8ec\3\ue98f\3\uea32"+
37318	makeStopSet(Version
7530	utf8results
33029	src.hashCode();
7537	5.0
58426	set.size());
37247	newnodeaddress
23465	TestIndexWriter.assertNoUnreferencedFiles(dir,
13071	u86e8
15508	hasSingleNormFile,
33049	src.hashCode(),
44485	"áº»"
59728	"\2\0\1\72\3\0\1\54\2\0\1\55\3\0\1\73"+
12670	u86f2
61560	u86de
21550	testbuffer
47766	thirteen
19093	"ãµã");
28598	BeginToken()
12269	u86fc
63900	analyzer.tokenStream("foo",
46088	U+1E8F:
63772	x874321
54707	FileLock
18304	ds.advance(3)
22884	candidate)
31555	bounds",
48575	omitted
9047	pos1End)
29991	StandardTokenizer.SOUTHEAST_ASIAN;
40942	seek");
25624	obj.getFieldCacheKey()
28158	midnum
59144	"\2\uc920\2\uc9c3\2\uca66\2\ucb09\2\ucbac\2\ucc4f\2\uccf2\2\ucd95"+
38911	unindexed2
3240	ScoreCachingCollector(other,
17802	scoring_boolean_query_rewrite
37176	allowarrayarcs
59096	"\0\u28c0\0\u2963\0\u2a06\0\u2aa9\0\u0ea5\0\u2b4c\0\u2bef\0\u2c92"+
2283	PayloadFilter
44982	BELT
63027	Boost
35881	assertTrue("invalid
64802	(random.nextInt(6)
26568	assertTrue(termDocs.next()
32606	original2
24934	boxing
33851	tpPos)
60742	"\6\0\2\u0445\1\u0444\2\u0445\2\u0444\1\u0445\1\u0444\1\u0445"+
11596	"\6\0\12\u0546\1\u0511\13\0\1\u0325\161\0\4\u0547\2\0"+
32710	original:
53275	UpToTwoPositiveIntOutputs(boolean
4396	sort
53481	hack.
7856	File-based
20855	Defines
27638	"\u0061\u2060",
43190	docVal(doc)
54585	Arrays.toString(items));
7152	long_negative_infinity
48727	reset(bytes);
62419	i.offset);
60852	"\1\u0497\13\0\1\u0126\161\0\4\u049b\2\0\1\u049b\15\0"+
17364	(random.nextInt(5)
61266	"\1\u058b\13\0\1\u02e1\160\0\1\u0349\4\u0604\2\0\1\u0604"+
9243	arrayutil
56054	6",
30557	"\5\0\1\25\2\0\2\25\4\0\1\25\2\0\1\25"+
37481	query.setSlop(6);
24984	bfjhd
31309	testHits(ScoreDoc[]
52740	'\"');
65817	System.out.println(hc.getCount());
55010	(random.nextInt(4)
62235	hit.score
7093	constant_score_filter_rewrite
28280	(numScorers
16265	sor(st(s),
2507	queryutils
17383	td.totalHits);
39086	assertTrue(cm.entrySet().toString().contains(",
5158	6);
36751	#FIXED_ARRAY_NUM_ARCS_SHALLOW}.
23217	testCustomSimilarity
46029	U+1E8B:
66302	streamCount
61081	"\1\u034e\12\u02e2\175\0\1\u034d\7\u02e2\1\u0559\22\u02e2\1\u034e"+
42242	assertTrue(att.isKeyword());
34894	newTerm(int
6358	(!(queries.length
3858	char.class);
56971	ACRONYM_DEP;
56457	soq;
59076	address</li>
21901	care
25205	card
33120	src.addAttributeImpl(new
46671	"â¬"
57669	insertions
56021	declaration
5088	29);
51486	currentReader
46020	U+1E8C:
58447	(now
2682	QueryParser(TEST_VERSION_CURRENT,
30429	assertTokenStreamContents(filter,
19906	(not
7618	errorAfter
8414	cast
28588	newPosition);
30717	"\1\130\153\0\2\130\11\0\1\130\115\0\2\130\6\0"+
26266	6),
38937	filedirname
1876	case
52078	getmaxmergedocs
34345	<code>interval/2</code>
39990	subReaders[0].termDocs();
31626	unimportant
49519	RANGEIN_START:
56854	"\1\0\12\12\1\0\5\12\46\0\2\12\4\0\12\2\25\0\10\12"+
26273	original)
26647	newPosition()
34937	regenerating
36409	FileInputStream(file));
66853	fooNorms[i]
30046	u17bd
4219	testLeftOpenRange_4bit()
41488	47));
67028	objectoutputstream
16162	org.apache.lucene.queryParser.ParseException;
1310	(UnsupportedOperationException
46031	U+1E8D:
19290	cats
965	19+(1-i)*2;
26404	(numOutputBytes
57782	reader2.numDocs());
29521	testruleinvariantbeforeclass
29710	"\3\0\1\25\13\0\1\25\1\0\1\25\4\0\2\25"+
55118	(!sub.isDeleted(docID))
9856	"\3\0\1\66\1\0\1\66\2\0\1\25\1\0\32\25"+
58114	#commit()},
8820	Description
61038	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\4\266"+
18693	"à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à¦¿",
15852	(fileName
46057	U+1E8E:
50045	fe.directoryOffset
47920	prepareCommit().
2739	soon
47953	prepareCommit(),
32212	dir.getLockFactory(),
34690	StandardFilter(Version
64408	compressor.setLevel(compressionLevel);
25216	"\\79
20066	(BooleanClause
46687	"â´"
33545	llll,
50890	#addDocument(Document)}
55295	tpv1.getOffsets(j);
60306	"\12\u02d2\176\0\4\u02d3\2\0\1\u02d3\15\0\1\u02d3\6\0"+
63258	0x321,
19050	re-tokenization
56256	testfilterindexreader
48423	nrMatchers++;
67612	i=0;i<4;i++)
30537	"\2\0\1\115\42\0\1\33\7\0\1\33\4\0\1\35"+
56943	"\1\1\1\0\17\1\1\0\1\1\3\0\5\1";
62671	count.get();
18388	s.doc(h[2].doc).get("id");
61562	u8824
49235	drive
38833	testNoTermsIndex()
52800	sole
46496	SEVENTEEN
51652	merge.estimatedMergeBytes
54167	(Integer.MAX_VALUE
58724	10000,3,.1f);
36803	bytes[pos++];
37008	node-1)
38452	doc.add(newField("tvpositionoffset","tvpositionoffset",
35991	(newField("sorter",
22589	solr
7018	DataType.FLOAT;
51429	(!keepFullyDeletedSegments
64546	BuffereIndexInput",
61000	"\160\0\1\u0349\4\u0507\2\0\1\u0507\15\0\1\u0507\6\0"+
831	((LogMergePolicy)
32500	cant
21151	combination
2875	(withTimeout)
58464	testSupplementaryChars()
40889	inputToString(inputMode,
886	(doFail)
937	some
43377	resizeBytes(ArrayUtil.oversize(lastBytePos
58796	utf8.length);
18476	char[4094];
28410	ref.copyChars(charArray,
13073	u882e
59775	"\1\141\20\36\1\355\11\36\1\142\12\143\1\66\1\137"+
24068	"B"},//I,x
17433	int[len];
51299	revert
55848	maindir
12271	u8842
37659	sb.append(doc.get(t)).append('
51312	message("prepareCommit:
50425	get(info,
20781	(new
42679	mergeAtOnce
48158	NearSpansOrdered(SpanNearQuery
21936	<code>numBytes</code>
1383	setvalue
46018	U+1E8A:
22132	-result;
54493	TestArrayUtil
23656	testindexwriterdelete
12672	u8838
25789	<code>clauses</code>.
16328	explanations
50770	IndexWriterConfig#setWriteLockTimeout(long)}
32187	MockLockFactory.MockLock
632	break;
51936	finishing
27917	"\u0031\u003A\u0061\u003A",
7305	totalHits
36451	(doFixedArray)
38600	_TestUtil.rmDir(dirFile);
10140	"\2\0\1\25\1\140\1\352\2\36\1\352\1\370\1\36"+
31509	Field.Store.COMPRESS));
31430	createSurrogatesIndex(String
21517	newDir.close();
6458	BrokenCloseable(2));
66451	rehashPostings(2*postingsHashSize);
7243	#TopDocsCollector(PriorityQueue)}.
11834	zzBuffer
22394	mintargetsize
37415	3};
3079	ScoreCachingCollector
4258	field=StringHelper.intern("field"+precisionStep);
53968	owner.singleNormStream.close();
33224	token_attribute_factory
28353	super.visitSubScorers(parent,
49670	jj_nt;
252	deleteReaderWriterConflict(boolean
3006	call
34387	can.
26069	incurs
33434	can,
39646	"name";
56184	'e'.*/
4742	Disable
11816	can)
26887	breaks
27854	"\u0061\u002C\u0041",
33667	temporary
59214	"\4\u2d0d\4\u2db0\4\u2e53\4\u2ef6\4\u2f99\4\u303c\4\u30df\4\u3182"+
62397	fieldmaskingspanquery
59031	docid.setValue(""
16171	explanation.
55738	indexName,
49829	setlocale
29547	<tt>/lucene/3x/lucene/src/java/org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31.jflex</tt>
39884	applyAllDeletes);
6883	DataType.FLOAT,
245	another
53640	callable
53507	subSearcher(int
27152	"\u000B\u0061\u0027\u2060",
26960	"\u0001\u0308\u0041",
35813	numDocs=0)
51585	updatePendingMerges(merge.maxNumSegments);
22548	parsing";
57830	IndexReader.getCommitUserData(dir).get("label"));
23985	"-4.0",
52333	populateDocs(Random
2553	check
41320	String.format(Locale.ENGLISH,
49696	jj_ntk
34186	pptermsbitsets
52782	came
18302	dw.scorer(sub,
21922	non-null,
16548	non-null.
28166	soft
31449	outputDir
40913	assertNull(fstEnum.next());
49936	rangein_to
19070	"æ¯",
60653	"\15\0\1\u040e\6\0\12\u0411\1\u040f\13\0\1\u033c\160\0"+
9149	non-null;
30527	"\0\u1959\0\u19c0\0\u1a27\0\u1a8e\0\u1af5\0\u1b5c\0\u1bc3\0\u1c2a"+
58866	ud917cd
4512	average
43458	testSpanNotVersusSpanTerm()
29863	"\21\0\1\25\3\0\1\25\5\0\1\25\32\0\15\25"+
32547	System.getProperty("line.separator")
65498	message("setInfoStream
23062	writerB.forceMerge(1);
67483	readersToClose.add(c.refreshedReader);
53037	((b&0xf)<<12)
33798	lesser
21272	2l;
46681	"â±"
21424	two.seek(0);
32392	testdefaultfslockfactoryprefix
45736	,"TZ",
26471	numchars
27574	"\u00AD\u0061\u002C",
9369	"\u026c\132\2\0\21\132\1\0\32\132\5\0\113\132\3\0\3\132\17\0"+
45878	U+1E77:
54788	released,
6760	preselected
35126	serialize
37948	IdentityWeakReference
3797	subclasses
13367	u4403
38134	implicitely
31590	40;
17331	4.x
4946	40:
37403	testConstructor()
49076	(BooleanQuery.TooManyClauses
58827	assertEquals(utf8.result[j],
20979	released.
53797	pos=-1;
32125	40,
5928	blocks.len:
45807	U+1E76:
10050	"\1\65\1\0\2\65\7\0\3\65\2\0\2\65\12\0"+
24635	tfcOptions[j][1],
7294	newTopDocs(ScoreDoc[]
64380	0xFFFFFFFFL
43033	released}
9020	sharedPrefix(lastBytes,
56822	testNewestSegment()
60390	"\1\u0101\32\266\1\142\7\266\1\u0317\2\266\1\0\3\137"+
39764	oldReaders.length;
49272	currentQuery
27333	"\u002C\u0308\r",
28923	DocValues
49981	fileName</li>
4949	41:
45876	U+1E75:
29123	readFields(fieldCount);
65965	t:w?ldcard",
333	2nd
27189	"\u3031\u0308\u0030",
31066	si1.dir,
5020	42)
31274	_TestUtil.getTempDir(oldNames[i]);
7058	currentTerm
49744	jj_ls;
46663	"â«"
2122	table.length-1;
11545	"\1\u02cf\160\0\1\u0332\4\u051d\2\0\1\u051d\15\0\1\u051d"+
64620	42;
4951	42:
68100	((intValue
45805	U+1E74:
64452	inflate
67554	(i+1),
32137	Maybe
57469	for(Thread
42601	assertTrue("docIdSet
58586	assertTrue(set.toString().contains(",
34291	readerPooling
46693	"âµ"
31364	Term("utf8",
16557	confusing
15819	addIfExists(filesSet,
31401	43,
19792	enough
32729	(encoded.length
66665	testErrorBefore()
45874	U+1E73:
61380	"\2\0\1\u065f\15\0\1\u065f\6\0\12\u065f\1\u0636\175\0"+
52173	alldeleted
18782	à¹à¸¥à¹à¸§à¹à¸à¸­à¸à¸°à¹à¸à¹à¸«à¸?
7557	LEXICAL_ERROR
36146	(per
42027	FieldValueHitQueue.Entry>
4955	43:
64830	validTerms.length);
65772	i<numBitsToSet;
8909	FilteredDocIdSetIterator
31392	44,
53069	s2.length());
65583	commits.set(writeTo,
40302	nrtiscurrent
23916	toClose)
28282	(subScorers[0].nextDoc()
45803	U+1E72:
52558	createWeight");
18945	"bones"},
5749	better
65528	sis);
64742	"aa9",
10516	"\17\230\1\347\12\230\175\0\1\u01a3\5\230\1\u016a\24\230"+
34958	FilteredQuery.this.filter;
31388	44;
51388	ensureOpen:
11196	"\1\347\12\230\175\0\1\376\1\u0414\31\264\1\141\12\264"+
34131	ps.println("----
12565	u4417
19790	Type.BYTE
4530	testsorting
34188	termgroups
17174	incRef()
42285	testPayload()
66335	growParallelPostingsArray()
45717	U+1E71:
31389	45;
4957	45:
25545	readerFieldToValIds.getMap();
15348	setupdoc
23226	msrchr.setSimilarity(customSimilarity);
49516	QUOTED:
31918	DEFAULT_FLOAT_PARSER
39438	this.input.close();
58433	NOT_IN_SET
5057	46)
27259	"\u0041\u0300"
39406	287,
55	http://www.apache.org/licenses/LICENSE-2.0
12164	u4421
26400	decode(char[]
12966	u440d
39211	scorer.advance(doc);
26510	docToDelete
45682	U+1E70:
30211	indexPos
62377	span.end());
60404	"\4\0\2\137\150\0\1\u0101\32\266\1\142\2\266\1\312"+
4492	setintvalue
44141	,"av",
8143	EOF:
64258	Type("float");
60241	"\2\0\1\u0289\15\0\1\u0289\6\0\2\u028a\1\u0289\2\u028a"+
50937	document(s)
20311	prevDocID
26410	inputArray[inputCharNum];
46661	"â©"
52203	mergemiddle
22224	short[oversize(minSize,
67916	part2.substring(0,
25988	updateBottom(doc,
4450	equality:
53257	Builder}.
10995	"\1\u0374\31\264\1\141\12\264\1\0\3\136\1\0\2\136"+
16811	origSegmentReader.deleteDocument(1);
49874	toomanybooleanclauses
16332	convenience
13297	u1771
51911	location);
31708	simpleanalyzer
14790	STRING_VAL:
17075	#getTerms()})
28332	(ldoc
64003	(U+1D160
25218	"\\\\
9710	"\2\0\1\25\2\0\3\25\1\0\1\25\1\0\2\25"+
1147	in.length()-1);
46317	"â»"
57735	true).close();
21619	string.length());
18971	assertTrue(null
53260	this.second
25217	hijklmn1",
17298	compound_file_store_extension
24940	cbad
10672	"\1\u022b\1\230\1\u022c\1\u022d\2\230\1\u022e\1\u022f\2\230"+
32400	alphabet
21003	diskUsage+_TestUtil.nextInt(random,
59778	"\1\25\2\0\1\25\1\u0141\6\36\1\u0146\10\36\1\355"+
61778	u1767
5255	input_stream;
487	stalereaderexception
58831	a\uffffb",
38155	expectedShifts.iterator();
48739	testFields
35460	4))
24168	4),
59400	"\1\100\1\0\1\100\2\0\1\25\1\0\32\25\1\0"+
5146	jjMoveNfa_1(jjStopStringLiteralDfa_1(pos,
30362	wrapper.commit();
49893	multiterms
31700	termAtt.toString());
30045	u1756
27345	"\u002C\u0308\u002C",
19686	(rarest)
36155	FIXED_ARRAY_NUM_ARCS_SHALLOW
4109	l++)
42489	first;
11813	first:
64993	(transition
5834	currentShifts[base]);
8203	clone.clones,
31945	NUMERIC_UTILS_INT_PARSER;
66252	qType
4596	assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(),
50044	(FileEntry
55454	"repeated
52401	testaddindexesintoexisting
5166	4);
33679	System.out.println(files[i]
49489	PLUS:
20183	minNrShouldMatch)
19046	"20something","20like",
37317	makeStopSet(Version.LUCENE_30,
24683	searcher.search
20045	minNrShouldMatch;
30501	#29</a>
20178	minNrShouldMatch,
4306	4)));
6872	NumericRangeQuery<Double>
8528	first,
4360	noDocs/2);
20969	first.
30891	pq.pop().score;
5467	jjstopstringliteraldfa_2
31212	2*number_of_chars
18937	testKoreanSA()
5410	jjstopstringliteraldfa_3
12094	u178f
49273	newTermQuery(
5456	jjstopstringliteraldfa_1
42015	minresult
51605	message("add
4409	act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));
41003	fstEnum.seekCeil(term)
63999	(U+1D11E
60376	"\12\232\175\0\1\351\1\u0308\31\232\1\352\12\232\175\0"+
48839	TermPositionVector
46645	"â¨"
67228	in.read();
34110	bb.get(i).union(bb.get(j));
1144	dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,
19607	stuff
1385	nextboolean
66806	processTerms(terms.toArray(new
29376	ByteBlockPool.levelSizeArray[level];
41449	Arrays.sort(strings);
17106	SegmentCoreReaders
41617	b.append(c);
34097	((ord=tord.get(t))!=null)
5346	077)))
30668	"\2\0\1\25\1\53\4\0\1\25\2\0\1\25\1\0"+
67085	SeeksCountingStream((IndexInput)
19740	cs.pos;
12896	u177b
2758	affect
64179	testrawindexinputread
25966	comparator.copy(bottom.slot,
42631	getdoc
38943	deletetest
23945	recordtime
21481	testFileNotFound()
26415	outputArray[outputByteNum
31473	cfsReader.close();
22184	(newSize+7
1720	4.0
63126	TERMS_PER_DOC);
6898	sb.append(this.field).append(':');
66696	testerrorbeforeclass
17843	adequately
28894	docinverterperfield
48730	reset(BytesRef.EMPTY_BYTES);
45715	U+1E6F:
52111	deleteterm
40172	MultiTermDocs
12495	u1785
18300	s.getIndexReader()
27223	"\u0041\u0308"
30516	character</li>
36046	(q2,
60454	"\1\65\6\0\1\174\3\0\1\u0274\33\u0219\12\u0277\1\0"+
3314	passed
8237	this.clones.keyIterator();
40740	doReverseLookup;
6237	passes
45942	U+1E7F:
30561	"\4\0\1\25\1\0\1\25\2\0\2\25\1\0\3\25"+
43408	VB1;
9356	"\2\142\1\0\1\142\2\0\1\142\6\0\4\142\1\0\7\142\1\0"+
19691	chunkStates.length)
16342	snot
20437	5",
32589	binaryDump(decoded,
40250	rollbackhaschanges
25919	points
43383	VB1)
48053	openInput(name);
17130	cfsReader;
43837	"ASCIIFoldingFilter.java";
46716	EXCLAMATION
49609	startOpen
48652	istokenized
58078	fieldNumbers.length)
57765	RUN_SEC
40742	doReverseLookup)
42048	lessThan(final
4111	field8.setIntValue(val);
36457	writer.writeByte(ARCS_AS_FIXED_ARRAY);
36668	Peeks
40618	toIntsRef(strings[idx],
45940	U+1E7D:
64175	checkrandomreads
17204	cfsReader,
35250	SkipDatum
56629	point:
34117	i<bb.size();
54319	numentries
410	reader.flush();
66234	bigSearcher.search(q3,
64076	checkReads(is,
11369	"\1\136\4\0\2\136\150\0\1\376\1\u049c\31\264\1\141"+
37726	d.add(newField(PRIORITY_FIELD,
20457	5";
22307	equals(int[]
34318	point.
36045	(q1,
18895	point,
4820	docconsumer
51389	(doFlush(applyAllDeletes)
55845	testdeletefromindexwriter
22662	point)
33211	flagsatt
55636	w2r1));
41776	TreeMap<String,Long>();
37478	query.setSlop(5);
65973	cc\"
65629	point"
28414	testAppendChars()
45918	U+1E7E:
21787	combined
590	stopTime
42314	IndexWriter(ram,
66087	f3:blo)",
19368	testrandomstrings
2756	expected!",
49363	(one
57202	endWord);
35442	actions
50079	combines
40635	FSTTester.InputOutput<Object>(term,
25737	valids
55640	numDirs
54857	ReentrantLock
9212	deletes.queries.entrySet())
65404	System.out.println("file
55564	assertTrue(r1.isCurrent());
45882	U+1E7B:
15640	setHasVectors(boolean
68124	HitQueue(int
21588	(searchText.startsWith(pre))
28044	"\u0031\u002E\u2060\u0308\u003A",
60310	"\6\0\12\u02d7\215\0\1\u02d8\223\0\4\u01d0\2\0\1\u01d0"+
51160	message("all
7032	implemented");
48242	subSpans[0].doc();
64749	Forwards
37	Version
21998	FormatPostingsTermsWriter(state,
4093	doc.add(field4);
66344	intStart
2660	foobar
40353	termDocs.skipTo(target);
64588	if(after
20304	CachingCollector.create(new
18255	"d1"));
26884	WordBreakTest.txt
45916	U+1E7C:
9209	int[deletes.queries.size()];
5010	28);
67809	//System.out.println(query);
65450	reverseordfieldsource
15755	delFileName
1522	readBufferSize
27545	"\u00AD\u0308\n",
33265	ud=commit.getUserData();
46566	"â®"
20553	CollationKeyAnalyzer
292	previously
41972	foobaz
30149	indexLength
53402	valid.
8851	model
19482	<tt>Closeable</tt>s
60968	"\26\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
26860	valid!
21376	"test");
64540	BuffereIndexInput");
54487	delegee.idf(docFreq,
57608	fieldcounter
3304	other.setScorer}
36955	int[1+nodeCount];
1288	RAMDirectory
45811	U+1E7A:
18556	"ÖÕ¡Õ¶Õ¯Õ¡Ö",
50900	"addDocument");
16359	"corrected
51214	newSegName
6425	cbuf
36195	(ord
60976	"\12\u04f3\1\u046d\175\0\4\u04f4\2\0\1\u04f4\15\0\1\u04f4"+
66489	tokenText[downto-1];
53600	this.nDocs
12494	u16e2
42213	Collections.singletonMap(TypeAttribute.class.getName()
65991	mode:
25957	bottom.doc
29661	"\1\101\1\102\3\101\7\102\1\101\23\102\5\67\3\102\6\67\2\67"+
36617	in.skip(4);
68121	ScoreDoc[totalHits];
30344	happened,
35673	48;
5213	48:
12162	u42db
24162	48,
41137	mode)
44599	"ê½"
58163	mode,
65699	this.fileName
17770	mode.
46340	"â¼"
24902	u00e9ch
65967	bar\"");
56228	assertFalse(clazz.getName()+"
23695	request,
12563	u42d1
66941	inc.output2));
50337	mode"
2253	org.apache.lucene.search.spans.SpanTermQuery;
53546	searchables[i].rewrite(original);
2491	queryNorm(float
20167	required.add(subScorer);
11400	"\1\u047b\33\0\2\u047c\1\0\2\u047c\2\0\1\u047c\1\0"+
25822	0-clause
57709	47,
23846	searcher);
12093	u16ec
25028	searcher's
30044	u16ef
11876	ZZ_BUFFERSIZE)
66572	compactpostings
37303	super(enablePositionIncrements,
43245	assertTrue(tdocs.next());
50494	IndexWriterConfig#setSimilarity(Similarity)}
12964	u42c7
26642	MockRandomLookaheadTokenFilter(random,
17606	getfieldinfos
61777	u16c4
11899	scanning.
29266	vectors_fields_extension
30579	"\1\0\1\26\10\0\1\25\24\0\1\25\3\0\1\25"+
13365	u42bd
32828	maxNumPostings;
48171	subSpans[i]
22294	respective
30503	types:
41827	r[hit].output);
49040	String.class);
30519	"\15\0\1\2\71\0";
18493	types.
20572	streams.result
56400	writeByte((byte)((i
22614	types,
55552	previous));
57959	"weight")).createWeight(searcher);
64621	49;
12895	u16d8
6470	sw.toString();
14754	types"
13296	u16ce
23206	searcher=getMultiSearcherInstance(new
61087	"\175\0\1\u034d\22\u02e2\1\u0561\7\u02e2\1\u034e\2\u02e2\1\u0562"+
58108	pp1.position
20100	w.normalize(norm);
63223	getLastModified()
4840	getrambuffersizemb
42716	display,
15055	TEST_SEGMENT_NAME
42575	testlongstream
54832	requests
3731	org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
40649	idx=0;idx<terms2.length;idx++)
31970	turned
59879	"\12\232\175\0\1\351\3\232\1\u016f\1\232\1\u016f\10\232"+
67814	newWriterConfig()
42136	bUpto
34556	org.apache.lucene.search.spans.SpanTermQuery}
48401	</code>currentSumScore</code>,
66920	pair.output2.equals(outputs2.getNoOutput());
59959	"\4\0\2\137\150\0\1\u0101\16\266\1\u0107\13\266\1\142"+
58121	Discards
9586	"\1\ufe03\1\ufea6\1\uff49\1\uffec\2\217\2\u0132\2\u01d5\2\u0278"+
32865	maxNumPostings)
27723	"\u0061\u003A\u0061\u2060"
50869	DEFAULT_MAX_FIELD_LENGTH;
12674	u897e
4303	Numeric
25348	"the",
55579	assertTrue(r3.isCurrent());
54146	stopset1
54144	stopset0
5375	jjrounds[state]
41145	numWords
33047	assertEquals("Both
31915	DEFAULT_INT_PARSER;
23351	bridges",
21417	one.close();
28691	palindrome
61564	u896a
51261	copySegmentAsIs(SegmentInfo
34919	SpanMultiTermQueryWrapper<FuzzyQuery>(fq);
29140	readTermVectors(String
35214	this.freqOutput
42296	3];
10088	"\2\77\6\0\1\77\153\0\1\77\5\0\1\77\2\0"+
46436	TWELVE
459	indexwriter
32714	testRandomBinaryRoundTripNIO()
52922	UNI_MAX_BMP
12273	u8988
42308	assertEquals(payload.length(),
65683	(have
45809	U+1E78:
21792	Similarity}.)
1356	indexerthread
15628	(sizeInBytesWithStore
67155	termToTVE.put(term,
42954	this.delegate.equals(af.delegate);
34459	setMaxThreadStates(int
66311	consumer.createPostingsArray(2);
48104	#copy(Directory,
34663	(PayloadTermQuery)
37818	LetterTokenizer
31588	getNumberOfSegments(dir));
13075	u8974
51231	"addIndexes(Directory...)");
35170	numOverlap
52185	mergedreader
45880	U+1E79:
67418	assertNull(IndexReader.openIfChanged(parallelReader2));
5069	33:
5168	33;
16818	SegmentNorms
9099	getUserData()
35808	iwOut.close();
39616	output.seek(4);
66849	foo.setValue(addValue());
18504	urlAnalyzer
46019	"áº"
678	testRandomExceptions()
57904	bytebuf
5023	33)
2069	node="
10219	"\2\u0103\1\264\1\u0103\3\264\1\u0103\2\264\2\u0103\1\141"+
5206	33,
1484	List<Term>
40777	(fst.findTargetArc(label,
67459	modifier.deleteDocument(i
42784	TermAttributeImpl
5070	34:
5144	34;
52373	numExpectedPayloads);
26457	bytebuffers
56485	spans.skipTo(target)))
28197	offers
16021	SearcherThread
18484	BaseTokenStreamTestCase.assertTokenStreamContents(tokenizer,
64443	deflater
39243	TermQuery(terms[i]),
1638	document.add(newField("field"
25692	sub/super
44407	"áº¾"
55589	nrtReader.maxDoc());
14532	endread
5015	34)
5200	34,
29254	format_current
50582	oldInfos.read(directory,
17912	testRangeFilterRand()
42984	isassignablefrom
59247	"\1\0\2\25\1\0\1\25\1\0\1\25\117\0\1\25"+
5065	31:
2035	31;
44526	"ï¼¦"
14974	q2.add(t3);
8920	filtereddocidset
3870	<code>false</code>
6881	newFloatRange(final
66909	(b.equals(outputs2.getNoOutput()))
54756	failureReason
5626	315
66764	this(SortField.FIELD_SCORE);
57872	NIOFSIndexInput(File
32305	MMapDirectory(dirName);
68073	31.
65726	currentsegmentsfile
46028	"áº"
64392	CompressionTools
5157	31,
5556	31)
36296	inputType
42178	FlagsAttributeImpl();
61558	u8598
56880	"\2\12\52\0\5\12\12\0\1\13\124\13\10\13\2\13\2\13\132\13"+
1938	i=0;i<numDocs;i++)
40429	LUCENE_CURRENT;
22420	sortertemplate
19622	32;
42856	t.type
45828	"ï¼µ"
15116	assertTrue("Field
5107	32:
2154	hashcode
39528	utf16Result2
44119	"ê³"
46017	"áº"
39526	utf16Result1
5203	32,
18563	á¨á£á
62474	score().
3370	sequence
64598	32)
9497	"\0\u3bda\0\u3c7d\0\u3d20\0\u3dc3\0\u3e66\0\u3f09\0\u1649\0\u3fac"+
65764	(random.nextInt(freq[j])
28247	truncated.
27339	"\u002C\u0308\u3031",
62889	3.X
14529	zzcurrentpos
64107	storing,
63215	1l;
32437	doc.add(newField("data",
18487	ReusableAnalyzerBase()
16456	While
15114	field.stringValue());
29391	postingvector
57874	file.getChannel();
50326	poolReaders
46056	"áº"
66376	comparePostings(text1,
8908	DocIdSetIterator
58293	bBytes
54263	assertFalse(strings.add(str));
6668	300
52692	minpayloadscore
55386	w.updateDocument(idTerm.createTerm(idString),
50785	(flushing
17329	3.x
5064	30:
27047	"\r\u0308\u002C",
5180	30;
1407	testrandomexceptionsthreads
8330	aioobe
34304	IndexDeletionPolicy}
52534	testparalleltermenum
65149	BytesRef(input.length);
53007	s.charAt(i+1);
46124	"áº"
2342	seventy
59024	(MMapDirectory.UNMAP_SUPPORTED)
897	30)
43447	SpanOrQuery(A,
32124	30,
8509	final2));
21467	back,
46030	"áº"
46816	expectedOutputTokens.iterator();
51919	midStartCommit2
43617	reader.hasDeletions()
2276	PayloadAnalyzer
11694	"\2\1\10\0\1\1\32\0\1\1\1\0\11\1\1\0"+
4699	assertTrue(f.getName()
27206	"\u3031\u0308\u0061\u003A",
46782	"ï¼¼"
11340	"\1\u0484\6\0\12\u0484\14\0\1\u0122\161\0\4\u0485\2\0"+
53387	outOfMemoryError
37355	CodecUtil
40041	back:
64739	"aa6",
54315	testsize
15813	HashSet<String>
59621	"\3\0\1\137\4\0\2\137\2\0\1\50\1\0\1\51"+
24634	tfcOptions[j][0],
3960	3.0
46087	"áº"
40404	3.2
3776	3.1
26838	bufferUpto++;
44921	,"(k)",
66204	{2,3,1};
15269	delegate.readBytes(b,
40408	3.4
40406	3.3
40412	3.6
31803	deletePriorCommits);
40410	3.5
1633	populate(Directory
18907	testTextWithNumbersSA()
53220	min_supplementary_code_point
7453	"drunken"};
54446	KeywordAttribute#setKeyword(boolean)}
11788	java.io.InputStream
12564	u4374
46126	"áº"
61259	"\6\0\12\u05ff\1\u0600\13\0\1\u02e1\160\0\1\u0349\4\u05ff"+
7736	lamb!"
26007	MultiComparatorNonScoringCollector(FieldValueHitQueue<Entry>
67185	newPositions,
55884	flaw:
12965	u436a
67796	(TermAttribute)
32316	System.out.println("Stress
52287	TestPayloadProcessorProvider
55440	assertFalse(fields[0].isTermVectorStored());
1400	concurrentmergescheduler
51971	setFlushPendingNoWait(String
15816	(useCompoundFile)
2485	//Make
24962	parseshort
46128	"áº"
31619	nocfs
63930	testistokencharcharinsubclass
6775	&lt;100ms
46936	horizontal
14631	Integers.
30369	TwoPhaseCommit[numObjects];
66719	Integers,
57377	b=this;
27413	"\u0027\u0308\u0031\u0027",
67128	checkTokens(stream);
50892	flushing/merging
8490	sink1
8492	sink2
28551	sorepoint
46162	"áº"
12762	uc186
41317	ord));
8569	sink.
58314	bByte)
10022	"\5\0\1\64\2\0\3\64\7\0\1\64\1\0\2\64"+
26065	tracked
24564	unnormalized
8571	sink)
65845	termflag.set(tnum);
13163	uc17c
23890	"live";
48043	sync(Collections.singleton(name))
27297	"\u003A\u0308\u0041",
50461	ensureOpen(boolean
12163	u437e
27698	"\u0061\u003A\u0308\u000B",
50845	(OutOfMemoryError
10996	"\2\264\1\u0375\27\264\1\141\12\264\1\0\3\136\1\0"+
23805	tracker
26261	3),
6596	Portals.</em>
64362	doccountpercent
65134	idx-1],
12361	uc190
34752	qp.parse("triplemulti").toString());
33514	String[]{"llll"},
39741	infos.clone();
1582	TermQuery
35983	testexclusivelowernull
58301	bByte;
28116	"\u0033\u0061",
40928	IntsRef(10);
46164	"áº"
30043	u1688
67062	doc.add(newField(this.field,
1316	3);
30879	encodedLength);
29371	((buffer[limit]&0xff)<<24)
65454	"live",
41008	fstEnum.seekCeil(pairs.get(upto).input)
62607	C:production
59145	"\2\uce38\2\ucedb\2\ucf7e\2\ud021\2\ud0c4\2\ud167\2\ud20a\2\ud2ad"+
33378	checkexpecteds
26537	noTVFieldNames.add(name);
43198	str_s
23893	"live")
15391	newfsdirectory
44144	,"ay",
63099	charTerm.resizeBuffer(TOKEN_LEN);
12894	u1635
56362	(lot
57710	testCommitOnCloseAbort()
51935	often:
44693	"áº"
24165	//doc.add
9575	"\1\uc5fb\1\uc69e\1\uc741\1\uc7e4\1\uc887\1\uc92a\1\uc9cd\1\uca70"+
31860	(low
26903	digits)
214	since
7183	removefirst
52406	freqs,
50257	cooled
19808	FieldScoreQuery(field,tp);
40213	freqs)
29699	"\3\2\1\13\11\2\1\14\2\2\1\15\43\2\1\16"+
10279	"\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135\1\u0136\1\u0137\1\u0138"+
61652	uc172
55479	"term3",
33437	two-phase
52016	merge_read_buffer_size
24015	"C-0",
23720	ideally
48653	valuelength
48117	jdbc
21114	lockinterruptibly
49151	RangeQuery.
46005	"áº"
56083	testBasics()
63960	TestTokenStream3();
27582	"\u00AD\u0031\u002E\u2060",
30042	u1621
33178	TestAttributeImpl2
65075	Custom
29912	"\1\53\4\0\1\53\2\25\2\53\12\0\2\25\1\0"+
64814	(loc
33054	src2
33065	src3
33155	src1
50416	_X_N.del
33051	src,
32435	dx++)
23310	createdocfrequencymap
15529	src)
20360	src'
56239	Object.class
64400	expandable
32966	freqs;
64197	Direct16(short[]
29972	"\2\103\15\0\1\103\132\0\1\103\153\0\2\103\11\0"+
3856	VirtualMethod<CharTokenizer>(CharTokenizer.class,
46166	"áº"
12493	u163f
22731	FieldCache.DEFAULT.getInts(reader,
22588	assertexternalclass
32440	(File
32717	CharBuffer.wrap(encoded);
58657	cachedDir.close();
19237	ÏÏ¿Ï?
29767	"\1\32\146\0\1\33\16\0\1\35\1\0\1\36\1\0"+
16708	reader2);
12092	u1649
8916	validation
61049	"\13\0\1\u033c\160\0\1\u03a1\4\u053a\2\0\1\u053a\15\0"+
59305	"\1\0\1\66\1\0\1\66\1\67\1\0\1\25\2\0"+
24514	"se")));
26560	(String)DocHelper.nameValues.get(term.field());
30972	testfirstresultspage
9852	"\1\202\1\0\1\50\1\0\1\51\2\0\1\203\3\0"+
13295	u162b
11424	"\16\230\1\347\12\230\175\0\1\376\32\264\1\141\11\264"+
13366	u4360
25780	in-order.
39197	queryExpl.addDetail(boostExpl);
48055	lockFactory.makeLock(name);
19847	log(s.explain(q,
26342	output.array(),
43249	assertTrue(tdocs.skipTo(4));
22690	(!includeLower
20087	weights.size();
47905	hashCode();
62184	es.shutdown();
24986	bfhjd
3178	nice
36075	"four")))));
44286	"ê¹"
11155	"\1\u0169\2\0\2\u0214\4\0\1\u0214\152\0\4\u03f4\2\0"+
33532	//(in)
56377	slice;
29769	"\1\43\5\0\1\44\3\0\1\45\11\0\1\46\2\0"+
32148	slice:
11244	"\12\u0439\1\u0391\13\0\1\u02cf\160\0\1\u0332\4\u0439\2\0"+
24641	testOutOfOrderDocsScoringSortMulti()
13068	u84ff
65002	minSuffixCount1
38255	0x80000000000003L
65007	minSuffixCount2
32077	slice,
54661	exits
63788	x8754321
32115	slice.
22061	weight.scorer(reader,
61557	u84f5
34580	PayloadTermSpanScorer((TermSpans)
29380	slice)
41071	cmo.isLeaf
22381	getSorter(a).insertionSort(fromIndex,
10025	"\3\0\1\340\2\0\1\341\12\0\1\342\17\0\1\343"+
32962	TermVectorsPostingsArray(int
37047	"backwards",
44289	"ï¼¤"
67688	this.os
64720	docFreq(r,
62929	"_188_1.del");
62586	reqoptsumscorer
64578	available);
7097	referred
39303	idfexplain
32763	++digit)
8159	curAvail)
47028	digraph
50207	LUCENE-888
1864	field)
30647	"\103\0\2\52\6\0\1\52\56\0\1\52\3\0\1\52"+
38358	x800000000000040l
23150	Searcher[]{indexSearcher1,
26114	unnecessary.
63281	0x54321,
10877	"\1\136\4\0\2\136\150\0\1\376\32\264\1\141\1\264"+
60356	"\160\0\1\u0168\4\u02f3\2\0\1\u02f3\15\0\1\u02f3\6\0"+
50427	sr.clone(true);
64668	payloadBoost.setValue(avgPayloadScore);
6955	LONG_POSITIVE_INFINITY
4076	field4
52538	field3
21177	Which
4078	field2
7279	this.pq
41660	testInternalFinalState()
4072	field8
28043	"\u0031\u002E\u2060\u003A",
625	_TestUtil.checkIndex(writer.getDirectory());
6226	field,
61397	"\32\u02e2\1\u034e\6\u02e2\1\u0667\3\u02e2\175\0\1\u034d\32\u02e2"+
23335	i=0;i<numThread;i++)
54851	ReferenceManager<IndexSearcher>
16933	field1
52537	field0
8484	field.
36699	delta="
59393	"\2\26\1\0\3\26\1\0\1\26\2\0\4\26\2\0"+
5402	multiphrasequery
24957	sqrt
28514	assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));
65540	currentSegmentsFile);
35242	freqOutput.getFilePointer());
25263	{"*o*",
31636	binary_plain_length
38120	intVals[i-1]
40840	dir.openInput("fst.bin");
9120	getsegmentcount
20459	4";
45687	"ï¼´"
37606	query.setSlop(4);
15822	(stored
67666	fielda
18508	arbitrary
49885	newbooleanclause
62183	-ba*")));
4640	getters.add("getReaderPooling");
11053	"\2\u03a1\1\u03a0\1\u03a1\1\u03a0\1\u039f\13\0\1\u0122\161\0"+
817	4",
62592	Term(FIELD_T,
41508	idString
67667	fieldb
22150	discussions
51229	segmentInfos.addAll(infos);
4772	testIndexWriterSetters()
14794	SHORT:
4504	termrangequery
46630	"ï¼»"
1754	fields
34305	control
57454	indexThreads
1907	field;
53147	out[out_offset++]
8728	field:
39661	"tangfulin")),
49886	numtokens
35139	testPT2()
11798	table.
44057	"áº¯"
32027	Maintaining
35344	1};
29469	Assert.assertTrue(System.getProperties().get(PROP_KEY1)
1981	table;
29156	STORE_POSITIONS_WITH_TERMVECTOR)
35723	table:
39659	"tangfulin"));
52811	hereby
64163	checkreads
53422	discussion)
223	reader1.deleteDocuments(searchTerm2);
53979	origNorm.bytes(bytesOut,
57883	byteBuf:
33246	multi-level
67675	testdeletes
8162	curAvail;
19775	posindex
63056	"<WILDTERM>",
5788	FAC_BITPOS];
11846	zzReader.read();
18936	"word"});
34368	acquiring
17196	TermInfosReader(dir0,
65256	//System.out.println("seg="
35989	(newField("field",
58863	ufffdabcd
57868	byteBuf;
44961	"ï¼¬"
52881	DAMAGES
27794	"\u0061\u0027\u2060\u0001",
48709	assertTrue(comp.compare("1.2.3.0",
60290	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\3\266"+
19513	Closeable...
22329	a[j]);
60572	"\1\u03b7\1\u03b8\1\u03b9\1\u03ba\1\u03bb\1\u03bc\1\u03bd\1\u03be"+
5949	2])
39622	tables
49623	jj_consume_token(RANGEEX_QUOTED);
28504	binaryFldCompressed
53912	assertEquals("\ud801\udc1c",
55160	r2.document(id2));
45999	"áº"
35393	specialToken
67996	fails).
57689	RamUsageEstimator.sizeOf(values);
32453	dirpath
44761	"ï¼©"
8166	super.readShort();
48695	Comparator<String>
30669	"\1\25\103\0\2\53\6\0\1\53\56\0\1\53\3\0"+
49661	jj_scanpos;
44142	"ê½"
22116	radix,
15803	files.add(fileName);
15519	preLockless
37244	incount
60934	"\12\u04d3\1\u043f\175\0\4\u04d4\2\0\1\u04d4\15\0\1\u04d4"+
68079	Packed32(int
34075	tcnt.put(t,
35672	(upper>>>16)
51037	mergeExceptions.get(i);
19928	test_score_tolerance_delta
18603	Ø¥Ø·ÙØ§ÙÙ
32520	TestIndexableBinaryStringTools
22100	radix)
4088	NumericField("ascfield2",
58870	xe000
33144	src.addAttribute(PositionIncrementAttribute.class)
7158	splitlongrange
22120	radix;
32568	0xD8
60568	"\1\u0349\4\u03b0\2\0\1\u03b0\15\0\1\u03b0\6\0\12\u03b0"+
66619	triggerOn(SorePoint.AFTER_CLASS);
41487	assertNull(Util.getByOutput(fst,
33546	cccc,11,15
64738	"aa5",
4439	NumericRangeQuery.newIntRange("test12",
49539	jj_consume_token(LPAREN);
43990	"ï¼¡"
9874	"\1\213\21\0\1\214\2\0\1\215\42\0\1\76\1\26"+
17335	"1001",
12360	uc0ed
20822	<p>Example
34194	conveniently,
42552	available",
13070	u8645
57675	Direct64
42372	payloadData[5
60949	"\1\u03d4\13\0\1\u0126\160\0\1\351\1\u04dc\31\232\1\352"+
53601	this.hq
50812	closeInternal(waitForMerges);
6904	min.toString())
50910	re-order
45978	"áº"
27745	"\u0061\u0027\u0308\u0001",
37975	zombie
63232	directory.sizeInBytes.getAndAdd(size);
34476	indexingChain)
51059	numMerges
20752	clone.offset
41794	allPrefixes)
3752	#isTokenChar(int)}
53959	this.in
16725	readOnlyReader.numDocs());
11807	<code>false</code>,
5706	<code>false</code>/
24671	various");
55073	IndexingThread();
5711	<code>false</code>.
61455	"\1\u034d\32\u02e2\1\u034e\1\u02e2\1\u0691\10\u02e2\175\0\1\u034d"+
65902	assertStopQueryEquals("stop",
64606	0xF0
8158	(len
34534	this.is
67512	ReaderCouple(IndexReader
42962	subpackage
15504	to/read
3320	contrib
27898	"\u0031\u003A\u0308\u3031",
44665	"ï¼¨"
5026	38)
28773	Math.log(skipInterval));
53345	SimpleFSDirectory
63188	herein
61651	uc0cf
51776	mergedReader
3630	isaborted
57218	(redefine
14901	namespace
27503	"\u005F\u0308\u002C",
4990	38;
5027	38:
8982	Term(field,
12091	u15a6
30553	"\5\0\3\25\1\0\1\25\10\0\1\25\1\0\2\52"+
46003	"áº"
31644	testupgrade29compression
22162	RamUsageEstimator}.
12761	uc0e3
22931	Integer[]
64705	maxTermsInBlock));
30399	railonrollback
14969	C"~N
48955	either:
3728	strip
34255	indexingChain;
17656	#CONSTANT_SCORE_FILTER_REWRITE}
1951	(field.isStored())
9288	denotes
42428	(b1[i]
5694	37;
7906	&quot;delete
34951	Weight()
5113	37:
62341	assertEquals(s(1,1,2),
1931	addRawDocuments(IndexInput
46001	"áº"
35667	either.
39687	1st
28025	"\u0031\u002C\u0031\u0027",
44887	"ï¼«"
17904	assertEquals("med,med,T,T",
17508	assertEquals("v2",
28818	skipBuffer[level].writeTo(output);
22289	slices
30041	u15ba
22246	short[newSize];
63053	"<TERM>",
5207	36,
23300	testnormalization
57593	term.field.compareTo(fields[input.readVInt()].field);
56902	"\17\0\2\3\1\0\1\10\1\0\1\11\2\12\1\13"+
24283	"long",
20404	"long".
15821	sharing
40446	<code>TokenStream</code>
45459	"ï¼±"
5073	36:
54660	environments.
67737	csq.length());
8546	exist
45980	"áº"
22984	testinsertionsort
38359	x800000000000043l
29441	org.junit.runner.notification.Failure;
41817	Collections.sort(matches);
20203	c.getQuery())
5202	35,
64375	Direct32
64293	350
49796	35;
62881	correctOffset(scanner.yychar()
5110	35:
49329	newRangeQuery(field,
34856	(termAtt.toString().equals("quick"))
49672	jj_scanpos,
44049	"áº§"
20230	c.getQuery();
16642	(Object[])
38929	lazyfields
49739	jj_scanpos)
13162	uc0d9
7230	TopDocs}
41805	List<Util.MinResult<Long>>
45719	U+1E97:
10991	"\20\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
46532	TWENTY
48750	"test"};
26109	score));
31308	oldIndxeDir,
43509	doTestGetSetVectorOfSize(1000);
23588	1MB
34599	(!more)
54122	'the'
39035	iter2.currentValue();
58848	bytePrefix
11126	"\1\u0385\13\0\1\u0325\161\0\4\u0380\2\0\1\u0380\15\0"+
11496	"\1\u04fa\2\u04d5\2\u04fa\1\u04d5\1\u04fa\1\u04d5\14\0\1\u0325"+
23228	topDocs.getMaxScore();
44694	U+1E96:
1067	200
5046	20:
1068	20;
55335	0xffff);
10121	"\1\36\3\352\1\362\14\352\2\36\2\352\2\36\1\352"+
9319	"\1\0\1\133\10\0\33\132\5\0\4\132\1\136\13\0\4\133\10\0"+
38654	doc.add(newField("unindexed2","test1",
24482	multiSearcher=new
66548	20%
3698	termAtt.setLength(bufferLength
17369	i=0;i<numDelDocs;i++)
26447	this.finalMask
49193	rangeCollator;
66499	0xffff))
57901	filechannel's
4423	20,
17600	testqueries
19129	testamharic
5018	20)
45972	"áº"
59786	"\32\36\1\u014c\12\143\1\66\1\137\1\144\1\137\1\0"+
46167	U+1E95:
48536	visitor.visitProhibited(parent,
6626	sortable
51004	format.</p>
5105	21:
55741	LogDocMergePolicy()));
5053	21;
62713	docStarts
5052	21)
10109	"\1\63\41\0\2\25\1\64\1\0\1\65\1\0\1\65"+
2467	DefaultSimilarity
53310	(_output
35985	21,
16434	testInvalidSnapshotInfos()
45995	"áº"
46129	U+1E94:
51917	startStartCommit
5050	22:
5022	22;
68067	leftterm
6090	assertNotSame(buf,
35644	str(ntz(i))
5021	22)
50773	#setWriteLockTimeout
17596	d4.add(newField("f3",
36215	other.nextFinalOutput;
65209	validOutput(lastOutput);
5204	22,
41757	36L));
5491	reinitialise
46502	,"17.",
24093	versus
43977	"áº®"
63226	lastModified)
36241	(flag(BIT_ARC_HAS_OUTPUT))
11523	"\150\0\1\376\32\264\1\141\6\264\1\307\3\264\1\0"+
8589	capture
63224	lastModified;
35496	ones=0,
59705	"\4\0\2\137\150\0\1\u0101\1\u0107\11\266\1\u0107\6\266"+
28483	binaryValStored.getBytes());
45974	"áº"
66259	cb);
38446	Field("termvector","termvector",
7241	implementation,
19938	implementation.
36816	FixedBitSet(1+nodeCount);
65785	eliminated
65648	lastFile
60283	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\11\266"+
67576	checkNormsClosed);
37859	implementation!
53440	format.format(lower),
46090	U+1E99:
46627	LIGHT
11343	"\175\0\1\u0163\4\u0485\2\0\1\u0485\15\0\1\u0485\6\0"+
38008	1L,
66522	textLen1;
61559	u863b
58266	0x75
66135	prohibited_field
68133	(hitA.score
63377	0x8,
51746	totDocCount:
22779	1L)
51740	totDocCount;
30833	Reader)}.
52763	expectedScores[i]
67381	subReaders0.length);
12268	u8659
64740	"aa7",
33346	Integer.parseInt(lastVal);
58269	0x6e
1592	sample
35338	2.4
6791	2.9
60110	"\2\137\1\140\3\137\3\0\1\137\4\0\2\137\151\0"+
32572	encoded[]
46006	U+1E98:
16210	explanations)
12669	u864f
58268	0x65
40396	2.1
59227	"\117\0\2\25\2\0\2\25\4\0\3\25\4\0\1\25"+
38	2.0
58267	0x63
31363	2.3
40398	2.2
27581	"\u00AD\u0308\u0031\u002C",
37542	test\"",
62595	Term(FIELD_C,
19797	Type.INT
45997	"áº"
63314	0x7,
7550	1L;
66032	{"one
58549	CharArraySet.EMPTY_SET.size());
8461	classcastexception
62158	assertEquals(score*(2.0/3),
23887	lastRecordTimeSec;
12668	u85ac
59622	"\1\0\1\52\2\0\1\53\3\0\1\54\2\0\1\55"+
7262	implementations
63282	0x6,
25005	bfjdh
7339	bother
33653	MockAnalyzer(random)).setMergePolicy(ldmp));
37282	sensitivity.
55478	"term2",
53962	(origNorm
12267	u85b6
28666	posIncrAtt
10137	"\1\140\1\367\1\352\1\36\1\356\6\352\3\36\1\352"+
52263	TermInfo()
30641	"\4\0\1\25\4\0\1\52\1\0\2\52\4\0\1\25"+
22704	FieldCacheRangeFilter<Short>
47850	commercial
59290	"\165\0\2\31\100\0\1\117\6\0\1\120\32\0\1\121"+
17217	addCoreClosedListener(CoreClosedListener
12359	uc04a
2627	(>2000).
57584	values...
26705	<code>query</code>,
22057	<code>query</code>.
63266	0x5,
19889	innerArray[j]
33487	"ll",
57693	org.apache.lucene.analysis.MockFixedLengthPayloadFilter;
1336	Payload(new
41243	fstSeekResult
63259	0x4,
59978	"\12\u01a5\1\u0167\13\0\1\u0126\160\0\1\u0168\4\u01a1\2\0"+
9464	zzUnpackAction()
39848	(!readOnly)
43541	"TESTBV");
29086	ordered.
26612	reader.getTermFreqVectors(0);
27927	"\u0031\u003A\u0031\u0027",
43072	release(G
17808	rewritemethod
67580	reader).getSubReaders();
30040	u1553
63255	0x3,
2003	(scratchArc.bytesPerArc
26259	2),
42118	IntsRef(ints,
63654	x75321
23742	NANOS_PER_SEC
19717	i=0;i<chunkStates.length;i++)
28977	0x2;
60739	"\6\0\12\u0445\1\u03d4\13\0\1\u0126\160\0\1\u0168\4\u0444"+
20114	(w.scorer(reader,
67391	reader1);
39322	docWriter.recycleIntBlocks(buffers,
42590	upto+left,
39807	segmentReaders.get(subReaders[i].getSegmentName());
2409	2);
9962	"\13\136\1\0\3\136\1\0\2\136\1\137\3\136\3\0"+
2010	(arc.label
41510	Long.toString(random.nextLong());
32353	release()
29996	StandardTokenizerImpl31(java.io.Reader
10338	"\4\0\2\136\150\0\1\u014e\10\264\1\307\21\264\1\141"+
59168	"\3\u42bd\3\u4360\3\u4403\3\u44a6\3\u4549\3\u45ec\3\u468f\3\u4732"+
63253	0x2,
32793	originalstringbuf1
32797	originalstringbuf2
61494	"\1\0\1\11\45\1\15\0\1\1\1\0\1\1\10\0"+
13069	u85a2
7601	0x20
5692	hashCode()
2333	Size:
21812	it.remove();
26990	SOFT
51293	written).
41826	assertEquals(matches.get(hit).output,
8148	(!curBuf.hasRemaining());
66306	nextPerField
63166	assertFalse(failed);
58932	(this.storeTermVector
56221	m.isSynthetic())
36390	idx=0;idx<nodeRefToAddress.length;idx++)
20463	2";
20778	#getNoOutput}.</p>
5546	negatives
48510	freq()");
28975	0x1;
36608	non-array:
2300	Payload(payloadMultiField1));
15891	private).</p>
12161	u4238
13364	u421a
33623	test5to0
46165	U+1E93:
4977	0x0L
63252	0x1,
6857	NumericRangeQuery<Long>(field,
18838	combining
26106	OutOfOrderMultiComparatorNonScoringCollector(queue,
41115	outputs.outputToString(current.output));
31536	testNumericFields()
64605	0x0F
51681	fininishing
66071	"f3"};
50648	(measured
26907	test(Analyzer
43508	doTestGetSetVectorOfSize(100);
26600	testTermVectors()
32880	0x0;
12562	u422e
1726	0x07
64118	0x06
49927	fieldtoken
1220	docCount=0;docCount<numDocs1;docCount++)
9572	"\1\ub6b3\1\ub756\1\ub7f9\1\ub89c\1\ub93f\1\ub9e2\1\uba85\1\ubb28"+
62727	SortField[_TestUtil.nextInt(random,
9053	pos1++;
63251	0x0,
46127	U+1E92:
27563	"\u00AD\u0308\u00AD",
17997	negative'
62356	(spanA.next())
22119	negative)
37027	delta);
45752	,"th",
3971	buffer.length)
40816	willRewrite);
44218	"ï¼£"
8180	negative,
53022	while(offsets[upto]
24396	LongParser");
42756	buffer.length,
53720	lowercased.</li>
50365	release(SegmentReader
54197	random.nextInt(25)));
36689	arc.nextArc;
42744	target="_top"
44570	,"fl",
19494	ExpectedException
5317	t.beginLine
4147	(byte
46163	U+1E91:
20758	(data[offset+i]
8037	resolved
48904	appropriately
39249	buffer.append("\"");
50554	conf.getOpenMode();
15254	FaultyIndexInput
2114	addNew(int
25304	nowildcard
55344	r.nextInt(4)+1;
66143	stdanalyzer
43604	IllegalArgumentException("DeletesMode.DYNAMIC
12963	u4224
21860	byte[0][];
13161	uc036
63022	RANGEIN_GOOP
43016	Refresh
21268	assertSameSeekBehavior(String
45976	"áº"
51858	testPoint("midStartCommit2");
49818	p.next;
6975	relevant.
12090	u1503
44165	"ï¼¢"
67545	createDocument(int
46125	U+1E90:
61650	uc02c
8782	java.util.Stack;
64552	buffer.length:
56803	numtokeep
12760	uc040
35016	filterDoc)
64194	(mod
821	MockIndexWriter3(Directory
30363	impl.commitData);
39727	IOUtils.closeWhileHandlingException(prior,
44137	"ê¹"
11390	"\6\0\12\u04ad\1\u04ae\13\0\1\u02cf\160\0\1\u0332\4\u04ad"+
43300	this(Arrays.asList(fields));
62842	this.maxTokenLength
34830	(!next)
52033	flushdeletescount
20428	3",
40830	builder;
10972	"\1\376\1\u0367\31\264\1\141\12\264\1\0\3\136\1\0"+
10562	"\2\152\1\137\3\136\2\0\1\76\1\136\4\0\2\136"+
1509	config);
26682	high-level
57169	endmask;
3071	super((Weight)
28721	"/Computers/Mac"));
49188	RangeQuerys
11580	"\12\u0538\1\u0500\13\0\1\u02cf\160\0\1\346\32\230\1\347"+
54982	genlock
22753	FieldCacheRangeFilter<Float>(field,
42508	testAcrossFields()
26127	maxScore);
44059	"áº±"
57965	assertEquals(numPositiveScores,
64320	Math.min(BooleanQuery.getMaxClauseCount(),
56769	(wasFullyMerged
7462	0};
57588	input.readBytes(reuse.bytes,
6874	Double
62212	scorer.score()));
66694	testfailureafter
6914	@SuppressWarnings({"unchecked","rawtypes"})
15275	FaultyIndexInput((IndexInput)
48876	munging
45637	U+1E9D:
34920	sprq
44053	"áº«"
26021	comparators[i].copy(slot,
16483	snapshots_doc
34379	maxBufferedDeleteTerms)
66863	maxCeiling
16474	snapshotdir
2137	readfirstrealtargetarc
20815	facilitate
17961	TermRangeFilter("content",
51823	trips
16213	qtest(makeQuery(queryText),
60122	"\14\0\1\62\4\0\1\202\2\0\1\203\41\0\1\25"+
65950	((b:two
37045	arcStartPos;
34252	maxBufferedDeleteTerms;
45646	U+1E9E:
37460	query.setSlop(3);
40757	UpToTwoPositiveIntOutputs))
4474	testonematchquery
20461	3";
33564	llllllll
20556	versa.
62140	"nestedvalue2")),
19428	negated
47426	squirrel
52797	optical
62906	j=0;j<files.length;j++)
7604	"0000"
34674	payloadsseen
31611	assertEquals("Index
15145	super.accept(fieldName);
8524	sinks
62491	ConjunctionScorer(weight,
9654	"\3\u5863\3\u5906\3\u59a9\3\u5a4c\3\u5aef\3\u5b92\3\u5c35\3\u5cd8"+
37024	addressError;
39993	termDocs(Term
51432	result.allDeleted);
11276	"\12\230\175\0\1\346\32\230\1\347\2\230\1\u0456\7\230"+
38703	index2.norms(curField);
60449	"\1\0\1\u034f\4\u02e3\1\u0350\1\0\3\u02e3\1\0\1\342"+
16252	s.length;
32333	Collections.synchronizedMap(new
9132	FieldsWriter((IndexOutput)
28859	ByteBlockPool(termsHash.docWriter.byteBlockAllocator);
29706	"\1\0\5\25\1\0\3\25\1\0\11\25\1\0\2\25"+
61052	"\1\u053d\2\u053c\2\u053d\1\u053c\1\u053d\1\u053c\1\u053b\13\0"+
43969	"áº¦"
65472	Windows),
53648	subindex
31067	merger.fieldInfos().hasProx(),
12492	u159c
21479	e1.clone();
26632	notermvector
19379	negate;
2643	Counter
31123	#nextDoc()},
38980	assertEquals(o1,o2);
57411	getbit
26912	<START
12160	u4195
53932	testfillnohighsurrogate
32460	purpose");
65640	Windows):
19384	negate)
38316	plusinf
42115	IntsRef(int[]
42317	payloads",
56265	togenericstring
31835	alternatively
39559	termBytes>,
59941	"\1\141\27\36\1\u018e\2\36\1\142\12\143\1\66\1\137"+
18382	h[3].score;
12561	u418b
44063	"áºµ"
49086	!hasNewAPI)
48018	#setLockFactory}.
40305	getterminfosindexdivisor
10882	"\32\264\1\141\1\u0308\11\264\1\0\3\136\1\0\2\136"+
43606	this.cache
23510	doc");
65185	pos1+1;
5914	WRITE_MASKS[bitsPerValue];
8564	sink;
63911	Integer.toHexString(cp),
57245	twos=twosA^twosB;
36976	addressError
48295	subSpans[0]
5135	++curPos;
12962	u4181
22933	1];
41053	cmo.count
8315	bufsize
13294	u1588
66817	ArrayList<Integer>(queryTerms.length);
50722	#setRAMBufferSizeMB}
43165	1],
65451	contructor
22547	Lucene/Solr
5832	1])
61776	u157e
54741	IOException("Found
58571	hset).iterator())
11096	"\1\376\32\264\1\141\6\264\1\u03c9\3\264\1\0\3\136"+
12893	u1592
28020	"\u0031\u002C\u0308\u0061\u002C",
49847	fuzzyprefixlength
26527	for(FieldInfo
41416	(storeOrds
13363	u4177
65287	owner.NO_OUTPUT;
11620	"\1\u0553\15\0\1\u0553\6\0\1\u0555\1\u0557\1\u0556\2\u0555"+
52381	processors.put(dir,
65541	CorruptIndexException("failed
6837	(min
2981	docbase
7790	"+f.name(),
33210	attributesources
67689	os.write(b);
65573	commitsToDelete.clear();
55053	IndexingThread[]
12159	u40f2
2674	0th
7127	precisionsteps
61775	u14db
12961	u40de
48982	#setDateResolution(String,
15209	assertTrue(fb.isBinary());
39034	iter2.nextKey();
2018	arc.isFinal
67933	minPosLength;
36038	assertEquals(1.0f,
48264	subSpans.length
5106	28:
63020	28;
13293	u14e5
11372	"\15\0\1\u049e\6\0\12\u049e\1\u0424\175\0\4\u049f\2\0"+
12560	u40e8
33364	(used
52158	syncing
24434	testIntParser
41201	(storeOrd)
12892	u14ef
14637	Doubles.
5190	27,
2175	singleton
29968	"\1\65\4\0\2\65\3\0\2\65\1\0\1\65\4\0"+
35134	testPT1()
20812	getnooutput
40986	next/seek");
30039	u14ec
53490	Searchable[]
48419	advance,
7887	IndexInput#close}
9362	"\11\0\1\133\71\0\53\142\24\143\1\142\12\134\6\0\6\142\4\143"+
5028	27:
4402	true)));
63018	27;
12491	u14f9
13362	u40d4
44405	"áº¼"
55313	nextInt(20);
9002	bytes.utf8ToString());
10820	"\1\u0216\5\0\2\u0212\4\0\1\u0212\151\0\1\u0212\32\u0213"+
64667	avgPayloadScore
50914	offline
1338	0x1
17391	test_lucene3442
60814	"\1\u047e\13\0\1\u02e1\160\0\1\u0349\4\u047d\2\0\1\u047d"+
26526	noTVFieldNames
3410	OneMerge
5208	29,
62546	(prohibitedScorers.size()
27059	"\r\u0308\u0061\u2060",
45014	MIDDLE-WELSH
51927	(infos.version
3937	charCount;
15207	assertTrue(f1.isBinary());
5195	29)
37837	LetterTokenizer(Reader
57264	a.wlen-b.wlen);
5196	29;
50452	getIfExists(SegmentInfo
30593	"\1\25\1\65\1\26\1\103\3\0\1\65\1\0\1\65"+
32251	twice",
5063	29:
35771	x0000ffff
48564	consumer.start(fields,
55144	(idField,
31488	fail("incorrect
32715	char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];
7734	little
9616	"\2\u96d3\2\u9776\2\u9819\2\u98bc\2\u995f\2\u9a02\2\u9aa5\2\u9b48"+
46041	,"(x)",
5533	24)
42021	prefixoutput
44538	U+1E9B:
27403	"\u0027\u0308\u0061\u003A",
9179	24;
5059	24:
1199	assertTrue("failed
67660	readerthreadtask
23143	"doc1"
51254	mergePolicy.useCompoundFile(segmentInfos,
24301	assertMatches("sortField:"+t.sortField,
21404	FSIndexInput
21215	(Math.random()
5008	23)
59286	"\1\73\7\0\1\57\2\0\1\60\4\0\1\111\14\0"+
5205	23,
59783	"\12\36\1\u014a\17\36\1\142\12\143\1\u0142\1\137\1\144"+
66748	<code>IndexReader.maxDoc()</code>
11796	Unpacks
60512	"\12\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
4438	NumericRangeQuery.newIntRange("test11",
49877	getmultitermrewritemethod
45635	U+1E9C:
25049	isfull
5056	23:
35713	nlzTable
17506	assertEquals("v1",
1025	23;
10943	"\12\u0340\14\0\1\u0122\214\0\1\u02de\1\u0341\1\u0340\2\u02de"+
11142	"\2\0\1\u03e9\15\0\1\u03e9\6\0\1\u03ea\2\u03eb\1\u03ea"+
32700	assertEquals("decoded
16000	RUN_TIME_MSEC;
39827	segmentInfos.getSegmentsFileName();
23141	"doc0"
48024	prepared
39658	testTermQuery()
40519	#captureState}
36896	node),
59638	"\1\140\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101"+
16638	node))
50909	aggressively
3073	advance(int
65277	node's
61372	"\1\u065d\6\0\12\u065d\1\u062f\13\0\1\u033c\161\0\4\u065c"+
49733	jj_la--;
19160	ØØ
5174	26)
31784	FSDirectory.open(new
18979	(getClass().getResourceAsStream("LuceneResourcesWikiPageURLs.txt"),
67436	reader2-reader5
2070	node);
3532	i=0;i<count;i++)
36948	node):
65630	comments:
24826	idSource.getInt(docID)
53772	add(char[]
5175	26;
26044	Declaring
5062	26:
66403	c1-c2;
26204	currentmaxvalue
40748	InputOutput(IntsRef
64874	intstarts
5201	25,
24247	SortField.LONG),
44041	U+1E9A:
49264	(severalTokensAtSamePosition
20372	fieldsToLoad
25866	spannear
57885	byteBuf.limit(len);
63016	25;
24722	iter.next();
64660	reusable.
5060	25:
6934	(max
9324	"\12\134\41\132\11\133\2\132\2\0\1\137\1\0\1\132\5\0\26\132"+
44081	"ê²"
60627	"\3\266\1\u03fb\26\266\1\142\12\266\1\0\3\137\1\0"+
6650	256
6656	255
28145	extend_fe
62162	dmq.add(new
29903	"\56\0\1\52\3\0\1\52\2\0\1\52\3\0\1\52"+
41793	allPrefixes.size()
6616	developed
33121	Token());
55724	DocHelper.createDocument(x,
46296	"â"
537	org.apache.lucene.analysis.Token;
49869	getallowleadingwildcard
4963	94:
29039	Arrays.fill(tvfLengths,
14838	numHits
5185	93:
38402	sis.read(d);
28742	skipInterval
1351	phrasequery
35012	trick
44354	U+02A3:
24840	NUM_DOCS)
54965	searchingGen:
54863	searchingGen;
56555	(reqScorer.advance(target)
52379	NUM_DOCS,
17569	single(Random
57787	"first");
34701	multiToken
41006	advanceCeil("
35879	(TermQuery)
2512	defaultsimilarity
62325	"first"),
18700	"à¦­à¦¾à¦·à¦¾à¦¯à¦¼",
5079	92)
57880	(!isClone
4740	maxBufferedDocs
61088	"\7\u02e2\175\0\1\u034d\6\u02e2\1\u0563\1\u0564\22\u02e2\1\u034e"+
36410	FST<T>(new
34150	phrasequeue
6295	(field3:query3)...(fieldx:queryx)
7752	NUM_DOCS;
50244	flushDeletesCount
4961	91:
54938	searchingGen)
3565	usually
39317	intUpto
16917	testreopensegmentreadertomultireader
417	foundation
31609	getNumberOfSegments(dir);
37326	makeStopSet(String[]
19098	sophisticated
34985	Weight},
29513	inafterclass
35715	nlz(long
10779	"\4\0\2\136\150\0\1\376\16\264\1\u02a0\4\264\1\u02a1"+
60847	"\1\u0496\15\0\1\u0496\6\0\12\u0496\1\u0497\13\0\1\u0126"+
28563	org.apache.lucene.analysis.Token}
48685	testIndexWriterLockRelease()
10849	"\1\347\12\230\175\0\1\346\24\230\1\u02ea\5\230\1\347"+
45468	U+02A0:
6000	Token();
54441	getdetails
28600	readChar();
4036	getbuffer
31968	<code>field</code>
27632	"\u0061\u2060\u0308\r",
56196	((in.doc()
25946	reverseMul;
36646	readFirstRealTargtArc
31172	testCreateSurrogates()
55127	printDocs(r2);
6060	there",
10164	"\2\352\1\36\1\352\3\36\1\352\1\36\1\352\1\36"+
62817	needs.
30567	"\1\0\1\40\1\0\1\41\1\0\1\131\3\0\1\132"+
41283	(((Long)
18338	testSimpleTiebreaker()
15233	fsDir.getLockFactory();
10617	"\1\376\31\264\1\u01f6\1\141\12\264\1\0\3\136\1\0"+
30037	u141e
2141	label
45754	U+02A6:
54019	"refCount="
9293	YYINITIAL
28612	getColumn()
67863	"a/x:3
17222	openDocStores(SegmentInfo
40671	97,
61774	u1438
62858	attributes:
29505	systempropertiesrestorerule
58847	20-prefix);
1275	25);
42939	attributes.
65470	tried
22508	attributes,
23932	recordtimesec
44356	U+02A5:
20924	CharTermAttribute}
33481	"cccc",
27407	"\u0027\u0308\u0061\u0027\u2060",
13292	u1442
35857	fuzzy
59898	"\1\u017a\1\u017e\3\u016f\1\232\3\u016f\1\232\1\u016f\1\232"+
7494	termsHashPerThread.docState;
16582	tries
741	.setRAMBufferSizeMB(0.2).setMergeScheduler(new
39196	"boost");
26495	assertTrue(reader
21653	Match
59855	"\2\26\2\0\2\77\1\100\1\0\1\26\2\0\1\25"+
10833	"\1\u02d7\15\0\1\u02d7\6\0\12\u02da\1\u02d8\13\0\1\u0122"+
51959	getPayloadProcessorProvider()
12490	u1456
431	java
59476	"\1\145\1\140\3\137\3\0\1\137\4\0\2\137\2\0"+
1061	conf.getMergePolicy()).setMergeFactor(100);
35321	assertTrue(stream
63445	0x873,
48366	(minimumNrMatchers
55291	assertNotNull(pos2);
8021	(PrivilegedActionException
8910	iterator()
36949	nodeRefToAddressIn
18982	(line
17464	single.getIndexReader().close();
846	conf.getMaxBufferedDocs()));
37036	deltaCount++;
18941	String[]{"ìëíì¸ì",
35896	other.setBoost(2.0f);
61500	"\2\1\20\0\1\1\10\0\1\1\3\0\1\1\40\0"+
58387	"then",
24867	topN="
63449	0x874,
53467	Weights.
15270	seekInternal(long
63443	0x872,
39675	org.apache.lucene.store.Lock;
58683	reported
28556	after_class
24860	r.maxDoc()
6086	Token(0,
16750	ReadOnlyDirectoryReader)
67922	posLength);
24794	dataIntVal(fdocs[0].doc,
67735	appendNull();
4569	MySimilarity
63242	getandadd
27257	"\u0041\u0308\u00AD"
67528	r.printStackTrace(System.out);
31545	100).scoreDocs;
27352	"\u002C\u00AD",
7805	test_nightly
29952	"\2\64\11\0\1\64\115\0\2\64\6\0\1\64\56\0"+
46683	"ï¼"
63442	0x871,
19967	org.apache.lucene.analysis.Tokenizer;
40776	arc.isFinal());
8666	capturestate
20784	common("foo",
30034	u12e9
32569	encodedLen
16612	adjust
20757	i=0;i<length;i++)
17804	getmaxclausecount
16570	maxSize
25868	nearspansunordered
46770	"ï¼"
6397	defining
55863	dotestindexwriterreopensegment
8648	whitespacetokenizer
37124	fileoutputstream
29384	(numLeft
33425	digest.getValue();
46319	"â"
29597	"\13\0\1\133\1\0\1\133\1\0\1\133\4\0\2\133\10\132\1\0"+
60788	"\1\u0469\21\266\1\142\12\266\1\0\3\137\1\0\2\137"+
23410	99,
957	j=0;j<reader.maxDoc();j++)
30340	TwoPhaseCommitImpl(failOnPrepare,
52895	ACTION,
5427	jjbitvec3
5428	jjbitvec4
45741	U+02A8:
5424	jjbitvec1
32851	perThread.doc.numVectorFields
54481	this.delegee
5421	jjbitvec0
28739	nonexistantfield
61772	u12f2
37525	"firstname"));
58980	mmapDir.openInput("zeroBytes");
21559	searchTerm;
52453	valSize)
16475	persistentsnapshotdeletionpolicy
13290	u12fc
9564	"\1\u8df3\1\u8e96\1\u8f39\1\u8fdc\1\u907f\1\u9122\1\u91c5\1\u9268"+
122	searchTerm2
124	searchTerm3
3522	contains
118	searchTerm1
16531	'top'
275	searchTerm,
23003	"Once
6661	almost
46711	"ï¼"
49117	this.allowLeadingWildcard
19436	consumer;
27766	"\u0061\u0027\u005F",
34279	mergeScheduler
2361	query.getSpans(searcher.getIndexReader());
24348	(result[x].doc
51505	mergedReader.numDeletedDocs()
57043	<td>1.46</td>
15586	input.readStringStringMap();
59424	"\1\0\2\32\7\0\3\32\2\0\2\32\12\0\2\32"+
21992	consumers
23208	(within
25352	"jumps"
53774	"read-only"
3686	termAtt.length();
11207	"\1\141\6\264\1\u041d\3\264\1\0\3\136\1\0\2\136"+
46342	"â"
40260	oldstarts
61417	"\15\0\1\u0675\6\0\12\u0675\1\u0658\174\0\1\u03a1\4\u0675"+
46675	"ï¼"
55182	tv2[i]);
9388	"\15\132\63\0\41\133\21\0\1\132\4\0\1\132\2\0\12\132\1\0"+
27515	"\u005F\u0308\u0300",
20934	<b>new
50844	readerPool.close();
37257	nextcount
14690	Type
11840	zzBuffer.length-zzEndRead);
41709	arc.label);
62943	filesPre
26525	tvFieldNames
37158	fixed_array_num_arcs_shallow
62510	makeCountingSumScorerNoReq(boolean
62517	nrOptRequired);
35098	file.length)
8817	TestRule()
25366	jdkSet)),
56297	Integer's
6032	assertEquals(buf.toString(),
1722	FIELD_IS_COMPRESSED
67538	refresh.");
38414	assertFalse(r2.getIndexCommit().getSegmentCount()
11942	zzMarkedPosL;
35068	file.length;
23487	(!seen)
1111	OutOfMemoryError
51370	pendingCommit.createBackupSegmentInfos(true);
3570	SetOnce
46792	"ï¼¿"
25628	all.size();
11847	zzBuffer[zzEndRead++]
49638	term.image.length()-1)),
16959	incref
7423	freqproxtermswriterperfield
49583	!");}
59084	"\2\3\20\0\1\11\10\0\1\12\3\0\1\2\40\0"+
23258	HashSet<Term>();
39101	org.apache.lucene.index.MultipleTermPositions;
54324	addbypooloffset
16569	unused.
11268	"\6\230\1\u044d\3\230\175\0\1\346\32\230\1\347\6\230"+
46647	MEDIUM
10335	"\1\u013f\1\u0140\1\u0141\3\0\1\136\4\0\2\136\150\0"+
14610	zzforaction
46761	"ï¼"
45034	U+02AB:
41557	assertNotNull(actual);
64714	"aa3",
16833	deleting
22772	FieldCache.DoubleParser
60170	"\3\0\1\137\4\0\2\137\150\0\1\u0101\1\266\1\u024f"+
30621	"\1\0\3\32\1\0\1\32\2\0\4\32\2\0\1\32"+
15913	s.append('c');
46390	"â"
8139	(curBufIndex
18635	Ü£ÜÜÜÌÜÜ
664	!name.equals("startDoFlush")
36885	arcAndState2.arc.label
3663	ClassicTokenizer.TOKEN_TYPES[ClassicTokenizer.APOSTROPHE];
46767	"ï¼"
67359	subReaders1.length);
8714	_TestUtil.nextInt(rand,
16716	lock");
52448	NumericTokenStream(precisionStep).setFloatValue(value))</code>
53911	assertEquals("123\ud801",
1734	unused:
24520	MultiSearcher's
32721	(byte)random.nextInt(0x100);
53727	behave
11650	"\1\u0554\175\0\4\u0562\2\0\1\u0562\15\0\1\u0562\6\0"+
42073	FieldComparator[numComparators];
46366	"â"
21606	wildcardEquals(String
19100	UAX29URLEmailTokenizer(reader);
46394	"ï¼"
7948	Constants.JRE_IS_64BIT
33272	RollbackDeletionPolicy(id)).setIndexCommit(last));
37456	query.setSlop(2);
41811	Util.MinResult<Long>(Util.toIntsRef(new
14892	relevance
4435	NumericRangeQuery.newIntRange("test9",
66382	pivotBuf
11338	"\1\u047f\6\0\1\u0481\1\u0483\1\u0482\2\u0481\2\u0482\1\u0481"+
27831	"\u0061\u0027\u2060\u0308\u0061\u0027",
11923	ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
61337	"\1\u034e\5\u02e2\1\u0640\4\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
46346	"ï¼"
2521	payloadfield
19955	add(E
45030	U+02AA:
24530	relevancy
20047	add(Query
15675	deletion
33153	Iterator.class);
58628	add()
12974	u4925
9600	"\2\u4553\2\u45f6\2\u4699\2\u473c\2\u47df\2\u4882\2\u4925\2\u49c8"+
27558	"\u00AD\u0030",
55679	DocHelper.createDocument(i,
57025	<br/>Results
29360	eof()
66070	"three"};
28148	vertical
63425	0x865,
43597	CachingWrapperFilter.DeletesMode.RECACHE);
30678	"\1\25\1\0\1\25\1\0\11\25\2\0\1\25\4\0"+
24517	"BJDHF");
12489	u13b3
7092	constant_score_auto_rewrite_default
49278	mpq.setSlop(phraseSlop);
49050	href="#version">above</a>.
61028	"\32\232\1\352\1\232\1\u052b\10\232\175\0\1\351\6\232"+
9502	"\0\u540c\0\u54af\0\u5552\0\u55f5\0\u5698\0\u573b\0\u57de\0\u5881"+
26407	inputChar;
30036	u13b7
46370	"ï¼"
51930	!bufferedDeletesStream.any()));
13375	u491b
4607	assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING,
38197	assertLongRangeSplit(Long.MAX_VALUE-0x10L,
46206	"â"
62778	shards
16584	add(T
41706	startArc.nextFinalOutput);
50951	add).
30878	termAtt.buffer(),
43533	testWriteRead()
9058	shared
49499	Query(field);
16780	0.5f);
30759	Character#codePointAt(char[],
36505	"like
12172	u4939
48479	Certain
38027	prefixVals[i-1].compareTo(
12573	u492f
36467	lastArcStart
12890	u13a9
7615	errorLine
46323	"ï¼"
8204	shares
6453	before.");
46252	"â"
26567	"field"));
22360	toIndex-1);
18251	d1.add(newField("id",
58803	assertEquals(utf16.length,
58446	iterator's
63413	0x863,
22216	grow(short[]
66777	((i+1)
62350	check(qA,
42612	info.getDoc(),
38936	testopenemptydirectory
54902	finished:
4578	MyWarmer
16633	child
23233	score!",
46411	"â"
44679	U+02AE:
65322	outputPrefix)
63411	0x862,
3809	href="#version">above</a>}
31258	Integer.parseInt(d.get("id"))
29286	tvfpointers
63417	0x864,
26951	"\u0001\u3031",
53500	Searchable}s
46300	"ï¼"
26344	outputLength);
57049	<td>&nbsp;</td>
62351	check(qB,
41413	share,
21039	dir.setMaxSizeInBytes(thisDiskFree);
67486	searcher.search(
17579	"v2",
19191	Ø§Ø
41815	minLongComparator));
65617	Revisits
46229	"â"
18881	O'Reilly's
18786	"à¹à¹à¹à¹"
42396	_TestUtil.randomFixedByteLengthUnicodeString(random,
11706	device
44682	U+02AF:
12088	u13bd
39338	super(maxSize);
35480	http://www.hackersdelight.org/revisions.pdf
60427	"\4\0\2\137\150\0\1\u0101\32\266\1\142\11\266\1\u0333"+
7686	stringbuffer
23924	arrives
4284	termCountT
64176	mockindexinput
19404	:-)
11074	"\1\230\1\u03b5\27\230\1\347\12\230\175\0\1\346\1\u03a7"+
46277	"ï¼"
64946	runnable
13373	u47d5
51162	finishes.
33310	comm.getFileNames();
37413	{"again",
46298	"â"
67590	bitVector
24332	v.length;
4287	termCountC
12972	u47df
11178	"\31\230\1\347\12\230\175\0\1\346\15\230\1\u0406\14\230"+
9183	termCount;
50980	optimize(int
39491	initialize(directory,
12089	u1460
45052	"ê½"
30884	MyTopsDocCollector
46231	"ï¼"
63097	this.tokensPerDoc
53156	((utf8[offset]&0x3f)<<12)
12571	u47e9
25140	{"metal",
35883	allowedTerms.remove(term);
46344	"â"
55664	NUM_INIT_DOCS
37626	termCount)
12891	u144c
18689	"à¦¸à¦à¦¸à§à¦¥à¦¾",
26639	gettermfreqvectors
30910	1.3077754f,
53653	rewrittenquery
67247	getinputstream
35049	filteriter
65414	testcrash
15847	filesSet.add(fileName);
42853	newEndOffset);
46275	"â"
46254	"ï¼"
16214	expDocNrs);
12170	u47f3
32905	incrementally
23794	performs
58436	set.add(NOT_IN_SET.toCharArray());
9430	"\3\50\15\25\11\26\1\11\24\26\2\25\11\26\1\11\31\26\1\11"+
41800	topN);
41902	fstlong0
46189	"ï¼"
30038	u1485
40939	Util.toBytesRef(input,
48681	File[]
30936	testFirstResultsPage()
17927	biggest,
28405	ref.toString());
46321	"â"
3684	termAtt.buffer();
46208	"ï¼"
14518	unkown
344	deleteReaderReaderConflict(false);
33440	#prepareCommit}
38336	x000000000000000l
42532	numfieldinstancestoskip
52076	setmaxmergemb
38932	testlockobtainfailed
46750	"ï¼"
67937	posLength>1
54547	ArrayUtil.quickSort(a1);
35143	testPT4()
1156	fail("segmentInfos
4866	skip
58305	UTF8SortedAsUTF16Comparator();
23520	there's
46392	"â"
50818	presently
28985	this(d,
29652	"\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\121"+
46757	"ï¼"
36273	emptyOutput
50096	org.apache.lucene.util.TwoPhaseCommit;
57999	perField.termsHashPerField.reset();
61107	"\31\232\1\352\12\232\175\0\1\351\26\232\1\u0577\3\232"+
20237	clauses.size()-1)
9584	"\1\uf3d3\1\uf476\1\uf519\1\uf5bc\1\uf65f\1\uf702\1\uf7a5\1\uf848"+
29564	"\4\133\66\132\3\133\1\132\22\133\1\132\7\133\12\132\2\133\2\0"+
46617	"ï¼"
49164	setLocale(Locale
37724	mp).setUseCompoundFile(useCompoundFiles);
8783	org.junit.After;
66021	"two"};
68058	testletterasciihuge
7086	tostringutils
29136	SegmentTermVector[fields.length];
25546	Map<Integer,
42316	d.add(newField("f1",
31480	"_0_1.s"
66092	f3:bla*",
46368	"â"
18312	assertTrue("firsttime
48890	(field.equals(testFields[1]))
55481	termAtt.setEmpty().append(tokens[index++]);
19991	maxClauseCount
37921	consumed:
46789	"ï¼¾"
34235	DEFAULT_READER_POOLING
329	writer.setInfoStream(VERBOSE
20003	Attempts
55910	purging
8582	consumed.
36331	cacheRootArcs()
40523	consumed,
26901	(Excludes
39070	StringBuilder(NOT_IN_MAP),
23375	modifier.setInfoStream(VERBOSE
2124	address
56168	testbasics
46413	"â"
1099	need
21932	#seek(long)
11317	"\4\u0473\2\0\1\u0473\15\0\1\u0473\6\0\12\u0473\1\u0474"+
32126	80,
12333	uafbc
51946	deletePendingFiles()
32454	listfiles
30185	(int)(enumerator.position/totalIndexInterval)+1;
23825	old="
50761	message("\ndir="
1873	NumericField)
25286	matchOneDocPrefix[i][j];
46665	"ï¼"
28238	Forces
36561	bytes[right];
65215	lastOutput);
7460	incs[]
11015	"\1\u0325\161\0\4\u0384\2\0\1\u0384\15\0\1\u0384\6\0"+
33149	@SuppressWarnings({"rawtypes","unchecked"})
41039	Crazy
48757	other.pos;
46703	"ï¼"
44621	"áµ·"
51217	info.getDocStoreSegment();
52533	assertFalse(te.next());
36923	minInCountDeref)
53646	getsearchables
17413	sb.append(",
5539	(since
38717	index1.isDeleted(i),
38578	_0_1.s0)
56307	maxDepth)
26871	(other
49843	allowleadingwildcard
6701	division
46744	"ï¼"
36898	minInCountDeref,
49377	newWildcardQuery(t);
36345	Arc<T>().copyFrom(arc);
32099	Partial
6628	precisions
24753	TotalHitCountCollector
5658	orig_floattobyte_v13
23419	Roll
66425	doCall
46747	"ï¼"
18091	this.innerWeight
40362	pointermax
55577	r2));
31340	d.getField("content2");
5148	84:
45931	"Ê"
43507	doTestGetSetVectorOfSize(20);
59893	"\1\351\1\u016f\31\232\1\352\12\232\175\0\1\351\1\u016f"+
67292	iwriter
50601	releasing
21299	csw.addFile(name);
55290	assertNotNull(pos1);
41184	Build
6462	StringWriter
50057	os.setLength(finalLength);
41154	termsSet.toArray(new
65881	testNestedConjunctionTerms()
53960	this.number
6652	precision.
12087	u131a
4962	24);
38249	precision,
17181	near
42075	(highest
44603	"ï¼§"
28336	rscorer;
48696	StringHelper.getVersionComparator();
61247	"\1\u05f7\15\0\1\u05f7\6\0\12\u05f7\1\u05b9\13\0\1\u033c"+
63408	0x854321,
31765	used.");
2330	assertTrue("hits
37213	readlast
37968	backingstore
35246	Instead
55031	testMultiConfig()
45704	"Ê"
46651	"ï¼"
53714	pagestart
12889	u1306
42003	style
45706	"Ê"
29231	termFreqs[currentPosition]
21403	dir.openInput("f11");
37995	NumericUtils.prefixCodedToInt(act));
48305	fragment
10676	"\1\u0169\162\0\1\376\1\264\1\u023e\30\264\1\141\12\264"+
47903	ValueSourceQuery#hashCode()}.
50970	Important
62598	search(Query
18532	Õ­Õ´Õ¢Õ¡Õ£ÖÕ¥Õ¬
45867	"Ê"
54191	BytesRefHash
61367	"\4\u0657\2\0\1\u0657\15\0\1\u0657\6\0\12\u065a\1\u0658"+
46594	"ï¼"
12488	u1310
42465	ByteArrayPool(numThreads,
22114	len--;
50823	close)
23837	close.
12973	u4882
32003	setEstimatedSize(String
50065	close,
3146	curBase
10334	"\25\264\1\141\12\264\1\u014f\3\136\1\0\2\136\1\137"+
47947	objects[i];
56853	"\1\0\3\12\55\0\11\2\25\0\10\12\1\0\3\12\1\0\27\12"+
45993	"Ê"
16851	clonedReader.flush();
12887	u11c0
18208	multisearcher
50822	(fails
3531	merges.size();
25884	close"
66995	assertEquals("initially
59041	mmapdir
29018	FileNotFound
9511	"\0\u81e4\0\u8287\0\u832a\0\u83cd\0\u8470\0\u8513\0\u85b6\0\u8659"+
12486	u11ca
3744	creating
8025	ioe.initCause(e.getCause());
65582	readFrom)
58024	tvx.writeLong(tvd.getFilePointer());
39560	previous.*/
64068	checkRandomReads(DataInput
60529	"\1\u0101\10\266\1\u0391\21\266\1\142\12\266\1\0\3\137"+
13374	u4878
57793	assertNotNull(commit);
46054	"Ê"
56205	args[])
54632	super(value,
12085	u11d4
29695	"\0\u256b\0\u25d2\0\u2639\0\u26a0\0\u2707\0\u276e\0\u27d5\0\u283c"+
31558	FieldCache.DEFAULT.getLongs(searcher.getIndexReader(),
6363	different
55962	reclaimable
23513	creation
31729	incoming
18180	docIdSetIterator).score(wrapCollector(collector),
23861	(newest
41300	getOutput(IntsRef
66633	SoreType.ASSUMPTION;
6489	e2.getMessage());
7186	closes
9664	ZZ_TRANS_PACKED_0
37528	closer
34864	DumbQueryWrapper(getSuperFieldQuery(f,t,quoted));
46737	"ï¼"
40721	FSTTester.InputOutput<IntsRef>(terms[idx],
20130	(fail)
35141	q.setBoost(1000);
39766	Integer.valueOf(i));
4086	NumericField("ascfield4",
45933	"Ê"
28528	binaryfldcompressed
55327	0xe000);
16484	testinvalidsnapshotinfos
474	closed
29700	"\1\2\1\17\3\2\1\20\1\21\1\2\1\22\1\2"+
35386	...Constants.java.
39304	getidf
53505	subSearcher(n);
21071	START_COUNT);
10946	"\31\230\1\347\12\230\175\0\1\346\15\230\1\u0344\14\230"+
67235	System.out.print(".");
26449	finalShift);
61770	u11ac
35488	popcount
65387	crash(final
49747	(t.next
60173	"\24\266\1\u0251\5\266\1\142\12\266\1\0\3\137\1\0"+
46505	,"(17)",
61310	ZZ_TRANS_PACKED_1
4441	NumericRangeQuery.newFloatRange("test13",
30031	u11b4
36845	tonode="
19674	close:
36255	nodes
50819	close;
19172	wikipedia
13288	u11b6
49650	jj_lastpos
66262	occur=BooleanClause.Occur.MUST_NOT;
35782	TestComplexExplanationsOfNonMatches
48874	tve.getPositions()
19091	"ãã");
10815	"\12\u020f\176\0\32\u020f\1\u0265\12\u020f\231\0\12\u02c7\176\0"+
17264	tisnoindex
2112	(++c))
23098	hits3.length);
16419	numSnapshots,
37882	Map<IdentityWeakReference,
46156	"Ê"
46734	"ï¼"
11499	"\1\u04fd\6\0\12\u04fd\1\u04fe\175\0\4\u04ff\2\0\1\u04ff"+
67231	(lockedID
26396	decode(CharBuffer
62718	System.out.println("docStarts["
1996	node,
55940	Purge
2027	node.
41347	iter=0;iter<2;iter++)
2033	node)
36983	node:
2099	node;
55304	offsets2[k].getStartOffset());
58769	len-1)
50117	close}
54531	ArrayUtil.parseInt("0.34".toCharArray());
11707	java.io.Reader
54063	StopFilter.makeStopSet(TEST_VERSION_CURRENT,
62690	sb.append(tokens[random.nextInt(tokens.length)]).append('
51047	accomplish
16126	1.7839992f,
52034	readerpool
19572	charSet
30505	alphabetic
16692	assertTrue("first
49574	getPrefixQuery(field,
46085	"Ê"
13135	uafa8
45266	"ï¼¯"
10000	"\1\70\2\0\1\71\3\0\1\53\2\0\1\54\3\0"+
12572	u488c
12734	uafb2
50270	real-time"
11824	zzMarkedPos-=
25790	inOrder
64189	Direct16
42635	"/Computers/Mac",
64675	iter=0;iter<iters;iter++)
22083	Revision
24509	testInternationalSort()
15378	mismatched
12171	u4896
46154	"Ê"
43423	max_bytes_per_int
55839	testupdatedocument
110	doFullMerge)
22760	NumericUtils.floatToSortableInt(f);
19236	Ï¾Ï¿ÏÏ?
23393	modifier.getNumBufferedDeleteTerms());
58959	unmapping",
34616	spans.start(),
26123	maxScoring
22774	lowerVal.doubleValue();
24688	StringBuilder(10);
28702	getenablepositionincrements
64692	actualTerm
34606	spans.start();
61054	"\12\u053f\1\u04bb\13\0\1\u033c\160\0\1\u03a1\4\u053f\2\0"+
21799	search.</p>
57182	10111111...111
19611	constraints
3700	i=0;i<bufferLength;i++)
63892	TestingCharTokenizerNormalize(Version
31432	alphabet[]
60768	"\1\u0459\13\232\1\352\12\232\175\0\1\351\32\232\1\352"+
15343	bufferedindexinput
32298	wont
63134	ArrayList<String>(savedTerms.subList(numSavedTerms-10,
2995	coming
37779	MatchAllDocsQuery(String
43875	$output_char;
46354	,"(7)",
45881	"á¹»"
37980	l<100000L;
48037	new,
50059	fe.dataOffset
35987	TestFilteredQuery
1531	totalIndexInterval
9219	BYTES_PER_DEL_QUERY;
21495	fail("Block
48768	positions[i]
45592	"á¹¨"
59642	"\1\347\2\0\1\350\42\0\1\174\1\65\6\0\1\174"+
1211	next
51357	commitInternal(commitUserData);
46158	"áµ¶"
6792	NumericRangeQuery<T
51017	message("forceMerge:
11044	"\1\u0169\2\0\2\u0214\4\0\1\u0214\217\0\1\u0272\175\0"+
37468	query.setSlop(1);
22694	upperVal.byteValue();
38825	9",
3676	<p>Removes
6168	flags
29191	positions[j]
46901	retroflex
43117	newq
27524	"\u005F\u0061\u0027",
42290	testData.length,
51788	merge.getException()
19557	(SUPPRESS_METHOD
8256	privilegedexceptionaction
28407	numIters
29373	((buffer[2+limit]&0xff)<<8)
16998	ignoringOffsets)
63457	0x875,
59423	"\153\0\1\32\5\0\1\32\2\0\3\32\7\0\1\32"+
17899	assertEquals("max,max,F,F",
29268	filenotfound
30476	ignoringOffsets,
64737	"aa4",
39422	1,tp.freq());
45588	"á¹¤"
34211	DEFAULT_TERM_INDEX_INTERVAL
18284	writer.addDocument(d4);
42297	testData.length;
40090	List<IndexCommit>
42103	numcomparators
7588	retval.append("\\n");
44152	"Ê"
22724	FieldCache.IntParser
22016	skipinterval
50745	getLogMergePolicy().setMergeFactor(mergeFactor);
60830	"\1\u0428\11\u02e2\1\u034e\12\u02e2\175\0\1\u034d\7\u02e2\1\u0428"+
25174	IndexSearcher(indexStore,
25446	flag;
25549	valIdToItems.getMap();
25705	flag.
28225	Collector[n];
63473	0x876,
10118	"\2\352\2\36\1\352\1\36\1\352\13\36\1\352\2\36"+
50884	16383
24481	"ZYXW");
1435	size
56401	0x80));
19126	emailanalyzer
42911	!=null)
26636	no_norms_text
52652	NoMergePolicy.class.getMethods())
44209	"Ê"
24211	"e"));
20511	versioned,
65192	idx=frontier.length;idx<next.length;idx++)
17008	map(String
46728	"ï¼"
8818	Statement
55699	numIter;
65857	validate=true;
60820	"\1\u02e1\160\0\1\u0349\4\u0482\2\0\1\u0482\15\0\1\u0482"+
58428	assertFalse(set.contains(TEST_STOP_WORDS[i]));
59278	"\1\60\4\0\1\74\14\0\1\62\4\0\1\75\2\0"+
40264	readershared
25444	flag)
45632	"á¹©"
17663	(like
25756	valmap
31859	lookup.length-1;
57032	<th>intersect_count</th>
41143	numIter)
66757	relevance.
9716	"\17\0\1\27\131\0\1\32\1\0\1\32\1\0\2\32"+
40904	assertEquals(pair.output,
25677	buf.append(getType()).append(":
43681	gregoriancalendar
25365	jdkSet.add("LuceneFox");
56219	(Modifier.isStatic(mods)
60399	"\1\u031d\27\266\1\u031e\1\266\1\142\12\266\1\0\3\137"+
26745	Searcher#explain(Query,
34133	ps.println("EXT:
41770	r[2].output.output1.longValue());
45677	"á¹¬"
16749	ReadOnlySegmentReader
59199	"\3\ue0a5\3\ue148\3\ue1eb\3\ue28e\3\ue331\3\ue3d4\3\ue477\3\ue51a"+
45626	"á¹£"
64517	rewrittenExclude
29667	"\1\57\12\40\13\62\4\55\1\50\6\55\12\122\17\55\1\47\3\53"+
32373	simplefslockfactory
39984	Optimize
38084	Double.longBitsToDouble(0x7ff0000000000001L),
40865	FST");
49081	getAutoGeneratePhraseQueries()
54514	assertEquals(Integer.MAX_VALUE,
20391	fieldName
64113	assertEquals(16385,
46725	"ï¼"
5055	9);
37189	noderefcount
41611	out.size()
36471	Builder.CompiledNode
8531	exhausted
17982	words.length;
45586	"á¹¢"
66677	isrunningnested
57468	Thread.sleep(1);
44489	"áº¿"
3113	(upto
26131	getcomparators
45636	"áº"
17098	container
27271	"\u0041\u0308\u0061\u0027",
25668	getMsg()
30035	u1350
33363	DeleteLastCommitPolicy())).close();
44463	"Ê"
45804	"á¹´"
43571	BitVectors.
67163	offsets.length
53696	assertPage(int
21428	isCSIndexInputOpen(two));
51918	midStartCommit
1166	trying
12168	u46ad
7398	docState;
31957	shift<=63)
31858	(key
45634	"áº"
64111	assertEquals(16383,
37471	more",
16177	"Subclasses
50749	getMergeFactor()
12012	uax29urlemailtokenizer
44593	"Ê"
30560	"\7\0\1\25\4\0\2\25\3\0\2\25\1\0\1\25"+
32827	doVectorOffsets;
53034	((b&0x1f)<<6)
22831	newstringrange
16400	OpenMode.CREATE,
50556	OpenMode.CREATE)
32418	testMmapIndex()
37072	acyclic
45645	"áº"
64112	assertEquals(16384,
41393	(args[idx].equals("-utf32"))
9127	docState,
23109	"other
44935	"Ê"
10434	"\1\263\1\136\12\264\1\u014f\3\136\1\0\2\136\1\137"+
45718	"áº"
15954	omittermfreqandpositions
64809	BytesRef.deepCopyOf(validTerms[loc]);
4025	istokencharmethod
41662	BytesRef("station"),
45117	"ï¼®"
56688	silly
9967	"\14\0\1\61\4\0\1\62\2\0\1\63\41\0\2\25"+
32484	writer2.commit();
53729	representation.
13291	u139f
25	work
46089	"áº"
11408	"\1\u0480\175\0\4\u04b8\2\0\1\u04b8\15\0\1\u04b8\6\0"+
44896	"Ê"
30591	"\1\56\5\0\1\57\3\0\1\155\11\0\1\46\2\0"+
46714	"ï¼"
33511	String[]{"kkk"},
18453	createnormalizedweight
6160	word
46779	"ï¼ "
396	testUndeleteAllAfterClose()
11518	"\175\0\1\346\26\230\1\u050a\3\230\1\347\12\230\175\0"+
44537	"áº"
36829	queue.get(queue.size()-1);
44646	"Ê"
61773	u1395
21120	contained
50927	updateDocuments(null,
67923	Math.min(minPosLength,
59265	"\1\0\21\32\1\0\1\32\2\0\3\32\1\0\1\32"+
6627	representations
42318	d.add(newField("f2",
38463	assertTrue(allFieldNames.contains("tvposition"));
44040	"áº"
36088	testbooleanshould
44849	"Ê"
67607	assertTrue(delDocs==sr2.deletedDocs);
48588	consumer.start(field);
46570	"ï¼"
67582	reader.ensureOpen();
3062	outer
37986	long",
18285	s.setSimilarity(sim);
48542	visitscorers
20330	in-order
15752	getDelCount()
44421	"ï¼¥"
32831	this.termsHashPerField
67294	SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));
56147	assertEquals("max,max,F,F,c",
22256	shrink(long[]
18679	à¦à¦à¦à¦¿à¦ªà¦¿à¦¡à¦¿à¦¯à¦¼à¦¾
2472	float
41368	"took
20094	incorporate
64136	bytearraydatainput
26472	inputbytenum
5881	super(valueCount,
63844	LowerCaseTokenizer
3953	non-Letter
38748	index2.termPositions();
38407	MockAnalyzer(random)).setOpenMode(
41730	minLongComparator,
16110	scores[idx++];
8763	TermQuery(new
33567	ll,5,7
49134	<code>AND_OPERATOR</code>
63526	OpenBitSetIterator(OpenBitSet
25249	{"*a*",
42692	RuntimeException(t);
58185	checkSnapshotted(id);
17158	cfsDir.openInput(IndexFileNames.segmentFileName(segment,
29775	"\1\62\2\0\1\63\41\0\1\25\2\26\2\0\2\64"+
31621	testcreatecfs
43445	TermQuery(t1),
19215	ÏµÏ»Ï¿Ï?ÏÏ
36084	assertscoreequals
9802	"\1\0\1\50\1\0\1\70\2\0\1\71\3\0\1\53"+
45915	"á¹¼"
18852	"moÍ¤chte",
20209	(clone
29442	SystemPropertiesRestoreRule
64269	(cached)
37067	Retry:
48732	bytes[pos++]
21835	result.add((Field)
6091	copy.termBuffer());
64363	gettermcountcutoff
58564	testIterator()
40701	ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);
18851	"moÍ¤chte".
50669	getLogMergePolicy().getMaxMergeDocs();
12569	u46a3
52010	setmaxfieldlength
58071	perDocTvf.reset();
54763	"permanent"
8570	addSinkTokenStream(final
67088	seekcountingdirectory
18131	ComplexExplanation();
60080	"\4\0\2\137\150\0\1\u0101\7\266\1\u01f0\22\266\1\142"+
26013	comparators.length
44566	,"fi",
56984	acronym_dep
53614	hq.insertWithOverflow(scoreDoc))
51033	(mergeExceptions.size()
35398	specialToken;
51798	segmentInfos.info(segmentInfos.size()-1)
31960	FieldCache.class.getName()+".NUMERIC_UTILS_LONG_PARSER";
54744	markedHeld
5538	floatToByte
60250	"\4\232\1\u0293\5\232\1\u0294\6\232\1\352\12\232\175\0"+
29577	"\2\133\2\0\12\134\1\0\1\132\20\0\1\133\1\132\1\0\6\132"+
3767	characters</a>.
56161	(csrq("content",
18521	Õ°Õ¡ÕµÕ¥ÖÕ¥Õ¶
52271	ti.freqPointer;
7549	serialVersionUID
30877	collationKey.length,
11250	"\1\u0169\2\0\2\u0214\4\0\1\u0214\217\0\1\u0339\175\0"+
32505	dir2.setPreventDoubleWrite(false);
61563	u88c7
31658	gettermfreqvector
25196	getIndexStore(String
19682	!postings[i].postings.next())
29934	"\2\54\4\0\1\25\5\0\1\25\3\0\1\54\4\0"+
36834	(br.length
40622	toIntsRef(strings2[idx],
10981	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\17\264"+
30724	"\1\0\1\11\32\1\15\0\1\1\1\0\1\1\10\0"+
65105	"compressible"
52806	receipt.
7669	JavaCC
31120	Ids,
12673	u88db
57443	testIndexing()
64000	"MUSICAL
48873	assertTrue("tve.getPositions()
44525	EPIGRAPHIC
21843	<code>Fieldable[]</code>
18405	fourth",
12272	u88e5
22769	newDoubleRange(String
27601	"\u0300\u0308\u0027",
19854	7.0
26531	allFieldNames.add(name);
65744	this.type.equals(o.type));
36328	Deref
40620	idx=0;idx<strings2.length;idx++)
7982	Enabling
16007	allThreads[i].failed)
66798	queryTerms)
62163	"a")));
29052	startDocID
20529	<code>ICUCollationKeyAnalyzer</code>
43631	spanfilter's
56126	testBooleanOrderUnAffected()
50662	maxMergeDocs)
6085	"hollo3");
9701	"\4\25\1\0\2\25\1\0\3\25\1\0\3\25\1\0"+
13074	u88d1
35483	wider
49683	{0x300,0x300,0x1c00,0x1c00,0x7da7f00,0x120000,0x40000,0x7da6000,0x4d22000,0x200000,0x200000,0x40000,0x60000000,0x8000000,0x60000000,0x40000,0x0,0x80000000,0x0,0x40000,0x200000,0x40000,0x7da2000,};
36719	getNodeAddress(follow.target);
22784	(FieldCache.DoubleParser)
60360	"\1\232\1\u02f7\30\232\1\352\12\232\175\0\1\351\24\232"+
17373	"a"))),
60489	"\1\352\11\232\1\u036f\175\0\1\351\23\232\1\u0370\6\232"+
51325	prepareCommit");
54412	Explanation[0]);
41678	frozen.node
45716	"á¹±"
64921	testTermVectors();
62991	ndif
51202	addIndexes(Directory...)");
33408	seek().
52057	includependingclose
52086	ndir
49052	FastCharStream(new
5802	SHIFTS[elementBits];
11890	fetch.
3219	given
1148	byte
57242	=(ones&v2)|(u2&v3);
43676	GregorianCalendar();
30521	"\0\u09a8\0\u0a0f\0\u0a76\0\u0add\0\316\0\u0135\0\u019c\0\u0203"+
59300	"\45\137\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
58395	"with"
2928	queryparser
28294	scoreAll(2,
20792	subtract(T
62824	ClassicTokenizer}
4399	Sort(new
42778	CharSequence}
9534	"\0\uf669\0\uf70c\0\uf7af\0\uf852\0\uf8f5\0\uf998\0\ufa3b\0\ufade"+
56680	1.0:0.0))*1000);
38323	neededbounds
33707	testpartialmerge
54185	checkindex
6344	(fields.length
66360	numPostings="
59594	"\1\25\1\141\1\355\1\36\3\355\1\365\14\355\2\36"+
55943	(Iterator<Thread>
50638	(this.mergeScheduler
28430	c.copyChars(new
46568	"â¯"
20710	setData(byte[]
14582	zz_initial
28293	scoreAll(1,
44136	,"au",
9996	"\1\137\3\136\3\0\1\136\4\0\2\136\2\0\1\67"+
30029	u10e6
42774	again.</li>
24184	122);
3753	#normalize(int)}
15370	lazy_field_text
65013	compacted
51957	payloadProcessorProvider
40124	userData
52196	dropsegment
18683	"à¦ªà¦°à¦¿à¦à¦¾à¦²à¦¨à¦¾",
56216	checkOverrideMethods(Class<?>
30785	<code>0</code>
20136	condition(s)
34695	incrementTokenClassic()
66760	overhead.
42577	tokenizing
27914	"\u0031\u003A\u0308\u0300",
61174	"\175\0\1\351\32\232\1\352\7\232\1\u05ae\2\232\175\0"+
5155	79:
45624	"á¹¡"
39834	buffer.append(')');
2818	usual):
62879	too-long
11002	"\5\264\1\0\3\136\1\0\2\136\1\137\3\136\3\0"+
5085	79)
34457	<code>maxThreadStates</code>
784	reset()
64196	i=0;i<pad;i++)
32852	perThread.doc.perDocTvf.length();
10484	"\1\u0193\15\0\1\u0193\6\0\12\u0193\1\u015c\175\0\4\u0194"+
64330	for(Term
56903	"\1\3\4\0\1\3\1\4\1\0\1\14\1\0\1\11"+
22709	FieldCacheRangeFilter<Short>(field,
45498	"Ê"
27222	"\u0041\u0308\u0001",
45875	"á¹µ"
49978	<li>long
42176	testFlagsAttribute()
31399	2.0);
18291	dq.add(tq("id",
12570	u4746
34886	prevendoffset
27510	"\u005F\u005F",
484	request
5082	78)
32103	allocator.recycleByteBlocks(buffers,
22629	preferable
45590	"á¹¦"
22288	Arrays.equals
44964	"Äº"
67658	readerthread
1532	termEnum.indexInterval
45500	"Ê"
53650	multisearchercallablenosort
31124	#advance(int)}
38896	assertNull(threads[i].failed);
13372	u4732
63856	testMaxWordLength()
44678	"Ê®"
29833	"\1\0\3\25\1\0\1\26\1\0\2\25\4\0\3\25"+
36878	pop");
6905	.append("
29205	CloneNotSupportedException
66160	while(docCount
41527	allIDsList.add(idString);
41325	1000.0),
5259	int[76];
41918	beforenext
39641	273,
38143	expectedBounds,
51653	(info.docCount
6751	building
12971	u473c
25918	gives
66003	t:one^10.0",
18776	"Î®",
41951	nextresult
45618	"Ê"
45710	"á¹«"
20863	(analyzer
9608	"\2\u6e13\2\u6eb6\2\u6f59\2\u6ffc\2\u709f\2\u7142\2\u71e5\2\u7288"+
68061	numiterations
7631	Encountered:
62878	typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);
59223	"\1\0\3\25\1\0\2\25\1\0\3\25\1\0\7\25"+
66514	String(tokenText,
22339	a[i].compareTo(a[j]);
12169	u4750
4590	assertEquals(OpenMode.CREATE_OR_APPEND,
15122	doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);
40528	beginning.
44847	"Ê"
67711	newCharBuffer
62555	coordinator.nrMatchers;
42943	<b>Expert:</b>
63855	{builder.toString().toLowerCase()});
52911	UnicodeUtil()
26515	assertTrue(deleteReader
23170	ftl.add("contents");
2597	checks
66102	c]",
63386	0x841,
57122	((bits[i]>>>bit)
17161	proxStream
30542	"\3\25\5\0\1\25\1\0\1\25\1\0\1\25\4\0"+
33417	CRC32();
47768	fourteen
37846	isletter
5985	elements
17367	numDelDocs
26535	(fieldInfo.storeTermVector)
58445	"correct"
847	contents
59954	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\15\266"+
51025	MergePolicy.OneMerge
45075	"á¹"
46778	,"?!",
59340	"\2\0\1\76\41\0\1\25\2\26\2\0\2\77\1\100"+
66117	AnalyzerReturningNull()
36653	//arc.flags
63387	0x842,
4869	cloneable
33309	files=");
6437	Java6:
45144	"áµ°"
21357	check,
8967	shared)
16585	element)
38812	testFieldCacheReuseAfterReopen()
41637	check.
40724	shared,
10884	"\1\376\25\264\1\u030a\4\264\1\141\12\264\1\0\3\136"+
42894	shared.
28663	stpf.getAttribute(TypeAttribute.class);
37576	query.setSlop(0);
16588	element;
38426	Field("unindexed","test1",
36624	readFirstTargetArc(Arc<T>
31665	text_compressed_length
15690	check:
1682	testseekenum
7048	element.
40631	ArrayList<FSTTester.InputOutput<Object>>(terms2.length);
16532	element,
15765	getDocStoreSegment()
94	org.apache.lucene.store.MockDirectoryWrapper;
45046	"á¹"
25687	InsanityType#EXPECTED
34797	qp.parse("\"the
3675	EOS.
57208	getAndSet(long
11107	"\11\264\1\u0151\20\264\1\141\12\264\1\0\3\136\1\0"+
5414	jjstopatpos
15796	output.writeStringStringMap(diagnostics);
15554	src.hasSingleNormFile;
56392	while(offset
7778	f.stringValue();
61241	"\6\232\1\u016f\23\232\1\352\12\232\175\0\1\u0101\1\u05ef"+
18277	writer.addDocument(d3);
922	analyzer).setMergePolicy(newLogMergePolicy()));
32694	charArrayDump(encoded2,
60270	"\1\u0101\1\u02af\31\266\1\142\12\266\1\0\3\137\1\0"+
42124	other.offset;
51147	"deleteAll");
27326	"\u003A\u0031\u002C",
17914	pad(signedIndexDir.minR);
30300	prepareCommit(null);
17994	termrangefilter
29304	storingoffsets
42153	other.offset,
49995	FORMAT_NO_SEGMENT_PREFIX
55997	CharSequence,
27976	"\u0031\u0027\u0308\u0031"
2965	modified
4811	modifier
67856	TestGraphTokenizers
67156	entry.setFrequency(entry.getFrequency()
630	failure
58755	"ab\ufffd\ud917\udc17\ufffdcd",
65921	mfqp.parse("one");
40179	smi;
51669	Constants.OS_NAME);
18655	"ÜÜÜ©Ü",
42412	sb.append("t");
27956	"\u0031\u0027\u0308\u0030"
61438	"\1\u0487\3\u02e2\175\0\1\u034d\12\u02e2\1\u0439\17\u02e2\1\u034e"+
14939	longcomparator
48124	subspans
57887	otherBuffer
50418	commit(SegmentInfos
5709	Marks
7674	serializable
50783	on-disk
63389	0x843,
23615	testFlushPushedDeletesByCount()
5358	input_stream.GetImage();
43834	strict;
37538	(PhraseQuery)qp.parse("\"this
66767	setSort(field);
38689	fieldID=0;fieldID<numFields;fieldID++)
2196	changing
57475	setnodeleteopenfile
55377	Field.Index.NOT_ANALYZED_NO_NORMS,
54471	normswriterperfield
30675	"\1\25\3\0\1\54\4\0\1\54\2\25\2\54\10\0"+
66866	maxCeiling);
51990	(skipWait)
26315	7L)
28463	testcopy
384	addDocumentWithFields(writer);
12086	u1277
29567	"\1\133\1\132\7\133\2\0\2\133\2\0\3\133\1\132\10\0\1\133"+
32407	sb.append(alphabet.substring(c,
899	flush");
64712	"aa1",
26672	releases.
60023	"\1\266\1\u01b7\1\u01b8\2\266\1\u01b9\1\u01ba\1\u01bb\1\266"+
37021	absPtr
61771	u124f
39548	utf16Result1.length;
4794	writer.setRAMBufferSizeMB(1.5);
42643	"noPayloadField";
12888	u1263
44681	"Ê¯"
66564	postingscompacted
62828	IDEOGRAPHIC
5764	FAC_BITPOS
5170	jjAddStates(16,
34094	ArrayList<OpenBitSet>(rpp.length);
49493	jj_consume_token(MINUS);
22821	1721088258
2120	oldTable
20248	other.getMinimumNumberShouldMatch()
37098	System.arraycopy(fst.bytes,
35664	(lower>>>8)
59654	"\1\140\3\137\2\0\1\174\1\137\4\0\2\137\2\0"+
12969	u45f6
36937	downTo=q.size()-1;downTo>=0;downTo--)
1757	NumericFields
43825	assertTermEquals("y",
49304	df.setLenient(true);
67193	TermVectorEntrySet.
22432	mergesorts
36693	seekToNextNode(in);
13370	u45ec
1311	d.close();
6512	NumericField}
12487	u126d
21751	opendeletedfiles
23679	doafterflush
6468	e1.printStackTrace(pw);
5176	jjAddStates(19,
26592	(!reader.hasNorms(f.name()))
25077	testEquals()
30033	u1282
32693	charArrayDump(encoded1,
56780	creates.
41946	storeord
51888	type-safe-enum-pattern
3519	totalNumDocs()
12024	branch_3x
39206	fieldExpl
55489	testMixedTermVectorSettingsSameField()
52932	HALF_SHIFT)
25300	reflexive
38203	Long.MIN_VALUE+0x10L,
46955	barred
4657	enable
41897	verifypruned
3045	EMPTY_INT_ARRAY
30032	u121b
15224	8),
49969	gettoken
47896	explain()
35236	this.curProxPointer
45679	"á¹®"
17564	docSingle.get("f3"));
35794	IndexWriter(rd1,
62256	"male"),
56920	"\1\30\1\31\1\0\1\52\1\0\1\11\2\52\1\0"+
50082	compoundfilewriter
42597	SpanQueryFilter
46388	"â¾"
35823	IndexWriter(rd2,
38162	max<=upper);
55774	0.5f;
35724	0xF0000000)
24657	"IDHFGJABEC"
40832	_outputs.get(twoLongs.first));
1444	testsegmentschecksumerror
45746	"áµº"
45073	"á¹"
5117	8);
9487	"\0\u0f48\0\u0feb\0\u108e\0\u1131\0\u11d4\0\u1277\0\u131a\0\u13bd"+
41108	outputs.outputToString(ent.getValue().finalOutput));
20334	testCachedArraysAllocation()
67055	content;
62209	while(scorer.nextDoc()
55406	samefieldorder
49060	StringReader(query)));
42319	d.add(newField("f3",
51053	forceMergeDeletes(boolean
43634	mergedeletes
1570	index.getTerm(i);
1789	IndexFileNames.FIELDS_EXTENSION));
35718	y<<=16;
36169	VERSION_PACKED
43069	refernce
13289	u1259
8694	addthread
34926	0.5f,
32348	specificLockName)
59601	"\1\371\3\355\1\36\1\355\1\36\3\355\1\142\12\143"+
49094	0.5f.
45044	"á¹"
33082	assertEquals("TypeAttribute
35147	pt("xx",
30278	skipoffset
19795	testRankShort
23421	testDeleteAllNRT()
21979	state.segmentName;
25289	doc="+docs[i]+"
28613	getLine()
35942	content)
38366	assertintrangesplit
35946	content,
20953	content.
21890	random-access
42706	org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute;
1363	content1
1369	content2
1370	content3
1371	content4
1372	content5
65416	testcrashafterclose
1366	content6
48650	maxfieldlength
1373	content7
67899	sb.append(buffer,
64315	ConstantFilterRewrite:
36164	BYTE2
140	(int
64231	explained
43082	oldreference
48838	testPositionReader()
14792	BYTE:
67312	MultiReader(IndexReader.open(dir1,
28444	subsequence,
48466	maxtokencount
45714	"á¹¯"
18423	tq(String
2886	slow
40081	(ioe
46785	,"\\",
67157	frequency);
37419	assertTrue(freq.length
38617	IndexReader.getCurrentVersion(dir),
33657	assertEquals(segCount,
31969	<code>reader.maxDoc()</code>,
48245	subSpans[i]))
41641	ArrayList<String>
40768	fst.outputs.getNoOutput();
67158	existingOffsets
59434	"\2\0\1\25\2\0\4\25\1\0\1\34\1\25\1\0"+
38616	IndexReader.getCurrentVersion(dir);
34957	(ir,
33616	test1to1
59070	collectterms
10650	"\2\u01d1\2\u0218\1\u01d1\1\u0218\1\u01d1\1\u014f\1\136\1\151"+
33618	test1to3
33617	test1to2
26973	(MidNumLet)
8077	Java's
48100	FileNotFoundException.
64821	assertEquals(targetTerm,
10865	"\7\230\1\u02fa\2\230\175\0\1\346\1\u02fb\31\230\1\347"+
58775	getInt(Random
26569	Term(DocHelper.NO_NORMS_KEY,
58193	SnapshotDeletionPolicy#release(String)
48352	scorerDocQueue;
55194	termEnum1.term();
27338	"\u002C\u3031",
40592	ir.grow(br.length);
22877	spans.getPayload();
67087	seekscounter
51897	UNLIMITED
16603	heap[1]))
22595	getfirst
16093	timedthread
16923	testclonereadonlytowriteable
47972	60;
17527	testIsCurrent()
41383	noArcArrays
32110	DocumentsWriter.BYTE_BLOCK_SIZE-size)
11070	"\1\347\12\230\175\0\1\346\25\230\1\u03b1\4\230\1\347"+
22334	pivot;
29654	"\1\113\1\71\1\2\3\124\2\35\1\124\1\35\2\124\1\14\21\124"+
51171	(correctly)
15182	finish;
11480	"\32\264\1\141\2\264\1\u010a\7\264\1\0\3\136\1\0"+
36264	this.inputType
39268	termArraysHashCode()
22749	newFloatRange(String
58186	(SNAPSHOTS_ID.equals(id))
56335	pivot,
48345	scorerDocQueue.
53303	(inc
30533	"\0\u2ca9\0\u2d10\0\u2d77\0\u2dde";
42062	MultiComparatorsFieldValueHitQueue<T
7661	TokenMgrError(String
11202	"\1\136\4\0\2\136\150\0\1\376\1\u0419\31\264\1\141"+
34669	spanscorer
22257	RamUsageEstimator.NUM_BYTES_LONG);
52969	SURROGATE_OFFSET;
49096	fuzzyMinSim)
38955	testgetindexcommit
30237	while(term.compareTo(enumerator.term())
17607	testdocument
34409	comfortably
1469	org.apache.lucene.store.LockObtainFailedException;
18690	"à¦à¦à¦à¦¿à¦ªà¦¿à¦¡à¦¿à¦¯à¦¼à¦¾à¦°",
294	would
38583	testOpenEmptyDirectory()
14659	STRING_VAL
45109	"á¹"
28236	multicollector
7004	Long.MIN_VALUE)
23909	#record}
56690	pass="
43247	tdocs.freq());
24285	Long.MIN_VALUE,
25941	Implements
51567	(merge.estimatedMergeBytes/1024./1024.)
42825	setStartOffset(int
56832	"\1\3\4\0\1\11\1\7\1\4\1\11\12\2\6\0\1\6\32\12"+
38871	closeCount
53049	0x10FFFF
42808	termBufferLength,
10486	"\4\u0196\2\0\1\u0196\15\0\1\u0196\6\0\12\u0196\1\u0197"+
29293	materializevector
53503	searchables[i].close();
20974	termlength
27395	"\u0027\u0308\u005F",
60471	"\12\u0359\1\u02ef\13\0\1\u0126\160\0\1\u0168\4\u0359\2\0"+
13371	u468f
67558	123);
54459	keywordAttr.setKeyword(true);
22742	Long.MIN_VALUE;
2576	computenorm
1331	(IllegalArgumentException
26673	removed/absorbed
45630	"á¹§"
48031	FileNotFoundException}
30919	doSearch(int
22542	interfaces.getFirst().get();
12970	u4699
26748	Searcher#search(Query,Filter,int,Sort)}
20057	BooleanClause[]
43800	assertTermEquals("AE",
63560	arr[i];
44862	"Ä¶"
4570	Does
42187	att2.getFlags());
62794	(TopFieldDocs)
54406	getSummary()
21952	toCopy
49093	fuzzyMinSim;
53376	file.seek(position);
66419	text[pos];
44890	"Ä·"
17655	BooleanQuery#getMaxClauseCount()}.
6796	DataType
37842	Character#isLetter(int)}.*/
2372	hits.score(i));
57596	pagedbytesdataoutput
6015	t.toString());
4652	getters.contains(m.getName()));
43287	Map<String,FieldSelectorResult>
6244	q.setBoost(boost.floatValue());
46409	"â¿"
60125	"\1\u021b\3\0\2\u0219\150\0\1\u021c\32\u021d\1\u021c\12\u021d"+
42435	fieldToData
17818	getmaxsize
38506	tdocs);
25253	"*g?",
5816	rBits
1236	4th
59347	"\14\0\1\62\4\0\1\112\2\0\1\113\21\0\1\114"+
54927	elapsed,
48733	bytearraydataoutput
24947	tracer2
56994	"open"
43185	docVal(int
60188	"\150\0\1\u0101\24\266\1\u025c\5\266\1\142\12\266\1\0"+
21966	copybuf
16084	runTest(directory);
65990	f:two",
54804	!obtained;
45107	"á¹"
33103	type",
39948	subReaders[i].undeleteAll();
27012	"\u0001\u0061\u0027\u2060",
28954	parser.getClass().hashCode();
32996	termvectorspostingsarray
67604	rs2[0];
31779	System.out.println("ERROR:
45462	"Ä¸"
42123	otherUpto
23879	lastRecordTimeSec
27113	"\n\u0308\u0031\u003A",
46592	"â"
9165	Pushed
67784	CharTermAttributeImpl)
30218	enumerator)
16333	fieldcachetermsfilter
43228	Term("junk",
68036	right.incrementToken());
57554	enumerator,
11925	Pushes
39292	termArray2)))
66418	text[pos])
48189	(subSpans[0].doc()
46560	"â"
7764	IndexReader.open(directory,
22679	fcsi.order[doc]
56755	testKeepLastNDeletionPolicyWithReader()
14953	B"~N+1
50158	ThreadInterruptedException}
3732	org.apache.lucene.util.AttributeSource;
52455	64:
5755	64;
67127	CachingTokenFilter(stream);
4580	warm(IndexReader
42829	type()
59712	"\1\u0107\14\266\1\142\12\266\1\0\3\137\1\0\2\137"+
38194	64,
52778	expectedscores
54397	isMatch()
4999	64)
41443	BytesRef("foobaz")));
31259	shouldSize
32058	shift_start_int
57290	63;
11300	"\1\u037f\175\0\4\u0465\2\0\1\u0465\15\0\1\u0465\6\0"+
31836	upgradeindexmergepolicy
36682	readFirstArc
26384	Produce
23751	nanoTime
9529	"\0\udcf1\0\udd94\0\ude37\0\udeda\0\udf7d\0\ue020\0\ue0c3\0\ue166"+
24951	testcustomfieldparsersort
5554	63)
16688	r1.close();
57280	while(++i
10029	"\4\0\2\65\11\0\1\25\11\0\2\25\2\65\4\0"+
38880	testOOBDocID()
56742	.setMaxBufferedDocs(10);
56017	append(StringBuilder
67543	w.addDocument(createDocument(i,
44353	"Ê£"
48814	tokens.length)
54489	maxOverlap);
14933	stringcomparator
8225	(isClone
45148	"á¹"
12167	u460a
18139	Explanation(getBoost(),
18370	false,false);
33975	Done
63410	0x861,
14694	type);
50857	docWriter.getNumDocs();
66562	streamcount
25399	lucenefox
52384	perdirpayloadprocessor
52629	testNoMergePolicy()
62630	(C:production
41772	r[2].output.output2.longValue());
42656	Field(MULTI_FIELD,
19946	Map<E,
22869	payloadToMatch)
28500	stringFldStoredTest
67686	OutputStreamDataOutput
21873	human
5086	65)
55643	IndexWriter(mainDir,
58014	PerDoc[ArrayUtil.oversize(allocCount,
7737	dataset
24315	"adcb"
4533	jact
28006	"\u0031\u002C\u0308\u005F",
39725	sis.info(i),
21374	testReadAfterClose()
46590	"â"
33159	AttributeSource(src1);
22863	payloadToMatch;
3116	Compute
51546	readerPool.clear(merge.segments);
45228	"á¹"
63007	STAR
9599	"\2\u403b\2\u40de\2\u4181\2\u4224\2\u42c7\2\u436a\2\u440d\2\u44b0"+
9867	"\2\25\5\0\3\25\1\0\1\25\5\0\1\25\2\26"+
8970	RAMFile
6013	Token(6,
9683	"\1\0\2\25\10\0\2\25\2\0\2\25\5\0\3\25"+
35577	(pop(twos)<<1)
26322	Where
6706	465</code>,
66294	perThread.charPool;
7456	4};
67579	((ParallelReader)
23535	ids.add(id);
30931	tdc.topDocs(0,
24257	"IAGCE");
7971	Class.forName("sun.misc.Cleaner");
30803	reader.read(charBuffer,
63394	0x851,
54381	default_max_token_length
45323	"á¹"
57237	instructions...
31102	mkdirs
17220	removeCoreClosedListener(CoreClosedListener
58599	acase_sensitive
8269	windows
34091	ppTermsBitSets(PhrasePositions[]
12568	u4600
36591	//System.out.println("readLast");
56939	"\1\56\2\0\1\62\4\0\2\24\1\0\1\61\1\0"+
28820	floor
10464	"\3\0\1\136\4\0\2\136\2\0\1\173\1\0\1\50"+
63395	0x852,
22832	assumed
5122	0xff)
45325	"á¹"
31773	("-delete-prior-commits".equals(arg))
18089	this.similarity
58322	0xff,
1812	assumes
4432	NumericRangeQuery.newIntRange("test8",
35660	0xff;
37467	testSlop1()
55094	indexSerial(Random
10451	"\1\25\1\140\3\36\1\u0188\26\36\1\141\12\142\1\65"+
66375	charPool.buffers[textStart2
66374	charPool.buffers[textStart1
15484	older
34733	multi)").toString());
63397	0x853,
64060	is.readVInt();
37292	StopFilter(boolean
45230	"á¹"
58335	0xfe)
33633	testrandommaps
17209	listeners:
27286	"\u003A\u0001",
51668	diagnostics.put("os",
46203	"â"
16221	#reqB
32501	non-ramdir
60697	"\1\u0428\1\u02e2\3\u0428\1\u0430\14\u0428\2\u02e2\2\u0428\2\u02e2"+
49403	16^2...
57879	ByteBuffer.wrap(newBuffer);
57760	reader.getSequentialSubReaders().length
20398	lazyfieldstoload
15420	Information
17198	(ref.decrementAndGet()
18621	"Story",
8053	//System.out.println("Requested
63401	0x854,
22328	comp.compare(a[i],
15790	output.writeInt(normGen.length);
1277	random.nextInt(limit);
40418	respect
18271	writer.addDocument(d2);
38180	neededBounds.next().longValue(),
4094	doc.add(field2);
22060	DocIdSet()
17067	terms.add(term);
10931	"\4\u0338\2\0\1\u0338\15\0\1\u0338\6\0\12\u0338\1\u0339"+
45232	"á¹"
64713	"aa2",
46564	"â"
62237	testbooleanquery
31053	merge(SegmentInfo
58707	.setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));
45402	"á¹"
20996	(0==i%10)
67089	seekscountingstream
19923	testrankfloat
23327	.setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(
23739	window.
45740	"Ê¨"
26603	result.getTerms();
53278	getSingleton(boolean
26209	maxvalue
28139	width
66009	(b:two^5.0
19561	constraints)
10766	"\1\u028f\7\230\1\347\2\230\1\u0290\7\230\175\0\1\346"+
45327	"á¹"
58874	256;
41305	verifyByOutput)
52393	verifypayloadexists
43183	bottomVal
59309	"\2\0\1\53\3\0\1\54\2\0\1\55\3\0\1\56"+
64287	bytefieldsource
60083	"\1\u01f2\4\266\1\u01f3\5\266\1\u01f4\6\266\1\142\12\266"+
5635	3GHz,
24810	density
51671	Constants.OS_ARCH);
38046	-2000,
41698	FST<Long>(in,
35458	0x33333333)
24605	tdc.topDocs();
56691	pass);
24732	(m1.get(key),
15049	org.apache.lucene.index.FieldInfo.IndexOptions;
36417	255:
55877	testforcemergedeletes
3841	255;
57549	estSize)
8565	Adds
37203	maxbytesperarc
59592	"\1\25\1\141\4\36\2\355\2\36\1\355\1\36\1\355"+
56293	in-place,
66362	in-place.
8395	255)
53126	TRAIL_SURROGATE_MASK_));
51557	close(false)
2908	needed
43332	flow.
45430	"á¹"
63863	254;
19870	HashMap<FieldScoreQuery.Type,Object>
6738	<li>Steps
36551	in-place;
41210	termsEnum.ord();
35024	(target
27997	"\u0031\u002C\u002C",
52959	6)));
24413	FieldComparator<Integer>
23065	searchers2[1]
4651	defaults",
3225	cacheScores
9538	"\1\u0a26\1\u0ac9\1\u0b6c\1\u0c0f\1\u0cb2\1\u0d55\1\u0df8\1\u0e9b"+
26267	7),
6638	center
32334	HashMap<String,Lock>());
17976	TestSort.testInternationalSort()
67377	assertTrue(reader3
67366	assertTrue(reader2
27992	"\u0031\u002C\u0308\u3031",
20207	query.getBoost());
16707	assertTrue(reader1
6917	(o==this)
67347	assertTrue(reader0
29799	"\3\0\1\25\4\0\3\25\4\0\1\25\1\0\1\25"+
64411	Compress
10581	"\1\u01db\1\u0197\13\0\1\u0122\161\0\4\u01dc\2\0\1\u01dc"+
45150	"á¹"
59354	"\2\25\5\0\1\25\2\0\1\25\2\0\1\25\4\0"+
33649	j=0;j<numDocs;j++)
54241	numEntries++;
30985	LinkedList<File>
55034	mergeFactor=random.nextInt(3)+2;
35319	analyzer");
9354	"\1\133\1\0\10\133\22\0\2\133\15\0\60\142\1\143\2\142\7\143"+
38340	randomlong
20670	fileextensions
3562	SetOnce<IndexWriter>();
23064	searchers2[0]
47890	<P>ValueSource
30030	u114d
35146	testPT5()
6231	clauses
38124	Float.intBitsToFloat(0x7fffffff),
3624	record
45111	"á¹"
1321	7);
25405	trees
4051	org.apache.lucene.util.StringHelper;
29651	"\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120"+
18490	TokenStreamComponents(tokenizer);
10339	"\12\264\1\u014f\3\136\1\0\2\136\1\137\1\u013f\1\u0140"+
23740	budget
59195	"\3\ucc45\3\ucce8\3\ucd8b\3\uce2e\3\uced1\3\ucf74\3\ud017\3\ud0ba"+
27814	"\u0061\u0027\u2060\u0030",
59346	"\3\0\1\73\7\0\1\57\2\0\1\60\4\0\1\111"+
6714	value.</p>
12967	u44b0
23832	clause.
40165	term.compareTo(top.term)
31076	si1.dir.deleteFile(fileToDelete);
60337	"\1\u0219\4\0\2\u0219\150\0\1\u02e6\54\0\1\u0275\165\0"+
25786	clause,
20054	clause)
48836	testTerms.length);
52976	0xEF);
50591	bufferedDeletesStream);
10439	"\2\0\1\201\41\0\1\25\1\65\7\0\1\65\2\0"+
52661	NoMergePolicy.class);
45154	"á¹"
32438	rmDir(File
24345	v2[j]
38544	doc.getFieldables("bin1");
49359	clause:
15588	SegmentInfos.FORMAT_HAS_VECTORS)
12165	u44c4
16119	(idx
9223	termsIterable()
52606	clause2
25235	"a?",
58884	termAtt.resizeBuffer(1+buffer.length);
24952	assertmatch
45152	"á¹"
12566	u44ba
10518	"\175\0\1\346\32\230\1\u01aa\12\230\175\0\1\346\22\230"+
42460	p.setData(data,
7046	term.text().compareTo(currentUpperBound)
34219	DEFAULT_MAX_BUFFERED_DELETE_TERMS
58878	DEFAULT_BUFFER_SIZE);
24807	matchValues
16168	(ie:
37733	query.toString(PRIORITY_FIELD));
55658	assertTrue(addDirThreads.failures.size()
12886	u111d
39222	reader.norms(field);
12084	u1131
45226	"á¹"
45753	"Ê¦"
6428	java.io.Closeable;
46227	"â"
48708	"1.2.3.0")
1206	(ie,
9007	finish.
13368	u44a6
35722	24];
46250	"â"
65255	(n.numArcs
28442	c.charAt(3);
60758	"\20\232\1\352\12\232\175\0\1\351\11\232\1\u0452\20\232"+
40675	NoOutputs
45113	"á¹"
44731	"Ä°"
55125	printDocs(r1);
12485	u1127
49233	treat
38147	bits=useBitSet
18943	testOffsets()
9018	term.compareTo(lastTerm)
3198	Creates
10396	"\1\230\1\u016a\13\230\1\u016a\2\230\1\u016a\1\347\12\230"+
18253	Field.Index.NOT_ANALYZED));//
65922	assertEquals("b:one
45033	"Ê«"
13287	u1113
20063	Iterable}
7813	u1111
6373	slop
62978	dir.openInput(src);
7169	minprefixcoded
24968	slot
45321	"á¹"
22650	FieldCache.DEFAULT.getStringIndex(reader,
43301	NO_LOAD
23725	searchers:
23737	searchers;
20506	CollationKeys
18528	Õ°Õ¡Õ´Õ¡ÖÕµÕ¡
286	searchers.
67313	MultiReader(IndexReader.open(dir3,
23063	searchers2
46273	"â"
23091	searchers3
14709	inferred
31149	exhaust,
32838	start(Fieldable[]
22994	searchers)
5120	(hiByte
23723	searchers,
29832	"\10\0\1\26\1\0\2\25\1\0\1\26\10\0\1\25"+
50191	#setMaxBufferedDeleteTerms(int)}.
58218	defaults)!
18298	s.createNormalizedWeight(dq);
67379	reader3.getSequentialSubReaders();
61769	u1109
58903	DOCS_AND_FREQS_AND_POSITIONS
45917	"á¹¾"
6737	below).
36740	BIT_LAST_ARC))
36469	arcIdx=0;arcIdx<nodeIn.numArcs;arcIdx++)
41978	plastic
59130	"\2\u81d0\2\u8273\2\u8316\2\u83b9\2\u845c\2\u84ff\2\u85a2\2\u8645"+
44133	,"ao",
22102	Character.MIN_RADIX
62974	(i2.hasNext())
31291	oldNames)
41966	allterms3
46343	U+2786:
7627	errorColumn,
64938	result");
32350	lockAttempts;
43601	deletesMode)
43051	doTryRefresh
31600	IndexWriter(ramDir,
3740	<p>
63837	testReadSupplementaryChars()
37352	Utility
46320	U+2785:
67729	termLength)
28723	"/Computers/Windows"));
67752	termLength,
68078	>32
17208	ReaderFinished
65988	touched:
3485	paused)
60520	"\4\0\2\137\150\0\1\u0101\1\266\1\u0107\30\266\1\142"+
63832	arrindex
4433	true)
25750	checksubreaders
43026	acquire()
3008	true,
11696	"\11\1\3\0\2\1\1\0\4\1\2\0\4\1\1\0"+
39065	}catch
10448	"\1\352\24\36\1\141\12\142\1\65\1\136\1\143\1\136"+
24748	AIOOBE
21343	".big7",
57356	ensureCapacityWords(int
3437	paused;
4062	startOffset
20048	BooleanClause.Occur
46297	U+2784:
67424	SegmentReader.getOnlySegmentReader(reader1);
57317	Arrays.fill(bits,newLen,this.wlen,0);
23867	ArrayList
43972	U+1EA8:
42468	numThreads;
27020	"\u0001\u0308\u0031\u003A",
31452	newFSDirectory(outputDir);
48083	dir.copy(to,
40961	assertNotNull("got
22621	#newStringRange}
66955	outputs1.outputToString(output.output1)
42721	"eos".
38014	String[vals.length];
46274	U+2783:
27358	"\u002C\u0061\u003A",
677	true;
33004	textstarts
62909	"_2.cfs");
21649	true.
39907	isCurrent();
444	lucenetestcase
44052	U+1EA9:
39619	other.close();
30886	MyTopsDocCollector(int
40996	(!termsMap.containsKey(term)
18038	testsort
6234	super.getFieldQuery(fields[i],
24818	reader.maxDoc();
59322	"\12\143\1\66\1\137\1\144\1\137\1\0\1\137\1\145"+
15102	assertTrue("field
43970	U+1EA6:
18495	URLFilter(TokenStream
7234	priority
9814	"\1\25\1\135\32\155\1\136\12\156\1\0\1\136\1\157"+
23903	tracker.recordTimeSec;
48958	BNF,
16236	""+terms[i];
46251	U+2782:
26775	buffer.append(end);
49954	x1c00
60943	"\1\u04d9\15\0\1\u04d9\6\0\12\u04d9\175\0\1\u0168\4\u04da"+
19044	"Corpusivity",
42595	document.add(newField("field",
44050	U+1EA7:
58074	reset();
21896	#readChars(char[],
35112	remaininbuffer
22494	true}
3268	SegStart(lastReader,
48049	reasons.
63220	RAMFile()
46228	U+2781:
18654	"Ü",
10142	"\1\352\2\36\2\352\1\141\12\142\1\65\1\136\1\143"+
53085	Unmatched
24421	copy(int
11243	"\1\u02cf\161\0\4\u0439\2\0\1\u0439\15\0\1\u0439\6\0"+
41987	sortedallidslist
20226	buffer.append("(");
53249	.first
4675	IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS);
26576	testNorms()
43968	U+1EA4:
66881	Pair<A,B>
37642	sub-phrase
64511	include.rewrite(reader);
60160	"\1\u023d\1\u023e\1\232\1\u023f\1\u0240\1\352\1\u0241\2\232"+
46204	U+2780:
22767	FieldCache#getDoubles(IndexReader,String)}.
7642	"\"");
57144	fastSet(long
15175	SetBasedFieldSelector(Collections.
54693	lockName);
22302	(offsetRight
18263	writer.addDocument(d1);
43480	assertsameset
36625	//int
24905	peach
54805	"NativeFSLock@"
18464	testbooleanrequiredequalscores1
54912	writer.addDocuments(docs,
67501	(threads[i].error
36063	SingleDocTestFilter(1));
44048	U+1EA5:
48001	reset(){
20854	analyzerMap.putAll(fieldAnalyzers);
22564	f.setAccessible(true);
36684	BIT_LAST_ARC);
38991	doRandom(1000,true);
36439	numArcs="
18188	filter.toString()
40841	FST<T>(in,
66216	{"w1","w2","w3","w4","w5","xx","yy","zzz"};
18671	à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à¦¿,
54939	(WaitingListener
15410	buffer_size
64828	nextCount=0;nextCount<numNext;nextCount++)
8701	TestRandomStoredFields
43965	U+1EA2:
14670	DOC);
4848	default_max_thread_states
36501	(targetHasArcs
41862	arc=0;arc<6;arc++)
44044	U+1EA1:
23355	"Venice"
45651	,"(s)",
67337	index2_refreshed);
55974	input.incrementToken())
42950	delegate.createAttributeInstance(attClass);
55107	verifyEquals(Random
783	input.incrementToken();
48443	conjunctionscorer
11191	"\3\230\175\0\1\346\32\230\1\347\2\230\1\u03fe\7\230"+
66170	queriesTest(String
18920	String[]{"C",
56925	"\1\0\1\11\2\12\1\13\1\36\4\0\2\37\1\0"+
26496	assertTrue(DocHelper.nameValues.size()
59513	"\1\0\2\154\1\140\3\137\2\0\1\77\1\137\4\0"+
4725	conf.setSimilarity(new
44046	U+1EA3:
24072	"C-7",
42530	maxdigits
56693	policy.dir
17661	unhelpful
60418	"\1\137\4\0\2\137\150\0\1\u0101\1\266\1\u032c\30\266"+
45548	"áµ²"
54520	elemSize
6743	querying
42637	below",
24387	FieldCache.FloatParser(){
48480	TopScoreDocCollector})
58145	doc.getField(SNAPSHOTS_ID);
16075	//System.out.println("Searcher
56995	java.util.bitset,
11783	getText(CharTermAttribute
43679	day);
17812	trivial
19666	1/5th)
34355	#setTermIndexInterval(int)
39223	fieldNorm
63175	savedterms
40422	<b>re-index
62646	testparenthesismust2
20522	specified)
68022	leftTerm
27253	"\u0041\u0308\u005F"
53013	re-using
7081	rangeBounds.clear();
6289	specified,
45550	"áµ³"
6288	specified.
29783	"\1\26\1\103\3\0\1\102\1\0\1\102\2\0\1\25"+
59549	"\2\25\5\0\3\25\1\0\1\25\5\0\1\25\2\67"+
41500	(1.0+random.nextDouble()));
63380	0x821,
49645	boosting
31484	Arrays.sort(expected);
62987	setnocfsratio
32431	leftover
68035	assertTrue("wrong
43963	U+1EA0:
41671	FST<Long>(FST.INPUT_TYPE.BYTE1,
27532	"\u005F\u0308\u0031\u003A",
65717	"IndexFileDeleter.CommitPoint("
29012	this.size
1264	addDocs
66616	triggerOn(SorePoint.BEFORE);
68120	truly
37308	#makeStopSet(Version,
31983	getFloats
27973	"\u0031\u0027\u0031\u003A",
29609	"\1\142\4\0\1\142\1\143\2\0\12\134\41\0\3\133\2\0\12\134"+
16104	emulate
54919	reopened,
38811	ints2);
64776	seen.add(t);
40542	nsme
729	deleted:
65710	deleted;
21497	writes
20927	penalty
136	writer
62270	"linda"),
58045	i=0;i<perDoc.numVectorFields;i++)
2116	hash(address)
29784	"\142\0\2\31\4\0\1\35\1\0\1\36\1\0\1\37"+
964	j=0;j<17;j++)
2123	idx=0;idx<oldTable.length;idx++)
38513	"document
24832	allowDups
1132	SegmentInfos.getLastCommitGeneration(dir);
10195	"\1\0\2\136\1\137\3\136\3\0\1\136\4\0\2\136"+
61622	uae58
18644	"ÜÜ",
11275	"\1\347\12\230\175\0\1\346\11\230\1\u01a5\20\230\1\347"+
17634	TEST_VALUE;
7431	trunk
42039	OneComparatorFieldValueHitQueue(SortField[]
10441	"\1\u0167\2\u013f\1\u0180\1\u0167\2\u013f\1\u0181\2\u013f\1\u0141"+
66077	testStaticMethod3Old()
3746	<ul>
43135	elevated
16840	write)
13133	uae62
37223	labeltomatch
48741	"f2",
3980	super.reset(input);
30719	"\1\130\5\0\1\130\7\0\1\130\4\0\2\130\3\0"+
40909	input="
44307	"áµ­"
39595	(isIndex)
60577	"\1\u016c\1\u016d\1\u016e\2\0\2\u021e\4\0\1\u021e\217\0"+
39815	System.arraycopy(oldBytes,
40019	write:
24303	"adbc"
1292	UnsupportedOperationException("expected
42974	setendoffset
10459	"\2\0\1\54\3\0\1\176\7\0\1\56\2\0\1\57"+
41146	random.nextInt(maxNumWords+1);
8248	bytebuffer
57926	(extension.startsWith("f")
23620	flushAtDelCount)
9261	getvalue
31942	shift<=31)
48617	deleted,
31543	searcher.search(NumericRangeQuery.newIntRange("trieInt",
8006	deleted.
12331	uae76
64647	<code>numBytes</code>.
40678	ArrayList<FSTTester.InputOutput<Object>>(terms.length);
9952	"\1\0\1\50\1\0\1\51\2\0\1\203\3\0\1\53"+
61283	"\1\u0614\6\u02e2\175\0\1\u034d\1\u0615\1\u02e2\1\u0616\27\u02e2"+
8996	suffix);
32057	numeric_utils_int_parser
51531	deleted"
43235	Term("content","bbb");
46410	U+277F:
66768	succession
43372	((lastBytePos
46365	U+277D:
24219	ArrayList<Directory>
681	testRandomExceptions");
49432	ParseException("None-hex
45743	,"tc",
67924	Token(token,
50830	merges:
66126	qptestanalyzer
3520	merges.
29470	cleanup()
64898	threadsAlive
2187	merges,
49371	(!allowLeadingWildcard
60958	"\3\232\175\0\1\351\1\u04e6\31\232\1\352\12\232\175\0"+
41414	docFreqs
67273	pr.add(new
46389	U+277E:
33288	checkExpecteds(BitSet
53867	java5.codePointAt(
32436	randomField();
67184	System.arraycopy(existingPositions,
48531	(weight
50659	LogByteSizeMergePolicy#setMaxMergeMB}.</p>
46318	U+277B:
49991	versioning
10810	"\6\0\12\u02c1\1\u02c2\242\0\1\u02c3\174\0\34\u01ca\12\u02c4"+
26938	"\u0001\n",
60198	"\1\140\3\137\3\0\1\137\4\0\2\137\150\0\1\u0265"+
40476	instantiation.
17777	numberOfTerms;
52720	query.add(spanQuery,
35559	manner...
65964	assertEquals("b:w?ldcard
19171	truth
1398	setrambuffersizemb
35285	curDoc);
7042	sub-range.
46341	U+277C:
66723	sign.
21581	searchTermText.substring(preLen);
40131	UnsupportedOperationException("This
6765	RangeQueries
42336	newFSDirectory(dirName);
6826	sub-range)
52999	0xD7C0)
49815	p.arg;
20520	version</li>
36408	BufferedInputStream(new
7095	works
61299	"\1\352\11\232\1\u0626\175\0\1\351\4\232\1\u016f\25\232"+
48636	fieldInfo.name
1392	printstacktrace
48952	sign,
67614	writer.commit(data);
14609	zzattributes
36704	deref
50028	entry.file
7806	num_fields
7970	mmapped
25034	testsortwithscoreandmaxscoretracking
41370	nsec
282	become
2385	AveragePayloadFunction());
35486	java...
34662	(includeSpanScore
50183	IndexWriterConfig#DISABLE_AUTO_FLUSH}
11465	"\175\0\4\u04e3\2\0\1\u04e3\15\0\1\u04e3\6\0\12\u04e3"+
32249	assertTrue("succeeded
66240	System.out.println("Total
55758	writer.addDocument(DocHelper.createDocument(17,
52442	valSize
26168	PackedInts.maxValue(current.getBitsPerValue());
20685	nsde
17677	rewritten.
31031	si2,
57139	wordNum
20534	Collator,
27146	"\u000B\u0061\u2060",
20507	Collator.
1394	testrandomexceptions
33361	work:
39335	Also
46295	U+277A:
10977	"\4\264\1\0\3\136\1\0\2\136\1\137\3\136\3\0"+
31877	Interface
22430	toindex
11235	"\12\u0431\1\u03e8\175\0\4\u0432\2\0\1\u0432\15\0\1\u0432"+
55322	buffer[i++]
36604	arc.bytesPerArc);
57551	BitUtil.nlz(estSize),
38312	-5000,
18074	rewritten;
476	attempt
56039	valid(output2);
4877	maxbuffereddeleteterms
67244	nready
50849	message("hit
25291	q.getClass());
37591	(issue
15629	sizeInBytesWithStore;
6553	Suitable
66802	StringReader(queryString));
2499	docFreq,
17350	work!
63537	((word
4184	testRange(8);
33928	work,
48130	successive
23319	deleteID
48846	assertTrue(position
6092	Payload
39168	docFreq;
41418	docFreq:
25640	ReaderField(Object
41848	ArrayList<Util.MinResult<Pair<Long,Long>>>();
22027	<li>Setting
30603	"\3\0\1\102\4\0\1\102\2\25\2\102\10\0\1\26"+
878	FailOnlyOnFlush
52591	rewritten}
113	Directory
20635	TestIndexWriterReader.createIndexNoClose(true,
8575	impls
62347	assertEquals(s(4,1,2),
59932	"\1\u0188\1\0\2\137\1\u0189\1\u0143\1\u0144\1\u0145\2\0"+
15571	input.readByte());
877	"gg")),
26096	OneComparatorScoringNoMaxScoreCollector(queue,
43662	b\"",
62886	www.abc.com
24012	"-1",
7167	longrangebuilder
40567	toIntsRef(new
35022	scorerDoc;
1603	terms.term());
32388	testnativefslockreleasebyotherlock
353	RandomIndexWriter
23120	KeywordAnalyzer()).setOpenMode(
42831	setType(String
11355	"\1\346\1\u048f\31\230\1\347\12\230\175\0\1\346\32\230"+
2706	MyHitCollector();
26671	unexpectedly
22773	FieldCacheRangeFilter<Double>(field,
30628	"\1\0\3\33\1\0\1\33\2\0\4\33\2\0\1\33"+
19128	assertanalyzesto
35450	pop(long
35899	TermRangeQuery("notcontent",
41087	cmo2.count
18988	urlList.toArray(new
65129	states:
65411	testCrashReaderDeletes()
22409	constantly
25924	IndexCommit},
58449	therefor
41438	BytesRefFSTEnum<Object>
60689	"\1\u0428\1\u02e2\1\u0428\4\u02e2\1\u0428\10\u02e2\1\u0428\2\u02e2"+
18550	"Õ¸Ö",
6702	step)</em>.
28962	getinnerarray
39866	(!openReadOnly
22311	result[upto++]
28307	scoreAll((root<<1)+2,
3724	words
17723	getTopLevelQuery()
41590	states.
64594	(buffer[bufferPosition++]
11622	"\1\u0558\15\0\1\u0558\6\0\12\u0558\14\0\1\u0325\161\0"+
9178	RamUsageEstimator.NUM_BYTES_INT
37432	testquerytermvector
29481	runClasses.getFailureCount());
22906	SpanNearPayloadCheckQuery))
1979	states)
31054	si1,
19876	short[0]);
5781	applying
1317	t1.setPositionIncrement(Integer.MAX_VALUE);
20280	subscorer
67862	posLen=1,
20811	no_output
39635	utf8toutf16
37658	doc.get(t)));
22363	comp);
22190	(newSize
15013	testincreasingsloppiness
33092	instances",
48513	sub-scorers
10667	"\1\u0167\6\0\12\u0167\176\0\4\u0168\2\0\1\u0168\15\0"+
5217	((jjbitVec3[i2]
57289	word;
17878	result.length);
412	IndexReader.open(dir,true).close();
66228	CheckHits.checkEqual(q1,
1179	in.length();
46249	U+2778:
11992	word,
37487	stopAnalyzer));
37544	"hello"),
20912	word.
51608	pendingMerges.size()
23593	delTerm;
19849	s.getIndexReader().document(aSd.doc).get(ID_FIELD);
36785	#getBytesReader(int)}
36218	other.bytesPerArc;
6077	"hello");
41055	prefixes.put(IntsRef.deepCopyOf(scratch),
11675	ZZ_PUSHBACK_2BIG
57220	(startIndex
67864	posLen=3.
22112	int");
17280	incrementandget
32811	testemptyinput
33871	(!hasRpts)
11655	"\6\0\12\u0564\1\u0549\174\0\1\u0332\4\u0564\2\0\1\u0564"+
46272	U+2779:
9037	PrefixCodedTerms(buffer);
46808	numChars;
32644	encodedBuf1.compareTo(encodedBuf2);
27849	"\u0061\u002C\u0308\n",
6251	stopwords
28306	scoreAll((root<<1)+1,
62994	constants.
17781	incTotalNumberOfTerms(int
20829	aWrapper
6963	sub-ranges
37855	==}
10340	"\1\u0141\3\0\1\136\4\0\2\136\150\0\1\u014e\17\264"+
56023	appends
46694	U+2775:
29398	levelsizearray
39111	IndexReader.terms(Term),
63532	((int)word
60253	"\1\351\7\232\1\u0298\22\232\1\352\12\232\175\0\1\351"+
38449	Field.TermVector.WITH_OFFSETS));
35586	B[i]),
43639	getdeletescachekey
40363	computations
52670	Calculates
31821	UpgradeIndexMergePolicy(c.getMergePolicy()));
30689	"\4\54\2\0\1\54\42\0\1\64\37\0\1\64\1\0"+
41158	limited-alphabet
60667	"\1\u0419\272\0\12\u041a\11\0\1\u0213\164\0\4\u041b\2\0"+
35329	stopWordsSet.add("analyzer");
37059	bytesPerArc))
46201	U+2776:
53284	common(Object
20763	getpayload
2829	noise
2963	maxtime
8255	accesscontroller
20564	SavedStreams
43378	MAX_BYTES_PER_INT,
8734	(rand.nextInt(50)
31994	EXPERT:
37057	bytesPerArc);
43373	MAX_BYTES_PER_INT)
46226	U+2777:
3456	this.error
39277	termArraysEquals(List<Term[]>
34855	stopword,
57366	wlen-1;
51249	SegmentInfo(mergedName,
35902	upperterms
26434	encode(input,
12728	uabe0
35807	iwOut.forceMerge(1);
51561	(merge.isExternal)
22475	reflectAsString(final
15905	s.append('v');
37029	BIT_TARGET_DELTA;
9898	"\1\0\1\25\2\0\1\25\3\0\1\25\177\0\2\114"+
38038	vals[i]-prefixVal
33741	contribution
50930	delTerm,
46626	U+2772:
66868	Math.max(max,
6785	bounding
48796	Field.TermVector.WITH_POSITIONS;
58318	moving
52450	NumericUtils.floatToSortableInt(value);
64607	copy/paste
21637	justWildcardsLeft)
6825	enums
34438	setMergedSegmentWarmer(IndexReaderWarmer
42339	"f1";
53740	startSize
24198	(false,
34090	bit-sets
12327	uabea
22243	getShrinkSize(array.length,
46682	U+2771:
18217	explain
2294	(fieldName.equals("field"))
34823	(multiToken
7673	javaccoptions
32781	separator
40514	<P>
56652	SECONDS);
66011	t:two^10.0)
559	setName("Indexer
54990	indexinggen
54748	(LOCK_HELD.contains(canonicalPath))
24931	djhfb
33845	tpPos
51819	toSync.files(directory,
43555	doTestDgaps(100000,415,418);
37483	testPhraseQueryWithStopAnalyzer()
2368	=1;
35095	currentBuffer.length;
40547	org.apache.lucene.util.fst.BytesRefFSTEnum.InputOutput;
23539	""+id,
66114	"f1".
31075	filesToDelete)
53087	s[i];
17530	"f1",
46688	U+2774:
50031	Merge
36776	bytes[posWrite++]
17947	However,
4357	=0;
52120	resetmergeexceptions
51815	keepFullyDeletedSegments
542	org.apache.lucene.store.IndexInput;
13129	uabd6
24442	MyFieldComparatorSource
53835	empty_set
50663	getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);
61618	uabcc
9815	"\1\136\1\0\2\136\1\137\3\136\3\0\1\136\4\0"+
46636	U+2773:
43452	TermQuery(t2),
33807	OpenBitSet(rg.length);
51816	getKeepFullyDeletedSegments()
56464	(!clauses.isEmpty()
55222	len2);
49934	rangein_goop
15824	(docStoreIsCompoundFile)
14579	impossible
32376	teststresslocksnativefslockfactory
58996	testSeeking()
8373	sleepTimeMS
20084	(!c.isProhibited())
41686	frozen;
34072	cnt0==null
56983	hosts
56710	listCommits
28428	c.copyChars(otherchars,
64778	(!seen.contains(t)
97	org.apache.lucene.index.TestIndexReader.addDoc;
17186	merged.
31055	merged,
32634	original2[byteNum]
67992	org.apache.lucene.analysis.MockReaderWrapper;
60745	"\31\232\1\352\12\232\175\0\1\351\32\232\1\352\10\232"+
28520	binaryfldstored
6618	string-encoded
8230	unsetBuffers();
4558	newlongrange
24784	assertIntResultsOrder(collectorMax,
50074	(checkAbort
3988	clazz
4870	testinvalidvalues
11680	input",
3944	Character.toChars(normalize(c),
52343	payloadTS2));
22315	<T>
36371	writer.posWrite
24258	"DFHBJ");
40769	fstReader
43270	assertFalse(tdocs.skipTo(76));
25189	"m?t?ls"));
64418	compress(value,
24038	"-3",
46674	U+2770:
21240	byte[512];
19120	createcomponents
38743	enum2
38741	enum1
62647	testparenthesisshould
20751	this.toByteArray();
59472	"\4\0\1\61\14\0\1\62\4\0\1\63\2\0\1\64"+
25013	testmultisort
40545	java.io.Writer;
22762	Float.NEGATIVE_INFINITY;
55563	writer.flush(false,
24925	djhbf
65737	initdone
59507	"\1\75\2\0\1\76\41\0\1\25\2\26\2\0\2\77"+
7064	enum,
30857	ICUCollationKeyFilter
57495	enum.
4252	Float.NEGATIVE_INFINITY,
29435	checknomatchexplanations
24708	<K,
42098	onecomparatorfieldvaluehitqueue
10154	"\1\352\1\36\6\352\1\374\1\36\2\352\2\36\2\352"+
34502	WRITE_LOCK_TIMEOUT=").append(WRITE_LOCK_TIMEOUT).append("\n");
23020	bizarre
9826	"\2\25\1\0\1\25\1\0\2\25\1\0\2\25\2\0"+
3335	curscores
18772	"Î¬ÏÎ¸ÏÎ±",
9930	"\1\34\2\0\3\34\7\0\1\34\1\0\2\34\7\0"+
16932	decodenormvalue
62549	prohibitedScorers.get(0)
65136	1+lastInput.length-idx),
57447	worth
60856	"\12\232\175\0\1\351\2\232\1\u016f\27\232\1\352\12\232"+
55256	assertEquals(d1.length,
9598	"\2\u3b23\2\u3bc6\2\u3c69\2\u3d0c\2\u3daf\2\u3e52\2\u3ef5\2\u3f98"+
15322	assertEquals(numDocs,
61497	"\10\1\3\0\2\1\1\0\4\1\2\0\2\1\1\0"+
9351	"\3\133\1\0\4\133\1\132\10\0\1\133\10\0\2\132\2\133\2\0"+
50319	getReader(int
61620	uad12
49979	dataOffset</li>
11747	Asian
6682	larger).
2625	launching
35201	lastSkipProxPointer;
2085	System.out.println("hash:
29616	"\12\134\6\0\46\132\16\133\14\0\44\132\24\133\10\0\12\134\3\0"+
63383	0x832,
38005	-1000L,
19447	perThread.consumer.addField(fieldInfo);
61172	"\12\u035b\14\0\1\u0126\160\0\1\351\32\232\1\352\11\232"+
29920	"\1\25\4\0\1\25\10\0\1\25\24\0\1\25\3\0"+
48473	Common
63406	0x85431,
35314	StopAnalyzer.ENGLISH_STOP_WORDS_SET.iterator();
35420	ofKind
10027	"\1\172\37\0\12\64\30\0\1\25\3\0\1\25\3\0"+
37372	9+codec.length();
9908	"\5\0\1\32\2\0\3\32\7\0\1\32\1\0\2\32"+
62246	testbs2disjunctionnextvsadvance
6199	<p>When
11470	"\1\347\12\230\175\0\1\346\3\230\1\u04e7\26\230\1\347"+
20885	putall
63382	0x831,
696	.setRAMBufferSizeMB(0.1).setMergeScheduler(new
42993	<G>
50428	readerPool.
63407	0x85432,
59735	"\1\137\4\0\2\137\2\0\1\175\1\0\1\51\1\0"+
68005	testLetterAsciiHuge()
55644	_TestUtil.reduceOpenFiles(mainWriter);
41837	TreeMap<String,TwoLongs>();
30532	"\0\u2971\0\u29d8\0\u2a3f\0\u2aa6\0\u2b0d\0\u2b74\0\u2bdb\0\u2c42"+
40083	getSequentialSubReaders()
51434	readerPool;
24668	"GDHJICEFAB");
65956	(b:two*
23618	setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));
5361	error_line++;
10585	"\1\u01de\1\u019d\175\0\1\u0163\4\u01dc\2\0\1\u01dc\15\0"+
16609	permit
33202	parsing");
2390	seventyHash
6620	doubles,
31986	doubles.
46567	U+276E:
53291	(output1
3645	sets
29352	DocumentsWriter.BYTE_BLOCK_SIZE;
24858	TopFieldDocs
50831	(!hitOOM)
7506	clearLastVectorFieldName();
3388	describing
43325	org.apache.lucene.store.IndexInput}
9770	"\1\62\2\0\1\63\41\0\2\25\1\64\1\0\1\65"+
57435	intersect
46680	U+276D:
60862	"\1\u04a0\3\232\175\0\1\351\32\232\1\352\5\232\1\u04a1"+
50768	verbosing
22317	Comparator<?
8902	set.
62963	set1
10797	"\1\u02b4\24\264\1\141\12\264\1\0\3\136\1\0\2\136"+
12730	uad26
59486	"\1\275\12\36\1\142\12\143\1\66\1\137\1\144\1\137"+
50170	becomes
6201	set,
67140	offset/positions
22194	rounding
37278	set)
23457	Integer.toString(docId)),
65050	UnCompiledNode<T>(this,
40727	UpToTwoPositiveIntOutputs.getSingleton(true);
42157	ArrayUtil.grow(ints,
20609	WhitespaceAnalyzer(Version
32173	set:
25369	set;
28655	stopSet
58406	set=
34149	phrasescorer
43114	"z"}));
25368	set2
26719	org.apache.lucene.document.Field}s
62530	SingleMatchScorer(requiredScorers.get(0))
67797	t.setTermBuffer(termBuffer,
38501	System.out.println("Entry:
48062	LockFactory}.
16616	worst
46375	,"8.",
65417	getStringIndex()
10600	"\1\u0140\15\136\1\u0140\6\136\12\u0140\1\0\3\136\1\0"+
46569	U+276F:
12329	uad30
16515	worse
13131	uad1c
6157	assertnotsame
40577	while(charIdx
64181	testskipchars
54411	details.toArray(new
48017	LockFactory},
37769	c.acceptsDocsOutOfOrder();
56345	len22;
8975	buffer.getSizeInBytes();
35255	VInt
56868	"\4\12\2\0\37\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0"+
22032	search:
15468	(computed
18374	s.doc(h[h.length
27209	"\u3031\u0061\u0027\u2060",
5963	optimal
2819	"lastDoc="+exceptionDoc+
63525	curDocId
2996	search,
6925	q.max.equals(max))
3015	search.
62612	BooleanClause(c1,
61233	"\175\0\1\u034d\24\u02e2\1\u05e7\5\u02e2\1\u034e\12\u02e2\175\0"+
13130	uac79
8553	receives
33877	piece
60887	"\4\0\2\137\150\0\1\u0101\6\266\1\u04b3\23\266\1\142"+
36089	testboolean2
61434	"\3\u02e2\175\0\1\u034d\25\u02e2\1\u0682\4\u02e2\1\u034e\12\u02e2"+
40025	Commit
61205	"\1\u058b\13\0\1\u02e1\160\0\1\u0349\4\u05c5\2\0\1\u05c5"+
24201	searchX
8124	bufNr++)
24203	searchY
17421	termText);
31768	deletePriorCommits
46649	U+276A:
38780	assertFalse(r3
55860	addindex
33497	cs.reset();
64558	leftInBuffer
29226	int[numTerms][];
18788	"àºªàº²àºàº²àº¥àº°àºàº°àº¥àº±àº
24890	searchx
24891	searchy
59361	"\1\0\1\25\2\0\3\25\1\0\1\25\1\0\1\25"+
50415	deleter,
21276	seek(end)",
7366	common
29761	"\1\32\1\0\3\32\2\0\1\32\1\0\1\32\1\0"+
46664	U+276B:
25334	matchonedocprefix
65504	deleter:
50225	deleter;
2009	node.arcs[arcUpto];
16627	lessThan(node,
48282	ppEnd,
22956	testInsertionSort()
11766	SOUTH_EAST_ASIAN_TYPE
54825	absence
23445	(!done)
29530	FloatFieldSource
48287	ppEnd;
6126	ts.addAttribute(PayloadAttribute.class)
37579	//System.out.println("(exact)
37891	ConcurrentHashMap}.
46672	U+276C:
62613	BooleanClause(c2,
9100	isDeleted()
66423	consumer.start(f);
49572	termImage);
9399	"\37\0\121\0\57\135\1\0\130\135\250\0\u19b6\144\112\0\u51cc\144\64\0"+
67075	performTest(5);
60446	"\1\u0347\6\0\1\u034a\1\u034c\1\u034b\2\u034a\2\u034b\1\u034a"+
19731	while(!end)
28830	writevlong
49790	(jj_la1[i]
66296	postingsHash
39190	"idf("
57105	setNumWords(int
19940	<E>
336	commit
28211	wrap(Collector...
54468	freeRAM()
30345	(TwoPhaseCommitImpl
37741	printHits(PrintWriter
645	hitting
31844	listcommits
32178	created:
48942	testbadparams
12328	uac8d
33280	(expectedLastRecordId>10)
15734	normGen[number];
21159	created,
21130	created.
18130	ComplexExplanation
21149	structures,
25880	created)
14527	zzbuffer
59998	"\12\232\175\0\1\u01a9\5\232\1\u016f\24\232\1\352\12\232"+
35377	bitSet.nextSetBit(target);
58910	indexOptions)
52143	copysegmentasis
48273	prevEnd
58896	indexOptions;
56038	valid(output1);
66227	tot+=hits2.length;
50333	message("getReader
58156	non-snapshotted
6776	complete
50978	TieredMergePolicy
11683	ZZ_ATTRIBUTE[aState]
14666	FIELD_SCORE
41104	ent.getValue().isLeaf
17418	indexOf(String
17615	"initvaluetest";
32839	doVectors
39804	oldBytes
5512	newtoken
48516	visitOptional(P
51498	mergedReader.doDelete(docUpto);
61619	uac6f
34935	testfuzzy2
32573	char[encodedLen];
59116	"\2\u3a80\2\u3b23\2\u3bc6\2\u3c69\2\u3d0c\2\u3daf\2\u3e52\2\u3ef5"+
14605	zzcmapl
51881	recovery
32048	getInfoStream();
5841	~(elementPosMask
9009	RAMFile();
37485	StopAnalyzer(Version.LUCENE_24);
40110	claim
12729	uac83
9122	localFieldsWriter;
3970	oldIoBuffer[bufferIndex++];
54580	items[i]
42839	(Token)super.clone();
9136	localFieldsWriter:
3924	input))
57945	++idx
34156	rptstack
3822	input);
53296	subtract(Object
46646	U+2768:
65195	input's
53986	origNorm.bytes();
38992	testMethods()
49183	lowerTerm
53583	(Searchable
8165	curBuf.getShort();
25123	testEmptyTerm()
62749	shards:
3835	AttributeSource.AttributeFactory,
26927	<CARRIAGE
62366	!(spanB.next()));
30898	MyTopDocsCollector.
2808	took.
46662	U+2769:
6589	Diepenbroek,
36508	took,
23923	searcherlifetimemanager
66592	TestMockCharFilter
30463	TermVectorEntry}s
23377	++id,
37829	separated
61047	"\1\u053a\6\0\12\u053a\1\u053b\13\0\1\u033c\160\0\1\u03a1"+
2110	probe
30870	encodedLength
51767	merge.info.sizeInBytes(true)/1024./1024.,
19071	"ç"},
35062	RAMOutputStream()
2172	(hence
22023	behavior:
51969	reason="
16934	pr1clone
28425	testCopyChars()
32281	NativeFSLockFactory(fdir1));
10123	"\1\65\1\66\1\0\1\25\2\0\1\25\1\140\2\36"+
48088	dest)
48550	DocInverterPerThread
48111	dest,
2604	behavior,
31138	behavior.
37657	t=start;t<start+numTerm;t++)
48096	dest.
36570	ArrayUtil.grow(nodeAddress);
53807	String(nextCharArray());
52066	getcurrentfieldinfos
20212	c.getOccur()));
32993	getstreamcount
61295	"\6\u02e2\1\u0622\3\u02e2\175\0\1\u034d\32\u02e2\1\u034e\3\u02e2"+
27238	"\u0041\u0308\u0041"
11351	"\7\230\1\u048a\22\230\1\347\12\230\175\0\1\346\1\u048b"+
25486	HashMap<Integer,
56876	"\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0"+
51341	fsync.
61347	"\175\0\1\u034d\11\u02e2\1\u0648\20\u02e2\1\u034e\12\u02e2\175\0"+
51345	fsync,
16129	0.07948637f,
52195	rollbacktransaction
39744	info.dir
19932	testcachingshort
42572	stream.incrementToken();
60873	"\1\352\6\232\1\u01ae\3\232\175\0\1\351\30\232\1\u04ab"+
42995	acquired}
58119	#prepareCommit()},
11729	<=>
24591	TopDocsCollector<Entry>
41781	(!slowCompletor.containsKey(s))
19734	Arrays.fill(gens,
19326	tools
2570	checkhitcollector
56138	expected[i].doc,
27205	"\u3031\u0061\u003A",
38012	Long.MAX_VALUE-1,
59512	"\2\333\1\155\1\333\1\155\1\0\1\137\1\153\1\137"+
18666	à¦à¦²à¦¾à¦­à¦à¦¨à¦
1673	field_infos_extension
35341	StopAnalyzer(TEST_VERSION_CURRENT,
42833	this.payload;
64397	java.util.zip.Deflater).
53352	SimpleFSIndexInput
55973	(tokenCount
49318	cal.setTime(d2);
102	class
15425	deletes;
25570	relationships.
23475	deletes:
31251	DataInputStream(new
38011	Long.MAX_VALUE-2,
41856	Builder<BytesRef>
67721	termLength;
9194	deletes,
51080	deletes.
58612	testsupplementarycharsbwcompat
51000	deletes)
29861	"\1\0\1\25\1\0\3\25\1\0\1\102\1\0\2\25"+
50327	logic,
68144	freeBeforePos
61449	"\2\u02e2\1\u068d\27\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
59671	"\1\u010d\2\u0107\2\266\1\u0107\6\266\3\u0107\11\266\1\142"+
16777	pr1Clone.deleteDocument(10);
10327	"\1\u014a\1\136\1\143\1\136\1\0\1\136\1\144\1\137"+
32759	charNum
36138	BIT_FINAL_ARC
57678	valueCount)
55418	fieldnamecomparator
51571	merge\n
4861	testconstants
10372	"\2\u0118\2\330\1\u0118\1\330\1\u0118\1\0\1\136\1\151"+
11723	newlines
8981	BytesRef();
35988	(random,
5860	valueCount,
50897	document");
21327	logic.
40719	output.ints[idx2]
24673	'string',
42464	ByteArrayPool
47960	testFilteredSearch()
67169	newOffsets,
59802	"\2\137\2\0\1\175\1\0\1\51\1\0\1\176\2\0"+
50655	Integer#MAX_VALUE}.</p>
55608	"index2"));
37400	actualcodec
30195	skipped
3831	CharTokenizer(Reader
1810	entry
29882	"\10\0\1\25\1\0\2\25\21\0\1\25\3\0\1\25"+
2078	scratchArc.label;
2434	FullSimilarity());
11491	"\15\0\1\u04f8\6\0\12\u04f8\1\u04cf\13\0\1\u0325\160\0"+
62338	assertEquals(s(0,0,1),
67146	TermVectorEntry}.
54657	acquired)
54023	normFileName
36929	topN)
9063	readvint
59190	"\3\ub2cd\3\ub370\3\ub413\3\ub4b6\3\ub559\3\ub5fc\3\ub69f\3\ub742"+
52957	0x800)
49270	BooleanClause.Occur.SHOULD;
23023	lDoc3.add(newField("id",
36392	out.writeVInt(startNode);
17396	SegmentTermVector
28357	BooleanClause.Occur.SHOULD,
22716	Short.MAX_VALUE;
22711	Short.MAX_VALUE)
22768	FieldCacheRangeFilter<Double>
40826	pair.output;
6378	setslop
28508	Field("stringCompressed",
43175	ElevationComparatorSource(final
50063	os.writeLong(fe.dataOffset);
37255	arcstartpos
31086	out.print("
61432	"\1\u067f\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u0680\31\u02e2"+
32900	DocumentsWriter.CHAR_BLOCK_MASK;
8304	chunksizemask
30770	limit);
56084	QueryUtils.check(csrq("data",
23362	.add(newField("city",
7650	....
17945	Farsi
4761	-1");
44753	U+1EC8:
810	CrashingFilter(fieldName,
19496	...;
38388	java.io.FileNotFoundException;
57198	invert
51871	segmentInfos.updateGeneration(toSync);
8061	getMaxChunkSize()
20088	side
39611	(lastTermBytes.length
40992	next");
58097	lessThan(PhrasePositions
65954	assertEquals("(b:one*
52676	(numPayloadsSeen
39570	String(termBytes,
56424	maxCount
32921	1-encoderUpto;
66922	pair.output1
36990	anyNegDelta
66925	pair.output2
35296	curpayloadlength
18955	"<ALPHANUM>"
15766	setDocStoreSegment(String
44804	U+1EC9:
54354	#STOP_WORDS_SET}).
15715	(meaning
57173	wordNum+1;
21569	sidx
48438	initscorerdocqueue
8787	org.junit.rules.TestRule;
50109	#deleteDocuments(Query)}.
58472	{"Abc\ud801\udc1c",
51628	smallest?
4231	testRightOpenRange_4bit()
1584	TermQuery(t);
32184	lf.makeLockCount
58349	bbytes
52625	coorddisabled
2806	picky
20329	NoOpCollector(true),
27553	"\u00AD\u0308\u003A",
57052	</table>
27071	"\r\u0308\u0031\u0027",
34176	visible
50932	updateDocuments(delTerm,
52702	mDirectory
41128	stopNode);
25173	testLotsOfAsterisks()
27599	"\u0300\u0308\u002C",
65731	decref'ing
4667	constants
19475	CHARSET_UTF_8
58237	this();
28185	sign
31014	...)
65316	numArcs--;
22572	Shallow
43201	topcollector
31195	"24.nocfs",
55599	assertTrue(r0.isCurrent());
4347	testRandomTrieAndClassicRangeQuery_8bit()
20341	random(10000)
3208	out-of-order
51551	message("handleMergeException:
15814	filesSet
35219	lastSkipFreqPointer
29037	(tvx
21573	sidx;
36894	packing
17752	UnsupportedOperationException("Please
62221	nextUpto;
52088	starvation
9131	localFieldsWriter
23998	"I"},//B,
35688	(int)(x>>>32);
25978	orderness
61063	"\6\0\12\u054a\1\u0503\13\0\1\u02e1\161\0\4\u0546\2\0"+
54535	-10000,
30720	"\2\130\1\0\1\130\4\0\1\130\1\0\1\130\2\0"+
29575	"\1\0\7\132\1\0\2\132\1\0\5\132\2\0\1\133\1\132\7\133"+
60251	"\1\351\3\232\1\u0295\26\232\1\352\2\232\1\u0296\7\232"+
14628	constant:
62772	mergedHits:
31724	UpgradeIndexMergePolicy}
39379	InterruptedException,
26750	searchable
56348	len11;
55174	(tv1
33296	val=Integer.parseInt(sval);
5252	jjtoSkip
3526	ArrayList<OneMerge>();
2776	verify
42474	ingesters[i].join();
10008	"\3\136\3\0\1\136\4\0\2\136\2\0\1\67\1\0"+
50958	segmentInfos.size();
44492	U+1EC1:
55180	(tv2
26395	byte[],
36132	byte[].
51719	try/finally
16240	keys)
1545	afterClass()
7668	reason);
46565	U+275E:
33599	keys,
50961	segmentInfos.size())
37877	keys.
20797	"foobar"
67311	testMultiReaderReopen()
44412	U+1EC2:
41491	BytesRef("a"),
46561	U+275D:
58179	super.onInit(commits);
25825	(Spans)
37964	prone
30287	failOnCommit;
39207	fieldExpl.setDescription("fieldWeight("+getQuery()+"
43824	assertTermEquals("u",
56344	len11,
24155	s.setDefaultFieldSortScoring(true,
41461	BytesRef("a");
29826	"\1\127\11\0\1\46\2\0\1\130\16\0\1\131\2\0"+
37154	bit_target_delta
14662	"namespace"
28763	RAMOutputStream[]
63249	(256*sizeof(int))=1K
7112	floats
46593	U+275C:
61300	"\1\352\12\232\175\0\1\351\24\232\1\u0133\5\232\1\352"+
57686	super(values.length,
56829	<tt>/lucene/3x/lucene/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.jflex</tt>
20436	13:25:43
60115	"\4\0\1\u01ce\151\0\46\u01d0\1\0\2\u01d0\1\u0214\3\u01d0"+
19538	normally
16611	downHeap();
63036	"<_TERM_CHAR>",
62166	testDeMorgan()
50102	<code>create=true</code>
35685	(int)x;
21942	thrown,
3568	thrown.
67428	SegmentReader.getOnlySegmentReader(reader3);
15593	IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;
33505	String[]{"i"},
28774	exceed
29261	idxname
62446	requiredScorers.size()
46591	U+275B:
67905	//System.out.println("again");
44410	U+1EC0:
40222	termDocs(int
38172	(neededBounds
17926	smallest,
3136	cachedDocs.add(curDocs);
42108	EMPTY_INTS
26891	(From
57051	<td>0.99</td>
55673	mainWriter)
38369	x7fffec7f
35840	testExclusive()
18175	super.score(collector);
65108	((char)
37533	hits[1].doc);
60634	"\3\0\1\137\4\0\2\137\150\0\1\u0101\1\u0401\31\266"+
2337	exact
20946	#setTermLength}
29601	"\1\143\12\134\4\143\2\142\46\132\12\0\53\132\1\0\1\132\3\0"+
21756	fixedsearcher
10642	"\1\376\12\264\1\u0103\17\264\1\141\12\264\1\0\3\136"+
44416	U+1EC6:
34775	DumbQueryParser
38368	x7fffec78
51361	enter
64959	dedupHash;
60119	"\1\u0217\6\0\12\u0217\1\u0218\26\0\1\175\1\0\1\51"+
8892	Underlying
42546	throwed
58228	BytesRef(byte[]
55667	mainWriter;
43625	cache.put(coreKey,
44498	U+1EC7:
30294	failOnCommit,
28825	writeskipdata
46812	expectedOutputTokens.add(expected.toString());
56489	(top().next())
44494	U+1EC3:
42979	newendoffset
58493	"abc\uD800",
59458	"\2\0\1\204\1\0\1\51\1\0\1\52\2\0\1\205"+
19820	score="+h[i].score+"
37648	doc.add(t);
63404	0x85421,
34879	getsuperfieldquery
11948	zzTransL
57800	NoDeletionPolicy.INSTANCE,
50032	IllegalStateException("Merge
52868	EVENT
50178	IndexWriterConfig#WRITE_LOCK_TIMEOUT}
44414	U+1EC4:
40163	(top
64612	(too
34002	ArrayList<ArrayList<PhrasePositions>>();
3885	added
49738	(tok
66445	numPostings++;
60519	"\2\137\150\0\1\u0101\2\266\1\u0317\27\266\1\142\12\266"+
60797	"\1\u046f\2\u0470\1\u046f\5\u0470\1\u0471\175\0\1\u03a1\4\u0472"+
19670	buys
40356	termDocs.doc();
37861	Map's
54229	assertTrue((-key)-1
47935	(tpc
17666	competitive
44496	U+1EC5:
20987	consistent
21887	no_bytes
63222	non-stream
38439	hope)
63436	0x865421,
31610	segCount
10612	"\4\0\2\136\150\0\1\376\7\264\1\u01f2\22\264\1\141"+
53533	maxScore=Float.NEGATIVE_INFINITY;
24769	TopFieldCollector.create(sortMin,
11585	"\216\0\1\u04f3\175\0\4\u053b\2\0\1\u053b\15\0\1\u053b"+
40676	(simple
39515	term.text.length(),
56471	(spans1.doc()
9820	"\1\25\11\0\4\25\4\0\5\25\10\0\1\64\2\25"+
529	java.io.Reader;
27645	"\u0061\u2060\u003A",
22236	double[]
11754	Sequences
10367	"\1\67\1\0\1\50\1\0\1\70\2\0\1\71\3\0"+
59762	"\4\36\1\u0146\25\36\1\142\12\143\1\u0142\1\137\1\144"+
20276	ismatch
29894	"\1\0\1\52\10\0\1\25\24\0\1\25\3\0\1\25"+
48717	assertTrue(comp.compare("-1.0",
6621	longs,
31984	longs.
57770	(failed.get())
55120	doc.get("id"));
52731	expectedScores);
56617	KeepLastNDeletionPolicy(int
22830	fieldcacherangefilter
36702	nodeRefToAddress.length)
30365	testNullTPCs()
31980	integers.
50375	Drop
26372	(((inputArray[inputByteNum]
29539	9/30/11
35411	Image
66726	integers,
30541	"\1\54\1\0\1\34\2\0\1\34\2\0\1\25\11\0"+
37978	testLongConversionAndOrdering()
24456	"IGECA");
8592	(WeakReference<SinkTokenStream>
20589	site
52080	minmergedocs
30634	"\5\0\3\25\1\0\1\25\5\0\1\25\2\34\5\0"+
49752	(jj_ntk
2471	finalized
53661	TestSearchAfter
5987	bulk
59633	"\2\36\1\355\4\36\1\355\11\36\1\142\12\143\1\66"+
44490	U+1EBF:
66485	downto)
61121	"\13\0\1\u033c\161\0\4\u057f\2\0\1\u057f\15\0\1\u057f"+
41384	wordsFileIn
50487	thrown.</p>
58539	assertEquals(set.size(),
35434	keep_line_col
24157	(true,
8277	mmapdirectory
3919	(true)
27740	"\u0061\u003A\u0031\u002C",
33009	lasttermbytes
23787	IndexSearcher},
59366	"\1\0\2\25\7\0\3\25\2\0\2\25\12\0\2\25"+
2798	busy
20015	IllegalArgumentException("maxClauseCount
34475	setIndexingChain(IndexingChain
62416	TestIntsRef
48335	Scorer#skipTo(int)}
61253	"\1\u05f7\15\0\1\u05f7\6\0\2\u05f8\1\u05f7\2\u05f8\2\u05f7"+
61624	uaf9e
31642	incorrect
64304	getTermCountCutoff()
21249	expectedBuffer.length);
18672	à§¨à§¦à§¦à§§
41470	assertEquals(13824324872317238L,
20719	this.data[this.offset
40813	prune1==0
16249	ta(String[]
7173	difference
51117	closeInternal
8751	docs.keySet().toArray(new
50575	but,
67691	CharTermAttributeImpl
60010	"\1\u016d\2\u0144\1\u0188\1\0\2\137\1\u0189\1\u0143\1\u0144"+
33471	TestMappingCharFilter
1384	idterm
28658	stopSet);
32122	9};
41920	finaloutput
43697	UnsupportedOperationException(UNSUPPORTED_MSG);
62865	maxTokenLength)
39450	maxcounter
64187	tmpstr
8199	(buffers
27324	"\u003A\u0031\u0027",
48373	subScorers");
30772	<code>char[]</code>
34872	multitoken
28633	palindrome,
50622	getConfig()
16684	r1.clone(false);
30419	getDataFile("porterTestData.zip"),
40060	Restore
48807	FieldInfos(dir,
2212	MergeSpecification
64297	(0.1%),
59643	"\3\0\1\136\1\276\1\277\1\300\1\301\1\302\1\303"+
2964	getresolution
7907	close&quot;
66037	{"blah"};
24679	assertMatches(
25175	term.append("m");
38838	r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());
19096	"ìã",
32855	termsHashPerField.reset();
43469	SpanTermQuery(t2)
20444	Execute
58670	dir.deleteFile("foo.txt");
66894	(Pair)
54365	maxTokenLength;
32950	postings.lastPositions[termID]
66687	testassumeafterclass
62444	sim,
8229	bufs
56420	tmp.setForceMergeDeletesPctAllowed(10.0);
24360	if(fail)
15792	output.writeLong(normGen[j]);
7392	bugs
11081	"\30\230\1\347\12\230\175\0\1\346\32\230\1\347\3\230"+
53102	0x10000;
35470	pop_array(long
29948	"\3\54\1\0\1\54\2\0\4\54\2\0\1\54\42\0"+
44404	U+1EBA:
43577	equal;
2348	equal:
48477	Float.NEGATIVE_INFINITY
38431	assertNotNull(fieldInfos.fieldInfo("unindexed"));
1390	equals
20164	subScorer
17057	TVPositionInfo(int
33923	k<j;
62153	10).getMaxScore();
56329	mergeSort(int
31914	Integer.parseInt(value);
29728	"\4\0\5\25\1\0\5\25\1\0\2\25\1\0\3\25"+
49894	newphrasequery
24324	buff
22185	overflowed
32174	assertTrue("lock
54233	hash.get(entry.getValue().intValue(),
21030	testName
29904	"\5\0\1\52\7\0\1\52\4\0\2\52\3\0\2\52"+
57651	cumulativeDiff)
4376	NumericUtils
40329	nextDoc());
48683	(!files[i].delete())
28993	tvx);
31205	{"31.optimized.cfs",
52361	verifyPayloadExists(dir,
8050	(maxChunkSize
20320	limit",
6268	super.getFuzzyQuery(field,
28726	non-existant,
47855	ampersand
61623	uaefb
49961	x60000000
27851	"\u0061\u002C\u0308\u000B",
57664	cumulativeDiff;
65345	prefixlenplus1
65147	add(IntsRef
49867	setfuzzyprefixlength
52467	StringBuilder("(numeric,valSize=").append(valSize);
15889	deletions);
1761	introduce
44408	U+1EBE:
16554	top()
16509	#initialize(int)}
10738	"\175\0\4\u0271\2\0\1\u0271\15\0\1\u0271\6\0\12\u0271"+
3845	OffsetAttribute
6308	fields.length");
15909	s.append('/');
2560	includespanscore
9889	"\11\0\2\25\2\114\4\0\2\25\3\114\10\0\1\26"+
27110	"\n\u0061\u002C",
2679	longer
1960	fieldswriter
38083	Double.NaN,
50097	<code>IndexWriter</code>
30404	setnull
57538	dataOutput.writeVLong(termInfo.proxPointer);
18628	(ÜÜ¢ÜÜ ÜÜ:
38133	trieCodeLong()/trieCodeInt()
44488	U+1EBD:
8529	sink
52926	HALF_SHIFT
1451	indexfilenames
28499	assertTrue(binaryFldStoredTest.equals(binaryValStored));
30467	SortedSet<TermVectorEntry>
6382	minsimilarity
17599	mapfieldselector
10648	"\1\u0141\2\0\1\76\1\136\4\0\2\136\2\0\1\67"+
39716	sis;
42689	docs.nextDoc());
54014	clone.origNorm.incRef();
4731	MyIndexingChain());
44406	U+1EBC:
26243	limit()
39713	sis,
51208	sis)
3196	curDocs;
30904	6.9916306f,
48193	(inSameDoc
19810	"+q);
36537	nodeIn.numArcs*maxBytesPerArc;
4097	beginning
58245	equal.
9698	"\1\25\15\0\1\25\6\0\1\25\124\0\1\26\1\0"+
67394	MultiReader(new
57583	equal,
26160	roundFixedSize;
14684	Name
68006	8192;
44486	U+1EBB:
36529	(maxBytesPerArc
26163	roundFixedSize)
38793	seen.add(fileName);
15023	testrandomincreasingsloppiness
22661	(-(insertion
30285	commitCalled
38425	Field("text","test1",
13134	uaf05
65261	tailLength-1);
4212	startOffset;
58199	Field(SNAPSHOTS_ID,
43986	U+1EB6:
39382	ThreadInterruptedException(InterruptedException
66367	postingsHash[i],
675	failing
63344	0x75432,
19285	testdelimiterssa
15622	i=0;i<numFields;i++)
22850	getlongs
40152	termEnum.term()
40258	doopenifchanged
63343	0x75431,
51813	keepFullyDeletedSegments;
31675	checkallsegmentsupgraded
31257	Integer.parseInt(d.get("compressedSize"));
7474	bugreprotokenstream
4878	maxbuffereddocs
62910	"_2.fnm");
53285	_output1,
38196	0xfffffffffffffffL,0xfffffffffffffffL
43306	getTermFrequencies()[5]
55547	random.nextInt(i);
25302	testtermwithoutwildcard
44066	U+1EB7:
3905	<i>abstract</i>
10042	"\6\25\2\0\2\25\1\0\4\25\1\0\2\25\1\0"+
30411	Porter's
37140	projects
50965	getFlushDeletesCount()
9094	getGeneration()
26599	assertEquals(norms[j],
11227	"\6\0\12\u042b\1\u0385\13\0\1\u0325\160\0\1\u042c\33\0"+
30630	"\1\0\1\25\4\0\1\25\4\0\1\34\1\0\2\34"+
51978	clearDeletes()
4199	exclusive
29247	offsets);
44402	U+1EB8:
53286	_output2)
29471	System.getProperties().remove(PROP_KEY1);
54750	LOCK_HELD.add(canonicalPath);
53289	_output1;
40383	topscoredoccollector
54769	cause"
34630	cause!
64110	MockIndexInput(theBytes);
48386	(nextDoc()
20711	setData(data,
33571	testChained()
57905	otherbuffer
62245	shutdown
64642	clone.bufferLength
25507	(val
33672	j=0;j<500;j++)
51316	readerPool.commit(segmentInfos);
61335	"\1\u034d\32\u02e2\1\u034e\10\u02e2\1\u063f\1\u02e2\175\0\1\u034d"+
44484	U+1EB9:
47923	cause,
9966	"\3\0\1\55\7\0\1\56\2\0\1\57\4\0\1\60"+
53290	_output2;
29748	"\1\32\2\0\1\32\1\0\3\32\3\0\2\32\1\0"+
64986	FreezeTail,
26805	stopanalyzer
4215	startOffset,
23033	writerA.addDocument(lDoc);
57029	<tr>
62249	doc.add(fields[i]);
26863	startOffset.
32354	isLocked()
41206	termEnum="
40896	IntsRefFSTEnum<T>
37081	topNodeMap.entrySet())
11888	<tt>pos</tt>
55650	addDirThreads.launchThreads(numDirs);
17127	TermVectorsReader
58023	while(lastDocID
20254	(disableCoord
29258	store_offset_with_termvector
18688	"à¦à¦²à¦¾à¦­à¦à¦¨à¦",
67870	GraphTokenizer
61815	u2ef6
42199	(PositionIncrementAttributeImpl)
49986	section,
61382	"\174\0\1\u0349\4\u065f\2\0\1\u065f\15\0\1\u065f\6\0"+
11171	"\1\u016a\4\230\1\347\12\230\175\0\1\346\32\230\1\347"+
66024	{"+one",
33173	(FlagsAttribute)
28897	org.apache.lucene.search.function.DocValues;
58251	BytesRef(bytes,
53238	x10ffff
50058	section.
7021	NumericUtils.floatToSortableInt(max.floatValue());
32978	numToCopy);
38964	CharArrayMap<Integer>(TEST_VERSION_CURRENT,
15804	Return
27262	"\u0041\u0061\u2060",
24266	this.sortField
30104	TermInfo
54236	numEntries
49065	res!=null
52332	"p2"),
10699	"\4\0\2\136\150\0\1\376\1\u024f\31\264\1\141\12\264"+
35041	filteredquery
21201	generally
3101	collect(int
7562	Detected
58632	cachedDir
6551	speed
50875	succeeded).</p>
7706	originalchecksum
7395	TermsHashPerThread
54992	waitforgeneration
32222	testStressLocksNativeFSLockFactory()
26144	declaring
38240	0x800000000000250L,
27054	"\r\u00AD",
58838	ir.docFreq(new
19656	endMinus1
17678	rewrite(IndexReader
31057	SegmentMerger(si1.dir,
27127	"\u000B\u0308\u000B",
16903	stored",
28772	Math.floor(Math.log(df)
57178	fastClear(int
4973	long[]
4112	field4.setIntValue(val);
24846	seen.add(s);
10365	"\3\0\2\136\2\0\1\67\1\0\1\50\1\0\1\70"+
34845	brown(incr=1).
32233	while(writer.isAlive()
64005	NOTE")
11971	YYEOF;
40817	for(InputOutput<T>
34715	qp.parse("\"foo
53919	assertEquals("23\ud801\ud801\udc1c\ud801",
67664	readertoclose
42946	TokenAttributeFactory(AttributeSource.AttributeFactory
63894	TestingCharTokenizerNormalizeIsTokenChar(Version
6347	flags.length");
427	warranties
37238	maxderefnodes
54627	"Boolean"
32872	perThread.vectorFieldsInOrder(fieldInfo);
20517	vendor</li>
30793	Character.codePointAt(chars,
52941	setLength(other.length);
39389	TestMultiLevelSkipList
40578	charLength)
15770	setDocStore(int
37083	newNodeAddress[ent.getKey()];
67855	testsinglemergeabletoolargesegment
22684	includeUpper);
46262	,"(3)",
26784	no_and_advance
5855	elements.
68016	elements,
4044	oldiobuffer
43980	U+1EB0:
60320	"\1\66\2\0\1\25\1\u0274\32\u021a\13\u0219\1\0\3\u0219"+
37225	midlabel
29623	"\2\0\1\136\2\0\5\133\20\0\2\141\3\0\1\137\17\0\1\141"+
2850	counterThread.setResolution(resolution);
56086	T));
65557	sometime
56889	"\1\0\1\1\3\2\1\3\1\1\13\0\1\2\3\4"+
21877	buffer.append(field.toString());
29105	Reads
39218	fieldExpl.addDetail(tfExplanation);
59374	"\2\0\1\55\3\0\1\200\7\0\1\57\2\0\1\60"+
47946	PrepareCommitFailException,
29005	tvdFormat;
40616	idx=0;idx<strings.length;idx++)
65344	freezetail
7614	caused
44060	U+1EB1:
42925	super.reflectWith(reflector);
4735	conf.setMaxBufferedDeleteTerms(0);
14927	x3aaf56ff
6764	<p>Comparisons
24831	testRandomStringSort()
41124	assertEquals(cmo.output,
51801	buffer.append(segString(s));
59554	"\3\67\1\0\1\67\2\0\4\67\2\0\1\67\147\0"+
37718	doTest(Random
30525	"\0\u1350\0\u13b7\0\u141e\0\u1485\0\u14ec\0\u1553\0\u15ba\0\u1621"+
29043	tvdPosition
42505	release(byte[]
5411	active0
8778	idslist
62781	shard",
5544	0.0f)
6224	this.fields
38163	(useBitSet)
41203	ord");
43982	U+1EB2:
20480	document.add(dateTimeField);
19867	doTestCaching(FLOAT_FIELD,FieldScoreQuery.Type.FLOAT);
44062	U+1EB3:
34604	getSimilarity();
27681	"\u0061\u2060\u0031\u003A",
281	causes
48706	"1.0.1")
56686	dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,
28942	cachedFieldSourceEquals(FieldCacheSource
12332	uaf19
10620	"\11\264\1\u01f4\1\0\3\136\1\0\2\136\1\137\3\136"+
5253	0x80L,
67384	reader0.close();
23684	IndexSearchers,
22022	IndexSearchers.
4189	testInverseRange()
12733	uaf0f
19320	testemails
10226	"\4\264\1\u0103\4\264\2\u0103\1\141\12\264\1\0\3\136"+
29737	"\1\25\1\0\1\25\1\0\1\25\1\0\11\25\2\0"+
43984	U+1EB4:
48517	child,
31214	BINARY_TO_COMPRESS.length;
64307	percent;
55105	System.out.println("indexing
19636	ChunkState(TermPositions
67685	OutputStream}.
11311	"\1\u046d\15\0\1\u046d\6\0\12\u046d\1\u03da\13\0\1\u0325"+
39282	ListIterator<Term[]>
61019	"\1\u0497\13\0\1\u0126\160\0\1\u0168\4\u0525\2\0\1\u0525"+
59746	"\5\u0124\1\u0125\14\0\1\u0126\160\0\46\137\1\0\3\137"+
17658	spend
17755	percent)
44064	U+1EB5:
7027	difference()
23874	ArrayList<SearcherTracker>();
46282	,"4.",
20032	BooleanClauses
6956	NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);
3567	AlreadySetException}
41973	testtrivial
42642	NO_PAYLOAD_FIELD
6870	NaN}
46846	u0133'
23660	amsterdam
3680	acronyms.
33001	encoderupto
21824	(field.name().equals(name)
63438	0x865431,
54281	hash.add(ref));
26929	(CR)>
40159	(smi.next())
52153	setdocstore
50906	Obviously
18972	luceneResourcesWikiPage.length()
27943	"\u0031\u0027\u0041",
43978	U+1EAE:
33320	sdp=new
49398	discardEscapeChar(String
63439	0x865432,
25209	viceversa.
18469	org.apache.lucene.analysis.standard.StandardAnalyzer;
34806	"triplemulti"
39161	zero-term
58607	udc44cde
44056	U+1EAD:
36107	arcCount
55705	handle(t);
21872	getBinaryValue(String
50929	updateDocuments(Term
20937	term();
24016	"HUT",
23759	NANOS_PER_SEC;
35851	String[]{"A",
16673	(!isReadOnly(readOnlyReader))
7553	reasons
157	READERS
36139	BIT_LAST_ARC
58139	"$SNAPSHOTS_DOC$";
19354	»¾
34658	Boolean.FALSE
54978	nrtmanagerreopenthread
39124	(positions.size()
41066	Iterator<Map.Entry<IntsRef,CountMinOutput<T>>>
5528	0.0f;
28788	skipBuffer.length;
60157	"\3\232\1\u017a\26\232\1\352\12\232\176\0\1\232\1\u0231"+
11590	"\15\0\1\u0541\6\0\12\u0543\1\u0542\13\0\1\u0325\160\0"+
38507	mismatch",
17980	"MAND"};
10527	"\6\u0167\1\u0169\1\231\1\0\2\u0167\4\0\1\u0167\151\0"+
65448	banana
6505	javadocs
9126	StoredFieldsWriterPerThread(DocumentsWriter.DocState
64645	Flushes
55819	assertTrue(didWarm.get());
27269	"\u0041\u0308\u0061"
1026	addDoc(writer);
49353	BooleanClause}
44058	U+1EAF:
25910	afford
40598	{"station",
5523	byteToFloat
27310	"\u003A\u0300",
51446	bufferedDeletesStream.bytesUsed());
7660	reason.
51553	exc="
31728	reason,
20691	TermPositions#getPayloadLength()}
64422	compressString(value,
62864	(scanner.yylength()
7662	reason)
22019	setfield
35789	Christian
36125	finite
62861	scanner.getNextToken();
29236	this.positions[currentPosition]
24676	Locale.UK");
18983	bufferedReader.readLine()))
7664	reason;
66772	succession.
10643	"\1\0\1\26\2\0\1\25\1\u011a\32\36\1\141\12\u01d1"+
51906	config.setMergedSegmentWarmer(warmer);
4208	noDocs);
55044	maxThreadStates="
32594	originalArray1
11917	errormessage
53879	newCharacterBuffer.getBuffer().length);
9561	"\1\u7eab\1\u7f4e\1\u7ff1\1\u8094\1\u8137\1\u81da\1\u827d\1\u8320"+
30448	initialize(size);
2381	"seventy"));
6154	testctor
51659	reason!
9069	finish
33253	FIELD_RECORD_ID
35677	(val>>>8)
60372	"\1\351\24\232\1\u0303\5\232\1\352\12\232\175\0\1\351"+
2664	pie",
51640	mergingSegments.remove(info);
20249	other.disableCoord;
29385	Read
27933	"\u0031\u0027\u0001",
43789	ASCIIFoldingFilter
50971	re-return
17420	Arrays.binarySearch(terms,
11668	zzUnpackTrans()
29272	canreadrawdocs
67974	testMockGraphTokenFilterBeforeHolesRandom()
65788	getSum()
2314	//noPayloadField.setBoost(0);
18795	"à½¦à¾£à½¼à½à¼à½à½à½¼à½à¼à½à½à¼à½£à½¦à¼à½ à½à½²à½¦à¼à½à½¼à½à¼à½¡à½²à½à¼à½à½²à¼à½à½à½¦à¼à½à½¼à½à¼à½ à½à½ºà½£à¼à½à½´à¼à½à½à½¼à½à¼à½à½¢à¼à½§à¼à½à½à¼à½à½à½ºà¼à½à½à½à¼à½à½à½²à½¦à¼à½¦à½¼à¼
8150	npe)
62762	shard="
66911	outputs1.getNoOutput()
5616	SmallFloat.floatToByte315(f);
9667	"\2\2\1\13\4\2\1\14\14\2\1\15\31\2\1\16"+
6838	min.equals(max))
60871	"\1\351\17\232\1\u0177\12\232\1\352\12\232\175\0\1\351"+
16074	iterations");
35312	HashSet<Object>();
60094	"\3\0\1\137\4\0\2\137\150\0\1\u0101\1\266\1\u01fe"+
28354	visitor);
56919	"\1\0\1\54\1\0\1\11\2\54\1\55\1\31\4\0"+
61130	"\2\u0541\2\u0585\1\u0541\1\u0585\1\u0541\14\0\1\u033c\226\0"+
27397	"\u0027\u0308\u00AD",
51319	protects
4350	testRandomTrieAndClassicRangeQuery(4);
12732	uae6c
42711	browser,
17172	getTermVectorsReaderOrig()
14572	unpacks
19088	testCombiningMarks()
50347	readerMap.entrySet())
11776	EMAIL_TYPE
1107	ByteArrayOutputStream()));
58273	copyBytes(BytesRef
9847	"\2\0\2\172\6\0\1\172\11\0\1\173\1\0\1\50"+
41207	termEnum);
59613	"\1\25\1\141\1\355\6\36\1\355\6\36\1\355\4\36"+
26934	<LINE
26803	SpanNotQuery(include,
29285	readtvfpointers
7974	UNMAP_SUPPORTED
57666	diffs[size
43523	testCount()
66818	queryTerms.length;
17041	this.storeOffsets
12132	u2fc1
21863	List<byte[]>
21722	fixedSearcher
17705	BooleanQuery#getMaxClauseCount}.
10674	"\1\u0236\1\347\1\u0237\2\230\1\u0238\1\u0239\1\u023a\1\230"+
7855	org.apache.lucene.util.WeakIdentityMap;
12934	u2fad
28548	AFTER,
18939	"ìëíì¸ì
28168	format_fe
7073	reader.terms(termTemplate.createTerm(lowerBound));
32523	NUM_RANDOM_TESTS
55297	tpv2.getOffsets(j);
54846	reopener,
56559	exclusion
27527	"\u005F\u0308\u0061\u0027\u2060",
34477	this.indexingChain
37682	testslopscoring
8644	SinkFilter()
28714	doc.add(newField("category",
62898	TestIndexFileDeleter
20852	this.defaultAnalyzer
48959	::=
10229	"\1\u0114\7\264\1\141\12\264\1\0\3\136\1\0\2\136"+
40587	ir.length
27999	"\u0031\u002C\u0027",
12330	uadd3
55955	now;
38567	now:
8387	correctly.\n"
54618	assertarrayequals
44897	U+029E:
7840	wascalled
34147	openbitset
24062	"A-10",
39400	tp.freqStream
52094	commitinternal
22413	num_bytes_double
16884	acquire
12731	uadc9
2543	maxpayloadfunction
10525	"\1\u01ad\6\136\12\u01ad\1\0\3\136\1\0\2\136\1\137"+
37601	//assertEquals("ordered
6827	(dataType)
44936	U+029F:
27011	"\u0001\u0308\u0061\u0027",
48861	testOffsetReader()
13132	uadbf
36041	bitset.set(0,
39696	applyAllDeletes;
23638	closing.get()
17170	yet).
60638	"\1\u0101\30\266\1\u0405\1\266\1\142\12\266\1\0\3\137"+
23614	applied");
48027	now.
54886	targetGen);
8482	noun
59268	"\1\0\1\32\1\0\14\32\1\0\4\32\1\0\2\32"+
43649	now,
15203	(fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))
45130	PRECEDED
7518	(lastVectorFieldName
28104	DOLLAR
33724	PhrasePositions[]
58815	UnicodeUtil.UNI_SUR_LOW_START);
6340	(filename:query)
26181	current.getArray();
54963	(searchingGen
56871	"\23\12\16\0\11\2\56\0\125\12\14\0\u026c\12\2\0\10\12\12\0"+
61621	uadb5
15479	(*.cfx)
18854	show
44647	U+029C:
25281	matchNone[i];
39732	applyAllDeletes)
51784	(readerPool.release(mergedReader))
32679	(encodedLen2
351	testMultiReaderDeletes()
32669	(encodedLen1
647	exception3");
61076	"\1\u034d\7\u02e2\1\u0550\22\u02e2\1\u034e\4\u02e2\1\u0551\5\u02e2"+
43974	U+1EAA:
25998	NaN.
44850	U+029D:
45	except
26122	NaN,
35110	setfilelength
40280	multitermdocs
7922	#setUseUnmap}),
34869	q.toString(f);
60278	"\32\266\1\142\11\266\1\u02b7\1\0\3\137\1\0\2\137"+
51711	merge.checkAborted(directory);
17898	assertEquals("med,med,F,F",
26544	indexedFieldNames)
9153	storedfieldswriter
26413	(inputChar
43976	U+1EAC:
11960	ZZ_LEXSTATE[zzLexicalState];
66356	postingsHash[i];
56852	"\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\10\12"+
35785	testcomplexexplanations
67254	TestIndexReaderReopen
44464	U+029A:
9895	"\1\114\1\25\1\0\1\25\4\0\3\25\1\0\1\25"+
13335	u2fa3
3849	charUtils;
29915	"\3\25\2\0\1\25\1\0\1\25\1\0\1\25\2\0"+
64887	fail(ioe.getMessage());
20073	release.</p>
56628	RuntimeException("onCommit
44054	U+1EAB:
67617	IndexReader.openIfChanged(r,
32236	assertTrue("IndexWriter
56130	ConstantScoreRangeQuery
12533	u2fb7
44594	U+029B:
46797	SWUNG
60211	"\4\u0271\2\0\1\u0271\15\0\1\u0271\6\0\12\u0271\1\u0272"+
16256	MACRO
2556	checkunequal
2568	occur
46155	U+0290:
62442	maxCoord
30993	files.add(createOutput("test.txt",
68131	Float.NEGATIVE_INFINITY);
5789	//new
6029	buf.toString().toCharArray();
38623	testDocsOutOfOrderJIRA140()
56846	"\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\2\2\0\3\12"+
20361	testcachedarraysallocation
65106	ARE
46157	U+0291:
41043	prefixes");
11430	"\32\264\1\141\4\264\1\u04c7\5\264\1\0\3\136\1\0"+
25857	differentiate
29129	mapper.setDocumentNumber(docNumber);
23576	(doIndexing
23722	reopening
23444	startDir.sizeInBytes();
49508	addClause(clauses,
43172	doc.add(newField(vals[i],
58172	readSnapshotsInfo(dir).entrySet())
64928	TermFreqVector[1];
54989	removewaitinglistener
65442	(ReverseOrdFieldSource)o;
59387	"\1\0\4\25\2\0\1\25\2\0\4\25\1\0\1\26"+
33	ASF
59823	"\1\137\4\0\2\137\150\0\1\u0101\7\266\1\u0107\22\266"+
67476	>=10
45888	U+1EE9:
8836	Assert.assertEquals(
60571	"\1\u03b0\1\u03b4\1\u0348\13\0\1\u02e1\161\0\1\u03b5\1\u03b6"+
58248	other.bytes;
50792	which,
38495	map.size()
37110	this.node
51406	(newSegment
59086	"\1\2\2\0\1\12\4\0\2\12\43\0\1\12\57\0"+
61433	"\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\6\u02e2\1\u0681"+
56372	quicksort_threshold
54351	STOP_WORDS_SET
45817	U+1EE8:
60586	"\1\u03d6\2\u03d5\2\u03d6\1\u03d5\1\u03d6\1\u03d5\1\u03d4\13\0"+
11129	"\2\0\1\u03de\15\0\1\u03de\6\0\12\u03e2\1\u0385\13\0"+
39025	assertEquals(cm.get(key),
27906	"\u0031\u003A\u0308\u0027",
52471	here's
2914	(InterruptedException
45886	U+1EE7:
34366	setWriteLockTimeout(long
19497	Acquisition
15339	nf.getDataType());
30749	Java4CharacterUtils();
52953	source[i++];
1433	hiterror
3028	limits.
21031	"disk
45815	U+1EE6:
57021	-Xbatch
36284	VERSION_PACKED,
60055	"\1\u0126\161\0\4\u01e3\2\0\1\u01e3\15\0\1\u01e3\6\0"+
64626	(newLength
58813	UnicodeUtil.UNI_SUR_HIGH_START);
56841	"\11\0\12\2\3\12\23\0\1\12\1\0\33\12\123\0\46\12\u015f\0"+
10071	"\235\0\2\76\12\0\1\76\210\0\2\76\6\0\1\76"+
2066	node
8258	weakidentitymap
45385	,"(o)",
36171	VERSION_PACKED;
59238	"\1\26\1\0\2\25\3\0\1\25\4\0\2\25\2\0"+
51173	mergeGen++;
62364	tough
45884	U+1EE5:
36639	arc.isLast()
18827	"æ¯",
62558	s.visitSubScorers(q,
57924	name.substring(1+i);
3850	CharacterBuffer
16111	++doc
726	through
32988	fieldstate
31526	FieldsWriter,
65216	validOutput(commonOutputPrefix);
54300	offsetHash.reinit();
46739	AMPERSAND
20627	secondaryDir
55210	(termDocs2.next())
10477	"\13\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
9904	"\20\0\1\115\1\0\1\115\3\0\1\66\1\0\1\115"+
45813	U+1EE4:
5634	Pentium4
8591	AttributeSource.State
25814	Iterator<SpanQuery>
60904	"\12\u04bf\1\u040f\13\0\1\u033c\160\0\1\u03a1\4\u04bf\2\0"+
14643	Comparator.
50547	conf.getMergeScheduler();
25038	outoforderonecomparatornonscoringcollector
37578	hits[0].score;
52854	EXPRESS
44210	U+0297:
23197	hits[0].score,
23119	LuceneTestCase.newIndexWriterConfig(random,
7633	"<EOF>
39170	MultipleTermPositions(reader,
28851	termsHash.consumer.addThread(this);
39309	breakout
40828	builderObject
25088	wq1);
49250	(buffer.hasAttribute(PositionIncrementAttribute.class))
35657	dense
45352	U+1EE3:
49618	discardEscapeChar(goop2.image),
64281	Type!");
26769	AcceptStatus.NO_AND_ADVANCE;
24589	sort.length;
5784	bitsets.
29400	nextindex
45821	U+1EEC:
46856	circumflex
7213	permitted
33768	not,
57282	nextSetBit(long
20383	not.
5627	norm
48824	MyAnalyzer
65600	segmentPrefix2
38210	bitsets,
65598	segmentPrefix1
43264	assertTrue(tdocs.skipTo(57));
64089	dir.openInput("bar");
46292	"â¹"
42359	tps[j].nextPosition();
24174	IndexReader.open(indexStore);
4018	datalen
39760	Map<String,Integer>
56244	not)
2578	getboost
39476	accelerate
42757	reusableToken.reinit(source.buffer(),
15983	org.apache.lucene.store.*;
45890	U+1EEB:
21822	#getFieldable}.
11560	"\14\0\1\u0325\161\0\4\u052b\2\0\1\u052b\15\0\1\u052b"+
32291	assertNotNull("Lock
68085	ints...
51923	startMergeInit
1889	here";
30644	"\1\0\3\25\1\0\1\52\1\0\2\25\4\0\3\25"+
41821	assertEquals(matches.size(),
44153	U+0299:
21131	Subsequent
22952	working:
10500	"\1\u019f\1\u0162\13\0\1\u0122\160\0\51\u0167\1\u01a0\6\u0167"+
30313	this.commitData
31807	this.infoStream
15307	nf.setDoubleValue(d);
66061	"blah",
22148	LICENSE.txt),
37488	here",
26448	(short)((short)0xFF
16142	scc.setScorer(s);
64299	termCountCutoff
16467	assertEquals("expected
18549	"Õ¯Õ¸Õ²Õ´Õ«Ö",
6161	getflags
45819	U+1EEA:
48323	possiblematchpayloads
486	note
12960	u403b
36414	IOUtils.closeWhileHandlingException(is);
53544	Query[searchables.length];
15456	not;
10252	"\7\0\1\56\2\0\1\57\4\0\1\73\14\0\1\61"+
2335	not:
26629	notvfieldnames
40312	<code>Scorer</code>
55459	freq);
67354	refreshReader(reader0,
59445	"\1\200\7\0\1\57\2\0\1\60\4\0\1\201\14\0"+
62627	working.
62409	testspans0
62413	testspans2
62410	testspans1
1261	assertEquals(numDocs1+numDocs2,
55473	assertEquals(true,
54312	blockpool
52525	assertEquals("field2:quick",
12158	u404f
11083	"\10\230\175\0\1\346\32\230\1\347\1\230\1\u03bf\10\230"+
58223	Offset
32094	this.allocator
9416	"\277\0\1\113\1\73\1\63\3\122\2\61\1\122\1\61\2\122\1\6"+
52662	testnomergepolicy
52186	startcommitmergedeletes
34172	placefirstpositions
39362	fastClear(doc);
6166	default_type
39260	buffer.append("~");
58159	#release(String)}.
9877	"\3\0\1\72\7\0\1\56\2\0\1\57\4\0\1\220"+
56423	tmp.setSegmentsPerTier(6);
25279	none
32439	(!dir.exists())
55591	assertFalse(dirReader.isCurrent());
16269	SpanOrQuery(s,
67365	refreshReader(reader1,
26032	OutOfOrderMultiComparatorScoringNoMaxScoreCollector
48883	map.entrySet())
21014	0.05;
24997	newfixedthreadpool
32654	originalComparison,
9016	lastTerm.equals(new
67320	MultiReader(pr,
3077	freq()
38422	IndexReader.getFieldNames
59551	"\1\25\3\0\1\25\177\0\2\67\6\0\1\67\153\0"+
4125	restore
37441	TestPhraseQuery
62511	nrOptRequired
41763	minPairWeightComparator,
66365	postingsHash[j];
2932	threadinterruptedexception
33950	groups.<br>
37794	searcher.getSimilarity();
16352	noop
20832	analyzerPerField);
37637	termAttr.toString();
20020	disableCoord
65865	bigIter=10;
28406	testCopy()
882	this.doFail
17717	BooleanQuery#getMaxClauseCount}
29709	"\1\0\1\25\17\0\1\25\3\0\1\25\5\0\2\25"+
51259	segmentInfos.add(info);
22747	FieldCache#getFloats(IndexReader,String)}.
2126	(address
53845	originalkeyset
29369	nextSlice()
49615	endOpen
53409	simplefsindexinput
16796	MultiReader(r1,
17550	singleHits.length);
1395	ntest
39929	getTermFreqVector(int
67875	GraphTokenizer(Reader
10825	"\4\u0212\2\0\1\u0212\15\0\1\u0212\6\0\12\u0212\175\0"+
44109	BAR
3578	segmentInfos
41932	limited
24854	writer.getReader().close();
64703	cp.register(new
22006	formatpostingsfieldswriter
21800	removeField(s)
24317	testStringSort()
27513	"\u005F\u0308\u00AD",
60678	"\1\u0422\15\0\1\u0422\6\0\2\u0423\1\u0422\2\u0423\2\u0422"+
52872	HOLDERS
5164	jjCheckNAdd(6);
64308	#setDocCountPercent
23181	"Using
53555	Searchables
32265	lockFile.createNewFile();
36952	nodeRefToAddressIn,
62220	hits.size())
404	writer.addDocument(createDocument("a"));
53743	CharArraySet(Version
7401	docState
43302	none.
34064	repeatingTerms()
11544	"\2\0\1\u051d\15\0\1\u051d\6\0\12\u051e\1\u0500\13\0"+
37359	writeHeader(DataOutput
54444	tohtml
26227	char,
59912	"\1\u016f\11\232\1\352\12\232\175\0\1\351\3\232\1\u016f"+
33943	B".
26234	char.
21522	newFSDirectory(_TestUtil.getTempDir("CFSManySubFiles"));
11274	"\3\230\1\347\12\230\175\0\1\346\30\230\1\u0455\1\230"+
41267	toString(nextResult.input)
41268	outputs.outputToString(nextResult.output));
66534	bytePool.buffers[upto
19289	chase
63054	"<FUZZY_SLOP>",
23764	defensive:
30089	org.apache.lucene.util.DoubleBarrelLRUCache;
8365	running\n"
21339	".big3",
25581	viToItemSets
10511	"\1\346\27\230\1\u016a\2\230\1\347\12\230\175\0\1\u01a3"+
45932	U+028B:
6957	INT_NEGATIVE_INFINITY
45348	U+1EDF:
4380	tq=NumericRangeQuery.newFloatRange(field,
55103	i<fields.size();
3692	(buffer[bufferLength-1]
31953	NumericUtils#longToPrefixCoded(long)},
30378	picked
46386	"â½"
35526	u=ones^b;
22612	CachingWrapperFilter
3955	chars
24923	fbjhd
9156	setfieldsstream
59612	"\1\36\3\355\1\36\1\355\1\142\12\143\1\66\1\137"+
63768	x87421
33390	TokenStream.
48718	assertTrue(comp.compare("3.0",
50860	info.docCount
16472	testsnapshotdeletionpolicy
55477	{"term1",
67594	r1.getSequentialSubReaders()[0];
19603	priorexception
19158	ØØ
20894	TokenStream,
44106	"êº"
28686	log(String
39456	settable
67865	normal-form!
27328	"\u003A\u0031\u002E\u2060",
28631	StringReader
45346	U+1EDD:
9171	(say
11852	zzReader.close();
45994	U+028D:
52615	Float.floatToIntBits(boost);
11769	UAX29URLEmailTokenizer.IDEOGRAPHIC;
23222	DefaultSimilarity()
63771	x87432
23822	(tracker.searcher
63770	x87431
6531	0.10,
18489	createComponents
37462	"four"));
38076	double",
63173	charterm
64061	expectedEx.getName());
26512	docToDelete);
33918	(pp2.rptInd
45253	U+1EDE:
67694	char[ArrayUtil.oversize(MIN_BUFFER_SIZE,
18110	scorer(IndexReader
45934	U+028C:
64860	BYTES_PER_POSTING;
50967	newSegmentName()
42914	((OffsetAttribute)
26740	<code>weight</code>.
40304	deletependingfiles
44834	"ï¼ª"
23884	ageSec;
45344	U+1EDB:
48342	doc(),
8545	TokenStreams
15240	fsDir.fileModified(name);
26691	Searchable.
2930	timeexceededexception
38512	byte[]{0,
63821	bits2int
54712	1.4/1.5).
46055	U+028F:
62599	q,searcher);
32963	int[size];
19426	matchnobits
9674	"\1\2\245\0\1\25\3\0\1\25\3\0\1\25\6\0"+
29994	StandardTokenizer.KATAKANA;
42951	TokenAttributeFactory)
57097	Included
67285	FSDir.
57079	long[0],
67759	cb.position()
45251	U+1EDC:
15257	FaultyIndexInput(IndexInput
22380	insertionSort(a,
55543	testAddCloseOpen()
4186	testRange(4);
54888	addWaitingListener(WaitingListener
46086	U+028E:
63689	x765421
15856	_X.sN/_X.fN
10413	"\1\230\3\u016a\1\230\1\u016a\1\347\12\230\175\0\1\346"+
23845	ageSec,
56220	Modifier.isFinal(mods)
24535	(full.search
42712	fragments
20690	TokenStream}
19543	closeWhileHandlingException(Closeable...
11864	scan
51692	!suppressExceptions;
5931	shifts[base])
38471	assertTrue(indexedFieldNames.contains("keyword2"));
45350	U+1EE1:
25086	wq2);
25965	adjustTop
54977	nrtmanagers
51704	merge.readerClones.set(i,
63691	x765431
63692	x765432
6365	revision
17448	accepted
28341	lchild;
20095	(Weight
15990	TimedThread
29653	"\1\120\1\120\1\120\1\125\1\123\17\0\1\114\u02c1\0\1\70\277\0"+
7729	\u0333
67761	((StringBuffer)
12653	u7c1f
45257	U+1EE2:
43580	testconstructsize
9241	bytesUsed="
31495	i=0;i<l.length;i++)
18566	á¨á°áá
6888	endpoint
14958	q2.add(t1);
61095	"\32\u02e2\1\u034e\1\u056c\11\u02e2\176\0\4\u056d\2\0\1\u056d"+
12252	u7c29
67650	testreferencecounting
39293	multipletermpositions
42842	Makes
18952	testTypes()
22657	Hints:
8627	filter.accept(source);
61543	u7c0b
2974	threadarray
21046	sim.encodeNormValue(2.0f));
61055	"\1\u053f\15\0\1\u053f\6\0\12\u053f\1\u04bb\13\0\1\u033c"+
63903	(ts.incrementToken())
62700	searcher.getIndexReader().getSequentialSubReaders();
16382	java.util.Map.Entry;
59196	"\3\ud15d\3\ud200\3\ud2a3\3\ud346\3\ud3e9\3\ud48c\3\ud52f\3\ud5d2"+
13054	u7c15
5469	jjstartnfa_2
5412	jjstartnfa_3
5458	jjstartnfa_1
2473	scorePayload(int
40854	fst.getArcCount()
25466	(:TODO:
35749	x55555555
39441	this.input.length();
4122	(see
14915	doubleparser
45255	U+1EE0:
22314	Comparator}
51682	mergeFinish(MergePolicy.OneMerge
7864	process
53776	(set
19983	chain
11450	"\4\u04da\2\0\1\u04da\15\0\1\u04da\6\0\1\u04db\2\u04dc"+
24010	"H"},//C,
15061	conf.getMergePolicy()).setUseCompoundFile(false);
11010	"\150\0\1\376\24\264\1\u037c\5\264\1\141\12\264\1\0"+
55020	maxBufferedDocs=2;
29798	"\2\0\1\25\17\0\1\25\3\0\1\25\5\0\2\25"+
24091	"5.0",
27847	"\u0061\u002C\u0308\r",
60664	"\1\u0413\2\u0417\2\u0413\1\u0417\1\u0413\1\u0417\1\u03a0\13\0"+
53926	ud801'
16788	fail("Tried
43352	bits.nextSetBit(0);
20354	one_byte
11387	"\175\0\4\u04aa\2\0\1\u04aa\15\0\1\u04aa\6\0\12\u04aa"+
235	AND
52678	Math.min(currentPayloadScore,
8562	this.sinks.add(new
20058	getClauses()
34007	>=0)
2760	exceptionDoc
54258	ref.copyChars(string);
60592	"\30\232\1\352\12\232\175\0\1\351\32\232\1\352\1\u03da"+
2550	testquery
32478	synchronized(lock)
66043	{"((+stop))",
37497	"marketing
16216	qtest
67147	ALL
55008	maxBufferedDocs=3;
49948	jj_3r_3
37688	commented
49947	jj_3r_2
4364	Math.max(upper-lower-1,
57053	AMD
66333	nextPerField.reset();
1302	null));
61307	"\12\u062e\1\u062f\13\0\1\u033c\160\0\1\u03a1\4\u062e\2\0"+
38731	fieldable2.iterator();
60607	"\1\351\1\u03e9\1\232\1\u03ea\27\232\1\352\12\232\175\0"+
7210	processing.
30391	failonrollback
67948	f/z:4
15761	this.delCount
8087	redundant
8934	#setEnum}
31275	_TestUtil.unzip(getDataFile("index."
56565	verifyCommitOrder(List<?
2470	API
10515	"\1\u01a7\13\230\1\347\12\230\175\0\1\u01a3\12\230\1\u01a8"+
15090	DocHelper.LAZY_FIELD_BINARY_KEY};
27724	"\u0061\u003A\u0308\u0061\u2060",
41270	IntsRefFSTEnum<?>
59052	SCORING_BOOLEAN_QUERY_REWRITE.rewrite(reader,
39553	utf16Result2.result[i];
17294	storedir
75	ANY
7829	testlazybroken
58146	(sid
55065	setMergeFactor(w.getConfig().getMergePolicy(),
56917	"\2\0\1\56\2\0\1\27\4\0\2\30\1\0\1\52"+
33738	(matches)
55908	WeakHashMap<Thread,T>();
66040	(qtxts[],
27447	"\u0030\u005F",
26453	charbuffer
50390	dropping
38856	sdp.snapshot("c3");
40113	(sis
41586	term)),
40949	term));
2156	max_value
25118	0.1);
65489	lastFiles
62930	"_0.cfs",
3511	total
45340	U+1ED7:
53367	chunkSize)
25728	checksanity
37015	doWriteTarget
59017	chunkSize,
32355	testlockfactory
50027	FileEntry();
28198	#wrap}
39862	newReader.deletionPolicy
45499	U+0280:
45927	VEND
8896	innerSet;
3916	incrementTokenOld();
32324	addDoc
52761	(!scoreEq)
40226	(smi
66007	t:two^10.0)",
1980	NodeHash<T>
8362	process)\n"
57530	indexToTerms.set(i,
548	Thread
20705	data,
45245	U+1ED6:
378	"doctor")));
40123	infos.getSegmentsFileName();
59158	"\3\u0fcd\3\u1070\3\u1113\3\u11b6\3\u1259\3\u12fc\3\u139f\3\u1442"+
38528	data1
23324	IndexSearcher(ir);
317	data.
26500	assertTrue(reader.maxDoc()
61151	"\1\u0597\30\u02e2\1\u034e\12\u02e2\175\0\1\u034d\21\u02e2\1\u0598"+
39472	lookup,
32913	perThread.utf8Results[1-encoderUpto].result;
3984	useOldAPI(Version
29656	"\1\75\1\45\1\44\10\75\2\63\5\61\2\54\5\61\1\6\10\37"+
45501	U+0281:
29625	"\63\0\41\133\21\0\1\132\4\0\1\132\2\0\12\132\1\0\1\132"+
39617	output.writeLong(size);
1892	data;
23966	data:
38639	fail("write
8084	chunkSize;
31868	lookup)
49305	getDateResolution(field);
27175	"\u3031\u3031"
33575	int[]{0,5,8},
45342	U+1ED9:
50237	runningMerges
26969	"\u0001\u002C",
31938	NUMERIC_UTILS_INT_PARSER=new
11860	discarded
16498	#initialize}.
15167	userName);
36652	bytesPer="
23449	.setMergeScheduler(new
36769	posWrite
43059	needed";
9979	"\3\0\1\210\2\0\1\211\12\0\1\212\17\0\1\213"+
31136	set.<br>
20702	data)
32787	binarydump
62661	newCounter(boolean
25062	sane
16734	fail("cloned
17122	readBufferSize;
3427	maxNumSegments
8108	nrBuffers
6130	ts.addAttribute(TypeAttribute.class)
45247	U+1ED8:
16830	clonedReader
53647	getstarts
43467	testSpanNearVersusPhrase()
48524	Occur.MUST/*must
47687	sans
51510	mergedReader.getSegmentInfo().setBufferedDeletesGen(minGen);
55470	byte[]{100}));
12656	u7e08
2106	same
6400	#correctOffset}
44284	"â¹"
38791	duplicated",
44848	U+0284:
20554	side,
49041	getFieldQueryWithQuotedMethod
45241	U+1ED2:
38858	(IndexCommit
52136	versioncomparator
39535	(empty
44519	"ê°"
58336	0xe;
28986	readBufferSize)
17139	readBufferSize,
11237	"\1\u0434\6\0\12\u0434\1\u0435\13\0\1\u02cf\160\0\1\u0332"+
66083	blo");
64960	DEBUG
57372	(int)(((numBits-1)>>>6)+1);
14805	buffer.append('(').append(locale).append(')');
12255	u7e12
2527	payloadatt
53050	chHalf
48523	visitSubScorers(null,
35630	~B[i+6]),
15890	<code>_1</code>
53202	sale
32653	System.getProperty("line.separator"),
66058	-(t:one
45334	U+1ED1:
26022	comparators[i].setNextReader(reader,
51398	flushControl.setFlushPendingNoWait("explicit
31756	System.err.println("refuses
1015	testExceptionDuringSync()
39442	CountingStream((IndexInput)
29211	clone.tvf
45619	U+0282:
29209	clone.tvd
65486	non-commit
52742	(score:"
58332	0xee
8969	Iterable<Term>
65534	(lastSegmentInfos
24752	indexStore);
45338	U+1ED5:
22617	value/document
37333	accept()
55904	GC'able,
45243	U+1ED4:
50708	message("now
18607	"Ø§ÙÙØ«Ø§Ø¦ÙÙ",
57395	intersect_count
9086	IndexCommit()
4831	getdefault
9848	"\1\0\1\174\2\0\1\175\3\0\1\53\2\0\1\54"+
55676	addDir
15046	happening
27483	"\u005F\u0001",
59490	"\1\320\1\321\1\322\1\323\1\324\1\325\1\326\1\327"+
8894	innerSet)
29207	clone.tvx
45336	U+1ED3:
41496	cycle);
5968	mutable
59829	"\1\u0145\3\0\1\137\4\0\2\137\150\0\1\u0101\11\266"+
60861	"\6\232\1\u049f\3\232\175\0\1\351\32\232\1\352\6\232"+
2596	TimeLimitingCollector}.
64381	(int)(value
43642	SearchTest.
38450	Field("tvposition","tvposition",
49385	termStr.startsWith("*"))
28274	this.tieBreakerMultiplier
29619	"\46\132\2\0\6\132\2\0\10\132\1\0\1\132\1\0\1\132\1\0"+
20181	optional.size()
13055	u7cb8
45707	U+0288:
60809	"\1\0\1\u0213\3\0\2\u01d0\4\0\1\u01d0\235\0\1\u0478"+
25130	testPrefixTerm()
60806	"\2\u0415\2\u0476\1\u0415\1\u0476\1\u0415\175\0\1\u03a1\4\u0474"+
56361	rotate(int
15451	says
61243	"\1\u05f0\15\0\1\u05f0\6\0\12\u05f0\1\u057e\175\0\4\u05f1"+
27234	[5.0]
5167	jjCheckNAddStates(16,
12654	u7cc2
62853	StandardTokenizerImpl(input);
53591	MultiSearcherCallableNoSort
53674	"four")),
27347	"\u002C\u0308\u0027",
45868	U+0289:
9818	"\2\162\3\0\1\25\3\0\1\25\3\0\2\25\5\0"+
62346	assertEquals(s(4,0,1),
21504	largeBuf[i]
35697	0xff
40122	ReaderCommit(SegmentInfos
58323	0xfc
58324	0xfd
58321	0xfe
6756	enumeration
61544	u7cae
44179	PALATAL
5080	jjCheckNAddStates(13,
3447	this.segments
65152	input.ints[x];
59135	"\2\u9b48\2\u9beb\2\u9c8e\2\u9d31\2\u9dd4\2\u9e77\2\u9f1a\2\u9fbd"+
59370	"\2\0\1\173\41\0\1\25\2\65\2\0\2\174\1\67"+
20945	altering
41963	nnow
68024	rightTerm
1105	writer.setInfoStream(new
11067	"\1\346\1\u03ac\31\230\1\347\12\230\175\0\1\346\1\u03ad"+
66839	tmpset
20053	add(BooleanClause
37822	say,
57209	flips
36150	BIT_TARGET_DELTA
45249	U+1EDA:
4262	upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;
28184	dollar
33282	-=10;
6962	enumerating
48207	(++firstIndex
67048	decorate
18656	"Ü",
9700	"\2\25\3\0\2\25\3\0\6\25\2\0\2\25\1\0"+
66341	(postingsArray.size
31209	TEXT_PLAIN_LENGTH
64038	bdo.writeVLong(l1);
52260	freqPointer
66246	allowMust,
34819	posIncrAtt;
59583	"\1\355\2\36\1\355\1\142\12\143\1\66\1\137\1\144"+
35465	>>>2
63197	getCachedFieldValues(FieldCache.DEFAULT,
45705	U+0287:
43385	>>>=
33677	startDiskUsage
57692	bits_per_value
53659	IndexSearcher's
12253	u7ccc
60749	"\1\351\32\232\1\352\5\232\1\u03e8\4\232\175\0\1\351"+
737	assertEquals(count,
16530	save
59917	"\2\0\1\177\3\0\1\54\2\0\1\55\3\0\1\200"+
50942	(docWriter.deleteTerms(terms))
37475	testMulipleTerms()
66728	<code>1</code>
52046	getrefcount
18976	urlList
5071	jjCheckNAddStates(10,
23752	currentTimeMillis
1119	MockIndexWriter4(Directory
55683	joinThreads()
1957	numericfield
38254	0x80000000000000L,
58687	RepeatingTokenStream
60078	"\150\0\1\u0101\11\266\1\u01ee\20\266\1\142\12\266\1\0"+
43359	docIdSetIterator)
49248	(buffer.hasAttribute(CharTermAttribute.class))
18150	docIdSetIterator,
52845	notice(s)
56634	expirationTimeSeconds;
15548	System.arraycopy(src.normGen,
10319	"\1\306\1\307\1\310\1\311\1\312\1\313\1\314\1\315"+
40804	prune1="
55907	hardRefs
10090	"\2\77\12\0\2\77\1\0\3\77\1\0\1\77\2\0"+
18146	docIdSetIterator;
26237	operate
10115	"\1\25\2\0\1\25\1\140\4\36\1\361\5\36\1\352"+
31793	matchVersion}.
8853	hooks
3149	(SegStart
16038	((i-1)%7
1027	((i-1)%2
43393	resizeBytes(int
38865	ic.getGeneration();
8102	chunkSize
6554	between
65186	(frontier.length
21340	".big4",
5490	switchto
38863	ic.getGeneration(),
1307	fail("should
2488	FieldInvertState
25848	(!clauses.equals(spanNearQuery.clauses))
54504	(currentSize
14911	floatparser
18821	whatever)
59899	"\1\u016f\1\232\1\u016f\1\232\1\u016f\1\232\3\u016f\1\232"+
23483	merging
26824	this.docWriter
14847	themselves
21516	CompoundFileReader(newDir,
63776	x87521
27051	"\r\u0308\u0030",
67325	test.openReader();
36294	outputs.read(getBytesReader(numBytes-1));
62199	while(terms.size()
35520	ones=u^c;
45330	U+1ECD:
48806	writer.newestSegment().name;
57343	or(OpenBitSet
50429	#release(SegmentReader)}
26182	hasArray()
57657	"Offset
20509	java.text.RuleBasedCollator}s
4291	termCountC);
17213	(CoreClosedListener
63779	x87532
49799	jj_rescan_token();
44134	"ê·"
63778	x87531
36574	lastFrozenNode
18873	"cats"});
25268	"*t?1",
26489	TestSegmentReader
45237	U+1ECE:
3810	split
20505	<strong>WARNING:</strong>
61021	"\1\351\32\232\1\352\1\u0526\11\232\175\0\1\351\2\232"+
53824	map.matchVersion.onOrAfter(Version.LUCENE_31)
7087	textual
23171	searcher.doc(hits[1].doc,
28594	(charsRead
45332	U+1ECF:
37330	List,
51336	survive
44103	"ê¸"
48794	Field.TermVector.WITH_POSITIONS_OFFSETS;
62313	qB.setBoost(9f);
33922	k=0;
55861	addandget
10795	"\3\264\1\u02b3\6\264\1\0\3\136\1\0\2\136\1\137"+
22959	createRandomList(30);
28944	IntFieldSource.class)
59510	"\3\137\2\0\1\77\1\137\4\0\2\137\2\0\1\70"+
58184	snapshot(String
10788	"\11\264\1\u02ac\13\264\1\u02ad\4\264\1\141\12\264\1\0"+
31666	binary_compressed_length
44211	STRETCHED
44658	"â½"
22957	createRandomList(30),
10206	"\2\136\150\0\1\376\2\264\4\u0103\3\264\2\u0103\1\u010c"+
50369	drop)
22637	FieldCacheRangeFilter(String
18811	"à½§",
36765	Non-static:
44325	"êº"
57386	63);
15100	assertTrue("doc
52831	granted,
50046	os.writeLong(0);
39310	termarray
35800	pr.add(IndexReader.open(rd1,true));
22281	shrink(float[][]
24909	ostrokefirst
45541	U+027D:
4126	BooleanQuery.setMaxClauseCount(3*255*2
66213	((float)maxOverlap
49470	((jj_ntk==-1)?jj_ntk():jj_ntk)
10547	"\3\136\3\0\1\136\4\0\2\136\227\0\1\u01c7\163\0"+
42147	bInt)
44755	U+1ECA:
65994	+(b:\"dd
19189	Ø¾Ø¿
7899	transient
41495	cycle="
30483	TreeSet<TermVectorEntry>(comparator);
53894	assertTrue(instance.fill(buffer,reader));
34549	getprefixterm
35368	this.bitSet;
40201	tenum.topReader)
33522	test4to2()
60965	"\4\0\2\137\150\0\1\u0101\1\266\1\u010e\30\266\1\142"+
39767	newReaders
45539	U+027C:
23139	ramDirectory2,
15412	simulated
30926	doSearch(numResults);
28693	typetokenfilter
44806	U+1ECB:
63783	x87542
63785	x87543
5440	x280200000000l
11505	"\1\u0503\1\u0502\2\u0501\2\u0502\1\u0501\1\u0502\1\u0501\1\u0500"+
28604	GetImage()
37437	checkgold
63782	x87541
23130	ramDirectory2;
30380	tpcs[idx]
27543	"\u00AD\u0308\r",
1050	dir.setFailOnCreateOutput(false);
42135	bInts
22161	Bytes
16831	origReader.clone();
12559	u4045
2832	MULTI_THREAD_SLACK;
25271	matchAll.length;
23129	ramDirectory1,
13361	u4031
45235	U+1ECC:
5505	begincolumn
7056	actualEnum
39861	newReader)
16881	assertEquals(refCount,
23187	ramDirectory1;
39778	newReader;
17113	drops
25285	matchOneDocPrefix[i].length;
20595	specifically
5173	jjMoveNfa_0(int
28105	SIGN
26195	current.clear();
53976	bytes(byte[]
30952	testMaxScore()
56678	((SECONDS
63502	0x8765431,
36879	queue.remove(queue.size()-1);
6037	buf.toString();
65264	"unsigned"
34620	similarity.scorePayload(doc,
7728	\u0222
25090	wq3);
43125	SortField("id",
63161	(t1-t0)
52021	changecount
43567	bv2;
57713	writer.deleteDocuments(searchTerm);
63503	0x8765432,
8463	fslockfactory
27461	"\u0030\u0308\u0061\u2060",
49806	ParseException(token,
49211	OR_OPERATOR)
26641	random.nextBoolean());
65484	ArrayList<CommitPoint>();
64345	query/filter
49140	OR_OPERATOR.
23294	ndocs
31758	override");
65177	frontier[pos1].inputCount++;
747	i=0;i<NUM_THREADS;i++)
14959	q2.add(t2);
49016	OR_OPERATOR;
34130	ps.println();
36042	assertScoreEquals(Query
26712	org.apache.lucene.index.IndexReader#document(int)
43071	#close()}.
53868	cpAt3,
50145	#close()},
45545	U+027F:
51853	pendingCommitSet
48783	token.startOffset
10631	"\4\0\2\136\151\0\32\u0206\1\0\12\u0206\11\0\1\u0207"+
39	(the
26728	org.apache.lucene.index.IndexReader#document(int,
34347	#DEFAULT_TERM_INDEX_INTERVAL
57436	andnot
6614	dates
9611	"\2\u7d5b\2\u7dfe\2\u7ea1\2\u7f44\2\u7fe7\2\u808a\2\u812d\2\u81d0"+
58326	6-byte
758	(doFail
33076	Iterator<Class<?
37889	WeakIdentityMap<K,V>(new
21141	keyed
21520	subs:
15202	FieldSelectorResult.SIZE;
438	indexwriterconfig
63685	x765321
61545	u7d51
57348	intersects(OpenBitSet
63504	0x87654321
45543	U+027E:
45239	U+1ED0:
25632	subs)
51687	runningMerges.remove(merge);
17179	(tis
2088	hash(nodeIn);
36085	filteredquery's
37080	for(Map.Entry<Integer,Integer>
43348	builder.addInt(sortedInts[i]);
18703	"ÙÛÚ©Û
21462	e1.seek(1910);
42622	it.advance(docId)
31725	triggers
32935	termsHashPerField.shrinkHash(maxNumPostings);
37890	HashMap<IdentityWeakReference,V>());
4604	0.0);
67032	ramdirindex
19945	-6761513279741915432L;
12254	u7d6f
734	"aaa"));
43711	TestASCIIFoldingFilter
42364	assertByteArrayEquals(payloadData,
26484	outputbytenum
48385	collector.setScorer(this);
57937	filenamefilter
10189	"\3\0\1\136\4\0\2\136\150\0\1\376\1\u0107\2\u0103"+
19420	other.negate)
20299	acceptDocsOutOfOrder)
28458	randomunicodestring
44149	TOPBAR
31356	"aaa")),
40285	write_lock_name
19054	("random.text.with.urls.txt"),
3210	acceptDocsOutOfOrder,
31596	random.nextBoolean()
3213	acceptDocsOutOfOrder;
32904	perThread.utf8Results[encoderUpto];
1216	testAddDocsNonAbortingException()
34781	differnce
3095	curScores
12655	u7d65
13056	u7d5b
22549	toString
17719	TopTermsScoringBooleanQueryRewrite(int
50157	Thread.sleep()),
15839	filesSet.add(IndexFileNames.fileNameFromGeneration(name,
5765	efficient
25588	List<Object>
93	org.apache.lucene.store.Directory;
66914	valid(p);
52849	SOFTWARE
25905	recent
25556	cacheEntry
25243	"\\\\7*"},
30289	rollbackCalled
44099	"ê¶"
14928	fieldcomparator
19473	lookups
48713	assertTrue(comp.compare("1.9",
55663	addDir;
68026	leftOffset
49939	endopen
18883	String[]{"O'Reilly"});
49314	date,
56616	numDelete;
49852	rangecollator
34807	"triplemulti",
31865	lookup;
16977	charUtils.codePointAt(buffer,
53589	dfMap.put(allTermsArray[i],
51461	Carefully
54559	createSparseRandomArray(40000),
33070	restoreState()
60324	"\1\57\2\0\1\60\4\0\1\171\14\0\1\62\4\0"+
24885	assertEquals(expected.get(hitIDX),
50159	<b>clear</b>
622	EXC:
40022	(SegmentInfos.readCurrentVersion(directory)
52930	Character.MIN_SUPPLEMENTARY_CODE_POINT
41175	ir.ints[charIDX]
67166	TermVectorOffsetInfo[existingOffsets.length
28172	joiner
36187	packed;
56771	IndexSearcher(rwReader);
51251	"addIndexes(IndexReader...)");
45063	U+0270:
8092	clones
57604	estimatepagebits
10717	"\3\u01c8\1\u01cc\5\0\2\u01c8\4\0\1\u01c8\151\0\34\u01ca"+
36478	target.node
50936	Deletes
16687	cloned
3248	this.other
19308	testvarioustextsa
40780	fst.outputs.add(output,
25907	state".
45066	U+0271:
22918	spanpositioncheckquery
31433	"ð",
52116	getflushcount
16865	testCloneWithDeletes()
49842	multitermrewritemethod
3890	e.g.,
48307	allowedslop
19031	recognize
45141	U+0272:
16693	delete",
8654	urldetect
15834	Careful
2164	oldtable
3852	CharacterUtils.newCharacterBuffer(IO_BUFFER_SIZE);
20721	ArrayIndexOutOfBoundsException(index);
15035	ensure
10249	"\2\326\2\u0118\1\326\1\u0118\1\326\1\0\1\136\1\151"+
15903	(this.dir
54098	stpf01
42600	result.getDocIdSet();
62680	this.subSearcher
54625	ComplexExplanation(boolean
14975	testIncreasingSloppiness3WithHoles()
29721	"\1\0\2\25\1\0\2\25\1\0\5\25\1\0\5\25"+
36762	((node.depth
54099	stpf0,
3036	CachingCollector
25047	outofordermulticomparatorscoringnomaxscorecollector
48048	noop,
64695	terms.size())
15912	s.append("->").append(docStoreSegment);
22078	utility
45143	U+0273:
40852	pruned)");
11800	packed)
63849	internally.
42462	testThreadSafety()
41570	w.w.setInfoStream(VERBOSE
66617	triggerOn(SorePoint.TEST);
53525	scoreDocs[i]
9469	packed,
41642	s.generate(out,
9093	delete()
32340	makeLock(String
53381	file.read(b,
50317	IndexWriterConfig#setReaderTermsIndexDivisor}
29201	j++){
51066	(pendingMerges.contains(merge)
66174	TopScoreDocCollector
40929	randomAcceptedWord(fst,
52344	(multipleCommits
7159	splitintrange
67628	chnages
1467	org.apache.lucene.search.TermQuery;
28305	sub);
54544	createRandomArray(int
19919	dotestrank
27384	"\u0027\u0041",
36887	(arcAndState2.chain.length
34206	APPEND,
53000	0x3FF);
41135	//testRandomWords(100,
1109	expected");
6703	<code>n
44989	"á¸¹"
53097	TRAIL_SURROGATE_MIN_VALUE
43683	testsearch
5322	jjnewStateCnt;
40120	userData;
67728	charAt(int
38569	IndexWriter.isLocked(dir));
42653	analyzer).setSimilarity(similarity));
52303	!term.text().equals("p1"))
21763	org.apache.lucene.search.Searcher;
9570	"\1\uac83\1\uad26\1\uadc9\1\uae6c\1\uaf0f\1\uafb2\1\ub055\1\ub0f8"+
37815	matchalldocsweight
53317	out.writeVLong(output.second);
49375	WildcardQuery");
21220	provided.
14812	provided,
4129	constant
1906	(NumericField)
1557	clone;
54012	clone:
15384	worthwhile
22573	clone.
38285	assertIntRangeSplit(-5000,
11256	"\12\u0446\1\u0445\13\0\1\u0122\160\0\1\u0163\4\u0444\2\0"+
42843	clone,
5210	jjCanMove_0(int
5137	jjnewStateCnt)
58795	assertEquals(b.length,
60266	"\1\352\1\u02ab\11\232\175\0\1\351\32\232\1\352\1\232"+
39103	generalized
19056	randomTextWithURLs.length()
10559	"\1\162\3\0\2\136\2\0\1\67\1\0\1\50\1\0"+
38914	tvposition
64267	FieldScoreQuery(String
43039	afterClose()
39889	IndexWriter.getReader()
65722	lastfiles
40653	FSTTester<Long>(random,
60299	"\3\0\1\137\4\0\2\137\150\0\1\u0101\24\266\1\u02cd"+
59481	"\1\67\1\0\1\25\2\0\1\25\1\141\10\36\1\274"+
37678	holes
1840	entering
25201	assertMatches(IndexSearcher
3847	addAttribute(OffsetAttribute.class);
37277	<code>makeStopSet()</code>
57734	midDiskUsage
11771	UAX29URLEmailTokenizer.HIRAGANA;
54451	KeywordMarkerFilter(final
55394	Random(base+range+seed);
10066	"\2\0\3\66\7\0\1\66\1\0\2\66\7\0\3\66"+
45749	STRIKETHROUGH
15385	testlazyperformance
54483	state);
10679	"\3\0\1\136\4\0\2\136\150\0\1\376\1\264\1\u0241"+
42333	testPayloadsEncoding()
37020	(ptr
41699	checkStopNodes(fst2,
29624	"\13\0\5\133\5\0\6\133\1\0\1\132\15\0\1\132\20\0\15\132"+
11210	"\1\376\12\264\1\u0114\17\264\1\141\12\264\1\0\3\136"+
20055	TooManyClauses();
7260	holds
13301	u19fd
18325	same",
37000	//System.out.println("node
53336	singletonshare
26790	StopAnalyzer(TEST_VERSION_CURRENT);
61782	u19f3
10232	"\1\264\2\u0103\2\264\2\u0103\1\264\1\u0103\1\264\6\u0103"+
3129	clear
36672	!arc.isLast();
38245	0x7ffffffffffffL,
56121	search.search(bq,
926	clean
16860	cloneSegmentReader2);
29732	"\2\25\3\0\1\25\4\0\3\25\4\0\1\25\1\0"+
52997	12));
10893	"\1\376\32\264\1\141\5\264\1\u0312\4\264\1\0\3\136"+
10722	"\1\u01c8\6\0\12\u01c8\175\0\1\u0264\32\u020f\1\u0265\12\u020f"+
6432	BrokenCloseable
59533	"\1\25\2\0\1\25\4\0\2\66\11\0\1\25\11\0"+
60478	"\1\352\12\232\175\0\1\351\15\232\1\u035f\14\232\1\352"+
4669	IndexWriterConfig.WRITE_LOCK_TIMEOUT);
20477	dateTimeField
35674	ntzTable[upper>>>24]
35961	hits.length());
35663	(lower!=0)
21341	".big5",
21273	seek(end-2)",
57084	(non-zero
4719	assertEquals(SnapshotDeletionPolicy.class,
21204	org.apache.lucene.store.MockDirectoryWrapper.Failure;
9997	"\2\0\1\25\1\150\32\36\1\141\12\330\1\0\1\136"+
45104	U+0274:
36454	int[ArrayUtil.oversize(nodeIn.numArcs,
15902	s.append(cfs);
38759	enum1.term()
32581	IndexableBinaryStringTools.decode(encoded,
5243	"RangeIn",
61196	"\1\0\2\u0585\2\0\1\u0585\1\0\1\u0585\14\0\1\u033c"+
29030	copying
9795	"\2\136\2\0\1\67\1\0\1\50\1\0\1\70\2\0"+
31412	dirName);
27600	"\u0300\u0027",
30051	u19c0
37074	!negDelta;
45312	U+0275:
2225	setIndexWriter(IndexWriter
11296	"\5\264\1\u0463\4\264\1\0\3\136\1\0\2\136\1\137"+
15002	depth
19177	ØØ
15181	lazy",
12325	uaaa4
41432	testSingleString()
10322	"\2\0\1\341\12\0\1\342\17\0\1\343\21\0\1\344"+
59811	"\2\137\1\140\1\u0143\1\u0144\1\u0145\3\0\1\137\4\0"+
57547	indexToTerms.getMutable();
58029	state:
5374	state;
40806	prune2="
66627	RuntimeException(pt.toString());
33387	trolling
67963	RemoveATokens(t2);
50083	fileentry
7075	sub-range
34696	standardfilter
67950	hole)
52115	getdoccount
21747	threadedindexingandsearchingtestcase
45371	U+0276:
5283	state.
21977	state,
4188	testRange(2);
2489	state)
2111	(pos
54777	lockExists();
23889	sec,
12041	u19b6
41398	(args[idx].equals("-pack"))
24779	collectorMax,
54955	lastRefreshGen
21769	<i>not</i>
24758	testSimultaneousSorts()
30251	terminfo
40702	FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],
66407	numPostings-1);
63388	0x8421,
17119	TermInfosReader
31127	NO_MORE_DOCS
60289	"\4\0\2\137\150\0\1\u0101\11\266\1\u02c4\20\266\1\142"+
57970	testnegativescores
58713	(end-start));
53482	Dummy-Searcher
10353	"\17\264\1\141\12\264\1\u014f\3\136\1\0\2\136\1\137"+
33849	(pp2
52326	populateDocs(random,
31100	doctest
15301	nf.setFloatValue(f);
68057	newstringreader
15119	assertTrue(field.stringValue()
22305	right[offsetRight
44725	"Äª"
5382	state2)
9488	"\0\u1460\0\u1503\0\u15a6\0\u1649\0\u16ec\0\u178f\0\u1832\0\u01e9"+
38341	x000000100000
15526	Constants.LUCENE_MAIN_VERSION;
63390	0x8431,
34645	payloadBoost
96	static
9676	"\2\25\6\0\2\25\13\0\1\26\2\25\11\0\1\25"+
23357	keywords.length;
54836	NRTManagers,
23608	sizable
48248	inSameDoc;
64063	vInt"));
58241	text.length(),
40807	prune2);
63391	0x8432,
59371	"\1\0\1\65\2\0\1\25\1\174\32\25\1\0\12\65"+
62513	(optionalScorers.size()
33033	assertTrue("Hash
55637	w2r1.close();
32220	raised,
42208	att.setType("hallo");
44979	U+026B:
41858	byte[300];
54482	delegee.computeNorm(fieldName,
7831	MockFilter
55083	docs.putAll(th.docs);
35797	rdOut
1976	states
5464	xdfffffffffffffffl
49484	Error("Missing
32193	raised:
3893	(char)
6773	secs
35399	syntactic
42226	att.startOffset());
40245	((TermPositions)
6778	Opteron64
46100	U+1EFF:
17	license
30133	seg,
16220	#qtest
49988	holder
25358	quIck
44745	U+026A:
38612	lastModified
22858	getupperval
14994	seed
26374	codingCase.initialShift)
10293	"\1\u0140\1\u0141\3\0\1\136\4\0\2\136\2\0\1\47"+
2943	doctext
6667	seen
1988	NodeHash(FST<T>
7025	seek
28408	numIters;
56581	commit.getTimestamp();
49715	(token.kind
20739	target.length
5571	testByteToFloat()
59060	collectTerms(reader,
15490	diagnostics;
55219	assertEquals(termEnum1.docFreq(),
38604	assertTrue(IndexReader.indexExists(dir));
54060	"Time"
15500	Constants.LUCENE_MAIN_VERSION.
59675	"\17\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
40457	AttributeImpl}s.
22101	(chars
67874	addAttribute(PositionLengthAttribute.class);
19570	synonym
15976	isdigit
9460	"\1\12\40\0\1\12\4\0\1\12\6\0\1\12\4\0"+
26226	padding
29401	numleft
42753	type]);
60828	"\1\u0428\12\u02e2\1\u034e\12\u02e2\175\0\1\u0486\5\u02e2\1\u0488"+
58705	maxTF);
3205	@param
31383	sees
66016	t:one^10.0)^3.0)
66328	postingsArray.size);
30140	seg;
4422	QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange("test1",
9026	output.writeString(term.field);
10017	"\4\0\3\25\1\0\1\25\6\0\1\25\1\0\2\25"+
56435	segs
48691	isdirectory
58401	cas.size());
56708	1:0),
25178	term.append("tal");
34657	result.setMatch(nonPayloadExpl.getValue()
64904	(mtr[i].isAlive()
63993	"SKULL
67928	1:0);
32702	decoded.limit(),
9741	"\1\65\1\0\1\66\3\0\1\65\20\0\1\67\1\0"+
8550	TeeSinkTokenFilter.
63042	"<OR>",
18000	testrangefilterid
53884	fail("length
14818	(SortField)o;
24811	RandomFilter(Random
26837	docWriter.getCharBlock();
34625	#getSpanScore()}
3139	curDocs[upto]
36993	writeNode:
37587	//System.out.println("palindrome:
50886	malformed.
25701	datatypes
27185	"\u3031\u0308\u002C",
14665	Represents
62986	testdeleteleftoverfiles
31752	System.err.println("This
19078	testJapanese()
5381	state1,
54714	(static)
43871	/output\[outputPos\+\+\]
27320	"\u003A\u0061\u002C",
55797	r.nextInt(limit);
19701	.nextDocs
39908	(openReadOnly)
10864	"\32\230\1\347\1\u02f9\11\230\175\0\1\346\32\230\1\347"+
23622	(pushed)
56496	top().doc();
27264	"\u0041\u0308\u0061\u2060",
57158	(startWord
38582	???
52833	person
67970	atLeast(1000));
62537	optionalScorers,
11612	"\1\346\1\u0550\31\230\1\347\12\230\175\0\1\376\7\264"+
35635	ntzTable
51805	buffer.append("**");
12650	u7a36
62557	optionalScorers)
12249	u7a40
42237	assertSame(KeywordAttributeImpl.class,
55490	Index.NOT_ANALYZED,
11233	"\1\u01ca\235\0\1\u042f\212\0\12\u0430\11\0\1\u020c\231\0"+
13051	u7a2c
48396	Repeat
30297	this.failOnCommit
41036	brute-force
4865	getdeclaredfields
24416	bottomValue;
9292	16384;
60955	"\32\232\1\352\6\232\1\u04e2\3\232\175\0\1\351\25\232"+
35511	twosA,twosB,foursA,foursB,eights;
51955	setPayloadProcessorProvider(PayloadProcessorProvider
60613	"\175\0\1\351\32\232\1\352\11\232\1\u03f0\175\0\1\351"+
57607	fieldstrs
66896	output2.equals(pair.output2);
16887	reader.getSequentialSubReaders();
27653	"\u0061\u2060\u0308\u0030",
26463	finalshift
53914	assertEquals("\ud801",
57255	unionCount(OpenBitSet
5859	Packed64(int
63523	wordShift;
42203	testTypeAttribute()
67625	switches
61540	u7a22
22683	newByteRange(field,
52840	sell
56025	positions/payloads.
26320	capacity
33585	https://issues.apache.org/jira/browse/LUCENE-3971")
11046	"\175\0\4\u039c\2\0\1\u039c\15\0\1\u039c\6\0\12\u039c"+
50290	(RAM,
23302	setdefaultfieldsortscoring
16136	7.285586f,
57115	(bits[i]
17194	switched
9614	"\2\u8ca3\2\u8d46\2\u8de9\2\u8e8c\2\u8f2f\2\u8fd2\2\u9075\2\u9118"+
22472	"key=value,key=value"}
5759	#bits
33892	placeFirstPositions();
50247	ReaderPool();
65776	setSize)
54842	periodic
65131	(doCompile)
15720	Next
62438	optionalScorers;
66796	queryTerms
63136	testSavedTerms(r,
17857	pad(maxId);
26003	OutOfOrderOneComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>
63956	TestAnalyzer4();
61617	uab29
34442	getMergedSegmentWarmer()
61346	"\12\u02e2\175\0\1\u034d\1\u02e2\1\u0428\30\u02e2\1\u034e\12\u02e2"+
21680	send
67699	growTermBuffer(length);
24734	testEmptyStringVsNullStringSort()
56623	doDeletes(List<?
67986	minposlength
66583	tokentext
9942	"\1\257\1\260\1\261\1\262\1\263\1\136\12\264\1\0"+
23793	sent
50943	"deleteDocuments(Term..)");
56486	queue.add(spans);
44984	U+026D:
65367	replacelast
30974	testgetallresults
7563	bailed
30767	seq,
50160	status
41838	0..500
66329	(!postingsCompacted)
13128	uab33
7913	limitation
59522	"\2\0\1\77\1\137\4\0\2\137\151\0\4\336\2\0"+
25236	matchOneDocPrefix[][]
24036	"-44",
38771	assertFalse(c.equals(r2.getIndexCommit()));
8241	clone.unsetBuffers();
541	org.apache.lucene.search.PhraseQuery;
44340	,"Dz",
44981	U+026C:
12326	uab47
2380	SpanTermQuery(new
28701	enablepositionincrements
40380	actualtsdcclass
89	org.apache.lucene.analysis.MockAnalyzer;
32151	slice[upto-1]
17267	termvectorsreader
8320	readbytes
32862	termsHashPerField.numPostings;
9113	getsegmentsfilename
9201	ArrayUtil.mergeSort(termsArray);
15051	org.apache.lucene.store.AlreadyClosedException;
45061	U+026F:
40967	pairs.get(pos).input,
57455	Thread[random.nextInt(4)];
14900	string_index
40965	pairs.get(pos).input)
62674	serialcounter
17439	termfreqs
20881	awrapper
18101	innerWeight.sumOfSquaredWeights();
50098	<code>create</code>
50488	#setUseCompoundFile(boolean)
57261	b.wlen-a.wlen);
7405	TermsHashConsumerPerField
57251	BitUtil.pop_intersect(a.bits,
22486	buffer.append(attClass.getName()).append('#');
12727	uab3d
34093	tord)
58943	docs_and_freqs
34114	tord,
46063	U+1EF6:
11676	ZZ_ERROR_MSG[]
44617	U+0260:
5856	bitsPerValue
11802	2812)
39040	cm.entrySet().clear();
42370	payloadData[numTerms]);
46096	U+1EF7:
7295	start)
33470	maxversion
37210	start'
58814	0x3FFL)
36988	changedCount++;
46094	U+1EF5:
48224	start1
52593	*<p>A
19838	doTestExactScore
54608	testgrowth
2475	start,
52928	0x3FFL;
42282	java.io.UnsupportedEncodingException;
4785	writer.getConfig().getSimilarity().getClass());
34079	tord;
31811	IndexNotFoundException(dir.toString());
23921	IllegalStateException("another
32898	start2
52710	document.add(newField(FIELD_ID,
11047	"\1\u039d\175\0\4\u039e\2\0\1\u039e\15\0\1\u039e\6\0"+
67334	index2_refreshed
34880	testposincrementanalyzer
44619	U+0261:
62923	"_2_2.f"
51566	start:
3939	start;
29886	"\6\0\1\34\56\0\1\34\3\0\1\34\2\0\1\34"+
54253	String.compareTo()
52286	org.apache.lucene.index.PayloadProcessorProvider.PayloadProcessor;
11509	"\1\u02cf\242\0\1\u02cf\214\0\2\u04e0\1\0\2\u04e0\2\0"+
35962	string>,D
35967	string>,C
27077	"\n\u0308\u0001",
22346	Comparator}.
48339	nrScorers;
48530	Occur
42042	oneReverseMul
67929	startOff="
57844	java.util.concurrent.Future;
26432	char[getEncodedLength(input)];
60969	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\3\266"+
35336	assertFalse(stopWordsSet.contains(text));
22262	shrink(byte[]
55567	newDoc
46098	U+1EF9:
32150	slice[upto-2]
17412	(i>0)
35575	(i<n)
6612	(e.g.,
3927	won't
66118	("f1".equals(fieldName))
40953	seekResult
38459	assertTrue(allFieldNames.contains("unindexed2"));
66782	0x45aaf665
7480	starts
42705	org.apache.lucene.analysis.tokenattributes.FlagsAttribute;
38509	tdocs.close();
43085	successful
31764	FSDirectory.class.getPackage().getName()
46065	U+1EF8:
32149	slice[upto-3]
27815	"\u0061\u0027\u2060\u0308\u0030",
65506	IndexFileDeleter(Directory
32975	TermVectorsPostingsArray;
24356	buff.append(v[j]
9232	queries.length;
29185	(storePositions)
52642	NoMergePolicy.class.getDeclaredConstructors();
51451	flushRamDocs()
56459	buffer.append("spanOr([");
29613	"\40\0\27\132\5\133\4\0\65\142\12\143\1\0\35\143\2\0\1\133"+
8485	TeeSinkTokenFilter
1304	Document());
53792	source.map));
6752	text-only
61506	"\1\1\63\0\1\1\u01ea\0";
59140	"\2\ub4c0\2\ub563\2\ub606\2\ub6a9\2\ub74c\2\ub7ef\2\ub892\2\ub935"+
41958	verifybyoutput
63965	testanalyzer3
63964	testanalyzer2
37011	(arc.isFinal())
63963	testanalyzer1
63966	testanalyzer4
36700	arc.target);
46811	1]);
35299	setfreqoutput
20610	this.matchVersion
38228	~val;
30812	1]))
11534	"\4\u0515\2\0\1\u0515\15\0\1\u0515\6\0\12\u0515\1\u04cf"+
21752	getopendeletedfiles
25717	EXPECTED
54020	origNorm="
49952	jj_la1_init_1
24939	breaker
47927	commit().
57806	commit(),
41511	(!allIDs.contains(s))
50222	commit())
49951	jj_la1_init_0
18956	testWikiURLs()
31441	(char
23021	manifested
41479	fstEnum.seekFloor(new
39337	OpenBitSetDISI(DocIdSetIterator
23087	IndexReader.open(indexStoreB,
14995	random.nextLong();
33784	getSimilarity().sloppyFreq(matchLength);
56731	.setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));
11284	"\1\136\4\0\2\136\150\0\1\376\32\264\1\141\10\264"+
49170	(fieldName
31560	(long
12096	u18d5
50399	drop(info);
44790	U+0268:
4868	testclone
65576	readFrom
53871	"Abc\ud801\udc1c";
20508	Since
24916	setsort
41923	thresholds
12497	u18cb
49202	c.setOccur(BooleanClause.Occur.MUST);
35812	(numFields=0,
55793	docUpto=0;docUpto<10;docUpto++)
19841	sd[]
54879	applyAllDeletes));
25938	pre-fill
51385	mergeScheduler.merge
26823	docWriter)
34835	offsetAtt.endOffset();
12898	u18c1
16407	(Entry<String,
25788	<code>inOrder</code>
57893	readOffset
67957	posIncAtt.getPositionIncrement());
33686	dir.getMaxUsedSizeInBytes();
66014	two^4");
57629	<code>addOffCorrectMapping()</code>
18581	"áááá ",
37249	addresserror
61541	u7ac5
20737	targetOffset)
28042	"\u0031\u002E\u2060\u0308\u0041",
23061	writerB.addDocument(lDoc);
20741	targetOffset,
6894	getPrecisionStep()
30049	u18f2
16495	log(size)
45013	U+1EFA:
6789	important.</p>
52141	origname
44677	U+0266:
52098	anydeletions
38514	addDocumentWithDifferentFields(writer);
12651	u7ad9
40536	Releases
38927	getbinarylength
43532	assertEquals(1,bv.count());
50788	(dangerous,
10007	"\1\0\1\25\2\0\1\25\1\331\32\155\1\136\12\267"+
59590	"\1\364\5\36\1\355\17\36\1\142\12\143\1\66\1\137"+
30455	stiA.base
3237	threshold,
3221	threshold.
6695	<code>bitsPerValue/precisionStep</code>
56716	dir.listAll().length;
21499	testLargeWrites()
13052	u7acf
8957	(termCompare(term))
12250	u7ae3
59316	"\1\51\1\0\1\52\2\0\1\53\3\0\1\54\2\0"+
55247	ff2.get(i);
54880	decRef(IndexSearcher
58460	assertTrue(set.contains(Integer.valueOf(1)));
23396	testBothDeletes()
50384	deleter.checkpoint
22980	testquicksort
26821	docWriter;
55176	tv1[i]);
42739	String#getChars(int,
57059	<td>1.03</td>
15332	assertTrue("got
41085	cmo2.count));
46329	"â¹"
3533	").append(1
19763	termpositions
59743	"\15\0\1\u011f\6\0\12\u011f\1\337\175\0\4\u0120\2\0"+
45920	U+1EFC:
40575	charIdx
60258	"\1\352\12\232\175\0\1\351\7\232\1\u029f\1\232\1\u02a0"+
23267	multiSearcher.createDocFrequencyMap(termsSet);
53881	newCharacterBuffer.getLength());
64843	getnonexistterm
19874	byte[0]);
31790	iwc;
66511	etc).
62526	allReq.addAll(optionalScorers);
44675	U+0265:
36182	lastFrozenNode;
45027	U+1EFB:
65987	mfqp.parse("b:\"foo
26796	"starts-with
61015	"\4\u0522\2\0\1\u0522\15\0\1\u0522\6\0\2\u0523\1\u0522"+
31805	iwc,
15521	this.docStoreOffset
22826	getUpperVal()
33607	//System.out.println("mapping:
10196	"\150\0\1\376\1\264\1\u0103\1\u0109\2\u0103\2\264\1\u0103"+
16878	reader2.isDeleted(doc));
3962	compat
44592	U+0262:
42870	clearNoTermBuffer()
54204	initSize,
29878	"\3\0\1\25\6\0\2\25\5\0\1\25\1\0\1\25"+
20305	NoOpCollector(false),
40703	outputs.newPair((long)
46067	U+1EFE:
13299	u18b7
12029	zz_buffersize
61780	u18ad
55549	previous),
22987	org.apache.lucene.analysis.KeywordAnalyzer;
48134	fragment:
4841	default_max_buffered_docs
28545	RULE,
56145	assertEquals("min,min,F,F,c",
3719	acronym
1639	f,getText(),Store.NO,Index.NOT_ANALYZED_NO_NORMS));
60086	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\7\266"+
59378	"\1\205\3\0\1\54\2\0\1\55\3\0\1\56\7\0"+
24599	sd[j
19999	TooManyClauses()
19641	this.useAdvance
21513	newDir
63927	testlowercasetokenizerbwcompat
32416	storePathname
65139	replaceLast
8623	SinkTokenStream(AttributeSource
15557	diagnostics)
21342	".big6",
28703	testtypefilterwhitelist
67751	csq).buffer(),
38708	assertEquals("Norm
22761	NumericUtils.sortableIntToFloat(
27905	"\u0031\u003A\u0027",
30358	assertSame(commitData,
27676	"\u0061\u2060\u0308\u0061\u0027",
30791	fill(CharacterBuffer
11867	yyreset(java.io.Reader
67843	newwriterconfig
60213	"\2\u0219\1\u0275\3\u0219\3\0\1\u0219\4\0\2\u0219\2\0"+
25372	testComposition()
45892	U+1EED:
27881	"\u0061\u002C\u0308\u0031\u003A",
63061	"\"]\"",
49317	Calendar.getInstance(locale);
38736	itField2.next();
35367	getBitSet()
63764	x87321
2445	BooleanClause
18582	"ááááµ",
9695	"\1\25\2\0\3\25\1\0\1\25\6\0\1\25\117\0"+
26253	CodingCase(int
10737	"\4\u0270\2\0\1\u0270\15\0\1\u0270\6\0\12\u0270\1\u01d5"+
49101	setFuzzyPrefixLength(int
45823	U+1EEE:
56460	buffer.append("])");
9515	"\0\u95a1\0\u9644\0\u96e7\0\u978a\0\u982d\0\u98d0\0\u9973\0\u9a16"+
35757	numwords
62196	System.out.println("iter="
41751	PositiveIntOutputs.getSingleton(true)
7347	silent
51545	etc.:
20037	specifying
31336	\u0000
43667	query.toString("contents"));
45894	U+1EEF:
17269	compoundfilereader
23342	TestIndexWriterDelete
30676	"\1\52\1\0\2\25\1\0\1\54\10\0\1\25\24\0"+
43037	afterClose();
55695	dirs[k]
39850	SegmentInfos.readCurrentVersion(directory);
31417	WhitespaceAnalyzer(TEST_VERSION_CURRENT))
67118	src.setReplaceInvalidAcronym(replaceInvalidAcronym);
46419	"â½"
31691	WhitespaceAnalyzer(TEST_VERSION_CURRENT),
38189	endpoints
55821	Field("f",
58070	long[1];
22259	grow(byte[]
17111	etc.)
11969	zzBufferL[zzCurrentPosL++];
23710	etc.,
42587	upto+len,
24958	parselong
47613	wynn
21457	a2.readByte();
35194	getmaxtermfrequency
57955	(scores[i]
23993	"B-10",
28451	0).toString());
9588	"\2\u0833\2\u08d6\2\u0979\2\u0a1c\2\u0abf\2\u0b62\2\u0c05\2\u0ca8"+
12251	u7b86
31224	assertTrue("for
64915	init(IndexReader
32282	somewhere
11659	"\1\347\12\230\176\0\4\u0567\2\0\1\u0567\15\0\1\u0567"+
39418	tp.doc()
61224	"\175\0\1\u034d\26\u02e2\1\u05dc\3\u02e2\1\u034e\12\u02e2\175\0"+
55689	addDir.close();
49724	jj_kind
35642	>>=
51280	(IndexFileNames.isDocStoreFile(file))
5833	>>>
26064	trackDocScores
18213	scoredocsinorder
12498	u196e
6969	ordering
25070	dataintval
67281	reopen/recreate
12726	uaa9a
52325	dirs[i]
20159	result.addDetail(sumExpl);
21650	(justWildcardsLeft)
32072	maintenance
13053	u7b72
10853	"\1\u02ec\5\230\1\347\12\230\175\0\1\346\1\230\1\u02ed"+
55005	bigFieldSize=10;
57920	java.io.FilenameFilter#accept(java.io.File,
58591	retainall
61086	"\7\u02e2\1\u055f\1\u02e2\1\u0560\20\u02e2\1\u034e\11\u02e2\1\u055b"+
27350	"\u002C\u005F",
34012	>=0
61542	u7b68
29658	"\2\110\2\111\2\110\1\111\3\24\1\16\2\24\12\64\1\74\1\41"+
61117	"\175\0\4\u057d\2\0\1\u057d\15\0\1\u057d\6\0\12\u057d"+
9602	"\2\u4f83\2\u5026\2\u50c9\2\u516c\2\u520f\2\u52b2\2\u5355\2\u53f8"+
4348	testRandomTrieAndClassicRangeQuery(8);
24189	getRandomNumber(final
35123	MinPayloadFunction(),
54770	(lock
28892	byteblockallocator
11058	"\14\0\1\u0122\160\0\1\346\1\230\1\u03a4\30\230\1\347"+
61068	"\1\u02e1\160\0\1\u0349\4\u054a\2\0\1\u054a\15\0\1\u054a"+
58761	nextInt(end-start);
61616	uaa86
35309	TestStopAnalyzer
31198	"30.cfs",
61431	"\1\u034d\7\u02e2\1\u067e\22\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
59478	"\1\54\2\0\1\55\3\0\1\56\7\0\1\57\2\0"+
35026	Rewrites
43867	$desc;
23724	prune
13127	uaa90
4902	java.text.DateFormat;
17017	TVPositionInfo(positions[i],
44030	U+0259:
47115	ligature
12652	u7b7c
28971	FORMAT_UTF8_LENGTH_IN_BYTES
32918	(lastTermBytes[prefix]
58858	utf16a.result[i]);
54112	"+i+":
4879	max_buf_docs
35166	this.numOverlap
62753	TopDocs[subSearchers.length];
11540	"\2\u051b\1\u051a\5\u051b\1\u051c\14\0\1\u02cf\161\0\4\u051d"+
40020	writeLock);
233	success
35869	query.setRewriteMethod(new
26613	assertTrue(results
64195	4-mod;
23673	delete's
30295	failOnRollback)
51339	Directory.sync
7680	static_lexer_error
34613	positions.getPayload(payload,
35213	super(skipInterval,
6320	bQuery.add(q,
30288	failOnRollback;
44196	CEDILLA
6740	<em>long/double</em>
29128	seekTvx(docNumber);
24841	_TestUtil.randomSimpleString(random,
16451	testSnapshotRelease()
7933	Accessing
29386	numLeft);
56312	mergeSort(lo,
66833	termFreqs[i++]
59736	"\7\0\1\66\2\0\1\25\1\136\32\157\13\137\1\0"+
54227	key);
48623	position--;
51989	BOTH
16032	MockIndexWriter(directory,
61041	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\26\266"+
61781	u1950
62528	allReq));
36475	lastArc)
19306	david
21106	unlock()
37512	woo",
5074	while(i
25388	keywordAttr
67955	pendingPosInc
30050	u1959
19630	TermPositions
422	version
12899	u1964
23172	indexSearcher1.close();
44846	U+025F:
29033	rawDocs(int[]
26082	trackMaxScore,
13300	u195a
36783	ForwardBytesReader(bytes,
58452	set.retainAll(new
38972	(char)random.nextInt(127);
32362	lockname
64233	research
45825	U+1EF0:
63080	.:lib/junit-4.10.jar:./build/classes/test:./build/classes/test-framework:./build/classes/java
67082	SeeksCountingStream(IndexInput
12097	u1978
61325	"\14\0\1\u02e1\161\0\4\u063b\2\0\1\u063b\15\0\1\u063b"+
44461	U+025E:
31306	oldName="
39587	termBytesLength);
19615	newdecoder
31753	this");
55244	ff2.size());
7612	Parameters
42544	NumericTokenStream().setLongValue(lvalue);
36676	in.skip(1);
57611	estsize
53335	TwoLongs((Long)
44993	"á¸½"
50769	verbose()
67092	"synchronized"
6456	IOUtils.closeWhileHandlingException(t,
44459	U+025D:
38113	2.3E25f,
16412	sdp;
12047	u1900
45896	U+1EF1:
57257	(a.wlen
49073	tme.getMessage());
23002	lDoc.add(newField("fulltext",
56178	testrangequeryrandcollating
31435	"ð",
44457	U+025C:
37180	posarcsstart
57896	readOffset;
53304	(output.equals(inc))
10654	"\4\u021b\2\0\1\u021b\15\0\1\u021b\6\0\12\u021b\1\u021c"+
60506	"\1\u0101\25\266\1\u0107\4\266\1\142\12\266\1\0\3\137"+
46059	U+1EF2:
12324	uaa01
652	ThreadLocal<Thread>();
67703	buffer.getChars(0,
50259	event):
3604	origin)
36222	arcIdx
65012	suffixes
31890	parseFloat(String
58103	tp.position
60261	"\1\u02a3\1\u02a4\22\232\1\352\12\232\175\0\1\351\7\232"+
49840	or_operator
6153	testtoken
44455	U+025B:
27188	"\u3031\u0030",
65703	pre-increment
46092	U+1EF3:
42132	aInts
35243	Arrays.fill(lastSkipProxPointer,
66426	doNextCall
53391	FSDirectory.setReadChunkSize
4359	lower=(int)(random.nextDouble()*noDocs
54850	NRTManager
65503	Thread.holdsLock(writer);
55720	iwr1
44032	U+025A:
51877	directory.makeLock(WRITE_LOCK_NAME).isLocked();
55725	iwr2
48363	super(weight);
15676	filename
46061	U+1EF4:
54433	buffer.append("</ul>\n");
20775	traversing
13234	ueeb1
5511	getendcolumn
9013	lastBytes
17779	#getTotalNumberOfTerms
19539	close(Closeable...
45860	U+01DA:
18170	score(Collector
4174	doc=searcher.doc(sd[0].doc);
35650	nextSetBit().
25458	sanityChecker
67550	Field("fieldb",
41640	SyntheticData();
62652	max);
26235	CharBuffers
38915	tvoffset
43133	topDocs.scoreDocs.length;
56534	<li>reqScorer
61723	ueea7
11024	"\1\u038b\260\0\12\u038c\11\0\1\u020c\231\0\1\u0268\175\0"+
37129	writablefst
15302	answer
11975	possibly
10729	"\1\u0216\5\0\2\u0214\4\0\1\u0214\152\0\4\u026e\2\0"+
45791	U+01DB:
61693	udb8d
32180	IndexWriter)",
27773	"\u0061\u0027\u0061\u2060"
15430	GEN
16150	scores.length;
27826	"\u0061\u0027\u2060\u0061\u003A",
60073	"\6\137\12\u0144\1\0\3\137\1\0\2\137\1\140\3\137"+
13204	udb97
34499	sb.append("termIndexInterval=").append(termIndexInterval).append("\n");
10730	"\1\u026e\15\0\1\u026e\6\0\12\u026e\176\0\32\u026f\1\0"+
9426	"\1\116\5\117\26\51\4\30\1\104\2\105\4\127\1\105\2\127\3\76"+
32002	getValue();
49184	upperTerm
51790	mergeGen
37802	getValue(),
616	docs);
67065	this.term2));
22299	offsetRight,
35837	testemptyindexwithvectors
45862	U+01DC:
6144	"#positionIncrement",
17365	aDocs.add(""+i);
58765	0xdc00
14617	Feb
15688	normGen[fieldNumber]
2669	add(docText[i%docText.length],
38160	min<=upper
12432	ueec5
44443	U+01DD:
65070	CompiledNode();
31122	{@value
64951	pre-sorted
63864	builder.append("\ud801\udc1c");
19675	useAdvance
26881	generateJavaUnicodeWordBreakTest.pl
40871	minLong
12833	ueebb
43188	priority.get(id);
10793	"\1\136\4\0\2\136\150\0\1\376\11\264\1\u02b2\20\264"+
60331	"\21\0\1\114\17\0\1\25\1\67\1\65\1\116\3\0"+
39439	this.input.getFilePointer();
1688	gettext
56997	interchange
32005	estimated
41245	(termEnum.term()
52865	PARTY
27760	"\u0061\u0027\u002C",
32819	charbuf
43941	U+01DE:
10076	"\1\25\2\0\1\25\2\0\1\25\4\0\2\77\11\0"+
8668	finalstate
34138	ps.println("
62927	"_0_2.del");
33447	finishcommit
7617	column
11483	"\1\u04a0\175\0\4\u04f2\2\0\1\u04f2\15\0\1\u04f2\6\0"+
37698	="id";
16717	testReopenWriteableToReadOnly()
26904	[\uFF10-\uFF19]
44015	U+01DF:
50224	filesToCommit;
38706	norms2.length);
33683	Import
30736	u2aa6
38885	r.decRef();
1700	tostring
57943	SimpleScorer(Weight
12124	u2aa9
14880	(Short)
26390	codingCase.middleShift))
37448	"second
21219	sequential
640	possible
24632	bq.setMinimumNumberShouldMatch(1);
56327	quickSort(left
46667	,")",
20794	inc);
27394	"\u0027\u005F",
65301	System.arraycopy(arcs,
52858	MERCHANTABILITY,
66972	_TestUtil.getTempDir("RAMDirIndex");
37631	analyzer.reusableTokenStream("ignore",
293	which
11999	NUMERIC_TYPE;
6042	t.setTermBuffer(content);
2250	org.apache.lucene.search.BooleanClause;
34022	ArrayList<PhrasePositions>
42931	payload);
19754	petered
29280	tvfposition
26419	codingCase.middleShift);
27050	"\r\u0030",
35569	fours=fours^foursA;
41735	r[1].input);
32577	decodedLen
2718	"+e,
17750	ConstantScoreAutoRewrite()
7288	pq.pop();
22011	defaultskiplistwriter
28447	assertEquals("a",
52305	DeletePayloadProcessor
45789	U+01D9:
1468	org.apache.lucene.search.TopDocs;
43706	unsupported_msg
24672	(String[])
39831	i=0;i<subReaders.length;i++)
21279	i=start;
6576	rewrite
52777	expectedids
26341	inputLength,
37169	emptyoutputbytes
30117	Term(t.field(),
26287	inputLength)
23133	ramDirectory1
23134	ramDirectory2
49872	getlowercaseexpandedterms
7675	increment
29600	"\3\143\1\142\3\143\2\142\7\143\3\142\4\143\15\142\14\143\1\142"+
59121	"\2\u53f8\2\u549b\2\u553e\2\u55e1\2\u5684\2\u5727\2\u57ca\2\u586d"+
26365	inputLength;
47998	set.set(docId-docBase);
65970	t:\"foo
50377	pooled),
17896	max",
48184	subSpans[i].next())
67238	out.write(0);
51894	this("User-specified",
9011	lastTerm
33542	kkk,
23613	fail("delete's
5800	bitPos++)
14683	explicitly
7426	finishdocument
5962	space
39787	(newReader
7698	errorcolumn
11158	"\4\u03f7\2\0\1\u03f7\15\0\1\u03f7\6\0\1\u03f8\2\u03f9"+
42398	s.getBytes("UTF-8");
9917	"\1\34\5\0\1\25\2\0\1\25\2\0\1\25\4\0"+
18642	"ÜÜÜ©ÜÜ¦ÜÜÜ",
55449	reader.core.fieldInfos.fieldInfo(i);
19748	t=1;t<endMinus1;t++)
62327	q2},
22926	spanpaycheck
17299	storessegment
52632	assertNull(mp.findForcedMerges(null,
35531	twosA,
15245	fsDir.deleteFile(name);
36521	doFixedArray");
37979	l=-100000L;
61328	"\2\0\1\u063b\15\0\1\u063b\6\0\12\u063c\1\u0600\13\0"+
60573	"\1\u03bf\1\u03c0\1\u03c1\1\u03c2\1\u03c3\1\u03c4\1\u03c5\1\u03c6"+
7850	java.nio.channels.FileChannel.MapMode;
48963	"-"]
21173	TermsFilter,
4204	testOneMatchQuery()
11753	etc.).
25461	sanityChecker.check(cacheEntries);
18068	getFilter()
37319	makeStopSet(matchVersion,
64192	Direct16(DataInput
15351	text_field_1_key
33817	careful:
5823	getter.
66746	<p>Sorting
3416	single
3140	curScores[upto]
52764	System.out.println(s.explain(query,
10557	"\1\313\1\314\1\315\1\316\1\317\1\320\1\321\1\322"+
4412	backwards",
47928	CommitFailException
8520	inserted
1414	mockindexwriter2
39189	Explanation(idf,
28549	AFTER_CLASS
1421	mockindexwriter3
1440	mockindexwriter4
32691	binaryDump(original2,
49588	RANGEIN_GOOP:
54308	testbytesrefhash
8906	contract
9327	"\2\0\12\134\1\0\7\132\1\0\7\132\1\0\3\133\1\0\10\132"+
36999	writer.writeVInt(bytesPerArc);
19924	float_field
64971	9.8M
16329	optb
18917	embedded
36301	nodeRefCount
57450	d.setNoDeleteOpenFile(false);
40128	infos.getGeneration();
24797	i<fdocs.length;
9692	"\2\25\1\0\3\25\1\0\1\25\2\0\4\25\1\0"+
66792	cache.getBytes(reader,
32228	WriterThread
36553	opto
38624	i=0;i<11;i++)
12802	udafe
18968	luceneResourcesWikiPage
57585	compareField(term,
1690	getterm
19283	testalphanumericsa
35841	TermRangeQuery("content",
67840	testSingleMergeableTooLargeSegment()
1642	Long.toString(random.nextLong(),Character.MAX_RADIX);
4620	getters
340	while
6994	(minBound
49225	clauses.add(newBooleanClause(q,
61341	"\175\0\1\u034d\12\u02e2\1\u0643\17\u02e2\1\u034e\12\u02e2\175\0"+
10657	"\15\0\1\u021d\6\0\12\u021f\1\u021e\13\0\1\u0122\160\0"+
2308	//writer.infoStream
22463	AttributeImpl's
20232	sub-bools
34912	SpanFirstQuery(swq,
43295	MapFieldSelector(List<String>
65020	shareMaxTailLength
66033	+more",
25837	newClauses[i]
58824	s1.getBytes("UTF-8");
67200	getfrequency
13203	udaf4
17881	last",
61692	udaea
3330	advance
57763	LUCENE-2095:
42747	patterns:
67830	testAllSegmentsSmall()
59321	"\1\25\2\0\1\25\1\141\17\36\1\151\12\36\1\142"+
37486	Version.LUCENE_24,
4918	org.apache.lucene.search.WildcardQuery;
44582	U+01E4:
63915	BMP->SMP
36108	FST
67429	modifier.deleteDocument(2);
50755	IndexWriters.
22728	Integer.MIN_VALUE;
38895	Thread.sleep(100);
2360	spans
24365	order",
35422	IDToken(ofKind,
28512	binaryFldCompressedTest
39613	System.arraycopy(termBytes,
25901	delete()}
51700	merge.readerClones.get(i).close();
62412	spanb
44125	U+01E3:
10949	"\1\347\12\230\175\0\1\346\4\230\1\u0348\25\230\1\347"+
16710	reader2));
18249	albino
40905	enum's
42693	t.start();
62411	spana
48347	minimumNrMatchers
6476	(Constants.JRE_IS_MINIMUM_JAVA7)
49541	CARAT:
32208	IndexWriters)
40627	FSA
10713	"\1\u0207\157\0\4\u025e\2\0\1\u025e\15\0\1\u025e\6\0"+
4914	org.apache.lucene.search.MultiPhraseQuery;
55239	Collections.sort(ff1,
22653	upperPoint
59871	"\1\u0126\226\0\1\u0154\7\0\1\u016c\1\u016d\1\u016e\162\0"+
57748	max="
44586	U+01E6:
21288	testSingleFile()
39032	(iter2.hasNext())
62354	spanB
27508	"\u005F\u0308\u0030",
62352	spanA
67308	assertEquals(k+"_"+j,
20472	newField(TEXT_FIELD,
34402	absolute
33379	sval
8399	args[1];
62374	span)
14824	(other.comparatorSource
26451	middleShift);
23157	document.getFields().size()
9067	builds
44584	U+01E5:
26274	(original.hasArray())
10985	"\150\0\1\376\1\u036e\31\264\1\141\12\264\1\0\3\136"+
18880	you're,
8633	setFinalState(AttributeSource.State
31384	.del?
13235	uef54
20643	assertTrue(fileExtensions.contains(ext));
55318	i=start;i<end;i++)
67890	BTSTC:
28934	org.apache.lucene.search.function.DocValues#toString(int)
46628	TORTOISE
49261	(numTokens
31088	TF="
43576	if(bv.get(i)!=compare.get(i))
1097	OOME
44867	U+01E8:
15427	CHECK_DIR
58669	dir.createOutput("foo.txt").close();
34862	getSuperFieldQuery(String
62888	Hosts,
15762	getDocStoreOffset()
43703	JustCompileSpanScorer(Spans
18984	line.trim();
56273	QuickSort
63185	termindexstatus
34192	subsequently
17776	getTotalNumberOfTerms()
18863	"-",
33026	src.addAttribute(TypeAttribute.class);
66729	last).
3948	normalized
10724	"\1\u0267\6\0\12\u0267\1\u0268\242\0\1\u0269\174\0\46\u0212"+
35532	twosB)
36908	spare
44588	U+01E7:
60821	"\6\0\12\u0482\1\u03ac\13\0\1\u02e1\226\0\1\u0348\13\0"+
51232	Merges
29406	PrefixQuery(Term
29868	"\7\0\1\102\4\0\2\102\3\0\2\102\1\0\1\102"+
57645	getLastCumulativeDiff()
16803	origSegmentReader.deleteDocument(10);
40480	desirable
35566	twosB,
18315	assertEquals("found
5991	readmasks
62316	"sally"));
5138	(startsAt
22290	same.
57875	newBuffer(byte[]
67471	(refreshed
63227	this.lastModified
39882	doOpenIfChanged();
62287	"sally")),
42970	termbufferlength
31236	assertEquals("incorrectly
21934	#getFilePointer()
32524	MAX_RANDOM_BINARY_LENGTH
30739	u2c42
62768	Merge:
25347	set.add("lucenefox");
32248	l.obtain());
54932	writer.getGeneration();
43025	accidental
41235	same:
29303	currentposition
50472	Date()
28552	static_initializer
10778	"\2\136\150\0\1\376\21\264\1\u029f\10\264\1\141\12\264"+
25153	query6.add(query5,
38062	-1.0,
24340	last);
18590	Ø¹Ù
18059	QueryWrapperFilter(query))},
21525	d.createOutput("file."
54548	Arrays.sort(a2);
20071	normalize,
14624	order).
30960	sd[0].score,
7022	Integer.MIN_VALUE)
33365	KeepAllDeletionPolicy
44895	U+01E9:
50328	flush(false,
6391	prohibited
33028	typeAtt.setType("TestType");
50332	maybeMerge();
37414	goldFreqs
27597	"\u0300\u0308\u003A",
12401	udb08
4201	Integer.MIN_VALUE,
16954	encodenormvalue
30775	<code>&gt;=
65610	DecRef
56042	valid(inc);
23914	over-decRef
15295	NumericField("nf",
6113	bar"));
5526	zero
61524	u6ff2
11952	zzAttrL
42269	assertcopyisequal
14960	q1.setSlop(i);
5651	(i==Integer.MAX_VALUE)
18111	scoreDocsInOrder,
7060	(termCompare(currentTerm))
7667	curChar),
50678	matters
11134	"\34\u01ca\12\u03e3\1\0\2\u01ca\1\u020d\3\u01ca\1\u01cc\1\0"+
10906	"\150\0\1\376\25\264\1\u031d\4\264\1\141\12\264\1\0"+
65602	fileName.startsWith(segmentPrefix1)
20515	<ol>
11045	"\4\u039b\2\0\1\u039b\15\0\1\u039b\6\0\12\u039b\1\u0339"+
58363	dance
6044	StringBuilder("a");
49402	16^3,
57775	s)));
12528	u2c88
27199	"\u3031\u0300",
25273	qp.parse(qtxt);
39857	ensureOpen
15387	getproperty
3711	normalizes
1793	indexStream.writeInt(FORMAT_CURRENT);
12127	u2c92
16042	threads);
38627	gotException
51397	threads):
50457	reader.numDeletedDocs();
12929	u2c7e
34198	IndexWriter}:
37748	checkHits(ScoreDoc[]
25530	Collection
51889	MaxFieldLength(String
40511	IndexWriter})
3375	IndexWriter},
33091	assertNotSame("FlagsAttribute
13330	u2c74
40194	seek(TermEnum
31727	IndexWriter}.
54101	concatenated!
48019	isOpen
37574	matter.
53585	j<aggregatedDfs.length;
21297	CompoundFileWriter(dir,
7788	Exception(docs[i]+"
66491	UnicodeUtil.UNI_SUR_HIGH_START
4266	upper=a;
10256	"\1\137\3\136\2\0\1\76\1\136\4\0\2\136\2\0"+
61811	u2c6a
63010	TERM
19652	this.value
19405	(DocIdSet)
21615	End
10655	"\175\0\4\u021d\2\0\1\u021d\15\0\1\u021d\6\0\12\u021d"+
30393	preparecommitdata
51487	merge.readers.get(i);
12433	uef68
48166	spanNearQuery.getClauses();
15868	ArrayList<String>(filesSet);
11056	"\1\u03a3\6\0\12\u03a3\1\u02d8\13\0\1\u0122\242\0\1\u0122"+
62307	q5);
50061	os);
7037	contrast
43943	U+01E0:
52860	FOR
61724	uef4a
21200	os's
15566	SegmentInfos.FORMAT_LOCKLESS)
18925	FOO
57816	reader3.numDocs());
211	sure
26486	inputchar
1552	(SegmentTermEnum)
60133	"\2\154\1\140\1\u0143\1\u0144\1\u0145\2\0\1\77\1\137"+
31423	addNoProxDoc(writer);
51537	dropSegment);
12834	uef5e
46108	,"(y)",
24475	nonexisting
19087	"<KATAKANA>"
3968	input.read(oldIoBuffer);
34572	super(term);
42655	Field(FIELD,
58113	TwoPhaseCommit}s.
43850	">:utf8",
4672	assertEquals(-1,
34837	(text.equals("triplemulti"))
35906	assertFalse("a
55240	Collections.sort(ff2,
29029	startDocID.
1743	Original
13035	u6ffc
66305	2*streamCount;
8977	Iterator<Term>
57843	testpreparecommitnochanges
6012	t.getFlags());
29036	startDocID,
24113	((i%2)==1
43196	testelevationcomparator
57467	d.fileExists(fileName));
8796	After}
61155	"\175\0\1\u034d\1\u0489\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
40834	builder.add(pair.input,
11896	zzMarkedPos-zzStartRead;
44089	U+01E2:
9380	"\3\0\3\132\12\134\44\132\122\0\3\133\1\0\25\133\4\132\1\133"+
32331	Map<String,Lock>
41399	(args[idx].startsWith("-"))
14598	resumes
50852	(still
42481	assertEquals(terms.term().text,
1315	Token("foo",
9974	"\1\60\14\0\1\61\4\0\1\62\2\0\1\63\41\0"+
48334	<code>ConjunctionScorer</code>.
2144	target
44017	U+01E1:
21627	Assume
42669	super.merge(merge);
53735	AbstractSet<Object>
17291	addcoreclosedlistener
45520	ROTUNDA
20025	disables
10596	"\13\230\1\347\12\230\231\0\12\u01e6\10\0\1\u0167\1\u0168"+
31825	w.message("Upgrading
8922	iscacheable
27544	"\u00AD\n",
32270	lockFile.delete();
45164	U+01CA:
66578	hashpos
50836	mergeScheduler.merge(this);
4555	collision
38198	0xffffffffffffffefL,0xffffffffffffffefL,
42255	assertEquals("Clone
28367	heapremoveroot
58355	utf8sortedasutf16comparator
4236	doc.add(new
145	i++)
53903	assertFalse(instance.fill(buffer,reader));
47813	tortoise
65919	MultiFieldQueryParser.parse(TEST_VERSION_CURRENT,
31146	current</code>
65116	(UnCompiledNode<T>)
54422	getDetails();
29708	"\1\0\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
9991	"\12\156\1\0\1\136\1\151\1\136\1\0\2\136\1\137"+
9936	"\1\175\3\0\1\53\2\0\1\54\3\0\1\176\7\0"+
19705	i++;
45168	U+01CB:
35868	checkBooleanTerms(Searcher
15757	BitVector(dir,
36947	ords
30427	KeywordMarkerFilter(tokenizer,
26700	org.apache.lucene.index.IndexReader#maxDoc()
33039	typeAtt.type());
59842	"\1\211\3\0\1\212\2\0\1\213\12\0\1\214\17\0"+
17856	maxIP
3126	maxDocsToCache
12045	u2ba4
16225	qtest(optB(q),
56588	last="
33264	iterator.next();
17863	maxId
53998	I'm
24294	descendTesters
24806	density;
105	LuceneTestCase
37868	href="http://cxf.apache.org/">Apache
57619	insertions)
60414	"\4\0\2\137\150\0\1\u0101\32\266\1\142\7\266\1\u032a"+
62854	StandardTokenizerImpl31(input);
53196	whatsoever
24823	density)
28808	skipBuffer[level].writeVLong(childPointer);
39183	reader.norms(field));
24812	density,
17379	assertTrue(aDocs.contains(r.document(sd.doc).get("id")));
5515	eofloop
21566	searchTerm.field();
5326	Get
61810	u2bc7
723	Confirm
56376	ByteSliceWriter
34096	ord;
35007	filterDoc
66187	queriesTest(queryText,
64058	assertEquals("\u0000",is.readString());
43547	d-gaps
51123	once").
56328	MergeSort
12803	udba1
27519	"\u005F\u0308\u0061\u2060"
67549	Field("fielda",
17218	listener)
53947	refCount
44013	U+01CE:
51180	once");
41424	ord,
41301	ord)
34698	org.apache.lucene.analysis.LowerCaseFilter;
54887	listener,
2005	scratchArc.numArcs)
15635	sum;
45540	"É½"
60696	"\13\u02e2\1\u0428\2\u02e2\1\u0428\1\u034e\12\u02e2\175\0\1\u034d"+
37405	{"foo",
13329	u2bd1
57524	(currentField
6824	AUTO
50598	ourself
44739	U+01CF:
1301	IndexWriter(d,
66477	"intern"
4647	m.getName().startsWith("get"))
195	containing
1419	crashdoc
52077	maxmergedocs
64586	reread
29499	testIgnoredProperty()
55191	term1,term2;
66370	postingsArray.textStarts[term1],
12527	u2be5
26715	doc(int
1941	fieldsStream.copyBytes(stream,
38136	Iterable
65350	mccandless
51042	err;
45174	U+01CC:
52694	demonstrates
20921	stems
21358	assertSameSeekBehavior(data[i],
50141	deletions)
17565	assertEquals(docParallel.get("f4"),
109	deleteReaderReaderConflict(boolean
25081	"b*a"));
50854	deletions.
6893	step.
53566	step3
43938	U+01CD:
23272	testmultisearcher
62818	suit
19836	doTestExactScore(INT_FIELD,FieldScoreQuery.Type.FLOAT);
25414	Introduced
53569	step4
12928	u2bdb
4749	disabled
21548	readlen
12126	u2bef
57931	(name.startsWith(IndexFileNames.SEGMENTS))
33043	configured
45024	U+01C9:
18767	"wiki",
3569	@see
44560	U+FB04:
3530	b.append("MergeSpec:\n");
66046	stopA);
56189	Scan
21845	result.add(field);
11632	"\1\u054d\6\0\12\u054d\1\u04e0\174\0\1\u0332\4\u055b\2\0"+
54423	details.length;
9531	"\0\ue721\0\ue7c4\0\ue867\0\ue90a\0\ue9ad\0\uea50\0\ueaf3\0\ueb96"+
63231	sizeInBytes
3860	"normalize",
6574	steps
32991	dovectoroffsets
38779	r2.deleteDocument(0);
27049	"\r\u0308\u0027",
41649	FST.Arc<Object>());
48033	&ge;0
67237	out.write(1);
40700	List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>
49592	jj_consume_token(RANGEIN_QUOTED);
2382	assertTrue(boostingFuncTermQuery.equals(spanTermQuery)
45009	U+01C7:
51715	mergeVectors="
23746	recordTimeSec;
2883	N_THREADS,success.cardinality());
44568	U+FB02:
46653	,"(",
58830	TestIndexWriter.StringSplitAnalyzer()));
52769	id).getValue(),
54329	Payload}.
27856	"\u0061\u002C\u003A",
28953	Integer.class.hashCode()
64144	crossbones
17728	tq.setBoost(boost);
54341	org.apache.lucene.analysis.LowerCaseFilter}
38462	assertTrue(allFieldNames.contains("termvector"));
12402	udbab
45018	U+01C8:
31987	getDoubles(IndexReader
6509	<p>A
24502	"GICEA");
25295	matchOneDocWild[i][j];
33734	PhraseQueue(postings.length);
63535	+=32;
44556	U+FB03:
67173	offsets.length);
58086	finishDocument(this);
31582	+name);
14548	myanmar
24042	"-1.0",
23772	recordTimeSec)
55365	newField(idTerm.field(),
64478	moreInclude
60780	"\2\137\150\0\1\u0101\25\266\1\u0464\4\266\1\142\12\266"+
34166	queued
44551	U+FB00:
25993	OneComparatorScoringMaxScoreCollector
17429	middle
1038	"prepareCommit".equals(trace[i].getMethodName()))
55709	numaddIndexes.incrementAndGet();
10236	"\1\136\4\0\2\136\150\0\1\376\3\264\1\u0103\1\264"+
26552	DocHelper.notermvector.size());
36192	Arc<T>
41657	FileOutputStream("/x/tmp3/out.dot"));
52002	setFlushPending("ram
2456	results
15883	unkown);
40013	undelete,
2195	such
44564	U+FB01:
32871	fieldInfo.storeTermVector;
25234	"?a",
57304	intersect(OpenBitSet
64929	vectors[0]
18771	"ÏÏÎ¹",
36645	in.pos
43787	ï¬
2036	//System.out.println("hash
67046	delegate);
40135	queue;
23312	TestStressIndexing
26756	docfreqs
22502	clazz)
1151	out.writeByte((byte)
67772	System.arraycopy(ta.buffer(),
6040	assertEquals(content,
66142	teststopwordsearching
19593	clazz,
34735	multi2)\"",
23830	result,
7360	queue,
64753	Term(FIELD));
9470	result)
36825	queue)
16504	queue.
51666	diagnostics.put("lucene.version",
56567	commits.get(0);
21067	result2
31694	StringReader(text));
16490	teststaticread
22088	result.
16886	subs
2282	result;
35247	skipping
9233	QueryAndLimit
64888	ioe.printStackTrace();
67894	tokens.get(tokens.size()-1).endOffset();
57640	diffs[hi];
41619	b.deleteCharAt(b.length()
29375	ByteBlockPool.nextLevelArray[level];
67364	modifier.deleteDocument(1);
15130	DocHelper.LAZY_FIELD_BINARY_BYTES.length
58209	noted,
13233	uee0e
45854	U+01D4:
12930	u2d21
12431	uee22
26295	CharBuffer
48950	(<code>+</code>)
20229	subQuery
36333	(Arc<T>[])
36158	FILE_FORMAT_NAME
56560	tononexcluded
51732	merger.add(clone);
35493	wordOffset+numWords;
58481	upperArr.length;
28303	sub;
39972	(bytes
10308	"\1\25\2\0\1\25\1\u013d\12\36\1\u0146\17\36\1\141"+
27560	"\u00AD\u005F",
58844	utf16a
45783	U+01D3:
61812	u2d0d
22544	(enableBackwards
38817	sub0
28426	otherchars[]
62614	search(q));
29951	"\1\26\102\0\1\26\147\0\2\26\134\0\1\64\153\0"+
21214	i<size;
30741	u2d10
66528	(doNextCall)
67249	TermAttributeImpl();
13331	u2d17
10225	"\2\136\150\0\1\376\1\u0103\6\264\1\u0103\6\264\1\u0103"+
18602	Ø³ÙØªÙ
29640	"\1\133\3\132\1\133\4\132\1\133\27\132\5\133\30\0\64\132\14\0"+
47763	twelve
15968	cleardelgen
33298	#"+val,
49771	(java.util.Iterator<?>
4764	conf.setMaxThreadStates(0);
7185	currentterm
7498	ByteSliceReader
11144	"\1\u03ed\6\0\12\u03ee\1\u0391\13\0\1\u02cf\160\0\1\u0332"+
34535	is.read();
50962	segmentInfos.info(i).docCount;
29855	"\1\0\1\25\4\0\1\25\4\0\1\102\1\0\2\102"+
66618	triggerOn(SorePoint.AFTER);
45290	U+01D2:
22510	AttributeReflector}.
33214	getattributeclassesiterator
31463	figure
33126	assertEquals("Token
52413	field.setIndexOptions(IndexOptions.DOCS_ONLY);
2367	hits.score(0);
61722	uee04
48682	this.__test_dir.listFiles();
12529	u2d2b
36848	IntsRef.deepCopyOf(arcAndState.chain);
1428	failonlyonflush
2593	org.apache.lucene.util.Counter;
45203	U+01D1:
10504	"\1\u01a3\32\230\1\347\12\230\175\0\1\u01a3\4\230\1\u01a4"+
7838	docidbitset
26948	REPEAT
3998	offsetattribute
12128	u2d35
12832	uee18
65237	word's
23100	mSearcher3.doc(hits3[i].doc);
24675	Locale.UK)
50530	terms/tokens.
31896	parseDouble(String
20860	addAnalyzer(String
49253	severalTokensAtSamePosition
66803	(stream
29000	tvd);
67793	toString());
29537	Float.class.hashCode()
18835	".",
56452	addClause(clauses[i]);
50509	terms/tokens:
58864	udc17
24838	allowDups);
45858	U+01D8:
23676	docsinsegment
62911	for(i=0;i<fieldInfos.size();i++)
6249	(clauses.size()
33060	src2.restoreState(state);
65599	".";
45787	U+01D7:
21410	one.clone();
38701	index1.norms(curField);
62224	1+upto;
39269	positions.hashCode()
20149	sumExpl.setValue(sum);
48123	closedirsrc
52905	sale,
67795	t.copyBuffer(termBuffer,
45856	U+01D6:
63032	"<EOF>",
21020	thisDiskFree
51764	size=%.3f
18915	testVariousTextSA()
4924	java.io.PrintStream
3332	nextdoc
4882	setreadertermsindexdivisor
40554	BytesRef(ir.length);
60490	"\1\352\12\232\175\0\1\351\31\232\1\u0371\1\352\12\232"+
56533	toNonExcluded();
24066	"-340",
37156	shouldexpand
45785	U+01D5:
52923	0x0000FFFF;
14820	other.type
7998	unmap
58368	"and",
35690	0x0000FFFF)
30742	u2d77
60633	"\1\u0400\2\266\1\0\3\137\1\0\2\137\1\140\3\137"+
30792	Java5CharacterUtils()
61114	"\1\142\2\266\1\u010e\7\266\1\0\3\137\1\0\2\137"+
18934	word",
45935	"áµ¥"
35885	testEqualsHashcode()
57647	Assumption:
53636	fieldDoc
60822	"\1\u02e1\214\0\1\u0483\2\u0484\1\u0483\5\u0484\1\u0485\175\0"+
13033	u6eb6
13205	udc3a
32518	randomfailure
18721	"Ù¾Ø¯ÛØ§Û",
761	RuntimeException("intentionally
40024	this.writeLock.release();
31583	checkAllSegmentsUpgraded(dir);
27098	"\n\u00AD",
23263	i+5,
64565	#setBufferSize
57244	fours=(twosA&twosB);
17714	TopTermsScoringBooleanQueryRewrite
15179	null);//Load
2839	"+s;
62920	normSuffix);
12403	udc4e
67448	assertTrue(segmentReader1.normsClosed());
9218	terms.getSizeInBytes()
4169	assertNotNull(sd);
29532	FloatFieldSource(String
6147	put(TypeAttribute.class.getName()
61694	udc30
66243	postCreate(BooleanQuery
28279	heapify();
63843	"\ud801\udc1c");
33438	main.writeLong(checksum-1);
32810	testemptyinputnio
59416	"\2\0\2\115\12\0\2\115\1\0\3\115\1\0\1\115"+
16743	r.deleteDocument(doc);
55450	(fi.isIndexed)
34107	i+1;
53924	udc1c
24617	boolean[][]
17915	maxRP
11013	"\6\0\12\u037e\1\u037f\175\0\4\u0380\2\0\1\u0380\15\0"+
34677	processpayload
56195	TestTermPositions(TermPositions
53935	orld
17861	docs",
39454	lastTi
52628	TestNoMergePolicy
54186	petabyte
17288	listeners
40269	steal
56185	TestTermEnum
12804	udc44
58978	mmapDir.setMaxChunkSize(1<<i);
61522	u6eac
15134	field.getBinaryValue());
56600	commits.get(commits.size()-1);
39585	lastTi);
62238	testequality
20362	nextlength'
61082	"\3\u02e2\1\u055a\6\u02e2\175\0\1\u034d\32\u02e2\1\u034e\5\u02e2"+
51527	mergedReader.numDocs()
12632	u6ec0
10774	"\11\230\231\0\12\u029b\10\0\1\u0167\1\u0168\1\u0169\162\0"+
60042	"\1\u0197\1\333\1\u0197\1\0\1\137\1\153\1\137\1\0"+
7281	overridden
15516	(byte)
16867	orig
23099	hits3.length;
28780	skipBuffer
44784	U+01D0:
15893	pendingDelCount)
4183	testRange_8bit()
55978	SegmentTermPositionVector(String
24505	Locale.US,
29051	tvfPosition;
29315	#next()}<p>
6931	field.hashCode()^0x4565fd66
8476	<p/>
24504	Locale.US)
58543	CharArraySet#EMPTY_SET}
20385	initializing
12231	u6eca
68115	(ScoreDoc)
61332	"\2\u063b\1\u063c\1\u063b\1\u063c\1\u0600\13\0\1\u02e1\226\0"+
17100	getterms
24743	testLUCENE2142()
37996	testLongSpecialValues()
17003	sense
11599	"\1\u0332\4\u0548\2\0\1\u0548\15\0\1\u0548\6\0\12\u054a"+
1872	instanceof
6354	(filename:query1)
27761	"\u0061\u0027\u0308\u002C",
38200	0x0000000000000000L,0x0000000000000000L
66184	"+w3
37058	(retry
37105	deltaCount="
15908	pendingDelCount;
52785	2001-2004
20910	stop
16660	insertwithoverflow
61146	"\1\u034e\12\u02e2\175\0\1\u034d\24\u02e2\1\u0592\5\u02e2\1\u034e"+
20683	newfsswitchdirectory
56643	dir.fileModified(commit.getSegmentsFileName())/1000.0;
19109	testRandomHugeStrings()
43961	BELOW
6564	MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}
28698	stpf
64784	testRandomSeeks(IndexReader
26628	tvfieldnames
3783	For
7576	str)
51603	ensureValidMerge(merge);
25878	2.2).</p>
155	OPEN
20171	Check
35311	inValidTokens
6216	matter
22865	payloadToMatch
54210	str;
24346	lastSub);
3524	instances.
33231	AllTermDocs
39671	testtermquery
66235	assertEquals(mulFactor*collector.totalHits
377	Term("f",
58578	instances,
27400	"\u0027\u0061\u2060",
7457	ends[]
48183	subSpans.length;
62388	sally
20041	this.minNrShouldMatch
54213	hash.size();
27633	"\u0061\u2060\n",
30786	awareness
60732	"\6\0\12\u043d\1\u0354\175\0\4\u043e\2\0\1\u043e\15\0"+
2325	PayloadTermQuery(new
30462	stib
30461	stia
43585	testbv
56947	StandardTokenizer.ACRONYM;
21199	linearly
3554	aborted");
6198	</code>
1003	these
34560	byte[],int,int)}
19080	ã«ã¿ã«ã",
21250	expected.readBytes(expectedBuffer,
18542	"Õ°Õ¸Õ¤Õ¾Õ¡Õ®Õ¶Õ¥ÖÕ¨",
808	MockTokenizer.WHITESPACE,
41767	r[1].output.output1.longValue());
34236	#setReaderTermsIndexDivisor(int)}.
59784	"\2\0\1\25\1\u0141\5\36\1\355\24\36\1\142\12\143"+
50798	"merge
66340	bytesUsed(postingsArray.bytesPerPosting()
11239	"\13\0\1\u02cf\160\0\1\u0332\4\u0434\2\0\1\u0434\15\0"+
33680	dir.fileLength(files[i]));
30750	Java5CharacterUtils
1439	illegalstateex
21179	FieldCacheTermsFilter(String
38094	assertTrue("Double
41715	minLongComparator
43843	IN,
20892	getoffsetgap
10489	"\4\u0196\2\0\1\u0196\15\0\1\u0196\6\0\12\u0199\1\u0197"+
29084	fieldCount);
1735	FIELD_IS_NUMERIC_SHORT
58161	PersistentSnapshotDeletionPolicy(IndexDeletionPolicy
48765	Arrays.sort(testTerms);
66937	subtract(Pair<A,B>
63872	"test"
9765	"\1\0\1\66\3\0\1\65\166\0\1\135\45\136\1\0"+
7939	IO.
22438	org.apache.lucene.util.AttributeSource}.
14632	INT
58117	#prepareCommit()
28880	bytePool.reset();
31645	hastested29
48906	//Bad
45022	,"(l)",
3620	estimatedmergebytes
60014	"\1\u016d\1\u016e\1\233\1\0\2\u016d\156\0\1\u018a\45\u0145"+
49794	((jj_la1_1[i]
66372	postingsArray.textStarts[term2];
54926	#maybeRefresh},
28456	numstrings
18003	maxid
22707	FieldCache#getShorts(IndexReader,String,FieldCache.ShortParser)}.
35432	OriginalChecksum=da95d0ec7daad286fab4e748b17294d8
59972	"\1\u019e\1\u01a0\1\u019f\2\u019e\2\u019f\1\u019e\1\u019f\1\u019e"+
50621	IndexWriterConfig)}.
42047	<code>b</code>.
11371	"\3\0\1\136\4\0\2\136\151\0\4\u049e\2\0\1\u049e"+
56849	"\5\0\12\2\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12"+
17944	1.5.0
66532	writeByte(int
52816	Standard,
16017	English.intToEnglish(i+10*count),
50287	IndexReader#reopen},
9868	"\5\0\1\25\3\0\1\25\1\26\1\0\1\25\2\0"+
45209	U+01FE:
27411	"\u0027\u0308\u0031\u003A",
9663	zzUnpackTrans();
34714	foobar\"",
61042	"\1\u0535\3\266\1\142\12\266\1\0\3\137\1\0\2\137"+
9073	sharedprefix
16290	Wraps
7551	Ordinals
18007	maxip
20975	settermlength
5679	Stemming
28350	ScorerVisitor<Query,
56516	Scorer#skipTo(int)},
45296	U+01FF:
19726	chunkEnd
27258	"\u0041\u0300",
54754	"Access
27655	"\u0061\u2060\u005F",
34467	pooling
50243	flushCount
8566	<code>TeeSinkTokenFilter</code>
63472	0x8754321,
8055	"+maxChunkSize);
25560	CacheEntry[badEntries.size()];
40917	termsMap.put(pair.input,
4424	true));
10637	"\152\0\4\u020e\2\0\1\u020e\15\0\1\u020e\6\0\12\u020e"+
25050	abcdefghij
19614	getdecodingreader
33464	maxVersion
16994	storeOffsets;
44090	"Ç¼"
4650	tested
6862	NumericUtils.PRECISION_STEP_DEFAULT,
49684	jj_la1_init_1()
17059	storeOffsets)
66090	assertEquals("f1:bla*
17031	storeOffsets,
30740	u2ca9
32782	binarydumpnio
42573	fail("incrementToken()
19591	locate
25390	LowerCaseFilterMock(TokenStream
67536	Hit
4273	NumericUtils.intToPrefixCoded(upper),
49474	CONJ_AND;
37149	bit_target_next
60142	"\1\u0168\4\u0227\2\0\1\u0227\15\0\1\u0227\6\0\12\u0229"+
53631	docs.scoreDocs[j2];
5872	bitsPerValue);
37489	Term("field","stop"));
42378	getPayload()
59133	"\2\u9118\2\u91bb\2\u925e\2\u9301\2\u93a4\2\u9447\2\u94ea\2\u958d"+
3536	there
49200	CONJ_AND)
27861	"\u0061\u002C\u0308\u0027",
25662	InsanityType");
48773	Math.random()
49821	(p.next
36415	writeLabel(int
56272	CGLIB,
4629	getters.add("getSimilarity");
49590	jj_consume_token(RANGEIN_GOOP);
60139	"\6\0\12\u0224\1\u01dc\175\0\4\u0225\2\0\1\u0225\15\0"+
37398	actualheader
43012	Decrement
43946	U+01FA:
25190	"M?t?ls"));
26861	IE,
33555	aa";
55926	set(iv);
29747	"\1\32\3\0\1\32\3\0\1\32\1\0\3\32\2\0"+
8849	junitcore
39546	(utf16Result1.length
51124	infos="
38632	out-of-bounds
40156	i<matchingSegments.length;
58008	allocCount++;
3298	IDs
2221	useCompoundFile(SegmentInfos
63046	"<BAREOPER>",
42672	w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random,
44019	U+01FB:
52261	proxPointer
59150	"\2\ue70d\2\ue7b0\2\ue853\2\ue8f6\2\ue999\2\uea3c\2\ueadf\2\ueb82"+
12830	uecd2
62563	reqoptscorer
8825	before");
51257	IFD
42216	PayloadAttributeImpl
52092	closeinternal
27007	"\u0001\u0061\u003A",
59115	"\2\u3568\2\u360b\2\u36ae\2\u3751\2\u37f4\2\u3897\2\u393a\2\u39dd"+
19030	"personA@example.com",
59603	"\6\355\3\36\1\355\2\36\1\355\2\36\1\355\6\36"+
44585	"Ç¦"
67090	sequentially,
8716	fieldIDs
8833	stack.push("@AfterClass");
44091	U+01FC:
31270	testUpgrade29Compression()
53062	(!s1.equals(s2))
19984	stay
38211	OOME!
54026	out.writeBytes(SegmentNorms.NORMS_HEADER,
49922	star
13231	uecc8
41489	BytesRef("b"),
48359	<code>subScorers</code>,
38938	mkdir
65272	isFinal/output
58082	fieldNumbers[numVectorFields]
26849	OffsetAttributeImpl
41981	stat
19048	Hex
28459	getutf16sortedasutf8comparator
30681	"\1\25\10\0\1\25\1\0\2\25\21\0\1\25\3\0"+
61720	uecbe
29076	//that
44614	"Çµ"
66703	getsyserr
36649	arc.flags);
41462	BytesRef("b");
15177	emptySet(),
44127	U+01FD:
16559	OOME,
37394	headers
50119	name="flush"></a>
55225	term2);
64597	(((long)i1)
18409	score3);
53638	(fieldDoc
26902	full-width
30245	(SegmentTermEnum)getThreadResources().termEnum.clone();
45291	"Ç«"
43688	o.a.l.s.spans
17597	d4.add(newField("f4",
28395	testAppend()
36859	Util.toBytesRef(chain,
48644	onto
67138	SortedSet.
50209	printing
7341	IAE
57898	bb.limit(limit);
8621	Iterator<AttributeSource.State>
50104	constructors}
42328	fi.fieldInfo("f2").storePayloads);
43487	testspannearversussloppyspannear
66739	order}.
2326	Term("field",
52364	HashMap<Directory,
61180	"\175\0\1\u0101\32\266\1\142\11\266\1\u05b4\1\0\3\137"+
12429	uecdc
25873	constructors,
51886	constructors.
5396	locale
3884	Called
21316	assertSameStreams("d1",
29050	lastTvfPosition
27354	"\u002C\u0300",
28347	visitSubScorers(Query
46596	,"'",
52819	IBM
58764	buffer[offset]
3339	compute
6943	in.defaultReadObject();
48885	assertTrue("sortedSet
1176	dir.openInput(fileNameIn);
57952	PositiveOnlyScoresFilter
8522	important,
26595	assertNull(norms);
56888	"\2\0\6\12\2\0\6\12\2\0\3\12\43\0";
53982	in.seek(normSeek);
43906	foldings
60767	"\32\232\1\352\2\232\1\u0447\7\232\175\0\1\351\16\232"+
58182	ID.
15632	files())
31428	1.5);
50362	Caller
8381	ID,
44332	"Ç±"
10213	"\1\136\4\0\2\136\150\0\1\376\1\u0110\1\u0103\1\264"+
26119	entry.score);
29544	Han
20550	ICU
28848	primaryPerThread)
20902	stem
23804	ID:
6679	step
50465	ensureOpen(true);
25631	((IndexReader)obj).getSequentialSubReaders();
43506	doTestGetSetVectorOfSize(8);
53898	String(buffer.getBuffer()));
60311	"\15\0\1\u01d0\6\0\12\u01d0\176\0\32\u0216\1\0\12\u0216"+
63908	Character.charCount(cp))
19647	postings,
1057	w.rollback();
44241	U+2184:
56355	rotate(first_cut,
58901	postings:
39266	other.termArrays)
6817	this.maxInclusive
60946	"\6\0\12\u04da\1\u0497\13\0\1\u0126\160\0\1\u0168\4\u04da"+
34623	payloadsSeen++;
45656	U+FB06:
44329	"Ç"
18829	"å½",
10490	"\1\u0196\6\0\1\u0198\1\u019a\1\u0199\2\u0198\2\u0199\1\u0198"+
32556	testSingleBinaryRoundTrip()
51068	ioe.initCause(t);
22977	list.add(1);
36282	CodecUtil.checkHeader(in,
55215	len2++;
51909	oom,
990	assertEquals(NUM_THREAD*NUM_ITER,
50846	oom)
23285	mulitsearcher
21574	cidx;
59730	"\4\0\1\75\2\0\1\76\41\0\1\25\2\26\2\0"+
56662	something:
21723	IndexSearcher(r,
65564	DecRef'ing
29897	"\2\0\1\25\1\0\1\25\1\0\3\25\1\0\1\52"+
61163	"\25\u02e2\1\u034e\12\u02e2\175\0\1\u034d\24\u02e2\1\u05a4\5\u02e2"+
56463	(!clauses.equals(that.clauses))
79	implied.
51913	oom;
53918	assertEquals("\udc1c7891",
6968	Term#compareTo}.
33307	Available
58215	<b>wrong</b>,
12130	u2e7b
29746	"\1\25\1\0\1\25\106\0\1\33\21\0\1\27\35\0"+
54424	buffer.append(details[i].toString(depth+1));
67837	r.deleteDocument(r.numDocs()
12531	u2e71
64733	tests:
35573	twos=twos^twosA;
56912	"\1\17\1\10\1\21\1\22\2\12\1\13\1\23\4\0"+
14935	relevancecomparator
66097	parser.parse("[a
63468	0x875421,
19471	repeated
16178	tests"
56268	checkoverridemethods
10715	"\2\u01c8\1\u01cb\3\u01c8\1\u01cc\5\0\2\u01c8\4\0\1\u01c8"+
36272	BytesWriter();
34440	this.mergedSegmentWarmer
10325	"\3\136\3\0\1\136\1\162\3\0\2\136\2\0\1\47"+
53282	TwoLongs(first,
25431	tests)
4393	tests,
1438	oome
11253	"\2\u0441\1\u0440\5\u0441\1\u0442\1\u0443\175\0\4\u0444\2\0"+
32451	testmmapindex
2620	tests.
52422	hood.</p>
2264	TestPayloadTermQuery
21167	proportion
18864	"/",
41869	assertEquals(result.bytes[result.offset],
12932	u2e67
61235	"\5\u02e2\1\u05e9\23\u02e2\1\u05ea\1\u034e\12\u02e2\175\0\1\351"+
40279	multitermenum
33247	capability.
39351	nextSetBit(0);
26862	endOffset
33796	repeater
24463	"BFHJD");
18311	testSkipToFirsttimeHit()
37086	//System.out.println("new
13333	u2e5d
18596	ÙÙÙÙØ¨ÙØ¯ÙØ§\"
5579	SmallFloat.byte315ToFloat((byte)i);
2433	theSearcher.setSimilarity(new
57518	GrowableWriter(4,
30726	StandardTokenizerImpl(java.io.Reader
31798	possibility
30452	stiB)
25738	identityhashcode
61814	u2e53
31098	filereader
36643	in.bytes
52404	NumericRangeQuery}
59986	"\1\352\12\232\175\0\1\u01a9\4\232\1\u01aa\25\232\1\352"+
57239	twosA=v0
55413	indexserial
43595	CachingSpanFilter(SpanFilter
32157	getbyteblock
58090	struck
30450	stiA,
50599	messageState();
49224	(required
40369	"InOrderTopScoreDocCollector"
46546	"Â»"
60711	"\2\u0428\1\u0433\1\u0437\3\u0428\1\u02e2\3\u0428\1\u02e2\1\u0428"+
51060	spec.merges.size();
41227	arcs;"
28120	"\u2060\u0063\u2060\u0061\u2060\u006E\u2060\u2019\u2060\u0074\u2060\u2060",
51122	("write
52844	furnished
20039	setMinimumNumberShouldMatch(int
6967	ordered
24682	//ScoreDoc[]
57780	testForceCommit()
7051	actual
15771	Save
61813	u2db0
51841	then,
24467	"ZJI");
26654	neverpeekslookaheadtokenfilter
9204	termsArray)
7005	maxBound--;
29603	"\2\0\51\132\1\0\4\132\2\0\41\132\1\0\4\132\2\0\7\132"+
62515	requiredCountingSumScorer
18710	Û±Û³Û·Û¹
14777	then.
40221	current.skipTo(target-base))
24513	Locale("sv",
52377	testAddIndexes()
31955	LongParser(){
36734	BIT_ARC_HAS_OUTPUT))
55953	them)
56339	(compare(pivot,
6662	them;
51130	them:
1249	IndexSearcher
57791	for(IndexCommit
9167	them.
19460	emulates
17763	them,
60079	"\2\137\150\0\1\u0101\3\266\1\u01ef\26\266\1\142\12\266"+
3977	offsetAtt.setOffset(finalOffset,
31017	newFSDirectory(indexDir,
53134	String(chars,
64339	docCountCutoff;
26621	testdelete
17303	segmentcorereader
170	assertEquals("first
31254	ds.readInt();
43791	filter.getAttribute(CharTermAttribute.class);
53799	goNext();
25874	point-in-time
17875	numDocs).scoreDocs;
40642	fst.getNodeCount());
54537	ArrayUtil.parseInt("1923".toCharArray());
64350	docCountCutoff)
26855	stemmer
58153	snapshots;
6919	NumericRangeQuery)
43497	doTestConstructOfSize(20);
17016	currentPositions.get(posVal);
11527	"\1\u0510\15\0\1\u0510\6\0\12\u0510\1\u0511\13\0\1\u0325"+
36613	outputs.read(in);
11548	"\2\u051d\1\u051e\1\u051d\1\u051e\1\u0500\13\0\1\u02cf\226\0"+
64324	docCountCutoff,
862	(Exception
67789	(termBuffer[i]
16468	snapshots,
22158	minTargetSize
4688	(Field
58133	snapshots'
16403	snapshots)
50453	segmentInfo's
55850	reduceopenfiles
41732	r[0].input);
6707	31*3*2
35021	advanceToNextCommonDoc()
19004	(getClass().getResourceAsStream
1566	BytesRef
11298	"\13\264\1\u0464\16\264\1\141\12\264\1\0\3\136\1\0"+
64212	testlock
33252	TestTransactionRollback
61721	ued61
62305	q3);
36450	fixedArrayStart;
18016	maxrp
10161	"\1\352\11\36\1\141\12\142\1\65\1\136\1\143\1\136"+
56848	"\1\0\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\1\12"+
10723	"\1\u0266\10\0\1\u020c\164\0\4\u0267\2\0\1\u0267\15\0"+
43596	this(filter,
3493	StringBuilder
51763	message(String.format("merged
51905	warmer)
15687	preLockless)
11571	"\6\0\1\u052f\2\u0530\1\u052f\5\u0530\1\u0531\1\u0532\175\0"+
28786	(skipBuffer
39385	I/O
42293	byte[testData.length
38670	index2.maxDoc());
36593	node");
1122	checkpoint"))
34436	warmer.
38755	tp2.seek(enum1.term());
15434	preLockless;
52211	os_name
31569	infos);
42886	Token.DEFAULT_TYPE
12831	ued75
30613	"\14\0\1\163\16\0\1\164\2\0\1\165\21\0\1\101"+
8863	runclasses
43006	AlreadyClosedException(REFERENCE_MANAGER_IS_CLOSED_MSG);
41584	allTermsList)
2076	final?="
40601	"elastic",
38599	erase
3979	reset(Reader
61090	"\1\u034e\12\u02e2\175\0\1\u034d\23\u02e2\1\u0567\6\u02e2\1\u034e"+
24380	123456;
13232	ued6b
55149	(!termDocs1.next())
4136	upper=lower
56417	w.numDocs());
54378	src.setMaxTokenLength(UAX29URLEmailAnalyzer.this.maxTokenLength);
48690	getpath
3464	aborted
39480	accelerable
52913	0xD800;
31465	accordingly:
15547	long[src.normGen.length];
60348	"\2\0\1\u02ec\15\0\1\u02ec\6\0\12\u02ec\1\u02ed\175\0"+
51128	checkpoint");
37345	ignorecase
25532	accordingly.
17151	TermInfosReader(cfsDir,
60763	"\21\232\1\352\12\232\175\0\1\351\1\u0457\31\232\1\352"+
58833	utf8Data.length/2;
12430	ued7f
8215	RuntimeException("Should
62594	"deleting"));
16875	r.norms("field1")[1]);
228	reader");
39909	clone(openReadOnly);
7440	Same
56941	int[658];
66981	IndexReader.open(ramDir,
17742	ConstantScoreAutoRewrite},
33803	(pp.rptGroup
5395	hashmap
58727	maxtf
7239	their
26765	this.start
44878	"â±©"
42553	stream.incrementToken());
25159	query8
2642	query;
4304	query:
24210	queryE
41934	testbigset
54722	(same
2205	COMPOUND_FILES
31783	(dirImpl
24214	queryG
24212	queryF
17612	testalltermdocs
24209	queryA
2573	scorepayload
2461	query,
18404	score2);
6543	query.
16377	testcharfilter2
27174	"\u3031\u3031",
60225	"\1\142\12\333\1\u0154\1\137\1\153\1\137\1\0\2\154"+
6188	query)
16374	testcharfilter1
25148	query4
56349	second_cut
25150	query5
25152	query6
25154	query7
29489	Assert.assertEquals(2,
25142	query1
25144	query2
48625	legal,
25146	query3
60050	"\1\u0168\4\u01e1\2\0\1\u01e1\15\0\1\u01e1\6\0\12\u01e2"+
16556	(maxSize
9321	"\1\0\2\132\1\133\143\132\1\0\1\132\7\133\1\133\1\0\6\133"+
44419	"â±»"
10141	"\2\352\1\36\3\352\2\36\2\352\1\36\1\352\3\36"+
29685	"\0\u09a8\0\147\0\147\0\u0a0f\0\316\0\u0135\0\u019c\0\u0203"+
10914	"\4\u020c\2\0\1\u020c\15\0\1\u020c\6\0\12\u020c\226\0"+
62543	built.
36730	scan...
55112	idField);
34831	prevType
65266	built;
27796	"\u0061\u0027\u2060\r",
3935	charCount
1833	JRE
28248	setLength(long
34015	query!
18432	System.err.println("-------
29497	Assert.assertEquals(3,
43651	doTestSearch(random,
23728	keeping
45516	"â±¤"
62326	q1},
24793	fdocs.length);
52783	excellent
60437	"\12\u0213\226\0\1\u033e\245\0\12\u033f\11\0\1\u0213\164\0"+
8146	buffers[curBufIndex];
18442	decimalformat
49681	jj_la1_init_0()
51348	battery
59257	"\1\0\2\32\1\0\2\32\7\0\3\32\2\0\2\32"+
366	w.commit();
40903	accepted",
64222	parseable
30447	SegmentMergeQueue(int
35986	1:21:46
2929	timelimitingcollector
34077	(cnt==2)
46170	"â±¬"
63423	0x86432,
209	reader2.close();
63422	0x86431,
38930	testchangesafterclose
60579	"\12\u03d0\1\u0354\175\0\4\u03d1\2\0\1\u03d1\15\0\1\u03d1"+
37613	testRewrite()
56	Unless
41231	(doRewrite)
64789	termIDX=0;termIDX<validTermStrings.length;termIDX++)
58337	((bByte&0xfe)
8147	curBuf.position(0);
21127	invocation
57476	indexthreads
50695	IndexWriterConfig#setMaxBufferedDocs(int)}
45947	"â±´"
1049	testExceptionsDuringCommit()
43057	(newReference
35383	JavaCCOptions:TOKEN_EXTENDS=,KEEP_LINE_COL=null,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
35968	testtermrangequery
24877	actual:");
12931	u2dc4
10078	"\1\26\2\25\2\0\1\77\6\0\1\25\122\0\1\25"+
2490	state.getBoost();
27385	"\u0027\u0308\u0041",
64356	(ConstantScoreAutoRewrite)
30267	numscans
13332	u2dba
17211	notifyCoreClosedListeners()
16988	fieldToTerms;
35093	file.addBuffer(BUFFER_SIZE);
12129	u2dd8
37323	List<?>
41804	suggestion
66332	(nextPerField
26986	(ExtendNumLet)
23013	galaxy
18818	tokenize
48598	readerValue
45408	"â±£"
8149	(NullPointerException
24892	queryx
45207	U+01EC:
24893	queryy
59724	"\1\25\2\26\2\0\2\77\1\100\1\0\1\26\2\0"+
12530	u2dce
62451	delegated,
51976	message("clearFlushPending");
43482	testspannotversusspanterm
56561	exclscorer
28322	lchild
30338	random.nextDouble()
25626	ArrayList<Object>(17);
37046	arcBytes);
24898	querym
48734	empty_bytes
15691	".s"
24894	querya
39182	postingsFreqs,
24896	queryf
24897	queryg
24895	querye
24205	queryX
24207	queryY
9836	"\1\0\1\25\117\0\1\25\13\0\1\25\21\0\14\25"+
45294	U+01ED:
19704	(cs.posEnum.next())
30743	u2dde
54335	o.payload
11184	"\31\230\1\347\12\230\175\0\1\346\1\u040b\31\230\1\347"+
48656	streamvalue
22873	acceptPosition(Spans
7286	i--)
66063	testStaticMethod2Old()
62832	"<APOSTROPHE>",
17556	parallel.doc(parallelHits[i].doc);
1019	setMaxBufferedDocs(2).
41901	maxlong
24216	queryM
17943	1.4.2
29263	checkvalidformat
57364	numWords,
56491	initSpanQueue(target);
12933	u2f0a
45818	"á»ª"
8760	testID
39082	cm.put("test2",
7172	intrangebuilder
19299	jim's
240	assertTermDocsCount("reopened",
35473	numWords)
41780	numWords;
36057	FilteredQuery(rq,
43153	documents[i]);
35419	IDToken
45205	U+01EA:
12532	u2f14
66638	SorePoint.INITIALIZER;
39540	UnicodeUtil.UTF8toUTF16(lastTermBytes,
60673	"\161\0\4\u041e\2\0\1\u041e\15\0\1\u041e\6\0\1\u041f"+
27065	"\r\u0308\u0061\u0027\u2060",
37082	nodeRefToAddressIn[ent.getValue()]
2039	maybe
12131	u2f1e
22198	getShrinkSize(int
59788	"\1\355\7\36\1\142\12\143\1\66\1\137\1\144\1\137"+
60922	"\1\u03ac\13\0\1\u02e1\160\0\1\u04cd\33\0\12\u0484\175\0"+
25553	for(final
15330	sub.document(docID);
10698	"\2\136\150\0\1\376\1\264\1\u024e\30\264\1\141\12\264"+
67674	testcloseorig
28275	(DisjunctionMaxQuery
41323	((System.currentTimeMillis()
45292	U+01EB:
6003	content.length);
44951	"â±¢"
29023	seekTvx(final
65246	builder.finish
61140	"\1\u02e1\161\0\4\u058f\2\0\1\u058f\15\0\1\u058f\6\0"+
2902	bits.cardinality();
29316	#next()}
39859	segmentInfos.clone(),
20908	If,
58453	Arrays.asList(NOT_IN_SET),
39187	"+doc+"),
51317	segmentInfos.clone();
46740	,"&",
61212	"\12\u02e2\175\0\1\u034d\21\u02e2\1\u05ca\10\u02e2\1\u034e\12\u02e2"+
934	5));
25979	Ids
41645	String[out.size()]);
120	Term("content",
2437	Term(PayloadHelper.FIELD,
67480	(!stopped)
27799	"\u0061\u0027\u2060\u0308\n",
4529	testfloatrange_2bit
53766	contains(CharSequence
32019	getEstimatedSize();
4622	Set<String>
66659	testFailureAfterClass()
3220	specified
52611	getSimilarity(Searcher
38961	doRandom(int
57811	LUCENE-1274:
20261	specifies
33207	testtype
57771	j=0;j<10;j++)
49092	getFuzzyMinSim()
61210	"\1\u05c7\4\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u05c8\31\u02e2"+
34569	this(term,
1481	indexDivisor;
3295	base));
24786	assertIntResultsOrder(collectorMinRev,
40389	JDK
48474	Id.
1536	indexDivisor,
22081	Begin
65763	j<nTerms;
55143	r1.terms
48621	posIncr;
53887	Version.LUCENE_30,
1021	ConcurrentMergeScheduler()).
62605	<code>T:files
54296	offsetHash.get((-key)-1,
39140	Collections.unmodifiableList(termArrays);
26975	"\u0001\u0308\u0027",
66106	blah",
40375	tdc.getClass().getName());
54094	stopWords1);
51483	previousReader
6940	readObject(java.io.ObjectInputStream
1073	ConcurrentMergeScheduler());
38070	2.3E25,
147	searchTerm1.text());
54010	clone.refCount
49973	<li>VInt
53999	Ie,
2984	setscorer
29501	Assert.assertEquals(0,
3469	MergeAbortedException
3678	words.
50275	turarnound
6212	words,
63559	words)
18574	"ááªááµá«",
60476	"\1\u02f5\1\u035b\1\u02f5\14\0\1\u0126\160\0\1\351\25\232"+
6645	<p>For
63521	words;
16535	pq.top();
66710	words:
23797	down,
26297	getDecodedLength(CharBuffer
55897	WeakReference
29480	Assert.assertEquals(1,
30135	indexDivisor)
31341	assertEquals("here
36420	writer.writeShort((short)
37055	arcBytes;
54895	IndexWriter),
2480	know
22695	(!includeUpper
54631	specific.
51097	IndexWriter's
47780	twenty
50976	justified.
48274	prevSpans.end();
13334	u2f00
8141	EOFException("read
63471	0x875432,
40057	etc,
14844	etc.
64851	numnext
32889	charBuffers
42563	testIntStream()
21022	(diskRatio
65452	strval
37531	0.01);
44854	"â±¼"
21228	assertNotNull(msg
9186	docIDUpto
7461	int[]{1,
11048	"\12\u039e\1\u039f\13\0\1\u0122\160\0\1\u0163\4\u039e\2\0"+
37917	Iterator<IdentityWeakReference>
31192	"23.cfs",
44866	"Ç¨"
10726	"\1\u0212\151\0\1\u026a\32\u0213\1\u026b\12\u0213\1\u026c\2\u0212"+
61816	u2f99
42198	assertEquals("positionIncrement=1234",
56987	ToStringUtils
23896	etc:
29164	charBuffer;
4339	precStep",
3424	registerDone;
7455	int[]{0,
9719	"\1\0\2\32\1\0\21\32\1\0\1\32\2\0\3\32"+
46442	,"12.",
48372	IllegalArgumentException("There
37409	"go"};
12426	ueaf3
3383	give
15340	loadfirstfieldselector
13228	ueadf
59913	"\13\232\1\u016f\12\232\1\352\12\232\175\0\1\351\3\232"+
58490	"ABC\uD800EfG",
65380	org.apache.lucene.store.NoLockFactory;
20847	this(defaultAnalyzer,
65953	two*");
54092	stopWords0);
22845	bytevalue
15062	writer.addDocument(testDoc);
7458	int[]{3,
27679	"\u0061\u2060\u0061\u002C",
43108	"boosted
12827	ueae9
52575	HashSet<Query>();
24848	doc.add(newField("string",
44016	"Ç¡"
149	searchTerm3.text());
59104	"\1\u4746\1\u47e9\1\u488c\1\u492f\1\u49d2\1\u4a75\1\u4b18\1\u4bbb"+
5372	(jjrounds[state]
42627	spanqueryfilter
63470	0x875431,
62431	skipTo(),
45137	U+01F9:
17422	indexesOf(String
29415	buffer.append(prefix.text());
55632	id75),
17640	testnullvalue
2138	bytesperarc
61361	"\5\u02e2\1\u034e\12\u02e2\175\0\1\351\1\u0654\31\232\1\352"+
18118	innerWeight.scorer(reader,
26246	similarly,
24039	"0",
64601	readVInt()
6214	appear,
35092	file.numBuffers())
3618	isexternal
15493	"x.y"
57909	Filename
29171	numTerms;
62254	"0")
2336	//they
10431	"\1\233\1\234\1\235\1\236\1\237\1\240\1\241\1\242"+
9742	"\1\50\1\0\1\70\2\0\1\71\3\0\1\53\2\0"+
36941	//System.out.println("map
45206	"Ç¬"
29004	tvf);
60038	"\1\321\1\322\1\323\1\324\1\325\1\326\1\327\1\137"+
4117	ascfield4.setIntValue(val);
45722	"â±¦"
29420	(PrefixQuery)
62200	numTerms)
15311	random.nextInt();
17030	numTerms,
26350	encode(byte[]
45100	U+01F8:
43612	missCount;
65092	parent's
27349	"\u002C\u0308\u0030",
52342	payloadTS1));
25328	setallowleadingwildcard
16218	optB
40914	Map<IntsRef,T>
57673	cumulativediff
2537	no_payload_field
44894	"Ç©"
8313	getchannel
44663	"â±µ"
14580	yyclose
33747	<br>Example:
60543	"\1\u02d4\175\0\4\u0399\2\0\1\u0399\15\0\1\u0399\6\0"+
5370	TokenMgrError.LEXICAL_ERROR);
54583	(random.nextInt(1000)+1));
45968	U+01F7:
59614	"\1\355\4\36\2\355\1\142\12\143\1\66\1\137\1\144"+
66871	Arrays.toString(terms.toArray(new
33759	c"~4
25213	docs[]
57522	indexEnum.next();
55329	nextInt(0x80,
35184	appears
23347	"Netherlands",
53702	i].doc,
44018	"Ç»"
2797	problematic
11194	"\1\347\3\230\1\u0412\6\230\175\0\1\346\32\230\1\347"+
49620	RANGEEX_GOOP:
44705	U+01F6:
31589	bunch
46132	"â±«"
6440	TestException()
48014	RAM-based
50517	IndexWriter(Directory
3899	#isTokenChar(char)}
1140	SegmentInfos.getLastCommitSegmentsFileName(dir);
407	reader.deleteDocuments(new
61056	"\214\0\1\u0540\2\u0541\1\u0540\5\u0541\1\u0542\175\0\1\u04fc"+
56801	keepnoneoninitdeletionpolicy
7168	addrange
68150	rarely()
54821	failurereason
43515	assertTrue(bv.get(i));
60730	"\1\u027f\3\u021e\1\u0220\1\u016c\1\u016d\1\u016e\2\0\2\u021e"+
44615	U+01F5:
31522	uncompressed
13202	uda51
44590	U+01F4:
51423	message("apply
32468	setMaxBufferedDocs(3).
59691	"\1\u0101\1\u0114\1\u0107\1\266\1\u010b\6\u0107\3\266\1\u0107"+
21652	pEnd)
23596	applies
31917	Float#toString(float)}
39139	getTermArrays()
42527	singleterm
16082	First
67433	modifier.deleteDocument(3);
3207	whether
62306	q4);
62195	iter=0;iter<10*RANDOM_MULTIPLIER;iter++)
51306	IndexCommit#getUserData}.
16395	getDeletionPolicy()
217	open
28194	org.apache.lucene.search.Collector;
51806	doWait()
57095	capacity()
67324	performDefaultTests(TestReopen
13230	uec25
5499	ignoring
931	(LogMergePolicy)
19741	posIndex
44352	U+01F3:
41904	fstenum's
23053	getMultiSearcherInstance(searchers);
8294	setaccessible
44589	"Ç´"
50410	IW:
61719	uec1b
57035	<th>get</th>
66524	textUpto,
23674	nightly
45945	"â±±"
40860	(willRewrite
35455	pop(unsigned
12801	uda5b
20965	truncate
12428	uec39
11000	"\2\136\150\0\1\376\25\264\1\u0378\4\264\1\141\12\264"+
37932	iterator.next().get();
12400	uda65
4500	termcountt
50481	<p>Get
2639	FIELD_NAME
51011	forceMerge(int
1671	fieldinfos
28752	i-1.
44339	U+01F2:
44997	"â±¡"
67302	i-1;
50898	(doFlush)
22024	<pre
34160	matchlength
8715	List<Integer>
40291	indexfiledeleter
50569	Likely
4501	termcountc
57179	0x03f;
7859	FSDirectory.FSIndexOutput}
11026	"\175\0\4\u038e\2\0\1\u038e\15\0\1\u038e\6\0\12\u038e"+
26187	getBitsPerValue();
35269	lastSkipDoc[level];
51056	spec;
53888	TEST_VERSION_CURRENT
57333	while(--idx>=0)
50985	doWait);
29031	congruent.
35886	query.setBoost(1.0f);
41582	ArrayList<String>(allTerms);
44333	U+01F1:
44581	"Ç¤"
10209	"\3\u0103\3\264\1\u0103\2\264\3\u0103\1\141\12\264\1\0"+
29162	totalLength
38406	c.getSegmentsFileName());
16284	SpanFirst(SpanTermQuery)
61691	uda47
57286	BitUtil.ntz(word));
8164	readShort()
44697	"â±¨"
67597	IRs
53812	CharArraySetIterator();
44840	U+01F0:
50142	corrupted.
59926	"\1\55\3\0\1\200\7\0\1\57\2\0\1\60\4\0"+
36047	assertEquals(hits1.length,
34537	is.read(b,
20980	Lock#release()
15979	setversion
27628	"\u0061\u2060\u0001",
25343	TestKeywordMarkerFilter
54611	nextsize
39357	disiDoc);
62509	makeCountingSumScorerSomeReq(disableCoord,
9861	"\6\0\1\25\122\0\1\25\6\0\3\25\2\0\1\25"+
34702	testMultiAnalyzer()
21353	csw.addFile(segment
1141	IndexInput
66202	"-w3
15273	delegate.length();
27119	"\n\u0308\u0031\u002E\u2060",
45199	"Æ "
57521	fieldCounter
26137	onecomparatorscoringnomaxscorecollector
57544	dataInput
16953	testclonewithsetnorm
10499	"\1\u019b\6\0\2\u019f\1\u019b\2\u019f\2\u019b\1\u019f\1\u019b"+
54168	CheckIndex
16900	testCloseStoredFields()
62523	ArrayList<Scorer>
22177	(extra
8525	sink's
51049	runningMerges)
19828	resID;
12829	uec2f
19868	doTestCaching
44088	"Ç¢"
9056	raminputstream
20450	document.get(TEXT_FIELD);
40584	utf32;
40220	skipTo(int
7780	FIELD:
9777	"\2\0\1\63\41\0\2\25\1\64\1\0\1\65\1\0"+
35176	<code>positionIncrement
21809	Iterator<Fieldable>
52385	getreaderprocessor
68	IS"
50650	interactive
48439	currentdoc'
19391	docsWithField
43512	git'
15481	How
16838	deletedocs
20772	org.apache.lucene.store.DataOutput;
35199	lastSkipPayloadLength;
6393	CharReader
63153	testSavedTerms(IndexReader
45422	"Æ¥"
35392	refers
44124	"Ç£"
48535	MUST_NOT:
9503	"\0\u5924\0\u59c7\0\u5a6a\0\u5b0d\0\u5bb0\0\u5c53\0\u5cf6\0\u5d99"+
55333	0xd800);
52383	testpayloadprocessorprovider
296	applied
32030	forcibly
16186	FIELD,
49089	getFieldQuery(String,String,boolean)"
64864	bytesPerPosting());
21419	closed",
26584	checkNorms(IndexReader
30631	"\4\0\1\25\5\0\1\25\3\0\1\34\4\0\1\34"+
3080	cachedScorer;
45790	"Ç"
6658	(when
17037	(storeOffsets
54367	src.setMaxTokenLength(maxTokenLength);
63168	dlucene
34223	RAM).
42232	att2.startOffset());
43826	assertTermEquals("fi",
48440	advanceaftercurrent
53788	<b>Note:</b>
56176	testrangequeryidcollating
16919	openifchanged
42647	(fieldName.equals(MULTI_FIELD))
36308	cacheRootArcs();
42421	(b1.length
29957	"\1\65\11\0\3\25\5\0\1\25\1\0\1\25\1\0"+
19580	InputStreamReader(stream,
50424	doOpenStores,
3082	cachedScores;
45859	"Ç"
50433	doOpenStores)
41170	toBytesRef(term).utf8ToString()
54751	RandomAccessFile(path,
15374	field_utf2_text
20191	BS2
31437	"ï¼¤",
34938	Apr
14856	FieldComparator.StringComparatorLocale(numHits,
8191	aioobe)
20449	searcher.doc(hits[i].doc);
23839	s.getIndexReader().decRef();
21242	byte[expectedBuffer.length];
4196	instance",
45786	"Ç"
41001	fstEnum.seekFloor(term)
9494	"\0\u2d35\0\u2dd8\0\u2e7b\0\u2f1e\0\u2fc1\0\u3064\0\u3107\0\u31aa"+
21953	copyBuf.length
8880	visited
53528	scoreDocs[0].score;
52857	BUT
15400	field_1_text
24834	maxLength
20747	thing,
46940	parenthesized
62902	for(i=0;i<35;i++)
25246	"opq*",
51129	Ask
45788	"Ç"
27896	"\u0031\u003A\u3031",
43001	closed";
34203	#APPEND}
57870	otherBuffer;
64056	assertEquals("\uD834\uDD1E\uD834\uDD60",is.readString());
61025	"\12\232\175\0\1\351\32\232\1\352\1\232\1\u0529\10\232"+
67409	assertRefCountEquals(0,
44442	"Ç"
24655	assertMatches(multi,
54948	newGeneration.await();
34181	repeatingterms
37179	nextarc
54207	testSize()
21232	test);
17455	i.e.
33561	aaaa
50351	infoIsLive(SegmentInfo
3145	curUpto
36723	arc.bytesPerArc*mid
67345	assertRefCountEquals(1,
45861	"Ç"
29999	std31
35178	getNumOverlap()
12010	std34
53676	assertQuery(bq,
63121	MyTokenStream(TERMS_PER_DOC);
19381	FieldValueFilter(String
60632	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\7\266"+
58523	assertTrue(copyCaseSens.containsAll(stopwords));
38307	0x0,0xf
30513	Khmer</li>
67363	assertRefCountEquals(2,
49453	Command
38310	0x0,0x1
2323	test()
31606	w.close(false);
38309	0x0,0x3
42619	assertContainsDocId(String
27733	"\u0061\u003A\u0308\u0061\u0027\u2060",
21290	i<data.length;
28626	getcolumn
22909	this.match.equals(other.match)
35027	(FilteredQuery)this.clone();
62942	"_3.cfs");
15105	assertTrue("value
34984	FilteredQuery.getFilteredScorer(indexReader,
51230	checkpoint();
45295	"Ç¿"
52397	numpayloads
67375	assertRefCountEquals(3,
38644	dirFile.delete();
66565	postingshashsize
47934	rolled-back.
52476	token_type_lower_prec
26763	SpanPositionRangeQuery
36883	readNextArc(arcAndState2.arc);
2858	testSearchMultiThreaded()
25254	"*f?1",
46736	,"%",
20140	(shouldMatchCount
31927	DEFAULT_LONG_PARSER;
3807	matchVersion
25709	DEFAULT_LONG_PARSER,
66380	textStart
21524	fileIdx=0;fileIdx<FILE_COUNT;fileIdx++)
63028	RangeEx
26433	CharBuffer.wrap(outputArray);
33314	iterator2.next();
43862	$code
23974	'custom
18262	Field.Text("dek",
4261	lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;
21474	e2.close();
30331	random.nextInt(8)
63216	sizeInBytes;
50959	getNumBufferedDocuments(){
41921	isleaf
34759	foo\"^2.0",
16503	Determines
36599	ARCS_AS_FIXED_ARRAY)
2441	Term(PayloadHelper.NO_PAYLOAD_FIELD,
26675	API.
33119	assertFalse("Iterator
43465	B],
52832	charge,
21053	succeeded,
36658	ARCS_AS_FIXED_ARRAY;
59004	slice[]
51625	_mergeInit(MergePolicy.OneMerge
38560	fail("undeleteAll
63707	x8431
8238	it.hasNext();)
63708	x8432
65251	fst.finish(compileNode(root,
28235	c.setScorer(s);
57908	java.io.FilenameFilter;
16785	assertTrue(pr1Clone.isDeleted(10));
50361	closed).
20115	(c.isRequired())
51021	segmentsToMerge.put(info,
33323	MockAnalyzer(random)).setIndexDeletionPolicy(sdp));
39657	1000).totalHits);
51685	_mergeInit,
31004	PrintWriter(fw);
36270	int[8];
60528	"\32\266\1\142\4\266\1\u010e\5\266\1\0\3\137\1\0"+
63705	x8421
4753	setReaderTermsIndexDivisor
3787	build
6266	BooleanClause(getFuzzyQuery(fields[i],
16384	TestSnapshotDeletionPolicy
51082	forceMergeDeletes(true);
5628	encoding
17080	positionbasedtermvectormapper
54161	.setOpenMode(IndexWriterConfig.OpenMode.CREATE));
43940	"Ç"
58650	System.out.println("tot
22600	built
50468	identifying
61605	ua385
60650	"\15\0\1\u040e\6\0\12\u040e\1\u040f\13\0\1\u033c\160\0"+
13209	udec6
60986	"\2\u04fb\1\u04fa\2\u04fb\2\u04fa\1\u04fb\1\u04fa\1\u04fb\1\u04bb"+
44014	"Ç"
16381	charfilter
68048	left.close();
51172	resetMergeExceptions()
26143	normalizing
62281	QueryUtils.checkEqual(q,
9806	"\2\0\1\25\1\150\32\36\1\141\1\42\1\154\1\153"+
43392	lastBytePos
67096	org.apache.lucene.analysis.StopFilter;
63029	RangeIn
61698	udebc
56930	"\1\42\4\0\1\42\1\43\1\0\1\16\2\0\3\16"+
8446	verifierhostorip
10741	"\4\u0277\2\0\1\u0277\15\0\1\u0277\6\0\12\u0277\1\u021e"+
30105	TermInfoAndOrd
9655	"\3\u5d7b\3\u5e1e\3\u5ec1\3\u5f64\3\u6007\3\u60aa\3\u614d\3\u61f0"+
11685	<code>aState</code>
41194	while((doc
53470	CachedDfSource(Map<Term,Integer>
12808	uded0
30366	random.nextInt(4)
41015	assertEquals(pairs.get(upto).input,
66056	-t:one",
12715	ua399
22391	numberformatexception
14601	zzcurrentposl
58448	CAS
55397	(what
13116	ua38f
21231	test",
16368	CharFilter1(CharStream
12407	udeda
35548	foursB=(twos&twosA)|(u&twosB);
9891	"\3\25\2\0\1\25\2\0\2\25\1\0\1\25\1\0"+
60772	"\1\u0101\1\u045d\31\266\1\142\12\266\1\0\3\137\1\0"+
22478	AttributeReflector()
35567	eights;
59560	"\4\0\2\100\11\0\1\25\11\0\2\25\2\100\4\0"+
62248	doc(Field[]
59429	"\2\0\2\33\12\0\2\33\1\0\3\33\1\0\1\33"+
35816	doc.add(newField("test",
49971	Combines
19028	"&subject=Subjectivity&body=Corpusivity%20or%20something%20like%20that",
11464	"\4\u04e2\2\0\1\u04e2\15\0\1\u04e2\6\0\12\u04e2\1\u0480"+
48013	APIs
38795	Ensure
29396	byte_block_mask
48707	assertTrue(comp.compare("1.02.003",
51947	PayloadProcessorProvider}
55229	info2[i]);
18036	danishindex
26915	[999.0]
55935	hardRefs.put(Thread.currentThread(),
59988	"\175\0\1\u01a9\10\232\1\u0133\21\232\1\352\12\232\175\0"+
39512	IOUtils.closeWhileHandlingException(output);
51087	maybeMerge(-1);
32267	assertFalse("failed
36640	readFirstRealTargetArc(follow.target,
20789	subtract("foobar",
64683	_TestUtil.randomSimpleString(random));
15241	API;
9794	"\1\0\2\152\1\137\3\136\2\0\1\76\1\136\4\0"+
49088	API:
54077	concatenating
63420	0x86421,
65000	(full
24383	"JIHGFEDCBA");
48040	machine/OS
52967	source[i];
8478	things
9771	"\1\0\1\65\1\66\1\0\1\25\2\0\1\25\1\140"+
16237	out;
11549	"\1\u04ae\13\0\1\u02cf\160\0\1\346\7\230\1\u051f\22\230"+
57416	startword
58369	"are",
54214	hash.add(ref);
50901	Atomically
21008	while(!done)
64760	assertTrue(!terms.next()
42259	clone.hashCode());
56151	assertEquals("max,nul,T,T,c",
43357	iterated
23687	out.
11457	"\12\u04de\1\u04ae\13\0\1\u02cf\160\0\1\u0332\4\u04de\2\0"+
24693	buff.append
62564	requiredscorers
51573	mergeSuccess(merge);
55917	countUntilPurge
4308	(((double)totalTermCountC)/(num
51241	IW.close(false)
17647	iterates
9159	processfields
43216	segTermDocs.seek(new
8510	Field("f3",
56387	pool.buffer;
6503	java.util.LinkedList;
67505	readerToClose
21944	out,
3779	argument.
49422	hexadecimal
20801	out)
18731	"Ø¨Ø±Ø§Û",
16365	testCharFilter11()
23323	""+deleteID));
12408	udf7d
23402	String.valueOf(++id)));
16078	searcherThread2.count
24376	FieldCache.IntParser(){
4377	testFloatRange(int
66589	donextcall
28876	Clear
1378	currentthread
38738	curField2.name());
50513	MaxFieldLength
49671	jj_ntk;
18977	BufferedReader(new
48115	(!isOpen)
61606	ua428
17979	"H\u00C5T",
9744	"\1\73\14\0\1\61\4\0\1\74\2\0\1\75\41\0"+
7165	doublevalue
33782	match-length
58118	(following
15704	".s";
42806	startTermBuffer,
7292	arguments
7561	INVALID_LEXICAL_STATE
24544	stays
49665	(jj_scan_token(STAR))
59462	"\32\157\1\137\12\271\1\0\1\137\1\144\1\137\1\0"+
49797	(la1tokens[i])
12716	ua43c
5501	jjfilltoken
36743	implicit
39689	Map<String,byte[]>
42470	Field(field,
65884	testSloppyPhrasePerf()
23952	4:55:10
66101	f3:[a
29522	getfailurecount
64669	payloadBoost.setDescription("AveragePayloadFunction(...)");
66685	testassumetest
10580	"\1\u01da\6\0\2\u01db\1\u01da\2\u01db\2\u01da\1\u01db\1\u01da"+
24167	getRandomCharString(getRandomNumber(1,
49059	ReInit(new
12315	ua446
38862	commitGen="
53496	int[searchables.length
4105	Add
40099	!fileName.equals(IndexFileNames.SEGMENTS_GEN)
44304	TAIL
53171	bytesRef.length,
29221	int[numTerms];
23009	"1",
36753	(instead
48699	"1")
24861	RandomFilter(random,
40203	(current!=null
8094	MMapIndexInput(String
40923	maxLong+7));
13117	ua432
1352	indexinput
35853	A,B,C
42698	w.mergeCount.get()
60786	"\3\0\1\137\4\0\2\137\150\0\1\u0101\12\266\1\u0118"+
4419	testSorting_2bit()
1708	org.apache.lucene.util.IOUtils;
41095	keep");
67932	tokens.add(t);
49503	firstQuery=null;
27097	"\n\u0308\u005F",
35954	fixed,
30252	terminfoandord
43552	doTestDgaps(100,0,1);
24409	getEmptyIndex();
40946	Collections.binarySearch(pairs,
10644	"\1\u014f\1\136\1\151\1\136\1\0\2\152\1\137\1\u013f"+
57067	numBits;
7246	overriding
29270	gettvfstream
28534	compressstring
29143	TermVector
58227	this(EMPTY_BYTES);
9977	"\12\142\1\65\1\136\1\143\1\136\1\0\1\136\1\144"+
57360	numBits,
57068	numBits.
67794	(CharTermAttribute)
2319	newSearcher(reader);
43094	writer.addDocument(adoc(new
4751	conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);
32292	prefix2);
57228	bits[i]
1795	(!success)
6594	Framework
6937	(Boolean.valueOf(maxInclusive).hashCode()^0x733fa5fe);
32090	-DocumentsWriter.BYTE_BLOCK_SIZE;
58391	"this",
24161	getRandomCharString(getRandomNumber(2,
17191	originally
2486	effect
66821	tmpSet.put(term,
38790	assertTrue("file
15930	setVersion(String
27810	"\u0061\u0027\u2060\u002C",
3459	getException()
27362	"\u002C\u0061\u0027\u2060",
20543	>http://site.icu-project.org/charts/collation-icu4j-sun</a>
16253	t[i]
43205	docval
26004	MultiComparatorNonScoringCollector
17699	BooleanClause.Occur#SHOULD}
12714	ua2f6
35864	savedClauseCount
8676	docInverterPerThread);
66582	intuptostart
64758	Term("field"));
30433	checkOneTermReuse(a,
8100	this.chunkSize
22647	FieldCacheRangeFilter<String>
61231	"\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\1\u02e2\1\u05e5"+
43936	SCHWA
56051	small;
39656	"tang"));
63002	_WHITESPACE
62770	TopDocs.merge(sort,
680	start
61604	ua2e2
56060	small,
13029	u6c2a
24772	TopFieldCollector.create(sortMax,
30563	"\1\0\1\123\3\0\1\43\5\0\1\44\3\0\1\124"+
50192	IndexWriterConfig#DEFAULT_MAX_BUFFERED_DELETE_TERMS}
4812	hashset
64116	assertTrue(0x06
23055	mSearcher.search(query,
12628	u6c34
24582	TopFieldCollector
32147	slice[upto-1];
39664	"tang")),
13115	ua2ec
12227	u6c3e
56578	nowVersion
28284	heapAdjust(0);
6376	applyslop
18152	super(similarity,w);
8781	org.apache.lucene.util.junitcompat;
54522	ArrayUtil.oversize(minTargetSize,
58128	#release(String)}
7830	org.apache.lucene.util.DocIdBitSet;
17427	Also,
61109	"\1\137\4\0\2\137\150\0\1\u0101\1\u0579\31\266\1\142"+
6939	reading
4825	assertnull
36039	tq.getBoost(),
11855	All
60716	"\1\u034e\12\u02e2\175\0\1\u034d\13\u02e2\1\u0438\6\u02e2\1\u0439"+
35161	uniqueTermCount;
22427	endindex
8325	readint
25157	lower-case
51464	(compacts
13210	udf69
21655	(pattern.charAt(p)
33589	map.add("tmakdbl",
37426	go",
50409	readerMap.clear();
276	MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));
27797	"\u0061\u0027\u2060\u0308\r",
32597	ByteBuffer.wrap(originalArray1);
48243	subSpans.length);
19971	stay,
48398	<code>scorerDocQueue</code>
48534	visitor.visitRequired(parent,
36690	(arc.flag(BIT_FINAL_ARC))
25443	setRamUsageEstimator(boolean
51110	#prepareCommit}.
22091	representation
24631	BQ.
8618	cachedStates
16676	readOnlyReader))
6496	testexception
14663	Any
34707	qp.parse("foo").toString());
49037	VirtualMethod<QueryParser>(QueryParser.class,
55893	GC's
66663	testErrorInitializer()
2577	state
52744	')');
2898	setSlowDown(
11634	"\4\u055b\2\0\1\u055b\15\0\1\u055b\6\0\12\u055b\1\u0549"+
4553	test12
30417	testPorterStemFilter()
4552	test11
26856	#startOffset()
4557	test14
4554	test13
55868	testaftercommit
27307	"\u003A\u0308\u005F",
16243	ItemizedFilter(int
56107	setUp
4290	termCountT,
34085	ArrayList<PhrasePositions>();
28135	wordbreak
15980	getbuffereddeletesgen
61461	"\243\0\1\u0658\175\0\4\u0585\2\0\1\u0585\15\0\1\u0585"+
61699	udf5f
35036	(query.equals(fq.query)
41275	assertNotNull(fstEnum.current());
25219	opqrstu1",
23527	files");
38661	assertIndexEquals(IndexReader
12809	udf73
166	IndexReader
27154	"\u000B\u0061\u002C",
3821	super(source,
36958	node=1;node<=nodeCount;node++)
40354	(result)
15235	listAll()
34319	setIndexCommit(IndexCommit
36899	maxDerefNodes)
55930	set(T
9627	"\2\ucedb\2\ucf7e\2\ud021\2\ud0c4\2\ud167\2\ud20a\2\ud2ad\2\ud350"+
28366	heapadjust
37905	backingStore.put(new
29837	"\2\0\1\26\3\0\1\26\5\0\1\26\7\0\1\26"+
21068	(result2
29797	"\1\0\3\25\2\0\1\25\1\0\1\25\1\0\1\25"+
51395	set),
18098	(just
34975	compatibility,
8976	over
31157	compatibility.
40032	compatibility)
31277	".zip"),
8442	lockstresstest
6709	But
53787	set);
8421	((FSLockFactory)
30343	(anyFailure)
61154	"\12\u02e2\175\0\1\u034d\24\u02e2\1\u059b\5\u02e2\1\u034e\12\u02e2"+
66422	fieldState.attributeSource.addAttribute(CharTermAttribute.class);
3457	Retrieve
36029	FilteredQuery(tq,
3266	(lastReader
1626	number
46542	"Â«"
19102	Bug
53581	aggregatedDfs
65942	t:one)^2.0)
34240	milliseconds).
68064	testletterhtmlishhuge
16041	IndexerThread(writer,
64948	verifyvectors
57287	downwards
20169	prohibited.add(subScorer);
2757	greediness
48268	prevSpans.getPayload();
54557	cases)
42271	testpositionincrementattribute
66385	(pivotTerm
1653	number_of_fields
32837	getStreamCount()
42362	tps[j].getPayloadLength();
18651	"ÜÜ¬Ü",
693	cases.
53268	(second^(second>>32)));
6697	cases,
26120	(results
57620	cases:
18108	this.queryNorm;
47958	TestFilteredSearch
59101	"\0\u8c14\0\u8cb7\0\243\0\u8d5a\0\u8dfd\0\u8ea0\0\u8f43\0\u8fe6"+
50866	accommodate
1014	sync
45303	"È­"
65392	cms.sync();
40774	fst.outputs.outputToString(output)
35817	Index.ANALYZED,
43573	doCompare(BitVector
47688	serif
61421	"\4\u0678\2\0\1\u0678\15\0\1\u0678\6\0\12\u0678\1\u062f"+
28908	API.</p>
68168	resettable
58551	assertFalse(CharArraySet.EMPTY_SET.contains(stopword));
64490	(moreExclude
11737	WORD_TYPE
18697	"à¦ªà¦°à§à¦¯à¦¨à§à¦¤",
10457	"\1\137\3\136\3\0\1\136\4\0\2\136\2\0\1\173"+
57810	commits!",
13113	ua1a6
44335	"Ç"
65855	boundary
58479	upperArr)
508	doctor
60774	"\1\u0101\1\u045e\31\266\1\142\12\266\1\0\3\137\1\0"+
57602	initialsize
54864	searcherFactory
34465	near-real-time
25084	reflexive?
12712	ua1b0
27173	[13.0]
59852	"\1\0\1\71\2\0\1\72\3\0\1\54\2\0\1\55"+
9980	"\21\0\1\214\2\0\1\215\42\0\1\76\1\26\6\0"+
60684	"\1\u0424\15\0\1\u0424\6\0\12\u0424\1\u0348\13\0\1\u02e1"+
40289	setuserdata
59646	"\1\174\1\65\6\0\1\174\3\0\1\136\33\137\12\271"+
65738	TypeAttributeImpl()
203	stale
61518	u6c20
3725	acronyms
33148	TypeAttributeImpl);
51729	merge.readers.add(reader);
23486	("applyDeletes".equals(trace[i].getMethodName()))
6569	Otherwise
66050	+two"};
34343	<code>numUniqueTerms/interval</code>
403	TEST_VERSION_CURRENT,
53626	(docs.fields[j].getType()
51120	deleter.decRef(pendingCommit);
36499	arcWithOutputCount++;
46050	"È²"
40088	org.apache.lucene.index.IndexReader#listCommits
43336	sortedInts
43823	assertTermEquals("th",
37177	cachedrootarcs
7012	rangeBounds.add(maxPrefixCoded);
39026	entry.setValue(val*100);
61007	"\1\u0513\1\u0514\2\u02e2\1\u0515\1\u0516\1\u0517\1\u02e2\1\u0518"+
51027	merge.maxNumSegments
27377	"\u0027\u0308\r",
9554	"\1\u5b03\1\u5ba6\1\u5c49\1\u5cec\1\u5d8f\1\u5e32\1\u5ed5\1\u5f78"+
62855	ClassicTokenizerImpl(input);
15674	getDelFileName()
67968	RemoveATokens(t);
46081	"È³"
51036	mergeExceptions.size();
67197	stand
34378	setMaxBufferedDeleteTerms(int
23855	IllegalArgumentException("maxAgeSec
21320	assertSameStreams("d2",
63064	"\"}\"",
11132	"\2\0\1\u03de\15\0\1\u03de\6\0\2\u03e2\1\u03de\2\u03e2"+
53236	lead_surrogate_shift_
51207	dsNames
56741	.setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)
23733	contained.
51658	delRatio);
3467	isAborted()
56071	csrq(String
63845	LowerCaseTokenizer(
63722	x8543
12713	ua253
53177	receipt
17555	docParallel
63719	x8541
63720	x8542
55578	Integer.toString(8000)),
3615	operation
26006	comparators;
5323	jjround;
8276	guarantees
60343	"\1\u021e\152\0\4\u02e8\2\0\1\u02e8\15\0\1\u02e8\6\0"+
24604	comparators.
58467	set";
22010	formatpostingstermswriter
5373	jjround)
64353	1279;
63716	x8532
67056	"term1
63715	x8531
54353	UAX29URLEmailAnalyzer(Version
6966	guaranteed
3442	include
65876	System.out.println("Creating
65688	operating
58434	set",
12312	ua25d
48725	ByteArrayDataOutput
6908	max.toString())
181	searchTerm3,
31439	Math.pow(8,
53983	in.readBytes(bytesOut,
31511	NumericField("trieInt",
44349	"Ç"
48390	remain.
57661	offsets[size
48092	is.length());
57071	numBits)
67635	testreopen
38167	overlap",
24374	assertMatch
5256	jjrounds
55405	bigfieldsize
50801	waitForMerges
53612	lock.lock();
13114	ua249
4832	getsimilarity
67025	i.readBytes(bytes,
40585	Character.charCount(utf32);
18576	"á¥á",
8730	(rand.nextInt(4)
11388	"\1\u0474\175\0\4\u04ab\2\0\1\u04ab\15\0\1\u04ab\6\0"+
67226	cs.getOutputStream();
52199	flight
61603	ua23f
53551	Distributed
25538	valMismatchKeys)
28124	"\u2060\u0061\u2060\u0024\u2060\u002D\u2060\u0033\u2060\u0034\u2060\u002C\u2060\u0035\u2060\u0036\u2060\u0037\u2060\u002E\u2060\u0031\u2060\u0034\u2060\u0025\u2060\u0062\u2060\u2060",
37989	testIntConversionAndOrdering()
7028	1.0f;
38111	1.0f,
53796	CharArraySetIterator
20986	remains
12225	u6af8
55121	DEL
18660	à¦¬à¦¿à¦¶à§à¦¬à¦à§à¦·
8740	(rand.nextInt(5)
178	searchTerm1,
20155	1.0f)
49929	rparen
36283	FILE_FORMAT_NAME,
4340	termCountC,
10463	"\1\25\2\0\1\25\1\140\32\36\1\141\12\142\1\u014d"+
9295	DFA
4335	termCountC)
56738	not-fully-merged
24087	Missing
22453	represents&quot;
10297	"\1\0\1\65\1\66\1\0\1\25\2\0\1\25\1\u013d"+
65794	RuntimeException("Expected
44587	"Ç§"
66711	<p><code>document.add
11742	Chars
32140	byteOffset;
61516	u6ada
63004	BAREOPER
4251	q=NumericRangeQuery.newFloatRange("float",
2816	machine
55289	assertNull(pos2);
14739	comparison
180	searchTerm2,
59822	"\4\0\2\137\150\0\1\u0101\20\266\1\u0107\11\266\1\142"+
13027	u6ae4
39672	testtermbooleanquery
6473	stack
39007	assertTrue(cm.containsKey(co,
4858	isstatic
56269	filtertermdocs
8045	note:</b>
45017	"Ç"
63713	x8521
707	IndexerThread(0,
17118	proxStream;
54680	this((File)
33881	pq.clear();
39531	termBytes,
59438	"\1\34\5\0\1\34\2\0\3\34\7\0\1\34\1\0"+
30329	stage
65095	(parent.inputCount
16067	!indexerThread2.failed);
32244	NativeFSLockFactory(TEMP_DIR);
53547	queries[0].combine(queries);
54884	WaitingListener
11072	"\1\346\32\230\1\347\2\230\1\u012f\7\230\175\0\1\346"+
14686	Can
17109	proxStream,
643	able
65197	idx=prefixLenPlus1;idx<=input.length;idx++)
23748	this.searcher
34917	testFuzzy()
8568	receive
55389	deleteDoc()
8423	lockFactory.setLockPrefix("test");
45008	"Ç"
61077	"\175\0\1\u034d\10\u02e2\1\u0552\4\u02e2\1\u0553\5\u02e2\1\u0554"+
11307	"\4\u0468\2\0\1\u0468\15\0\1\u0468\6\0\1\u046a\1\u046c"+
64537	rewrittenexclude
46529	,"(19)",
65879	test");
12626	u6aee
66561	nextperfield
35467	0x0F0F0F0F0F0F0F0FL;
43504	set()
6262	quoted);
57149	(int)(startIndex>>6);
345	testDeleteReaderReaderConflictFullMerge()
15513	delGen
40130	"DirectoryReader.ReaderCommit("
33239	this.deletedDocs
4767	assertEquals(LogDocMergePolicy.class,
48888	tve.getField();
17192	CFS
40094	commits.add(new
2592	org.apache.lucene.search.TimeLimitingCollector.TimerThread;
50038	CFR
39870	newReader.hasDeletions
62677	subSearcher;
51492	(currentReader.numDeletedDocs()
35048	filterdocidset
20086	BooleanQuery.this;
41943	tempdir
56309	insertionSort(lo,
36994	readFirstRealTargetArc(node,
45167	"Ç"
12313	ua300
64575	serve
12226	u6b9b
16945	origreader
32519	eval
49755	java.util.List<int[]>
65023	NoOutputs#getSingleton()}
36465	lastArc
65005	transition_count(node)
67532	refreshReader(reader,
43499	doTestConstructOfSize(1000);
56900	"\0\u0268\0\u0276\0\u0284";
4748	ramBufferSizeMB
25787	<code>slop</code>
2030	un-frozen
45023	"Ç"
64121	char[3];//there
28931	arr[doc];
49968	jj_add_error_token
49476	CONJ_OR;
7965	NativeFSLockFactory}.
58693	this.percentDocs
993	Throws
10095	"\2\115\7\0\3\115\2\0\2\115\12\0\2\115\1\0"+
20238	buffer.append("
45173	"Ç"
6472	Thrown
6176	MultiFieldQueryParser
39832	buffer.append('
4562	java.util.HashSet;
420	notice
28722	"/Computers/Linux"));
49203	CONJ_OR)
1954	writeField(fieldInfos.fieldInfo(field.name()),
41808	(e.getKey().startsWith(prefix))
36051	0.0000001f);
62704	subSearchers
11827	(zzCurrentPos
31352	indexDir.getName(),
52595	mergeBooleanQueries(BooleanQuery...
20270	minshouldmatch
26501	reader.document(0);
45163	"Ç"
42167	empty_ints
3497	i=0;i<numSegments;i++)
42140	while(aUpto
58933	storeTermVector)
51713	mergedDocCount
58908	storeTermVector,
49349	newWildcardQuery(Term
36330	Straight
23158	//Should
7711	demonstrating
10497	"\4\u019b\2\0\1\u019b\15\0\1\u019b\6\0\12\u019b\1\u0162"+
32661	String(originalString1,
60915	"\1\u02e1\161\0\4\u04c7\2\0\1\u04c7\15\0\1\u04c7\6\0"+
20615	TokenStreamComponents(new
57795	"third"
10573	"\1\u01d9\14\0\1\u0122\161\0\4\u01da\2\0\1\u01da\15\0"+
5445	x3ff000000000000l
54667	SimpleFSLockFactory},
51285	segName
43937	"Ç"
67563	w.addDocument(createDocument(102,
30425	yours"),
62469	similarity);
56089	QueryUtils.check(cspq(new
48698	"2")
9740	"\1\0\1\25\2\0\1\25\1\65\32\25\1\0\12\64"+
39019	cm.entrySet().iterator();
24032	"2",
3514	totalBytesSize()
31597	newLogMergePolicy()
20301	(boolean
67562	w.addDocument(createDocument(101,
58893	storeTermVector;
43233	aaa");
45208	"Ç¾"
23604	Eventually
28267	numScorers
4269	TermRangeQuery
60009	"\1\233\1\0\2\u016c\4\0\1\u016c\151\0\1\u0187\45\u0144"+
8086	curBuf;
50071	startPtr
35474	Robert
37151	bit_arc_has_output
39345	inPlaceOr(DocIdSetIterator
20021	Similarity#coord(int,int)}
43320	<code>indexOf(int)</code>
53973	closeInput();
66503	tokenTextLen));
67600	assertTrue(sr1.deletedDocs!=sr2.deletedDocs);
55451	assertTrue(fi.omitNorms
44012	"Ç"
4462	startoffset
65233	frontier[0].inputCount);
56956	StandardTokenizer.CJ;
33071	IllegalArgumentException");
30685	"\2\54\6\0\1\54\56\0\1\54\3\0\1\54\2\0"+
52183	incrementing
56976	CJ;
52157	tocommit
38622	lrfe)
23629	AtomicInteger();
17924	assertEquals("smallest
32288	prefix1);
41173	IntsRef(charCount);
11799	zzUnpackCMap(String
62457	BooleanScorer2(Weight
21844	getFieldables(String
20377	SetBasedFieldSelector(Set<String>
51500	docUpto++;
37246	nodereftoaddressin
41517	sortedAllIDsList
67564	w.addDocument(createDocument(103,
44738	"Ç"
60486	"\20\232\1\u036b\5\232\1\352\12\232\175\0\1\351\16\232"+
60185	"\1\u0259\31\266\1\142\12\266\1\0\3\137\1\0\2\137"+
15263	simOutage()
39709	termInfosIndexDivisor);
38199	assertLongRangeSplit(Long.MIN_VALUE,
45202	"Ç"
17472	"v2")));
55404	maxfields
62198	terms.size());
29980	"\1\52\147\0\2\52\134\0\1\116\153\0\2\116\11\0"+
48006	searchfiltered
5332	input_stream.BeginToken();
6651	distinct
10479	"\2\76\1\77\1\0\1\26\2\0\1\25\1\u0190\32\36"+
45782	"Ç"
48775	TermVectorOffsetInfo(j
20866	positionIncrementGap
56788	assertEquals(3*(N+1)+1,
23386	writer.getFlushDeletesCount());
31103	checksegment
44783	"Ç"
3033	example.</p>
50037	directory.createOutput(fileName);
36763	FIXED_ARRAY_NUM_ARCS_SHALLOW)
26023	comparators[i].setScorer(scorer);
58519	copy.size());
57288	prevSetBit(int
65625	oldDeletable.size();
16179	TestExplanations
60386	"\12\232\253\0\1\u016c\1\u016d\1\u016e\162\0\1\u0101\1\266"+
66797	QueryTermVector(String
24208	"y"));
25260	"*n?",
48684	(!this.__test_dir.delete())
12311	ua1ba
50115	updating
27491	[13.2]
36021	"y")),
44347	DIGRAPH
11947	ZZ_CMAP;
29245	SegmentTermPositionVector(field,
46730	,"$",
55381	(sameFieldOrder)
52745	*****/
34507	sb.append("mergedSegmentWarmer=").append(mergedSegmentWarmer).append("\n");
4030	clearattributes
45853	"Ç"
24202	getXIndex();
27315	"\u003A\u0308\u0061\u003A",
9682	"\2\0\2\25\4\0\3\25\4\0\1\25\2\0\1\25"+
39504	".tii"
28375	visitor
8583	sinks,
27190	[13.1]
36310	nodeRefToAddress.length
8594	sinks)
32664	String(originalString2,
10555	"\1\273\1\274\1\275\1\276\1\277\1\300\1\301\1\302"+
9567	"\1\u9d3b\1\u9dde\1\u9e81\1\u9f24\1\u9fc7\1\ua06a\1\ua10d\1\ua1b0"+
36833	BytesRef());
10175	"\1\172\3\0\1\135\33\136\12\267\1\0\3\136\1\0"+
45289	"Ç"
50687	getMaxFieldLength()
17825	default_term_count_cutoff
7882	<p>Due
10566	"\2\0\1\75\41\0\1\25\2\26\2\0\2\76\1\77"+
42490	PoolingPayloadTokenStream(ByteArrayPool
57417	ensurecapacity
10311	"\1\25\1\u013d\1\u0147\31\36\1\141\12\142\1\u013e\1\136"+
19681	useAdvance);
29320	getPayloadLength();
42728	Attribute}s,
61365	"\1\u0657\6\0\12\u0657\1\u0658\174\0\1\u03a1\4\u0657\2\0"+
37356	CodecUtil()
11736	Alphanumeric
29718	"\1\0\3\25\2\0\1\25\1\0\2\25\1\0\3\25"+
2837	"2*"
33225	testlucene_3042
40004	(<code>write.lock</code>
40345	scoreCache[freq]
59192	"\3\ubcfd\3\ubda0\3\ube43\3\ubee6\3\ubf89\3\uc02c\3\uc0cf\3\uc172"+
20759	other.data[other.offset+i])
45784	"Ç"
33074	flagsAtt.setFlags(1234);
17722	BooleanQuery.getMaxClauseCount();
15825	filesSet.add(IndexFileNames.segmentFileName(docStoreSegment,
8508	Field("f2",
56419	forceMergeDeletes2");
3785	even
2185	ever
1796	abort();
33146	TypeAttributeImpl",
20399	precedence
40501	clazz.isAnonymousClass()
17659	CPU
26571	reader.termPositions();
45857	"Ç"
58915	(isIndexed)
32145	slice[upto-2];
30383	twophasecommittool
50664	<p>Returns
17207	notify
8079	MMapIndexInput
27355	"\u002C\u0308\u0300",
11386	"\2\u04a8\1\u046f\1\u04a8\1\u046f\255\0\1\u0169\230\0\1\u03e8"+
12627	u6b91
45855	"Ç"
55043	doPooling="
61027	"\1\351\30\232\1\u052a\1\232\1\352\12\232\175\0\1\351"+
13028	u6b87
5614	SmallFloat.floatToByte(f,3,15);
61517	u6b7d
31903	DEFAULT_BYTE_PARSER;
48648	endconsumer
30299	prepareCommit()
40551	TestFSTs
58789	char[20];
60298	"\1\u02cc\10\266\1\0\3\137\1\0\2\137\1\140\3\137"+
6927	q.minInclusive
30349	commit",
60303	"\1\u0101\5\266\1\u02d0\23\266\1\u02d1\1\142\12\266\1\0"+
34694	incrementTokenClassic();
16677	fail("deleting
41530	!outOfBounds.contains(id);
65894	testStopwordsParsing()
57309	otherArr
17317	booleanQuery
27546	"\u00AD\u000B",
58142	r.numDocs();
8809	before()
45702	"È¶"
12232	u6f6d
25339	matchonedocwild
8746	docs.remove(delID);
8233	unset
1579	IndexSearcher(reader);
1966	getfields
16149	scc.collect(doc);
60288	"\2\137\150\0\1\u0101\26\266\1\u02c3\3\266\1\142\12\266"+
59885	"\1\232\1\352\12\232\175\0\1\351\2\232\4\u016f\3\232"+
55696	RAMDirectory(addDir));
58035	finishDocument(PerDoc
49967	generateparseexception
39557	utf16Result1.length
17265	cfsdir
3921	dataLen)
55768	ace)
59164	"\3\u2e5d\3\u2f00\3\u2fa3\3\u3046\3\u30e9\3\u318c\3\u322f\3\u32d2"+
29487	testRuleInvariantInTestMethod()
31841	deprecation
60036	"\1\301\1\302\1\303\1\304\1\305\1\306\1\307\1\310"+
15437	(2.1)
1457	setcheckindexonclose
8049	maxChunkSize)
33384	userdata
58792	utf8);
3664	ACRONYM_TYPE
62516	countingDisjunctionSumScorer(optionalScorers,
12633	u6f63
60438	"\4\u0340\2\0\1\u0340\15\0\1\u0340\6\0\12\u0340\1\u0272"+
20582	collationkeys
61523	u6f4f
49001	CONJ_NONE
58879	IllegalArgumentException("bufferSize
28378	numStrings
7264	meaning
54283	sizes.length
25319	mxtals
28246	undefined.
13034	u6f59
28642	assertTokenStreamContents(stream,
4901	java.text.Collator;
7713	TestLazyBug
38649	doc.add(newField("unindexed","test1",
23339	runStressTest(directory,
10598	"\6\136\12\u013f\1\0\3\136\1\0\2\136\1\137\3\136"+
28863	addField(DocInverterPerField
61695	udcd3
18674	à¦à¦à¦¨
34817	prevEndOffset;
57833	testindexwritercommit
16441	Initialize
24712	HashMap<K,V>
36846	last?="
3922	dataLen;
12805	udce7
61602	ua19c
4118	ascfield2.setIntValue(val);
12404	udcf1
2346	factors
987	(3+(1-i)*2)*NUM_THREAD*NUM_ITER;
13206	udcdd
10124	"\4\352\3\36\2\352\1\363\1\352\1\36\2\352\12\36"+
3823	factory
30390	failoncommit
61313	"\1\u0632\1\u0631\2\u0630\2\u0631\1\u0630\1\u0631\1\u0630\1\u062f"+
40900	fst.outputs.outputToString(pair.output));
25645	that)
2194	that,
34137	t[0]
25911	that.
30909	0.39971232f,
38356	x7ffffffffffffl
51454	bufferedDeletesStream.bytesUsed();
4476	constant_score_boolean_query_rewrite
38556	IOException");
57259	BitUtil.pop_array(b.bits,
9189	queryLimits;
64217	that:
50953	updateDocument(term,
25648	that;
67810	store.close();
31491	asString(expected)
32995	perdoctvf
19511	closeWhileHandlingException(E
26276	original.arrayOffset(),
17175	ref.incrementAndGet();
59955	"\10\266\1\u0107\21\266\1\142\12\266\1\0\3\137\1\0"+
40810	Builder<T>(inputMode
7568	reason
5705	otherwise
53760	<code>len</code>
48660	startlength
7630	return("Lexical
29056	tvf.length();
1969	fieldsstream
65547	CollectionUtil.mergeSort(commits);
26319	sufficient
42475	reader.termPositions(terms.term());
20571	streams.source
52866	RIGHTS.
24343	System.out.println("rev
2197	factor.
53909	assertEquals("1234",
63734	x8641
8995	bytes.grow(prefix
63737	x8643
63735	x8642
58867	ud917abcd
10728	"\4\0\1\u0212\151\0\46\u0214\1\0\2\u0214\1\u026d\3\u0214"+
67975	MockHoleInjectingTokenFilter(random,
25520	List<Insanity>
17438	termfreqvector
16194	doc.add(newField(ALTFIELD,
20419	EDT
65856	createDummySearcher();
29	regarding
26716	org.apache.lucene.document.Document}
68042	rightOffset.startOffset());
63541	+=8;
18356	testBooleanRequiredEqualScores()
2766	0!",
58776	r.nextInt(1+end-start);
63731	x8632
63730	x8631
56132	F);
28059	"\u0031\u002E\u2060\u0061\u2060",
58031	tvx.writeInt(TermVectorsReader.FORMAT_CURRENT);
57312	while(--pos>=0)
9373	"\12\134\6\0\130\132\10\0\51\132\1\133\1\132\5\0\106\132\12\0"+
30536	"\16\0\1\111\15\0\1\112\14\0\1\113\16\0\1\114"+
17879	F),
64500	includeSpans.skipTo(target);
62816	<p>Many
63728	x8621
35652	probability
51602	(segmentsToMerge.containsKey(info))
55388	docs.put(idString,
23224	100.0f;
9419	"\10\32\5\20\3\7\12\106\20\7\3\13\32\27\1\12\2\24\2\107"+
26081	trackDocScores,
26073	<code>trackDocScores</code>
17238	si.docCount);
42426	b2.length);
52258	balanceram
5843	blocks;
28399	100).toCharArray();
5874	blocks.
5774	blocks,
67149	SortedTermVectorMapper(Comparator<TermVectorEntry>
12711	ua10d
49048	QueryParser#setDefaultOperator}
65026	saving.
16604	updateTop();
16247	MultiPhraseQueries
56235	methodsThatShouldNotBeOverridden.add("clone");
56497	top().start();
62900	conf.setMergePolicy(mergePolicy);
5719	keywordattribute
12310	ua117
29538	floatfieldsource
57726	MockFixedLengthPayloadFilter(random,
55906	Map<Thread,T>
15710	(filter.accept(null,
9283	href="http://www.jflex.de/">JFlex</a>
4516	getenum
64219	<li>Best
67196	termtotve
8992	((code
54597	act;
65581	(writeTo
32891	j=0;j<numPostings;j++)
41581	allTermsList
60201	"\1\u0268\15\0\1\u0268\6\0\12\u0268\1\u0269\174\0\1\u01ce"+
23476	testErrorAfterApplyDeletes()
41937	charidx
67252	(TermAttributeImpl)
35108	currentbufferindex
24837	allowDups="
90	org.apache.lucene.document.Document;
8983	"");
6362	IllegalArgumentException("queries,
21259	seekTo)
36714	Short-circuit
63745	x8653
63749	x8654
63742	x8651
63743	x8652
5923	BLOCK_BITS);
18831	"ï¼ï¼ï¼ï¼",
60792	"\4\u046c\2\0\1\u046c\15\0\1\u046c\6\0\12\u046c\1\u046d"+
16782	norm1);
4619	validate
12926	u2a95
35686	(y==0)
8952	enumerated.
61448	"\160\0\1\u034d\32\u02e2\1\u034e\1\u068c\11\u02e2\175\0\1\u034d"+
7926	undocumented
13327	u2a8b
5216	jjCanMove_1(int
12525	u2a9f
30970	testinvalidarguments
18539	"ÕÕ«ÖÕ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ«",
22085	June
43022	reference);
7467	ends[nextTokenIndex]);
60330	"\4\0\1\206\14\0\1\62\4\0\1\207\2\0\1\210"+
12405	udd94
67589	testDeletes()
57507	GCed
42923	((TypeAttribute)
44841	"È·"
50324	pooled,
12806	udd8a
26086	field");
51519	reference),
24243	"DHFJB");
16538	(after
37728	d.add(newField(ID_FIELD,
65963	mfqp.parse("w?ldcard");
61808	u2a81
35922	input.read(buffer);
65225	1+input.length)
43846	"Error
54350	DEFAULT_MAX_TOKEN_LENGTH;
38839	LUCENE-1718:
54499	while(currentSize
11412	"\13\0\1\u0122\160\0\1\346\32\230\1\347\1\u04ba\11\230"+
4133	field="field"+precisionStep;
14822	(other.locale
24798	dataIntVal(fdocs[i].doc,
54488	delegee.coord(overlap,
41180	ints.ints[ints.offset+charIDX];
35600	B[i+4]),
53186	publish
10223	"\3\u0103\1\264\1\u0103\1\264\1\u0103\1\264\1\u0103\1\264"+
24364	assertFalse("Found
574	Field.TermVector.WITH_POSITIONS_OFFSETS));
29795	"\5\25\1\0\5\25\1\0\2\25\1\0\3\25\1\0"+
22044	nrtmanager
24883	hitIDX
66640	SorePoint.RULE;
17631	testDefaultValueWithoutSetting()
15034	NoMergeScheduler}
35835	paralleltermenum
44344	"È¸"
66307	(TermsHashPerField)
52259	term.*/
23304	customsimilarity
17786	#getEnum(IndexReader)}.
25584	readerFields
58749	"\ud917\ud917abcd",
29464	pass.");
60365	"\175\0\1\351\1\232\1\u02fd\30\232\1\352\12\232\175\0"+
1727	_NUMERIC_BIT_SHIFT;
7592	retval.append("\\r");
39621	lastti
64171	udd60
37876	not-GCed
17431	dividing
42127	upto=offset;upto<end;upto++,otherUpto++)
43363	SortedVIntListBuilder()
20420	writer.addDocument(createDocument("Document
35293	proxoutput
64310	docCountPercent;
21427	assertFalse("Now
9951	"\3\136\2\0\1\172\1\136\4\0\2\136\2\0\1\202"+
38219	(random.nextInt(63));
40294	rollbacksegments
65725	verbose_ref_counts
36596	getBytesReader(getNodeAddress(follow.target));
7509	doc.docID
30718	"\1\130\56\0\1\130\3\0\1\130\2\0\1\130\3\0"+
55022	1+random.nextInt(10);
17362	w.w.getConfig().setMaxBufferedDocs(17);
61071	"\12\u0509\14\0\1\u02e1\214\0\12\u054c\14\0\1\u02e1\214\0"+
36209	other.node;
15141	testLatentFields()
62265	"3")
23986	"3",
13207	udd80
40887	assertNotNull(pair.input);
39886	openReadOnly,
39899	openReadOnly;
52416	for(all
58557	testContainsWithNull()
23900	tracker.version
38444	Field("tvnot","tvnot",
42155	grow(int
19167	ØØ§Ø
30590	"\1\37\1\0\1\40\1\0\1\41\1\0\1\154\3\0"+
33206	settype
64891	MultiThreadTermVectorsReader[]
63871	LowerCaseTokenizer(Version.LUCENE_30,
32101	byteUpto,
30735	u2a3f
65597	(segmentName
64427	Decompress
39573	String(lastTermBytes,
66942	add(Pair<A,B>
3192	ArrayList<SegStart>();
20431	08:02:09
39820	subReaders[i].norms(field,
32112	byteUpto;
39855	openReadOnly)
63062	"<RANGEIN_QUOTED>",
11641	"\1\u02cf\160\0\1\346\32\230\1\347\5\230\1\u055f\4\230"+
61696	udd76
10513	"\1\u01a3\24\230\1\u01a6\5\230\1\347\12\230\175\0\1\346"+
17262	segmentreaders
65041	willPackFST);
10077	"\1\25\11\0\2\25\2\77\4\0\2\25\3\77\10\0"+
66501	!postingEquals(termID,
61601	ua0f9
46623	BRACKET
55354	String(arr);
27981	"\u0031\u0027\u0031\u002E\u2060",
23808	//System.out.println("RECORD
48902	docNumAwareMapper.setDocumentNumber(-1);
24218	Sort();
16657	unused
38888	InterruptedException
8506	Field("f1",
56910	"\15\0\1\45\4\0\1\24\1\25\7\0\1\46\15\0"+
6767	(with
26987	"\u0001\u005F",
29147	tvf.readVInt();
48381	ScorerDocQueue(nrScorers);
43121	newq.add(query,
48056	(forcefully
588	doc.add(idField);
38274	assertIntRangeSplit(final
54679	NativeFSLockFactory()
17353	assertNotNull(dis);
59165	"\3\u3375\3\u3418\3\u34bb\3\u355e\3\u3601\3\u36a4\3\u3747\3\u37ea"+
42633	TestPrefixQuery
40733	value2);
51580	generally,
22335	Natural
65423	rord("apple")=3,
57910	FilenameFilter
34660	((function
15112	reference",
41919	countminoutput
20750	Just
18610	"ÙÙÙÙØ¨ÙØ¯ÙØ§",
8281	chunksizepower
31015	testIndexAndMerge()
32153	(16|newLevel);
65262	(seen
12123	u2a06
49591	RANGEIN_QUOTED:
24436	docValues
29218	storingPositions;
10447	"\1\65\1\66\1\0\1\25\2\0\1\25\1\140\5\36"+
56105	testEqualScores()
19985	setflags
49735	jj_scanpos.next
64170	udd1e
49604	RANGEIN_QUOTED)
51126	docWriter.abort();
1809	adds
14625	DOC
33725	rptStack;
67407	multiReader1.close();
10417	"\6\230\1\u017b\7\230\1\347\12\230\175\0\1\346\1\u016a"+
39795	newReaders[i].decRef();
42375	tp.skipTo(skipInterval
37380	CODEC_MAGIC)
15853	dir.fileExists(fileName))
43093	setMergePolicy(newLogMergePolicy(1000))
3152	other.setNextReader(seg.reader,
37549	"part"));
23176	uncomment
16835	goes
2119	rehash()
68029	right.addAttribute(OffsetAttribute.class);
49372	(termStr.startsWith("*")
15693	dir.fileExists(fileName);
58544	testCopyEmptySet()
63539	+=16;
56287	insertionSort(int
21855	result.add(field.stringValue());
17469	queryTest(new
4494	float_nans
43944	DOT
23036	writerA.forceMerge(1);
24941	adcb
65189	System.arraycopy(frontier,
54087	a1.toArray(new
24849	Field.Index.NOT_ANALYZED_NO_NORMS));
24437	"parser",
36752	Fixed
65931	+two");
28845	docInverterPerThread,
58674	NRTCachingDirectory(newFSDirectory(_TestUtil.getTempDir("foo")),
46727	,"#",
61156	"\24\u02e2\1\u0597\5\u02e2\1\u034e\12\u02e2\175\0\1\u034d\24\u02e2"+
24557	SortField.STRING));
7227	bitspans
29606	"\2\0\21\132\1\0\32\132\5\0\113\132\3\0\3\132\17\0\15\132"+
40513	AttributeImpl}s
47915	prepareCommit(commitData);
24073	"HOT",
33553	testString
40845	OutputStreamWriter(new
37043	topCount++;
7938	blocked
24937	adbc
51178	(dups.contains(dir))
65983	bar\"~4");
37314	boolean)
14522	zz_attribute_packed_0
25935	boolean,
4703	testClone()
1313	Token
62759	rebaseDocIDs(docStarts[shardIDX],
4017	bufferindex
10241	"\12\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
56927	"\1\40\1\0\1\15\1\0\1\11\2\15\1\16\1\40"+
48940	docnumawaremapper
31878	FieldCache#getBytes(IndexReader,
53768	PLACEHOLDER)
22627	dates,
58741	"\udc17\udc17abcd",
10549	"\1\u01cc\3\0\1\u01cd\1\0\2\u01c8\4\0\1\u01c8\230\0"+
7843	java.io.File;
64402	ByteArrayOutputStream
40415	fixes,
65589	commits.remove(size-1);
53368	SimpleFSIndexInput",
58450	set.removeAll(new
6436	until
24782	assertIntResultsOrder(collectorMin,
17325	QueryWrapperFilter(new
11092	"\1\136\4\0\2\136\150\0\1\376\1\264\1\u0316\30\264"+
29632	"\120\0\32\144\1\0\131\144\14\0\326\144\57\0\1\132\1\0\1\144"+
10501	"\1\u0169\2\0\2\u0167\4\0\1\u0167\151\0\51\u0168\1\u01a1"+
27798	"\u0061\u0027\u2060\n",
64352	pendingTerms
3834	CharTokenizer(AttributeSource
54883	reference.getIndexReader().tryIncRef();
64910	totalTime/mtr.length);
33756	<br>Possibly
34125	ext,
65077	freezeTail.freeze(frontier,
22143	borrowed
51884	directory.makeLock(IndexWriter.WRITE_LOCK_NAME).release();
24608	testSortWithScoreNoMaxScoreTracking()
57617	CharFilters
15590	ext;
16547	consistently,
29163	byteBuffer;
36313	inCounts.length
62373	s(Spans
55442	assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));
17167	(will
48416	scorerDocQueue.topScore();
37816	queryexpl
49208	modification
1611	termPosition
48044	sync(String
61271	"\1\u0608\2\u02e2\175\0\1\u034d\32\u02e2\1\u034e\10\u02e2\1\u048e"+
64592	(bufferLength-bufferPosition))
19767	poslimit
5564	(from
749	IndexerThread(i,
30473	comparator);
35615	sets.
7795	testLazyAlsoWorks()
63037	"<_WHITESPACE>",
10628	"\1\376\17\264\1\u0203\12\264\1\141\1\u0204\11\264\1\0"+
58801	utf8.length,
48569	field.getBoost();
26943	"\u0001\u000B",
32204	(writer2
16273	snear(String
62988	diffiles
4084	NumericField("ascfield8",
40132	deletions");
4099	splitting
20871	analyzerMap.get(field.name());
67757	System.arraycopy(cb.array(),
56810	testexpirationtimedeletionpolicy
61521	u6e09
37633	termAttr
5761	MOD_MASK
1347	tokenfilter
42916	((PositionIncrementAttribute)
63228	addBuffer(int
18801	"à½ à½à½²à½¦",
470	assertequals
59271	"\3\0\1\54\2\0\1\55\3\0\1\56\7\0\1\57"+
66907	(a.equals(outputs1.getNoOutput()))
27495	"\u005F\u0308\u3031"
61420	"\1\u0677\15\0\1\u0677\6\0\12\u0677\14\0\1\u033c\161\0"+
25761	badkids
21000	diskUsage
34818	termAtt;
62519	countingConjunctionSumScorer(disableCoord,
45220	"È°"
29754	"\1\32\1\0\3\32\1\0\5\32\1\0\3\32\1\0"+
12710	ua06a
7527	byteslicereader
12309	ua074
43646	single-file
65196	freezeTail(prefixLenPlus1);
2882	failed!",
55251	f2.stringValue();
7118	numericfields
12631	u6e1d
12230	u6e27
41269	assertSame(TermEnum
33115	termAtt,
21692	non-congruent
2364	TermSpans);
46820	termAtt)
19574	charSet)
57867	SimpleFSDirectory.SimpleFSIndexInput
8811	@After
27886	"\u0061\u002C\u0031\u002E\u2060",
10597	"\1\u0169\162\0\1\135\4\u013f\2\136\1\u013f\15\136\1\u013f"+
16371	CharFilter2
61468	"\32\u02e2\1\u034e\1\u02e2\1\u069b\10\u02e2\175\0\1\u034d\3\u02e2"+
16366	CharFilter1
26793	doc2.add(newField("field",
13032	u6e13
21203	termnumber
2216	segmentInfos,
49420	character.");
63506	bits2int(val):
13111	ua060
40075	isCurrent()
42151	int[other.length];
54395	positive.
6434	BrokenCloseable(int
2214	segmentInfos)
63767	x8742
61600	ua056
63766	x8741
52658	Object.class)
63769	x8743
54571	compareTo(Item
22752	FieldCache.FloatParser
17993	positive'
9630	"\2\ude23\2\udec6\2\udf69\2\ue00c\2\ue0af\2\ue152\2\ue1f5\2\ue298"+
40767	FST.Arc<T>());
43479	testspantermversusterm
23316	j<10;
48565	FI:
22543	sophisticated(TM)
60493	"\32\232\1\352\3\232\1\u0374\6\232\175\0\1\351\5\232"+
42389	byte[tp.getPayloadLength()];
49017	lowercaseExpandedTerms
43197	adoc
63763	x8732
63762	x8731
51826	segmentInfos:
21098	DummyConcurrentLock();
39680	segmentInfos;
67882	tokens.get(upto++);
52300	getProcessor(Term
18240	(freq
9289	YYEOF
56639	onCommit(commits);
51343	hardware
22860	SpanNearPayloadCheckQuery
19064	testSupplementary()
6173	$Revision:
23979	"5",
53571	cacheSim
63791	x8762
63790	x8761
63797	x8764
63793	x8763
24250	SortField.DOUBLE),
63805	x8765
39975	Arrays.fill(result,
60302	"\32\266\1\142\4\266\1\u02cf\5\266\1\0\3\137\1\0"+
28477	binaryValStored
2379	spanTermQuery
63774	x8751
48899	docNumAwareMapper.getDocumentNumber());
43954	"Èº"
63781	x8754
63777	x8753
63775	x8752
42729	<p>Tokenizers
44561	FFL
1760	FORMAT_LUCENE_3_2_NUMERIC_FIELDS
15452	filesystem
44557	FFI
32506	dir1.failOn(new
35345	assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());
66688	testfailurebeforeclass
49182	resolution;
9841	"\7\0\3\25\2\0\2\25\12\0\2\25\1\0\3\25"+
22052	QueryFilter
48990	resolution.
56672	resolution,
54277	byte[sizes[i]];
3288	"out-of-order
36520	selectively
56298	Javadocs:
33332	rollbackPoint;
64419	Deflater.BEST_COMPRESSION);
17691	#setRewriteMethod
41639	assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE
55196	termDocs1.seek(termEnum1);
34719	assertEquals("(multi
63896	SMP->BMP
7800	iterator
12228	u6ce1
61725	uefed
33334	rollbackPoint)
13030	u6ccd
55805	w.forceMergeDeletes();
51489	collapsed
56263	issynthetic
15136	assertTrue("byte["
13236	ueff7
49192	getRangeCollator()
55434	doc.getFields("textField2");
32785	encodedlen
38454	assertTrue(allFieldNames.contains("text"));
51085	Explicit
38268	-5000L,
48988	resolutions
56863	"\2\12\42\0\1\12\37\0\12\2\26\0\10\12\1\0\42\12\35\0"+
46188	NEGATIVE
27438	"\u0030\u002C",
56539	exclDoc
29361	!eof();
29248	SegmentTermVector(field,
33938	"hidden
62983	in.readBytes(b,
33933	Without
60410	"\32\266\1\142\2\266\1\u0326\7\266\1\0\3\137\1\0"+
22490	VirtualMethod<AttributeImpl>
27621	"\u0300\u0308\u0031\u003A",
159	readers
64981	freezeTail;
42912	to.payload
54675	FSLockFactory
24859	Sort(sf);
65035	freezeTail,
34171	firstposition
36479	!doFixedArray)
52118	justified
23782	AlreadyClosedException("this
13112	ua103
55560	iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);
27465	"\u0030\u0308\u0061\u003A",
15463	(both
37604	exc:
26832	System.arraycopy(buffers,
36691	arcs...
4738	0");
6524	0.03f,
48566	"genericized"
22895	buffer.append("spanPayCheck(");
5799	bitPos
38697	fieldInfo2.name);
18692	"à§§à§«",
7613	EOF
61428	"\1\u034d\1\u067b\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
3486	this.paused
15969	deletes_extension
553	volatile
10070	"\236\0\2\26\231\0\1\76\147\0\1\26\104\0\1\26"+
35052	circuited
48428	nrMatchers;
16965	<li>
55411	indexrandom
35647	zeros
1839	corruption
1399	setmergescheduler
30905	8.365894f,
9455	"\1\12\1\0\3\12\6\2\1\0\1\2\2\0\1\2"+
3547	exc,
8209	ByteBuffer[buffers.length];
61519	u6cc3
55777	excs
7598	retval.append("\\\\");
34871	testmultianalyzer
10038	"\1\0\4\25\2\0\1\25\2\0\4\25\1\0\1\65"+
65924	mfqp.parse("one
25251	"*abc**",
36458	writer.writeVInt(nodeIn.numArcs);
15377	binaryvalue
6954	NumericUtils.doubleToSortableLong(Double.NEGATIVE_INFINITY);
22700	(FieldCache.ByteParser)
63852	testExtendCharBuffer()
68082	size(bitsPerValue,
1170	corrupting
12629	u6cd7
39135	positions.add(Integer.valueOf(position));
38154	(expectedShifts
32082	Allocator
40884	(pairs.size()
18735	"ÙÙØ´ØªÙ",
20904	zero:
22847	getshorts
28373	relationship
51940	deletion).
15703	pattern
22133	END
23968	i18n
56877	"\15\12\5\0\3\12\1\0\7\12\202\0\1\12\202\0\1\12\4\0"+
42078	zero.
20192	(in-order)
33638	incrMin
45095	ENG
20306	1.0);
49105	zero,
4019	finaloffset
4270	cq=new
12125	u2b4c
16195	docFields
16654	consistently
58629	TestNRTCachingDirectory
58189	persistSnapshotInfos(id,
4277	searcher.search(cq,
55417	indexingthread
68059	maxlength
34846	...".
59981	"\2\u01a5\1\u01a1\2\u01a5\2\u01a1\1\u01a5\1\u01a1\1\u01a5\1\u0167"+
36954	newNodeAddress
57235	exchanges
56444	""+(42+17)));
25561	badEntries.toArray(badness);
56292	swap(j
67167	offsets.length];
49846	defaultminsimilarity
53643	dfmap
16364	testCharFilter12()
14570	inputstream
28789	skipBuffer[i].reset();
10176	"\2\136\1\137\3\136\3\0\1\136\4\0\2\136\2\0"+
50837	finishMerges(waitForMerges);
43176	this.priority
62269	"4")
56294	unstable,
24911	indexstore
24070	"4",
56785	.setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));
63906	offsetAtt.endOffset());
24489	exec
31873	super-interface
53974	bytesRef
3949	MAX_WORD_LEN)
925	sudden
25075	docidtoid
31662	changeindexwithadds
20367	fieldsToLoad;
26598	j<reader.maxDoc();
67015	i.close();
28525	binaryfldstoredtest
39098	not_in_map
66624	ASSUMPTION:
20145	minShouldMatch);
30738	u2b74
33457	IndexFormatTooOldException(DataInput
42033	super.toString();
34788	testPosIncrementAnalyzer()
38453	assertTrue(allFieldNames.contains("keyword"));
35355	ASSUMPTION,
14840	Sort}.
60400	"\150\0\1\u0101\32\266\1\142\1\u031f\11\266\1\0\3\137"+
54995	waitongencondition
38912	unstored2
63760	x8721
37108	Comparable<NodeAndInCount>
53972	origNorm
10455	"\32\264\1\u018a\12\264\1\0\3\136\1\0\2\136\1\137"+
20378	fieldsToLoad,
18121	ConstantScorer(similarity,
6323	certain
67758	cb.arrayOffset()
19401	UweSays:
4915	org.apache.lucene.search.PrefixQuery;
56961	ACRONYM_DEP
22623	Due
42461	payloadAtt.setPayload(null);
53885	testFillNoHighSurrogate()
15915	s.append('+').append(docStoreOffset);
1476	TermInfosReaderIndex
32937	fieldState.attributeSource.addAttribute(OffsetAttribute.class);
61236	"\7\232\1\u05eb\22\232\1\352\12\232\175\0\1\351\1\u05ec"+
28622	refill
30737	u2b0d
6330	"contents",
41545	String.format("%07da",
10388	"\4\u016a\1\230\1\u016a\1\230\3\u016a\1\347\12\230\175\0"+
39879	commit);
10394	"\12\230\175\0\1\346\4\230\1\u0171\5\230\1\u016a\17\230"+
53817	set.</li>
39896	(reader.getVersion()
61809	u2b24
9901	"\12\0\2\114\1\0\3\114\1\0\1\114\2\0\4\114"+
37819	divides
25913	commit).
20722	Allocates
8454	exit
4780	he'll
49785	jj_expentries.clear();
55026	doReaderPooling);
20917	setPositionIncrement(int
64590	readInternal(b,
42531	fieldtodata
6634	divided
11893	zzBuffer[zzStartRead+pos];
32728	testRandomBinaryRoundTrip()
21468	cross
29425	TestSimpleExplanations
12927	u2b38
15418	testfieldswriterexceptions
48021	instance).
1154	in.close();
49145	setLowercaseExpandedTerms(boolean
2	org.apache.lucene.index;
29626	"\3\0\5\132\6\0\1\132\1\0\1\132\1\0\1\132\1\0\4\132"+
11494	"\1\u0325\226\0\1\u0469\13\0\1\u0325\214\0\12\u04d5\14\0"+
8339	acquires
66985	assertTrue(doc.getField("content")
28611	ignoring.");
13328	u2b2e
11084	"\175\0\1\346\24\230\1\u03c0\5\230\1\347\12\230\175\0"+
62253	field("id",
12807	ude2d
19818	s.doc(h[i].doc).get(ID_FIELD);
32884	TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;
58000	perField.shrinkHash();
21048	fail(testName
43077	acquired
23138	etc...
28539	trigger
12406	ude37
16295	optB(makeQuery(q));
35280	lastSkipFreqPointer[level]));
12526	u2b42
37947	Object();
30934	testZeroResults()
19565	Unlike
59118	"\2\u44b0\2\u4553\2\u45f6\2\u4699\2\u473c\2\u47df\2\u4882\2\u4925"+
9516	"\0\u9ab9\0\u9b5c\0\u9bff\0\u9ca2\0\u9d45\0\u9de8\0\u9e8b\0\u9f2e"+
13208	ude23
31296	w.addIndexes(dir);
27089	"\n\u0308\u003A",
52750	exp:
31518	Field("content4",
30888	HitQueue(size,
58816	UnicodeUtil.UTF16toUTF8(chars,
26174	get(int
38959	testuniquetermcount
24429	compareBottom(int
59983	"\2\u016c\4\0\1\u016c\151\0\51\u016d\1\u01a7\3\0\1\u016d"+
60859	"\3\232\1\u049d\26\232\1\352\12\232\175\0\1\351\32\232"+
36367	bytes[writer.posWrite-upto-1]
11708	zzReader;
62425	i2);
26888	sets:
44257	ETH
65749	sets;
61520	u6d66
54686	NativeFSLockFactory(File
17270	cfsreader
61697	ude19
42264	instance's
29526	testnonstringproperties
3334	cachedscores
11490	"\1\u04cf\13\0\1\u0325\160\0\1\u0386\4\u04f8\2\0\1\u04f8"+
48608	startLength
3328	cachedscorer
53599	this.searchable
13031	u6d70
23584	commit()
34174	fillqueue
10377	"\175\0\4\u015d\2\0\1\u015d\15\0\1\u015d\6\0\1\u015e"+
52684	expl
65873	testNestedConjunctionPerf()
12229	u6d84
28793	bufferSkip(int
2532	setup
10970	"\1\346\5\230\1\u0364\23\230\1\u0365\1\347\12\230\175\0"+
17371	aDocs.remove(delID);
1273	_TestUtil.nextInt(random,
12630	u6d7a
60158	"\1\u0232\2\232\1\u0233\1\u0234\1\u0235\1\232\1\u0236\1\u0237"+
56823	assertNull(writer.newestSegment());
41471	c));
15998	this.allThreads
6099	testCopyTo()
46563	ORNAMENT
628	exception1");
10854	"\30\230\1\347\12\230\175\0\1\346\31\230\1\u02ee\1\347"+
41239	(randomTerm.length()
27677	"\u0061\u2060\u0061\u0027\u2060",
22423	swap
4466	newintrange
43005	Semaphore(1);
6319	((BooleanQuery)q).getClauses().length>0))
28966	Changes
56664	policy.numDelete
59089	"\2\13\1\0\4\13\2\0\2\13\1\12\111\0\1\13"+
66991	doc.add(newField("sizeContent",
58997	MMapDirectory(_TestUtil.getTempDir("testSeeking"));
11039	"\160\0\1\u0332\4\u0395\2\0\1\u0395\15\0\1\u0395\6\0"+
37643	lastDoc
31892	LongParser
16141	ScoreCachingCollector(scores.length);
12321	ua818
26777	SpanPositionRangeQuery))
60947	"\2\0\1\u04da\15\0\1\u04da\6\0\2\u04db\1\u04da\2\u04db"+
11817	(zzStartRead
15498	("3.0",
30250	default_cache_size
30768	afer
12722	ua80e
17462	single(random);
53757	map){
49906	newmatchalldocsquery
698	((ConcurrentMergeScheduler)
42479	byte[5];
29856	"\4\0\1\25\5\0\1\25\3\0\1\102\4\0\1\102"+
27100	"\n\u0300",
56418	assertEquals(60,
11062	"\1\347\10\230\1\u01ab\1\230\175\0\1\346\32\230\1\347"+
1746	Changed
34281	writeLockTimeout
63376	0x7654321,
988	assertEquals("i="
16499	size;
8054	size:
14841	sortPos==0,
22754	transform
33631	quaxot
42456	numFieldInstancesToSkip
3513	size.
7880	size,
62802	docFieldLocs)
1591	size)
51933	disallows
25842	spanNearQuery;
2880	threadArray[i].join();
37962	map's
20527	Collator#setStrength(int)}
16623	upHeap()
28053	"\u0031\u002E\u2060\u005F",
66015	assertEquals("+((b:one^5.0
48159	spanNearQuery,
67672	getsubreaders
59931	"\4\0\1\u0143\1\137\150\0\1\u0187\45\u0144\1\u016d\2\u0144"+
18564	á¥á
48132	<pre>t1
13123	ua804
49002	CONJ_AND
67931	endOff="
27182	"\u3031\u003A",
31516	Field("content3",
60870	"\175\0\1\351\12\232\1\u04a9\17\232\1\352\12\232\175\0"+
5507	getimage
62169	iw1.getReader();
21286	sizes
8088	speed:
46233	,"2",
59579	"\1\355\1\362\6\355\4\36\4\355\1\36\1\355\1\36"+
10521	"\1\347\12\230\231\0\12\u01ac\10\0\1\u0167\1\u0168\1\u0169"+
57342	union}
63261	0x421,
1341	printstream
63063	"<RANGEIN_GOOP>",
36519	sized
36969	fst.nodeCount
34531	InputStream}.
21794	<p>Adds
6686	speed.
4931	jjStopStringLiteralDfa_3(int
25517	readerFieldToValIds.put(rf,
27792	"\u0061\u0027\u0031\u002E\u2060",
2403	i*100
11325	"\6\0\12\u0479\1\u0435\13\0\1\u02cf\160\0\1\u0332\4\u0479"+
55886	referenced.
49576	term.image.length()-1)));
14843	sortPos==1,
14806	buffer.append('(').append(parser).append(')');
39152	MultiPhraseWeight(Searcher
40140	topReader,
35279	(curFreqPointer
38519	Field("junk",
21388	OK:
41316	getOutput(intsRef,
59824	"\3\0\1\137\4\0\2\137\150\0\1\u0101\27\266\1\u0107"+
34813	LowerCaseFilter(TEST_VERSION_CURRENT,
32294	_TestUtil.rmDir(fdir2);
10640	"\1\u0212\32\u0213\1\u0212\12\u0213\1\u0214\2\u0212\1\u0215\3\u0212"+
2733	res.setGreedy(greedy);
34201	#CREATE_OR_APPEND}
20939	setTermBuffer(char[]
40761	prefixLength[0]
52515	te.term().toString());
49206	b-->a
28974	STORE_POSITIONS_WITH_TERMVECTOR
39563	"Terms
26083	docsScoredInOrder)
21129	FieldCache.StringIndex}
18815	"à½à½à½²à½¦",
3750	normalize
2049	target="
4444	following
61137	"\1\u058a\6\0\12\u058d\1\u058b\13\0\1\u02e1\160\0\1\u0349"+
21037	"reader
40134	topReader;
60367	"\21\232\1\u02ff\10\232\1\352\12\232\175\0\1\351\24\232"+
32070	instructs
16421	Re-initialize
32056	default_double_parser
52295	ReaderPayloadProcessor
66343	initReader(ByteSliceReader
26614	assertTrue("We
30565	"\41\0\1\25\2\52\2\0\2\130\1\54\1\0\1\52"+
43592	New
47959	"category";
40797	(in.ints.length
7009	minPrefixCoded,
34706	assertEquals("foo",
56532	(exclDisi
23073	mSearcher2.doc(hits2[i].doc);
9612	"\2\u8273\2\u8316\2\u83b9\2\u845c\2\u84ff\2\u85a2\2\u8645\2\u86e8"+
37267	finalbytes
36774	"posWrite="
26212	getarray
40668	r.nextInt(10);
63351	0x7632,
53506	searchables[i].doc(n
9255	numtermdeletes
12825	ue9a3
55617	doc150.get("indexname"));
27894	"\u0031\u003A\u000B",
61553	u8269
41294	noArcArrays)
49149	#setLowercaseExpandedTerms(boolean)
45011	,"LJ",
7160	rangebounds
17083	currentfield
64673	Term("body"));
39447	segmenttermpositions
63350	0x7631,
47940	preparation
61613	ua89d
41199	doRewrite);
10683	"\1\264\1\u0243\30\264\1\141\12\264\1\0\3\136\1\0"+
37298	StopFilter(Version
34341	dominant
56973	ACRONYM;
33993	rptGroups[i]
37160	file_format_name
18802	"à½à½¼à½",
56721	around,
9340	"\3\132\2\133\2\0\12\134\1\0\1\132\20\0\1\133\1\132\1\0"+
9678	"\1\0\2\25\1\0\3\25\1\0\7\25\1\0\2\25"+
61115	"\6\266\1\u0107\23\266\1\142\12\266\1\0\3\137\1\0"+
66323	bytesUsed((newSize-previousSize)*RamUsageEstimator.NUM_BYTES_INT);
12262	u8287
30635	"\1\25\2\0\1\25\1\34\4\0\1\25\2\0\1\25"+
67900	//System.out.println("got
11597	"\1\u0547\15\0\1\u0547\6\0\12\u0547\1\u0518\175\0\4\u0548"+
54735	(!lockDir.exists())
31657	ascii
55403	teststressindexing2
6880	NumericRangeQuery<Float>
59279	"\1\76\41\0\1\25\2\26\2\0\2\77\1\100\1\0"+
60082	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\10\266"+
39057	map",
12663	u827d
51281	newFileName
49166	dateResolution)
21865	(field.isBinary()))
49354	join.
36609	scan");
26354	getEncodedLength(inputArray,
25265	"*opq**",
23971	String[][]
48087	copy(Directory
31946	FieldCache.class.getName()+".NUMERIC_UTILS_INT_PARSER";
36064	searcher.search(bq,
13064	u8273
9161	org.apache.lucene.index.BufferedDeletesStream.QueryAndLimit;
64611	IOException("Invalid
19223	ÏÏ¹
63902	ts.addAttribute(OffsetAttribute.class);
60436	"\1\u01d0\152\0\4\u0213\2\0\1\u0213\15\0\1\u0213\6\0"+
32901	encoders
33392	#incrementToken()}.
32623	byteNum
19276	testempty
10068	"\2\0\4\66\2\0\1\66\147\0\1\76\20\0\2\76"+
65036	this.minSuffixCount1
27126	"\u000B\u000B",
65037	this.minSuffixCount2
1824	finish(int
66844	true)).setMergePolicy(newLogMergePolicy());
7942	ClosedChannelException}.
30451	SegmentMergeInfo
35705	0x0000000F)
41047	idx=0;idx<=pair.input.length;idx++)
59012	testRandomChunkSizes()
63524	indexArray;
66065	{MultiFieldQueryParser.REQUIRED_FIELD,
4050	NaN
38884	assertTrue(r.tryIncRef());
7872	space.
20857	reusability.
7869	space,
59208	"\4\u0e7d\4\u0f20\4\u0fc3\4\u1066\4\u1109\4\u11ac\4\u124f\4\u12f2"+
23474	space)
15211	f1.getBinaryValue());
26602	DocHelper.TEXT_FIELD_2_KEY);
9638	"\3\u06e3\3\u0786\3\u0829\3\u08cc\3\u096f\3\u0a12\3\u0ab5\3\u0b58"+
29618	"\1\133\15\0\300\132\47\133\25\0\4\133\u0116\132\2\0\6\132\2\0"+
48164	allowedSlop
21007	space:
16286	sf(String
18086	queryWeight;
49168	dateResolution;
57014	limited)
8032	Especially
18048	CachingWrapperFilter.DeletesMode#RECACHE}
16853	IndexReader.openIfChanged(clonedReader);
7307	topDocs(0,
42820	positionLength)
60421	"\1\142\1\266\1\u032e\10\266\1\0\3\137\1\0\2\137"+
36826	Util.toBytesRef(ent.chain,
10306	"\11\36\1\352\20\36\1\141\12\142\1\65\1\136\1\143"+
41359	output.longValue());
64580	'len'
59532	"\3\0\1\25\3\0\1\25\1\66\5\0\1\25\2\0"+
38785	non-existent
30376	(!setNull)
14615	Stores
12424	ue9ad
3070	CachedScorer()
19066	{"ð©¬",
38510	testBinaryFields()
14596	zzscanerror
8772	docExp.get("f"+i),
25904	CommitPoint
67682	testreopenoncommit
33222	positionincrementattributeimpl
58474	"A\ud801\udc1cB"};
17237	si.getDocStoreOffset(),
20552	Specifically,
1228	(docCount
6140	put(OffsetAttribute.class.getName()
48667	TestIndexWriterLockRelease
10895	"\2\136\150\0\1\376\32\264\1\141\11\264\1\u0314\1\0"+
22717	FieldCache.DEFAULT.getShorts(reader,
31420	(fullyMerged)
42822	positionLength;
932	writer.getConfig().getMergePolicy();
58567	assertTrue("in
16844	clonedSegmentReader,
49746	getToken(int
15047	org.apache.lucene.document.LoadFirstFieldSelector;
7760	data[random.nextInt(data.length)],
43341	inputSize
62638	production
59412	"\1\0\1\25\5\0\1\25\2\115\5\0\1\25\3\0"+
50258	permanently
42798	"word."
17254	concurrent
7071	rangeBounds.removeFirst();
41909	seekfloor
56608	init,
49141	getDefaultOperator()
56790	testdeletionpolicy
20586	icu4j's
39225	similarity.decodeNormValue(fieldNorms[doc])
58590	removeall
12	under
38739	curField1.stringValue(),
34860	super(TEST_VERSION_CURRENT,
18960	"UTF-8");
50600	init;
25456	checkSanity(CacheEntry...
28695	teststoppositons
57274	(i>=wlen)
43285	FieldSelectorResult}s
59072	RFCs.
22912	match.hashCode();
24601	testSortWithoutScoreTracking()
58287	UTF8SortedAsUnicodeComparator()
37778	Null
40196	seek(termEnum.term());
5495	defaultlexstate
5569	5.8123817E-10f
26312	numEncodedChars
36473	arc.target;
11266	"\3\230\1\u044b\26\230\1\347\12\230\175\0\1\346\32\230"+
2140	arcupto
1921	documents.
11059	"\12\230\175\0\1\346\32\230\1\347\1\u03a5\11\230\175\0"+
7205	documents,
50786	documents)
7379	documents'
34040	HashSet<Integer>
48962	["+",
41183	String(chars);
41548	sortedAllIDsList.get(idv)
41094	ancestors
61234	"\1\u034d\32\u02e2\1\u034e\4\u02e2\1\u05e8\5\u02e2\175\0\1\u034d"+
41308	"UTF-8"),
50112	updateDocument}
64652	inits
11357	"\1\347\12\230\175\0\1\346\32\230\1\347\6\230\1\u01a4"+
40153	queue.add(smi);
63081	-Dlucene.version=4.0-dev
54267	hash);
41132	testRandomWords()
43884	OUT
51181	IllegalArgumentException("Cannot
22806	other.parser
3974	normalize(c);
50389	save)
16728	(isReadOnly(reader2))
56397	DocumentsWriter.BYTE_BLOCK_NOT_MASK);
49312	resolution);
67357	reader1.getSequentialSubReaders();
9824	"\1\0\1\25\10\0\1\25\2\64\2\0\1\25\6\0"+
1016	FailOnlyInSync();
22539	reflectWith()
59327	"\41\0\1\25\2\26\2\0\2\77\1\100\1\0\1\26"+
13121	ua6be
56249	borken,
19218	ÏÏ¿
67516	refreshedReader;
148	searchTerm2.text());
58682	removal
8321	curavail
36821	while(queue.size()
12319	ua6d2
61060	"\1\u0544\6\0\12\u0544\1\u0545\175\0\4\u0546\2\0\1\u0546"+
58869	hasillegal
59662	"\1\u0106\14\36\1\142\12\143\1\66\1\137\1\144\1\137"+
22187	64bit
59904	"\1\352\12\232\175\0\1\351\1\u016f\11\232\1\u016f\6\232"+
20837	parsing.
65146	b.utf8ToString()
15560	saved
27288	"\u003A\r",
15253	fsDir.close();
55711	mainWriter.commit();
12720	ua6c8
15888	documents;
17513	documents:
28904	#getValues}
39752	SegmentReader[readers.size()]));
22206	saves
7867	class,
59015	assertChunking(Random
3793	class.
5982	valuecount
16476	registersnapshotinfo
53459	#search(Query,Filter,int)}
3312	IllegalArgumentException
36665	readNextArc
33391	class;
34978	class:
19569	stopword
42783	class?
27015	"\u0001\u0308\u0061\u002C",
28060	"\u0031\u002E\u2060\u0308\u0061\u2060",
18496	isTokenAvailable
14519	zz_attribute
61610	ua6b4
19581	charSetDecoder));
66420	doCall;
13063	u81d0
22271	shrink(char[]
55164	term="+
26487	middlemask
30193	(numScans
16828	references,
33109	Iterator<AttributeImpl>
50360	references.
20313	testIllegalStateOnReplay()
58861	ufffdcd
49302	DateFormat
31998	getFieldName();
18512	emailAnalyzer
61552	u81c6
16215	qtest(Query
56369	(compare(val,
41276	assertEquals(termEnum.term()
7658	TokenMgrError()
30180	(enumerator.term()
67925	2*posLength
17215	coreClosedListeners)
29202	mapper.map(term,
16134	4.961808f,
14763	DOC");
2442	"zero"),
15346	test_segment_name
27017	ONE
12261	u81e4
59266	"\1\0\2\32\1\0\1\32\1\0\1\32\113\0\1\32"+
52138	dsnames
17121	cfsDir;
1707	org.apache.lucene.store.RAMOutputStream;
51670	diagnostics.put("os.arch",
49563	fuzzySlop
59882	"\1\351\4\232\2\u016f\2\232\1\u016f\1\232\1\u016f\13\232"+
50004	CompoundFileWriter(Directory
22574	deeply,
12662	u81da
40981	assertEquals("got
22962	Arrays.asList(new
1002	TODO:
17834	singletermenum
3685	bufferLength
43519	doTestClearVectorOfSize(100);
18421	assertTrue("d4
18347	assertTrue("d2
18403	assertTrue("d3
25376	Birds
55885	dereference
28268	array's
53365	OOM
18378	assertTrue("d1
50235	LinkedList<MergePolicy.OneMerge>();
1215	fail("writer
36162	array'd
23853	maxAgeSec)
27809	"\u0061\u0027\u2060\u0308\u003A",
17028	storePositions
68090	(bitsPerValue
40359	"scorer("
26942	(Newline)
35791	TestParallelReaderEmptyIndex
54110	assertTrue(stpf.incrementToken());
26238	array()
60419	"\3\0\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142"+
9512	"\0\u86fc\0\u879f\0\u8842\0\u88e5\0\u8988\0\u8a2b\0\u8ace\0\243"+
43265	assertEquals(57,
10701	"\1\136\4\0\2\136\150\0\1\376\4\264\1\u0251\25\264"+
11758	broken
43068	afterRefresh()
68025	right.addAttribute(CharTermAttribute.class);
55518	assertTrue("f2
18624	"ÙÙ",
23851	maxAgeSec;
1232	doc.add(f);
26418	codingCase.middleMask)
60973	"\150\0\1\u0101\1\u04f1\31\266\1\142\12\266\1\0\3\137"+
26270	encoded.
29743	"\1\25\10\0\1\25\24\0\1\25\3\0\1\25\5\0"+
26696	frequencies.
19361	testcombiningmarks
32602	encoded1
37094	"fst.arcWithOutputCount="
58902	frequencies,
32612	encoded2
63973	TestIndexInput
32550	encoded:
54664	OS)
58052	perDoc.numVectorFields
58138	SNAPSHOTS_ID
23631	AtomicBoolean();
49301	part2.toLowerCase();
60481	"\12\232\175\0\1\351\4\232\1\u0363\25\232\1\352\12\232"+
27718	"\u0061\u003A\u00AD",
42608	spans.size()
7531	clearlastvectorfieldname
26298	encoded)
26307	encoded,
1538	totalIndexInterval);
8595	ref.get();
64132	utf8Str.length()
66110	footest");
60255	"\1\351\32\232\1\352\5\232\1\u029b\4\232\175\0\1\351"+
34970	f.toString());
17093	addterm
3397	policy
36598	follow.target;
37958	ref.get())
38576	testWritingNormsNoReader()
37715	doTest(random,
19687	(!chunkStates[0].posEnum.next())
66109	mfqp.parse("the
9992	"\3\136\3\0\1\136\4\0\2\136\2\0\1\207\3\0"+
18817	chinese,
26622	doctodelete
62875	typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);
33627	numrounds
32507	RandomFailure());
40695	Pair<ord,
39105	#add(Term[])}.
10832	"\12\u02d9\1\u02d8\13\0\1\u0122\160\0\1\u0163\4\u02d7\2\0"+
21350	Now
49472	OR:
42536	hasmaybepayload2
2784	Not
65206	idx=1;idx<prefixLenPlus1;idx++)
49049	OR,
16767	Verify
27088	"\n\u003A",
20549	java.text.Collators
21284	CompoundFile
26339	output.position(0);
59348	"\17\0\1\25\1\115\1\26\1\116\3\0\1\115\1\0"+
33409	ChecksumIndexOutput
40802	prune2,
9696	"\1\25\11\0\3\25\7\0\1\25\1\0\2\25\10\0"+
9361	"\1\0\44\132\4\0\24\133\1\0\2\133\5\132\13\133\1\0\44\133"+
56231	testOverrideMethods()
40205	readers.length)
41034	prune2)
22296	char[])
26325	char[],
20929	char[].
41020	tryCount
15210	assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(),
19887	readers.length;
19230	Ï¼ÏÏ¿ÏÏµÏ¿
16802	SegmentReader.getOnlySegmentReader(dir1);
59876	"\1\232\1\u016f\4\232\1\u016f\10\232\1\u016f\2\232\1\u016f"+
11111	"\4\0\2\136\150\0\1\376\32\264\1\141\4\264\1\u03d3"+
20417	Oct
40801	prune1,
3548	super(exc);
33456	later.");
52686	expl.setValue(minPayloadScore);
41058	cmo.output;
23953	TestSort
28956	intfieldsource
18046	CachingWrapperFilter},
15729	fieldIndex)
41075	prune1;
11334	"\1\u047f\15\0\1\u047f\6\0\12\u047f\1\u0480\174\0\1\u0163"+
3403	sequentially
11267	"\1\347\3\230\1\u044c\6\230\175\0\1\346\32\230\1\347"+
37826	decent
41616	c++)
11593	"\1\u0543\1\u0544\1\u0543\1\u0542\13\0\1\u0325\161\0\4\u0546"+
63553	+1);
53125	(TRAIL_SURROGATE_MIN_VALUE
15108	value.equals(DocHelper.LAZY_FIELD_TEXT)
29840	"\2\0\4\26\2\0\1\26\53\0\1\133\3\0\1\134"+
27714	"\u0061\u003A\u0030",
48258	possibleMatchPayloads.addAll(subSpans[subSpans.length
39468	slightly
67137	org.apache.lucene.index.TermVectorEntry}s.
65909	"t"};
1963	deprecated
40481	<code>TokenStream</code>,
40451	<code>TokenStream</code>.
11781	Fills
52348	reader.termPositions(term);
18742	ÎµÎ¸ÎµÎ»Î¿Î½ÏÎ­Ï
36360	(writer.posWrite
24515	"BJDFH");
53921	testcodepointatchararrayint
42644	MULTI_FIELD
66734	conform
62392	costas
3654	extracted
64748	Backwards
59785	"\1\67\1\0\1\25\2\0\1\25\1\u0141\1\u014b\31\36"+
61284	"\1\u034e\12\u02e2\175\0\1\u034d\1\u0608\31\u02e2\1\u034e\12\u02e2"+
23678	setreaderpooling
29549	"\47\0\1\140\4\0\1\137\1\0\1\140\1\0\12\134\1\136\1\137"+
18569	áááá 
56301	quickSort(lo,
60547	"\1\u03a0\13\0\1\u033c\160\0\1\u03a1\4\u039f\2\0\1\u039f"+
57300	obs.bits
49147	this.lowercaseExpandedTerms
27873	"\u0061\u002C\u0308\u0061\u003A",
34709	assertEquals("foo
64341	termCountLimit;
63867	\ud801\udc1ctest");
8615	optional
61551	u8123
59995	"\1\u01ac\5\232\1\352\12\232\175\0\1\351\11\232\1\u016f"+
47812	light
53723	<em>Please
35478	documented
31961	NUMERIC_UTILS_DOUBLE_PARSER
56712	IndexReader.open(commit,
61106	"\3\232\1\u0575\26\232\1\352\12\232\175\0\1\351\1\u0576"+
50995	underway,
15826	IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));
24075	"4.0000220343",
54244	assertTrue(numEntries
26247	Buffer-based
58883	buffer.length-upto);
54228	uniqueCount++;
26896	\p{WordBreak
4660	m.getName().startsWith("set")
21305	assertSameSeekBehavior(name,
10804	"\24\264\1\u02bc\5\264\1\141\12\264\1\0\3\136\1\0"+
51650	seg="
37470	assertEquals("reversed,
27812	"\u0061\u0027\u2060\u0027",
30945	testGetAllResults()
43887	$first);
15778	Write
7336	howMany.<br>
44824	,"ij",
37362	codec.length()
66456	intPool.nextBuffer();
51473	testPoint("startCommitMergeDeletes");
61188	"\13\0\1\u033c\160\0\1\u03a1\4\u05b8\2\0\1\u05b8\15\0"+
64337	termCountLimit)
22217	minSize)
29243	(storingPositions
48263	lastEnd
50941	deleteDocuments(Term...
30868	collationKey
42299	target[i
11520	"\32\264\1\141\11\264\1\u050c\1\0\3\136\1\0\2\136"+
63923	testmaxwordlengthwithsupplementary
41507	PKs
55998	Appendable
59660	"\20\36\1\142\12\143\1\66\1\137\1\144\1\137\1\0"+
5405	manager
63466	0x87541,
49254	(termAtt
61611	ua757
19696	(!cs.posEnum.skipTo(doc))
59493	"\2\137\2\0\1\220\1\0\1\51\1\0\1\71\2\0"+
56779	5");
21285	Files
46210	,"1",
6481	TEST-IO-EXCEPTION-1"));
58260	bytes[i];
23343	testSimpleCase()
54261	testAdd()
19583	File}
7090	suitable
24419	slotValues
31395	delCount);
32293	_TestUtil.rmDir(fdir1);
67851	testonelargeonesmall
63467	0x87542,
63348	0x7621,
67641	testcommitrecreate
63469	0x87543,
52177	flushramdocs
57714	"unreferenced
30129	managed
21568	searchTerm.text();
25356	StringReader(
13122	ua761
3443	segment");
23363	text[i],
28379	utf8[]
15159	assertTrue("sv
22050	suitably
12260	u8141
10403	"\1\u0175\7\u016a\1\u0176\3\u016a\1\230\1\u016a\1\230\3\u016a"+
59933	"\1\u016d\1\u0144\4\0\2\137\150\0\1\u018a\45\u0145\1\u016e"+
39736	externally
54108	stpf.setEnablePositionIncrements(enableIcrements);
13062	u812d
3453	occurred
17987	"dk"));
752	(threads[i].failure
12721	ua76b
50394	!drop;
12320	ua775
66637	testAssumeInitializer()
62996	File.
7523	termvectorstermswriter
40058	removed):
11259	"\1\u0445\13\0\1\u0122\161\0\4\u0449\2\0\1\u0449\15\0"+
49417	ParseException("Truncated
41264	(nextResult
27167	"\u3031\r",
57562	termInfo.docFreq
34230	simultaneous
34573	this.function
20884	fieldanalyzers
64043	assertEquals(16383,is.readVInt());
5192	jjStartNfaWithStates_2(int
923	don't
65236	frontier[0];
38645	NPE):
28945	(IntFieldSource)o;
30637	"\3\0\1\34\2\0\1\34\3\0\1\34\5\0\1\34"+
58511	setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));
49295	queryText);
34482	.next()
53704	i].score,
17089	callback
59517	"\1\63\2\0\1\64\41\0\2\25\1\65\1\0\1\66"+
12661	u8137
11739	Numbers
64235	"right"
6560	href="#precisionStepDesc">below</a>
25360	LuceneFox
66648	SorePoint.AFTER_CLASS;
49617	discardEscapeChar(goop1.image),
3083	scorer;
43578	testbitvector
24739	SortField("f",
34337	user-entered
18169	scorer!
9518	"\0\ua4e9\0\ua58c\0\ua62f\0\ua6d2\0\ua775\0\ua818\0\ua8bb\0\ua95e"+
31669	setlongvalue
36538	destPos;
2906	scorer)
30301	prepareCommit(Map<String,
23388	t=0;t<2;t++)
18163	scorer,
2420	(spans.next())
20187	scorer.
20368	lazyFieldsToLoad;
29565	"\12\134\1\0\7\132\1\0\7\132\1\0\3\133\1\0\10\132\2\0"+
36550	destPos,
39234	result.setMatch(fieldExpl.getMatch());
4917	org.apache.lucene.search.TermRangeQuery;
38788	testNoDupCommitFileNames()
46668	"â¸©"
36547	destPos)
20640	assertTrue(files.length
59272	"\2\0\1\60\4\0\1\61\14\0\1\62\4\0\1\63"+
14808	buffer.append('!');
9111	testequalshashcode
58843	testIncrementalUnicodeStrings()
52950	maxLen)
50922	addDocuments(Collection<Document>
2994	scores,
3300	scores)
9963	"\1\25\1\140\11\36\1\270\20\36\1\141\12\142\1\65"+
3235	scores.
24918	igaec
60024	"\1\u01bc\1\u01bd\2\266\1\u01be\1\u01bf\2\266\1\u01c0\1\u01c1"+
23070	mSearcher2.search(query,
48764	testFieldsStoreOff[i]);
59392	"\1\26\1\0\2\26\7\0\3\26\2\0\2\26\12\0"+
24533	scoresX
20186	scorers
21092	java.util.concurrent.locks.ReentrantLock;
40883	validOutputs.add(output);
24538	scoresY
55800	assertTrue("no
38714	index1.maxDoc();
37150	bit_stop_node
1150	in.readByte();
38669	index1.maxDoc(),
20379	lazyFieldsToLoad)
41831	TwoLongs(long
10145	"\1\365\1\371\3\352\1\36\3\352\1\36\1\352\1\36"+
24540	scoresA
23293	initindex
4608	conf.getReaderPooling());
5225	jjstrLiteralImages
25794	collectPayloads)
25017	scoresx
54553	Arrays.sort(a2,
1778	ourselves
11190	"\1\u03fe\5\230\175\0\1\346\32\230\1\347\6\230\1\u03fe"+
37157	fixed_array_shallow_distance
25784	collectPayloads;
28261	scoreSum;
25019	scoresy
31502	Field("content2",
43007	swapReference(G
48981	#setDateResolution(DateTools.Resolution)}
25020	scoresa
6350	{"query1",
23325	runStressTest(Directory
64625	newLength
63196	org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader)
18711	Ø¨Ù
38970	j<key.length;
1504	compound
11558	"\1\u0525\6\0\12\u0525\1\u0526\175\0\4\u0527\2\0\1\u0527"+
11477	"\1\u0300\11\264\1\0\3\136\1\0\2\136\1\137\3\136"+
38610	incremented:
15874	debugging.
58592	not_in_set
29178	deltaLength);
65550	refCounts.entrySet()
6245	applySlop(q,slop);
25775	Matches
42002	testinternalfinalstate
9330	"\1\133\4\0\2\132\1\0\3\132\2\133\2\0\12\134\2\132\17\0"+
32423	File(storePathname);
62958	asString(files2)+"\ndif:
29866	"\1\0\1\25\103\0\2\102\6\0\1\102\56\0\1\102"+
54733	Our
35443	da95d0ec7daad286fab4e748b17294d8
28492	doc.add(binaryFldStored);
58329	reordering
3929	(length
8598	(state
23132	indexSearcher2;
67888	somewhat...
52878	INDIRECT
7566	LOOP_DETECTED
23131	indexSearcher1,
31824	w.setInfoStream(infoStream);
62679	subReader)
5314	input_stream.getEndColumn();
55232	verifyEquals(Document
24351	result[x].doc
11998	EMAIL_TYPE;
33069	TypeAttribute,
55420	termenum1
23188	indexSearcher1;
56285	mostly
55422	termenum2
7349	(start
66934	pair2.output1),
42958	positionlengthattribute
15648	.del
22823	includesLower()
36824	//for(ArcAndState<T>
41064	cmo.finalOutput
64283	functionquery
1886	assert
15142	LATENT
1755	FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS
11404	"\2\0\1\u04b6\15\0\1\u04b6\6\0\12\u04b7\1\u0480\174\0"+
24609	assertTrue(!Float.isNaN(sd[j].score));
21408	assertTrue(isCSIndexInputOpen(one));
10575	"\2\0\1\u01d6\15\0\1\u01d6\6\0\1\u01d7\2\u01d8\1\u01d7"+
40968	seekResult.input);
67785	((CharTermAttributeImpl)
25623	subReaders
27371	"\u002C\u0308\u0031\u002C",
5124	(jjCanMove_0(hiByte,
55027	indexSerial(random,
8300	seeks
27379	"\u0027\u0308\n",
53694	assertEquals(all.scoreDocs.length,
31453	mergePolicy
6793	Number>
43163	1])),
57240	ones=v0^v1;
57671	basecharfilter
67849	testallsegmentssmall
28787	init();
44638	,"(g)",
52439	<code>new
9883	"\1\27\210\0\2\27\6\0\1\27\153\0\1\27\5\0"+
10947	"\1\347\12\230\175\0\1\346\21\230\1\u0345\10\230\1\347"+
18592	ÙØ³ÙÙ
29787	"\16\0\1\107\2\0\1\110\41\0\1\25\1\34\1\52"+
2555	averagepayloadfunction
28413	charsref
64637	seek.
59803	"\1\177\3\0\1\54\2\0\1\55\3\0\1\200\7\0"+
10357	"\1\136\4\0\2\136\150\0\1\376\22\264\1\u0103\7\264"+
56353	upper(lo,
38335	x0000000000000000l
35174	attributeSource
35792	around.
53847	TestCharacterUtils
65966	mfqp.parse("\"foo
51101	Collection<SegmentInfo>
23796	(clicks
42463	atLeast(50);
57743	";end
38614	IndexReader.lastModified(dir));
42743	#setLength(int)}
50185	#setMaxBufferedDocs(int)}.
2157	getbytesreader
5211	hiByte,
51716	merge.info.getHasVectors());
35073	out.writeBytes(file.getBuffer(buffer++),
40966	seekResult.input),
66384	pivotBufPos
52616	(Query)
59217	"\2\43\1\42\5\43\1\44\1\2\1\35\1\45\1\35"+
37550	"second"));
6822	costly
35637	ntz(val):
26997	ACCENT
43271	//without
23201	scores[1]);
8407	IOException("IllegalAccessException
57681	Direct64(DataInput
50734	addDocument().
26872	OffsetAttributeImpl)
37919	Iterator<K>()
641	(above)
25972	comparator.copy(slot,
66646	SorePoint.AFTER;
31156	Uncomment
51885	tokens/terms)
25186	"m?tal"));
8068	RandomAccessFile
14781	getComparatorSource()
16564	PQ:
33233	BitVector
20494	datetimefield
7921	mentioned
39502	directory.createOutput(segment
35708	0x00000003)
19998	TooManyClauses
15363	lazyfieldnames
17931	seems
20357	prevdocid
36293	outputs.read(getBytesReader(0));
31304	changeIndexNoAdds(random,
57907	readoffset
14765	One
27181	"\u3031\u0308",
11603	"\1\u054a\1\u054b\1\u054a\1\u0549\175\0\4\u054d\2\0\1\u054d"+
64528	exclude.hashCode();
60629	"\150\0\1\u0101\32\266\1\142\6\266\1\u03fd\3\266\1\0"+
23528	arrayToString(String[]
58050	tvd.writeVLong(pos-lastPos);
22846	newshortrange
33720	PPs
36347	readNextRealArc(arc,
37100	fst.cacheRootArcs();
27157	"\u000B\u0308\u0031\u003A",
31415	mp.setUseCompoundFile(doCFS);
51739	merge.info.setHasVectors(merger.fieldInfos().hasVectors());
10548	"\1\u01c8\32\u01c9\1\u01c8\12\u01c9\1\u01ca\2\u01c8\1\u01cb\3\u01c8"+
42558	assertEquals("Type
28629	TestTypeTokenFilter
22084	Friday,
52984	seen.
52219	mergeddoccount
48502	(ensures
27442	[8.0]
33811	while((k=collide(pp))
49201	clauses.get(clauses.size()-1);
48634	docState.infoStream.println("maxFieldLength
41472	assertEquals(42,
39163	PhraseQuery.PostingsAndFreq[termArrays.size()];
53731	char[]}
32134	newLevel
55462	testTokenReuse()
23663	canals
36161	numBytesPerArc
52791	expressed
52851	PROVIDED
33805	rptGroups[pp.rptGroup];
35461	0x0F0F0F0F;
54143	doteststoppositons
6918	(!super.equals(o))
36660	readNextArc(Arc<T>
38334	xffffffffffffffefl
55864	testindexwriterreopensegment
31080	out.print(tis.term());
8748	fields");
31778	args.length
53054	HALF_MASK)
4798	assertEquals(40,
19127	testarmenian
7065	(rangeBounds.size()
23803	isolation
51114	message("rollback:
3991	(isTokenCharMethod.isOverriddenAsOf(clazz)
6301	parsing
48894	Map.Entry<String,SortedSet<TermVectorEntry>>
38515	addDocumentWithTermVectorFields(writer);
19107	checkRandomData(random,
8301	maxchunksize
52036	poolreaders
15133	field.getBinaryValue()
48086	<i>dest<i>
52218	anychanges
49722	c.first
21435	dir.openInput("f3");
15217	sizebytes)
11263	"\12\230\175\0\1\346\2\230\1\u016a\27\230\1\347\12\230"+
16429	assertEquals(numSnapshots,
58247	otherBytes
63363	0x7652,
26145	visibility
51984	skipWait)
34977	searchWithFilter
5436	reinitrounds
61609	ua611
67585	value.",
52179	numramdocs
61181	"\150\0\1\u0101\4\266\1\u0107\25\266\1\142\12\266\1\0"+
13067	u845c
12666	u8466
57018	system:
617	else
13120	ua61b
60409	"\1\u0317\31\266\1\142\12\266\1\0\3\137\1\0\2\137"+
61556	u8452
63362	0x7651,
16019	Integer.toString(i)),
2799	system,
63341	0x75421,
32143	slice[upto-3];
39591	output.writeVLong(ti.proxPointer
49279	multiTerms
428	conditions
56415	assertEquals(80,
38942	testopenreaderafterdelete
47685	dingbat
7263	PriorityQueue
12719	ua625
60654	"\1\u03a1\4\u040e\2\0\1\u040e\15\0\1\u040e\6\0\1\u0410"+
46058	"á»²"
48823	this.tokenUpto
8361	unique
42310	payload.length();
11282	"\1\347\12\230\175\0\1\376\32\264\1\141\1\u045b\11\264"+
63369	0x7654,
36124	this!!
65695	re-try
46424	ELEVEN
38393	testCommitUserData()
54575	Item[]
12265	u8470
63365	0x7653,
64697	!"body".equals(actualTerm.field()));
982	synchronized(this)
33530	1111111111222
19979	getFlags();
52746	assertEquals(expectedIds.length,
43405	bytePos
17578	d2.add(newField("f1",
43170	(1+max));
60059	"\1\u0168\4\u01e3\2\0\1\u01e3\15\0\1\u01e3\6\0\12\u01e3"+
64861	ParallelPostingsArray(size);
52916	UNI_SUR_LOW_START
32038	precisely
28127	"\u2060\u0033\u2060\u0061\u2060\u2060",
11452	"\1\u04de\15\0\1\u04de\6\0\12\u04de\1\u04ae\13\0\1\u02cf"+
40071	rollbackCommit()
8693	inverteddocconsumerperthread
7741	makeIndex();
31349	"utf8");
42717	(a.k.a.
61218	"\1\u034e\12\u02e2\175\0\1\u034d\1\u05d2\1\u05d3\1\u02e2\1\u05d4"+
42615	info.getPositions().size()
13224	ue853
36991	Retry
46813	StringReader(inputText.toString()),
1259	1).totalHits);
42300	3]);
14936	doccomparator
41469	13824324872317238L);
62681	IndexSearcher(subReader);
58143	r.document(r.maxDoc()
25274	System.out.println("matchAll:
12823	ue85d
57624	original),
12422	ue867
29114	readTvfPointers(int
24222	full.reader.close();
33352	("+(commits.size()-1)+"
55728	iwr2.maxDoc());
64603	Warning:
5674	Keyword
55806	testDeletesNumDocs()
68101	"Packed32(bitsPerValue="
43607	CachingWrapperFilter.FilterCache<SpanFilterResult>(deletesMode)
33359	commits.get(commits.size()-1).delete();
57038	<th>50%
59916	"\1\352\12\232\27\0\1\175\1\0\1\51\1\0\1\176"+
25830	(SpanNearQuery)
20310	cc.replay(new
46091	"á»³"
65298	arcs.length)
56321	--right;
17411	i<terms.length;
25032	multicomparatorscoringnomaxscorecollector
25655	InsanityType
42188	assertCopyIsEqual(att);
22178	arrays,
22587	enablebackwards
22075	arrays.
61713	ue849
2207	useCompoundFile;
32690	binaryDump(originalArray1,
28707	categories
33900	condition:
41816	assertTrue(matches.size()
67626	testReopenChangeReadonly()
22377	arrays!
61331	"\2\0\1\u063b\15\0\1\u063b\6\0\2\u063c\1\u063b\2\u063c"+
10867	"\1\u0167\1\u0168\1\u0169\162\0\1\376\1\264\1\u02fd\30\264"+
57796	"third");
48860	freqVector.getTerms();
24685	expectedResult.length()),
11718	zzCurrentPos;
1055	assertTrue(failure.fail1
61182	"\2\137\150\0\1\u0101\24\266\1\312\5\266\1\142\12\266"+
23692	Per
20593	languages
45300	U+020F:
62836	"<CJ>",
61712	ue7a6
5725	org.apache.lucene.util.packed;
36353	posSave
66025	"+two"};
2209	useCompoundFile)
11958	zzCurrentPosL
12004	zzCurrentPos)
7266	documents'.
35271	lastSkipPayloadLength[level])
57523	indexEnum.term();
27551	"\u00AD\u0308\u0041",
41525	(!allIDs.contains(idString))
45213	U+020E:
13223	ue7b0
64769	random.nextInt(terms.length/2);
17970	testDanish()
18906	String[]{"216.239.63.104"});
65932	assertEquals("+(b:one
55786	10).totalHits;
25095	assertFalse(fq.equals(wq1));
65634	change"
62637	"Deleted
55950	1000000;
15877	change.
36000	"three"));
23736	change,
7451	"six",
11025	"\4\u038d\2\0\1\u038d\15\0\1\u038d\6\0\12\u038d\1\u032b"+
35743	hacker's
32938	newTerm(final
17190	loadTermsIndex(SegmentInfo
45298	U+020D:
39316	int[10][];
51421	(1024*1024*config.getRAMBufferSizeMB()));
36756	<code>node</code>
40960	fst.outputs.outputToString(seekResult.output));
18579	"áµá­á­ááá",
51079	documents),
68063	randomhtmlishstring
53484	unmodified
53756	CharArraySet(final
757	doFail;
6033	buf.append(buf.toString());
38695	names.",
45211	U+020C:
45016	,"LL",
7085	datatype
43849	OUT,
1047	delete");
44788	U+020B:
31143	nextDoc())
54206	org.apache.lucene.util.BytesRefHash#size()}.
37060	converged
46191	,"0",
11252	"\175\0\4\u043f\2\0\1\u043f\15\0\1\u043f\6\0\1\u0440"+
6545	changed
48504	nextDoc();
57804	(c.getUserData().get("tag").equals("third"))
39093	entryiterator
60338	"\74\u021b\147\0\1\u021c\32\u021d\1\u021c\12\u021d\1\u021e\2\u021c"+
16222	#optB
24808	Collections.synchronizedList(new
54704	lockName).delete();
49531	(jj_2_1(2))
30314	(failOnCommit)
49129	(<code>OR_OPERATOR</code>)
62939	assertTrue(dir.fileExists("_3.fdt"));
67569	reader.getRefCount());
45891	"á»­"
62631	testParenthesisShould()
44743	U+020A:
40241	getPayloadLength()
3651	org.apache.lucene.analysis.tokenattributes.TypeAttribute;
66512	(docState.maxTermPrefix
11035	"\13\0\1\u02cf\161\0\4\u032c\2\0\1\u032c\15\0\1\u032c"+
32062	setdocswithfield
36986	change:
10629	"\2\136\150\0\1\376\32\264\1\141\1\264\1\u01f4\10\264"+
31425	documents",
39738	change;
17454	whole
56354	second_cut);
34391	<b>NOTE</b>:
66652	with:"));
37031	fst.writeLabel(arc.label);
62321	"last"),
41733	assertEquals(7L,
49136	setDefaultOperator(Operator
60846	"\2\u0493\1\u0492\5\u0493\1\u0494\1\u0495\175\0\4\u0496\2\0"+
25245	"op*",
36964	converge:
7377	nullpointerexception
12318	ua62f
19894	expectedArrayTypes.get(tp).getClass());
60370	"\1\352\12\232\175\0\1\351\1\u01ac\31\232\1\352\12\232"+
37181	copyfrom
56901	"\1\2\1\3\1\4\7\2\1\5\1\6\1\7\1\2"+
51532	(keepFullyDeletedSegments
3203	#replay(Collector)
66702	testerrorafterclass
36009	testFilteredQuery()
54999	lastrefreshgen
38098	plusInf,
55702	(numIter
43897	OUT;
32830	TermVectorsTermsWriterPerField(TermsHashPerField
55114	printDocs(IndexReader
6592	<em>Generic
64640	(BufferedIndexInput)super.clone();
338	changes
6988	Long.MIN_VALUE
40300	getcommituserdata
37900	backingStore.containsKey(new
60051	"\1\u019d\13\0\1\u0126\160\0\1\u0168\4\u01e1\2\0\1\u01e1"+
61022	"\1\u0527\27\232\1\352\12\232\175\0\1\351\32\232\1\352"+
53070	i=0;i<s2.length();i++)
27765	"\u0061\u0027\u0308\u0030",
60341	"\1\u0220\5\0\2\u021c\4\0\1\u021c\151\0\34\u021e\12\u02e7"+
59382	"\1\0\32\25\1\0\12\65\2\0\1\67\25\0\1\25"+
31709	lowercases
6490	e2.printStackTrace(pw);
11380	"\1\u0386\4\u04a5\2\0\1\u04a5\15\0\1\u04a5\6\0\12\u04a5"+
12264	u83cd
6895	toString(final
41913	advanceceil
26381	codingCase.advanceBytes;
3001	RAM
16979	lowercased
15353	istermvectorstored
3331	unsupportedoperationexception
24805	RandomFilter
51350	consistency
33776	(advancePP(pp))
49970	jj_entries_loop
6859	maxInclusive);
18090	getSimilarity(searcher);
40925	minLong);
59929	"\1\0\12\u0183\175\0\1\u0184\45\u0143\1\u016c\2\u0143\1\u0185"+
64458	SpanNotQuery(SpanQuery
66124	assertstopqueryequals
20407	TEXT_FIELD
39466	Smaller
57890	otherByteBuf.clear();
60727	"\3\u02e2\2\u0428\2\u02e2\2\u0428\1\u02e2\2\u0428\1\u02e2\1\u0428"+
64465	getExclude()
62226	scorer.nextDoc();
11792	scanner.
3301	Collector.
62826	scanner;
65097	parent.inputCount
4983	jjbitVec4
4982	jjbitVec3
4978	jjbitVec1
61470	"\1\u034e\12\u02e2\175\0\1\u034d\26\u02e2\1\u069e\3\u02e2\1\u034e"+
4974	jjbitVec0
27348	"\u002C\u0030",
30658	"\1\25\11\0\2\25\2\0\5\25\2\0\2\25\4\0"+
35742	bitutil
63109	@Ignore("Takes
42228	att.setOffset(12,
3117	allocate
34328	Similarity.getDefault()
58157	Snapshotted
54791	obtain()))
50210	MESSAGE_ID
48394	!advanceAfterCurrent())
59555	"\1\77\20\0\2\77\25\0\2\77\6\0\3\77\10\0"+
30317	(failOnRollback)
34011	pp2.rptGroup
34275	openMode
67568	checkNormsClosed)
38158	assertTrue("min,
33108	src.toString());
2298	(numSeen
25931	Collector}
26545	assertTrue(DocHelper.indexed.containsKey(s)
56360	second_cut,
19267	testchinese
29543	(https://issues.apache.org/jira/browse/LUCENE-3358)
64600	0xFFFFFFFFL);
27003	JOINER
5903	totBitCount
5425	xfffffffffffffffel
44786	U+0209:
47886	default/simplest
64210	assertEquals("should
41121	(cmo.isFinal)
54183	setthrottling
50975	deprecated,
31001	(f.exists())
6526	whose
37284	sensitivity
15227	sizebytes[3]);
8885	behind
51050	expungeDeletes(boolean
62815	#29</a>.
40338	(pointerMax
51794	docWriter.getPendingDeletes().terms.size();
7629	curChar)
64774	(!seen.contains(t))
48514	ScorerVisitor<P
50341	HashMap<SegmentInfo,SegmentReader>();
5369	curChar,
62702	{searcher.getIndexReader()};
5426	xffffffffffffffffl
22699	FieldCache.DEFAULT.getBytes(reader,
49364	automatically.
41719	BytesRef("aab"),
61153	"\1\u034e\12\u02e2\175\0\1\u034d\24\u02e2\1\u059a\5\u02e2\1\u034e"+
56988	ToStringUtils()
56343	second_cut;
16526	recommended:
5002	curChar;
28782	skipBuffer[i]
8200	(MMapIndexInput)super.clone();
10958	"\6\230\1\347\12\230\175\0\1\346\31\230\1\u0356\1\347"+
60815	"\15\0\1\u047d\6\0\12\u047f\1\u047e\13\0\1\u02e1\160\0"+
13066	u83b9
25508	Bits)
52405	recommended.
60714	"\1\u0428\6\u02e2\1\u0428\4\u02e2\1\u0428\4\u02e2\2\u0428\1\u034e"+
61555	u83af
54419	toString(0);
12822	ue7ba
44447	U+0207:
12665	u83c3
64532	includespans
56134	numebr
12421	ue7c4
12317	ua58c
14539	alphanum
8435	System.out.print("x");
43738	Ã"
51431	message("drop
53594	nDocs;
8280	jre_is_64bit
65638	segmentInfos.getSegmentsFileName()
4571	anything
24569	Filter()
18162	ConstantScorer(ConstantScorer.this.getSimilarity(),
1255	pq.add(new
17839	moment,
19455	java.io.FileInputStream;
56828	moment!
23114	nDocs,
53512	nDocs)
44741	U+0208:
6578	clause
44445	U+0205:
2650	counterThread
34473	getReaderPooling()
8003	silently
33358	DeleteLastCommitPolicy
59943	"\1\141\16\36\1\355\13\36\1\142\12\143\1\66\1\137"+
64216	assumed,
22625	assumed.
7143	x4565fd66
31023	"test.txt");
12667	u8509
43438	Put
44384	U+0206:
20198	clauses.size()
27061	"\r\u0308\u0061\u003A",
17349	QWF
28489	Field("fail",
57982	flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>
57818	testPrepareCommitRollback()
26055	this.numHits
10404	"\1\347\12\230\175\0\1\346\1\u0177\1\u016a\1\230\1\u016e"+
24680	expectedResult
43269	assertEquals(75,
43209	testTermDocs(int
12717	ua4df
10514	"\11\230\1\u016a\20\230\1\347\12\230\175\0\1\u01a3\16\230"+
44023	U+0203:
53732	contains()}
67227	cs.getInputStream();
60087	"\1\u01f7\22\266\1\142\12\266\1\0\3\137\1\0\2\137"+
65474	deletable;
39943	subReaders[i].document(n
11993	ideographic,
24999	awaittermination
12266	u8513
17950	Collator.getInstance(new
32755	charBuf.limit()
10537	"\3\0\1\136\4\0\2\136\150\0\51\u0169\1\u01a2\6\u0169"+
2653	docText[]
33327	(currentRecordId%10
28507	stringFldCompressed
36191	allowArrayArcs
43950	U+0202:
59088	"\1\13\1\0\1\12\175\0\1\12\130\0\6\13\3\0"+
27254	"\u0041\u00AD",
10807	"\4\0\2\136\151\0\32\u0206\1\0\12\u0206\176\0\32\u0206"+
44382	U+0204:
60924	"\1\u04ce\2\u0484\2\u04ce\1\u0484\1\u04ce\1\u0484\175\0\1\u034d"+
20244	(this.getBoost()
37402	TestQueryTermVector
19081	"ä»®",
61607	ua4cb
31685	testPerField()
64506	ArrayList<byte[]>(includeSpans.getPayload());
12316	ua4e9
37459	testBarelyCloseEnough()
27309	"\u003A\u0308\u00AD",
22159	Minimum
14923	x346565dd
61058	"\1\0\1\u04fd\176\0\4\u0543\2\0\1\u0543\15\0\1\u0543"+
12423	ue90a
23273	getmultisearcherinstance
11099	"\4\0\2\136\150\0\1\376\1\u03cc\31\264\1\141\12\264"+
12824	ue900
34722	qp.parse("multi
48269	ArrayList<byte[]>(payload.size());
7463	(nextTokenIndex
30290	prepareCommitData
9950	"\12\142\1\0\1\136\1\143\1\136\1\0\2\266\1\137"+
5550	(bits
1661	gettermindexinterval
64813	te.term();
31786	CommandLineUtil.newFSDirectory(dirImpl,
43948	U+0200:
56826	regenerate
9886	"\1\27\2\0\4\27\2\0\1\27\247\0\1\27\131\0"+
60757	"\1\u016f\30\232\1\352\12\232\175\0\1\351\11\232\1\u0451"+
48892	offs
13118	ua4d5
64073	MockIndexInput
38594	rmDir(fileDirName);
34197	conf.setter1().setter2();
15129	assertTrue("",
3020	scoring
10570	"\1\u01d3\6\0\12\u01d3\1\u015c\175\0\4\u01d4\2\0\1\u01d4"+
6625	lexicographic
9946	"\1\166\3\0\1\53\2\0\1\54\3\0\1\55\7\0"+
44021	U+0201:
64215	lock_poll_interval
16513	object.<br>
37001	arcs");
43127	topCollector
40309	unmodifiablecollection
32983	to.lastOffsets,
65818	doNestedConjunctions(int
60244	"\1\u028b\33\0\12\u028c\175\0\1\u028b\33\0\1\u022e\1\u028d"+
1816	numStoredFields,
22365	getSorter(a).quickSort(fromIndex,
57662	off;
10235	"\1\u0103\5\264\2\u0103\3\264\2\u0103\10\264\1\u0103\1\141"+
38278	i<=max;
66148	littleReader;
25691	this.label
36871	(!arcAndState.arc.isLast())
6413	off,
64988	off.
40487	TokenStream}-API
26575	assertTrue(positions.nextPosition()
48987	resolutions.
27572	"\u00AD\u0061\u0027\u2060",
6158	termbuffer
50784	consistent.
3452	Record
62803	fd.fields[idx]
50873	consistent,
16931	performdefaulttests
67073	testLazySkipping()
35081	remainInBuffer
41984	testprimarykeys
7200	instance,
34239	instance)
440	store
39323	Reuse
60724	"\1\u034d\2\u0428\1\u02e2\1\u0428\3\u02e2\2\u0428\2\u02e2\1\u0428"+
15443	normGen;
25879	<p>One
63355	0x7642,
52504	IndexReader.open(rd2,
61715	ue98f
5660	xffffff
39194	queryExpl.setDescription("queryWeight("
3557	instance.
6787	date/time
19173	story
63263	0x431,
13226	ue999
31744	System.err.println("Upgrades
19181	testbengali
58732	utf8Data
49464	qp.parse(args[0]);
18093	ConstantScoreQuery.this;
55961	gc's
55128	false:
40750	compareTo(InputOutput<T>
30164	threadResources.set(resources);
7773	f=null;
52502	IndexReader.open(rd1,
39644	false?
63354	0x7641,
27140	"\u000B\u005F",
31788	deletePriorCommits).upgrade();
880	false;
17034	false)
32888	perThread.vectorSliceReader;
66497	downto--;
60556	"\4\u03a9\2\0\1\u03a9\15\0\1\u03a9\6\0\12\u03a9\1\u03aa"+
56651	ExpirationTimeDeletionPolicy(dir,
32369	isinstance
57513	PagedBytes(estimatePageBits(initialSize));
9779	"\1\145\6\36\1\146\12\36\1\141\12\142\1\65\1\136"+
14954	testIncreasingSloppiness()
1939	indexStream.writeLong(position);
15748	false.
67850	testallsegmentslarge
2426	false,
3867	satisfy
43371	negative.");
27848	"\u0061\u002C\n",
33647	.setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(
31928	FieldCache.class.getName()+".DEFAULT_LONG_PARSER";
4568	TestIndexWriterConfig
33700	setMergePolicy(newLogMergePolicy(51))
3587	instances
64309	getDocCountPercent()
54781	AntiVirus).
10671	"\12\230\176\0\1\230\1\u0227\1\u0228\2\230\1\u0229\1\u022a"+
31640	shouldsize
42025	Searcher#search(Query,Filter,int,Sort)
29900	"\32\0\15\25\5\0\3\25\1\0\1\25\5\0\1\25"+
44108	HORIZONTAL
47885	<P>At
283	current
28137	wordbreakproperty
21155	linear
64583	if(bufferLength<len){
24406	FieldCache.ShortParser(){
19672	gain
66351	ints[upto+stream]);
21369	"f.comp");
14778	getParser()
17580	d2.add(newField("f2",
63264	0x432,
17748	instance;
40089	listCommits(Directory
42869	termBuffer/text
50088	addfile
67715	termBuffer.length);
28582	(bufferLength
66131	stopa
15549	normGen,
8769	assertEquals("doc
12263	u832a
51155	stop.
21974	skipListWriter;
12664	u8320
24033	"3.14159f",
29088	pointers.
48580	un-tokenized
57398	numbits
33769	reasons).
39549	utf16Result2.length;
48478	Float.POSITIVE_INFINITY
21306	expected.close();
60035	"\1\26\6\0\1\77\3\0\1\136\1\276\1\277\1\300"+
61554	u830c
16002	doWork();
66041	stopA
54900	TrackingIndexWriter(IndexWriter
5946	(blocks[elementPos+1]
24372	explicilty
30171	ensureIndexIsRead();
5585	SmallFloat.byte52ToFloat((byte)i);
7743	SELECTOR
38164	l=min;
39547	utf16Result2.length)
51435	done:
25975	comparator.setNextReader(reader,
43267	assertEquals(74,
936	"here
57566	termInfo.proxPointer
23907	done.
25796	ArrayList<SpanQuery>(clauses.length);
10187	"\2\u0103\1\u0104\1\u0105\10\u0103\1\264\1\u0106\5\u0103\6\264"+
3005	done,
13065	u8316
6170	queries
29122	(fieldCount
6380	getfuzzyquery
27233	"\u0041\u0308",
42172	aint
1214	simulate
48624	IllegalArgumentException("position
11825	zzStartRead
54987	waitinglistener
2211	this.useCompoundFile
20639	primaryDir.listAll();
35843	{"A",
59046	ScoringRewrite<Q
56431	maxCount-3);
48559	processFields(final
17039	fieldToTerms
55276	(!terms1[j].equals(terms2[j]))
38072	Double.NaN
43827	assertTermEquals("fl",
28001	"\u0031\u002C\u0030",
43123	"x"}),
46759	SOLIDUS
23865	pruner)
49090	setAutoGeneratePhraseQueries(false)");
19721	cs.offset
5191	jjStartNfa_2(0,
29869	"\4\0\1\102\1\0\1\102\2\0\2\102\1\0\3\102"+
59825	"\2\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
4856	testsetterschaining
58353	bbyte
29479	JUnitCore.runClasses(InBeforeClass.class);
15705	patternLength
7303	pq.size()
42137	aStop
40352	(docs[pointer]
65021	Applies
20082	clauses.get(i);
60594	"\175\0\1\351\32\232\1\352\7\232\1\u03dc\2\232\175\0"+
10616	"\7\264\1\u01f5\22\264\1\141\12\264\1\0\3\136\1\0"+
32261	testNativeFSLockFactoryLockExists()
32804	numbytes2
32800	numbytes1
15040	NoMergeScheduler
60464	"\4\u0355\2\0\1\u0355\15\0\1\u0355\6\0\1\u0356\2\u0357"+
44121	,"aa",
46760	,"/",
35589	b=(A[i]
67392	initReader2
40328	score(c,
494	verbose
29875	"\4\0\1\34\1\0\2\34\4\0\1\25\5\0\1\25"+
55486	"term2"));
9459	"\1\11\10\0\1\12\3\0\1\2\37\0\3\12\23\0"+
49433	sequence:
67460	modifier.maxDoc());
8675	addThread(DocInverterPerThread
65390	(ConcurrentMergeScheduler)
19023	RFC
25772	sublist
55559	iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);
10210	"\2\136\150\0\1\376\5\u0103\1\u010d\1\264\1\u0103\1\u010e"+
4430	QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange("test7",
43847	'$file':
22458	sequence.
26424	sequence,
52084	setdefaultinfostream
22801	(this.upperVal
13119	ua578
52539	<p>Instantiable
49282	(enablePositionIncrements)
64869	System.arraycopy(intStarts,
43098	"str_s",
52627	java.lang.reflect.Constructor;
61608	ua56e
53122	(LEAD_SURROGATE_OFFSET_
28090	"\u0063\u0061\u006E\u2019\u0074"
19376	Bits}
12718	ua582
38801	"number");
55539	count(Term
59137	"\2\ua578\2\ua61b\2\ua6be\2\ua761\2\ua804\2\ua8a7\2\ua94a\2\ua9ed"+
3866	sequences
1409	crash_fail_message
23996	"40.0",
54521	random.nextInt(11);
22371	comp).mergeSort(fromIndex,
65771	BitSet(sz);
56080	cswcq(Term
2563	fullsimilarity
26171	(roundFixedSize)
16813	clonedSegmentReader
383	testUndeleteAll()
35740	nextHighestPowerOfTwo(long
3669	TypeAttribute
34946	accomplished
1881	FLOAT:
68055	testduelinganalyzers
14769	FLOAT.
28781	RAMOutputStream[numberOfSkipLevels];
49245	numTokens
14523	zzreader
51158	abort");
27530	"\u005F\u0031\u003A",
36801	ForwardBytesReader
21708	(openDeletedFiles.size()
29160	storePositions);
48057	remove)
32022	").append(s).append(')');
3475	theory
17765	re-use
22470	"AttributeClass#key=value,AttributeClass#key=value"}
55812	"bar")),
6117	assertTrue("CharTermAttribute
9932	"\1\34\2\0\4\34\2\0\1\34\303\0\1\135\45\136"+
16452	psdp.release("snapshot0");
64896	MultiThreadTermVectorsReader();
50396	sr.close();
26129	onecomparatornonscoringcollector
3586	segmentsToMerge
8973	this.buffer
37614	"bar"));
6088	TestSimpleAttributeImpls.assertCloneIsEqual(t);
43418	inputsize
1408	num_threads
3246	CachingCollector(Collector
7142	rawtypes
43275	testSkipTo(2);
3723	removes
42736	#append(CharSequence,
55721	iwr1.maxDoc());
1719	removed
63357	0x7643,
34566	includeSpanScore;
53131	System.arraycopy(chars,
41832	this.a
41833	this.b
37766	this.c
27112	"\n\u0031\u003A",
16718	reader.numDocs();
32344	lock);
11672	value--;
28227	MultiCollector(colls);
6435	this.i
36849	chain.grow(1+chain.length);
34571	includeSpanScore)
49351	composed
42582	this.s
34868	this.q
17010	TermVectorOffsetInfo[]
52310	this.t
7131	precision_step_default
9542	"\1\u1e86\1\u1f29\1\u1fcc\1\u206f\1\u2112\1\u21b5\1\u2258\1\u22fb"+
51693	numSegments;
28662	stpf)
54104	stpf,
15793	output.writeByte(isCompoundFile);
49525	firstQuery
21383	fsdir.openInput(file);
66521	charPool.charOffset;
54095	stpf0
39599	other.output.getFilePointer();
60247	"\1\u028e\20\232\1\352\12\232\175\0\1\351\3\232\1\u028f"+
54950	unit);
26105	OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue,
31565	infos
59320	"\1\25\2\0\1\25\1\141\1\150\31\36\1\142\12\143"+
6336	MultiFieldQueryParser.parse("query",
37696	="priority";
50216	/*final*/Similarity
63176	nextsave
15684	hasSeparateNorms(int
9184	debugging
26438	middleMask,
54943	unit))
22369	//System.out.println("SORT:
35083	bytesToCopy
6215	doesn't
30498	Segmentation
15465	List<String>
19759	score_cache_size
22571	target);
61059	"\6\0\12\u0543\1\u04c6\175\0\4\u0544\2\0\1\u0544\15\0"+
19469	"UTF-8";
48190	target))
60637	"\26\266\1\u0404\3\266\1\142\12\266\1\0\3\137\1\0"+
39373	fastclear
56395	getAddress()
42045	reverseMul[0]
20468	createDocument(String
25854	cancel
13225	ue8f6
57676	BITS_PER_VALUE
40358	termDocs.freq();
3643	totalnumdocs
48232	spans2.end())
33183	assertSame("FlagsAttribute
3422	info;
42610	info:
55187	info1
56014	"null"}
54000	"head
52966	0xDC00
15772	info.
29692	"\0\u1bc3\0\u1c2a\0\u1c91\0\u1cf8\0\u1d5f\0\u1dc6\0\u1e2d\0\u1e94"+
55189	info2
43514	bv.set(i);
10006	"\3\136\2\0\1\76\1\136\4\0\2\136\2\0\1\47"+
42849	newTermLength,
65144	pruned,
54073	StopFilter(Version.LUCENE_24,
25684	ce.length;
59559	"\1\25\1\100\5\0\1\25\2\0\1\25\2\0\1\25"+
65004	pruned.
62384	james
42961	kwic
57250	intersectionCount(OpenBitSet
50359	segmentInfos.info(idx);
19948	map}.
58477	"\ud801\udc44\ud801\udc44cde",
39571	"UTF-8")
57420	rotateleft
25658	Insanity(InsanityType
29555	"\1\0\7\133\236\132\11\0\46\132\2\0\1\132\7\0\47\132\1\0"+
4981	0xffffffffffffffffL
4307	Classical
65545	(oldest
24571	BitSet(reader.maxDoc());
17698	CONSTANT_SCORE_FILTER_REWRITE;
56476	spans2.end();
25346	CharArraySet(TEST_VERSION_CURRENT,
26493	info,
17066	info)
21099	lock()
41067	prefixes.entrySet().iterator();
29453	InAfterClass
32515	SearcherThread(this,
1848	numDocs
53493	MultiSearcher(Searchable...
35337	assertEquals(1,posIncrAtt.getPositionIncrement());
61714	ue8ec
36873	arcAndState.arc.label
43164	priority.put(vals[i
64767	longish
17304	org.apache.lucene.search.BooleanClause.Occur;
6111	WhitespaceTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY,
19566	detects
16124	ScoreCachingWrappingScorer(scorer);
35824	ArrayIndexOutOfBoundsException
15121	field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT)
54897	AtomicLong
11712	yytext()
53176	disclaimer
57957	newSearcher(ir);
34725	multi2)",
49925	rangein_start
49237	disallow
20475	DateTools.timeToString(time,
42915	target).setOffset(startOffset,
19328	rfc6068
3292	out-of-order.");
50966	flushDeletesCount.get();
10759	"\175\0\1\346\7\230\1\u0286\22\230\1\347\12\230\175\0"+
48403	describe
6278	super.getWildcardQuery(field,
34949	(searcher);
3981	ioBuffer.reset();
56791	verifycommitorder
30276	freqpointer
42018	testshortestpathswfst
7885	Sun's
4392	testSorting(int
32247	lock",
54762	lock".
16415	(PersistentSnapshotDeletionPolicy)
53576	Map<Term,
20493	timetostring
3593	present
11090	"\2\136\150\0\1\376\2\264\1\u0103\27\264\1\141\12\264"+
59924	"\3\0\1\137\1\164\3\0\2\137\2\0\1\175\1\0"+
24638	full.search(bq,
34629	getPayloadScore();
16790	thrown");
24754	TotalHitCountCollector();
67738	"null";
6429	java.io.PrintWriter;
8144	this);
42144	bInt
51970	flushPending
67510	assertReaderClosed(reader,
34700	TestMultiAnalyzer
65125	this),
56748	i=0;i<17;i++)
38010	50006789999999999L,
11147	"\1\u03ed\6\0\2\u03ee\1\u03ed\2\u03ee\2\u03ed\1\u03ee\1\u03ed"+
16975	Character.toChars(
61091	"\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\3\u02e2\1\u0568\6\u02e2"+
32920	prefix++;
10689	"\3\0\1\136\4\0\2\136\150\0\1\376\24\264\1\u0249"+
57332	Math.min(wlen,other.wlen);
65517	(segments
53954	dirty;
41993	scratchintsref
53765	<code>CharSequence</code>
66657	testFailureTest()
34098	b.set(ord);
53042	((utf8[upto]&0x3f)<<12)
23264	termsSet.add(template.createTerm(contents[i]));
17552	assertEquals(parallelHits[i].score,
37629	_TestUtil.randomUnicodeString(r);
34770	operator:
37167	final_end_node
48225	spans1.start();
49142	operator;
44254	,"(c)",
50492	LogMergePolicy#setUseCompoundFile(boolean)}.
23241	IndexSearcher(dir2,
8554	SinkTokenStream
49172	null.");
48175	toSameDoc()
65689	systems
65578	while(readFrom
7236	hits.<br>
9593	"\2\u21ab\2\u224e\2\u22f1\2\u2394\2\u2437\2\u24da\2\u257d\2\u2620"+
48185	if(collectPayloads)
15854	(preLockless
46538	,"20.",
11185	"\12\230\175\0\1\346\2\230\1\u040c\27\230\1\347\12\230"+
31211	FieldSelectorResult.SIZE
58307	utf8SortedAsUTF16SortOrder;
23775	"set";
2305	super.setUp();
43664	e\"",
45012	"á»º"
37731	parser.parse(HIGH_PRIORITY);
63238	newBuffer(int
15671	normGen.clone();
2029	identical
9130	this.docState
26401	numInputChars
27736	"\u0061\u003A\u0031\u003A",
34332	Small
51582	!merge.isAborted()
18497	(typeAtt.type()
24310	Order
47864	solidus
58032	tvd.writeInt(TermVectorsReader.FORMAT_CURRENT);
52193	commitmerge
34024	ArrayList<PhrasePositions>(2);
31446	testExactFileNames()
62507	(requiredScorers.size()
65792	this.answer
43087	dotryrefresh
33156	src1.addAttribute(CharTermAttribute.class).append("foo");
11556	"\4\0\2\136\151\0\4\u0524\2\0\1\u0524\15\0\1\u0524"+
53442	tq=NumericRangeQuery.newIntRange("trie",
23239	IndexSearcher(dir1,
60297	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\1\266"+
53043	((utf8[upto+1]&0x3f)<<6)
12314	ua3a3
50643	config.getMergeScheduler
38593	GOOD
17622	str);
14720	SHORT);
67370	subReaders2.length);
53942	referencing
55163	id2="
6276	getWildcardQuery(String
29774	"\1\57\3\0\1\60\11\0\1\46\2\0\1\61\16\0"+
30863	doesnt
45219	U+022E:
20911	non-stop
3286	"cannot
394	thanks
39180	ArrayUtil.mergeSort(postingsFreqs);
25391	(!keywordAttr.isKeyword())
65252	lastInput.length).node);
45824	"á»°"
50346	ent:
6418	mark(
49789	la1tokens[jj_kind]
8067	File(getDirectory(),
9865	"\2\0\1\25\2\0\4\25\1\0\1\26\1\25\1\0"+
45306	U+022F:
17308	Store.NO,
26677	<br>
18652	"Ü¡Ü¢",
33182	src.addAttributeImpl(att);
31947	NumericUtils},
48378	this(weight,
58979	mmapDir.createOutput("zeroBytes");
65821	oClauses
58162	primary,
48782	positions[i][j];
62367	testSpans2()
22073	Methods
30244	terms(Term
52351	tp.getPayload(p,
19547	Method}
28163	extendnumlet
35179	setNumOverlap(int
24169	("string2",
67124	testCaching()
45217	U+022C:
25767	entr
28843	primary;
51948	<code>pcp</code>
27029	"\u0001\u0308\u0031\u002E\u2060",
49676	int[23];
46695	"ï½"
52283	set(TermInfo
4224	lower=(count-1)*distance
24765	true).setMissingValue(new
46798	"ï½"
55796	delUpto=0;delUpto<5;delUpto++)
16459	prevents
18129	cs.advance(doc)
3252	bytesPerDoc
65122	compileAllTargets(node,
45304	U+022D:
28972	FORMAT_UTF8_LENGTH_IN_BYTES;
42150	(ints.length
9773	"\1\136\1\144\1\137\3\136\3\0\1\136\4\0\2\136"+
21418	assertTrue("Only
59890	"\3\u016f\1\232\1\u016f\1\232\3\u016f\1\352\12\232\175\0"+
42483	payload.length,
43048	maybeRefresh()
64117	charsToRead,
21331	createRandomFile(dir,
4429	QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange("test6",
13346	u36a4
59044	org.apache.lucene.search.MultiTermQuery.RewriteMethod;
67382	permutations
34067	tcnt
48412	popped
8650	newsinktokenstream
59110	"\2\u1bf0\2\u1c93\2\u1d36\2\u1dd9\2\u1e7c\2\u1f1f\2\u1fc2\2\u2065"+
34842	Analyzes
800	Analyzer
57120	fastGet(long
11295	"\1\u0462\4\264\1\0\3\136\1\0\2\136\1\137\3\136"+
12544	u36b8
34661	function.hashCode());
1574	index.compareTo(term,
48148	subSpansByDoc;
49460	System.out.println("Usage:
66641	testAssumeBefore()
3068	members.
42381	"lucene";
46752	,".",
4668	assertEquals(1000,
12945	u36ae
37506	phraseQuery,searcher);
32432	locks.
65422	<br>then
7851	java.security.AccessController;
62176	searcher.search(qp.parse("+foo
12143	u36c2
43230	testSkipTo(1);
23364	modifier.addDocument(doc);
3794	Yet,
62479	coordinator.nrMatchers++;
21993	skipListWriter
9433	"\12\132\1\0\15\132\1\0\5\132\1\0\1\132\1\0\2\132\1\0"+
46690	"ï½"
34443	Its
60736	"\6\0\12\u0444\1\u03d4\13\0\1\u0126\161\0\4\u0440\2\0"+
32200	locks:
32595	byte[MAX_RANDOM_BINARY_LENGTH];
48259	1].getPayload());
39433	super("CountingStream("
35553	u=fours^foursA;
7986	JVM
15022	testrepetitiveincreasingsloppiness3withholes
53978	owner.maxDoc();
49091	this.autoGeneratePhraseQueries
51055	MergePolicy.MergeSpecification
22062	"QueryWrapperFilter("
14524	zzstate
52934	UTF8Result
36003	getDocIdSet
35023	advanceToNextCommonDoc();
46174	"ï½"
7029	dummy,
10743	"\6\0\1\u0274\2\u0275\1\u0274\5\u0275\1\u0276\175\0\1\u0163"+
32262	lockFile
21635	(wildcardSearchPos
27246	"\u0041\u0030",
16972	TokenStream)}
12144	u3765
29821	"\1\0\1\117\3\0\1\120\5\0\1\121\3\0\1\122"+
56254	textui
46011	"ï½"
11966	(zzCurrentPosL
50616	segFieldInfos.size();
38237	0x8000000000002510L,0x800000000000251cL,
63105	TOKEN_LEN);
39274	(termArray
62600	testElements()
43641	java.util.GregorianCalendar;
59873	"\5\u016f\6\232\1\352\12\232\175\0\1\351\1\u0173\2\u016f"+
50422	release()).
54051	StringReader("Now
62663	AtomicCounter()
46103	"ï½"
60930	"\176\0\32\u02e2\1\u04d2\12\u02e2\175\0\1\u034d\16\u02e2\1\u0428"+
30583	"\56\0\1\26\3\0\1\26\2\0\1\26\3\0\1\26"+
34931	testprefix
49486	Modifiers()
19433	uwesays
18142	"queryNorm"));
26271	#getEncodedLength(byte[],
1697	assumetrue
15033	NoMergePolicy},
12545	u375b
55701	dirs);
3013	re-run
17581	d2.add(newField("f3",
45951	"ï½"
32370	singleinstancelockfactory
48672	_TestUtil.getTempDir("testIndexWriter");
49030	Map<String,DateTools.Resolution>
53783	#copy(Version,
37621	d.add(f);
67340	assertReaderClosed(index2_refreshed,
65676	getRefCount(String
67112	Version)
54134	stopfilter.setEnablePositionIncrements(false);
52647	ctors[0],
61451	"\14\u02e2\1\u034e\12\u02e2\175\0\1\u034d\23\u02e2\1\u068e\6\u02e2"+
37679	testphrasequeryinconjunctionscorer
24926	cigae
65781	random.nextInt(setSize));
59073	<li>&lt;URL&gt;:
46036	"ï½"
5305	input_stream.GetImage()
59245	"\2\0\3\25\1\0\7\25\1\0\4\25\1\0\2\25"+
31925	LongParser()
10383	"\6\0\1\u0164\1\u0166\1\u0165\2\u0164\2\u0165\1\u0164\1\u0165"+
16033	Establish
60117	"\1\u0215\15\0\1\u0215\6\0\12\u0215\176\0\32\u0216\1\0"+
26585	omit
49831	modular
35585	(A[i]
1598	(terms.next())
10990	"\3\0\1\136\4\0\2\136\150\0\1\376\11\264\1\u0371"+
58219	Comparable<BytesRef>,Cloneable
5724	marks
26104	OutOfOrderMultiComparatorScoringMaxScoreCollector(queue,
56404	byte_block_shift
33016	lastpositions
64164	expectedex
45899	"ï½"
53761	<code>text</code>
18340	assertEquals("wrong
58476	{"abc\ud801\udc44",
33337	(userData.size()
48041	#sync(Collection)}
7963	setMaxChunkSize(DEFAULT_MAX_BUFF);
35119	TestPayloadExplanations
57156	64-(endIndex&0x3f)
40492	TokenStream()
43905	folded.
46051	U+0232:
38207	executeOneRandomSplit(final
43902	folded,
67812	TestSizeBoundedForceMerge
22996	testEmptyIndex()
28424	c.toString());
9198	Term[deletes.terms.size()]);
56549	exclusions
42937	&quot;Impl&quot;
4311	enum
65707	pre-decrement
58981	ii.seek(0L);
39049	map.get("bar").intValue());
18745	Î»Î¿Î³Î¹ÏÎ¼Î¹ÎºÏ
22156	Jan
65633	"consistent
9673	"\1\2\3\35\1\45\2\2\1\35\1\46\3\2\2\35"+
46082	U+0233:
50311	memory.
25181	mark.
39467	memory,
19090	"ãã",
45568	"ï½"
57346	andNot(OpenBitSet
35258	TermFreqs.
18522	Õ¾Õ«ÖÕ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ¸ÖÕ´)
7231	allows
9395	"\1\132\120\0\32\144\1\0\131\144\14\0\326\144\57\0\1\132\1\0"+
33083	TypeAttribute.class,
31163	build/test/index.nocfs
55825	loaded");
45221	U+0230:
3743	Version}
31940	val.charAt(0)-NumericUtils.SHIFT_START_INT;
66239	q1);
55538	TestIndexWriterReader
48292	prevEnd);
56523	exclusion.
40424	changed.
49983	Data}
21054	changed,
7914	problem
15183	System.currentTimeMillis();
31680	ramdir
8351	System.out.println("\nUsage:
45724	"ï½"
23537	random);
42329	fi.fieldInfo("f3").storePayloads);
65820	nMatches=0;
556	IndexerThread(int
22799	!this.lowerVal.equals(other.lowerVal)
22389	modules
45308	U+0231:
66722	<p>Integer
17815	readresolve
48863	SortedTermVectorMapper
65444	hcode
62164	dmq.add(pq);
51962	flushDeletes;
33289	expecteds)
62385	jones
28398	_TestUtil.randomRealisticUnicodeString(random,
5687	copyTo(AttributeImpl
50168	(generation
39425	tp.getPayload(b,
43953	U+0226:
51379	flushDeletes)
42510	Field("hasMaybepayload2",
63934	testnormalizeandistokencharcharinsubclass
46121	U+0224:
33162	identical,
10003	"\2\0\2\76\1\77\1\0\1\26\2\0\1\25\1\150"+
66634	SorePoint.BEFORE_CLASS;
16493	Put()'s
34675	getpositions
28700	posincratt
16004	anyErrors()
52909	String.getBytes("UTF-8")
59420	"\1\0\1\116\53\0\1\67\36\0\1\32\20\0\2\32"+
61717	uead5
51982	waitUpdate(docInc,
2408	numTens++;
26169	getSize(int
19834	doTestExactScore(INT_FIELD,FieldScoreQuery.Type.INT);
34221	DEFAULT_MAX_BUFFERED_DOCS
46151	U+0225:
17152	termsIndexDivisor);
42365	verifyPayloadData);
45395	U+0223:
63293	0x6421,
16180	KEY
55166	r1.document(id1));
36126	(FST),
25078	WildcardQuery
51402	newSegment
59860	"\1\164\3\0\2\137\151\0\4\u015f\2\0\1\u015f\15\0"+
10392	"\3\u016a\11\230\1\347\12\230\175\0\1\346\3\230\1\u016a"+
29200	TermVectorOffsetInfo(startOffset,
61044	"\1\u046d\175\0\4\u0537\2\0\1\u0537\15\0\1\u0537\6\0"+
49876	setmultitermrewritemethod
50127	addDocument
54036	normseek
1680	indexinterval
64379	Direct32(int[]
4790	assertEquals(10,
6331	"description"};
45378	U+0222:
16719	reader));
25529	Insanity[insanity.size()]);
59177	"\3\u7095\3\u7138\3\u71db\3\u727e\3\u7321\3\u73c4\3\u7467\3\u750a"+
30922	tdc;
52607	allClauses)
56733	r.getSequentialSubReaders().length);
27237	"\u0041\u0308\u0041",
59333	"\1\62\4\0\1\75\2\0\1\76\41\0\1\25\2\26"+
4421	testEqualsAndHash()
27713	"\u0061\u003A\u0308\u0027",
10296	"\1\144\1\137\1\u013f\1\u0140\1\u0141\3\0\1\136\4\0"+
10493	"\161\0\4\u015d\2\0\1\u015d\15\0\1\u015d\6\0\1\u015e"+
37527	query.setSlop(Integer.MAX_VALUE);
34641	super.explain(doc);
57205	(int)((endIndex-1)>>6);
894	"appendPostings".equals(trace[i].getMethodName()))
2763	myHc.getLastDocCollected();
4762	conf.setMaxThreadStates(5);
4469	assertsame
37671	testnotcloseenough
21352	".big7"
29491	runClasses.getFailures())
51937	linger.
64501	(!moreInclude)
40155	queue.size()
40231	termDocs(IndexReader
29240	mappings.
27921	"\u0031\u003A\u0061\u0027\u2060",
36805	IntsRef
19014	testMailtoSchemeEmails
36013	hits[0].doc);
66049	"+((stop))
17806	toptermsscoringbooleanqueryrewrite
3792	instantiated
44449	U+0229:
8691	this.fieldInfos
32188	(MockLockFactory.MockLock)
37037	deref");
18740	ÏÏÎ½ÎµÏÎ³Î±ÏÎ¯Î±
40683	idx=0;idx<terms.length;idx++)
58991	ii.readBytes(actual,
9880	"\1\77\2\0\1\25\1\0\32\25\1\0\12\26\2\0"+
583	idField
8659	instantiates
55006	sameFieldOrder=false;
56033	PositiveIntOutputs(true);
15260	")",
52352	p[0]);
12946	u3751
44386	U+0228:
65119	(doPrune)
68014	testLetterHtmlishHuge()
67938	end";
4674	assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH,
58528	copy.addAll(newWords);
5580	assertEquals(f1,f2,0.0);
34128	(min.doc
64564	newBuffer(newBuffer);
50277	it.</p>
67967	testMockGraphTokenFilterAfterHoles()
58579	assertTrue(hset.contains(it.next()));
53941	Byte[]
49773	oldentry
64662	PayloadFunction{
37424	assertTrue(result.getTerms().length
58022	tvf.getFilePointer();
2728	TimeLimitingCollector
61475	"\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\4\u02e2\1\u06a2"+
44025	U+0227:
39331	getintblock
9530	"\0\ue209\0\ue2ac\0\ue34f\0\ue3f2\0\ue495\0\ue538\0\ue5db\0\ue67e"+
4436	NumericRangeQuery.newIntRange("test10a",
6913	.toString();
2769	exceptionDoc="+exceptionDoc+"
39867	newReader.writeLock
13347	u3747
2838	")";
3798	implementing
65501	infoStream.println("IFD
4829	create_or_append
37534	assertEquals(0.31,
41807	faster...
655	IndexWriterConfig
8126	(bufferStart
1287	UOEDirectory
62645	testparenthesismust
17015	Integer.valueOf(positions[i]);
23244	assertEquals(15,
60056	"\12\u01e3\1\u0167\13\0\1\u0126\160\0\1\u01e4\33\0\12\u01a3"+
23491	IOException("fail
49520	RANGEEX_START:
52713	doTestBooleanQueryWithSpanQueries(searcher,
50013	<code>file</code>
15706	pattern.length();
21587	term.text();
16166	org.apache.lucene.search.spans.SpanOrQuery;
55476	Field("preanalyzed",
26244	end+1
49167	this.dateResolution
37093	arcWithOutputCount:
36186	arcWithOutputCount;
56784	assertEquals(16,
56915	"\1\55\1\25\4\0\1\24\1\25\1\0\1\51\1\0"+
11151	"\1\u03f0\33\0\1\u0397\1\u03f2\1\u03f1\2\u0397\2\u03f1\1\u0397"+
19231	Ï?Ï
26530	fieldInfo.name;
17949	properly.
9755	"\1\0\32\25\1\0\12\26\2\0\1\114\165\0\2\31"+
66670	getSysErr();
46619	,"-",
10091	"\4\77\2\0\1\77\147\0\1\115\20\0\2\115\25\0"+
56357	new_mid,
24262	SortMissingLastTestHelper
48112	closeDirSrc)
19161	Ø¹Ø
65245	lastInput.length);
21471	assertEquals(17,
38305	assertIntRangeSplit(Integer.MIN_VALUE,
38816	Reopen
61190	"\4\u05b8\2\0\1\u05b8\15\0\1\u05b8\6\0\12\u05bb\1\u05b9"+
39864	writeLock
52654	NoMergePolicy.
4428	QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange("test5",
26898	http://www.unicode.org/Public/6.0.0/ucd/auxiliary/WordBreakProperty.txt)
24929	dfhbj
28521	binarystored
15955	hasvectors
8192	IllegalArgumentException("Seeking
60347	"\1\u02eb\15\0\1\u02eb\6\0\12\u02eb\1\u0284\175\0\4\u02ec"+
49955	x7da7f00
48289	(matchStart
24678	expectedResult)
45262	OVERLAY
24697	expectedResult,
45302	U+022B:
61165	"\12\u02e2\175\0\1\u034d\4\u02e2\1\u05a6\25\u02e2\1\u034e\12\u02e2"+
24358	")("
22995	MultiSearcher(searchers);
13229	ueb82
25989	score);
15172	IndexWriter(tmpDir,
3151	cachedSegs)
41595	lines)
63013	WILDTERM
27208	"\u3031\u0308\u0061\u0027",
38466	assertEquals(11,
59867	"\13\0\1\u0126\160\0\1\u0168\4\u0166\2\0\1\u0166\15\0"+
3976	end()
67956	posIncAtt.setPositionIncrement(pendingPosInc
18670	à§§à§«
45215	U+022A:
52846	permission
11078	"\175\0\1\346\32\230\1\347\5\230\1\u03b9\4\230\175\0"+
12427	ueb96
6936	(Boolean.valueOf(minInclusive).hashCode()^0x14fa55fb)+
1367	termvector
2200	NoMergePolicy}
59474	"\1\0\1\25\2\0\1\25\1\141\15\36\1\273\14\36"+
50729	config.getMaxBufferedDeleteTerms
22525	getPositionIncrement());
39084	"));
46095	"á»·"
2978	cardinality
12828	ueb8c
11128	"\1\u03df\2\u03e0\1\u03df\5\u03e0\1\u03e1\175\0\1\u0386\4\u03de"+
42231	assertEquals(12,
2072	while(true)
5676	decide
28724	non-existant
57594	pagedbytes
56887	"\7\0\32\12\6\0\32\12\12\0\1\13\72\13\37\12\3\0\6\12"+
17680	MultiTermQuery#getEnum(IndexReader)
2339	because
45464	KRA
18966	builder.append(buffer,
63049	"\":\"",
17852	((maxId
57854	apparently
6087	(Token)
32446	randomtoken
3072	score()
39397	term.text(),
16120	mscores.length)
47989	docBasePerSub.put(sub,
41725	//Util.toDot(fst,
36346	(arc.isLast())
18351	score1);
5379	end);
46064	"á»¸"
63082	-Dtests.directory=MMapDirectory
33682	dir.setTrackDiskUsage(true);
39610	output.writeVInt(fieldNumber);
61718	ueb78
1327	Field("foo",
49066	newBooleanQuery(false);
58580	fail("remove()
33430	end).
26382	(++caseNum
55162	id1="
33962	checkedRpts
60149	"\2\0\1\u022c\15\0\1\u022c\6\0\12\u022c\1\u019d\13\0"+
1655	segmenttermenum
35692	y>>>=16;
15110	stringValue()
51363	prepareCommit(commitUserData);
5371	jjCheckNAdd(int
38857	currentGen
51414	(flushControl.getFlushDeletes()
64031	bdo.writeInt(i1);
21775	multiplied
45670	U+021A:
33855	<li>Check
7727	chars:{\u0111
28000	"\u0031\u002C\u0308\u0027",
1765	one,
4770	once
63941	TestAssertions
39865	one)
8567	one.
5017	((0x7bffd0f8ffffd9ffL
23156	assertTrue("document.getFields()
37607	one:
50506	one;
9104	assertEquals(ic1,
47668	visigothic
64914	timeElapsed
33419	digest.update(b);
45701	U+021B:
27598	"\u0300\u002C",
28072	"\u0031\u002E\u2060\u0308\u0031"
57148	startWord
5936	set(final
17134	Collections.synchronizedSet(new
61716	uea32
50055	finalLength
35107	currentbuffer
5782	mask,
59798	"\17\0\1\346\21\0\1\347\2\0\1\350\42\0\1\174"+
28052	"\u0031\u002E\u2060\u0308\u0030"
33911	rptGroups)
3040	MAX_ARRAY_SIZE
61294	"\1\u0621\5\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
46118	U+021C:
1982	mask;
64476	includeSpans
33582	numRounds);
38542	sel);
43296	HashMap<String,FieldSelectorResult>(fields.size()*5/3);
46149	U+021D:
47978	filter.setDocBases(indexSearcher.getIndexReader());
61381	"\4\u063a\2\0\1\u063a\15\0\1\u063a\6\0\12\u063a\1\u054c"+
43598	deletesMode
23685	ones
28362	multiplier
5182	jjMoveNfa_2(jjStopStringLiteralDfa_2(pos,
14963	q2);
27052	"\r\u005F",
40987	next/seek
21928	(resourceDescription
446	adddoc
6406	CharReader(Reader
41027	expected="
55416	dopooling
2115	address)
55106	"+d1);
56199	TestTermEnum(in.terms());
1997	address,
9281	address.
44645	U+021E:
48239	end2)
55337	Illegal
59292	"\100\0\1\124\6\0\1\125\32\0\1\126\21\0\1\127"+
7203	occurrences
56193	TestTermPositions
30438	testporterstemfilter
27648	"\u0061\u2060\u0308\u002C",
58350	bupto
12947	u37f4
44673	U+021F:
23429	String.valueOf(id)),
61398	"\1\u034e\5\u02e2\1\u0668\4\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
24314	"cbad"
5186	jjMoveNfa_2(0,
15585	diagnostics
13348	u37ea
25791	SpanNearQuery(SpanQuery[]
48039	storage.
34401	storage,
37967	gced
2405	[0-9]
8507	final1));
26799	SpanFirstQuery(new
55857	adddir
11055	"\13\0\1\u0122\160\0\1\u0163\4\u03a3\2\0\1\u03a3\15\0"+
58772	expected[i++]
52562	searcher.createNormalizedWeight(this);
43294	NO_LOAD.
2782	TIME_ALLOWED);
64034	zeroes
10473	"\2\136\150\0\1\376\3\264\1\u018e\26\264\1\141\12\264"+
64624	super.readVLong();
11416	"\1\u04bc\6\230\1\347\12\230\175\0\1\346\32\230\1\347"+
30924	testInvalidArguments()
3903	units.
1205	still
10289	"\1\246\14\36\1\141\12\142\1\u013e\1\136\1\143\1\136"+
36961	deltaCount;
43437	wrong.
22935	Integer.valueOf(random.nextInt(a.length));
48238	end1,
2118	address;
27056	"\r\u0300",
36698	address:
3609	cascade
34854	(termAtt.toString().equals("the"))
41598	lines[line++];
53870	testCodePointAtCharSequenceInt()
56270	borken
11698	"\1\1\10\0\1\1\3\0\1\1\37\0\3\1\23\0"+
507	newfield
57060	<td>1.12</td>
29593	"\1\0\1\142\2\0\1\142\6\0\4\142\1\0\7\142\1\0\3\142"+
18718	ÙÙØ´ØªÙ
13349	u388d
28710	"/Computers/Mac/Two",
309	only
60292	"\3\0\1\137\4\0\2\137\150\0\1\u0101\5\266\1\u02c6"+
8303	mmapindexinput
50596	Deletion
16088	newFSDirectory(dirPath);
10894	"\150\0\1\376\32\264\1\141\7\264\1\u0313\2\264\1\0"+
699	writer.getConfig().getMergeScheduler()).setSuppressExceptions();
34853	while(input.incrementToken())
60442	"\4\u0347\2\0\1\u0347\15\0\1\u0347\6\0\12\u0347\1\u0348"+
17921	biggest",
46062	"á»¶"
11865	resized
16980	tolowercase
27516	"\u005F\u0061\u2060",
52420	each.</p>
57947	-0.07948637f,
48271	prevStart
67248	TestTermAttributeImpl
33668	testForceMergeTempSpaceUsage()
17995	moment
4437	NumericRangeQuery.newIntRange("test10b",
59020	path.mkdirs();
22726	lowerVal.intValue();
35852	assertEquals("A,B,C,D
17582	d2.add(newField("f4",
18748	ÏÎ¿Ï
31639	getfieldsreader
27169	"\u3031\n",
5846	maxPos;
23227	srchr.search(query,
6122	ts.addAttribute(OffsetAttribute.class)
32663	.compareTo(new
23949	java.util.concurrent.Executors;
50152	deadlock;
68149	maxPos)
3187	entirely.
29432	CheckHits.checkNoMatchExplanations(q,
12948	u3897
25533	MapOfSets
48936	testmapper
8658	tokenstreams
47470	rotunda
38652	doc.add(newField("keyword2","test1",
10258	"\1\53\2\0\1\54\3\0\1\176\7\0\1\56\2\0"+
41285	VisitTerms<T>
51152	mergeFinish(merge);
3362	illegalargumentexception
57747	end="
66122	testmultifieldqueryparser
67449	assertTrue(segmentReader3.normsClosed());
55170	id2);
5977	masks
26999	"\u0001\u0308\u0300",
31190	"22.cfs",
20321	cc.isCached());
20790	"foo")
36729	non-bs
29591	"\1\0\10\133\22\0\2\133\15\0\60\142\1\143\2\142\7\143\5\0"+
37406	"foo",
57164	Arrays.fill(bits,
49502	Query(String
31634	text_to_compress
6802	maxInclusive
20038	prohibited).
22986	testoneelementlistsort
62937	shadowing
28529	binarycompressed
23121	OpenMode.CREATE
52155	stick
25497	Set<ReaderField>
64203	xffffl
45102	U+0220:
52242	linger
11553	"\1\u0522\30\230\1\347\12\230\175\0\1\346\32\230\1\347"+
26812	char[10][];
33254	"record_id";
48719	Integer.toString(Integer.MIN_VALUE))
4049	org.apache.lucene.util.TestNumericUtils;
21943	copyBytes(IndexOutput
19073	"<IDEOGRAPHIC>"
45064	LEG
39177	postingsFreqs[pos]
39394	"a");
67084	TestLazyProxSkipping.this.seeksCounter++;
34724	(multi
51890	this.limit
44301	U+0221:
16133	8.108544f,
24872	f.matchValues;
27261	"\u0041\u0308\u0300"
64878	query.*/
50053	hopefully
43034	says:
59452	"\1\52\2\0\1\170\3\0\1\54\2\0\1\55\3\0"+
51996	IndexWriterConfig.DISABLE_AUTO_FLUSH)
45533	U+0211:
38913	tvnot
39306	termarraysequals
3048	end;
591	System.currentTimeMillis()
28672	log("Token:
41976	elation
23411	modifier.deleteAll();
7039	ends
31926	Long.parseLong(value);
52774	field_text
511	slowmultireaderwrapper
45493	U+0210:
65985	bar\"~4",
50184	IndexWriterConfig.DISABLE_AUTO_FLUSH;
54187	mytokenstream
65094	suffixMinCount2
20478	newField(DATE_TIME_FIELD,
20731	this.length);
12145	u3808
21251	readLen);
60692	"\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2\1\u0428\1\u02e2\1\u0428"+
51857	directory.sync(toSync.files(directory,
49336	newMultiPhraseQuery(){
1539	indexEnum.close();
25350	"brown",
45535	U+0213:
27626	"\u0300\u0031\u002E\u2060",
57292	(word
36384	emptyOutputBytes.length);
45793	U+0214:
42019	testshortestpathsrandom
56933	"\1\0\1\61\1\0\1\11\2\52\1\0\1\26\4\0"+
55882	builtin
33276	1-"+id);
26854	termText.length(),
25119	wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
54453	this.keywordSet
54002	changed:
37078	changed;
48322	end2
45495	U+0212:
48321	end1
56275	end.
2476	end,
11850	invalidate
3051	end)
49946	jj_save
10819	"\1\u02cc\2\u02cd\1\u02cc\5\u02cd\1\u02ce\14\0\1\u02cf\160\0"+
16822	testSegmentReaderDelDocsReferenceCounting()
49058	parsed.
9517	"\0\u9fd1\0\ua074\0\ua117\0\ua1ba\0\ua25d\0\ua300\0\ua3a3\0\ua446"+
21511	os.getFilePointer());
48051	FSDirectory}
16154	testscorecachingwrappingscorer
52837	modify,
49277	newMultiPhraseQuery();
41205	r.terms(new
15600	IndexFileNames.segmentFileName(storesSegment,
40468	to/from
60422	"\32\266\1\142\1\266\1\u032f\10\266\1\0\3\137\1\0"+
57273	index>>6;
2767	(greedy)
23750	searcher.getIndexReader().incRef();
17368	atLeast(10);
45795	U+0216:
54539	1923);
23693	search-request,
21105	unit)
227	index
4240	NumericField("int").setIntValue(Integer.MAX_VALUE));
39720	retry),
52159	commitlock
9686	"\1\25\2\0\2\25\1\0\1\25\1\0\2\25\1\0"+
32361	makelockcount
57976	freeCount;
8367	listening
1937	position;
65377	newarcs
8193	position:
17409	if(terms
4200	Integer.MAX_VALUE
24744	IndexWriter(indexStore,
20898	position.
1630	require
45864	U+0215:
17058	position,
39128	position)
67444	assertFalse(segmentReader1.normsClosed("field4"));
26764	SpanPositionRangeQuery(SpanQuery
25221	"*",
58238	copyChars(text);
16085	FSDirectory:
50458	info.getDelCount();
53067	s1.charAt(i));
16079	FSDirectory.
58581	CharArraySetIterator");
9736	"\1\0\1\50\1\0\1\51\2\0\1\52\3\0\1\53"+
51340	FSDirectory,
21690	addIndexes
59611	"\1\36\1\355\1\36\1\355\1\36\1\355\1\36\1\355"+
56734	assertTrue(r.getSequentialSubReaders().length
6459	(TestException
28244	FSDirectory)
3356	bytesperdoc
31529	TEXT_COMPRESSED_LENGTH
40385	supply
45583	U+0218:
35561	Hackers
6782	geographic
2453	BooleanQuery();
43362	lastInt
25686	Enumeration
25237	{"a*",
54952	lastRefreshGen;
3760	units
29745	"\1\25\7\0\1\25\2\0\1\25\5\0\1\25\2\0"+
31829	"...");
42291	payload.length());
7197	positions
39543	UnicodeUtil.UTF8toUTF16(termBytes,
5783	there.
65269	isCompiled()
40102	there,
40950	seekResult;
45866	U+0217:
49357	(clauses.size()==0)
33403	Reset
56103	"pr*t?j")));
36474	(arcIdx
38097	inf.:
50180	WRITE_LOCK_NAME
56512	initspanqueue
52456	termAtt.resizeBuffer(NumericUtils.BUF_SIZE_LONG);
21572	searchTermText.indexOf(WILDCARD_CHAR);
26984	LOW
34954	getBoost());
65214	fst.outputs.common(output,
11407	"\6\0\2\u04b7\1\u04b6\2\u04b7\2\u04b6\1\u04b7\1\u04b6\1\u04b7"+
36102	ReadOnlyFST
45614	U+0219:
25001	igeac
64289	TermCollectingRewrite<BooleanQuery>
51774	loadDocStores
2916	ThreadInterruptedException(ie);
16461	locked
15280	_TestUtil.getTempDir("testfieldswriterexceptions");
45484	,"qp",
46749	,",",
28511	doc.add(stringFldCompressed);
19964	newsetfrommap
8186	this.curBufIndex
22122	Character.digit(chars[i
17638	testinitvalue
38424	Field("keyword","test1",
41366	"(by
21638	wildchar
26513	deleteReader
61615	ua9e3
28249	union
51706	anyChanges)
27187	"\u3031\u0308\u0027",
3361	illegalstateexception
1802	setFieldsStream(IndexOutput
26308	numChars
48042	migration
42414	zeros;
52221	totdoccount
9499	"\0\u44c4\0\u4567\0\u460a\0\u46ad\0\u4750\0\u47f3\0\u4896\0\u4939"+
22687	FieldCacheRangeFilter<Byte>(field,
37532	assertEquals(0.44,
4053	TestNumericRangeQuery32
43080	swapreference
50752	setDefaultInfoStream(PrintStream
30142	origEnum
37646	k=start;k<start+len;k++)
15878	<p>Current
57344	union(other);
12725	ua9f7
64430	ByteArrayOutputStream(value.length);
24803	missingVal
64261	getClass().getName()+"::"+typeName;
56295	#insertionSort(int,int)}.
61342	"\1\u034d\25\u02e2\1\u0644\4\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
4427	QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange("test4",
33880	"+min.doc);
14541	line_break
5262	stream){
62895	replaceinvalidacronym
11405	"\1\u0163\4\u04b6\2\0\1\u04b6\15\0\1\u04b6\6\0\12\u04b6"+
55513	reader.hasNorms("f1"));
54165	mp).setMaxMergeMB(1024*1024*1024);
41304	verify,
37570	Phrase
33719	rptGroups;
13126	ua9ed
57394	xmx64m
11367	"\2\136\150\0\1\376\32\264\1\141\1\264\1\u049a\10\264"+
56670	oneSecondResolution
49152	Runs
21806	added.
40043	rollbackSegments
23082	added,
12826	uea46
65465	retrying,
30981	DocTest.
14679	parser;
12425	uea50
10125	"\1\66\1\0\1\25\2\0\1\25\1\140\2\352\2\36"+
1857	abort()
31077	printSegment(PrintWriter
20753	(CloneNotSupportedException
36992	changes:
13227	uea3c
5268	parser.
3153	seg.base);
14711	parser,
32417	_TestUtil.getTempDir("testLuceneMmap").getAbsolutePath();
64355	Double.doubleToLongBits(docCountPercent));
23511	changes,
26340	encode(input.array(),
42875	#setType}
14712	parser)
7548	changes.
8172	super.readLong();
16697	changes)
30420	"voc.txt",
31939	IntParser(){
11699	"\1\1\40\0\1\1\4\0\1\1\6\0\1\1\4\0"+
26916	[0.3]
32045	stream);
52236	caution
38168	bits.getAndSet(l-lower)
34	licenses
29881	"\1\0\1\34\1\0\2\25\4\0\3\25\1\0\1\25"+
20886	reusability
55035	maxBufferedDocs=random.nextInt(3)+2;
37767	(scorer.score()
63295	0x6431,
11322	"\1\u0476\2\u0477\1\u0476\5\u0477\1\u0478\175\0\1\u0332\4\u0479"+
49032	inclusion,
59807	"\1\0\1\25\2\0\1\25\1\141\17\36\1\u0150\12\36"+
58770	expected[i]
416	licensed
55753	setMergedSegmentWarmer(warmer).
38276	addRange(int
53428	m=0,
26911	[0.2]
24979	igeca
66536	bytePool.allocSlice(bytes,
7637	(int)curChar
19499	(ExpectedException
9860	"\4\0\2\25\3\26\10\0\1\26\2\25\2\0\1\26"+
66950	outputs1.read(in);
48901	docNumAwareMapper);
60032	"\3\0\1\137\4\0\2\137\227\0\1\u01d5\163\0\1\u0101"+
62644	testflat
7936	channel
63296	0x6432,
63000	_TERM_START_CHAR
26370	codingCase.numBytes)
65274	FST).
58242	copyChars(char
24879	FieldDoc
40000	WriteLock
32792	originalstring1
32796	originalstring2
4891	settermindexinterval
36576	FST's
55346	getUTF8String(nTokens);
42732	Failing
23426	doc.add(newField("value",
8332	duplicate
53878	assertEquals(1024,
14871	(Long)
48520	sub-query
23624	tail
22204	"substantially"
39042	assertTrue(cm.isEmpty());
65265	Node
37907	isEmpty()
27919	"\u0031\u003A\u0061\u0027",
16264	sor(String
29310	tuples
53542	searchables[i].search(weight,
1860	directory.deleteFile(IndexFileNames.segmentFileName(segment,
48674	IOException("test
62585	allreq
16401	TEST_VERSION_CURRENT);
3619	maxnumsegments
56140	testRangeQueryId()
52752	hits.doc(i).get(FIELD_ID));
5844	Cached
6635	recursively
52148	segname
34013	pp2.offset
20654	FileSwitchDirectory(primaryExtensions,
20467	Arrays.asList(actualOrder));
2991	Caches
19604	expectedexception
2218	Map<SegmentInfo,Boolean>
32947	postings.lastOffsets[termID]
52587	uniques)
10710	"\4\0\2\136\150\0\1\376\1\u025a\31\264\1\141\12\264"+
30627	"\1\0\1\33\4\0\1\33\1\0\1\33\2\0\2\33"+
31329	assertEquals(numFields,
49959	x4d22000
40069	rollbackHasChanges
56744	readable:
22979	createrandomlist
17725	topLevel,
51111	rollbackInternal()
21941	<b>NOTE</b>
48594	streamValue
6055	t.setTermBuffer(b,
35009	algo
39569	text="
3063	incur
30168	termBytesRef);
61550	u8080
27462	"\u0030\u0308\u0061\u2060"
63003	_QUOTED_CHAR
18219	setdescription
1608	findTermThatWouldBeAtIndex(SegmentTermEnum
67876	(tokens
55099	fields.addAll(d.getFields());
22447	all.
21451	assertEquals(1027,
65030	int)}}.
41113	fstEnum.next
53690	all,
14707	parsers
27541	"\u00AD\u0308\u0001",
58137	snapshotting.
21542	cfr.close();
33251	all"
40902	assertNotNull("term
39670	tang
27542	"\u00AD\r",
64810	targetTerm
16646	lessthan
12547	u38a1
57541	Term[fieldStrs.size()];
57511	PagedBytes
3636	setpause
5334	jjFillToken();
26978	ZERO
51026	pendingMerges)
53435	NumericField("trie",
21465	assertEquals(1028,
36082	newstaticfilterb
12146	u38ab
36083	newstaticfiltera
27013	"\u0001\u0308\u0061\u0027\u2060",
67397	modifyIndex(0,
38036	shift="+j,
22776	Double.isInfinite(f))
16938	origsegmentreader
17123	termsIndexDivisor;
5406	queryparserconstants
35624	~B[i+2]),
42438	fieldToData.put(field,
40690	value));
42821	this.positionLength
25315	tals
254	RAMDirectory();
24180	high));
20661	nsde)
19706	phraseFreq();
52726	expectedScore};
35796	newDirectory(rd1);
4382	NumericUtils.sortableIntToFloat(upper),
32677	IndexableBinaryStringTools.getEncodedLength(original2,
10159	"\1\352\14\36\1\141\12\142\1\65\1\136\1\143\1\136"+
21768	uniquely
25316	tall
32994	numpostings
31301	searchIndex(oldIndxeDir,
33915	incr;
6573	precision
51606	pendingMerges:
49654	catch(LookaheadSuccess
15617	normGen[k]==CHECK_DIR
9641	"\3\u162b\3\u16ce\3\u1771\3\u1814\3\u18b7\3\u195a\3\u19fd\3\u1aa0"+
66843	TestMaxTermFrequency
10950	"\12\230\175\0\1\346\32\230\1\347\11\230\1\u0349\175\0"+
38182	max>>>shift);
23083	take
67198	all_
34622	positions.getPayloadLength()));
61120	"\4\u0583\2\0\1\u0583\15\0\1\u0583\6\0\12\u0583\1\u053b"+
63237	differently.
60616	"\1\232\1\u03f3\10\232\175\0\1\351\32\232\1\352\1\232"+
26161	GrowableWriter(int
42681	TieredMergePolicy)
31593	TieredMergePolicy,
66969	TestRAMDirectory
28355	weight.getQuery();
44303	U+0256:
37749	assertEquals("total
11713	zzBuffer[]
5976	bitsets
52734	expectedScores)
8806	Nested
66394	text1,
49011	AND_OPERATOR
20696	Payload()
29152	(numTerms
47952	tpc);
5245	Lex
39724	SegmentReader.get(readOnly,
21335	".hundred",
58135	corruptions
16552	maxSize)
25748	addall
742	NUM_THREADS
67419	modifyIndex(4,
2349	hits.getMaxScore()
44306	U+0257:
66378	text2,
30930	tdc.topDocs(numResults).scoreDocs.length);
546	TestIndexWriterExceptions
44453	U+0258:
64445	dataformatexception
65680	refCounts.get(fileName);
32824	fieldState;
16500	maxSize;
25324	metal'
7469	nextTokenIndex++;
51417	bufferedDeletesStream.bytesUsed()
26773	buffer.append("spanPosRange(");
45310	U+0254:
67405	modifyIndex(1,
33789	matchLength2;
38647	doc.add(newField("keyword","test1",
63115	100000000;
38408	OpenMode.APPEND).setMaxBufferedDocs(2));
34263	TieredMergePolicy}
29888	"\3\0\2\34\1\0\1\34\4\0\1\34\1\0\1\34"+
55193	len1=0;
3308	IllegalStateException
44236	U+0255:
23514	okay
50051	uncovers
24497	exec.awaitTermination(1000,
23578	"deleting")
25313	metals
11576	"\1\u0533\6\0\1\u0535\1\u0537\1\u0536\2\u0535\2\u0536\1\u0535"+
30802	buffer.lastTrailingHighSurrogate;
33559	testString.length()
51765	estimate=%.3f
30604	"\1\0\2\25\1\0\1\102\10\0\1\25\24\0\1\25"+
51046	doWait
22883	candBytes
64470	buffer.append(exclude.toString(field));
25472	Insanity[0];
57536	dataOutput.writeVInt(termInfo.skipOffset);
28297	Recursively
41341	File(dirOut));
17880	assertEquals("all
25244	{"o*",
23826	tracker.searcher);
21540	ins[fileIdx].readByte());
57587	reuse.grow(reuse.length);
67342	testReferenceCounting()
40728	-100,
59119	"\2\u49c8\2\u4a6b\2\u4b0e\2\u4bb1\2\u4c54\2\u4cf7\2\u4d9a\2\u4e3d"+
3263	isCached()
23898	tracker.searcher))
46827	testlatin1accents
44173	U+0253:
41774	TreeMap<String,Long>
50444	(doOpenStores)
23781	(closed)
53160	0xD800);
5945	blocks[elementPos+1]
43888	'"',
50131	Trying
20513	(best
26236	ByteBuffers,
44027	U+0250:
67732	subSequence(final
16722	assertNotNull(readOnlyReader);
54432	buffer.append("</li>\n");
67591	modifyIndex(5,
64300	DEFAULT_TERM_COUNT_CUTOFF;
32459	randomly
54877	SearcherManager.getSearcher(searcherFactory,
57783	testFutureCommit()
64124	assertTrue(tmpStr
53949	Norm
6292	<pre>
38131	assertTrue("Float
66350	postingsArray.byteStarts[termID]+stream*ByteBlockPool.FIRST_LEVEL_SIZE,
67478	task
50658	MB)
57962	PositiveScoresOnlyCollector(tdc);
34405	MB.
52061	indexexists
35832	iwout
40142	SegmentMergeQueue(readers.length);
66391	pivotBuf;
2638	Searcher
20901	Searches
31406	createIndex(String
15252	fsDir.sync(names);
4560	java.lang.reflect.Method;
36315	(startNode
16027	TimedThread[4];
1004	also
22932	Integer[random.nextInt(maxSize)
6332	BooleanClause.Occur[]
27273	"\u0041\u0308\u0061\u0027\u2060",
32513	TimedThread[3];
22893	AcceptStatus.YES;
17845	garbage
43305	fieldselections
64534	excludespans
28334	ldoc)
44188	"ï½"
60190	"\4\0\2\137\150\0\1\u0101\4\266\1\u025e\25\266\1\142"+
33068	fail("The
23076	parser.parse("id:doc1");
8514	<code>sink1</code>
24774	TopFieldCollector.create(sortMinRev,
35930	tokenizer.reset(reader);
9921	"\1\0\1\25\1\0\2\25\1\0\2\25\2\0\1\25"+
11929	scanning
31547	searcher.search(NumericRangeQuery.newLongRange("trieLong",
43227	assertTrue(segTermDocs.next()
23280	ldoc3
7130	setrewritemethod
23279	ldoc2
237	AGAIN
9147	doc.numStoredFields++;
38238	0x7fffffffffffec8L,
33912	(hasMultiTermRpts)
35752	x0000003f
52896	ARISING
62587	TestBooleanOr
40814	prune2==0,
19927	expectedscore
32959	ParallelPostingsArray
19202	ØØ§ØØØ
12147	u394e
57616	#addOffCorrectMap},
7779	assertNotNull(docs[i]+"
60839	"\12\u02e2\175\0\1\u034d\22\u02e2\1\u0428\7\u02e2\1\u034e\12\u02e2"+
31344	assertEquals("field
39355	disi.advance(bitSetDoc))
58413	Integer.valueOf(1);
26923	(Extend_FE)
44078	"ï½"
53189	merchantability
8447	verifierport
15294	id=0;id<numDocs;id++)
39843	subReaders[i];
66812	HashMap<String,Integer>(queryTerms.length);
27769	"\u0061\u0027\u0308\u00AD",
43435	these,
42007	addarc
21724	es);
7761	RuntimeException(e);
38128	FLOAT_NANs)
77	either
270	reader.docFreq(searchTerm));
60925	"\5\u02e2\1\u0428\24\u02e2\1\u034e\12\u02e2\175\0\1\u034d\15\u02e2"+
4047	isoverriddenasof
3501	0));
7157	int_positive_infinity
37599	//assertTrue("reversed
57171	(wordNum>=wlen)
14543	south
38481	assertTrue(notIndexedFieldNames.contains("unindexed2"));
61477	"\175\0\1\u034d\26\u02e2\1\u06a4\3\u02e2\1\u034e\12\u02e2\175\0"+
53841	chararraysetiterator
40666	assertEquals(30,
54729	this.lockDir
13350	u3930
60412	"\150\0\1\u0101\15\266\1\u0328\14\266\1\142\12\266\1\0"+
61423	"\1\u0678\6\0\12\u0678\1\u062f\13\0\1\u033c\161\0\4\u0679"+
65405	l[i]
52231	getpendingdeletes
30853	ended
55627	id50));
15262	this.delegate
35768	architectures
62669	AtomicLong();
24618	tfcOptions
64521	rewrittenExclude;
5187	jjMoveStringLiteralDfa1_2(long
51375	(hardwired
7479	drunken
14854	FieldCache.getStringIndex
54287	testAddByPoolOffset()
17732	TermQuery(term));
4626	getters.add("getIndexDeletionPolicy");
65483	List<CommitPoint>
29301	prevoffset
49421	String(output,
44844	U+0249:
11242	"\1\u0437\2\u0436\2\u0437\1\u0436\1\u0437\1\u0436\1\u0435\13\0"+
54443	render
8945	this.actualEnum
41999	testfinaloutputonendstate
56306	quickSort(int
32297	testDefaultFSLockFactoryPrefix()
60902	"\1\u04bd\2\u04bc\2\u04bd\1\u04bc\1\u04bd\1\u04bc\1\u04bb\13\0"+
38537	lazyFields.add("bin1");
6132	Token("foobar",
29334	forwarding
57270	xorCount(OpenBitSet
8080	ByteBuffer[]
44829	U+0248:
50084	directoryoffset
25732	sanitychecker
3881	isTokenChar(char
53669	Term("oddeven",
12949	u393a
836	assertTrue(w.failed);
58885	correctOffset(upto);
44249	"ï½"
61026	"\175\0\1\351\32\232\1\352\3\232\1\u01ae\6\232\175\0"+
23287	subsearcher
23843	(live)
35476	David
35325	testStopList()
56754	N);
12548	u3944
25731	cacheentries
31418	.setMaxBufferedDocs(10).setMergePolicy(mp);
44451	U+0247:
41728	Util.shortestPaths(fst,
55339	1+end;
58444	contains()
31366	assertEquals(34,
44388	U+0246:
9074	writestring
51256	registered
59107	"\2\u0d4b\2\u0dee\2\u0e91\2\u0f34\2\u0fd7\2\u107a\0\243\2\u111d"+
52781	scoreeq
6392	usage
41425	5000));
64389	java.util.zip.Deflater
55314	1+end)
42902	prototype.endOffset;
40228	assert(smi.termEnum.term().equals(term));
52992	upto+4);
35956	string>,C,D
54249	testSort()
37505	searcher.search(phraseQuery,
48779	token.text
60996	"\4\u0502\2\0\1\u0502\15\0\1\u0502\6\0\12\u0505\1\u0503"+
46084	U+024F:
26388	outputArray[outputCharNum++]
41953	dirout
38826	assertEquals(36,
2365	/*float
39415	fail("Too
2953	greedy
15063	FaultyIndexInput.doFail
14752	DOUBLE)
37438	org.apache.lucene.analysis.*;
19837	doTestExactScore(FLOAT_FIELD,FieldScoreQuery.Type.FLOAT);
49242	analyzer.tokenStream(field,
46053	U+024E:
37662	(hits.scoreDocs[j].doc
28011	"\u0031\u002C\u0061\u2060",
25076	TestWildcard
52121	ismaxnumsegments
21603	Ltd
62532	disjunction
35776	x00000003
27948	"\u0031\u0027\u0308\u002C",
60531	"\150\0\1\u0101\25\266\1\u0393\4\266\1\142\12\266\1\0"+
50697	maxBufferedDocs);
50143	IllegalStateException.
21385	Close
61187	"\4\u05b8\2\0\1\u05b8\15\0\1\u05b8\6\0\12\u05b8\1\u05b9"+
24252	"DJHBF");
24876	hitCount-1)
58388	"there",
53510	subDoc(int
50019	IllegalStateException(
56881	"\1\13\3\13\6\13\50\13\3\13\1\0\136\12\21\0\30\12\70\0"+
45537	U+024D:
42275	testoffsetattribute
6416	markSupported(){
32724	IndexableBinaryStringTools.decode(encodedBuf,
17821	toplevel
53059	String(source,
51768	merge.estimatedMergeBytes/1024/1024.));
24703	scoreMap.put
57487	Comparator<BytesRef>
4426	QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange("test3",
10673	"\1\u0230\1\u0231\1\u0232\1\230\1\u0233\1\u0234\1\230\1\u0235"+
51607	[total
38337	x0000000000000010l
17684	MTQ
40337	termDocs.read(docs,
24231	assertMatches
45497	U+024C:
27512	"\u005F\u00AD",
3622	totaldoccount
42686	(!doStop.get())
50925	Iterable<Document>
20500	Converts
59112	"\2\u2620\2\u26c3\2\u2766\2\u2809\2\u28ac\2\u294f\2\u29f2\2\u2a95"+
4859	getmodifiers
35775	x0000000f
45466	U+024B:
66756	10:53:57
10408	"\1\230\3\u016a\2\230\2\u016a\1\230\1\u016a\3\230\1\u016a"+
6555	<b>1</b>
28012	"\u0031\u002C\u0308\u0061\u2060",
12259	u809e
31468	"_0.fnm");
67592	MSR
21225	assertSameStreams(String
17394	adocs
46705	,"+",
46824	testlain1accents
4272	NumericUtils.intToPrefixCoded(lower),
26403	outputLength;
31800	logging
36157	bytesPerArc
59565	"\3\0\1\25\177\0\2\100\6\0\1\100\153\0\1\100"+
19597	fileinputstream
12660	u8094
67336	index2.close();
13061	u808a
12546	u37fe
56582	assertTrue("SegmentInfos
53846	TestCase
45451	U+024A:
12322	ua8bb
4706	Clone
15109	assertTrue("calling
3808	match
22889	matches++;
26352	outputLength)
30204	sameTermInfo(ti,
55325	Low
15618	(==0),
2666	pizza",
1883	DOUBLE:
10752	"\1\346\12\230\1\u016a\17\230\1\347\12\230\175\0\1\346"+
55488	(LUCENE-766).
19683	SCORE_CACHE_SIZE;
22461	#reflectWith}
61111	"\11\266\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
16059	indexerThread.join();
24063	"s\u00EDn",
12723	ua8b1
36656	isExpandedTarget(Arc<T>
9484	"\0\0\0\243\0\u0146\0\u01e9\0\u028c\0\u032f\0\u03d2\0\u0475"+
52663	testcompoundfiles
13124	ua8a7
10563	"\2\0\1\67\1\0\1\50\1\0\1\70\2\0\1\71"+
24269	SortMissingLastTestHelper[]
19712	SCORE_CACHE_SIZE)
9329	"\2\0\1\133\1\132\7\133\2\0\2\133\2\0\3\133\1\132\10\0"+
31239	TEXT_TO_COMPRESS,
31907	ShortParser()
43329	DocIdSetIterator#NO_MORE_DOCS}
51538	(dropSegment)
40074	segmentInfos.getUserData();
27117	"\n\u0308\u0031\u002C",
40927	assertTrue(validOutputs.contains(v)
32013	getEstimatedSize()
34191	configuration,
42832	#type()},
62464	requiredScorers
66346	intPool.buffers[intStart
42041	field.getComparator(size,
18350	score1,
58719	tdocs.doc();
21777	<p>Values
34157	hopping
28860	nextPerThread
21298	".cfs");
67778	(CharTermAttributeImpl)super.clone();
41079	System.arraycopy(prefix.ints,
22452	&quot;textually
1082	dir.setRandomIOExceptionRate(0);
16978	i)),
53679	pageSize
55427	addutf8token
7412	startDocument()
18400	score0,
5870	long[(int)((long)valueCount
34892	processor,
54265	scratch).utf8ToString());
1576	i));
52747	topdocs.totalHits);
16580	heap.length;
48314	tosamedoc
41915	trycount
36891	saved);
22298	offsetLeft,
67979	graphtokenizer
61157	"\1\u059c\5\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u02e2\1\u059d"+
56111	MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE),
44506	"ï½"
42722	"word".
62250	field(String
21170	OS's
18408	score3,
36338	getBytesReader(0);
65784	sum=0;
27027	STOP
17372	IndexSearcher(r).search(new
60752	"\17\232\1\352\12\232\175\0\1\351\25\232\1\u044d\4\232"+
8052	>0");
18787	testLao()
27455	"\u0030\u0300",
30633	"\1\0\1\25\1\0\3\25\1\0\1\34\1\0\2\25"+
56124	MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
48931	testreader
60287	"\2\137\150\0\1\u0101\31\266\1\u02c2\1\142\12\266\1\0"+
10105	"\1\141\12\142\1\65\1\136\1\143\1\136\1\0\1\136"+
43274	testBadSeek(2);
18354	score2,
29498	runClasses.getRunCount());
52246	readerpayloadprocessor
9176	BYTES_PER_DEL_QUERY
37820	non-letters.
15991	RUN_TIME_MSEC
11774	HANGUL_TYPE
35772	x000000ff
51091	(stopMerges)
7149	objectinputstream
27526	"\u005F\u0061\u0027\u2060",
15478	docStoreIsCompoundFile;
11688	ZZ_ATTRIBUTE_PACKED_0
45672	U+023E:
12950	u39dd
3655	ClassicTokenizer}.
26536	tvFieldNames.add(name);
14762	IllegalArgumentException("field
19952	map.size();
56946	ACRONYM
12549	u39e7
24542	locally,
20633	secondaryDir,
9520	"\0\uaf19\0\uafbc\0\ub05f\0\ub102\0\ub1a5\0\ub248\0\ub2eb\0\ub38e"+
16098	TestScoreCachingWrappingScorer
64481	moreExclude
2865	threadArray
22300	((offsetLeft
21601	Granta
12148	u39f1
45616	U+023F:
4821	getchain
55784	lastCount
21687	java.util.concurrent.ExecutorService;
9192	gen;
57951	Top*Collectors
61126	"\4\u0583\2\0\1\u0583\15\0\1\u0583\6\0\2\u0584\1\u0583"+
60710	"\2\u0428\1\u02e2\10\u0428\1\u034e\12\u02e2\175\0\1\u034d\1\u02e2"+
17423	termNumbers,
41933	simplerandomstring
17033	(storePositions
60778	"\150\0\1\u0101\1\u0462\31\266\1\142\12\266\1\0\3\137"+
3174	NoScoreCachingCollector(Collector
53346	SimpleFSDirectory(File
50559	old,
28455	testutf16inutf8order
67646	readercouple
61034	"\150\0\1\u0101\26\266\1\u0107\3\266\1\142\12\266\1\0"+
57802	"fourth");
18638	Ü¡Ü¢
62521	addProhibitedScorers(requiredCountingSumScorer);
9195	gen)
62540	addProhibitedScorers(requiredCountingSumScorer),
1138	gen,
27179	"\u3031",
13351	u39d3
44544	"ï½"
47954	tpc.commit();
17507	doc11.get("f1"));
35505	{unsigned
12323	ua95e
25882	NFS
17741	Read-only
324	NEW
21483	fail("File
56607	KeepNoneOnInitDeletionPolicy
59595	"\2\355\2\36\1\355\1\36\1\142\12\143\1\66\1\137"+
60682	"\12\u0426\175\0\1\u0425\33\0\1\u03b2\1\u0427\1\u0426\2\u03b2"+
19628	gens
59224	"\1\0\2\25\1\0\4\25\1\0\14\25\1\0\4\25"+
49111	<code>*</code>
57590	comparator.compare(termBytesRef,
52901	Except
48286	ppStart;
25826	NearSpansOrdered(this,
10912	"\1\u0325\160\0\34\u01ca\12\u0326\1\0\2\u01ca\1\u020d\3\u01ca"+
44151	U+0243:
50675	#DEFAULT_MAX_FIELD_LENGTH}
30102	DEFAULT_CACHE_SIZE
66195	{1,0};
34552	org.apache.lucene.search.Explanation;
57881	file.isOpen)
13125	ua94a
28905	composite
17465	single.close();
53008	matches(s,
11165	"\12\u03fb\1\u039f\13\0\1\u0122\160\0\1\u0163\4\u03fb\2\0"+
11502	"\1\u0500\13\0\1\u02cf\160\0\1\u0332\4\u04ff\2\0\1\u04ff"+
41753	Builder<Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1,
12724	ua954
29525	testruleinvariantintestmethod
58200	super.getSnapshots().entrySet())
22584	attclass
1687	testcompareto
8859	evaluate
28203	MultiCollector}.
31051	FileReader(file)));
28199	MultiCollector},
45797	U+0244:
24534	getScores
58061	freeCount
18422	printHits("testBooleanOptionalWithTiebreakerAndBoost",
34824	termAtt.setEmpty().append("multi"+(multiToken+1));
64278	Type.FLOAT)
38280	//System.out.println("0x"+Integer.toHexString(min>>>shift)+",0x"+Integer.toHexString(max>>>shift)+")/*shift="+shift+"*/,");
67374	subReaders0[i])
55601	assertFalse(r0.isCurrent());
18685	"à¦à¦à¦à¦¿à¦®à¦¿à¦¡à¦¿à¦¯à¦¼à¦¾",
8631	consumed.");
15929	@lucene.internal
57869	NIO
19451	docfieldconsumerperfield
45912	U+0245:
30638	"\7\0\1\34\4\0\2\34\3\0\2\34\1\0\1\34"+
36156	FIXED_ARRAY_NUM_ARCS_DEEP
66933	newPair(outputs1.common(pair1.output1,
50607	cfsDir.close();
46216	,"(1)",
60432	"\15\0\1\u0336\6\0\12\u0336\1\u0337\175\0\4\u0338\2\0"+
9959	"\1\54\3\0\1\176\7\0\1\56\2\0\1\57\4\0"+
27637	"\u0061\u2060\u3031",
39112	MultiPhraseQuery.add(Term[]
50916	contrib)
48995	contrib,
15146	(result
3413	individual
57998	(TermVectorsTermsWriterPerField)
17250	TermVectorsReader(storeDir,
39849	maxIndexVersion
19084	"ã",
67275	dir3.close();
54219	hash.reinit();
57539	dataOutput.writeVLong(indexEnum.indexPointer);
55911	get:
22736	newLongRange(field,
2793	TIME_ALLOWED-counterThread.getResolution());
21021	diskFree;
38608	assertEquals(version,
57412	get2
1635	config)
2649	Counter.newCounter(true);
57407	get1
16990	Map
43536	doTestWriteRead(100);
31804	config.
3239	create(Collector
35916	SingleCharAnalyzer
62747	score="
20364	testnowrappedcollector
35310	Set<Object>
50263	config;
31438	"ï½"
50548	bufferedDeletesStream
62318	check(q,
29283	indexformattoonewexception
18500	"<EMAIL>"
14649	Bytes.
9708	"\2\0\4\25\1\0\2\25\1\0\4\25\2\0\3\25"+
46153	U+0240:
10100	"\1\36\1\355\5\352\6\36\1\141\12\142\1\65\1\136"+
36362	stopAt)
61614	ua940
29125	readTermVectors(docNum,
14772	May
7140	suppresswarnings
3037	Max
32138	DocumentsWriter.BYTE_BLOCK_SIZE-newSize)
40178	matchingSegmentPos;
40115	Collections.sort(commits);
6681	gets
49158	old-fashioned
40355	docs[pointer]
51393	doBeforeFlush();
30469	Comparator<TermVectorEntry>
51530	merge.info
32162	nextlevelarray
43214	segTermDocs
15932	getBufferedDeletesGen()
55849	mainwriter
33716	checkedRpts;
20180	(required.size()
60762	"\1\352\4\232\1\u0176\5\232\175\0\1\351\10\232\1\u0456"+
47776	eighteen
56844	"\4\12\42\0\2\12\1\0\3\12\4\0\12\2\2\12\23\0\6\12"+
11933	number;
32727	charArrayDumpNIO(encodedBuf)
48451	maxTokenCount;
29149	numTerms);
40696	number>
52626	delegation
668	NOW
64067	assertEquals(1L,
17959	NOT
15737	number,
4123	number)
8551	TeeSinkTokenFilter(TokenStream
61413	"\4\u0675\2\0\1\u0675\15\0\1\u0675\6\0\12\u0675\1\u0658"+
34290	DEFAULT_MAX_THREAD_STATES;
59531	"\1\174\1\65\6\0\1\174\37\0\12\65\30\0\1\25"+
21821	number.
41056	cmo);
10202	"\2\136\150\0\1\376\4\264\2\u0103\2\264\1\u0103\1\264"+
51677	Constants.JAVA_VENDOR);
63112	machine!!")
34767	bar\"~2",
48454	maxTokenCount)
45482	U+0239:
20818	#PerFieldAnalyzerWrapper(Analyzer,
15575	NO)
32859	RAMOutputStream,
55307	nextInt(int
2749	TimeExceededException
40908	assertNotNull(t);
66166	littleReader.close();
53956	SegmentNorms(IndexInput
54491	delegating
53294	(output1.equals(output2))
45005	"ï½"
15514	NO;
554	Throwable
15644	NO:
27046	"\r\u002C",
29239	TermFreqVector}
92	org.apache.lucene.index.IndexWriterConfig.OpenMode;
2889	BitSet();
40947	InputOutput<T>(term,
48720	getversioncomparator
66414	perThread.charPool.buffers[textStart
17206	Now,
27218	"\u3031\u0308\u0031\u002C",
38979	hmap.put(hmapKey,val);
61385	"\1\u065f\15\0\1\u065f\6\0\2\u0660\1\u065f\2\u0660\2\u065f"+
7119	numbers
65809	j<nClauses;
60282	"\13\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
59655	"\1\67\1\0\1\25\2\0\1\25\1\141\3\36\1\u0103"+
17669	MultiTermQueries
45364	"ï½"
17168	NPE
43283	testindexdivisor
1774	streams,
57623	longer.
3228	Note
65393	dir.crash();
62440	Coordinator
24572	bs.set(0,
10604	"\3\0\1\136\4\0\2\136\150\0\1\376\3\264\1\u01e8"+
33595	text);
8502	EntityDetect(sink1);
246	confirm
41160	testing...
45079	"ï½"
45703	U+0236:
9931	"\3\34\2\0\2\34\12\0\2\34\1\0\3\34\1\0"+
29024	docNum)
3450	info.docCount;
22664	lowerVal
3813	charUtils
29070	docNum,
45444	"ï½"
64259	typeName;
25851	Mix
21561	preLen;
29954	"\1\64\7\0\1\64\4\0\2\64\3\0\2\64\1\0"+
32620	Min
43346	SortedVIntListBuilder();
45139	U+0235:
10287	"\1\137\1\u013f\1\u0140\1\u0141\3\0\1\136\4\0\2\136"+
5380	jjCheckNAddTwoStates(int
30186	(indexLength
61612	ua7fa
20061	clauses()
23072	hits2.length;
4490	setfloatvalue
56299	ceil(log2(x))
45160	"ï½"
40648	ArrayList<FSTTester.InputOutput<Long>>(terms2.length);
30175	getThreadResources();
6017	assertEquals(22,
29490	(Failure
44977	U+0234:
16405	getDeletionPolicy();
10530	"\2\136\150\0\1\135\4\u01ae\2\136\1\u01ae\15\136\1\u01ae"+
21791	org.apache.lucene.search.Similarity
44345	U+0238:
17323	(doesn't
45642	"ï½"
66570	trackallocations
8296	initcause
52758	scoreEq
3800	compatible
11657	"\1\u0565\15\0\1\u0565\6\0\12\u0565\14\0\1\u02cf\226\0"+
61296	"\1\u0623\6\u02e2\175\0\1\u034d\1\u0614\31\u02e2\1\u034e\12\u02e2"+
23338	testStressIndexAndSearching()
4522	testrangesplit_2bit
67068	createIndex(numHits);
62953	(filesPre.length-files.length)
59674	"\4\0\2\137\150\0\1\u0101\4\266\1\u010e\5\266\1\u0107"+
21137	contrast,
39257	buffer.append(terms[j].text());
44842	U+0237:
34821	typeAtt;
45475	"ï½"
31514	4).setLongValue(id));
42561	NumericTokenStream.TOKEN_TYPE_FULL_PREC
33089	typeAtt2
40281	multitermpositions
11292	"\150\0\1\376\30\264\1\u045f\1\264\1\141\12\264\1\0"+
23058	mSearcher.close();
4585	assertNull(conf.getIndexCommit());
33118	typeAtt,
55220	termEnum2.docFreq());
4632	getters.add("getDefaultWriteLockTimeout");
55813	assertEquals(20,
55428	idstring
58880	termAtt.resizeBuffer(bufferSize);
4673	IndexWriterConfig.DISABLE_AUTO_FLUSH);
43258	assertEquals(25,
21399	_TestHelper.isSimpleFSIndexInputOpen(cis.base);
32680	encoded2.length)
40754	pruning
44130	,"ae",
44208	U+023B:
10903	"\1\376\32\264\1\141\3\264\1\u031b\6\264\1\0\3\136"+
32843	field.isTermVectorStored())
61223	"\1\u034e\12\u02e2\175\0\1\u034d\31\u02e2\1\u05db\1\u034e\12\u02e2"+
4242	NumericField("int").setIntValue(0));
46746	,"*",
38990	doRandom(1000,false);
65752	ranges...
28314	subtree
53820	Iterator<Object>
11364	"\2\264\1\u0497\27\264\1\141\12\264\1\0\3\136\1\0"+
41263	nextResult
35277	lastSkipDoc[level]);
43119	Term("title",
43261	assertEquals(26,
67182	int[existingPositions.length
52566	subsearchers
5600	largest
22674	upperPoint;
9035	finish()
43955	U+023A:
17140	termsIndexDivisor)
30095	Pairs
28479	binaryValCompressed
2761	timoutException.getLastDocCollected();
39153	ArrayList<Term>
1031	assertEquals(23,
44701	"ï½"
61206	"\15\0\1\u05c5\6\0\12\u05c5\1\u058b\13\0\1\u02e1\160\0"+
38521	text",
48353	currentDoc
55988	<code>indexOf</code>
44934	U+023D:
64793	BytesRef.getUTF8SortedAsUTF16Comparator());
48921	testtermvectorsreader
65666	decRef(Collection<String>
6230	List<BooleanClause>
20034	clauses).
43095	{"id",
57674	Direct
64847	end_loc
4425	QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange("test2",
27910	"\u0031\u003A\u0308\u005F",
40665	assertEquals(24,
60221	"\1\u021c\151\0\46\u021e\1\0\2\u021e\1\u027f\3\u021e\1\u0220"+
56045	write(Long
976	Thread[NUM_THREAD];
44234	U+023C:
26703	Finds
40877	fstLong0;
56514	thetop
66753	larger:
65949	t:one~0.8)
66173	makeQuery(queryText);
11018	"\160\0\1\u0386\4\u0384\2\0\1\u0384\15\0\1\u0384\6\0"+
52367	PerTermPayloadProcessor());
49938	startopen
44812	"ï½"
52250	flushpending
42385	1500);
41997	syntheticdata
33636	TestIndexWriterForceMerge
53432	random.nextInt(Integer.MAX_VALUE);
21737	Final
11255	"\160\0\1\u0163\4\u0444\2\0\1\u0444\15\0\1\u0444\6\0"+
19531	RuntimeException(th);
48795	!testFieldsStoreOff[i])
11193	"\1\346\32\230\1\347\1\u0411\11\230\175\0\1\346\32\230"+
20629	FileSwitchDirectory
37848	spaces
67221	System.out.println("\nReady
43477	testSpanNearInOrderVersusOutOfOrder()
8947	Find
59665	"\150\0\1\u0101\1\u010b\2\u0107\1\266\1\u0107\1\u010c\6\u0107"+
44633	"ï½"
50447	NRT
23234	scoreN,
4343	NRQ
35969	testexclusive
66411	tokenText,
51362	prepare");
66409	tokenText.
52101	doflush
8029	MiBytes
40643	assertEquals(27,
44856	"ï½"
8083	chunkSizeMask,
56548	(exclDoc
52198	closemergereaders
37301	posInc
42511	unsupportedencodingexception
59383	"\3\0\1\25\3\0\1\25\1\26\5\0\1\25\2\0"+
65945	t:one~0.5)
19439	lastGen
28730	Term("nonexistantfield",
19483	ignored.
43901	non-ASCII
35471	A[],
30616	"\4\0\1\32\2\0\2\32\15\0\1\32\132\0\1\32"+
16425	psdp)).close();
1859	ignored)
16806	origSegmentReader.undeleteAll();
33896	Fill
40636	NO_OUTPUT));
51062	registerMerge(spec.merges.get(i));
56954	NUM
5972	entry_size
62292	"jones"));
53938	udc1c789
44916	"ï½"
66892	Pair)
39881	this.applyAllDeletes)
42592	getchars
43262	assertEquals(28,
8066	File
50603	(info.getUseCompoundFile())
39411	maxCounter)
52363	processors
22441	streamed
24405	ByteParser");
67984	lastoffset
67135	testcaching
58881	KeywordTokenizer(AttributeSource
52971	18)));
24972	setbottom
45952	U+FF56:
47564	ff35
47599	ff36
47500	ff33
55736	//writer.deleteDocuments(term);
4921	QueryParserConstants
47528	ff34
41569	testRandomTermLookup()
44777	U+012D:
47648	ff39
27700	"\u0061",
28565	bufferPosition
47621	ff37
47633	ff38
35025	filterIter.advance(target);
47213	ff2a
23833	acquire(long
47324	ff2e
22095	chars.length,
47303	ff2d
47266	ff2c
47234	ff2b
32327	Searcher:
50814	finishes
47372	ff2f
12443	uf5c6
30217	ti2,
14921	getreverse
5801	currentShifts
19269	?
46993	ff43
41342	System.out.println("Saved
46969	ff42
46924	ff41
31690	SimpleAnalyzer(TEST_VERSION_CURRENT));
46960	ff22
46979	ff23
47010	ff24
46012	U+FF57:
47056	ff25
30216	ti1,
47102	ff26
47132	ff27
47155	ff28
53466	Searcher,
44730	U+012E:
47187	ff29
26690	Searcher.
31769	PrintStream
35980	singlecharanalyzer
18212	queryweight
67181	newPositions
55647	addDirThreads
56653	.setIndexDeletionPolicy(policy);
41945	dorewrite
47869	ff1b
47865	ff1a
47840	ff1d
47829	ff1c
53245	Outputs}
47870	ff1f
31151	java.io.ByteArrayInputStream;
13245	uf5b2
47427	ff30
986	threads[t].join();
47473	ff32
47450	ff31
44775	U+012B:
45725	U+FF54:
47659	ff59
31923	Long#toString(long)}
47630	ff57
47640	ff58
47586	ff55
22424	setpivot
47608	ff56
12645	u7707
47248	ff4b
11645	"\15\0\1\u0558\6\0\12\u0558\1\u04fa\174\0\1\u0386\4\u0560"+
47282	ff4c
66095	f2:bla~0.5
47220	ff4a
37107	absCount);
60536	"\1\u0382\7\266\1\0\3\137\1\0\2\137\1\140\3\137"+
15329	docID=0;docID<sub.numDocs();docID++)
63446	0x8731,
61821	u32c8
61734	uf5a8
1799	fdt,
47407	ff4f
47338	ff4e
47313	ff4d
32141	address):
36196	address);
47169	ff48
44728	U+012C:
45900	U+FF55:
47208	ff49
12244	u7711
34491	sb.append("matchVersion=").append(matchVersion).append("\n");
17895	assertEquals("not
40157	matchingSegments[i];
47024	ff44
47092	ff45
47113	ff46
47144	ff47
47669	ff3a
47816	ff3b
55485	termPositions.seek(new
47819	ff3d
50202	DocumentsWriter.MAX_TERM_LENGTH;
47874	ff3c
47877	ff3f
47876	ff3e
47490	ff52
13340	u32d2
47457	ff51
60694	"\1\u034d\4\u02e2\1\u042f\5\u02e2\1\u0428\17\u02e2\1\u034e\12\u02e2"+
47539	ff54
47515	ff53
47446	ff50
7916	overwriting
39745	writer.readerPool.getReadOnlyClone(info,
16815	.clone();
55967	countuntilpurge
2663	pancakes",
54467	NormsWriterPerField(docInverterPerField,
35185	getMaxTermFrequency()
66506	(textLen1
40626	minimality
53337	singletonnoshare
57506	inital
39039	(int)cm.get(keyc));
65022	FSA,
200	updated
3184	ScoreCaching
35101	sizeInBytes()
49950	jj_nt
40677	FSA)
64863	ArrayUtil.oversize(size
52576	queries[i];
7314	returned.<br>
4227	count*distance+startOffset,
483	append
22099	conversion.
47832	ff5b
47677	ff5a
54260	org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}
47835	ff5d
43278	segmenttermdocs
44726	U+012A:
1800	fdt;
35495	tot8=0;
43008	newReference)
6149	TypeAttribute.DEFAULT_TYPE);
47881	ff5e
17860	assertEquals("num
36112	'suffix
16736	multi-segment
23011	lDoc2.add(newField("fulltext",
30622	"\42\0\1\33\37\0\1\33\1\0\2\33\16\0\1\33"+
50681	setMaxFieldLength(int
14633	Floats.
66721	Floats,
14573	x10000
46037	U+FF58:
16165	org.apache.lucene.search.spans.SpanNotQuery;
36931	bottom.count)
48604	perThread.stringReader.init(stringValue);
1798	fdx,
31819	iwc.clone();
8213	clone.seek(getFilePointer());
34952	weight.sumOfSquaredWeights()
51335	updates
61085	"\1\u034d\1\u02e2\1\u055e\30\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
19408	FilteredDocIdSet(dis)
28592	newPosition,
40475	finished
60316	"\2\u02df\1\u02de\5\u02df\1\u02e0\14\0\1\u02e1\160\0\1\u0274"+
35306	freqskip
46104	U+FF59:
18537	ÕÕ«ÖÕ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ«
43420	addint
7902	overwrite
57984	fill(state.numDocs);
19692	chunkStates[i];
28589	newPosition;
49023	fuzzyMinSim
41357	outputs.outputToString(expected)
23184	testNormalization(10,
22440	type-safe
21801	adding
17027	Whether
57971	numpositivescores
39519	ti);
66733	<p>Float
66770	setSort(fields);
2983	getlastdoccollected
27862	"\u0061\u002C\u0030",
29634	"\4\0\126\145\2\0\2\133\2\135\3\145\133\135\1\0\4\135\5\0"+
53216	half_shift
10546	"\1\u01c5\1\u01c6\1\264\1\0\3\136\1\0\2\136\1\137"+
7776	f.name();
15426	YES
34505	sb.append("ramBufferSizeMB=").append(ramBufferSizeMB).append("\n");
51795	getNumBufferedDeleteTerms()
42549	shift<64;
48606	postingTable
67622	Integer.parseInt(s.get("index"));
62810	fieldhits
62365	done",
41592	testExpandedCloseToRoot()
37560	assertEquals("phrase
6267	minSimilarity),
18062	(filter
4241	NumericField("float").setFloatValue(0.0f));
57214	flipAndGet(long
10173	"\1\324\1\136\12\142\1\0\3\136\1\0\2\136\1\137"+
54984	searchinggen
56440	tmp.setMaxMergedSegmentMB(0.01);
51773	documents/term
22797	other.includeUpper
52360	(!addToEmptyIndex)
19467	Charset#forName(String)
24448	testNewCustomFieldParserSort()
15546	normGen
9968	"\1\64\1\0\1\65\1\0\1\65\1\66\1\0\1\25"+
39775	(oldReaderIndex
42670	MyIndexWriter(d,
49728	jj_ls
66840	tmplist
60111	"\32\u020d\1\0\12\u020d\11\0\1\u020e\1\0\1\u020f\161\0"+
972	.setMergePolicy(newLogMergePolicy(10)));
27612	"\u0300\u0061\u003A",
66662	SoreType.ERROR;
41141	testRandomWords(int
51329	deleter.decRef(filesToCommit);
2068	fst.getBytesReader(0);
28636	stopTypes
6269	minSimilarity);
51282	IndexFileNames.stripSegmentName(file);
9747	"\2\76\6\0\1\76\11\0\1\100\6\0\1\101\32\0"+
21507	os.writeBytes(largeBuf,
23089	readerB.close();
6842	<code>long</code>
20268	maxcoord
63138	savedTerms);
10838	"\13\0\1\u0122\214\0\1\u02dd\2\u02de\1\u02dd\5\u02de\1\u02df"+
8815	TestRule
55326	nextInt(0xdc00,
31479	"_0_1.del",
32052	default_byte_parser
62721	docStarts[subIDX]);
53671	assertQuery(new
54301	assertAllIn(Set<String>
49648	jj_la
29262	vectors_index_extension
61536	u7796
3405	concurrently.</p>
55306	offsets2[k].getEndOffset());
4384	tf=NumericRangeFilter.newFloatRange(field,
63630	x654321
63301	0x6521,
12538	u32e6
42683	mp).setMergeFactor(mergeAtOnce);
44724	U+0128:
49691	jj_gc
12939	u32dc
26867	this.startOffset
58346	getutf8sortedasunicodecomparator
9969	"\2\0\1\25\1\140\15\36\1\271\14\36\1\141\12\142"+
12137	u32f0
60975	"\2\137\151\0\4\u04f3\2\0\1\u04f3\15\0\1\u04f3\6\0"+
64985	Outputs,
36337	BytesReader
61315	"\6\0\12\u0633\1\u05b9\13\0\1\u033c\160\0\1\u03a1\4\u0633"+
49707	ReInit(QueryParserTokenManager
1569	index.length();
18126	explain(IndexReader
60393	"\4\0\2\137\150\0\1\u0101\26\266\1\u0318\3\266\1\142"+
63447	0x8732,
34272	this.analyzer
46696	U+FF5D:
25008	ecagi
44773	U+0129:
28543	BEFORE_CLASS,
60002	"\12\232\175\0\1\u01a9\24\232\1\u01b1\5\232\1\352\12\232"+
29112	TVF;
35140	pt("w1",
47872	ff20
59805	"\1\202\2\0\1\203\41\0\1\25\1\66\7\0\1\66"+
46892	ff21
11554	"\2\230\1\u0171\7\230\175\0\1\346\6\230\1\u016a\23\230"+
46175	U+FF5A:
55242	ff2,
47808	ff0d
53416	getfd
47860	ff0e
47863	ff0f
44669	U+0125:
35739	v++;
47858	ff0a
47837	ff0b
47859	ff0c
34612	(positions.isPayloadAvailable())
37588	"+score2);
10116	"\17\36\1\141\12\142\1\65\1\136\1\143\1\136\1\0"+
44643	U+0126:
47750	ff19
23071	hits2.length);
47722	ff16
52938	UTF16Result
47715	ff15
47740	ff18
47731	ff17
47696	ff12
34020	pp.rptGroup
47690	ff11
40579	(intIdx
47708	ff14
66287	postingsHashSize/2;
47702	ff13
38758	postinglist
47682	ff10
8433	l.obtain(10);
6603	target="_blank">doi:10.1016/j.cageo.2008.02.023</a></blockquote>
46691	U+FF5B:
1641	getText()
5970	block_bits
4592	assertTrue(Similarity.getDefault()
12844	uf5bc
28877	reset(boolean
44671	U+0127:
47827	ff09
47824	ff08
47801	ff07
47854	ff06
47852	ff05
47848	ff04
48227	docSpansOrdered(int,int,int,int)
46396	,"9",
47847	ff03
47792	ff02
64048	is.readVLong());
47842	ff01
31521	appear
28632	StringReader("121
1572	term.compareTo(t);
60882	"\1\u04af\6\266\1\142\12\266\1\0\3\137\1\0\2\137"+
44891	U+0137:
44863	U+0136:
56764	numOnCommit="
14970	C"~N+1
55274	v2.getTermFrequencies();
36647	address="
48603	value");
33112	left",
8354	verifierHostOrIP
9461	"\2\12\43\0\1\12\61\0\1\12\53\0\1\12\64\0"+
44838	U+0135:
48217	docSpansOrdered(Spans
53801	pos++;
53321	valid(Object
12540	u342c
30504	<li>&lt;ALPHANUM&gt;:
46499	,"17",
18698	"à§¨à§¦à§¦à¦à¦¿à¦°à¦",
38260	0x0L,0xfL
25832	clone.clauses.set(i,query);
65585	writeTo++;
2574	docid
50533	.setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(deletionPolicy).setIndexCommit(commit));
44826	U+0134:
54806	filelock
3657	Construct
28759	MultiLevelSkipListWriter
33383	rollbackpoint
38150	(expectedBounds
20481	document;
61352	"\175\0\1\u034d\10\u02e2\1\u064d\21\u02e2\1\u034e\12\u02e2\175\0"+
51965	(flushPending
67229	(command
129	documents
9443	labels.
23885	(lastRecordTimeSec
606	(r.nextBoolean())
37758	medium
52600	allClauses.add(clause);
65866	testConjunctionPerf()
46799	U+FF5E:
44823	U+0133:
14830	Boolean.valueOf(reverse).hashCode()^0xaf5998bb;
63157	terms.get(random.nextInt(terms.size()));
5794	Generate
11764	Algorithm:
41716	compare(Long
9610	"\2\u7843\2\u78e6\2\u7989\2\u7a2c\2\u7acf\2\u7b72\2\u7c15\2\u7cb8"+
34380	(maxBufferedDeleteTerms
48476	Float.Nan,
2389	//System.out.println("Hash:
48376	<code>DisjunctionScorer</code>,
31281	assertCompressedFields29(dir,
67453	unaffected
30867	collator.clone();
36078	"five")))));
13342	u3418
48356	<code>DisjunctionScorer</code>.
24355	result[x].doc;
21323	randomly.
18069	getQuery()
60931	"\13\u02e2\1\u034e\12\u02e2\175\0\46\u021e\1\0\2\u021e\1\u027f"+
22297	equals(char[]
10018	"\123\0\1\25\13\0\1\25\21\0\14\25\2\0\2\25"+
40531	#reset()}.
44816	U+0132:
14668	SCORE);
6367	assuming
16826	document,
49344	FuzzyQuery(term,minimumSimilarity,prefixLength);
1928	document.
53829	(sb.length()>1)
33526	test5to0()
38419	document:
29558	"\2\0\13\133\5\0\53\132\25\133\12\134\1\0\1\134\1\137\1\0"+
41796	idx=0;idx<prefix.length();idx++)
64845	validterms
31963	NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(val));
44781	U+0131:
32029	Instructs
12243	u766e
40607	strings2
59010	sliceLength),
20776	FST.
20773	FST,
19380	FieldValueFilter}
12139	u3436
1238	f.setTokenStream(new
41451	strings)
52201	addmergeexception
65407	testCrashAfterClose()
6666	practice,
25733	creationplaceholder
50531	org.apache.lucene.index.IndexWriter.MaxFieldLength}.
50525	org.apache.lucene.index.IndexWriter.MaxFieldLength},
31988	strings.
44732	U+0130:
23768	practice:
36376	FST;
50762	"index="
41232	FST:
15538	src.docStoreOffset;
48022	strings,
12941	u3422
57774	assertEquals("term=f:"
64803	doens't
192	CLOSE
48000	null:set;
5535	(mantissa
27729	"\u0061\u003A\u0308\u0061"
38894	IncThread(r,
33941	{A,B},
39688	docno
59281	"\1\100\2\0\2\77\6\0\1\77\11\0\1\101\6\0"+
41166	inputToString(int
35380	docnr
50646	IndexWriterConfig#getMergeScheduler()}
25615	rfToValIdSets.get(kid))
31831	Constants.LUCENE_MAIN_VERSION);
57000	*much*
51088	maybeMerge(int
61823	u340e
24954	assertsanefieldcaches
50179	IndexWriterConfig.WRITE_LOCK_TIMEOUT;
49759	jj_lasttokens
11337	"\12\u0482\1\u0480\174\0\1\u0163\4\u047f\2\0\1\u047f\15\0"+
34530	DataInput}
3571	this.writer.set(writer);
12242	u75cb
29062	checkValidFormat(String
11283	"\4\0\2\136\150\0\1\376\2\264\1\u045c\27\264\1\141"+
61486	"\1\u034e\12\u02e2\175\0\1\u034d\24\u02e2\1\u03c1\5\u02e2\1\u034e"+
66875	testmaxtermfrequency
50572	changeCount++;
59557	"\1\26\104\0\1\26\235\0\2\77\12\0\1\77\210\0"+
64052	assertEquals("Lu\u00BFce\u00BFne",is.readString());
14590	yylength
66781	other.fields);
12643	u75c1
22451	toString}
31403	changeIndexNoAdds(Random
35350	stopwordsset
55493	tfv1
40346	getSimilarity().tf(freq)*weightValue;
55499	tfv2
6912	.append(ToStringUtils.boost(getBoost()))
30677	"\1\25\3\0\1\25\6\0\2\25\5\0\1\25\1\0"+
49533	jj_consume_token(TERM);
43652	doTestSearch(Random
40472	#end()}
56645	numDelete
2992	docs,
58812	(((ch-0x0010000)
2617	docs.
24566	docs1
24575	docs2
64270	source.
51019	resetMergeExceptions();
3820	source,
8493	source2
8486	source1
46490	,"16.",
16034	docs:
7714	NUM_DOCS
14604	zzbufferl
51307	#close},
60212	"\242\0\1\u0273\174\0\1\u0274\45\u0219\1\0\3\u0219\1\0"+
8626	source)
35002	weight.scorer(indexReader,
41712	assertFalse(arc.isFinal());
5886	DataInput,
2634	N_DOCS
5885	DataInput.
26564	assertTrue(termDocs
66017	+((b:two^5.0
56538	toNonExcluded()
7763	docs)
65674	(!refCounts.containsKey(fileName))
30494	ignoringpositions
43128	TopFieldCollector.create(sort,
24400	val.charAt(0),
53073	s1.equals(s2);
16350	placeholder
19372	org.apache.lucene.util.Bits;
46963	palatal
41225	docs;
55090	iter=0;iter<3;iter++)
27492	"\u005F\u3031",
41030	CountMinOutput<T>
65543	segmentInfos.getSegmentsFileName());
33105	testToStringAndMultiAttributeImplementations()
12006	zzScanError(ZZ_NO_MATCH);
55810	setMergedSegmentWarmer(new
49414	output[length]
12845	uf65f
8586	consumeAllTokens()
38620	IndexWriter.unlock(dir);
11722	zzEndRead;
23202	hits=null;
8540	sources
30885	TopDocsCollector<ScoreDoc>
66267	current.add(q,
66944	output.output1),
30356	commitData);
35846	range",
25185	"mXtXls"});
62678	ShardSearcher(IndexReader
20476	DateTools.Resolution.SECOND);
12444	uf669
11943	zzEndReadL
53844	recursion
50135	name="mergePolicy"></a>
33634	randommap
9408	"\4\0\60\142\1\143\1\142\3\143\2\142\2\143\5\142\2\143\1\142"+
4828	getindexdeletionpolicy
22169	minTargetSize);
3865	adjacent
18094	getValue()
60951	"\1\351\1\u04dd\31\232\1\352\12\232\175\0\1\351\1\u04de"+
57824	IndexReader.getCommitUserData(dir).size());
53689	assertPage(pageStart,
20565	source;
39059	assertNull("Test
60764	"\12\232\175\0\1\351\25\232\1\u0458\4\232\1\352\12\232"+
32102	Recycle
55921	t.get();
11839	zzEndRead,
67877	fillTokens();
33899	repetition
13044	u75b7
58403	testNonZeroOffset()
28690	testtypefilter
39363	XOR
7108	paper
12011	standardtokenizerinterface
1733	currently
23917	IOUtils.close(toClose);
48978	DateField}
18239	TestSimilarity()
278	full
35289	lastskippayloadlength
7646	concern,
52412	field.setOmitNorms(true);
16898	r1.deleteDocument(5);
55252	s1,s2);
43028	((ref
61533	u75ad
44779	U+012F:
57981	TermVectorsTermsWriterPerThread(termsHashPerThread,
61735	uf64b
10638	"\176\0\32\u020f\1\0\12\u020f\13\0\1\u01cd\162\0\4\u0210"+
23097	mSearcher3.search(query,
61410	"\30\u02e2\1\u0673\1\u02e2\1\u034e\12\u02e2\175\0\1\351\32\232"+
540	org.apache.lucene.search.IndexSearcher;
19881	innerArray
13246	uf655
3209	create(final
29457	RuntimeException("Shouldn't
4698	toString.
62244	newcachedthreadpool
55719	writer.flush(!doFullMerge,
37914	Iterator
42201	Collections.singletonMap(PositionIncrementAttribute.class.getName()
48313	spandoccomparator
60642	"\1\137\4\0\2\137\150\0\1\u0101\17\266\1\u010f\12\266"+
33131	CharTermAttributeImpl",
44189	U+FF42:
25479	valIds
44928	U+013D:
4337	assertEquals("Number
56509	:(queue.size()>0?(doc()+":"+start()+"-"+end()):"END"));
10979	"\1\u030c\4\264\1\0\3\136\1\0\2\136\1\137\3\136"+
38263	0x0L,0x3L
12536	u31a0
6148	"#type",
24076	"300",
63453	0x8743,
51799	segString(segmentInfos);
20831	StandardAnalyzer(),
51224	newSegName,
19412	((field
64604	ands
43142	scoreDoc
17193	asked
12135	u31aa
61537	u7839
23711	and:
55042	range="
57383	(a.bits[i]
30696	"\1\64\2\0\2\64\1\0\3\64\1\0\1\64\2\0"+
67755	(CharBuffer)
44250	U+FF43:
48085	newFile
44969	U+013E:
32748	buf.append('0');
40336	pointerMax
68167	rollingbuffer
51696	drop);
50136	separately
5930	((blocks[elementPos]
64897	mtr[i].init(reader);
63451	0x8742,
29857	"\2\25\2\102\10\0\1\26\1\0\2\25\1\0\1\102"+
4107	l=0;
8661	sinkfilter
23823	IllegalArgumentException("the
1182	dir.deleteFile(fileNameIn);
7513	clearLastVectorFieldName()
11503	"\15\0\1\u04ff\6\0\12\u0502\1\u0500\13\0\1\u02cf\160\0"+
50988	maxNumSegments};
40310	topreader
54200	initSize
18637	ÜÜ¬Ü
44930	U+013F:
61083	"\1\u055b\4\u02e2\175\0\1\u034d\7\u02e2\1\u055c\22\u02e2\1\u034e"+
35128	BytesRef(payload,
44327	U+FF44:
21052	and,
63450	0x8741,
3601	findForcedDeletesMerges(
60095	"\30\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
61198	"\1\u0545\175\0\4\u05bf\2\0\1\u05bf\15\0\1\u05bf\6\0"+
4683	assertEquals(IndexReader.DEFAULT_TERMS_INDEX_DIVISOR,
52103	joining
55130	r2.numDocs()="
51267	pre-3x
15977	normgen's
26625	allfieldnames
49602	endOpen=false;
8207	this.clones;
46763	,":",
20693	int)}
61051	"\4\u053a\2\0\1\u053a\15\0\1\u053a\6\0\1\u053c\1\u053e"+
44507	U+FF45:
19922	testrankint
2697	collector);
33261	(Iterator<IndexCommit>
43856	'\u0133':
18871	String[]{"dogs",
36363	bytes[posSave
41995	isexpandedtarget
54844	reopens
22047	background
24025	"B-8",
18849	"chte",
34496	commit).append("\n");
35821	ir.deleteDocument(0);
43623	hitCount++;
22213	currentSize
51814	keepFullyDeletedSegments()
18448	testranking
3271	lastDocBase
38852	SnapshotDeletionPolicy(new
60974	"\150\0\1\u0101\26\266\1\u04f2\3\266\1\142\12\266\1\0"+
23729	(open
65154	System.out.println("\nFST
41801	thru
44545	U+FF46:
31795	IndexUpgrader(Directory
35865	BooleanQuery.setMaxClauseCount(3);
66460	bytePool.nextBuffer();
38181	min>>>shift);
33744	(exact
67338	index2_refreshed.close();
6329	{"filename",
32636	originalString2[byteNum]
56606	numOnCommit++;
2071	fst.readFirstRealTargetArc(node,
44634	U+FF47:
28277	this.subScorers
44965	U+013A:
7679	lexical_error
40170	matchingSegments[numMatchingSegments]
33025	src.addAttribute(CharTermAttribute.class);
62544	addProhibitedScorers(Scorer
68044	rightOffset.endOffset());
49656	jj_save(0,
27104	"\n\u0061\u003A",
38881	r.document(0);
29157	STORE_OFFSET_WITH_TERMVECTOR)
21478	cr.openInput("f3");
8765	hits.totalHits);
6819	precisionSteps
4806	writer.getConfig().getMergedSegmentWarmer().getClass());
44926	U+013B:
35953	Lucene-38
41914	advancefloor
44702	U+FF48:
63488	0x8764321,
5809	(bitPos
38226	random.nextInt(5)-2;
1312	testIllegalPositions()
65615	lastFiles.clear();
3894	normalize((int)
53425	1000)));
67768	len),
44813	U+FF49:
845	conf.setMaxBufferedDocs(Math.max(3,
51183	dups.add(dir);
6808	precisionStep;
11767	UAX29URLEmailTokenizer.SOUTHEAST_ASIAN;
16118	IOOB.
44967	U+013C:
16383	TestPersistentSnapshotDeletionPolicy
33287	checkExpecteds(expecteds);
66905	outputs2.getNoOutput());
49612	goop2.image.substring(1,
39768	SegmentReader[infos.size()];
4514	testemptyenums
25420	Sorting,
31268	assertEquals("correct
24107	indexStore
4142	precisionStep,
19095	"å£¹ã");
67492	numReaders
2340	they
53021	fell
11330	"\1\u047c\2\u043b\2\u047c\1\u043b\1\u047c\1\u043b\175\0\46\u0214"+
638	doFail.set(null);
27501	"\u005F\u0308\u003A",
34646	Explanation();
8814	@Rule
60134	"\2\77\1\100\1\0\1\26\2\0\1\25\1\u011e\32\36"+
30410	Martin
4132	precisionStep)
962	numDel);
34526	approximate
60553	"\1\0\1\u0213\3\0\2\u01d0\4\0\1\u01d0\167\0\1\u03a6"+
62177	-ba*"),
48742	"f4"};
38141	useBitSet,
65896	"b:one
5981	structure
55281	TermPositionVector)
49921	lparen
5845	calculations
64257	Type("int");
59544	"\2\0\4\66\2\0\1\66\136\0\1\25\3\0\1\25"+
64098	"\u0634\u1ea1";
62478	lastScoredDoc)
62473	lastScoredDoc,
56911	"\1\47\4\0\2\27\7\0\1\50\4\0\1\3\1\4"+
5449	x97ffffff87ffffffl
1777	them
2997	then
4407	j<sd.length;
42830	#type()
56620	onInit");
51587	message("merge
28645	"while",
53991	ourself:
26094	OneComparatorScoringMaxScoreCollector(queue,
61501	"\3\1\23\0\1\1\40\0\1\1\4\0\1\1\6\0"+
55985	if(offsets
10283	"\1\143\1\136\1\0\1\136\1\144\1\137\1\u013f\1\u0140"+
53403	isFDValid()
37583	"+score1);
27370	"\u002C\u0031\u002C",
11953	ZZ_ATTRIBUTE;
11577	"\1\u0536\1\u0535\1\u0534\13\0\1\u02cf\161\0\4\u0538\2\0"+
20678	getextension
21715	openDeletedFiles.size());
43616	delCoreKey
50907	reindex
7133	numericrangetermenum
25002	ceagi
17789	getRewriteMethod()
36279	FSTs
35842	initializeIndex(new
5593	SmallFloat.floatToByte315(Float.MIN_VALUE));
58400	assertEquals(TEST_STOP_WORDS.length,
33133	CharTermAttributeImpl);
37065	wasted;
32944	offsetAttribute.endOffset();
8010	AccessController.doPrivileged(new
12647	u784d
10707	"\2\136\150\0\1\376\32\264\1\141\1\u0257\11\264\1\0"+
341	second
62330	"female"));
62665	SerialCounter
67907	overlapped
57275	subIndex
51758	handleMergeException(ioe,
22301	left.length)
58222	null}.
64329	(col.pendingTerms.isEmpty())
45463	U+0138:
24079	null},
18682	"à¦¬à¦¿à¦¶à§à¦¬à¦à§à¦·",
6552	searching.
52030	mergeexceptions
17654	searching,
9115	getdirectory
33321	KeepAllDeletionPolicy();
16807	assertNull(origSegmentReader.deletedDocsRef);
11997	IDEOGRAPHIC_TYPE;
52940	copyText(UTF16Result
52170	applydeletesresult
22393	min_radix
37994	int",
33827	(bits.cardinality()
42956	0x0a45aa31;
17230	IndexFileNames.segmentFileName(si.getDocStoreSegment(),
23735	reopen,
60380	"\5\232\1\352\12\232\175\0\1\351\4\232\1\u030d\25\232"+
37106	absCount="
24077	"A"},//J,y
15981	setbuffereddeletesgen
48668	java.io.File
60492	"\1\351\11\232\1\u0373\20\232\1\352\12\232\175\0\1\351"+
39166	pos++)
53020	incremental
24	this
44923	U+0139:
38870	writer.getConfig().getMergePolicy()).setMergeFactor(3);
38672	deletions.",
38726	fieldable1.size(),
44857	U+FF4A:
7777	fval
38266	0x0L,0x1L
45954	"ê "
3610	serialmergescheduler
23905	searching;
6637	searching:
54325	testaddbypooloffset
13048	u7843
29995	StandardTokenizer.HANGUL;
63066	"<RANGEEX_GOOP>",
27732	"\u0061\u003A\u0061\u0027\u2060",
20352	cc.collect(0);
35671	(upper>>>8)
64980	prevInput)
44917	U+FF4B:
53781	CharArrayMap.UnmodifiableCharArrayMap)
31571	assertEquals(Constants.LUCENE_MAIN_VERSION,
50825	closeInternal(boolean
53514	Math.min(nDocs,
34486	divisor
63211	hash-codes
20745	super.clone();
60905	"\1\u04bf\15\0\1\u04bf\6\0\12\u04bf\1\u040f\13\0\1\u033c"+
12246	u7857
34671	payloadtermweight
3508	"]");
55436	assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));
19878	int[0]);
54340	org.apache.lucene.analysis.standard.StandardFilter},
24430	bottomValue
56337	len2)
66289	postingsHashSize-1;
39204	queryNormExpl.getValue());
15027	MergeScheduler}
35256	DocSkip
55376	getString(1),
44385	"È¨"
11038	"\1\u0395\15\0\1\u0395\6\0\12\u0399\1\u0331\13\0\1\u02cf"+
50725	created.</p>
1430	failon
24747	"b"+i,
55205	len2;
8879	docID
56352	len22
45080	U+FF4D:
45125	U+0146:
26517	deleteReader.deleteDocument(0);
27214	"\u3031\u0308\u0031\u003A",
19466	charset
54981	waitinglisteners
31421	(!fullyMerged)
6636	intervals
65901	((stop))",
31237	decompressed
46511	,"18",
64936	(!English.intToEnglish(num).trim().equals(temp.toString().trim()))
65155	ADD:
18294	QueryUtils.check(random,
2910	docId
45090	U+0145:
45006	U+FF4C:
38064	-1.0E-2,
45129	U+0149:
7815	u3333
10941	"\2\u033e\1\u033f\1\u033e\1\u033f\1\u02d8\13\0\1\u0122\226\0"+
48539	visitoptional
61733	uf505
35551	foursA,
67584	assertRefCountEquals(int
57441	NoDeletionPolicy
19220	Ï¹ÏÏ¼Ï¹Ï
54490	delegee.scorePayload(docId,
36823	queue.size());
7969	unmapping
45365	U+FF4F:
35552	foursB)
34352	interval)
39492	interval,
45127	U+0148:
38063	-1.0E-1,
57497	interval.
37233	deepcopyof
37054	//wasted
12843	uf519
65608	refresh()
34354	interval;
66957	">";
45092	U+0147:
54427	buffer.append("<ul>\n");
13244	uf50f
37836	#LetterTokenizer(Version,
45161	U+FF4E:
41593	SyntheticData
54029	owner.directory().deleteFile(normFileName);
31937	NumericTokenStream}.
33670	config1="
39259	buffer.append(terms[0].text());
65612	any:
60505	"\32\266\1\142\10\266\1\u0383\1\266\1\0\3\137\1\0"+
58640	docCount=0;docCount<numDocs;docCount++)
60743	"\1\u03d4\13\0\1\u0126\226\0\1\u02ef\13\0\1\u0126\160\0"+
50161	thread.</p>
14546	thai
27602	"\u0300\u0030",
33397	any,
22017	maxskiplevels
64436	decompressor.end();
48296	any.
9270	org.apache.lucene.analysis.standard.StandardTokenizerInterface;
44973	U+0142:
19563	InputStream}
23773	searcher.getIndexReader().decRef();
64911	MultiThreadTermVectorsReader
53625	docs.fields.length;
39248	buffer.append(field);
4162	(filter)";
44207	"È»"
51177	HashSet<Directory>();
58529	assertTrue(copy.containsAll(newWords));
57434	and_not
7888	unable
25894	target="top"
49875	fashioned
32496	r2.numDocs());
62761	shardHits[shardIDX]
247	that
30177	tiOrd;
65179	frontier[pos1].inputCount
44932	U+0141:
17838	TermRangeFilter
1764	than
39977	Similarity.getDefault().encodeNormValue(1.0f));
44004	"Ã¥"
27334	"\u002C\n",
30205	tiOrd,
16360	invalid",
24104	getIndex
36424	Unsigned
34533	InputStreamDataInput(InputStream
51710	mergeMiddle(MergePolicy.OneMerge
23245	multiSearcher.docFreq(new
6951	infinity
31898	FieldCacheImpl();
45123	U+0144:
62214	hits");
7061	fails,
21389	fails.
45216	"È¬"
19210	ÏÏµ
24598	assertTrue(sd[j].doc
48501	public.</p>
52331	"p1"),
61319	"\6\0\12\u0635\1\u0636\174\0\1\u0349\4\u0635\2\0\1\u0635"+
30925	numResults
59395	"\1\214\17\0\1\215\21\0\1\216\2\0\1\217\42\0"+
31476	_2.cfs
7565	infinite
32086	getByteBlock();
50252	organic
45088	U+0143:
17928	testRangeFilterRandCollating()
16591	any)
9857	"\1\0\12\64\2\0\1\66\25\0\1\25\3\0\1\25"+
44448	"È©"
43994	"Ã "
52176	clearflushpending
26605	result.getTermFrequencies();
30213	index.getIndexOffset(term,termBytesRef);
60932	"\3\u021e\1\u0220\1\u016c\1\u016d\1\u016e\2\0\2\u021e\4\0"+
50983	optimize(boolean
41468	builder.add(Util.toIntsRef(c,
39779	(newReaders[i]
50510	LIMITED,
67452	thrown.");
17810	gettermsenum
32887	lastTermBytesCount
56799	numoncommit
57150	endWord
36635	address!)
14715	FieldCache.IntParser)
1903	len);
6677	choose
20158	"product
38437	5*mergeFactor;
41442	assertNull(fstEnum.seekCeil(new
46120	"È¤"
57862	NIOFSDirectory}.</font>
56924	"\2\15\1\16\1\35\4\0\1\34\1\35\1\0\1\57"+
51517	unqualified
32915	perThread.utf8Results[encoderUpto].result;
34670	payloadfunction
41159	symbols
58975	AlreadyClosedExveption");
14660	IMPLEMENTATION
2495	coord(int
66577	int_block_mask
62656	get();
13046	u76fd
39516	add(fieldInfos.fieldNumber(term.field),
50709	LogDocMergePolicy");
41466	builder.add(Util.toIntsRef(b,
10975	"\2\136\150\0\1\376\32\264\1\141\5\264\1\u0369\4\264"+
29181	ArrayUtil.grow(byteBuffer,
824	failed
52937	newLength;
61535	u76f3
17625	get().
44971	U+0140:
20090	(!clauses.get(i).isProhibited())
43924	ABOVE
16080	testAtomicUpdates()
27116	"\n\u0031\u002C",
27226	"\u0041\n",
58953	queryparsertestbase
1801	fdx;
42156	newLength)
62389	greta
54906	writer.deleteDocuments(t);
44976	"È´"
22509	key/values
51112	message("rollback");
53124	chars[w
10866	"\12\230\175\0\1\346\1\u02fc\31\230\1\347\12\230\253\0"+
57430	prevsetbit
53577	createDocFrequencyMap(final
2117	(table[pos]
9200	termsArray.length;
50014	sub-stream
65102	'divergent'
20810	dataoutput
50110	#updateDocument(Term,
27212	"\u3031\u0308\u0061\u002C",
45913	"á´ "
31310	expectedCount,
12138	u3393
4039	tochars
45377	"È¢"
54135	stopfilter);
12940	u337f
27293	"\u003A\u0308\u000B",
41994	childcount
54672	VerifyingLockFactory},
67210	VerifyingLockFactory}.
11974	translated
62285	anon
30106	termOrd;
9089	getVersion()
63146	while(termEnum.next())
12442	uf523
45476	U+FF51:
1665	directly
67904	ArrayList<Token>();
12033	translates
23169	ftl.clear();
6207	+(title:term1^5.0
45394	"È£"
18734	"ÙÙÙ¾Ø¯ÛØ§",
61822	u336b
25298	testwildcard
27603	"\u0300\u0308\u0030",
27514	"\u005F\u0300",
10151	"\1\25\2\0\1\25\1\140\1\352\11\36\1\352\6\36"+
37808	MatchAllDocsWeight(searcher);
46239	,"(2)",
21790	"norm(t,d)"
12539	u3389
45445	U+FF50:
44084	,"AA",
16518	values).<br>
33718	PhrasePositions[][]
24547	sort).scoreDocs,
9761	"\3\0\1\55\7\0\1\56\2\0\1\57\4\0\1\132"+
60588	"\12\u03d8\1\u02ef\13\0\1\u0126\160\0\1\u0168\4\u03d8\2\0"+
33569	h,8,9
39237	(queryExpl.getValue()
16386	snapshotDir;
66693	testfailuretest
29813	"\3\0\2\25\1\0\1\25\4\0\1\25\1\0\1\25"+
11519	"\1\346\32\230\1\347\7\230\1\u050b\2\230\175\0\1\376"+
45643	U+FF53:
20447	sort).scoreDocs;
41464	builder.add(Util.toIntsRef(a,
57929	extension.matches("s\\d+"))
720	during
32527	(byte)0x23,
50068	copyFile(FileEntry
65810	addClause(bq,result);
13341	u3375
16399	snapshotDir,
51956	pcp)
56346	len11
10684	"\1\376\1\264\1\u0244\30\264\1\141\12\264\1\0\3\136"+
56336	len1,
55192	len1;
53728	Set<Object>},
28733	linux
42767	chained,
64671	avgpayloadscore
62161	DisjunctionMaxQuery(1.0f);
60124	"\1\0\3\u0219\1\0\2\u0219\1\0\3\u0219\3\0\1\u0219"+
51958	pcp;
28713	categories.length;
45569	U+FF52:
17836	'positive'
38347	x8000000000002510l
8579	it.hasNext();
31771	(i<args.length)
65111	frontier[idx].inputCount
39390	PayloadFilter.count
5223	literal
27243	"\u0041\u0027",
64431	decompressor
50499	IndexWriterConfig#getSimilarity()}
16755	ParallelReader
36244	nextFinalOutput);
5549	parts
16825	deletedDocsRef
53191	party
51313	anySegmentsFlushed
4763	assertEquals(5,
4679	assertEquals(false,
9343	"\3\133\1\0\4\133\2\0\1\132\6\0\1\133\16\0\12\134\21\0"+
43424	resizebytes
22925	paybytes
64977	freeze(final
11413	"\175\0\1\346\2\230\1\u04bb\27\230\1\347\12\230\175\0"+
45929	U+FF36:
66484	UnicodeUtil.UNI_SUR_LOW_END)
3024	substantial
31755	tool");
8662	cloneattributes
45282	U+014D:
40737	List<InputOutput<T>>
61824	u34b1
50187	IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;
18570	ááááµ
31454	newLogMergePolicy(true,
46024	U+FF38:
21691	randomoly
48430	(!scorerDocQueue.topSkipToAndAdjustElsePop(target))
18560	"Õ¯Õ¡ÕµÖÕ¨"
38882	r.document(1);
7017	min.intValue();
42828	Defaults
1072	MockAnalyzer(random)).setMergeScheduler(new
4787	assertEquals(4,
1436	outofmemoryerror
1226	"silly
50740	mergePolicy.setMergeFactor
45987	U+FF37:
33689	temp
45192	U+014E:
53837	reusing
7273	PriorityQueue<T>
33651	sis.read(dir);
40079	doClose()
63458	0x8751,
57846	FileChannel's
12942	u34c5
51113	finishMerges(false);
867	assertEquals(3,
37243	downto
13343	u34bb
36412	outputs);
2948	pancakes
21363	tell
19862	doTestCaching(INT_FIELD,FieldScoreQuery.Type.SHORT);
5548	parse
45133	U+014B:
45688	U+FF34:
58620	newwords
43110	"str_s","y"}));
49114	Default:
67154	TermVectorEntry(ALL,
39941	subReaders[i].numDocs();
22948	Collections.reverseOrder());
12140	u34d9
26207	getmutable
388	assertEquals(2,
9142	doc.numStoredFields;
6387	part2
44233	"È¼"
6386	part1
10043	"\3\25\1\0\3\25\1\0\6\25\1\0\1\25\2\0"+
32526	testSingleBinaryRoundTripNIO()
60813	"\175\0\4\u047d\2\0\1\u047d\15\0\1\u047d\6\0\12\u047d"+
12541	u34cf
41389	idx]);
45190	U+014C:
45829	U+FF35:
40820	UpToTwoPositiveIntOutputs.TwoLongs)
42680	1+w.segmentInfos.size();
63461	0x8753,
11492	"\1\u0386\4\u04f8\2\0\1\u04f8\15\0\1\u04f8\6\0\2\u04f9"+
36332	cachedRootArcs
39916	commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName()))
63307	0x6541,
67060	this.term1;
5608	atLeast(100000);
60214	"\1\67\1\0\1\25\2\0\1\25\1\u0276\32\u021a\1\u0219"+
39781	newReaders[i].getSegmentInfo().getUseCompoundFile())
16846	assertTrue(clonedSegmentReader.isDeleted(2));
45524	U+FF32:
30626	"\5\0\1\33\7\0\1\33\4\0\2\33\3\0\2\33"+
62977	copyFile(Directory
375	assertEquals(1,
36830	seen.set(arcAndState.arc.node);
55208	(term2==null)
55960	reclaimed
40112	doesn't.
58588	test_stop_words
19709	(!chunkStates[i].posEnum.skipTo(doc))
9536	"\1\231\1\u013c\0\u8a2b\1\u01df\1\u0282\1\u0325\1\u03c8\1\u046b"+
63459	0x8752,
41903	inputtostring
5589	LUCENE-2937)
60102	"\2\137\150\0\1\u0101\23\266\1\u0207\6\266\1\142\12\266"+
49265	(!quoted
45601	U+FF33:
28802	writeSkipData(level,
59373	"\1\0\1\51\1\0\1\176\2\0\1\177\3\0\1\54"+
20264	setminimumnumbershouldmatch
966	assertEquals(0,
60700	"\12\u02e2\175\0\1\u034d\2\u0428\2\u02e2\1\u0428\3\u02e2\1\u0428"+
32295	write.lock
1413	testexceptiondocumentswriterinit
16989	currentField;
26917	assertAnalyzesTo(analyzer,
35076	setFileLength();
41522	outOfBounds
45284	U+014F:
45420	U+FF30:
20297	NoOpCollector
31681	newtieredmergepolicy
58302	a.length
22971	non-random
28866	nextPerThread,
59741	"\12\160\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
19101	"ã");
547	IndexerThread
28393	assertEquals(utf8[i].utf8ToString(),
63465	0x8754,
2401	//The
48149	Comparator<Spans>
21491	byte[100];
28837	nextPerThread;
40263	newreaders
61471	"\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\11\u02e2\1\u069f\175\0"+
48072	"scopes"
45460	U+FF31:
48491	this.weight
339	(.del)
39328	int_block_size
62771	shardHits);
31682	origsegcount
20587	icucollationkeyanalyzer
40811	FST.INPUT_TYPE.BYTE1
66355	postingsHash[upto]
54220	org.apache.lucene.util.BytesRefHash#get(org.apache.lucene.util.BytesRefHash.Entry)}
45307	"È±"
15892	toString(Directory
35039	filter.hashCode()
64359	(Double.doubleToLongBits(other.docCountPercent)
28300	(root
63167	xmx8g
21886	getvalues
13242	uf3c9
10923	"\1\u0330\15\0\1\u0330\6\0\12\u0334\1\u0331\13\0\1\u02cf"+
42503	get()
8523	tees
41223	termEnum.next();
46832	ne
31231	(!reader.isDeleted(i))
38230	val>>>1;
408	Term("id",
66900	outputs1,
66200	{1};
10971	"\1\376\32\264\1\141\1\u0366\11\264\1\0\3\136\1\0"+
42454	PayloadData(int
44300	"È¡"
48891	//Try
28031	"\u0031\u002E\u2060\u0001",
38288	0x80002510,0x8000251c,
66883	outputs1;
66443	textStart);
55497	'with_tv'
8023	mapped
40271	oldbytes
58700	random.nextInt(maxTF)
1106	PrintStream(new
19744	gens[posIndex]
23340	teststressindexing
13050	u7989
66901	outputs2)
17002	mapper
15943	hassinglenormfile
3496	segments.size();
63310	0x6543,
51991	setFlushPending("maxBufferedDocs",
52309	PayloadTokenStream(String
66885	outputs2;
34547	prefix.field()
17554	0.001f);
63825	wordshift
12649	u7993
35327	stopWordsSet.add("good");
36674	getBytesReader(getNodeAddress(arc.nextArc));
41756	outputs.newPair(7L,
34747	assertEquals("field:\"(multi
63308	0x6542,
28887	intpool
30371	tpcs.length;
67059	this.term2;
66714	Field.Index.NOT_ANALYZED));</code></p>
54436	getIdf();
54320	getutf8sortedasutf16comparator
61539	u797f
2311	noPayloadField
3440	segments.size())
7750	makeIndex()
10433	"\1\253\1\254\1\255\1\256\1\257\1\260\1\261\1\262"+
10275	"\1\172\1\0\2\172\7\0\3\172\2\0\2\172\12\0"+
58507	setCaseSensitive
25252	"ab*e*",
56191	(in.term().text().indexOf('e')
13345	u3601
4486	testrightopenrange_8bit
45138	"Èµ"
50193	IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;
7181	actualenum
58375	"for",
21180	String...
16107	ScoreCachingWrappingScorer
33244	abstractalltermdocs
33997	groups.
59715	"\3\266\1\u0107\13\266\1\u0107\12\266\1\142\12\266\1\0"+
55957	t.remove();
33935	groups)
59105	"\1\u4c5e\1\u4d01\1\u4da4\1\u4e47\1\u4eea\1\u4f8d\1\u5030\1\u50d3"+
49243	CachingTokenFilter
32095	(bufferUpto
12543	u3615
28575	newPosition
45094	U+014A:
1908	Number
5266	SwitchTo(lexState);
45301	"È«"
12440	uf3dd
25031	testsortwithscorenomaxscoretracking
40249	terminfosindexdivisor
55799	"b"+x));
18875	String[]{"ac",
12248	u799d
34899	MultiTermQueries.
51613	(while
33209	anothertesttype
36874	len="
58666	IndexWriter(cachedFSDir,
64755	te.term().utf8ToString());
56225	System.err.println("method
27707	"\u0061\u003A\u0308\u0041"
37581	"+score0);
58319	(0xee
26357	inputByteNum
48070	considered
12944	u360b
55755	writer.getConfig().getMergePolicy()).setMergeFactor(2);
19912	innerArray,
53305	add(Object
11669	int[223147];
7952	path
19830	doTestExactScore(INT_FIELD,FieldScoreQuery.Type.BYTE);
35648	{8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0};
46071	U+FF39:
4712	conf.setMergeScheduler(new
16345	spanqueries
25094	assertFalse(wq1.equals(fq));
34692	niceties
46348	,"7",
3804	your
61731	uf3bf
8142	past
43952	"È¦"
4774	pass
27009	"\u0001\u0308\u0061\u003A",
58708	writer.getConfig().getMergePolicy()).setMergeFactor(100);
52435	NumericTokenStream(AttributeFactory
12142	u361f
48655	setaborting
12841	uf3d3
51800	segString(Iterable<SegmentInfo>
44022	"È"
30814	(read2
37723	LogMergePolicy)
14563	hangul_type
41839	TwoLongs(weight,
58621	testcopychararrayset
9454	"\4\12\2\0\2\12\1\0\2\3\10\0\1\12\32\0"+
53803	(next=map.keys[pos])
50476	LogMergePolicy,
41060	(output2.equals(outputs.getNoOutput()))
35849	assertEquals("C
45489	U+0156:
50477	LogMergePolicy.
10678	"\1\136\4\0\2\136\150\0\1\376\24\264\1\u0240\5\264"+
19190	Ø§
9378	"\7\132\4\0\12\134\21\0\11\133\14\0\3\133\36\132\12\133\3\0"+
40230	result.seek(term);
17200	tisNoIndex,
31189	"21.nocfs",
19195	Ø¾
57185	rotateLeft()
52598	HashSet<BooleanClause>();
2240	segmentstomerge
27343	"\u002C\u0308\u003A",
34351	setTermIndexInterval(int
64420	value.length,
2052	fst.outputs.outputToString(arc.output)
40689	lastOutput
53688	(paged.scoreDocs.length
45527	U+0155:
21042	i=0;i<13;i++)
60967	"\3\0\1\137\4\0\2\137\150\0\1\u0101\3\266\1\u04ed"+
51344	devices
62243	testdemorgan
24273	SortField.BYTE
42611	assertTrue("info
3347	param
42790	DEFAULT_TYPE;
21899	does,
18940	íê¸ìëë¤",
44662	DESCENDER
46793	U+FF3F:
11809	@exception
41536	MultiTermsEnum
45486	U+0154:
6053	Token("",
24550	multi));
3290	does.
20148	Boolean.FALSE);
24045	"sin",
48265	prevSpans
17020	pos);
65587	while(size
63528	this(obs.getBits(),
4775	whatever
64820	//assertEquals(TermsEnum.SeekStatus.NOT_FOUND,
45387	U+0153:
59036	assertEquals(""
46790	U+FF3E:
14695	sort,
4280	equal",
17893	assertEquals("max
29922	"\1\25\1\0\11\25\2\0\1\25\4\0\1\25\4\0"+
32179	assertEquals("#
26749	sort)
39875	doOpenIfChanged(boolean
23043	Searcher[]
5482	rangein
51347	device,
14848	sort.
23964	sort;
59482	"\21\36\1\142\12\143\1\66\1\137\1\144\1\137\1\0"+
51503	does:
6504	org.apache.lucene.analysis.NumericTokenStream;
18371	assertEquals("4
18334	assertEquals("3
33661	.setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new
46638	U+FF3D:
66815	ArrayList<String>(queryTerms.length);
5967	readerimpl
42243	assertCloneIsEqual
21049	up");
43930	BREVE
46783	U+FF3C:
27141	"\u000B\u0308\u005F",
65801	(result==null)
31881	string);
8709	//w.w.setUseCompoundFile(false);
14827	other.parser.equals(this.parser))
41035	outputs="
60106	"\3\0\1\137\4\0\2\137\150\0\1\u0101\17\266\1\u020a"+
64783	(Arrays.binarySearch(terms,
49309	pre-1.9
21867	NO_BYTES;
63164	(!term.equals(text))
22428	sorts
31922	FieldCache.class.getName()+".DEFAULT_FLOAT_PARSER";
15276	delegate.clone());
28167	hyphen
24451	(null,
12245	u77b4
60567	"\15\0\1\u03b0\6\0\12\u03b4\1\u0348\13\0\1\u02e1\160\0"+
49386	PrefixQuery");
46631	U+FF3B:
45491	U+0158:
49632	jj_consume_token(QUOTED);
67496	TestIndexReader.assertIndexEquals(c.newReader,
53005	i-offset-1,
36243	nextFinalOutput="
52072	pushmaxbuffereddocs
37184	byteswriter
57733	j=0;j<1470;j++)
12646	u77aa
45531	U+0159:
4168	topDocs.scoreDocs;
41011	(!isDone)
6076	assertEquals(t.term(),
22048	searcherfactory
46138	U+FF3A:
13047	u77a0
45529	U+0157:
28911	string-to-int
16524	extended
52122	inote
17120	tisNoIndex;
7640	\""
38490	Field("tvpositionoffset","one
35304	skipdatum
52100	fffd
28903	segment-based
21563	<code>WildcardTermEnum</code>.
967	testDocumentsWriterExceptionThreads()
46472	FIFTEEN
26283	inputLength
23008	lDoc.add(newField("handle",
24099	Locale.US
33260	last=null;
57805	testNoCommits()
51437	segmentInfos.remove(info);
36680	getBytesReader(arc.nextArc);
16866	testCloneWithSetNorm()
28779	init()
44079	U+FF41:
1929	bulk-copy
54696	people
35533	u=twos^twosA;
34870	queryparser's
54255	hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());
21923	opaque
32987	super.bytesPerPosting()
19226	Ï¼Ï
25307	testprefixterm
64023	RANDOM_TEST_BYTES
60162	"\12\u0247\10\0\1\u016c\1\u016d\1\u016e\162\0\1\u0101\1\266"+
27026	FULL
3911	normalize(int
28829	newchildpointer
38460	assertTrue(allFieldNames.contains("unstored2"));
41644	out.toArray(new
64903	Thread.sleep(10);
28801	level++)
54366	UAX29URLEmailTokenizer(matchVersion,
46523	,"19",
59965	"\2\137\216\0\1\337\175\0\4\u0199\2\0\1\u0199\15\0"+
15876	suddenly
57626	string),
66395	pos2)
61399	"\7\u02e2\1\u0669\2\u02e2\175\0\1\u034d\1\u066a\31\u02e2\1\u034e"+
45647	SHARP
17787	SingleTermEnum}
53356	super(file,
51228	(this)
54299	offsetHash.size());
38525	fields.length);
27635	"\u0061\u2060\u000B",
17892	assertEquals("min
42883	newEndOffset;
48937	sortedtermvectormapper
21541	ins[fileIdx].close();
66436	!postingsCompacted;
66396	pos2;
54076	increments,
35339	increments.
11294	"\4\0\2\136\150\0\1\376\6\264\1\u0461\23\264\1\141"+
23669	getflushdeletescount
24522	testInternationalMultiSearcherSort()
56725	(lastCommit
18828	"ä¸­",
3696	Strip
9049	pos1]
28343	heapRemoveRoot()
29810	"\4\0\1\25\2\0\1\25\1\0\1\25\103\0\2\25"+
43947	"È"
54688	setLockDir(lockDir);
63137	bigOrdTerms);
33939	collisions".<br>
42851	newEndOffset)
22913	reversible
7488	TermVectorsTermsWriter.PerDoc
42877	newEndOffset,
59184	"\3\u943d\3\u94e0\3\u9583\3\u9626\3\u96c9\3\u976c\3\u980f\3\u98b2"+
22643	this.upperVal
873	while(tdocs.next())
15415	seekinternal
5682	KeywordAttributeImpl
23460	(float)2.0);
64433	decompressor.setInput(value);
52869	SHALL
58296	Math.min(a.length,
56406	getaddress
51931	infos.version
65586	readFrom++;
669	FAIL:
50527	terms/tokens
45368	U+0152:
31456	WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(-1).setRAMBufferSizeMB(16.0)
35218	lastSkipPayloadLength
44020	"È"
31238	string",
3656	ClassicFilter
60092	"\1\137\4\0\2\137\150\0\1\u0101\7\266\1\u01fc\22\266"+
25720	valuesourcequeries
19304	c3po
12842	uf476
30617	"\153\0\2\32\11\0\1\32\115\0\2\32\6\0\1\32"+
66377	pos1,
2941	counterthread
41315	builder.add(intsRef,
12441	uf480
62348	testSpans1()
45286	U+0151:
23662	venice
13243	uf46c
7495	perField
17869	search.search(q,
9052	pos1;
45218	"È®"
1278	docCount=0;docCount<limit;docCount++)
15654	YES;
15649	YES:
5675	TokenStream}s
36071	testChainedFilters()
15448	preLockLess
40498	assertFinal()
41486	13824324872317238L));
8107	raf.toString());
26223	complicated
67684	DataOutput}
15651	YES)
50807	waitForMerges)
58633	NRTCachingDirectory(dir,
43949	"È"
17886	assertEquals("med
26610	assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term)
45194	U+0150:
39261	MultiPhraseQuery))
43550	doTestDgaps(1,0,1);
58766	0xe000)
28699	getattribute
61415	"\1\u0585\174\0\1\u03a1\4\u0675\2\0\1\u0675\15\0\1\u0675"+
54903	indexingGen.get();
58810	0xe000;
21557	wildcard
20017	ArrayList<BooleanClause>
62289	QueryUtils.checkUnequal(q,
23976	"A",
277	REQUEST
15303	Float.valueOf(f);
17173	getFieldsReaderOrig()
61732	uf462
5481	rangeex
42629	getdocidsetsize
57884	byteBuf.clear();
62822	StandardTokenizer
1052	fail("expected
33823	(partially)
31321	i=0;i<35;i++)
7995	IllegalArgumentException("Unmap
48452	LimitTokenCountAnalyzer(Analyzer
63009	QUOTED
59799	"\1\65\6\0\1\174\3\0\1\136\33\137\12\271\1\0"+
16436	IndexWriter(snapshotDir,
63477	0x8763,
44166	U+FF22:
30615	"\5\0\1\32\37\0\1\32\1\0\2\32\16\0\1\32"+
45606	U+015D:
10188	"\1\141\12\264\1\0\3\136\1\0\2\136\1\137\3\136"+
24306	"bcad"
54841	NRTManagerReopenThread}
21118	org.apache.lucene.util.FixedBitSet;
17446	java.io.Serializable
18194	((this.filter
44383	"È"
27268	"\u0041\u0308\u0061\u003A",
67466	ReaderThread[]
58356	papers
63475	0x8762,
33188	HashMap<String,Object>();
64519	(rewrittenExclude
40932	valid",
45579	U+015E:
65936	-(b:two
52958	(0xC0
44219	U+FF23:
9882	"\3\27\15\0\1\27\226\0\1\27\247\0\2\27\12\0"+
25952	reverseMul
27353	"\u002C\u0308\u00AD",
43830	foldings[]
26914	(Other)
63474	0x8761,
49163	multiTermRewriteMethod;
44290	U+FF24:
7369	completeness.
45608	U+015F:
21829	Field[0];
15131	bytes.length);
10859	"\25\230\1\347\12\230\175\0\1\346\24\230\1\u02f4\5\230"+
58482	assertTrue(String.format(missing,
36232	flag(BIT_FINAL_ARC);
48116	apis
17991	"MAND",
59524	"\174\0\1\341\54\0\1\140\165\0\74\164\2\0\1\25"+
62207	List<ScoreDoc>
692	exceptional
36438	pos="
49787	boolean[35];
51338	necessary.</p>
55301	assertEquals(pos1[k],
50402	readerMap.remove(info);
28480	testBinaryFieldInIndex()
42811	TokenStream},
20036	independent
44422	U+FF25:
67125	termAtt.append(tokens[index++]);
30962	1].score
52497	dog",
18411	testBooleanOptionalWithTiebreakerAndBoost()
66647	testAssumeAfterClass()
5670	org.apache.lucene.analysis.tokenattributes;
61270	"\23\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\7\u02e2"+
43822	assertTermEquals("ss",
34394	under-estimate
66475	Primary
44446	"È"
27683	"\u0061\u2060\u0308\u0031\u003A",
31416	mp.setNoCFSRatio(1.0);
14545	asian
10944	"\2\u0340\1\u02de\1\u0340\1\u02de\14\0\1\u0122\160\0\1\346"+
29229	TermVectorOffsetInfo[numTerms][];
27593	"\u0300\u0308\u3031",
26738	describes
38086	Double.longBitsToDouble(0xfff0000000000001L),
42496	Payload(payload));
20429	1192101133000L));
36626	readFirstTarget
36507	pass,
16096	dowork
33702	pass)
45698	"Æ­"
49428	'f'){
65364	compressible
52347	numPayloads
49757	java.util.ArrayList<int[]>();
40162	queue.top();
30900	4.6699767f,
44740	"È"
49532	fieldToken
56750	assertEquals(N,
51143	#forceMergeDeletes}
6123	assertTrue("FlagsAttribute
39164	pos=0;
33929	doc.<p>
53272	UpToTwoPositiveIntOutputs(true);
58515	CharArraySet.copy(setIngoreCase);
62554	coordinator.coordFactors[coordinator.nrMatchers];
55606	r1.docFreq(new
7826	testlazyworks
2424	//Set
16893	clones[x]
23597	delTerm
44024	"È§"
63489	0x8765,
53439	TermRangeQuery("asc",
8239	it.next();
51865	syncs");
23633	setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false))
53353	Descriptor
11332	"\2\0\2\u0214\4\0\1\u0214\152\0\4\u047e\2\0\1\u047e"+
55074	th.w
1602	sample.set(pos,
4370	testRangeSplit_4bit()
9143	doc.fdt.length();
57856	href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265734">here</a>
46780	U+FF20:
49221	!prohibited)
62206	pass:
35	You
31272	i=0;i<oldNames.length;i++)
31386	(compare(origOldName,
24584	Searcher's
30332	[3,
63481	0x8764,
65230	prefixLenPlus1-1],
50529	past,
8991	input.readVInt();
50048	fe.dir.fileLength(fe.file);
58611	ud800efg
34703	MultiAnalyzer());
65459	(IndexDeletionPolicy)
43991	U+FF21:
65605	Unreferenced
37453	notexist
59530	"\1\345\17\0\1\346\21\0\1\347\2\0\1\350\42\0"+
50080	filecount
19225	ÏÏ
43517	doTestClearVectorOfSize(8);
64876	span-based
45909	"Æ²"
61375	"\13\0\1\u033c\160\0\1\u03a1\4\u065d\2\0\1\u065d\15\0"+
17667	limitation.
60913	"\2\u04c9\1\u04c8\5\u04c9\1\u04ca\14\0\1\u02e1\161\0\4\u04cb"+
52945	UTF16toUTF8WithHash(final
47157	fishhook
21878	fields.size()-1)
21254	remainder,
67713	System.arraycopy(termBuffer,
68127	favored
38348	x800000000000251cl
15652	dir.fileExists(getDelFileName());
40955	pos--;
55685	mainWriter.waitForMerges();
34193	IndexWriter#getConfig}.
63303	0x6531,
16798	performDefaultTests(multiReader);
43720	CHAÃNE
32252	!l2.obtain());
42350	byte[payloadDataLength];
27024	"\u0001\u0308\u0031\u002C",
59657	"\1\66\1\67\1\0\1\25\2\0\1\25\1\141\32\36"+
5624	/***
3611	concurrently
653	MockIndexWriter
58918	this.omitNorms
24145	("byte",
2890	slowdown
62856	(matchVersion.onOrAfter(Version.LUCENE_24))
42624	docId);
10406	"\1\347\12\230\175\0\1\346\1\u016a\31\230\1\347\12\230"+
55947	(1+stillAliveCount)
53641	fledged
29988	"\1\1\10\0\1\1\15\0\1\1\57\0";
41373	comment
27568	"\u00AD\u0061\u003A",
5835	Second
29751	"\5\32\1\0\5\32\2\0\1\32\1\0\2\32\1\0"+
21980	totalNumDocs
24661	"DJAIHGFEBC");
24246	"DHJFB");
65318	newOutput)
8470	aside
55922	(weakRef
40242	((TermPositions)current).getPayloadLength();
3661	super(in);
48402	</code>nrMatchers</code>
1454	readbyte
25930	oncommit
65320	newOutput;
24446	MyFieldComparator(numHits);
46372	,"8",
66304	numPostingInt
55692	failures.add(t);
44381	"È"
50092	copyfile
52727	assertHits(s,
32161	newslice
59246	"\1\0\20\25\2\0\1\25\2\0\3\25\1\0\1\25"+
52350	(tp.isPayloadAvailable())
3243	extension
56960	ACRONYMs.
22255	RamUsageEstimator.NUM_BYTES_LONG)];
50908	<p>However
31283	IndexUpgrader(dir,
39029	cm.clear();
15298	NumericField.DataType
63304	0x6532,
52648	Modifier.isPrivate(ctors[0].getModifiers()));
22388	archive
32635	(byte)randomInt;
58957	TestMultiMMap
15996	TimedThread(TimedThread[]
6540	described
45305	"È¯"
49384	character!)
35291	lastskipproxpointer
4246	IndexReader.open(dir);
9280	recognition
10198	"\2\136\1\137\3\136\3\0\1\136\4\0\2\136\150\0"+
34601	payloadScore
49322	59);
39902	doOpenFromWriter(openReadOnly,
44527	U+FF26:
47810	bracket
55681	IndexReader[numDirs];
2878	success.set(num);
50919	atomically
15743	IndexFileNames.NORMS_EXTENSION,
55584	assertTrue(nrtReader.isCurrent());
44604	U+FF27:
53775	unmodifiableSet(CharArraySet
38588	fileDirName.mkdir();
19747	cs.posUpto++;
65849	tnum>=25)
19024	6068:
25468	problem?)
25128	trailing
28915	org.apache.lucene.search.function.ValueSource#description()
59966	"\1\u0199\6\0\12\u0199\1\u0161\175\0\4\u019a\2\0\1\u019a"+
52314	term.append(t);
22910	this.getBoost()
45575	U+015A:
28884	nextperthread
44666	U+FF28:
50627	mergePolicy.close();
43463	testSpanFirstVersusSpanTerm()
22340	pivot.compareTo(a[j]);
43141	nDocsReturned;
20128	Occur.SHOULD)
62559	Occur.SHOULD,
64047	assertEquals((long)
27471	"\u0030\u0061\u002C",
41727	Util.MinResult<Long>[]
44444	"È"
56998	<code>OpenBitSet</code>
1970	writevint
26304	IllegalArgumentException("encoded
85	limitations
45604	U+015B:
23333	threads[numThread++]
52899	PERFORMANCE
65074	(freezeTail
44762	U+FF29:
48735	TestTermVectorsReader
22691	Byte.MAX_VALUE)
63384	0x8321,
7956	NativeFSLockFactory});
28228	collectors;
36240	targetNext");
37788	termDocs.next()
45577	U+015C:
48465	limittokencountanalyzer
6379	quoted
41228	fst.sizeInBytes()
46048	"Æ³"
22697	Byte.MAX_VALUE;
38597	_TestUtil.getTempDir("TestIndexReader.testFilesOpenClose");
61011	"\1\u04d5\175\0\4\u04d9\2\0\1\u04d9\15\0\1\u04d9\6\0"+
27616	"\u0300\u0061\u0027\u2060",
28206	collectors,
49863	quotes
28212	collectors)
50777	IndexWriterConfig.setDefaultWriteLockTimeout(writeLockTimeout);
61178	"\1\352\12\232\175\0\1\351\26\232\1\u05b2\3\232\1\352"+
28999	checkValidFormat(fn,
17043	currentPositions
45058	U+FF2D:
45664	U+0166:
1196	i=0;i<files.length;i++)
9835	"\2\0\3\25\1\0\1\25\1\0\1\25\2\0\1\25"+
24223	searchX.reader.close();
3844	addAttribute(CharTermAttribute.class);;
5401	fuzzyquery
6410	currentOff;
61728	uf1d6
58497	Arrays
31572	si.getVersion());
56758	.setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy).setMergePolicy(newLogMergePolicy());
45534	"È"
42170	otherints
45175	,"nj",
55883	serious
44962	U+FF2C:
45693	U+0165:
28122	"\u2060\u0061\u2060\u0062\u2060\u00AD\u2060\u0062\u2060\u0079\u2060\u2060",
2840	maxTime(multiThreaded)
35142	qtest(q,
15440	pre-2.1
67211	getTime(long
50557	OpenMode.APPEND)
16424	OpenMode.APPEND,
59099	"\0\u16ec\0\u40f2\0\u4195\0\u1832\0\u4238\0\u42db\0\u437e\0\u4421"+
45494	"È"
13239	uf1e0
287	Because
8563	WeakReference<SinkTokenStream>(sink));
59441	"\1\136\45\137\1\0\3\137\1\0\2\137\1\140\3\137"+
10702	"\3\0\1\136\4\0\2\136\150\0\1\376\24\264\1\u0252"+
32287	null",
61232	"\10\u02e2\175\0\1\u034d\24\u02e2\1\u05e6\5\u02e2\1\u034e\12\u02e2"+
2297	(fieldName.equals("multiField"))
24020	"G"},//D,
45769	U+0168:
40849	out.dot");
12838	uf1ea
45267	U+FF2F:
59939	"\1\u018d\26\36\1\142\12\143\1\66\1\137\1\144\1\137"+
36920	NodeAndInCount
57141	bits[wordNum]
45492	"È"
29216	currentPosition;
62580	makecountingsumscorernoreq
12437	uf1f4
19481	exceptions.
63476	0x87621,
19486	exceptions,
48195	(stretchToOrder()
22601	FieldCache}).
9014	scratch
64581	(useBuffer
41391	(args[idx].equals("-limit"))
45695	U+0167:
1208	previous
37202	lastarcstart
45118	U+FF2E:
45532	"È"
8793	Rule}s
25590	getAllDescendantReaderKeys(rf.readerKey);
26040	Float.NaN;
21182	FieldCache.DEFAULT;
49910	discardescapechar
2868	BitSet(N_THREADS);
42458	Payload();
36697	delta-coded
62480	lastDocScore;
4254	Float.NaN,
64902	alive");
42543	stream=new
2796	part
6409	currentOff)
35661	(lowByte
26067	Float.NaN.
34980	trunk,
63065	"<RANGEEX_QUOTED>",
55052	Term("id","");
19229	ÏÏ
12141	u357c
41938	testrealterms
16754	IndexReader.open(dir2,
59425	"\147\0\1\33\20\0\2\33\25\0\2\33\6\0\3\33"+
38756	while(tp1.next())
13425	zz_trans_packed_0
15095	SetBasedFieldSelector
3053	this.base
17729	topLevel.add(tq,
59301	"\1\137\4\0\2\137\2\0\1\50\1\0\1\51\1\0"+
34243	writeLockTimeout;
32532	(byte)0x41,
64405	Deflater
3124	(base
465	text
31586	System.out.println("testUpgradeOldSingleSegmentIndexWithAdditions:
37309	java.lang.String[])
37313	java.lang.String[],
16048	indexerThread2;
23417	Validate
18886	"she's",
2509	checkhits
23918	effort
66266	occur=BooleanClause.Occur.SHOULD;
16670	IndexReader.open(dir1,
31646	oldname
45840	U+0169:
49161	#setMultiTermRewriteMethod
37664	assertTrue("phrase
47901	ValueSourceQuery#equals(Object)}.
57995	(Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>
20141	minShouldMatch)
1410	input
1912	fieldsStream.writeInt(n.intValue());
56974	COMPANY;
33128	once",
64997	(character
20322	NoOpCollector(false));
45794	"È"
39037	String(keyc)),
3163	curDocs[curUpto];
13344	u355e
11870	zzCurrentPos
44888	U+FF2B:
31284	null),
23531	l[i];
39395	5000;
67314	IndexReader.open(dir4,
3234	consume
35395	null).
67322	IndexReader.open(dir5,
12542	u3572
18763	"ÎµÎ¸ÎµÎ»Î¿Î½ÏÎ­Ï",
57353	otherArr[pos])!=0)
60599	"\1\352\12\232\175\0\1\351\32\232\1\352\1\232\1\u03e0"+
332	null);
512	getreader
7874	consult
36197	willPackFST=true:
45792	"È"
24158	getFullStrings()
41669	assertTrue(w.toString().indexOf(expected)
16393	snapshotDir.close();
29343	init(ByteBlockPool
62015	zz_trans_packed_1
21088	setrandomioexceptionrate
34242	writeLockTimeout)
51409	segmentInfos.add(newSegment);
44835	U+FF2A:
5975	avoided
3765	"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#supplementary"
38657	doc.add(newField("tvnot","tvnot",
56593	nowVersion;
42466	ingesters
40901	run(fst,
29964	"\3\25\1\0\1\25\5\0\1\25\2\65\5\0\1\25"+
35274	skipBuffer.writeVInt(curPayloadLength);
12943	u3568
45863	"È"
3641	totalbytessize
10839	"\175\0\1\u0279\242\0\1\u0279\33\0\2\u027a\1\0\2\u027a"+
39000	hm.put("baz",
48929	myanalyzer
60886	"\2\137\150\0\1\u0101\32\266\1\142\1\266\1\u04b2\10\266"+
21686	examine
17410	null){
490	test
7721	men",
61016	"\2\u0523\2\u0522\1\u0523\1\u0522\1\u0523\1\u04d5\175\0\4\u0524"+
2412	"field",
5879	addressed
51810	hazards
23925	page
18921	"embedded",
16183	"field";
57750	150*startDiskUsage);
57719	i=0;i<12;i++)
44742	"È"
12247	u78fa
48362	minimumNrMatchers)
67651	assertrefcountequals
2860	testTimeoutMultiThreaded()
60044	"\1\u0161\175\0\4\u01db\2\0\1\u01db\15\0\1\u01db\6\0"+
6845	(which
36431	targetHasArcs(Arc<T>
25744	valmismatchkeys
50826	(pendingCommit
64224	Combining
45210	"È"
19302	addresses
64228	responsibility:
10718	"\12\u0260\1\0\2\u01ca\1\u020d\3\u01ca\1\u01cc\5\0\2\u01ca"+
53331	output.toString();
3952	pair
31587	assertEquals("Original
66079	testAnalyzerReturningNull()
60407	"\3\0\1\137\4\0\2\137\150\0\1\u0101\1\u0324\1\266"+
40330	firstDocID
31288	times",
51811	notifyAll()
49450	'&')
60688	"\1\u0428\1\u02e2\3\u0428\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2"+
3673	termAtt
1054	Expected
62891	https://issues.apache.org/jira/browse/LUCENE-1068
37827	European
26768	(spans.start()
44785	"È"
64246	paid
40488	non-abstract
12648	u78f0
54399	getValue());
60293	"\1\u02c7\21\266\1\142\12\266\1\0\3\137\1\0\2\137"+
32651	charArrayDumpNIO(encodedBuf1)
45581	U+0160:
6916	Object
25269	"opq**"},
26483	numoutputbytes
61538	u78dc
11417	"\1\230\1\u04bd\10\230\175\0\1\346\32\230\1\347\3\230"+
29686	"\0\u026a\0\u0a76\0\u0add\0\u0b44\0\u0bab\0\u046d\0\u0c12\0\u0c79"+
20805	valid(T
13049	u78e6
44787	"È"
22292	offsetRight
17551	parallelHits.length;
32652	charArrayDumpNIO(encodedBuf2)
13241	uf326
6016	assertEquals(6,
31616	datainputstream
7153	doubletosortablelong
36678	getBytesReader(arc.posArcsStart);
36851	chain.ints[chain.length]
5562	pack
15611	hasn't
48120	scopes
61730	uf31c
65365	deletelast
36768	pad:
40038	segmentInfos.changed();
45299	"È"
34680	getpayloadscore
12840	uf330
55767	AlreadyClosedException");
8481	proper
45660	U+0162:
52167	setflushpendingnowait
9563	"\1\u88db\1\u897e\1\u8a21\1\u8ac4\1\u8b67\1\u8c0a\1\u8cad\1\u8d50"+
6018	assertEquals(7,
67515	refreshedReader
8408	instantiating
61150	"\1\u02e2\1\u0596\30\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u02e2"+
18990	bufferedReader)
35263	DocSkip/2
65613	lastFiles.size();
26789	StopAnalyzer
45212	"È"
45610	U+0161:
7342	apps
21937	IndexOutput}.
30322	TwoPhaseCommitImpl[2];
43192	docVal(doc);
43010	newReference;
62334	testSpans0()
23409	buffered)
47888	org.apache.lucene.search.function.DocValues
18884	"you're",
23599	buffered,
40681	(ord)
4681	assertEquals(8,
8125	bufSize
28570	(bufferPosition
2210	instantiation
12439	uf33a
19474	Charset
36775	bytes.length="
45671	"È¾"
48340	minimumNrMatchers;
67368	reader2.getSequentialSubReaders();
67097	org.apache.lucene.analysis.StopwordAnalyzerBase;
59631	"\4\36\1\355\2\36\1\355\14\36\1\142\12\143\1\66"+
36370	writer.posWrite-posSave);
45662	U+0164:
4045	getclass
51311	"prepareCommit
9850	"\14\0\1\61\4\0\1\200\2\0\1\201\41\0\1\25"+
53039	(utf8[upto+1]&0x3f);
1128	error
39522	UnicodeUtil.UTF16Result
10412	"\1\230\1\u016a\1\230\1\u016a\1\230\1\u016a\1\230\1\u016a"+
51449	flushControl.clearFlushPending();
57652	int[64];
32213	SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));
32458	random.nextInt()
43251	assertEquals(9,
18810	"à½à½¢",
18780	testThai()
58871	Emits
7597	'\\':
19573	getDecodingReader(InputStream
55587	dirReader
130	term
45297	"È"
67500	threads[i].stopThread();
49210	(operator
60131	"\2\0\2\77\1\100\1\0\1\26\2\0\1\25\1\u011e"+
21727	500);
45691	U+0163:
56334	merge(int
55206	len2=0;
19485	supplied,
31501	Field("utf8",
54357	org.apache.lucene.util.Version)
17539	assertEquals(i,
19680	-postings[i].position,
14515	zz_no_match
62708	ShardSearcher(subReaders[searcherIDX]);
2901	hitCount()
59335	"\32\36\1\142\12\155\1\0\1\137\1\153\1\137\1\0"+
46371	U+FF18:
4248	s.search(q,
23506	(needed
45775	U+016E:
41957	getoutput
51278	info.files())
49383	(<b>without</b>
23428	modifier.updateDocument(new
25110	searcher.rewrite(wq);
46146	"Æ¶"
3906	isTokenChar(int
45669	"È"
11481	"\1\376\6\264\1\u0103\23\264\1\141\12\264\1\0\3\136"+
3734	org.apache.lucene.util.Version;
67063	Term(this.field,
15732	normGen[fieldIndex]++;
38374	x8000250
2479	//we
22147	(attribution
34062	pp.position
61183	"\4\0\2\137\150\0\1\u0101\32\266\1\142\6\266\1\312"+
57822	LUCENE-1382
46347	U+FF17:
52795	purchased
3281	cleared
25383	"Trees"
28584	char[buffer.length*2];
16624	heap[i];
45844	U+016D:
46809	++m)
33527	"empty"
66533	intUptos[intUptoStart+stream];
41422	PairOutputs.Pair<Long,Long>
63583	x4321
16501	T[]
46324	U+FF16:
18505	createComponents(String
30477	super(ignoringPositions,
54798	shortcut,
2022	node.numArcs-1)
60091	"\4\266\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
230	(IOException
64467	include.extractTerms(terms);
63786	x875431
54415	detail)
52225	getmatchedsubreadercount
15356	docs_and_freqs_and_positions
25015	testparallelmultisort
63787	x875432
45773	U+016C:
46301	U+FF15:
54344	org.apache.lucene.util.Version}
6103	SenselessAttribute
37268	cacherootarcs
45615	"È¿"
23370	hitCount);
43693	UNSUPPORTED_MSG
20823	analyzerPerField
36916	NodeQueue
17897	assertEquals("min,min,F,F",
57330	AND_NOT
59806	"\2\0\1\25\1\0\32\25\24\0\1\u014f\15\0\1\50"+
28924	getCachedFieldValues
63784	x875421
19871	expectedArrayTypes
1844	fieldsIdxName
49795	la1tokens[32+j]
25014	runmultisorts
45842	U+016B:
46278	U+FF14:
9242	any()
46148	"È"
48729	ByteArrayDataOutput()
8639	(!it.hasNext())
58734	"ab\ufffdcd",
58966	io.writeVInt(5);
39330	recycleintblocks
32246	f.makeLock("commit");
1542	sampleTerms
31513	NumericField("trieLong",
65193	next[idx]
39132	"All
17201	freqStream,
9804	"\4\0\1\73\14\0\1\61\4\0\1\74\2\0\1\75"+
32697	byte[0];
35995	8239472272678419952L),
65001	codepoints).
45771	U+016A:
7225	processing
7583	'\b':
45582	"È"
67707	termBuffer()
9394	"\7\132\1\0\7\132\1\0\7\132\1\0\7\132\1\0\40\133\57\0"+
64447	compressionlevel
40518	arbitrarily
8044	<b>Please
55781	excs.add(t);
22581	attributereflector
1117	LUCENE-1347
36884	next="
65321	prependOutput(T
21429	//assertSameStreams("basic
17117	freqStream;
45865	"È"
18543	"4,600",
64182	utf8str
64268	super(getValueSource(field,type));
50273	{#flush}
24110	++i)
2249	org.apache.lucene.search.CheckHits;
11037	"\2\u0397\1\u0396\5\u0397\1\u0398\175\0\1\u0332\4\u0395\2\0"+
23195	Store
51708	(!suppressExceptions
34852	incrementToken
15786	(docStoreIsCompoundFile
16370	currentOff
17255	atomic
26893	Hiragana}
40613	inputMode=0;inputMode<2;inputMode++)
156	TWO
1832	Sun
26886	WordBreakTest.txt,
45613	"È"
24333	++j)
41475	BytesRefFSTEnum<Long>
46395	U+FF19:
51820	fileName:
46439	,"12",
58854	utf8.length-bytePrefix,
49997	fileName;
6345	flags.length)
60912	"\175\0\4\u04c7\2\0\1\u04c7\15\0\1\u04c7\6\0\1\u04c8"+
57265	"intersection(a,
42267	testflagsattribute
15711	fileName)
58668	NRTCachingDirectory(newDirectory(),
26150	docsscoredinorder
45700	"È"
56571	lastVersion
34112	++j;
40014	operations");
16536	&lt;...&gt;
49982	<li>{File
15942	iscompoundfile
10230	"\1\u0103\11\264\1\u0103\6\264\1\u0103\10\264\1\141\12\264"+
20647	assertNotNull(files[i]);
21269	actual)
16057	searcherThread2;
13038	u71e5
34508	sb.append("mergePolicy=").append(mergePolicy).append("\n");
48004	filterbits
21258	actual,
19785	score)
37910	backingStore.size();
7317	asks
16106	score.
30979	java.io.FileWriter;
18343	score1
18342	score0
41515	allIDsList
66093	parser.parse("bla~");
2338	score,
23577	"indexing"
61370	"\1\u0658\175\0\4\u065c\2\0\1\u065c\15\0\1\u065c\6\0"+
61308	"\1\u062e\15\0\1\u062e\6\0\12\u0630\1\u062f\13\0\1\u033c"+
18345	score2
18381	score3
28949	other.parser.getClass();
25847	spanNearQuery.slop)
48142	subSpans
15860	prefixLength
802	tokenStream(String
37529	score:
67999	assertEquals(s,
3069	score;
10855	"\12\230\175\0\1\346\24\230\1\u02ef\5\230\1\347\12\230"+
40785	ArrayList<FST.Arc<T>>();
52596	HashSet<BooleanClause>
16671	readOnlyReader
23230	scoreN
62266	"lisa"),
20392	FieldSelectorResult}
4059	left,
30240	enumerator.position;
18386	s.doc(h[1].doc).get("id");
12637	u71ef
33353	left)
15334	NumericField);
8283	nativefslockfactory
41572	(1000*RANDOM_MULTIPLIER
42580	left;
9956	"\12\267\1\0\1\136\1\143\1\136\1\0\2\136\1\137"+
12236	u71f9
19678	chunkStates[i]
28888	byteblockpool
38575	left:
9360	"\12\134\13\0\1\133\1\0\1\133\1\0\1\133\4\0\2\133\10\132"+
60985	"\160\0\1\u03a1\4\u04fa\2\0\1\u04fa\15\0\1\u04fa\6\0"+
31303	testIndexOldIndexNoAdds()
18707	ØªØ§Ø±ÛØ®
34631	Span
16327	expdocnrs
22545	toStringMethod.isOverriddenAsOf(clazz))
62616	T:deleting)
33785	pq.add(pp);
52430	NumericTokenStream()
60150	"\1\u0126\226\0\1\u0167\13\0\1\u0126\214\0\1\u022d\2\u022e"+
15665	si.preLockless
16053	searcherThread1;
40137	matchingSegments;
56649	testExpirationTimeDeletionPolicy()
17289	notifycoreclosedlisteners
27090	"\n\u002C",
48972	6/4/2005]</tt>
60294	"\3\266\1\u02c8\26\266\1\142\12\266\1\0\3\137\1\0"+
23497	lmp.setUseCompoundFile(true);
17844	'negative'
21202	getfieldcache
2020	(scratchArc.isLast())
22506	name.equals("org.apache.lucene.util.TestAttributeSource$TestAttributeImpl");
56437	assertEquals(targetCount,
5813	MASKS[elementBits][bitPos]
10847	"\1\u02e7\30\230\1\347\12\230\175\0\1\346\21\230\1\u02e8"+
61527	u71db
51594	Else
24423	slotValues[slot]
29294	tvfpointer
46117	"È"
16936	testmixedreaders
46255	U+FF13:
50931	Collection<Document>
49241	source.reset();
21613	++p,
36764	FIXED_ARRAY_NUM_ARCS_DEEP);
63895	LUCENE-3642:
40894	FSTEnum's
11907	seriously
61008	"\1\u0519\1\u02e2\1\u051a\1\u051b\1\u034e\1\u051c\2\u02e2\1\u051d"+
53806	efficiency.
63517	efficiency,
44644	"È"
29707	"\1\0\16\25\1\0\2\25\1\0\21\25\1\0\1\25"+
46232	U+FF12:
20089	weights.get(i).sumOfSquaredWeights();
61030	"\5\232\1\u052d\4\232\175\0\1\351\32\232\1\352\5\232"+
64201	(short)0);
56735	Re-merge
32430	timeouts
34320	this.commit
24267	testSortMissingLast()
59780	"\1\u0141\24\36\1\u0148\5\36\1\142\12\143\1\u0142\1\137"+
58652	cachedDir.listCachedFiles();
31618	testbackwardscompatibility
44672	"È"
21660	++p;
53114	++r)
30124	term.hashCode();
16685	(!deleteWorked(1,
12001	SOUTH_EAST_ASIAN_TYPE;
46209	U+FF11:
39453	FORMAT_VERSION_UTF8_LENGTH_IN_BYTES;
11174	"\4\230\175\0\1\346\32\230\1\347\3\230\1\u03fe\6\230"+
52097	getnumdocs
30488	TermVectorEntry}
1775	notnull
52082	setminmergedocs
2452	BooleanQuery
64253	#INT}
62968	set1.iterator();
21614	++s)
535	org.apache.lucene.analysis.CannedTokenStream;
63102	500000,
22882	(byte[]
10138	"\2\36\1\352\2\36\1\352\6\36\1\141\12\142\1\65"+
55224	assertEquals(term1,
45846	U+016F:
46190	U+FF10:
11271	"\175\0\1\346\1\u0451\31\230\1\347\12\230\175\0\1\346"+
57405	nwords
54379	uax29urlemailanalyzer
34693	grammar
29636	"\121\0\57\135\1\0\130\135\250\0\u19b6\144\112\0\u51cc\144\64\0\u048d\132"+
29225	this.positions
24710	(HashMap<K,V>
54414	addDetail(Explanation
57987	IndexFileNames.segmentFileName(state.segmentName,
2603	timeout
45990	U+0175:
50137	MergeScheduler}.
61350	"\1\u034e\12\u02e2\175\0\1\u034d\2\u02e2\1\u064c\27\u02e2\1\u034e"+
14759	initFieldType(String
31842	deletepriorcommits
56517	ReqExclScorer
59235	"\1\25\117\0\1\25\11\0\3\25\7\0\1\25\1\0"+
19542	close(Iterable<?
28559	JavaCC's
36663	(arc.nextArc
29404	<code>app*</code>.
23229	msrchr.search(query,
452	boolean
52307	processPayload(byte[]
51864	message("done
65828	s.search(oq,
56393	offsetEnd)
13336	u3046
66891	@SuppressWarnings("rawtypes")
9392	"\4\132\3\133\16\0\46\132\12\0\66\132\11\0\1\132\17\0\1\133"+
12935	u3050
46045	U+0176:
3638	getpause
61817	u303c
36683	!flag(arc.flags,
22242	targetSize
9939	"\2\0\1\25\1\135\1\232\1\233\1\234\1\235\1\236"+
34636	float)}
3000	specify
19448	this.fieldInfo
4531	sortfield
45850	U+0173:
46684	U+FF1E:
18847	tokenized
65507	currentSegmentsFile
60286	"\150\0\1\u0101\23\266\1\u02c1\6\266\1\142\12\266\1\0"+
4338	unlimited
30653	"\2\0\1\174\42\0\1\130\1\52\6\0\1\130\5\0"+
40219	Possible
52637	assertFalse(NoMergePolicy.NO_COMPOUND_FILES.useCompoundFile(null,
18119	topScorer);
12534	u305a
60239	"\1\u0126\160\0\1\u0168\4\u0289\2\0\1\u0289\15\0\1\u0289"+
26752	absorbed
806	tokenizer
51447	flushCount.incrementAndGet();
20827	analyzerPerField.put("lastname",
5849	readMasks;
11529	"\12\u0512\1\u0511\13\0\1\u0325\160\0\1\u0386\4\u0510\2\0"+
12133	u3064
19601	charset_utf_8
45965	U+0174:
53193	liable
51583	(!closed
62625	+(C:production
40253	applyalldeletes
41539	nextID
48974	2005-06-01
22065	query.hashCode()
53709	oddeven
48249	shrinkToAfterShortestMatch()
19815	"ID"+(N_DOCS+1);
39471	Searching
11905	Possibly
57283	(int)(index>>>6);
46771	U+FF1F:
19369	checkrandomdata
45848	U+0171:
67610	setIndexDeletionPolicy(new
37408	"go",
52848	THE
9068	repeatedly
58572	CharArraySet.CharArraySetIterator);
38777	readonly:
61528	u727e
29370	nextIndex
59063	addClause(result,
50879	readers/searchers
9234	QueryAndLimit(queries[upto],
52765	id));
4926	Set
25703	equal())
30273	getindexoffset
56864	"\4\12\164\0\42\12\1\0\5\12\1\0\2\12\25\0\12\2\6\0"+
13039	u7288
20905	Repeating
19893	innerArray[j].getClass()
9812	"\4\0\1\111\2\0\1\112\21\0\1\113\17\0\1\25"+
8827	after");
45779	U+0172:
66899	PairOutputs(Outputs<A>
50765	Constants.LUCENE_VERSION
1334	(random.nextBoolean())
19117	asserttokenstreamcontents
49307	df.parse(part1);
12638	u7292
54484	delegee.queryNorm(sumOfSquaredWeights);
64707	iwc.setCodecProvider(cp);
41535	id)),
43244	tdocs.seek(ta);
50336	places
52803	defective
19370	random_multiplier
59558	"\4\77\2\0\1\77\136\0\1\25\3\0\1\25\3\0"+
26786	TestSpanFirstQuery
51591	mergeSuccess(MergePolicy.OneMerge
48663	legal
62591	"C";
41192	_TestUtil.getTempDir("fstlines");
35466	0x3333333333333333L);
28816	level--)
15872	{@inheritDoc}
33990	PhrasePositions[0]);
12237	u729c
24000	"C",
34637	function.docScore(doc,
56208	testFilterIndexReader()
54454	this(in,
20947	placed
64687	"yes";
16285	SpanFirstQuery
28918	super.description()
7567	Indicates
29337	pool;
67880	tokens.size());
56242	methodsThatShouldNotBeOverridden.contains(name))
33853	place.
36534	place,
45777	U+0170:
28900	<code>getInts()</code>
50417	pool.
19	See
29344	pool,
42491	pool)
17463	parallel(random);
28151	u3031
2251	org.apache.lucene.search.BooleanQuery;
51723	while(segUpto
7534	vectorfieldsinorder
29942	"\15\25\5\0\3\25\1\0\1\25\5\0\1\25\2\54"+
14845	Some
60890	"\5\266\1\u04b5\4\266\1\0\3\137\1\0\2\137\1\140"+
20253	clauses.hashCode()
59734	"\2\0\1\25\1\u011e\32\36\1\142\12\333\1\0\1\137"+
1084	LUCENE-1429
55236	d1.getFields();
2031	(below)!!
17766	#clearTotalNumberOfTerms}.
34595	spans,
38235	9500L,
28391	Arrays.sort(utf16,
22874	spans)
64877	spans.
48215	spans2
41482	assertEquals(b,
48214	spans1
16445	null)).close();
35340	testStopListPositions()
952	assertEquals(expected,
60357	"\12\u02f3\1\u0228\13\0\1\u0126\214\0\1\u02f4\2\u02f5\1\u02f4"+
67949	(leaving
30841	CharacterBuffer.
60575	"\1\0\12\u02e2\176\0\32\u02e2\1\u034e\12\u02e2\175\0\74\u02e3"+
50162	Clarification:
17894	down",
795	exception");
7161	termtemplate
39805	byte[maxDoc()];
18969	builder.toString();
585	"id",
66651	SoreType.FAILURE;
62333	"id")
29596	"\2\0\12\134\2\0\2\142\42\0\1\132\27\0\2\133\6\0\12\134"+
63479	0x87632,
18901	"R2D2
56570	firstCommit.getGeneration());
893	("org.apache.lucene.index.FreqProxTermsWriter".equals(trace[i].getClassName())
8966	(prefixes
32813	decodedbuf
66744	<p><h3>Memory
46331	,"(6)",
56510	spanor
236	TRY
66258	level-1,
9264	JFlex
52399	numexpectedpayloads
20551	Collators.
65438	ordinal,
59449	"\12\266\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
30771	CharacterBuffer}
25576	badChildren
16122	mscores[idx]
63478	0x87631,
15069	fieldInfos);
29936	"\1\54\10\0\1\25\24\0\1\25\3\0\1\25\6\0"+
48813	(tokenUpto
55742	w.addDocument(DocHelper.createDocument(i,
9475	result[j++]
42521	test_payloads
24234	"ACEGI");
50078	IOException("Difference
21871	<code>byte[]</code>
20235	buffer.append(")");
51515	merge.registerDone;
67909	firstAtPos
9539	"\1\u0f3e\1\u0fe1\1\u1084\1\u1127\1\u11ca\1\u126d\1\u1310\1\u13b3"+
58039	fill(perDoc.docID);
18727	"Û±Û³Û·Û¹",
31598	newTieredMergePolicy();
46110	U+0179:
18513	EmailFilter(tokenizer);
3141	upto++;
46676	U+FF1C:
6671	metadata
14620	Sort
31850	Indicator
53081	nextCH
26019	comparators[i].copy(bottom.slot,
27660	"\u0061\u2060\u00AD"
56542	reqScorer.docID();
29223	this.storingPositions
15873	toString(dir,
57500	totalIndexInterval)
49741	jj_add_error_token(kind,
26762	derivation
46712	U+FF1D:
36001	newStaticFilterB();
40301	isclosed
57567	enumerator.seek(pointer,
42009	startarc
61348	"\1\u034d\11\u02e2\1\u0649\20\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
2193	achieve
30101	totalIndexInterval;
36372	posSave;
4386	testFloatRange_8bit()
63059	"<NUMBER>",
37281	controls
1843	details
11725	yychar;
25602	badChildren.get(kid));
48411	temporarily
49035	VirtualMethod<QueryParser>
48125	matches.<br>
28546	BEFORE,
9429	"\5\57\1\55\12\42\13\57\4\56\1\54\6\56\12\127\17\56\1\44"+
18390	s.doc(h[3].doc).get("id");
27149	"\u000B\u0308\u0061\u003A",
46762	U+FF1A:
46078	U+0177:
25958	++totalHits;
51368	segmentInfos.updateGeneration(pendingCommit);
40971	//System.out.println("seek="
46302	,"5",
15619	prelockless.
24874	idx=0;idx<expected.size();idx++)
60013	"\4\0\2\137\150\0\51\u016d\1\u01a7\3\0\1\u016d\1\u016c"+
36368	posSave,
45315	TOP
5527	special
46768	U+FF1B:
6129	assertTrue("TypeAttribute
1042	(!isDelete)
31462	So,
46047	U+0178:
67152	termToTVE.get(term);
29535	FloatFieldSource.class)
52212	arch
51780	mergedSegmentWarmer.warm(mergedReader);
32144	buffer[newUpto+1]
38707	norms1.length;
67822	sis.info(0).sizeInBytes(true);
29074	//We
11304	"\4\u0468\2\0\1\u0468\15\0\1\u0468\6\0\12\u046a\1\u0469"+
2548	getindexreader
26659	Searchable
33856	are,
24912	testbuiltinsorts
6488	assertEquals("TEST-IO-EXCEPTION-1",
35924	super.reset(reader);
38698	fieldInfos1)
49507	Clause(field);
19108	10000*RANDOM_MULTIPLIER);
65063	(dedupHash
33960	initFirstTime()
46145	U+017E:
46726	U+FF03:
43665	parser.setPhraseSlop(4);
60171	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\21\266"+
54564	createRandomArray(30);
1180	i=0;i<length-1;i++)
2040	arcs
28815	skipPointer;
54532	ArrayUtil.parseInt("1".toCharArray());
1740	are:
27846	"\u0061\u002C\r",
65890	nterms
16629	heap[j];
46114	U+017D:
54562	createRandomArray(30),
3084	float[]
41118	assertTrue(cmo.isLeaf
46571	U+FF02:
36432	arc)
15312	nf.setIntValue(i);
17795	method;
46738	U+FF06:
46848	outputpos
22467	method:
17233	si.getDocStoreSegment();
30134	fis,
56482	i.next().getSpans(reader);
36194	arc.
36341	arc,
52026	mergemaxnumsegments
27290	"\u003A\n",
3577	method.
17774	method,
35923	termAtt.copyBuffer(buffer,
17794	method)
50696	message("setMaxBufferedDocs
25397	testincrementtoken
36650	fixedArray");
46325	,"6",
58899	DOCS_ONLY,
15208	assertTrue(!f3.isBinary());
51403	docWriter.flush(this,
46451	,"13",
32146	buffer[newUpto+2]
43376	fit.
46735	U+FF05:
1110	(final
42158	newLength);
52532	assertEquals("field3:the",
15277	LUCENE-1262
60047	"\161\0\4\u01e1\2\0\1\u01e1\15\0\1\u01e1\6\0\12\u01e1"+
11426	"\1\136\4\0\2\136\150\0\1\376\26\264\1\u0103\3\264"+
9869	"\1\25\3\0\1\25\177\0\2\26\6\0\1\26\153\0"+
30141	fis;
42800	append(text);
52756	assertEquals(expectedIds[i],
57767	_TestUtil.reduceOpenFiles(w.w);
23359	doc.add(newField("country",
16184	ALTFIELD
46729	U+FF04:
26423	(bytesLeft
27245	[9.0]
45612	U+017F:
64557	Resize
63780	x875321
36581	arc;
36069	FilteredQuery(bq,
36456	arc:
3772	methods
35014	collector.setScorer(scorer);
64494	includeSpans.start())
64102	byte[bytes.length
23163	Collections.
9731	"\1\0\1\32\2\0\3\32\1\0\1\32\1\0\2\32"+
8343	args
29914	"\4\25\1\0\5\25\2\0\1\25\1\0\1\25\1\0"+
39424	byte[1];
65191	frontier.length);
21473	e1.close();
39942	document(int
46652	U+FF08:
11561	"\6\0\12\u052b\1\u0511\13\0\1\u0325\161\0\4\u0527\2\0"+
44839	"Ç°"
55302	pos2[k]);
34939	8:58:29
10272	"\1\172\236\0\2\64\231\0\1\172\147\0\1\64\104\0"+
7771	fields.iterator();
32844	field.isStorePositionWithTermVector();
9328	"\2\0\2\132\2\0\26\132\1\0\7\132\1\0\1\132\3\0\4\132"+
36391	out.writeVInt(nodeRefToAddress[idx]);
46141	U+017A:
35187	getAttributeSource()
22226	System.arraycopy(array,
43177	newComparator(final
18355	printHits("testSimpleTiebreaker",
50116	#close()
46595	U+FF07:
28170	grave
11410	"\1\u04b9\6\0\12\u04b9\1\u0445\13\0\1\u0122\160\0\1\u0163"+
67746	csq).getChars(start,
31144	considerably
64503	includeSpans.start();
797	LUCENE-1208
33591	MappingCharFilter(map,
48257	1].isPayloadAvailable())
825	LUCENE-1210
28460	testappend
18572	ááá¢
1048	LUCENE-1214
48984	former
42725	subpackage.
10347	"\150\0\1\u014e\6\264\1\u0150\10\264\1\u0103\12\264\1\141"+
36586	arg)
3892	normalize(char
39224	fieldNorms!=null
3943	fits
46143	U+017C:
20663	testDirectoryFilter()
20532	area
44908	"â±ª"
30852	formed
8342	Run
66908	outputs1.getNoOutput();
50968	deadlock
26183	current.hasArray();
19544	#closeWhileHandlingException(Closeable...)
28882	charPool.reset();
24493	(exec,
65529	(sis.getGeneration()
5730	capable
46666	U+FF09:
7678	ordinals
51896	Integer#MAX_VALUE}.
58868	fillunicode
66923	outputs1.getNoOutput())
42565	shift<32;
25305	nowildcardx
31776	arg;
32402	randomToken()
16263	SpanTerm
62624	search(q2));
54871	#NRTManager(TrackingIndexWriter,SearcherFactory)},
46112	U+017B:
24026	"peach",
6510	Query}
58860	utf8data
67539	fail("New
31542	id++)
38553	testChangesAfterClose()
64398	compress(byte[]
27162	"\u000B\u0031\u002E\u2060",
17619	InitValueThreadLocal();
49259	posIncrAtt.getPositionIncrement()
64700	CoreCodecProvider
52570	MultiTermQuery.rewrite()).
6351	"query2",
12448	uf8f5
9721	"\113\0\1\32\3\0\2\32\2\0\2\32\1\0\2\32"+
11625	"\6\0\12\u0558\175\0\1\u0386\4\u0559\2\0\1\u0559\15\0"+
2057	arc.output.hashCode();
30137	IllegalArgumentException("indexDivisor
33841	pp.offset
12849	uf8eb
45851	"Æ°"
50760	messageState()
51802	segString(SegmentInfo
5386	jjCheckNAdd(jjnextStates[start]);
23652	id++;
20606	ReusableAnalyzerBase
4602	assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB,
23481	(Thread.currentThread()
33675	writer.getConfig().getTermIndexInterval();
22632	FieldCacheRangeFilter<T>
23789	SearcherManager}.
37339	StopFilter.
22604	(sometimes
66674	err);
22982	reverseorder
43945	"Çº"
25192	Query:
26310	numFullBytesInFinalChar
41148	HashSet<IntsRef>();
59047	Query>
37269	StopFilter:
49155	influence
28108	FOUR
62945	Arrays.sort(files);
46406	TEN
48464	maxTokenCount="
23031	//--------------------------------------------------------------------
23771	(other.recordTimeSec
44169	U+0180:
18052	Query.
49131	<code>capital
18058	Query,
39946	subReaders[i].deleteDocument(n
41917	getrandomstring
50841	commitInternal(null);
50296	index-to-search
67915	(colonIndex
19214	ÏµÏ
29681	int[114];
11213	"\2\136\150\0\1\376\31\264\1\u0421\1\141\12\264\1\0"+
11241	"\4\u0434\2\0\1\u0434\15\0\1\u0434\6\0\1\u0436\1\u0438"+
57042	<td>1.44</td>
1446	getlastcommitgeneration
42180	att.setFlags(1234);
48610	hasMoreTokens
11838	zzReader.read(zzBuffer,
48615	chokes
38867	testIndexExists()
35934	initializeIndex(values,
35801	pr.add(IndexReader.open(rd2,true));
30437	porter's
52411	NumericTokenStream(precisionStep).setIntValue(value));
33410	main;
65081	downTo
2077	scratchArc.isFinal());
15080	doc.getField(DocHelper.TEXT_FIELD_3_KEY);
18439	.println("#"
42247	att.copyTo(assertCloneIsEqual);
21639	pattern.charAt(wildcardSearchPos);
31741	IndexWriterConfig}
62925	"_1_1."
34006	rpp[i];
57820	LUCENE-1274
2233	compound_files
32757	charArrayDump(char[]
10601	"\1\135\4\u0141\2\136\1\u0141\15\136\1\u0141\6\136\12\u0141"+
19228	ÏÏÏ¹
39147	arr)
30122	_other;
28095	"\u0061\u0062\u00AD\u0062\u0079"
55807	testSegmentWarmer()
39868	newReader.hasChanges
53375	file.position)
26135	adjusttop
53836	startsize
50489	LogMergePolicy#getUseCompoundFile()}
58309	UTF8SortedAsUTF16Comparator()
28940	arr;
36067	FilteredQuery,
35034	FilteredQuery)
22338	T>>
37608	LUCENE-1280
1842	LUCENE-1282
9203	PrefixCodedTerms.Builder();
31532	BINARY_TO_COMPRESS
33414	main)
36072	FilteredQuery(
33729	SloppyPhraseScorer(Weight
4572	IndexWriterConfig.
46715	U+FF01:
66989	Thread(){
50566	(create)
50800	time.</p>
16028	IndexWriterConfig(
11487	"\1\u04cf\13\0\1\u0325\161\0\4\u04f4\2\0\1\u04f4\15\0"+
32304	dir.getLockFactory().getLockPrefix());
30120	_other)
57705	current",
61739	uf8d7
51381	flushDeletes);
33405	java.util.zip.Checksum;
67485	newSearcher(refreshed);
20314	ONE_BYTE);
11226	"\13\0\1\u0325\161\0\4\u042b\2\0\1\u042b\15\0\1\u042b"+
58714	reader.terms(new
45449	,"(p)",
10792	"\4\0\2\136\150\0\1\376\26\264\1\u02b1\3\264\1\141"+
37781	this.normsField
34386	Generally
64615	readVLong()
57284	(((long)i)<<6)
66150	6000;
67509	assertReaderClosed(readerToClose,
44955	BROKEN
13250	uf8e1
64816	END_LOC)
58216	(depending
32992	maxnumpostings
68129	!prePopulate
6264	termStr,
28505	Field("binaryCompressed",
46748	U+FF0C:
50005	checkAbort)
15068	TEST_SEGMENT_NAME,
6271	termStr)
30243	(SegmentTermEnum)origEnum.clone();
8312	bufferstart
57633	BaseCharFilter
32255	l2.release();
34127	//if
7063	forward
16880	refCount,
50001	checkAbort;
56113	T);
10578	"\4\u01da\2\0\1\u01da\15\0\1\u01da\6\0\12\u01da\1\u0197"+
50654	searches.</p>
19708	chunkStates[i].posEnum.doc();
34553	org.apache.lucene.search.ComplexExplanation;
55546	random.nextInt(5)));
45196	U+0186:
7510	docState.docID;
39490	TermInfosWriter(Directory
30	copyright
46618	U+FF0D:
43253	tdocs.seek(tb);
64347	docVisitCount
55168	verifyEquals(r1.getTermFreqVectors(id1),
19279	lettre
22361	quickSort(a,
879	MockDirectoryWrapper.Failure
30440	assertvocabulary
40050	segmentInfos.commit(directory);
17489	assertNotNull(fieldInfos.fieldInfo("f2"));
36377	packed");
15919	(SegmentInfo)
25023	fieldsortedhitqueue
62433	ConjunctionScorer,
66629	Assert.assertTrue(pt.toString(),
52547	weightings)
64393	CompressionTools()
4857	chaining
44206	U+0187:
66214	searcher.setSimilarity(oldSimilarity);
37101	//final
51878	Forcibly
46751	U+FF0E:
52863	NONINFRINGEMENT
23989	"B",
61057	"\242\0\1\u04fc\33\0\2\u04fd\1\0\2\u04fd\2\0\1\u04fd"+
64854	intStarts;
28110	SIX
5007	(kind
32076	fixed-size
50692	config.getReaderTermsIndexDivisor();
4551	test10b
32805	originalcomparison
4550	test10a
9216	ent.getValue();
10691	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\1\u0152"+
17538	assertTrue(td.next());
36174	FINAL_END_NODE
21543	testhelper
2970	testsearchmultithreaded
44232	U+0188:
17126	fieldsReaderOrig;
46758	U+FF0F:
24749	RuntimeEx
39366	openbitsetdisi
47660	yogh
18571	(á¢áá³á­á­ááá²á«)
17203	fieldsReaderOrig,
26591	!DocHelper.noNorms.containsKey(f.name()));
7235	queue
1845	IndexFileNames.FIELDS_INDEX_EXTENSION);
3275	inner
8346	LockVerifyServer
27332	"\u002C\r",
16387	SDP
4323	FilteredTermEnum
53785	if(set
44146	U+0181:
59948	"\4\0\2\137\2\0\1\175\1\0\1\51\1\0\1\176"+
21911	//do
19635	lastPos;
41365	System.out.println("Verify
21101	tryLock()
22527	invocation,
11572	"\4\u0533\2\0\1\u0533\15\0\1\u0533\6\0\12\u0533\1\u0534"+
57648	invocation.
2549	scores
2907	scorer
24403	parseByte(final
62382	gender
36087	testbooleanmust
50232	/*final*/MergeScheduler
26076	scored
36397	out.writeBytes(bytes,
16827	origReader.deleteDocument(1);
36853	(scratchArc.target
23305	scoren
46833	asciifoldingfilter
28938	org.apache.lucene.search.function.DocValues#getInnerArray()
29065	FORMAT_CURRENT)
25909	doing,
44148	U+0182:
40759	1+pairs.size()),
33648	ldmp));
22558	pos).trim(),
30682	"\1\25\5\0\1\25\32\0\15\25\5\0\3\25\1\0"+
3614	onemerge
67369	assertEquals(subReaders1.length,
11299	"\2\136\1\137\3\136\3\0\1\136\4\0\2\136\216\0"+
49078	clauses");
11290	"\32\264\1\141\1\264\1\u045e\10\264\1\0\3\136\1\0"+
38271	0-length
66133	teststaticmethod2old
44171	U+0183:
4864	testtostring
9492	"\0\u23a8\0\u244b\0\u24ee\0\u2591\0\u2634\0\u26d7\0\u277a\0\u281d"+
4824	getanalyzer
67253	testtermattributeimpl
5295	jjFillToken()
65477	refCounts
60248	"\26\232\1\352\12\232\175\0\1\351\7\232\1\u0290\22\232"+
17874	T),
29416	buffer.append('*');
10333	"\3\0\1\136\4\0\2\136\150\0\1\u014e\4\264\1\u0150"+
21132	invocations
51638	merge.segments);
36202	nextArc;
20336	'nextLength'
53027	outUpto+length+1);
22238	double[oversize(minSize,
10378	"\2\u015f\1\u015e\5\u015f\1\u0160\14\0\1\u0122\161\0\4\u0161"+
24328	++x)
34087	hasMultiTermRpts
56364	swap(lot++,
29550	"\5\0\32\132\4\0\1\141\1\0\32\132\57\0\1\132\2\0\1\133"+
54959	(!r.isCurrent())
36366	bytes[writer.posWrite-upto-1];
36840	(targetHasArcs(arcAndState.arc)
52151	newfilename
40033	KeepOnlyLastCommitDeleter:
55287	tpv2.getTermPositions(j);
67889	hackish,
9845	"\41\0\1\25\2\64\2\0\2\172\1\66\1\0\1\64"+
59958	"\2\137\150\0\1\u0101\27\266\1\u0195\2\266\1\142\12\266"+
36275	FST(DataInput
57877	super.newBuffer(newBuffer);
21	file
30272	indexpos
20262	booleanclauses
48206	subSpansByDoc[firstIndex].doc();
35394	(whose
25457	cacheEntries)
63485	0x87643,
37435	goldfreqs
25675	prefaced
38729	fieldable1.iterator();
50407	SR;
58007	(freeCount
14556	southeast_asian
3967	ioBuffer.getBuffer();
59535	"\1\66\6\0\1\25\126\0\2\25\2\0\2\25\4\0"+
63483	0x87642,
51170	done");
28777	maxSkipLevels)
16915	testclonewritetoclone
9941	"\1\247\1\250\1\251\1\252\1\253\1\254\1\255\1\256"+
35268	curDoc
21189	termNumber
12449	uf998
34659	LUCENE-1303
63910	assertTrue("non-letter:"
1583	query
19041	keys/values
28767	maxSkipLevels,
29662	"\6\66\10\66\2\100\7\66\36\100\4\66\102\100\15\115\1\77\2\115"+
65775	numSets,
43866	$codes{$code}
23092	searchers3[0]
12850	uf98e
48858	//no
8762	s.search(new
66999	headerSize
63482	0x87641,
63533	==0)
59351	"\1\137\4\0\2\137\151\0\4\162\2\0\1\162\15\0"+
58234	well-formed
44267	U+018A:
13251	uf984
23385	"1"));
35485	SSE
58609	testsinglehighsurrogate
64312	topLevel.add(new
61740	uf97a
62695	NumericField("float").setFloatValue(random.nextFloat()));
36852	chain.length++;
36731	labelToMatch)
67595	SRs
28778	maxSkipLevels;
34834	prevEndOffset
36712	labelToMatch,
66786	x45aaf665
33360	testRollbackDeletionPolicy()
65311	labelToMatch:
36725	labelToMatch;
11146	"\13\0\1\u02cf\160\0\1\u0332\4\u03ed\2\0\1\u03ed\15\0"+
39117	PhraseQuery#setSlop(int)
37218	readfirsttarget
13040	u732b
24738	"1")),
36592	(!targetHasArcs(follow))
20217	clone.clauses
44264	U+0189:
16239	keyField,
6127	assertTrue("PositionIncrementAttribute
15154	LoadFirstFieldSelector
33262	commits.iterator();
21505	currentPos
56260	testtermpositions
4041	letter
33343	userData.get("index");
37670	nonexist
57803	r.commit(commitData);
58005	PerDoc
59049	ScoringRewrite<BooleanQuery>
48724	heavily
24781	collectorMaxRev));
43056	refreshIfNeeded(reference);
37675	testorderdoesntmatter
543	org.apache.lucene.store.IndexOutput;
39580	"proxPointer
16254	Term(FIELD,
12238	u733f
54203	blockPool,
65248	root.isFinal
23093	searchers3[1]
54199	blockPool)
66994	ByteArrayOutputStream(1024);
6368	setdefaultoperator
35894	query.hashCode(),
51516	rollbackTransaction()
61529	u7321
60640	"\2\137\150\0\1\u0101\32\266\1\142\2\266\1\u0406\7\266"+
42406	generateTerms(String
35408	Image.
26034	EMPTY_SCOREDOCS
33959	graph
46745	U+FF0A:
2561	testignorespanscorer
11868	zzReader
60944	"\2\0\1\u04da\15\0\1\u04da\6\0\12\u04db\1\u0497\13\0"+
23790	fine
1200	find
31044	sw.getBuffer().toString();
26663	servers.
8020	.invoke(cleaner);
10856	"\175\0\1\346\1\230\1\u02f0\30\230\1\347\12\230\175\0"+
54651	booleanvalue
12639	u7335
58752	"\udc17\ud917abcd",
4032	fill
64441	bytes.length,
63248	numbers).
53235	nextch
43374	bytes.length)
22138	over-allocating
35435	support_class_visibility_public
62845	<code>input</code>
2711	Collector
24568	filt
65636	any).
34898	SpanMultiTermQueryWrapper},
46704	U+FF0B:
64298	DEFAULT_DOC_COUNT_PERCENT
15135	bytes.length;
1585	TopDocs
53611	//it
33489	"empty",
36773	bytes.length:
11652	"\1\u0563\6\0\12\u0563\1\u0542\13\0\1\u0325\160\0\1\u0386"+
31715	line:
18981	line;
65621	revisitPolicy");
52051	doopenstores
32243	testNativeFSLockFactory()
62393	linda
44378	U+018E:
59219	"\3\2\2\35\1\2\245\0\1\25\3\0\1\25\3\0"+
36152	BIT_ARC_HAS_FINAL_OUTPUT;
63170	dtempdir
165	time
60782	"\4\0\2\137\150\0\1\u0101\32\266\1\142\6\266\1\u0466"+
835	w.getConfig().getMergeScheduler()).sync();
47101	epigraphic
40037	segmentInfos.updateGeneration(deleter.getLastSegmentInfos());
23015	lDoc2.add(newField("id",
41025	current="
37006	nodes.length-1
20714	getOffset()
829	.setMaxBufferedDocs(2).setMergeScheduler(new
35541	twosA=(ones&b)|(u&c);
64563	leftInBuffer;
51413	too-frequent
42942	TokenAttributeFactory(AttributeSource.AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY);
52390	populatedirs
41992	lines
43708	justcompilespanquery
20059	clauses.toArray(new
57798	"second",
44299	U+018C:
57628	<code>cumulativeDiff</code>
67567	checkSubReaders,
37943	queue.poll())
22049	Constrains
13043	u7514
2001	scratchArc,
54617	createrandomarray
34035	unionTermGroups(bb);
21672	wildcard_string
25719	cacheentry
34045	HashSet<PhrasePositions>());
62272	"bubba"),
26932	"\u0001\u0308\r",
4656	setter
39096	testmodifyonunmodifiable
34353	this.termIndexInterval
44269	U+018B:
17253	linkedhashset
15817	filesSet.add(IndexFileNames.segmentFileName(name,
31064	si1.docCount
53308	valid(_prefix,
43088	tryacquire
16054	searcherThread1.start();
7672	line)
55558	iwc.setMaxBufferedDocs(20);
53363	LUCENE-1566
51016	maxNumSegments);
4898	line.
17866	"body"));
8927	enumerations
60775	"\1\u0101\1\u045f\31\266\1\142\12\266\1\0\3\137\1\0"+
10126	"\1\352\3\36\1\352\5\36\3\352\3\36\1\352\2\36"+
32319	failure?
23489	failure:
555	failure;
11795	java.io.InputStreamReader(in));
39715	this.segmentInfos
40868	fstLong;
62876	termAtt.setLength(termAtt.length()
54518	testInvalidElementSizes()
40555	i=0;i<ir.length;i++)
57168	bits[endWord]
2629	failure,
31745	rewritten.");
12642	u751e
30334	TwoPhaseCommitImpl[numObjects];
15580	CHECK_DIR);
35862	checkBooleanTerms(searcher,
40874	fstLong0
12936	u30f3
17549	assertEquals(parallelHits.length,
12241	u7528
61818	u30df
49962	x8000000
34396	yourself,
60657	"\6\0\12\u0413\1\u03a0\13\0\1\u033c\161\0\4\u039b\2\0"+
57725	random.nextInt(200);
36838	chain="
24385	IntParser");
35738	v--;
66081	AnalyzerReturningNull());
62135	"value1")),
38375	x7fffed
61532	u750a
11188	"\1\u040e\31\230\1\347\12\230\175\0\1\346\25\230\1\u040f"+
13337	u30e9
65475	Reference
24731	((Float)o2).floatValue(),
38376	x7fffef
24619	actualTFCClasses
582	Field
7766	reader.document(docs[i],
64322	CutOffTermCollector
56158	danishIndex,
59131	"\2\u86e8\2\u878b\2\u882e\2\u88d1\2\u8974\2\u8a17\2\u8aba\2\u8b5d"+
56749	assertTrue(policy.numDelete
42586	s.getChars(upto,
65046	UnCompiledNode[10];
48728	reset(bytes,
57172	ensureCapacity(index+1);
7745	FieldSelectorResult
3313	Collect's
19168	ØØµØ
25361	Jumps"),
32997	postingsarray
35984	testinclusivelowernull
31581	System.out.println("testUpgradeOldIndex:
33766	f"~2,
15689	CHECK_DIR))
51961	flushPending;
24417	MyFieldComparator(int
9964	"\3\0\1\136\4\0\2\136\2\0\1\47\1\0\1\50"+
43935	U+018F:
61488	"\175\0\1\u034d\1\u06ab\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
51274	dsNames.get(dsName);
55710	mainWriter.addIndexes(readers);
12535	u30fd
9279	disrupt
4237	NumericField("float").setFloatValue(Float.NEGATIVE_INFINITY));
57978	TermVectorsTermsWriter(DocumentsWriter
21154	great
51593	"registered",
63570	wordShift--;
46463	,"14",
44704	"Ç¶"
18214	topscorer
29947	"\1\54\4\0\1\54\1\0\1\54\2\0\2\54\1\0"+
48787	Arrays.sort(tokens);
54789	failing/not
57691	direct64
29841	"\5\0\1\135\3\0\1\136\14\0\1\137\16\0\1\140"+
41371	lookup)");
34010	rpp[j];
36073	CachingWrapperFilter(new
12640	u73d8
12239	u73e2
41032	isLeaf
13041	u73ce
49990	dataOffset;
27669	"\u0061\u2060\u0308\u0061\u2060",
55966	stillalivecount
10474	"\4\0\2\136\150\0\1\376\3\264\1\u0103\26\264\1\141"+
61530	u73c4
39784	readerShared[i]
1959	ioutils
66440	postingsArray.textStarts[termID]
59475	"\1\142\12\143\1\66\1\137\1\144\1\137\1\0\1\137"+
7129	auto
12446	uf7af
27970	"\u0031\u0027\u0308\u0061\u0027\u2060",
35882	allowedTerms.contains(term));
41890	prefixlength
28919	')';
19349	
38382	x8000043
38381	x8000040
59390	"\1\25\2\0\1\25\3\0\1\25\177\0\2\26\6\0"+
65455	"commit",
35019	collector.collect(scorerDoc);
50595	(deleter.startingCommitDeleted)
16022	SearcherThread(Directory
48200	firstIndex
62548	((prohibitedScorers.size()
18585	"ááááá"
21565	super();
65403	Arrays.sort(l);
20583	vendor
11141	"\1\u03ed\6\0\12\u03ed\1\u0391\13\0\1\u02cf\161\0\4\u03e9"+
12847	uf7a5
26922	DIAERESIS
64383	direct32
21529	"c.cfs");
48160	this(spanNearQuery,
38202	0x000000000000000L,0x000000000000000L
1008	method
6590	M</strong>,
50668	getMaxMergeDocs()
25464	<B>NOTE:</b>FieldCache
58442	set.add((Object)
24371	testCustomFieldParserSort()
3280	replay:
49054	(matchVersion.onOrAfter(Version.LUCENE_29))
40787	in.offset
28581	char[2048];
17110	tis,
58357	utf16_code_point_order
44530	U+0192:
64812	r.terms(targetTerm);
29755	"\11\32\1\0\2\32\1\0\16\32\1\0\2\32\1\0"+
54931	curGen
17125	tis;
33113	assertSame("First
55275	j=0;j<numTerms;j++)
6915	equals(final
53361	isOpen=false;
30109	termOrd)
38541	lazyFields);
63922	testmaxwordlength
8951	enumeration.
37258	absptr
44513	U+0191:
42246	assertFalse(assertCloneIsEqual.isKeyword());
28339	lscorer;
33879	//System.err.println("initSimple:
37114	other.count)
14979	pos2);
34413	non-positive,
24031	"F",
23586	tiny
56760	reader.deleteDocument(3*i+1);
59350	"\1\137\1\161\1\137\1\0\2\137\1\140\3\137\3\0"+
52507	test1()
25208	verifying
50522	IndexDeletionPolicy},
23525	io.printStackTrace(System.out);
7023	NumericUtils.splitIntRange(new
32117	X+1
44380	U+0190:
64205	testObtain()
20290	TestCachingCollector
24289	Float.MAX_VALUE
33192	map.put(key,
48068	differentiates
25199	contents[i],
3364	replays
54455	CharArraySet.copy(Version.LUCENE_31,
16602	!lessThan(element,
18662	à¦à¦°à§
53197	profits
30551	"\3\0\1\25\5\0\2\25\3\0\1\25\4\0\3\25"+
31318	//QueryParser
45412	THROUGH
30624	"\153\0\2\33\11\0\1\33\115\0\2\33\6\0\1\33"+
58570	CharArraySet.copy(Version.LUCENE_30,
19155	Ø§ØØØØØ
12537	u3243
20263	satisfied
49845	fuzzyminsim
25480	(valId)
30152	getMaxSkipLevels()
36888	arcAndState2.chain.ints[arcAndState2.chain.length-1]
64819	FIELD.equals(actualTerm.field()));
34284	DEFAULT_MAX_BUFFERED_DOCS;
50439	readerMap:
21125	characteristics,
9592	"\2\u1c93\2\u1d36\2\u1dd9\2\u1e7c\2\u1f1f\2\u1fc2\2\u2065\2\u2108"+
49814	(p.gen
59000	sliceStart++)
24319	getFullStrings();
3342	cacheddocs
34469	IndexWriter#getReader}
63566	variable?
3959	correctOffset(end));
13339	u322f
40360	termscorer
44712	U+0195:
37654	docs.get(docID);
37123	bufferedoutputstream
1417	whitespace
11856	variables
54749	"reserves"
54628	conscious
16266	st(e));
10266	"\1\334\175\0\4\u011c\2\0\1\u011c\15\0\1\u011c\6\0"+
11687	zzUnpackAttribute();
30138	(don't
44734	U+0196:
45099	"Ç¸"
63337	0x75321,
18475	whitespace[]
17859	pad(medId);
15407	filemodified
8464	setlockdir
50239	List<MergePolicy.OneMerge>
19575	CharsetDecoder
439	openmode
20291	ONE_BYTE
12136	u324d
44580	U+0193:
63490	0x87651,
42023	<code>FieldCache.DEFAULT</code>
50948	(docWriter.deleteQueries(queries))
49844	phraseslop
65641	Incref
38887	testStressTryIncRef()
43009	oldReference
23947	toclose
24392	FloatParser");
22590	testattributesource
60339	"\1\u021f\3\u021c\1\u0220\5\0\2\u021c\4\0\1\u021c\151\0"+
33174	t.setFlags(flags);
36354	writer.posWrite;
56332	merge(lo,
24558	SortField.INT),new
39673	notexistnames
45967	"Ç·"
61324	"\175\0\4\u063a\2\0\1\u063a\15\0\1\u063a\6\0\12\u063a"+
11562	"\1\u0527\15\0\1\u0527\6\0\1\u0528\2\u0529\1\u0528\5\u0529"+
9551	"\1\u4bbb\1\u4c5e\1\u4d01\1\u4da4\1\u4e47\1\u4eea\1\u4f8d\1\u5030"+
21608	patternIdx,
31956	val.charAt(0)-NumericUtils.SHIFT_START_LONG;
28063	"\u0031\u002E\u2060\u0061\u0027",
44893	U+0199:
43853	$line
38783	testIndexReader()
60896	"\6\0\12\u04b8\1\u04b9\175\0\4\u04ba\2\0\1\u04ba\15\0"+
42787	PayloadAttribute,
54333	PayloadAttribute)
16542	pq.updateTop();
28958	getcachedvalues
48349	<code>nrMatchers</code>
49898	settime
19907	reused)
16277	snear(st(s),
34593	payloadsSeen;
41306	InputStreamReader(new
32713	testAllNullInput()
45101	"È "
64807	Arrays.binarySearch(validTerms,
36900	renumber
43260	tdocs.seek(tc);
34618	payloadsSeen,
37915	removals.
64627	newBuffer(new
2096	"frozenHash="
20673	primarydir
56945	StandardTokenizer.APOSTROPHE;
34140	i<t.length;
66800	queryString,
65819	maxOuterClauses,
2623	setting
21758	runsearchthreads
44737	U+0197:
3270	upto));
3914	TODO
6891	getMin()
65433	sindex.order;
41374	profile
32529	(byte)0x13,
54839	<code>finally</code>
66913	Pair<A,B>(a,
42596	English.intToEnglish(10).trim()));
66217	tot=0;
4697	thus
61311	"\15\0\1\u062e\6\0\12\u0631\1\u062f\13\0\1\u033c\160\0"+
11573	"\13\0\1\u02cf\160\0\1\u0332\4\u0533\2\0\1\u0533\15\0"+
58483	upperArr[i]),
35494	tot=0,
46150	"È¥"
44865	U+0198:
29241	materializeVector()
30443	testwithkeywordattribute
32014	b.append("'").append(getReaderKey()).append("'=>");
21611	patternIdx;
53752	Collection,
16967	LowerCaseFilter
15120	DocHelper.FIELD_UTF1_TEXT,
66948	outputs1.write(output.output1,
18819	(these
46475	,"15",
58057	perDoc.reset();
53621	ties
10178	"\1\57\4\0\1\167\14\0\1\61\4\0\1\170\2\0"+
18826	"æ",
31623	testcreatesurrogates
6369	and_operator
31982	floats.
6622	floats,
63269	0x521,
61738	uf834
20355	mockscorer
7967	platform
35844	"D"});
59369	"\2\0\1\60\4\0\1\171\14\0\1\62\4\0\1\172"+
39477	TermDocs#skipTo(int)}.
65376	iscompiled
61171	"\1\u04d5\175\0\4\u035b\2\0\1\u035b\15\0\1\u035b\6\0"+
51777	readerPool.get(merge.info,
26970	"\u0001\u0308\u002C",
10267	"\12\u011c\1\u011d\175\0\4\u011e\2\0\1\u011e\15\0\1\u011e"+
29763	"\1\32\33\0\1\32\21\0\1\32\10\0\1\32\24\0"+
52228	compoundfilename
11231	"\12\u042b\1\u0385\13\0\1\u0325\160\0\46\u01ca\1\0\2\u01ca"+
23642	sb.append('
6236	//If
6246	clauses.add(new
40377	sd[j].doc);
42342	sb.append("
53188	warranty
1263	Use
29835	"\1\25\1\26\4\0\1\25\2\0\1\25\1\0\1\25"+
55379	getString(0),
10409	"\2\230\2\u016a\1\347\12\230\175\0\1\346\6\u016a\1\230"+
19204	ØØØ¾Ø¿
33292	r.maxDoc();
25242	"hij*",
25132	"prefixx"});
41402	args[idx]);
24973	testintparser
58376	"if",
50056	totalSize+os.getFilePointer();
4146	NumericRangeFilter.newIntRange(field,
61531	u7467
3031	module
68118	(there
13042	u7471
24704	(v[0],
53527	(totalHits==0)
23271	docFrequencyMap.get(template.createTerm(contents[i])));
10799	"\1\376\3\264\1\u02b6\26\264\1\141\12\264\1\0\3\136"+
55375	nextInt(100),
40160	numMatchingSegments
66098	c]");
37226	getnodecount
55396	nextInt(100);
27095	"\n\u0308\u0030",
6700	modulo
28149	kana
34769	qp.setPhraseSlop(0);
52062	indexformattoooldexc
63201	java.lang.Object#equals(java.lang.Object)
1221	"good
48297	prevStart;
29941	"\2\25\21\0\1\25\3\0\1\25\5\0\1\25\32\0"+
12240	u7485
56547	exclDisi.advance(reqDoc);
60187	"\1\u0101\4\266\1\u025b\25\266\1\142\12\266\1\0\3\137"+
3274	specialized
62575	requirednrmatchers
12641	u747b
63497	0x87654,
50294	#setMergedSegmentWarmer}
11982	(zzNext
58661	File("/path/to/index"));
48731	reset(byte[]
14951	B"~N
63491	0x87652,
52045	maptolive
1744	format
37636	while(ts.incrementToken())
29794	"\5\25\2\0\2\25\4\0\6\25\1\0\2\25\4\0"+
30234	indexOffset
58253	other.offset
10989	"\1\136\4\0\2\136\150\0\1\376\1\264\1\u0103\30\264"+
66383	charPool.buffers[textStart
63493	0x87653,
56428	assertTrue("count="
53210	xdfff
57878	byteBuf
45038	U+019C:
7436	Field("eng",
32665	numBytes2));
22111	convert
66044	"+((stop))"};
61820	u3225
37873	inefficient,
12447	uf852
398	LUCENE-1647
41564	(!exists)
16864	LUCENE-1648
10745	"\13\0\1\u0122\160\0\1\u0163\4\u0277\2\0\1\u0277\15\0"+
11447	"\2\u04a8\2\0\1\u04a8\1\0\1\u04a8\176\0\4\u04d7\2\0"+
13249	uf83e
62148	LUCENE-1630
59571	"\6\0\1\116\153\0\1\116\5\0\1\116\2\0\3\116"+
61383	"\12\u0660\1\u0636\174\0\1\u0349\4\u065f\2\0\1\u065f\15\0"+
9623	"\2\uba7b\2\ubb1e\2\ubbc1\2\ubc64\2\ubd07\2\ubdaa\2\ube4d\2\ubef0"+
9024	(term.field.equals(lastTerm.field))
12938	u3239
12848	uf848
68159	assertEquals(pos,
46256	,"3",
15184	//On
26052	TopFieldCollector(PriorityQueue<Entry>
44975	U+019A:
45135	U+019E:
14991	MultiPhraseQuery~N
23140	"x");
6659	8-byte-number
5814	Two
37689	termattr
16372	CharFilter2(CharStream
13247	uf6f8
18910	bones",
37508	booleanQuery.add(phraseQuery,
30490	termvectorentry
55371	tvVal
24344	fail:"
26215	converting
51651	merge.info.name);
45097	U+019D:
61736	uf6ee
9546	"\1\u32e6\1\u3389\1\u342c\1\u34cf\1\u3572\1\u3615\1\u36b8\1\u375b"+
30769	codepoint.
3583	requested
29967	"\1\65\2\0\1\65\3\0\1\65\5\0\1\65\7\0"+
5718	keywordattributeimpl
39506	output.writeInt(FORMAT_CURRENT);
14528	zzmarkedpos
53355	Descriptor(File
27607	"\u0300\u0308\u00AD",
460	newindexwriterconfig
30309	(failOnPrepare)
56642	modTime
50016	addFile(file,
539	org.apache.lucene.analysis.TokenStream;
15436	commits
43316	<code>getTerms</code>
1146	out.copyBytes(in,
38130	NumericUtils.floatToSortableInt(nan);
36910	targets
45198	U+019F:
60705	"\1\u0428\2\u02e2\1\u0428\2\u02e2\1\u0428\6\u02e2\1\u034e\12\u02e2"+
17764	running!
37019	topNodeMap.get(arc.target);
58020	fill(int
37598	"+score3);
48099	running.
690	forcefully
46845	chomp
51044	running,
38784	LUCENE-1468
48770	TermVectorOffsetInfo[TERM_FREQ];
67257	performDefaultTests(new
29474	SystemPropertiesInvariantRule(PROP_KEY1);
39655	PrefixQuery(new
19863	testCachingInt
28359	disjunctionmaxscorer
54936	gen="
16761	pr1.close();
63444	0x8721,
67446	reader5.close();
52014	gains
34639	explain(final
57899	channel.read(bb,
65449	pear
64051	assertEquals("\u00BF",is.readString());
43608	mergeDeletes(final
4835	getwritelocktimeout
41986	allids
8371	(only
28760	numberOfSkipLevels;
37350	org.apache.lucene.index.IndexFormatTooNewException;
42901	prototype.startOffset;
52091	rollbackinternal
13045	u765a
63830	bitindex
36011	(filteredquery,
38782	LUCENE-1474
62843	org.apache.lucene.analysis.standard.StandardTokenizer}.
20492	datetimestring
55360	Integer.toString(base
32397	clearlock
48967	Examples
66421	doNextCall;
60551	"\1\u03a2\1\u03a3\1\u03a2\1\u03a0\13\0\1\u033c\237\0\1\u020e"+
22330	setPivot(int
40825	(UpToTwoPositiveIntOutputs.TwoLongs)
60734	"\15\0\1\u0440\6\0\1\u0441\2\u0442\1\u0441\5\u0442\1\u0443"+
38986	assertEquals(hmap.size(),
12644	u7664
52494	iw1.close();
54737	IOException("Cannot
48413	scorerQueue.
54692	NativeFSLock(lockDir,
8477	doing
17673	rewriteMethod
32536	(byte)0x0A,
63952	TestAnalyzer3();
36014	filteredquery,searcher);
47889	DocValues}
40061	some)
37867	forked
36620	in.skip(-1);
39801	entry:
60942	"\6\0\12\u04da\1\u0497\13\0\1\u0126\161\0\4\u04d9\2\0"+
26579	System.out.println("Norms:
49621	jj_consume_token(RANGEEX_GOOP);
51237	addIndexes(IndexReader...
2727	greedy)
24875	expected.get(idx));
34329	Similarity#getDefault()}.
4141	NumericRangeQuery.newIntRange(field,
61534	u7650
40467	add/get
1936	fieldsStream.getFilePointer();
5862	edge-cases
8035	makes
27375	"\u0027\u0308\u0001",
36422	writer.writeVInt(v);
41787	slowCompletor.entrySet())
59001	sliceLength
27540	"\u00AD\u0001",
27785	"\u0061\u0027\u0308\u0061\u002C",
31380	newFSDirectory(oldIndexDir);
49810	tracing.
16566	1-based
67777	ArrayUtil.hashCode(termBuffer,
37428	goldFreqs)
29734	"\1\25\3\0\2\25\1\0\1\25\5\0\3\25\1\0"+
64530	getexclude
29365	(limit
23044	Searcher[2];
65709	equals.
39883	super.doOpenIfChanged(writer,
21584	pre)));
33141	src.addAttribute(PayloadAttribute.class)
1272	limit
60530	"\150\0\1\u0101\1\u0392\31\266\1\142\12\266\1\0\3\137"+
35215	this.proxOutput
64429	DataFormatException
60945	"\1\u0126\160\0\1\u0168\4\u04da\2\0\1\u04da\15\0\1\u04da"+
41789	BytesRef(e.getKey()),
29092	tvd.readVLong();
5688	attr
11879	Enters
5741	setup.
21956	toCopy);
48738	setup,
43398	VB1
29666	"\4\22\1\10\37\22\1\10\4\22\25\62\1\127\11\62\21\55\5\62"+
17641	closeablethreadlocal
55517	fi.fieldInfo("f1").indexOptions);
21597	'*';
48810	tokenUpto;
33496	rewind
52276	skipOffset)
31027	"test2.txt");
46654	"â¸¨"
10533	"\1\u0168\1\u0167\1\u0168\1\u0169\1\231\1\0\2\u0168\156\0"+
51410	(!applyAllDeletes)
35210	numberOfSkipLevels,
42968	starttermbuffer
21081	startdir
39010	cs.size());
9121	StoredFieldsWriterPerThread
38778	assertFalse(r
42183	att2
25665	CacheEntry[]");
33185	att,
42252	att)
34936	<p>Note:
65687	(directory.fileExists(fileName))
8542	<p>Note,
41876	testfsts
9229	Iterable<QueryAndLimit>()
18181	firstDocID);
11629	"\1\u055a\1\u0542\13\0\1\u0325\226\0\1\u0511\13\0\1\u0325"+
27072	"\r\u0031\u002C",
31883	ShortParser
5690	target;
22559	part.substring(pos
36967	target:
7468	posIncAtt.setPositionIncrement(incs[nextTokenIndex]);
40712	IntSequenceOutputs.getSingleton();
7772	fi.hasNext();
57527	fieldCounter++;
28328	rscorer
4969	curChar
37051	(below)
41109	(prefixes.size()
57731	.setOpenMode(OpenMode.APPEND).
18766	"Î»Î¿Î³Î¹ÏÎ¼Î¹ÎºÏ",
52262	skipOffset;
22357	(toIndex-fromIndex
55958	flaw
6242	boosts.get(fields[i]);
41485	Util.getByOutput(fst,
48011	flat
19359	
14977	pos1);
48646	consumer.finish();
53374	(file)
19719	cs.posEnum.freq();
3989	this.getClass();
43370	"Input
24021	"E",
34196	IndexWriterConfig(analyzer);
37032	fst.arcWithOutputCount++;
2158	flag
67714	newCharBuffer,
10693	"\1\u0245\5\264\1\141\12\264\1\0\3\136\1\0\2\136"+
68112	Add/Update
39676	DirectoryReader
32639	IndexableBinaryStringTools.encode(originalBuf1,
42966	chained
21311	"d.csf");
19588	charSet);
59222	"\11\0\1\25\122\0\1\25\1\0\1\25\1\0\2\25"+
25102	String[]{"nowildcard",
21989	peek
60388	"\32\266\1\142\1\u0315\11\266\1\0\3\137\1\0\2\137"+
49555	jj_consume_token(PREFIXTERM);
33452	super("Format
61144	"\1\0\1\u054c\14\0\1\u02e1\160\0\1\u034d\1\u02e2\1\u0590"+
18728	"Ø¨Ù",
34971	result.addDetail(inner);
15810	(files
51938	(once
60715	"\12\u02e2\175\0\1\u034d\6\u02e2\1\u0428\7\u02e2\1\u0428\13\u02e2"+
35515	b=A[i],
1550	indexPosition
32641	IndexableBinaryStringTools.encode(originalBuf2,
3762	codepoints
55638	testAddIndexesAndDoDeletesThreads()
41410	System.err.println("No
23329	modifier.commit();
11497	"\226\0\1\u0474\175\0\4\u04fc\2\0\1\u04fc\15\0\1\u04fc"+
40349	target.
3074	target)
66730	<p>Long
20736	target,
60314	"\4\u02db\2\0\1\u02db\15\0\1\u02db\6\0\12\u02db\1\u02dc"+
15738	gen);
26845	recyclecharblocks
54549	assertArrayEquals(a2,
57061	<td>1.25</td>
21577	cidx);
48218	spans1,
45019	,"Lj",
25844	(inOrder
56465	!field.equals(that.field))
26850	OffsetAttribute,
17960	supported).
32098	Arrays.fill(buffers[i],
24366	fail);
36760	Builder.UnCompiledNode#depth
37615	pq.rewrite(searcher.getIndexReader());
64746	"aa9");
22310	int[ints.size()];
65887	testscorerperf
59463	"\2\137\1\140\3\137\3\0\1\137\4\0\2\137\2\0"+
26379	((inputArray[inputByteNum
4205	NumericRangeQuery.newIntRange("ascfield8",
28694	option
49313	df.parse(part2);
22689	lowerVal.byteValue();
49127	getEnablePositionIncrements()
48216	spans2.
48219	spans2)
24889	num_strings
26648	Position();
59368	"\135\0\1\167\1\0\1\51\1\0\1\52\2\0\1\170"+
29672	"\1\0\154\132\41\0\u016b\132\22\0\100\132\2\0\66\132\50\0\14\132"+
29329	getPayload(byte[]
43868	output[outputPos++]
48505	Collector#collect}.
27426	"\u0030\u0308\u000B",
18558	"Õ¸Õ¾",
56501	top();
16776	r1.clone();
24011	"D",
10733	"\32\36\1\141\12\330\1\u014f\1\136\1\151\1\136\1\0"+
21265	assertSameStreams(msg
32	The
46840	perl
36480	perf
46766	SEMICOLON
55691	(failures)
60669	"\2\0\1\u041c\15\0\1\u041c\6\0\12\u041c\1\u041d\175\0"+
11443	"\15\0\1\u04d3\6\0\12\u04d3\1\u0469\13\0\1\u0325\160\0"+
49917	jj_consume_token
21326	buffering
58562	set.contains((CharSequence)
57249	intersection
64935	temp.append(terms[z]);
50281	You'll
54954	started:
52327	dirs[i],
1389	testpoint
6950	float/double
3875	cannot
19427	fieldvaluefilter
25964	replace
49992	started.
61737	uf791
51490	started,
42450	payload.length);
55259	d1[i];
67716	newCharBuffer;
63114	TERM_COUNT
43017	refreshed
10299	"\1\0\1\25\2\0\1\25\1\140\20\36\1\352\11\36"+
1258	s.search(pq,
58292	a.offset;
62995	org.javacc.parser.OtherFilesGen#start()
24856	ITERS
26993	"\u0001\u00AD",
57781	IndexReader.openIfChanged(reader);
61819	u3182
46743	ASTERISK
42139	other.length);
66199	-w5";
53724	note:</em>
46756	SLASH
12937	u3196
13248	uf79b
43673	month,
13338	u318c
27675	"\u0061\u2060\u0061\u0027",
52993	out[upto++]
56286	presorted).
21332	".zero",
31376	setNorm,
52382	payloadprocessor
7358	pop()
27344	"\u002C\u002C",
15672	si.version
65373	wordsuffix
19743	counts[posIndex]
50973	Integer.toString(segmentInfos.counter++,
20749	data.clone();
30377	TPCs
34743	field:multi2)
57278	(i<<6)
15511	this.name
54909	writer.deleteDocuments(queries);
22514	single-Attribute
64202	direct16
21681	pend
62188	testBS2DisjunctionNextVsAdvance()
27536	"\u005F\u0031\u002C",
8437	System.out.print("l");
52987	result.result;
55892	reclaimed,
23632	sawAfterFlush
14829	hash=type^0x346565dd
2942	newcounter
29419	(!super.equals(obj))
10429	"\2\230\1\u016a\1\230\1\347\12\230\27\0\1\173\1\0"+
65520	gen).
38484	assertTrue(tvFieldNames.contains("termvector"));
52933	UNI_SUR_LOW_START;
34182	gatherrptgroups
40698	PairOutputs<Long,Long>(o1,
36147	entry)
66147	bigSearcher;
26711	<code>i</code>.
64127	//Now
55332	nextInt(0x800,
30197	entry.
46487	,"16",
8871	(under
451	deletereaderreaderconflict
30666	"\1\25\1\0\3\25\1\0\1\53\1\0\2\25\4\0"+
31967	entry,
36857	chain.length-2;
55172	r1.getTermFreqVectors(id1);
4789	writer.setMaxBufferedDocs(10);
26479	advancebytes
29765	"\5\32\1\0\2\32\1\0\21\32\1\0\1\32\1\0"+
23057	mSearcher.doc(hits[i].doc);
63271	0x531,
65937	t:two)
10224	"\1\u0103\1\264\3\u0103\1\264\1\u0103\1\141\12\264\1\0"+
27449	"\u0030\u0308\u005F",
56948	COMPANY
3127	Too
67491	wait(_TestUtil.nextInt(random,
25396	testkeywordmarkerfilter
26084	(sort.fields.length
36757	(array)
33644	LogDocMergePolicy();
50893	requirements.</p>
18911	String[]{"David",
1034	fail2;
63272	0x532,
23088	readerB.deleteDocuments(term);
27998	"\u0031\u002C\u0308\u002C",
24035	"B-1",
34785	true).toString());
17628	CloseableThreadLocal<Object>();
57338	//**
12445	uf70c
32310	WriterThread(int
37050	did...
42476	while(tp.next())
38792	!seen.contains(fileName));
22233	grow(float[]
21746	testnrtthreads
67508	firstReader.close();
23499	doc.add(newField("city",
41534	"id="
38787	LUCENE-1509
64853	textStarts;
5868	avoid-conditionals-trick.
53795	iterator,
2982	setslowdown
16862	reopenedReader.close();
9275	URI
49132	Hungary</code>
25170	"*tal")),
40815	allowRandomSuffixSharing
1033	fail1,
28030	"\u0031\u002C\u0308\u0031\u002E\u2060",
11341	"\1\u0485\15\0\1\u0485\6\0\12\u0485\1\u0445\13\0\1\u0122"+
11238	"\4\u0434\2\0\1\u0434\15\0\1\u0434\6\0\12\u0436\1\u0435"+
12846	uf702
53971	origNorm.decRef();
54173	MyTokenStream
46279	,"4",
52898	USE
65199	frontier[idx]);
189	FROM
8002	Try
65861	atLeast(5));
59317	"\1\55\3\0\1\56\7\0\1\57\2\0\1\60\4\0"+
48515	Invoked
8034	fragmented,
35085	System.arraycopy(b,
34249	commit;
27382	"\u0027\u3031",
40064	commit:
11616	"\4\u0553\2\0\1\u0553\15\0\1\u0553\6\0\12\u0553\1\u0554"+
12134	u3107
405	writer.addDocument(createDocument("b"));
60725	"\4\u02e2\1\u0428\11\u02e2\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2"+
37920	iterator:
43389	done()
43714	testLatin1Accents()
31730	commit,
37798	queryNorm)
25917	commit.
33311	iterator2
39283	iterator1
40848	System.out.println("SAVED
31126	iterator.
65835	termflag
23413	commit)
23619	terms");
15236	fsDir.listAll();
2856	default
3133	cachedDocs.clear();
22903	match.clone(),
58263	utf8ToString()
18085	queryNorm;
22532	#reflectAsString(boolean)
34779	getFieldQuery
37909	(backingStore.isEmpty())
51618	merging="
34748	qp.parse("field:\"multi
35741	routines
19020	Support
25502	cacheEntries[i];
48570	omits
66274	mulfactor
47916	tpc.prepareCommit(this.commitData);
12034	zz_cmap_packed
65271	Arc<T>[]
30589	"\1\26\6\0\1\64\4\0\1\35\1\0\1\36\1\0"+
51206	dsFilesCopied
29629	"\3\133\16\0\46\132\12\0\66\132\11\0\1\132\17\0\1\133\27\132"+
61078	"\6\u02e2\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2\1\u0555\26\u02e2"+
4202	ending
35825	TermVectorsWriter)
55011	testRandomIWReader()
59035	random.nextInt(numDocs);
31534	BINARY_COMPRESSED_LENGTH
63160	FAILED:
55328	nextInt(0x80);
35703	http://www.hackersdelight.org/HDcode/ntz.cc
51855	more.
25568	more)
52375	dirs.length
35996	SingleDocTestFilter(x)
11113	"\3\0\1\136\4\0\2\136\150\0\1\376\30\264\1\u03d4"+
38734	itField1.next();
21190	fcsi.binarySearchLookup(terms[i]);
16181	"KEY";
54075	doTestStopPositons(stpf,false);
67995	buffering).
16428	numSnapshots);
63835	pairing
54742	canonicalPath
7624	EOFSeen,
55616	assertEquals("index2",
39298	gettermarrays
20770	tobytearray
29055	tvd.length();
23001	lDoc
66838	querystring
14949	SearchEquivalenceTestBase
11001	"\4\0\2\136\150\0\1\376\32\264\1\141\4\264\1\u0367"+
58606	lowerarr
59826	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0153\6\266"+
42892	newTermOffset
39488	lastFieldNumber
31845	Maintains
32351	obtain()
22899	ToStringUtils.byteArray(buffer,
33613	mappingcharfilter
62165	s.search(dmq,
14870	FieldComparator.LongComparator(numHits,
11875	(zzBuffer.length
36611	readLabel(in);
1619	termEnum.next());
6854	too.
66661	testErrorBeforeClass()
3920	(bufferIndex
48400	</code>currentDoc</code>,
67792	"term="
58637	cachedDir,
3059	b/c
54577	items.length;
21496	is.close();
19990	Iterable<BooleanClause>
67869	MockCharFilter
24486	too!
42419	b1,
44167	,"B",
16649	top'
29022	getTvfStream()
28872	consumer.finishDocument();
18926	BAR",
48113	(closeDirSrc)
57009	top,
23852	PruneByAge(double
28311	top.
4247	q=NumericRangeQuery.newIntRange("int",
41622	(FST.targetHasArcs(arc))
39134	termArrays.add(terms);
57431	thisarr
43407	bytes[bytePos++];
55435	assertTrue(fields
60623	"\1\137\4\0\2\137\150\0\1\u0101\2\266\1\u0107\27\266"+
36913	topN
8337	tool
42065	numComparators;
6771	took
36907	it..?
16940	deleteddocsref
19170	ØØØ
37469	assertEquals("in
40167	top;
24942	teststringsort
30820	it...
28264	involves
24949	topn
15545	(src.normGen
41974	station
20597	savedstreams
68096	bits",
26689	Frees
55116	sub).getSegmentInfo());
52563	TermQuerys.
16303	reqB(String
34028	involved
52477	lowerprecnumeric
6761	for).
16288	b);
19396	FieldCacheDocIdSet(reader)
52931	(UNI_SUR_HIGH_START
32817	testrandombinaryroundtrip
37499	"foobar",
25689	InsanityType(final
46805	inputText.append(foldings[n]);
10227	"\150\0\1\376\6\264\1\u0103\7\264\1\u0103\13\264\1\141"+
37886	HashMap}.
42263	assertEquals("Copied
31949	FloatParser(){
20785	"foobar")
26090	FieldValueHitQueue.create(sort.fields,
64263	Type#BYTE},
23627	testApplyDeletesOnFlush()
48137	NearSpansOrdered
57415	endword
56317	(compare(mid,
2230	mergepolicy
31921	DEFAULT_FLOAT_PARSER;
59146	"\2\ud350\2\ud3f3\2\ud496\2\ud539\2\ud5dc\2\u0fd7\2\ud67f\2\ud722"+
30325	TwoPhaseCommitImpl(false,
4694	Skip
11391	"\2\0\1\u04ad\15\0\1\u04ad\6\0\12\u04af\1\u04ae\13\0"+
35556	tot8
16335	int2str
28676	assertEquals("if
26947	KANA
56048	"PositiveIntOutputs(doShare="
34065	tord
6059	assertEquals("hi
36077	more:
54753	intermittent
27961	"\u0031\u0027\u0300",
21191	(termNumber
24256	SortField.SHORT),
52892	NEGLIGENCE
53793	fly,
34418	IllegalArgumentException("ramBufferSize
63148	savedTerms;
55137	termDocs1
55139	termDocs2
60962	"\1\352\12\232\175\0\1\351\31\232\1\u04e9\1\352\12\232"+
29336	it.*/
28572	refill();
24988	testemptyfieldsort
53010	Convert
26555	(terms.next()
37783	termDocs;
56793	generationfromsegmentsfilename
52634	assertFalse(mp.useCompoundFile(null,
51835	message("startCommit():
20134	("Failure
545	org.apache.lucene.util._TestUtil;
67764	updated!
4181	(1+count)*distance+startOffset,
25875	commits}
29776	"\1\65\1\0\1\26\2\0\1\25\13\0\1\66\15\0"+
25891	commits.
55878	testdeletesnumdocs
5980	bitpos
1759	binary
29016	commits,
65729	deletecommits
1696	todo
1471	org.junit.BeforeClass;
65568	commits:
78	express
40116	commits;
37653	r.nextInt(docs.size());
53822	endless
62472	lastScoredDoc
57768	System.currentTimeMillis()+((long)
25916	commits)
10217	"\31\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
16255	s[i]);
15645	LOCKLESS
10487	"\13\0\1\u0122\160\0\1\u0163\4\u0196\2\0\1\u0196\15\0"+
24851	docValues.add(s);
40714	ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);
1464	java.util.Collections;
64282	un_tokenized
21209	FSDir
36696	Address
62868	scanner.yychar();
58715	Term("foo","val"));
776	this.fieldName
25933	FieldComparator}s.
26645	NeverPeeksLookaheadTokenFilter(TokenStream
62190	b";
4627	getters.add("getMergeScheduler");
58062	docFreeList.length;
4803	writer.setMergedSegmentWarmer(new
41762	FST.Arc<Pair<Long,Long>>()),
66417	(tokenText[tokenPos]
2011	scratchArc.label
66887	newPair
43660	b",
7571	unprintable
3236	exceeds
33059	flagsAtt.setFlags(12345);
65182	lastInput.ints[pos1]
59566	"\5\0\1\100\2\0\3\100\7\0\1\100\1\0\2\100"+
4665	m.getReturnType());
53076	source.substring(offset,
7256	EMPTY_TOPDOCS
37787	reader.termDocs(null);
61402	"\1\u034d\26\u02e2\1\u066d\3\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
20561	KeywordTokenizer(reader);
9776	"\2\0\1\57\4\0\1\60\14\0\1\61\4\0\1\62"+
64260	this.typeName
3542	MergeException(String
18352	assertEquals("d4
21253	assertEqualArrays(msg
50003	<code>name</code>
5475	jjnextstates
58010	docFreeList.length)
56226	"+clazz.getName()+":
4464	fieldnotrie
18523	Õ£ÖÕ¾Õ¥Õ¬
3707	termAtt.setLength(upto);
26885	conforming
32285	dir1.getLockFactory().getLockPrefix();
36989	nodeArcCount
53170	bytesRef.offset,
2503	FullSimilarity
54376	tok)
34334	particular,
19852	"ID7"
59172	"\3\u571d\3\u57c0\3\u5863\3\u5906\3\u59a9\3\u5a4c\3\u5aef\3\u5b92"+
54373	tok,
6039	assertEquals(content.length(),
58049	perDoc.fieldPointers[i];
4475	multitermquery
49851	rangequerys
21995	termsOut.maxSkipLevels,
35003	(scorer
26828	(1+bufferUpto
67291	withReopen)
33791	'end',
31637	binary_to_compress
41845	FST.Arc<Pair<Long,Long>>());
56493	top().doc()
35004	Scorer(similarity,
28867	reset(true);
42528	bufferedindexoutput
32024	maintain
19393	(negate)
22983	testmergesort
43413	flow
10179	"\1\171\41\0\1\25\2\64\2\0\2\172\1\66\1\0"+
19803	flot
43821	assertTermEquals("oe",
20841	HashMap<String,Analyzer>();
2397	exactly
55780	writer.maybeMerge();
52968	(utf32
21359	test.close();
65923	t:one",
51327	"prepareCommit");
34317	getIndexDeletionPolicy()
23346	unindexed
56732	rollback:
4394	ascending,
38024	ascending)
7016	DataType.INT)
27781	"\u0061\u0027\u0308\u0061\u0027",
6866	DataType.INT,
26305	decoded
23453	((double)diskFree)
4945	switch(curChar)
33395	Performs
35216	lastSkipDoc
17706	SCORING_BOOLEAN_QUERY_REWRITE
31754	System.err.println("reason,
51642	readerPool.drop(result.allDeleted);
56399	~0x7F)
51182	itself");
33297	assertTrue("Did
54979	addwaitinglistener
10081	"\1\0\1\25\4\0\1\25\2\0\2\25\1\0\1\25"+
56719	assertTrue(postCount
24397	FieldCache.DoubleParser(){
58574	assertFalse("in
8	Apache
34336	processed.
9051	pos2])
28719	"/Computers"));
16912	worked
15010	testsloppyphrasequery2
50987	MergePolicy}.
9905	"\53\0\1\66\36\0\1\32\20\0\2\32\25\0\2\32"+
53048	out[outUpto++]
15234	FaultyIndexInput(fsDir.openInput(name));
26480	decodes
31622	testcreatenocfs
18678	à¦­à¦¾à¦·à¦¾à¦¯à¦¼
66949	outputs2.write(output.output2,
33164	preserved.",
31034	siMerge2
31037	siMerge3
40445	lucene_current
24001	c",
51950	processed,
47929	CommitFailException(Throwable
17938	farsiIndex);
32874	TermVectorsPostingsArray
57591	reuse);
31400	"took":
17653	BooleanQuery.TooManyClauses}
31018	setOpenMode(OpenMode.CREATE).
65911	{Occur.SHOULD,
62191	c";
62905	artificially
28535	binaryfldcompressedtest
27467	"\u0030\u0061\u0027",
55393	TermQuery(idTerm.createTerm(idString)));
31342	aaa",
40571	toIntsRefUTF32(s,
32449	testlucenemmap
39203	idfExpl.getValue()
65720	retrying
47911	tpc;
3584	(currently
17060	this.position
32330	lockPrefixSet;
62230	assertEquals(DocIdSetIterator.NO_MORE_DOCS,
60048	"\1\u019d\13\0\1\u0126\161\0\4\u01dd\2\0\1\u01dd\15\0"+
67720	termLength()
38054	j<32;
47913	tpc,
38397	.setMaxBufferedDocs(2));
30482	currentSet
20806	public...?
33568	llllllll,5,7
30971	testzeroresults
46213	,"1.",
34840	this.prevStartOffset
11570	"\12\u052d\1\u0518\175\0\4\u052e\2\0\1\u052e\15\0\1\u052e"+
18070	query.rewrite(reader);
59057	rewrite(final
34212	Denotes
31084	reader.termPositions(tis.term());
57433	ensurecapacitywords
34858	posIncrAtt.setPositionIncrement(1);
43184	values[slot];
51836	(pendingCommitChangeCount
10253	"\4\0\1\74\2\0\1\75\41\0\1\25\2\26\2\0"+
20944	#resizeTermBuffer(int)}
35921	(done)
65986	LUCENE-1213:
66410	postingEquals(final
59126	"\2\u6d70\2\u6e13\2\u6eb6\2\u6f59\2\u6ffc\2\u709f\2\u7142\2\u71e5"+
25476	indirect
30368	tpcs
35262	PayloadLength
64509	SpanNotQuery.this.toString()
43798	assertTermEquals("LA",
21217	os.writeByte(b);
18877	testApostrophesSA()
55511	assertFalse("f1
33172	this.flags
64846	seekstatus
4506	inttoprefixcoded
7589	'\f':
16941	testsegmentreaderclosereferencing
49714	token_source.getNextToken();
67012	o.close();
26098	OutOfOrderOneComparatorScoringMaxScoreCollector(queue,
65126	FSTEnum,
42996	#release(Object)
19844	aSd
11228	"\12\u03e0\175\0\1\u042c\33\0\12\u042d\175\0\1\u042c\33\0"+
22094	parseInt(chars,
67468	Set<IndexReader>
35809	rdOut.close();
31397	"22")),
29190	prevPosition
23995	"1000000000",
26825	docWriter.recycleCharBlocks(buffers,
59364	"\2\0\1\25\3\0\1\25\177\0\2\25\6\0\1\25"+
64571	(bufferLength-bufferPosition)){
16507	lessThan(T
43627	"CachingSpanFilter("+filter+")";
49765	(jj_endpos
36595	follow.nextFinalOutput;
34878	dumbqueryparser
35580	tot;
37998	long[]{
31601	iwc);
43191	values[slot]
37668	testphrasequery
14973	q1.add(t3);
63876	testWhitespaceTokenizerBWCompat()
28029	"\u0031\u002C\u0031\u002E\u2060",
1062	IndexWriter(startDir,
14583	grown
21805	fields.add(field);
17357	it.nextDoc())
39401	CountingStream(tp.freqStream);
65955	t:one*)
4317	outside
67670	checknormsclosed
67323	dir5.close();
17819	gettoplevelquery
15520	this.hasSingleNormFile
66810	ArrayUtil.quickSort(queryTerms);
20976	grows
57934	isCFSFile(String
30639	"\4\0\1\34\1\0\1\34\2\0\2\34\1\0\3\34"+
2934	slow_down
27869	"\u0061\u002C\u0308\u0300",
67698	termLength);
59790	"\2\0\1\25\1\u0141\24\36\1\u014d\5\36\1\142\12\143"+
22703	FieldCache#getShorts(IndexReader,String)}.
27198	"\u3031\u0308\u00AD"
1703	Copyright
17129	CompoundFileReader
55937	maybePurge()
37410	//Items
52736	1e-5f;
48254	possibleMatchPayloads
38329	flip
30581	"\2\26\5\0\1\25\2\0\1\25\1\26\4\0\1\25"+
530	java.io.StringReader;
38619	testLock()
59129	"\2\u7cb8\2\u7d5b\2\u7dfe\2\u7ea1\2\u7f44\2\u7fe7\2\u808a\2\u812d"+
57078	long[].
21583	Term(searchTerm.field(),
55036	seed++;
37764	PositiveScoresOnlyCollector
14680	FieldComparatorSource
37367	out.writeInt(CODEC_MAGIC);
67507	readerToClose.close();
39872	hasChanges
63212	(those
56786	"create":
18140	"boost"));
3250	ArrayList<int[]>();
30805	(read
22550	toString().split(","))
42420	b2)
15497	afterwards
44428	"Ãª"
66291	postingsArray;
32522	MAX_RANDOM_BINARY_LENGTH;
66084	assertEquals("+(f2:bla
65406	dir.fileLength(l[i])
48692	StringHelper.getVersionComparator
30967	max_score
58183	SnapshotDeletionPolicy#snapshot(String)
50283	feature,
22521	"term",
15413	outage
67669	b30
59056	CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;
50373	readerMap.get(sr.getSegmentInfo())
22352	toIndex
37699	HIGH_PRIORITY
39880	doOpenIfChanged(IndexWriter
40526	feature.
9668	"\1\2\1\17\1\20\3\2\1\21\1\2\1\22\2\2"+
42261	att.getClass().newInstance();
18229	SCORE_COMP_THRESH
49038	"getFieldQuery",
56224	(declaringClass
52113	deletequery
56907	"\4\0\1\30\1\31\7\0\1\32\5\0\1\33\7\0"+
19284	b2b
9840	"\5\0\1\25\2\0\3\25\7\0\1\25\1\0\2\25"+
25089	transitive?
28035	"\u0031\u002E\u2060\n",
63055	"<PREFIXTERM>",
6897	(!this.field.equals(field))
49212	REQUIRED
51009	MergePolicy.MergeAbortedException}.
47772	sixteen
55067	w.setMaxFieldLength(10000);
36525	maxBytesPerArc;
40098	(fileName.startsWith(IndexFileNames.SEGMENTS)
24402	FieldCache.ByteParser(){
27064	"\r\u0061\u0027\u2060",
59920	"\1\66\2\0\1\25\1\136\1\234\1\235\1\236\1\237"+
4579	IndexReaderWarmer
17340	group
15759	setDelCount(int
66476	TermsHash)
66125	expectedres
1005	TestIndexWriter...
56830	ClassicTokenizerImpl
10032	"\2\0\1\25\1\0\2\25\10\0\2\25\2\0\2\25"+
20825	analyzerPerField.put("firstname",
64912	Runnable
34144	i=t.length-1;
21556	assertsameseekbehavior
28806	(level
37838	super(Version.LUCENE_30,
57923	name.lastIndexOf('.');
6999	Long.MAX_VALUE
20765	setdata
22276	shrink(int[][]
15350	fieldsreader
18268	d2.add(newField("dek",
50904	features
60842	"\12\u048f\1\0\2\u021e\1\u027f\3\u021e\1\u0220\1\u016c\1\u016d"+
52699	"ID";
33834	i>=0;
49347	rangeCollator);
1947	List<Fieldable>
36336	getFirstArc(arc);
24935	ascendtesters
64022	long[COUNT];
38142	Iterable<Long>
1260	"good"));
23519	cleaned
21743	runTest("TestNRTThreads");
38909	fighters
55867	testmergewarmer
35056	IndexOutput}
47922	PrepareCommitFailException(Throwable
8016	cleaner
64916	t=new
60203	"\5\0\2\u01ce\4\0\1\u01ce\151\0\1\u01ce\32\u01cf\1\u0211"+
15779	output.writeString(version);
50217	changeCount;
10767	"\6\230\1\u0291\1\u0292\22\230\1\347\12\230\175\0\1\346"+
55588	assertTrue(dirReader.isCurrent());
24271	SortField(
66765	SortField.
23573	assertTrue("flush
44220	,"C",
25565	rf.toString(),
34664	(function
26992	(Format_FE)
20876	perfieldanalyzerwrapper
64937	System.out.println("wrong
25465	CreationPlaceholder
59901	"\6\232\1\u016f\4\232\1\u016f\4\232\2\u016f\1\352\12\232"+
59653	"\1\137\12\271\1\0\1\137\1\144\1\137\1\0\2\270"+
11528	"\160\0\1\u0386\4\u0510\2\0\1\u0510\15\0\1\u0510\6\0"+
19577	charSet.newDecoder()
25823	SpanOrQuery(getClauses()).getSpans(reader);
57704	assertTrue("reader
43113	boosted","str_s",
18650	"Ü«Ü¡Ü",
11100	"\4\0\2\136\150\0\1\376\32\264\1\141\4\264\1\u03cd"+
9548	"\1\u3d16\1\u3db9\1\u3e5c\1\u3eff\1\u3fa2\1\u4045\1\u40e8\1\u418b"+
60539	"\1\142\3\266\1\u0396\6\266\1\0\3\137\1\0\2\137"+
41310	tStart
64954	traversal.
14553	tr14
16713	readonly
28720	ConstantScoreQuery(filter);
66709	data).
57637	offsets[0])
50318	#getReader()}.
33406	IndexOutput,
42866	super.equals(obj)
5699	obj.getClass())
10238	"\4\0\2\136\150\0\1\376\2\u0103\1\264\1\u0103\3\264"+
68163	freeBeforePos);
33998	gatherRptGroups(LinkedHashMap<Term,Integer>
44884	DIAGONAL
65238	freezeTail(0);
53673	odd);
60224	"\13\0\1\u0221\13\0\1\70\1\0\1\51\1\0\1\71"+
53564	Set<Term>
52466	posIncrAtt.setPositionIncrement((shift
60494	"\1\u0375\24\232\1\352\12\232\175\0\1\351\10\232\1\u0376"+
55283	tpv1
66585	postingequals
55284	tpv2
3484	setPause(boolean
28465	testappendchars
24114	odd))
24800	a);
8176	curBuf.position();
55551	previous,
52308	PayloadTokenStream
36496	outputs.outputToString(arc.output));
24291	SortField.DOUBLE
56350	lower(pivot,
35190	uniquetermcount
9983	"\1\310\1\311\1\312\1\313\1\314\1\315\1\316\1\317"+
59897	"\1\232\10\u016f\1\352\12\232\175\0\1\351\1\232\2\u016f"+
24725	m1.get(key);
20387	org.apache.lucene.document.FieldSelectorResult#NO_LOAD}
4804	MyWarmer());
11924	Error(message);
10632	"\1\0\1\u0208\161\0\46\u01c8\1\u01ca\2\u01c8\1\u01cb\3\u01c8"+
30697	"\4\64\2\0\1\64\42\0\1\65\11\0\3\25\5\0"+
55030	verifyEquals(dir2,
60754	"\175\0\1\351\15\232\1\u044f\14\232\1\352\12\232\175\0"+
23289	readerb
28333	(rdoc
56222	declaringClass
7703	concern
29357	ByteBlockPool.levelSizeArray[0];
34504	sb.append("maxBufferedDeleteTerms=").append(maxBufferedDeleteTerms).append("\n");
60058	"\1\u01e6\1\u01e5\2\u01a3\2\u01e5\1\u01a3\1\u01e5\1\u01a3\175\0"+
50271	#commit}.
33763	Similarly,
4671	IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL);
4255	TestNumericUtils.FLOAT_NANs.length,
59707	"\1\u0107\1\266\6\u0107\1\u0119\1\266\2\u0107\2\266\2\u0107"+
4209	testLeftOpenRange(int
42909	newTermBuffer
67277	LUCENE-1228:
40548	org.apache.lucene.util.fst.FST.Arc;
53516	HitQueue(nDocs,
34829	multiToken--;
24163	52);
23086	readerB
1483	reader;
62883	scanner.yyreset(reader);
21012	reader:
29848	"\2\0\2\27\15\0\1\27\132\0\1\27\153\0\2\27"+
67434	reader5
57814	reader3
67430	reader4
55029	verifyEquals(dir1,
182	reader2
167	reader1
67344	reader0
21725	smokeTestSearcher(fixedSearcher);
11854	reader.
4539	checkhashequals
23570	startFlushCount)
274	reader,
804	reader)
27120	"\u000B\u0001",
50118	called.</p>
21651	(sEnd
15244	deleteFile(String
8317	hasremaining
66164	bug",
9424	"\2\67\6\66\10\66\2\101\7\66\36\101\4\66\102\101\15\116\1\77"+
19953	contains(Object
18648	"ÜÜ Ü«Ü¢ÌÜ",
279	merge
16635	lessThan(heap[k],
29704	"\17\0\1\25\10\0\1\25\24\0\1\25\1\0\1\25"+
50806	close(boolean
37056	writer.setPosWrite(arcStartPos
2393	2*seventyHash);
49573	(prefix)
56669	dir.deleteFile(IndexFileNames.SEGMENTS_GEN);
54390	sub-explanations
22106	chars[offset
9677	"\122\0\1\25\1\0\1\25\1\0\2\25\1\0\3\25"+
51730	merge.readerClones.add(clone);
10063	"\1\0\1\25\5\0\1\25\2\66\5\0\1\25\3\0"+
59410	"\10\0\1\26\2\25\2\0\1\115\6\0\1\25\122\0"+
22000	termsWriter);
42905	newTerm
31155	TestBackwardsCompatibility
58351	astop
31494	asString(String[]
9366	"\4\132\2\0\51\132\1\0\4\132\2\0\41\132\1\0\4\132\2\0"+
14855	StringComparator
5468	x8000000l
51240	abortable
65371	validoutput
21093	replacement
16455	testStaticRead()
55045	sameFieldOrder="
53874	testCodePointAtCharArrayIntInt()
11765	http://www.unicode.org/reports/tr14/#SA
36068	testBoolean2()
19595	InputStream
11588	"\175\0\4\u0541\2\0\1\u0541\15\0\1\u0541\6\0\12\u0541"+
28496	assertTrue(docFromReader
18793	"àºàº°àºàº²àºàº»àºàº¥àº²àº§"
11910	faulty
23978	a",
53150	(utf8[offset++]&0x3f));
28014	"\u0031\u002C\u0308\u0061\u003A",
56819	testopenpriorsnapshot
5496	x80000001
41435	BytesRef("foobar"),
5497	x80000000
36168	Added
20256	booleanquerys
43181	values[slot2]
59866	"\4\u0166\2\0\1\u0166\15\0\1\u0166\6\0\12\u0169\1\u0167"+
55660	IndexReader.open(mainDir,
10177	"\1\165\1\0\1\50\1\0\1\51\2\0\1\166\3\0"+
35670	upper=(int)(val>>32);
7883	href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038">
26982	"\u0001\u0308\u0030",
3647	release
7881	works.
30747	Java4CharacterUtils
31872	Marker
52991	ArrayUtil.grow(out,
51501	previousReader.numDeletedDocs();
35783	TestComplexExplanations
42179	att.getFlags());
55639	numIter
7670	OriginalChecksum=03df10dce345f1870429faa756473d14
67561	"field4",
54615	elemsize
35254	DocSkip,FreqSkip,ProxSkip
51493	previousReader.numDeletedDocs())
58667	testDeleteFile()
52808	Rights
10263	"\1\76\3\0\1\135\33\136\12\156\1\0\3\136\1\0"+
30894	scores[idx++]));
58743	"\udc17\udc17",
38522	reader.document(reader.maxDoc()
39514	UnicodeUtil.UTF16toUTF8(term.text,
37568	Field("palindrome",
66270	booleanquery2
40534	away
37562	query.setSlop(1000);
65235	!output.equals(NO_OUTPUT);
11631	"\6\0\12\u055b\1\u0549\175\0\4\u054d\2\0\1\u054d\15\0"+
52210	concurrentmergepolicy
7927	cleanup
24195	randInt;
67972	testDoubleMockGraphTokenFilterRandom()
17889	assertEquals("up
5226	"\53",
68164	freeBeforePos="
17485	pr.add(IndexReader.open(dir2,
42358	tps[0].freq();
53861	bounds");
2677	docText[i];
33420	main.writeByte(b);
9266	3/18/12
42057	duplicates
58774	hasIllegal;
41248	(fstSeekResult
17484	pr.add(IndexReader.open(dir1,
56085	"6",
38984	map.get(key).intValue());
58846	hasIllegal)
22788	lowerVal.toString())
66398	text2[pos2++];
50091	finallength
16792	pr1Clone.close();
6191	<code>title</code>
49866	getfuzzyprefixlength
24237	sort.setSort(SortField.FIELD_DOC);
16353	TestCharFilter
34857	posIncrAtt.setPositionIncrement(2);
55537	analyzed_no_norms
39417	assertEquals("Wrong
25440	estimate
53872	"Abc\ud801";
38956	duplicated
61389	"\1\u02e1\160\0\1\u0349\4\u0662\2\0\1\u0662\15\0\1\u0662"+
33463	minVersion
32185	lockName
18456	skipto
7512	doc.abort();
34777	direct
40059	deleter.refresh();
64550	bufferSize;
35159	numOverlap;
36380	arriving
34563	PayloadFunction}.
31996	logging/debugging.
34905	dog");
8064	bufferSize)
35180	numOverlap)
53350	bufferSize,
2190	tweaking
35165	numOverlap,
30773	bufferSize.
25580	ReaderField>(badChildren);
2557	testmultiplematchesperdoc
36738	!flag(flags,
43144	ids[i]
1422	startmergeinit
37396	x3fd76c17
21396	CompoundFileReader.CSIndexInput
56046	out.writeVLong(output);
41077	(prefix.length
56365	hit--);
63122	ts);
2768	assertTrue("greedy="+greedy+"
36180	startNode
14574	refills
59120	"\2\u4ee0\2\u4f83\2\u5026\2\u50c9\2\u516c\2\u520f\2\u52b2\2\u5355"+
705	writer.setInfoStream(System.out);
22131	(!negative)
24983	aecig
54993	nanoseconds
29173	(charBuffer.length
19047	"20that"
9294	ZZ_LEXSTATE[l]
60487	"\1\u036c\13\232\1\352\12\232\175\0\1\351\11\232\1\u036d"+
32007	#getEstimatedSize
54793	"Cannot
22092	parseInt(char[]
1884	FIELD_IS_NUMERIC_DOUBLE;
31638	gathersubreaders
19442	Fieldable[1];
21976	FormatPostingsFieldsWriter(SegmentWriteState
31282	hasTested29++;
19629	ChunkState
17406	associated
34323	getIndexCommit()
41760	FST<Pair<Long,Long>>
18927	String[]{"foo",
30200	(tiOrd
27807	"\u0061\u0027\u2060\u0308\u0041"
64631	refill.
16163	org.apache.lucene.search.spans.SpanFirstQuery;
20984	lockreleasefailedexception
42175	TestSimpleAttributeImpls
67839	testSingleNonMergeableSegment()
29388	{throw
67331	assertTrue(couple.refreshedReader
48820	posIncrAtt.setPositionIncrement(testToken.pos
23492	applyDeletes");
11183	"\11\230\1\u0409\20\230\1\347\12\230\175\0\1\346\1\u040a"+
54217	hash.clear();
67272	pr.add(IndexReader.open(dir4,
54891	removeWaitingListener(WaitingListener
10136	"\1\65\1\0\1\65\1\66\1\0\1\25\2\0\1\25"+
42665	(first
5665	testbytetofloat
17760	expanding
46517	,"(18)",
52773	field_id
63205	cachedFieldSourceEquals(other);
10168	"\12\0\1\342\17\0\1\343\21\0\1\344\2\0\1\345"+
50268	un-committed
35113	bytestocopy
67271	pr.add(IndexReader.open(dir3,
58327	sequences]
59254	"\2\0\3\32\1\0\1\32\1\0\2\32\1\0\1\32"+
37266	setposwrite
11016	"\12\u0384\1\u0385\13\0\1\u0325\160\0\1\u0386\4\u0384\2\0"+
40293	getlastsegmentinfos
41187	CodecProvider.getDefault().setDefaultFieldCodec("Standard");
66625	LuceneTestCase.assumeTrue(pt.toString(),
22076	ArrayUtil
37776	(document
20873	"PerFieldAnalyzerWrapper("
48767	testTerms.length;
50146	#rollback()},
20010	Default
50666	#setMaxMergeDocs
54159	.setMergePolicy(newLogMergePolicy(false,
36034	assertScoreEquals(bq1,
10246	"\1\77\1\0\1\26\2\0\1\25\1\u0117\32\36\1\141"+
51808	wait(),
7841	org.apache.lucene.store;
26589	assertEquals(reader.hasNorms(f.name()),
53684	all.totalHits)
39853	RuntimeException(ex);
55104	d1.add(fields.get(i));
67306	assertNotNull(prevItereationDoc);
61464	"\1\u0697\1\u02e2\175\0\1\u034d\1\u02e2\1\u042f\30\u02e2\1\u034e"+
27150	"\u000B\u0061\u0027",
30182	term.compareTo(enumerator.prev())>
81	language
38766	tp1.nextPosition(),
20638	fdx,fdt
36099	org.apache.lucene.util.fst.Builder.UnCompiledNode;
27094	"\n\u0030",
8293	getcleanermethod
8122	bufNr
65015	sequences.
42405	generateRandomData(data);
47976	"36")),
25060	idhfgjeabc
22721	newIntRange(String
15993	allThreads;
30534	"\142\0\2\31\16\0\1\104\15\0\1\105\14\0\1\106"+
64998	sequences)
51968	wait();
26216	sequences'
41114	current.input,
20598	reusabletokenstream
12055	zz_action_packed_0
17922	smallest",
54243	hash.compact();
68008	left.setMaxTokenLength(255);
23210	1e-6);
10775	"\1\376\25\264\1\u029c\4\264\1\141\12\264\1\0\3\136"+
60027	"\1\266\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
35966	A,B,<empty
20888	addanalyzer
55593	IW.addIndexes
60583	"\13\0\1\u0126\160\0\1\u0168\4\u03d3\2\0\1\u03d3\15\0"+
60467	"\161\0\4\u0355\2\0\1\u0355\15\0\1\u0355\6\0\1\u0356"+
62186	TimeUnit.SECONDS);
11122	"\6\0\12\u03dc\1\u03da\13\0\1\u0325\160\0\1\u0386\4\u03d9"+
57065	wlen;
41110	enum");
8348	main(String[]
27241	"\u0041\u002C",
25021	assertsamevalues
42955	delegate.hashCode()
59148	"\2\udcdd\2\udd80\2\ude23\2\udec6\2\udf69\2\ue00c\2\ue0af\2\ue152"+
65308	replaceLast(int
67668	a11
57196	wlen)
57134	(bits[word]
49980	<li>String
16855	clonedReader;
5891	size(valueCount,
25932	SortField}
40147	reader.terms(t);
48029	contract:
67989	startoff
32585	binaryDump(binary,
22817	parser.hashCode()
42097	SortFields
37862	contract,
38108	+0.0f,
38621	world!
38769	assertTrue(c.equals(r.getIndexCommit()));
34483	setReaderTermsIndexDivisor(int
10361	"\4\0\2\136\2\0\1\207\3\0\1\210\2\0\1\211"+
6260	((MultiPhraseQuery)
26643	NeverPeeksLookaheadTokenFilter
10048	"\1\25\2\0\1\25\3\0\1\25\177\0\2\65\6\0"+
66759	Searcher#search()}without
62745	topHits.scoreDocs[hitIDX];
21207	TestCompoundFile
17908	Collator.getInstance(Locale.ENGLISH);
33863	my"~2</b>
28503	testCompressionTools()
29233	(storingOffsets)
33084	assertFalse("No
34054	(HashSet<PhrasePositions>
41688	rootNode.arcs[1].nextFinalOutput
7707	df10dce345f1870429faa756473d14
6722	<li>Ideal
7835	DocIdBitSet(new
53322	_o,
67936	mal-formed:
42613	info.getDoc());
4989	jjnewStateCnt
6313	qp.parse(queries[i]);
51934	deletion.</p>
8758	atLeast(1000);
9485	"\0\u0518\0\u05bb\0\u065e\0\u0701\0\u07a4\0\u0847\0\u08ea\0\u098d"+
53166	CharsRef)
19162	ØØØØØ
30698	"\1\65\1\0\2\65\4\0\1\25\5\0\1\25\3\0"+
38015	i<vals.length;
15623	normGen[i]
60865	"\32\232\1\352\4\232\1\u04a4\5\232\175\0\1\351\32\232"+
44334	,"DZ",
524	setpreventdoublewrite
33086	it.hasNext());
36968	fst.arcWithOutputCount
48593	fieldState.position++;
37884	WeakIdentityMap}
37853	java.util.IdentityHashMap}.
38674	index2.hasDeletions());
38968	key;
7700	lexicalerror
34762	foo\"~99
39822	(hasChanges)
40998	upto--;
28252	DisjunctionMaxScorer
5736	bit
22482	key,
38511	bin
3118	big
31855	key)
36289	messy
35634	pop_xor(long
55233	d1,
49989	directoryOffset;
62752	shardHits
42205	TypeAttributeImpl();
34048	pp.terms)
59209	"\4\u1395\4\u1438\4\u14db\4\u157e\4\u1621\4\u16c4\4\u1767\4\u180a"+
53860	fail("array
4724	Similarity
25127	q).clauses().size());
46999	d06
47037	d07
18680	à¦°à¦¯à¦¼à§à¦à§à¥¤",
46976	d04
46998	d05
34061	tpPos(PhrasePositions
47066	d08
47193	d09
56884	"\1\0\12\12\1\0\15\12\1\0\5\12\1\0\1\12\1\0\2\12"+
46943	d02
46954	d03
46875	d00
66141	blo
46928	d01
16337	keys
36758	form.
29312	ordinal
17785	form,
20878	firstname
66140	bla
20568	(SavedStreams)getPreviousTokenStream();
6878	Float#NaN}
8660	accept_all_filter
39033	keyc
62181	form:
42001	tmp3
15578	normGen[j]
27289	"\u003A\u0308\r",
1028	writer.getConfig().getMergeScheduler()).sync();
23747	SearcherTracker(IndexSearcher
34056	tmp)
47549	d1c
41492	17));
47459	d1a
62391	bob
47519	d1b
29078	//System.out.println("TVX
25176	512;
32308	numIteration;
65796	bq,
47661	d22
47614	d21
47588	d20
3038	512K
35572	foursA=twos&twosA;
18418	d2:
53693	paged.scoreDocs[paged.scoreDocs.length
49772	jj_expentries.iterator();
22886	payBytes
20083	weights.add(c.getQuery().createWeight(searcher));
47210	d0a
51365	finishCommit();
40612	IntsRef[strings2.length];
47221	d0b
47253	d0c
63364	0x76521,
53777	NullPointerException("Given
22642	this.lowerVal
65210	commonOutputPrefix;
3096	float[128];
19462	statement.
3771	<i>int</i>
47291	d0d
47316	d0e
49828	bnf
47343	d0f
55234	d2)
28304	Math.max(scoreMax,
63937	bmp
47412	d14
1309	gotten
31951	NUMERIC_UTILS_FLOAT_PARSER;
32311	numIteration,
47344	d10
59401	"\12\26\2\0\1\100\36\0\1\27\20\0\2\27\25\0"+
18420	d1:
47458	d19
3176	(curbase
47373	d16
47411	d15
47415	d18
47374	d17
8432	obtained
46867	ogonek
59911	"\2\u016f\1\232\1\u016f\3\232\2\u016f\2\232\1\u016f\4\232"+
23817	decRef
61274	"\1\u034d\1\u02e2\1\u060a\30\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
62951	files2))
8222	Boolean.TRUE);
64924	System.currentTimeMillis()-start;
67693	MIN_BUFFER_SIZE
50534	<code>conf</code>.
34986	accessible.
47882	expectedoutputtokens
59258	"\5\0\4\32\1\0\2\32\1\0\5\32\1\0\5\32"+
39521	statements
40560	br;
18392	d4:
56746	KeepLastNDeletionPolicy(N);
26186	bpv
58236	BytesRef(CharSequence
27048	"\r\u0027",
58203	snapshotting
37215	bpa
29585	"\1\132\7\133\1\0\3\133\1\0\4\133\7\0\2\133\7\0\1\132"+
32972	toArray,
59930	"\1\u016c\2\u0143\1\u0186\2\u0143\1\u0145\2\0\1\u016c\1\u0143"+
7376	topdocscollector
27368	"\u002C\u0031\u0027",
40591	br,
55604	r1.maxDoc());
32514	IndexerThread(this,
27923	"\u0031\u003A\u0061\u002C",
26939	"\u0001\u0308\n",
36028	bq2
17476	bq1
17674	CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;
32976	toArray;
39241	boq
64403	bos
68010	numIterations
53137	CharsRef}
37192	getemptyoutput
18407	d3:
41014	assertFalse(isDone);
16302	bq;
18326	h[i].score,
49068	tme)
55348	char[nTokens*2];
56594	nowTimestamp;
54972	searcher.getIndexReader().isCurrent();
5067	jjCheckNAddTwoStates(31,
21534	IndexInput[FILE_COUNT];
42382	singleTerm,
53574	cacheSim.createNormalizedWeight(rewrittenQuery);
133	bbb
18437	h[i].score;
22179	overhead
6294	(field2:query2)
34435	getMaxBufferedDocs()
23713	(searcher
1672	segmentfilename
50196	DEFAULT_MAX_FIELD_LENGTH
53364	32bit
62949	files2);
32689	encodedLen2));
58017	docFreeList[--freeCount];
22444	Cloneable,
7343	bad
34295	Cloneable.
15376	lazy_field_binary_bytes
16326	makequery
37520	booleanQuery,searcher);
39091	baz
2675	docText.length;
33563	//(out-2)
25635	all.subList(1,
7224	bar
10220	"\1\136\4\0\2\136\150\0\1\376\6\u0103\1\264\5\u0103"+
58297	aByte
21394	isCSIndexInputOpen(IndexInput
64026	bdo
22110	NumberFormatException("can't
33562	//(out-1)
42906	prototype,
30643	"\10\0\1\52\1\0\2\25\1\0\1\52\10\0\1\25"+
46781	,"@",
37922	nextIsSet
30944	4).scoreDocs.length);
34108	(j<bb.size())
58491	"\uD800EfG",
19962	map.keySet().iterator();
8512	Field("f4",
42896	prototype)
11755	kept
56777	be.
53129	codePoints.length
49835	conj_or
21443	be1
21454	be2
48953	colon,
28420	bcd
2460	CheckHits.checkHitCollector(random,
4488	testrightopenrange_2bit
4507	ttopdocs
19657	postings.length-1;
23461	force
56251	be:
52293	processors)
48213	subSpansByDoc[i].doc()
66603	aabaa
64469	buffer.append(include.toString(field));
15987	(name.equals("startCommit"))
59409	"\11\0\1\25\11\0\2\25\2\115\4\0\2\25\3\115"+
28346	--numScorers;
64421	compressString(String
39231	fieldExpl.setValue(tfExplanation.getValue()
18461	testsimpleequalscores3
18458	testsimpleequalscores1
17558	single.doc(singleHits[i].doc);
18460	testsimpleequalscores2
35358	soretype
18764	"Î¼Îµ",
31934	FieldCache.class.getName()+".DEFAULT_DOUBLE_PARSER";
52291	processors;
24886	(String)
9613	"\2\u878b\2\u882e\2\u88d1\2\u8974\2\u8a17\2\u8aba\2\u8b5d\2\u8c00"+
56432	w.flush(true,
40540	isanonymousclass
52524	assertEquals("field2:jumps",
27950	"\u0031\u0027\u0308\u0027",
5075	startsAt);
57	required
63957	assertFalse("TestAnalyzer4
7740	"f"+(NUM_FIELDS/3);
63953	assertFalse("TestAnalyzer3
171	opened",
25438	estimateRam;
41533	assertEquals((exists
45136	"Ç¹"
49044	VirtualMethod.compareImplementationDistance(getClass(),
60804	"\13\0\1\u033c\160\0\1\u0475\33\0\12\u0415\175\0\1\u0475"+
27070	"\r\u0031\u0027",
32320	obtains,
57841	testpreparecommit
3790	requires
41448	"random",
16020	d);
53901	buffer.getOffset(),
22857	getlowerval
37075	//System.out.println("TOT
21349	51);
20672	fields_index_extension
67799	growtermbuffer
16762	dir2.close();
5108	jjCheckNAddTwoStates(33,
41696	dir.openInput("fst");
55657	addDirThreads.close(true);
66474	consumer.addTerm(termID);
22347	quick
15695	(!preLockless)
49077	tmc)
50093	startptr
15085	loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);
64614	super.readVInt();
39247	!field.equals(f))
37762	usecompoundfiles
40729	while(value
15570	docStoreSegment
358	Document
6261	quoted)
49234	quoted,
32613	char[IndexableBinaryStringTools.getEncodedLength(originalBuf2)];
58613	testsinglehighsurrogatebwcomapt
50705	(LogDocMergePolicy)
23809	version="
40065	deleter.checkpoint(segmentInfos,
54546	a1.clone();
52117	newsegmentname
11986	HIRAGANA_TYPE;
6134	_TestUtil.assertAttributeReflection(t,
1479	SegmentTermEnum
8187	bi;
1086	List<Throwable>
59766	"\1\u0143\1\u0144\1\u0145\3\0\1\137\4\0\2\137\2\0"+
60327	"\12\u0277\1\0\1\u0219\1\u0278\1\u0219\1\0\2\u02e5\1\u0275"+
25459	FieldCacheSanityChecker();
10395	"\1\347\12\230\175\0\1\346\4\230\2\u016a\2\230\1\u016a"+
23081	mSearcher2.close();
49330	newBooleanQuery(boolean
32084	recycleByteBlocks(List<byte[]>
48627	(posIncr
31895	DoubleParser
25276	q="+q+"
65962	c])
50500	IndexWriterConfig#setTermIndexInterval(int)}
8145	curBuf
17437	segmenttermvector
58208	<p><b>Important
56044	valid(prefix);
2184	IndexWriter}
8924	filtereddocidsetiterator
31974	Computes
23448	.setMaxBufferedDeleteTerms(1000)
32194	IndexWriters
52859	FITNESS
50956	"updateDocument");
62455	Similarity#coord(int,
32074	Class
39233	result.addDetail(fieldExpl);
5009	jjCheckNAddTwoStates(27,
63701	x8321
7356	ScoreDoc[howMany];
20333	collection");
57315	(this.wlen
25644	fieldName.hashCode();
39087	assertTrue(cm.toString().contains(",
58968	mmapDir.openInput("bytes");
50544	conf.getWriteLockTimeout();
57055	linux,
22425	comparepivot
42928	"endOffset",
57638	if(currentOff
29180	(byteBuffer.length
32821	TermVectorsTermsWriterPerField
42707	org.apache.lucene.util.AttributeReflector;
50010	this.checkAbort
35055	memory-resident
62193	e";
21480	e2.clone();
52070	format_diagnostics
18184	ConstantScoreQuery.ConstantWeight(searcher);
67420	parallelReader1.close();
34231	IndexWriter;
67399	multiReader2
57568	termInfo);
43654	e",
67393	multiReader1
3566	IndexWriter.
39667	meaninglessnames
60639	"\150\0\1\u0101\11\266\1\u0156\20\266\1\142\12\266\1\0"+
22448	clear();
35127	PayloadBoostSimilarity
1017	IndexWriter(
1342	stringreader
2536	payloadhelper
41675	node.isFinal
64646	bufer
50155	IndexWriter,
33293	if(!r.isDeleted(i))
50775	IndexWriter)
27283	"\u0041\u0308\u0031\u002C",
60236	"\1\u0126\161\0\4\u0285\2\0\1\u0285\15\0\1\u0285\6\0"+
8731	_TestUtil.randomUnicodeString(rand,
48556	this.endConsumer
19714	getSimilarity().decodeNormValue(norms[docID]);
66321	previousSize
15739	(hasSingleNormFile)
42397	b[];
45254	"á» "
25312	metal
53077	Allow
10301	"\22\36\1\141\12\142\1\65\1\136\1\143\1\136\1\0"+
43543	assertTrue(doCompare(bv,compare));
43840	%codes
15626	includeDocStores)
4121	8bit
37734	Sort(SortField.FIELD_SCORE,
2526	numseen
67008	LUCENE-1196
754	LUCENE-1198
31912	DEFAULT_INT_PARSER
57665	Overwrite
4890	setxyz
27968	"\u0031\u0027\u0308\u0061\u0027",
26616	results.length,
11711	YYINITIAL;
66438	postingsHash[hashPos];
31299	w.addIndexes(reader);
34073	Integer(1)
46415	,"10",
66247	cb)
25804	this.collectPayloads
40958	pairs.size())
18477	Arrays.fill(whitespace,
56450	clauses.*/
58397	cas
21684	cat
24159	setMergePolicy(newLogMergePolicy(97))
20601	WhitespaceTokenizer}.
39116	ArrayList<Integer>
335	can
24296	SortField.SHORT,
15624	includeDocStores}
49646	jj_2_1(int
41629	children
65867	newRandom();
62783	docStarts),
29916	"\1\25\17\0\1\25\3\0\1\25\5\0\2\25\3\0"+
60497	"\1\232\1\352\12\232\175\0\1\351\12\232\1\u037a\17\232"+
54985	getsearcher
45883	"á»¥"
14878	SortField.SHORT:
49316	cal
54509	10.0);
40956	seekCeil
9642	"\3\u1b43\3\u1be6\3\u1c89\3\u1d2c\3\u1dcf\3\u1e72\3\u1f15\3\u1fb8"+
39565	fieldInfos.fieldName(fieldNumber)
11740	NUMERIC_TYPE
41238	randomTerm
15372	reference
5087	jjCheckNAddTwoStates(29,
8841	@After,
22757	lowerVal.floatValue();
54563	ArrayUtil.insertionSort(a1);
66779	(Sort)o;
31594	predictable
40319	<code>TermScorer</code>.
7476	posincatt
20283	bs2
47811	quill
18589	Ø§ÙØ£ÙÙ
67537	fail("No
10901	"\1\u0319\5\264\1\141\12\264\1\0\3\136\1\0\2\136"+
31265	actualSize);
10139	"\2\0\1\25\1\140\1\352\31\36\1\141\12\142\1\65"+
30623	"\4\0\1\33\2\0\2\33\15\0\1\33\132\0\1\33"+
39214	phraseFreq
34930	bro
49400	char[input.length()];
9948	"\1\170\2\0\1\171\41\0\1\25\2\64\2\0\2\172"+
37371	codec)
29477	Result
9639	"\3\u0bfb\3\u0c9e\3\u0d41\3\u0de4\3\u0e87\3\u0f2a\3\u0fcd\3\u1070"+
37844	lettertokenizer
37360	codec,
47194	d62
47474	d63
47566	d64
66413	postingsArray.textStarts[termID];
47600	d65
67470	HashSet<IndexReader>());
9248	bytes_per_del_query
17948	Arabic
47327	d70
5250	jjtoToken
39588	output.writeVInt(ti.docFreq);
47475	d72
47428	d71
22108	'-';
18812	"à½à½",
56624	isCommit)
66658	testFailureAfter()
56296	quickSort(final
44126	"Ç½"
47136	d79
66415	tokenPos
66064	//int[]
42625	testspanqueryfilter
47134	d77
47530	d75
47670	d76
47476	d73
47502	d74
34685	btq
47137	d83
43565	bv2
47105	d82
33864	<li>repetitions:
47014	d81
46962	d80
43574	bv,
23743	1000000000.0;
35756	wordoffset
66464	intPool.intUpto;
23807	(tracker
25193	'meta??'
60448	"\1\u0213\163\0\1\u034d\32\u02e2\1\u034e\12\u02e2\175\0\61\u02e3"+
47306	d6f
47104	d6e
47013	d6d
46961	d6c
64582	len<bufferSize){
47587	d6b
65163	"inputs
62529	optionalScorers.size()
47544	d7a
47177	d7b
21055	failed,
39327	intupto
47431	d88
47477	d89
48693	TestVersionComparator
35654	friendly
47235	d84
47269	d85
47307	d86
47328	d87
47067	d92
1133	assertTrue("segment
29446	"new-property-1";
47015	d91
47069	d94
47068	d93
53	License
25112	TermQuery);
62926	"_1_1.f"
54702	failed.
822	failed;
7663	errorCode
1116	bug
8314	bufnr
19620	ExactPhraseScorer
7996	platform!");
32971	copyTo(ParallelPostingsArray
47430	d7d
48146	matchEnd
47196	d7c
6027	buf
47550	d7e
24820	FixedBitSet(maxDoc);
47375	d97
1136	but
47197	d96
46903	d95
1834	1.6.0_04/_05;
29556	"\1\137\7\0\55\133\1\0\1\133\1\0\2\133\1\0\2\133\1\0"+
30566	"\2\0\1\25\1\0\1\35\1\0\1\36\1\0\1\37"+
47567	d99
47601	d8c
2413	//should
6448	Java
47503	d8a
21148	resident
46900	d8f
34510	sb.append("readerPooling=").append(readerPooling).append("\n");
47634	d8d
47671	d8e
33560	0123456789
36981	node=nodeCount;node>=1;node--)
33459	version);
10478	"\1\25\1\u0190\32\36\1\141\12\u0158\1\0\1\136\1\151"+
756	MockIndexWriter2(Directory
55056	Comparator<Fieldable>()
60265	"\26\232\1\352\12\232\175\0\1\351\17\232\1\u02aa\12\232"+
4906	java.util.Locale;
8472	situations
16457	open,
2771	exceptionDoc==lastCollected);
49782	jj_lasttokens[(jj_endpos
27995	"\u0031\u002C\u003A",
1225	docCount+"",
52715	doTestBooleanQueryWithSpanQueries(IndexSearcher
67745	((String)
53656	aggregateddfs
14733	by,
60472	"\1\u0359\15\0\1\u0359\6\0\2\u035a\1\u0359\2\u035a\2\u0359"+
342	open:
14685	by.
37971	identityweakreference
31499	Field("autf8",
14741	by;
7710	org.apache.lucene.document.FieldSelectorResult;
48949	by:
42639	/Computers/Mac",
8243	bufs)
42745	href="https://issues.apache.org/jira/browse/LUCENE-969">LUCENE-969</a>
40295	createbackupsegmentinfos
48089	to.createOutput(dest);
64109	utf8Bytes.length);
46240	"Â³"
66416	for(;tokenPos<tokenTextLen;pos++,tokenPos++)
31964	NUMERIC_UTILS_DOUBLE_PARSER;
18989	String[urlList.size()]);
25203	assertEquals(expectedMatches,
50495	docWriter.setSimilarity(similarity);
23174	ramDirectory1.close();
19618	opens
20541	CollationKeyAnalyzer.
64678	!"body".equals(termEnum.term().field());
22718	(FieldCache.ShortParser)
7896	quite
65653	lastFiles.add(segmentInfos.files(directory,
41246	!"body".equals(termEnum.term().field()))
46217	"Â²"
37509	searcher.search(booleanQuery,
56550	reqDoc)
26229	indistinguishable
43157	vals)
66222	vals,
3999	attributesource
54847	#addWaitingListener}
36877	arcAndState.arc.label;
62940	assertTrue(!dir.fileExists("_3.cfs"));
6438	IOException("TEST-IO-EXCEPTION-"
5686	clear()
30487	SortedSet
41531	(exists
6232	ArrayList<BooleanClause>();
66123	teststopwordsparsing
66513	docState.maxTermPrefix
7247	NullPointerException.
10250	"\4\0\2\136\2\0\1\67\1\0\1\50\1\0\1\70"+
26015	c=0.
5331	EOFLoop
30584	"\5\0\1\26\7\0\1\26\4\0\2\26\3\0\2\26"+
21347	50);
41710	arc.nextFinalOutput.longValue());
23991	"3.4028235E38",
42903	prototype.type;
23741	margin.
58994	BytesRef(actual));
50022	NullPointerException(
59188	"\3\ua89d\3\ua940\3\ua9e3\3\uaa86\3\uab29\3\uabcc\3\uac6f\3\uad12"+
1051	FailOnlyInCommit();
35103	copyBytes(DataInput
51456	ensureValidMerge(MergePolicy.OneMerge
6871	Double.NaN}.
7808	aid
20922	repeating
67148	"_ALL_";
26245	respectively;
51070	(running)
41925	intensive
18704	Ù¾Ø¯ÛØ§Û
52366	processors.put(d,
2151	arcidx
11101	"\1\136\4\0\2\136\150\0\1\376\32\264\1\141\4\264"+
56545	reqDoc;
52516	td.seek(te.term());
49401	lastCharWasEscapeChar
6546	configuration
57254	b.wlen));
23262	contents[i]);
3454	setException(Throwable
22168	IllegalArgumentException("invalid
51601	(mergingSegments.contains(info))
48563	doInvert
55226	Arrays.sort(info2,
51879	unlocks
22844	getbytes
3537	any
40434	ann
63076	ant
52871	HOLDER
66400	c2)
4471	docidset
40143	matchingSegments
8140	buffers.length)
26497	assertTrue(DocHelper.numFields(testDoc)
1018	MockAnalyzer(random)).
61515	u6a37
84	and
29862	"\4\0\3\25\1\0\1\25\10\0\1\25\1\0\2\25"+
9335	"\1\0\26\132\1\0\7\132\1\0\2\132\1\0\5\132\2\0\1\133"+
65939	t:three)",
13026	u6a41
2163	addnew
27853	"\u0061\u002C\u0308\u3031",
8210	buffers.length;
1089	MockAnalyzer(random)))
27321	"\u003A\u0308\u0061\u002C",
2135	uncompilednode
25035	testoutoforderdocsscoringsort
52312	payload.setPayload(new
727	tokenization,
2224	newSegment)
58681	tokenization.
20856	Changing
27178	"\u3031\u0041",
62688	contentIDX=0;contentIDX<content.length;contentIDX++)
42087	Entry,
6833	IllegalArgumentException("Invalid
9866	"\2\25\123\0\1\25\13\0\1\25\21\0\14\25\2\0"+
66402	c1)
57396	amd
22787	.append((lowerVal
31377	changeIndexWithAdds(Random
3244	non-internal
27650	"\u0061\u2060\u0308\u0027",
592	500;
36828	arcAndState
54859	ReentrantLock();;
16321	alt
2684	MockAnalyzer(random));
284	all
51028	segmentsToMerge.put(merge.info,
6725	<em>(long,
63850	alg
27720	"\u0061\u003A\u0300",
43632	cachingspanfilter
12625	u6a4b
52073	finishmerges
62242	not_in_index
39762	(oldReaders
12224	u6a55
26586	i<DocHelper.fields.length;
62227	left-1);
65782	CountingHitCollector
23212	hits[1].score,
18909	5000
48893	FieldSortedTermVectorMapper(true,
54674	LockStressTest}.</p>
36382	out.writeVInt(emptyOutputBytes.length);
54560	ArrayUtil.mergeSort(a1);
61429	"\1\u034e\11\u02e2\1\u0614\175\0\1\u034d\1\u067c\31\u02e2\1\u034e"+
57535	(termInfo.docFreq
52298	PerTermPayloadProcessor
3742	name="version">You
23645	500)
19508	<tt>close()</tt>
24323	500,
66602	aba
25336	abc
6004	assertNotSame(t.termBuffer(),
42391	byte[1500];
65485	incref'd
49610	(goop2.kind
63366	0x76531,
63367	0x76532,
36707	abs
65948	assertEquals("(b:one~0.8
37993	act=NumericUtils.intToPrefixCoded(i);
42012	aab
50679	multi-valued
42013	aac
132	aaa
23500	ac)
34148	sloppyphrasescorer
56831	"\11\0\1\0\1\15\1\0\1\0\1\14\22\0\1\0\5\0\1\5"+
58922	indexOptions
9466	zzUnpackAction(ZZ_ACTION_PACKED_0,
29523	getfailures
43686	month
58984	testSeekEnd()
53937	udc1c789123
32278	fdir2
32276	fdir1
40215	current.read(docs,
3296	base+upto));
31042	sw.close();
5919	majorBitPos
52942	System.arraycopy(other.result,
52521	assertEquals("field1:the",
36807	ArcAndState(Arc<T>
47995	(;index
48747	true};
41747	pairoutputs
43993	,"A",
55764	testAfterClose()
31875	SortField#SortField(String,
32850	perThread.doc.docID
8651	addsinktokenstream
56706	assertEquals(1
16696	(reader1
10618	"\1\376\1\264\1\u01f7\30\264\1\141\12\264\1\0\3\136"+
3156	seg.end)
24740	SortField.STRING)));
38429	assertNotNull(fieldInfos.fieldInfo("keyword"));
27	additional
15081	doc.getField(DocHelper.NO_TF_KEY);
46622	SQUARE
23035	writerA.addDocument(lDoc3);
49579	Float.valueOf(fuzzySlop.image.substring(1)).floatValue();
56515	(prohibited)
28869	nextPerThread.abort();
39602	lastTermBytesLength;
38056	mask=(1
38688	fieldInfos1.size();
24438	testIntParser);
26214	java.nio.CharBuffer;
64207	LockMock();
60127	"\2\u021c\4\0\1\u021c\151\0\1\u0101\12\266\1\u0107\17\266"+
65420	(rord):
6162	testresize
36552	"BIT_TARGET_NEXT"
19069	"ä¹",
23888	age
3590	value
4984	0xfffefffffffffffeL,
38686	fieldInfos1.size(),
54861	genLock.newCondition();
32114	Size
34544	Term(prefix.field(),
42114	int[capacity];
30206	enumerator);
49912	codepointmultiplier
67132	assertEquals(tokens[count],
31183	createIndex("index.singlesegment.nocfs",
21278	assertEqualArrays(String
30233	getPosition(Term
9116	getfilenames
64077	IOException.class);
46192	"Â¹"
17909	c),
7050	next()
65513	directory.listAll();
39541	lastTermBytesLength,
27611	"\u0300\u0308\u0061\u2060",
3895	c);
24936	descendtesters
64824	next's
18534	Õ´Õ¡ÖÕ¤
28955	fieldcachesource
48050	sync(name);
67426	"field2",
60960	"\12\232\1\u0180\17\232\1\352\12\232\175\0\1\351\1\u04e7"+
127	add
15433	resides
8869	achieved
26218	8000h
39793	subReader
65166	//System.out.println("\nadd:
59692	"\2\266\1\u0107\2\266\1\u0107\6\266\1\142\12\266\1\0"+
57362	ensureCapacityWords(bits2words(numBits));
26844	charoffset
62189	docUpto=0;docUpto<numDocs;docUpto++)
61147	"\12\u02e2\175\0\1\u034d\1\u02e2\1\u0593\30\u02e2\1\u034e\12\u02e2"+
16859	SegmentReader.getOnlySegmentReader(cloneReader2);
2284	numSeen
9583	"\1\ueebb\1\uef5e\1\uf001\1\uf0a4\1\uf147\1\uf1ea\1\uf28d\1\uf330"+
10099	"\2\0\1\25\1\140\1\36\2\352\1\353\1\354\10\352"+
46119	YOGH
65944	assertEquals("(b:one~0.5
36861	ae)
56458	(SpanOrQuery)
55870	ace
11280	"\1\347\6\230\1\u01a8\3\230\175\0\1\346\30\230\1\u0459"+
24825	acc
42628	assertcontainsdocid
39773	oldReaderIndex
4534	act
1284	docCount=0;docCount<numDocs4;docCount++)
42788	PositionLengthAttribute
41555	r.terms(idTerm);
16558	NegativeArraySizeException.
9326	"\244\0\4\133\66\132\3\133\1\132\22\133\1\132\7\133\12\132\2\133"+
2248	org.apache.lucene.search.ScoreDoc;
21490	b[]
31857	useful.
5111	jjCheckNAddTwoStates(36,
5227	"\55",
56154	search.search(csrq("rand",
49284	Term[0]),position);
60323	"\1\170\3\0\1\54\2\0\1\55\3\0\1\56\7\0"+
34654	result.setDescription("btq,
24124	("float",
1512	r.getSegmentName();
57368	bits[idx]==0)
28835	TermsHash
23936	buggy
58615	setingorecase
51542	closeMergeReaders(merge,
38539	SetBasedFieldSelector(new
55856	closedir
54629	choice
49198	AND,
64498	intersected:
60088	"\7\266\1\u01f8\22\266\1\142\12\266\1\0\3\137\1\0"+
50087	checkabort
65637	checkpoint(SegmentInfos
11159	"\1\u03f8\5\u03f9\1\u03fa\14\0\1\u0122\161\0\4\u03fb\2\0"+
30686	"\1\54\3\0\1\54\5\0\1\54\7\0\1\54\4\0"+
34828	posIncrAtt.setPositionIncrement(0);
10851	"\175\0\1\346\1\u01a6\31\230\1\347\12\230\175\0\1\346"+
8469	ability
48532	(relationship)
1652	number_of_documents
57118	(int)(index
50479	(mergePolicy
42554	assertEquals("Term
49471	AND:
10763	"\31\230\1\u028b\1\347\12\230\175\0\1\346\1\230\1\u028c"+
40791	FST.Arc<T>().copyFrom(arc));
42089	Searchable#search(Weight,Filter,int,Sort)
8202	keep
23034	writerA.addDocument(lDoc2);
26607	freqs.length
38395	commitUserData.put("foo",
21445	ba1
21456	ba2
20577	keywordtokenizer
40342	TermDocs#read(int[],int[])}.
27195	"\u3031\u00AD",
32645	assertEquals("Test
64585	bufferPosition=len;
21774	Document()
66766	Sort(SortField
34100	bb;
55315	char[(int)
53366	SimpleFSIndexInput(File
26037	encountered,
23125	contents2));
55722	assertEquals(r2.maxDoc(),
30708	"\1\103\4\0\1\103\2\0\2\103\15\0\1\103\132\0"+
60755	"\1\351\32\232\1\352\3\232\1\u0450\6\232\175\0\1\351"+
27115	"\n\u0308\u0031\u0027",
7275	encountered.
30927	tdc.topDocs(-1).scoreDocs.length);
6565	(int/float)
36813	List<ArcAndState<T>>
34105	bb)
60516	"\1\u0101\1\u0389\31\266\1\142\12\266\1\0\3\137\1\0"+
38465	assertTrue(allFieldNames.contains("tvpositionoffset"));
27759	"\u0061\u0027\u0308\u003A",
47302	archaic
28675	posIncrAtt.getPositionIncrement());
42363	tps[i].close();
48144	matchDoc
51791	merge.mergeGen)
22535	AttributeSource.getAttributeInterfaces(clazz);
65156	toString(b)
27256	"\u0041\u0308\u00AD",
52582	uniques.add(clauses[j].getQuery());
27829	"\u0061\u0027\u2060\u0308\u0061"
29690	"\0\u15ba\0\u0941\0\u1621\0\u1688\0\u16ef\0\u1756\0\u17bd\0\u1824"+
39195	boostExpl
17791	four
3712	classictokenizer
41873	linefiledocs
51809	defense
837	LUCENE-1072
10982	"\1\u036b\12\264\1\141\12\264\1\0\3\136\1\0\2\136"+
7757	data[f
62192	d";
55263	v2="
1553	termEnum.clone();
33499	MockTokenizer(cs,
60210	"\1\u026e\32\u0216\1\u026f\12\u0216\1\u0270\10\0\1\u0213\164\0"+
39945	doDelete(int
54911	writer.addDocument(d,
24022	d",
39392	PayloadAnalyzer()).setMergePolicy(newLogMergePolicy()));
46469	,"(14)",
55156	termDocs2.doc();
21289	data[]
5753	PackedInts.Mutable
40107	forth
63931	testingchartokenizer
60917	"\2\0\1\u04cb\15\0\1\u04cb\6\0\12\u04cc\1\u047e\13\0"+
35109	nextpos
39639	https://issues.apache.org/jira/browse/LUCENE-1974
16540	as:
7657	arg
299	are
65242	(fst.emptyOutput
2008	arc
1769	FORMAT_CURRENT
34751	multi2",
48694	testVersions()
47259	c62
47275	c61
47258	c60
46427	,"11",
34982	inlined
11314	"\1\0\2\u042d\2\0\1\u042d\1\0\1\u042d\176\0\1\u0471"+
47152	c67
47166	c68
47226	c69
19037	at:
7547	form
27979	"\u0031\u0027\u0031\u002C",
29740	"\1\25\10\0\1\25\1\0\2\25\21\0\1\25\11\0"+
47418	c63
28926	arr
47468	c64
5363	(!EOFSeen)
3704	'.')
10437	"\3\0\1\53\2\0\1\54\3\0\1\176\7\0\1\56"+
46921	c65
17490	assertNotNull(fieldInfos.fieldInfo("f3"));
47537	c66
9752	"\1\56\2\0\1\57\4\0\1\110\14\0\1\61\4\0"+
27806	"\u0061\u0027\u2060\u0308\u0041",
59496	"\1\223\2\0\1\224\21\0\1\114\17\0\1\25\1\100"+
18133	result.setDescription(ConstantScoreQuery.this.toString()
17911	numHits);
67463	ArrayList<ReaderCouple>());
50550	bufferedDeletesStream.setInfoStream(infoStream);
418	asf
21356	assertSameStreams(data[i],
53452	asc
47605	c71
47628	c73
53011	non-zero,
47620	c72
5702	other.keyword;
30940	ask
25795	this.clauses
29911	"\1\53\1\0\2\53\4\0\1\25\5\0\1\25\3\0"+
37558	"notexist"));
39178	PhraseQuery.PostingsAndFreq(p,
20836	KeywordAnalyzer
6443	(!Constants.JRE_IS_MINIMUM_JAVA7)
42819	setPositionLength(int
37442	1e-6f;
5869	this(new
36326	startNode;
56575	i=1;i<commits.size();i++)
66965	java.io.ObjectOutput;
2572	api
36314	startNode)
10544	"\1\u01ba\1\u01bb\1\u01bc\1\264\1\u01bd\1\u01be\1\264\1\u01bf"+
43078	reference_manager_is_closed_msg
36134	{BYTE1,
40133	MultiTermEnum
24562	for.
3047	SegStart
39296	app
65838	tnum
35040	apr
41099	scratch));
5941	writeMasks[base])
67618	fail("no
9375	"\13\0\54\142\4\0\21\143\7\142\2\143\6\0\12\134\1\142\3\0"+
43321	for,
28615	getEndLine()
264	point
62830	KATAKANA
18248	for:
33313	iterator2.hasNext();)
45293	"Ç­"
57776	failed.set(true);
24600	1].doc);
28896	recyclepostings
9859	"\1\25\4\0\2\26\11\0\1\25\11\0\2\25\2\26"+
6338	*<p>
48147	matchPayload;
23439	updates)
24370	"funny"
22969	CollectionUtil.mergeSort(list,
2869	for(
35546	twosB=(ones&b)|(u&c);
48907	reader.get(50,
51727	readerPool.get(info,
65616	deletePendingFiles();
21629	justWildcardsLeft
43495	testConstructSize()
15097	SetBasedFieldSelector(loadFieldNames,
1791	IndexFileNames.FIELDS_INDEX_EXTENSION));
5522	TestSmallFloat
50321	(infoStream
71	WARRANTIES
30485	currentSet);
66645	testAssumeAfter()
39992	starts);
60651	"\1\u03a1\4\u040e\2\0\1\u040e\15\0\1\u040e\6\0\12\u0410"+
35406	No-argument
27622	"\u0300\u0031\u0027",
34728	multi2))
20016	BooleanQuery.maxClauseCount
41630	verifyStateAndBelow(fst,
47666	c6b
47240	c6a
7208	foo,
43229	testSkipTo()
47167	c76
17557	docSingle
47154	c75
47606	c74
5657	floattobyte
40176	tenum;
47089	c78
2293	(hasNext)
29120	TermFreqVector[]
47297	c6e
46922	c6f
47675	c6c
48771	TERM_FREQ;
49084	quotes.
58311	(a.length
44351	"Ç³"
15656	clearDelGen()
47402	c7a
38709	"'.",
47218	c7c
47055	c7b
33180	att
7348	bugs?
10498	"\13\0\1\u0122\160\0\1\u0163\4\u019b\2\0\1\u019b\15\0"+
19728	fold
55899	ThreadLocal#remove()}
15846	IndexFileNames.PLAIN_NORMS_EXTENSION
42117	this.ints
36965	//System.out.println("\nITER");
8878	on-demand,
26155	on-demand.
44338	"Ç²"
7034	tenum)
65839	random.nextInt(termsInIndex);
20767	getoffset
33150	src.addAttribute(Token.class);
56474	spans2.start())
15784	output.writeString(docStoreSegment);
31038	merge(siMerge,
33037	assertEquals("TestTerm",
34506	sb.append("maxBufferedDocs=").append(maxBufferedDocs).append("\n");
41927	stopnode
26095	(trackDocScores)
14640	Short
38828	r2.getUniqueTermCount();
12906	u1dd9
55293	pos2.length);
44809	SUPERSCRIPT
59840	"\3\0\1\137\4\0\2\137\150\0\1\u0153\24\266\1\u015b"+
48226	spans2.start();
36482	BIT_TARGET_NEXT;
66285	postingsHashSize
41163	testRandomWords(_TestUtil.nextInt(random,
53965	closeInput()
26026	bottom.doc)
23250	testCreateDocFrequencyMap()
13307	u1dcf
5641	(f==f)
22139	exponentially
37253	writenode
12505	u1de3
65299	newArcs
41299	builder.setAllowArrayArcs(!noArcArrays);
53221	copytext
38625	yet,
27517	"\u005F\u0061\u2060"
31130	yet.
36642	readFirstRealTargetArc(int
20800	DataOutput
17256	atomicinteger
51226	dsFilesCopied);
15073	assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY)
21616	yet?
34745	qp.parse("field:multi
15612	yet:
11145	"\4\u03ed\2\0\1\u03ed\15\0\1\u03ed\6\0\12\u03ed\1\u0391"+
59661	"\1\66\1\67\1\0\1\25\2\0\1\25\1\141\15\36"+
41197	Builder<Long>
53916	testFillJava14()
21969	FormatPostingsFieldsConsumer
46686	,">",
4361	upper=(int)(random.nextDouble()*noDocs
7419	perthread
27912	"\u0031\u003A\u0308\u00AD",
36339	(targetHasArcs(arc))
1142	dir.openInput(segmentsFileName);
49965	jjcalls
19213	ÏÏ
30061	u1dc6
61788	u1dc5
40077	SegmentInfos.readCurrentVersion(directory)
10104	"\4\36\1\352\10\36\1\352\2\36\1\352\2\36\1\352"+
20668	testindexwriterreader
29780	"\1\40\1\0\1\41\1\0\1\74\3\0\1\56\5\0"+
24642	"OutOfOrderMultiComparatorNonScoringCollector",
55095	WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergePolicy(newLogMergePolicy()));
17560	docSingle.get("f1"));
56524	ReqExclScorer(Scorer
23166	fs);
62736	numHits="
34610	moves
33442	main.writeLong(getChecksum());
10868	"\1\u02fe\11\264\1\0\3\136\1\0\2\136\1\137\3\136"+
65912	Occur.SHOULD};
19452	consumer
3017	consumes
54245	compact.length);
3230	consumed
21345	"onetwothree",
66855	255).
64471	spanNotQuery
28329	(rchild
30671	"\1\53\4\0\2\53\3\0\2\53\1\0\1\53\4\0"+
8610	source);
51242	SegmentMerger(directory,
37710	Someone
65024	NoOutputs#getNoOutput()}
66671	//super.prevSysErr.println("Type:
58939	(this.indexOptions
63756	x8654321
32441	dir.listFiles())
18757	ÏÎ¿Î½
67036	proximity
63370	0x76541,
11138	"\15\0\1\u03e7\6\0\12\u03e7\1\u03e8\175\0\4\u03e9\2\0"+
67464	firstReader
4817	testindexwriterconfig
25039	outoforderonecomparatorscoringmaxscorecollector
46685	GREATER-THAN
16946	clonedreader
445	testindexreader
5461	jjmovestringliteraldfa1_1
63373	0x76543,
5472	jjmovestringliteraldfa1_2
2065	frozen
28397	charArray
52707	work.");
6152	}});
55390	w.deleteDocuments(idTerm.createTerm(idString));
38317	testfloats
63371	0x76542,
48459	delegate.reusableTokenStream(fieldName,
53843	nextchararray
32447	randomfield
36502	BIT_TARGET_NEXT)
37454	found",
54623	Boolean
53213	uni_max_bmp
50121	(during
18975	urls;
3758	moved
46720	,"!!",
54008	CloneNotSupportedException",
55356	Arrays.fill(buffer,
29898	"\1\0\2\25\4\0\3\25\1\0\1\25\10\0\1\25"+
32531	(byte)0x76,
38037	vals[i]
57413	wordnum
38251	1024L+63L,
4223	testRightOpenRange(int
48121	newfile
55665	numDirs;
64206	LockMock
32011	recently
51721	totDocCount
4310	empty
25496	valId
44357	,"dz",
55672	numDirs,
61161	"\1\u034d\1\u05a1\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\21\u02e2"+
34123	printQueue(PrintStream
10218	"\2\264\1\u0103\1\u0111\1\264\2\u0103\1\264\3\u0103\2\264"+
16320	altfield
23038	writerB.close();
49960	x200000
40387	search-time,
2189	hassle
37754	priority_field
26840	numbuffer
20498	KeywordTokenizer}
30203	enumerator.position));
35948	LUCENE-38
51709	(time-consuming)
11198	"\4\0\2\136\150\0\1\376\1\u0415\31\264\1\141\12\264"+
58207	checksnapshotted
60054	"\1\u01e1\2\u01e2\2\u01e1\1\u01e2\1\u01e1\1\u01e2\1\u019d\13\0"+
18501	EmailFilter
10134	"\7\0\1\56\2\0\1\57\4\0\1\60\14\0\1\61"+
57778	writer.commit()
22686	FieldCache.ByteParser
61195	"\12\u05bd\1\u053b\13\0\1\u033c\242\0\1\u033c\214\0\2\u0585"+
33698	testBackgroundForceMerge()
54215	assertEquals(hash.size(),
31431	dirName)
59839	"\2\137\150\0\1\u0153\23\266\1\u0107\6\266\1\142\12\266"+
49426	'0';
31407	dirName,
38813	writer.getMergePolicy()).setMergeFactor(10);
67541	ReaderCouple(r,
4127	255);
26068	performance,
5750	performance.
39937	performance)
20519	patch
12907	u1e7c
54854	List<WaitingListener>
12435	uf0ae
10836	"\1\u02dc\6\0\12\u02dc\1\u021e\13\0\1\u0122\160\0\1\u0163"+
2404	where
54708	path;
22041	path.
12506	u1e86
5149	jjMoveStringLiteralDfa1_1(0x80000000L);
53963	origNorm.refCount
33240	parent.deletedDocs;
54713	1.4/1.5
7966	path)
7958	path,
2458	results[0]
8500	source2;
39626	lastfieldnumber
56535	<li>exclScorer
23378	modifier.getNumBufferedDocuments());
30063	u1e94
61388	"\2\0\1\u0662\15\0\1\u0662\6\0\12\u0662\1\u0600\13\0"+
65929	t:two)",
12105	u1e90
34768	bar\"~2").toString());
53465	full-fledged
59203	"\3\uf505\3\uf5a8\3\uf64b\3\uf6ee\3\uf791\3\uf834\3\uf8d7\3\uf97a"+
22615	NumericRangeFilter}.
24839	(numDocs
62497	dualConjunctionSumScorer(boolean
54142	teststopfilt
19116	testhugedoc
54716	paths
48651	doinvert
62335	"gender")});
15495	pre-3.0
61789	u1e68
42969	termbufferoffset
45359	INSIDE
28711	"/Computers/Windows"};
51707	occured,
64243	index-readers
34766	\"foo
59536	"\3\25\4\0\1\25\2\0\1\25\1\0\2\25\10\0"+
3046	int[0];
22252	int[newSize];
10790	"\2\136\150\0\1\376\23\264\1\u02af\6\264\1\141\12\264"+
62476	SingleMatchScorer(Scorer
367	"who",
29819	"\2\116\1\54\1\0\1\52\2\0\1\25\1\0\1\35"+
63985	(U+00BF
58081	ArrayUtil.grow(fieldPointers);
13308	u1e72
17061	ArrayList<String>();
34559	org.apache.lucene.search.Similarity#scorePayload(int,
56090	Term("data",
26072	TopDocs#getMaxScore()}
5228	"\50",
65848	doNestedTermConjunctions(IndexSearcher
67959	(!gotOne)
58170	basically
37738	checkHits(hits,
43685	year
42741	System#arraycopy(Object,
1181	out.writeByte(in.readByte());
53086	validUTF16String(char[]
49239	analyzer.reusableTokenStream(field,
19676	postings[i].docFreq
3177	other.setScorer(scorer);
57716	assertEquals("saw
10454	"\1\137\3\136\3\0\1\136\4\0\2\136\150\0\1\135"+
32258	assertTrue(l2.isLocked());
11916	rules.
34229	WRITE_LOCK_TIMEOUT
42307	payload.clone();
41711	assertTrue(arc.isFinal());
30955	tdc.topDocs(10);
42008	checkstopnodes
19801	testRankFloat
38615	testVersion()
66119	EmptyTokenStream();
18279	d4.add(newField("id",
56358	len22);
59667	"\4\0\2\137\150\0\1\u0101\3\266\1\u0107\1\266\1\u0107"+
9792	"\2\26\2\0\2\76\1\77\1\0\1\26\2\0\1\25"+
42678	w.getConfig().getMergePolicy();
56053	Assert.assertEquals(m,
30062	u1e2d
4912	org.apache.lucene.search.MultiTermQuery;
35753	x5555555555555555l
8099	raf.length();
32096	i=0;i<bufferUpto;i++)
22554	AtributeImpls
58934	vector,
53749	addAll(c);
2569	must_not
42099	onereversemul
43311	vector.
34756	foo\"~10",
30528	"\0\u1c91\0\u1cf8\0\u1d5f\0\u1dc6\0\u1e2d\0\u1e94\0\u1efb\0\u1f62"+
36655	vector)
6272	BooleanClause(getPrefixQuery(fields[i],
27783	"\u0061\u0027\u0308\u0061\u0027\u2060",
48840	vector;
62147	BooleanQuery.setMaxClauseCount(0);
53518	searchables[i],
20650	primaryExtensions)
65388	(MockDirectoryWrapper)
22284	hashCode(char[]
30578	"\4\0\1\26\2\25\2\26\10\0\1\26\1\0\2\25"+
31085	(positions.next())
59909	"\12\232\175\0\1\351\3\232\1\u016f\1\232\1\u0182\4\232"+
55762	IndexReader.openIfChanged(r1);
25760	badchildren
30283	TwoPhaseCommitImpl
66773	setSort(SortField...
63116	TERMS_PER_DOC
55990	EMPTY_TERM_POS;
28409	String(charArray,
42054	hitB.slot;
15247	fsDir.fileLength(name);
25016	testnormalizedscores
1145	1+gen));
51353	#prepareCommit(Map)}
7416	termshashconsumerperthread
7497	vectors
50586	commit.getSegmentsFileName()
59244	"\1\0\1\25\2\0\4\25\1\0\2\25\1\0\4\25"+
2779	valid
53890	versions)
2273	payloadMultiField2
16987	Map<Integer,TVPositionInfo>>
2271	payloadMultiField1
50039	versions!
54270	testLargeValue()
37792	MatchAllDocsWeight
48875	reader.get(1,
4894	Generated
48177	matchStart;
67960	(termAtt.toString().equals("a"))
15082	IndexOptions.DOCS_ONLY);
67990	endoff
20622	fileExtensions
35431	newToken(ofKind,
48496	<b>protected</b>,
32023	Generates
26047	versions.
38573	!IndexWriter.isLocked(dir));
33926	repeats.
48842	reader.get(0,
30543	"\1\25\4\0\1\25\1\0\2\25\4\0\1\25\5\0"+
43831	ASCIIFoldingFilter.java:
55181	i=0;i<tv2.length;i++)
29252	format_version2
56035	PositiveIntOutputs(boolean
49870	getdefaultoperator
51922	startCommitMergeDeletes
9915	"\12\0\2\33\1\0\3\33\1\0\1\33\2\0\4\33"+
38061	-1.0E15,
52285	org.apache.lucene.index.PayloadProcessorProvider.ReaderPayloadProcessor;
64570	if(len
64886	testTermPositionVectors(reader,
46818	assertTermEquals(expectedIter.next(),
59263	"\1\0\3\32\1\0\7\32\1\0\2\32\1\0\3\32"+
31252	ByteArrayInputStream(d.getFieldable("compressed").getBinaryValue()));
18544	"Õ°Õ¡ÕµÕ¥ÖÕ¥Õ¶",
33874	repeats:
23777	compareTo(Long)
12438	uf297
66457	(DocumentsWriter.BYTE_BLOCK_SIZE
38296	0x7ffff,
65410	writer.close(false);
9253	querylimits
30256	termscache
40650	FSTTester.InputOutput<Long>(terms2[idx],
31379	origOldName)
60663	"\1\u03a1\4\u0413\2\0\1\u0413\15\0\1\u0413\6\0\2\u0417"+
12839	uf28d
32419	rmDir,
27689	"\u0061\u2060\u0031\u002E\u2060",
53413	setreadchunksize
49214	PROHIBITED
33895	placeFirstPositions()
49864	getfuzzyminsim
9729	"\1\0\7\32\1\0\2\32\1\0\3\32\2\0\11\32"+
17149	FieldInfos(cfsDir,
25835	SpanQuery[sz];
612	for(int
22415	num_bytes_long
42283	org.apache.lucene.analysis.WhitespaceTokenizer;
24614	testSortWithScoreAndMaxScoreTracking()
55250	f1.stringValue();
49392	escape
22819	1549299360
4057	starting
10567	"\1\0\1\26\2\0\1\25\1\u0190\32\36\1\141\2\u0191"+
10110	"\1\66\1\0\1\25\2\0\1\25\1\140\1\36\1\352"+
33913	involved,
11097	"\150\0\1\376\32\264\1\141\5\264\1\u03ca\4\264\1\0"+
17434	res[i]
27775	"\u0061\u0027\u0308\u0061\u2060"
22180	realloc
1402	getmergescheduler
9250	termcount
50647	<p>Determines
51300	opened.</p>
42913	super.copyTo(target);
16486	successfully
22778	NumericUtils.sortableLongToDouble(
42251	assertCloneIsEqual(AttributeImpl
27294	"\u003A\u3031",
41603	b.finish();
3534	i).append(":
36615	(arc.flag(BIT_STOP_NODE))
38176	neededShifts.next().intValue(),
64842	testrandomseeks
9496	"\0\u36c2\0\u3765\0\u3808\0\u38ab\0\u394e\0\u39f1\0\u3a94\0\u3b37"+
32071	weakreferences
47518	fb06
7072	this.currentUpperBound
30145	origEnum.indexInterval
47118	fb04
52956	code);
57915	IndexFileNames.INDEX_EXTENSIONS)
46713	,"=",
65395	testCrashWhileIndexing()
57460	indexThreads[x].setName("Thread
30729	annex
34146	linkedhashmap
54918	Waits
30059	u1cf8
38044	-4000,
61148	"\175\0\1\u034d\14\u02e2\1\u0594\15\u02e2\1\u034e\12\u02e2\175\0"+
42727	anymore,
42780	anymore.
45904	,"(u)",
5901	in.readLong();
56975	APOSTROPHE;
43151	ids[i]);
22943	Collections.sort(list2);
65802	(BitSet)rnd.clone();
59264	"\2\0\11\32\1\0\2\32\1\0\4\32\1\0\2\32"+
11064	"\1\347\12\230\175\0\1\346\1\230\1\u03a9\30\230\1\347"+
41948	rewriteiter
26566	Term(DocHelper.TEXT_FIELD_1_KEY,
57439	trimtrailingzeros
4134	count=3000;
1139	segmentsFileName
6605	quote
32535	(byte)0x7F,
64779	(allowEmptyString
23464	_TestUtil.checkIndex(dir);
18196	this.filter.equals(other.filter))
3995	isTokenChar(char)
40331	'doc'
35863	"J");
28033	"\u0031\u002E\u2060\r",
61729	uf279
66182	testQueries01()
27565	"\u00AD\u0308\u0300",
40835	pair.output);
41864	output.bytes[0]
57004	goals
29729	"\1\0\4\25\1\0\5\25\1\26\1\0\1\25\1\0"+
47120	fb01
47114	fb00
47116	fb03
47121	fb02
13240	uf283
41101	for(Map.Entry<IntsRef,CountMinOutput<T>>
58823	utf16.length));
17107	Counts
24663	"CAEBJGFHDI";
48061	Directories).
51103	mergingSegments;
2502	freq
1382	nextint
34966	inner;
65618	IndexDeletionPolicy#onCommit(List)}
9385	"\5\0\3\132\1\0\7\132\17\0\2\133\2\133\10\0\2\140\12\0"+
46834	asserttermequals
40339	termDocs.close();
43620	cache.get(reader,
8684	free
31285	.upgrade();
17309	Index.ANALYZED));
55013	DocsAndWriter
19571	problems.
27380	"\u0027\u000B",
7925	unmaps
38671	assertEquals("Only
23032	scenario
10355	"\4\0\2\136\150\0\1\u014e\1\u0155\31\264\1\141\12\264"+
48971	<tt>date:[6/1/2005
29883	"\5\0\1\25\32\0\15\25\5\0\3\25\1\0\1\25"+
10921	"\160\0\1\u0332\4\u0330\2\0\1\u0330\15\0\1\u0330\6\0"+
60683	"\2\u0426\1\u03b2\1\u0426\1\u03b2\175\0\1\u0349\4\u0424\2\0"+
7008	addRange(String
43417	sortedints
51043	(maxNumSegmentsMergesPending())
12102	u1ca7
29483	.contains(PROP_KEY1));
34583	(includeSpanScore)
23337	threads[i].failed);
3879	characters,
21658	characters.
7388	gettotalhits
26152	maxscoring
5460	jjmovestringliteraldfa0_1
5471	jjmovestringliteraldfa0_2
5417	jjmovestringliteraldfa0_3
23443	false)));
52910	UnicodeUtil
5465	jjmovestringliteraldfa0_0
29546	characters:
22263	byte[newSize];
31720	[-verbose]
5803	FAC_BITPOS;
46772	,"?",
66611	triggerOn(SorePoint.BEFORE_CLASS);
1074	conf.getMergeScheduler()).setSuppressExceptions();
32820	charnum
30361	String>());
64396	(constants
55155	assertTrue(termDocs2.next());
53904	testFillJava15()
25010	multisearcher's
56019	append(CharTermAttribute
40937	fst.outputs);
7007	NumericUtils.LongRangeBuilder()
29026	FORMAT_SIZE);
56838	"\2\0\2\12\2\0\2\12\3\0\46\12\2\0\2\12\67\0\46\12"+
54540	ArrayUtil.parseInt("-1".toCharArray());
57140	expandingWordNum(index);
17657	#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}:
24596	tdc.topDocs().scoreDocs;
30976	testmaxscore
62312	qB);
29265	tvdformat
68080	int[(int)(((long)valueCount)
19038	http://www.mailto.co.uk/
8374	pause
67901	//System.out.println("fillTokens:
50493	getLogMergePolicy().setUseCompoundFile(value);
51870	double-write
7765	docs.length;
52619	instantiable
57569	Binary
28561	line-number
23219	msrchr
30348	2-phase
32928	termID,
32939	termID)
9853	"\1\53\2\0\1\54\3\0\1\55\7\0\1\56\2\0"+
34316	KeepOnlyLastCommitDeletionPolicy}/
60561	"\15\0\1\u03ab\6\0\1\u03ad\1\u03af\1\u03ae\2\u03ad\2\u03ae"+
25877	KeepOnlyLastCommitDeletionPolicy},
18832	"ï¼´ï½ï½ï½ï½"});
9816	"\2\136\151\0\4\160\2\0\1\160\15\0\1\160\6\0"+
16235	out[i]
55145	(term==null
66449	termID;
32864	(numPostings
52005	FlushControl();
10420	"\2\u016a\1\230\1\u016a\1\230\6\u016a\1\230\1\347\12\230"+
53695	pageStart);
20669	testfileswitchdirectory
38445	Field.TermVector.NO));
60176	"\2\137\150\0\1\u0101\1\u0157\31\266\1\142\12\266\1\0"+
49783	ParseException.
28129	generatejavaunicodewordbreaktest
35111	switchcurrentbuffer
39148	MultiPhraseWeight
42400	b.length
50716	IndexWriterConfig#setRAMBufferSizeMB(double)}
10072	"\153\0\1\76\5\0\1\76\2\0\3\76\7\0\1\76"+
55092	.setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates)
665	r.nextInt(40)
32877	termIDs
22295	java.util.Arrays#equals(char[],
37142	input_type
37476	assertEquals("two
27101	"\n\u0308\u0300",
41259	"body".equals(termEnum.term().field()))
22688	(lowerVal
21216	256);
61122	"\6\0\1\u0580\2\u0581\1\u0580\5\u0581\1\u0582\175\0\1\u03a1"+
61257	"\1\u05fa\15\0\1\u05fa\6\0\1\u05fb\2\u05fc\1\u05fb\5\u05fc"+
54396	#getValue
41440	assertNull(fstEnum.seekFloor(new
30262	mustseekenum
49849	dateresolution
43130	topCollector);
63723	x85431
63724	x85432
41547	idv+1);
26406	inputCharNum
40011	StaleReaderException("IndexReader
39630	utf16result
45288	U+01A1:
23780	ensureOpen()
10690	"\5\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
65537	lastSegmentInfos
43689	back-compatibility
34794	brown").toString());
38075	longVals[i]=NumericUtils.doubleToSortableLong(vals[i]);
43712	testLain1Accents()
5947	writeMasks[base+1])
63721	x85421
51098	MergePolicy).
42303	byteAt()
27224	"\u0041\r",
27401	"\u0027\u0308\u0061\u2060",
59352	"\1\162\6\0\12\162\1\163\174\0\65\164\1\165\1\164"+
48161	(spanNearQuery.getClauses().length
35658	(int)val;
20537	versioned
66845	config.setSimilarity(new
55964	hardrefs
59859	"\1\322\1\323\1\324\1\325\1\326\1\327\1\137\12\333"+
10030	"\2\25\3\65\11\0\2\25\2\0\1\65\6\0\1\25"+
5267	Reinitialise
43635	getcachedresult
27964	"\u0031\u0027\u0308\u0061\u2060",
67290	(Random
40610	IntsRef[strings.length];
11358	"\3\230\175\0\1\346\12\230\1\u017b\17\230\1\347\12\230"+
627	unexpected
6586	<code>TrieRangeQuery</code>):
63929	testwhitespacetokenizerbwcompat
15679	IndexFileNames.fileNameFromGeneration(name,
355	RandomIndexWriter(random,
38978	val);
45200	U+01A0:
64050	assertEquals("Lucene",is.readString());
9427	"\33\127\35\56\3\127\35\124\3\127\6\124\2\40\31\124\1\40\17\124"+
54961	newSearcher;
7620	offending
64926	reader.getTermFreqVector(docId,
6357	differ
58188	id");
50089	totalsize
60443	"\13\0\1\u02e1\160\0\1\u0349\4\u0347\2\0\1\u0347\15\0"+
53198	negligence
50546	mergePolicy.setIndexWriter(this);
37961	identityhashmap
17292	removecoreclosedlistener
23705	arrives,
37638	doc.add(text);
38941	testlastmodified
57903	niofsindexinput
48832	reader.get(j,
65563	CommitPoints
39901	re-ask
39835	getFieldInfos()
44818	,"IJ",
62722	iter=0;iter<1000*RANDOM_MULTIPLIER;iter++)
12504	u1d40
26300	getDecodedLength(encoded.array(),
60070	"\231\0\12\u01ed\10\0\1\u016c\1\u016d\1\u016e\162\0\1\136"+
60992	"\2\0\1\u0500\15\0\1\u0500\6\0\12\u0500\1\u0501\175\0"+
26008	queue.getComparators();
59727	"\4\0\2\137\2\0\1\70\1\0\1\51\1\0\1\71"+
14906	comparatorsource
58470	http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[[%3ACase_Sensitive%3DTrue%3A]%26[^[\u0000-\uFFFF]]]&esc=on
34139	t[0]);
66945	outputs2.add(prefix.output2,
12103	u1d4a
26977	DIGIT
16870	Similarity.getDefault().encodeNormValue(17.0f);
15851	(!hasSingleNormFile)
9412	"\1\43\1\33\1\1\3\0\1\36\1\17\2\0\1\3\1\60\14\0"+
18868	"dashed",
35152	payloadboostsimilarity
40028	doCommit(Map<String,String>
30060	u1d5f
7410	FreqProxTermsWriterPerField(termsHashPerField,
226	from
15147	FieldSelectorResult.LAZY_LOAD)
4909	org.apache.lucene.document.DateField;
16653	updatetop
56934	"\2\27\1\0\1\56\2\0\1\56\2\0\1\50\4\0"+
30998	FileWriter
10208	"\150\0\1\376\2\u0103\2\264\1\u0103\3\264\1\u0103\5\264"+
33583	//@Ignore("wrong
56108	search.search(csrq("data",
53471	dfMap,
51629	mergeInit
23529	l.length;
23700	hidden
11152	"\1\u03f1\1\u0397\175\0\1\u0332\4\u03ef\2\0\1\u03ef\15\0"+
7749	FieldSelectorResult.LAZY_LOAD;
39359	size());
65213	commonOutputPrefix
2955	found
33859	Examples:
11208	"\1\u041e\31\264\1\141\12\264\1\0\3\136\1\0\2\136"+
32472	flush/merge
18029	rulebasedcollator
31193	"23.nocfs",
32224	_testStressLocks(new
28697	testpositons
54041	copyonwrite
53469	dfMap;
67462	List<ReaderCouple>
12836	uf0a4
34141	t[i-1].position
11578	"\1\u0538\15\0\1\u0538\6\0\12\u0538\1\u0500\13\0\1\u02cf"+
46421	,"(10)",
2431	MaxPayloadFunction(),
36705	code="
50782	devices.
50597	"head"
23753	[in
23788	<code>get</code>
41632	expanded,
12905	u1d36
60060	"\1\u0167\13\0\1\u0126\161\0\4\u01e7\2\0\1\u01e7\15\0"+
1470	org.apache.lucene.util.BytesRef;
48965	":"]
62370	qA1,
9821	"\2\0\1\25\6\0\1\25\126\0\2\25\2\0\2\25"+
3633	segstring
22871	this.payloadToMatch
26498	DocHelper.all.size());
35239	Arrays.fill(lastSkipDoc,
24054	"1023423423005","4.043545",
13306	u1d2c
1910	nf.getNumericValue();
36234	label);
53342	(multiple
61787	u1d22
38030	j<64;
15562	(format
24777	full.search(new
18436	searcher.doc(h[i].doc);
22851	getfloats
41743	compare(Pair<Long,Long>
65753	createRandomTerms(int
31404	oldIndexDir)
6846	fact
35001	inorder=true/toplevel=false
33801	collisions
39714	this.readOnly
31378	oldIndexDir,
33274	data.put("index",
48740	{"f1",
11234	"\1\u032b\175\0\4\u0431\2\0\1\u0431\15\0\1\u0431\6\0"+
65614	decRef(lastFiles.get(i));
51924	DocumentsWriter.ThreadState.init
27710	"\u0061\u003A\u002C",
29527	getruncount
31458	numbering
60461	"\12\u0281\176\0\32\u0281\1\u02ea\12\u0281\176\0\4\u0352\2\0"+
20371	lazily.
29322	lazily,
23841	Pruner
65591	segmentName
39353	(bitSetDoc
11061	"\32\230\1\347\7\230\1\u03a7\2\230\175\0\1\346\32\230"+
48283	lastStart,
50011	LinkedList<FileEntry>();
66516	consumer.skippingLongTerm();
64416	bos.toByteArray();
32726	"encodedBuf:
37765	PositiveScoresOnlyCollector(Collector
42080	OneComparatorFieldValueHitQueue<T>(fields,
11425	"\1\u04c4\1\0\3\136\1\0\2\136\1\137\3\136\3\0"+
48170	subSpansByDoc
57197	((endIndex-1)>>6);
23401	testBatchDeletes()
60781	"\4\0\2\137\150\0\1\u0101\1\u0465\31\266\1\142\12\266"+
30664	"\1\25\1\0\1\25\3\0\2\25\1\0\1\25\5\0"+
4446	collision,
46484	SIXTEEN
27440	"\u0030\u0027",
36061	SingleDocTestFilter(0));
33970	PhrasePositions[numPostings];
63717	x85321
59869	"\4\u0166\2\0\1\u0166\15\0\1\u0166\6\0\1\u0169\1\u016b"+
58659	correct!
40506	"TokenStream
23017	lDoc2.add(newField("handle",
40007	StaleReaderException,
16951	clonesegmentreader2
28038	"\u0031\u002E\u2060\u0308\u000B",
23870	itself);
38365	emptylist
55496	assertEquals("the
26060	<code>numHits</code>.
18898	addresses,
40151	smi.next()
40708	ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);
61479	"\7\u02e2\1\u06a6\22\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u06a7"+
3561	MergePolicy()
3249	cachedDocs
67175	entry.setOffsets(offsets);
7879	chunk
22464	internals.
15170	assertTrue(tmpDir
3444	list,
28745	list)
30652	"\5\0\1\170\3\0\1\171\14\0\1\172\16\0\1\173"+
4586	assertEquals(KeepOnlyLastCommitDeletionPolicy.class,
27625	"\u0300\u0308\u0031\u002C",
63233	getBuffer(int
22940	list2
51753	IndexFileNames.segmentFileName(mergedName,
477	fail
22938	list1
21162	list.
42726	Even
33887	list:
67873	posLengthAtt
50007	NullPointerException("directory
1554	findTermThatWouldBeAtIndex(clone,
9914	"\7\0\1\33\1\0\2\33\7\0\3\33\2\0\2\33"+
32321	"fair"
62779	correct:
54898	indexingGen
57221	0x3f);
51444	delTermCount="
67016	dir.listFiles();
12903	u1bf0
26478	outputarray
464	create
6735	fair
34322	#setIndexCommit(IndexCommit)}
6694	correct,
61785	u1bdc
37709	correct.
30468	currentSet;
16418	prepareIndexAndSnapshots(psdp,
7521	unicodeutil
39640	BooleanScorer.score(Collector
56062	Field.Keyword("id",String.valueOf(i)));
697	ConcurrentMergeScheduler()));
53713	pagesize
59039	testmultimmap
24017	String.valueOf(Long.MAX_VALUE),String.valueOf(Double.MIN_VALUE),
60156	"\1\351\20\232\1\u0230\11\232\1\352\12\232\175\0\1\351"+
57600	indexsize
32816	encodedbuf
8749	(docs.size()
35282	lastSkipProxPointer[level]));
28361	numscorers
59616	"\1\25\2\0\1\25\1\141\13\36\1\375\6\36\1\376"+
22955	CollectionUtil.mergeSort(list1,
9711	"\1\0\1\25\1\0\1\25\117\0\1\25\13\0\1\25"+
40425	Additionally,
1437	fake
34587	(PayloadTermSpanScorer)
65786	hotspot
24795	missingVal);
11507	"\6\0\12\u0504\1\u04ae\13\0\1\u02cf\160\0\1\u0332\4\u0504"+
66808	processTerms(String[]
40628	Outputs<Object>
1526	termEnum
63329	0x74321,
18215	constantscorer
12502	u1bfa
15855	!useCompoundFile))
25949	super(queue,
14612	fall
8712	atLeast(200);
30284	TwoPhaseCommit
36295	switch(t)
11892	yycharat(int
39210	tfExplanation
56340	swap(pivot,
6952	correcty
62685	"e"};
53431	m++)
1012	"aaa",
42125	otherInts
10656	"\1\u021e\13\0\1\u0122\160\0\1\u0163\4\u021d\2\0\1\u021d"+
58469	shouldn't";
9949	"\1\66\1\0\1\64\2\0\1\25\1\265\32\36\1\141"+
38500	assertTrue("entry
39236	fieldExpl.getValue());
44074	"â±¥"
59863	"\1\u0162\15\0\1\u0162\6\0\1\u0163\2\u0164\1\u0163\5\u0164"+
53354	isOpen;
30056	u1bc3
10281	"\1\347\12\230\175\0\74\231\1\0\1\47\1\0\1\50"+
38845	testPrepareCommitIsCurrent()
12837	uf147
15132	binaryValue()
402	newIndexWriterConfig(
20928	internally
48	License.
67499	(threads[i]
23407	deleteAll()
12436	uf151
36	License,
17274	getusecompoundfile
24767	full.maxDoc();
64706	cp.setDefaultFieldCodec("Standard");
33619	test2to4
7052	initialized:
33620	test2to1
58079	ArrayUtil.grow(fieldNumbers);
13238	uf13d
52428	initialized,
50539	initialized.
33064	flagsAtt.getFlags());
34167	tppos
41177	toString(IntsRef
59606	"\1\355\1\373\1\36\2\355\1\36\3\355\2\36\2\355"+
38637	number");
22966	CollectionUtil.mergeSort(list);
8955	initialized!
58658	frag
5504	endline
20782	byte/char/int)
23769	(recordTimeSec
44949	"â± "
54996	isheldbycurrentthread
1427	testdocumentswriterabort
59849	"\1\140\3\137\3\0\1\137\1\164\3\0\2\137\2\0"+
13304	u1be6
53119	chars[w]
13424	zzunpacktrans
64302	DEFAULT_DOC_COUNT_PERCENT;
5	Licensed
60349	"\4\u02ee\2\0\1\u02ee\15\0\1\u02ee\6\0\12\u02ee\1\u02ef"+
25562	insanity.add(new
49376	termStr.toLowerCase();
6757	lists
33870	initFirstTime();
37666	found);
58471	upperArr
61727	uf133
51235	parallel.
58716	ret=0;
51190	parallel,
44094	,"AE",
52418	analyzers;
442	mockdirectorywrapper
23358	keywords[i],
4532	continue
17459	parallel;
66099	assertEquals("f1:[a
50661	setMaxMergeDocs(int
39991	MultiTermDocs(this,
41744	Pair<Long,Long>
12107	u1fd6
14811	FieldCache.Parser}
51499	delCount++;
8402	args[4];
9472	unpacked
65398	testWriterAfterCrash()
42781	org.apache.lucene.index.Payload
30066	u1fc9
26676	Collector#collect(int)}
6101	assertEquals("",
41082	scratch.length);
50888	addDocument(doc,
5493	reinit
45666	U+01AC:
27774	"\u0061\u0027\u0308\u0061\u2060",
45668	U+01AE:
66282	streamCount;
43158	q.setBoost(0);
23798	record(IndexSearcher
11017	"\1\u0384\15\0\1\u0384\6\0\12\u0387\1\u0385\13\0\1\u0325"+
12053	zz_action
4851	getreadertermsindexdivisor
42564	NumericTokenStream().setIntValue(ivalue);
33042	hashCode,
15308	Double.valueOf(d);
35680	x!=0)
1714	@deprecated
4263	(lower>upper)
27731	"\u0061\u003A\u0308\u0061\u0027",
18454	skipok
12508	u1fcc
45699	U+01AD:
25743	readerfieldtovalids
19909	assertNotSame(
8208	clone.buffers
45781	U+01AF:
6932	precisionStep^0x64365465;
30774	bufferSize
28827	numlevels
28898	obtains
23437	TestIndexReader.testDiskFull().
4566	org.apache.lucene.index.IndexWriter.IndexReaderWarmer;
66626	RuntimeException("unreachable");
12909	u1fc2
11691	"\1\1\1\0\4\1\53\0\32\1\3\0\4\1\32\0"+
27762	"\u0061\u0027\u0027",
15858	IndexFileNames.SEPARATE_NORMS_EXTENSION);
28873	doc2;
40597	testBasicFSA()
64613	bits)");
66470	bytePool.byteOffset;
13310	u1fb8
61791	u1fae
60706	"\175\0\1\u034d\1\u0428\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
16637	lessThan(heap[j],
4750	well");
10002	"\1\61\4\0\1\74\2\0\1\75\41\0\1\25\2\26"+
65934	-two
58127	#snapshot(String)}
34285	DocumentsWriter.defaultIndexingChain;
6240	//Get
52238	midstartcommit2
65357	taillength
17497	doc24
29859	"\5\0\1\25\1\0\1\25\1\0\1\25\1\0\11\25"+
35197	payloads.
60272	"\150\0\1\u0101\21\266\1\u02b1\10\266\1\142\12\266\1\0"+
65150	x=0;x<input.length;x++)
43471	â,
55200	(((long)d1)<<32)
50391	sub-readers
16398	KeepOnlyLastCommitDeletionPolicy(),
68028	rightOffset
17494	doc11
6946	fast
34274	KeepOnlyLastCommitDeletionPolicy();
54121	'hte'
49888	positioncount
11784	t.copyBuffer(zzBuffer,
50021	(file
39276	hashCode;
21080	end_count
18393	doc0,
2792	timoutException.getTimeElapsed()
67178	entry.getPositions();
7094	booleanquery's
19642	ChunkState[]
50094	endptr
32743	binaryDump(byte[]
19321	randomtextwithemails
65739	this(DEFAULT_TYPE);
9452	"\1\0\6\12\3\2\2\12\1\2\4\12\2\2\2\12"+
2047	label="
64650	bufferPosition)
7787	fail("FIELD:"+fname+",VAL:"+fval);
35087	bufferPosition,
66076	f3:three",
9768	"\1\52\3\0\1\53\2\0\1\54\3\0\1\55\7\0"+
25247	"\\\\\\\\*"},
48280	ppEnd
7269	aggregates
19992	#getMaxClauseCount()}
33991	Arrays.sort(rg,
28599	bufferPosition;
25284	matchOneDocPrefix.length;
62635	files",
34561	aggregated
43687	gettime
28497	binaryFldStoredTest
53411	readlength
31448	"lucene.backwardscompat0.index";
32703	testEmptyInput()
15507	isCompoundFile,
20557	collator;
16906	testclonereadonlysegmentreader
15747	isCompoundFile)
22283	(inclusive)
30172	cacheKey
20559	collator)
9617	"\2\u9beb\2\u9c8e\2\u9d31\2\u9dd4\2\u9e77\2\u9f1a\2\u9fbd\2\ua060"+
30550	"\1\0\1\25\1\0\1\25\2\0\1\25\17\0\1\25"+
29714	"\1\0\3\25\2\0\4\25\1\0\3\25\2\0\3\25"+
7575	addEscapes(String
59396	"\1\77\1\26\6\0\1\77\37\0\12\26\27\0\1\220"+
29923	"\6\25\2\0\1\25\1\0\1\25\1\0\3\25\1\0"+
34468	getting
44483	"áº¹"
18124	innerWeight.scoresDocsOutOfOrder()
24790	fdocs
28358	tiebreakermultiplier
33814	(only)
8378	process,
63181	bindex
32528	(byte)0x98,
40530	process.
35104	toCopy)
15455	isCompoundFile;
35106	toCopy,
20594	collators
26737	rewrite(Query
5520	org.apache.lucene.util;
21958	toCopy;
16963	name="version"/>
1984	fst;
18318	q.add(tq("hed",
1445	segmentinfos
42897	copyBuffer(prototype.buffer(),
20294	1024);
24622	"OutOfOrderOneComparatorScoringNoMaxScoreCollector",
41697	fst2
42621	assertTrue(msg,
40763	fst,
42826	#endOffset()
64059	assertEquals("Lu\u0000ce\u0000ne",is.readString());
45852	U+01B0:
1989	fst)
379	assertTrue(r.hasDeletions());
16920	testclonewriteabletoreadonly
36101	ReadOnlyFST..
27909	"\u0031\u003A\u005F",
17884	ends",
54949	newGeneration.await(time,
40119	generation;
59644	"\1\324\1\325\1\326\1\327\1\137\12\143\1\0\3\137"+
15838	generation:
39436	TestMultiLevelSkipList.this.counter
53434	format.format(value),
49395	Supports
56922	"\4\0\2\34\1\0\1\57\1\0\1\11\2\12\1\13"+
66983	doc's
33341	("30"
53537	hq.size()
619	doc);
739	r2.close();
66686	testassumeafter
2744	doTestTimeout(boolean
41524	(NUM_IDS
37472	testOrderDoesntMatter()
67260	TestIndexReaderReopen.modifyIndex(i,
24377	parseInt(final
6654	consist
42865	payload.equals(other.payload))
33898	doc),
15809	files()
7645	end-users
67566	assertReaderClosed(IndexReader
64548	checkBufferSize(bufferSize);
9514	"\0\u9089\0\u912c\0\u91cf\0\u9272\0\u9315\0\u93b8\0\u945b\0\u94fe"+
31971	getDocsWithField(IndexReader
19551	Throwable.class);
6855	NumericRangeQuery<Long>
45910	U+01B2:
50577	generation,
10222	"\150\0\1\376\1\264\2\u0103\1\u010e\1\u0112\3\u0103\1\264"+
56094	cspq(new
1933	int[]
48102	files).
16144	doc()
46049	U+01B3:
25232	"a?h",
11719	startRead
66987	testRAMDirectorySize()
16496	pre-allocates
38634	(!gotException)
58409	assertTrue(set.contains(new
46629	SHELL
11052	"\1\u039e\15\0\1\u039e\6\0\1\u03a0\1\u03a2\1\u03a1\2\u03a0"+
48687	testindexwriterlockrelease
62582	nroptrequired
56856	"\1\0\2\12\4\0\12\2\25\0\10\12\1\0\3\12\1\0\27\12"+
22212	over):
5197	((0xffffffffdfffffffL
46080	U+01B4:
31617	readerutil
51868	generations
50236	Set<MergePolicy.OneMerge>
10976	"\4\0\2\136\150\0\1\376\32\264\1\141\5\264\1\u036a"+
64555	buffer.length="
24226	searchX.close();
25616	Insanity(InsanityType.SUBREADER,
59797	"\2\0\1\342\3\0\1\343\2\0\1\344\12\0\1\345"+
39459	complaining
3961	incrementToken.
36265	this.outputs
45398	U+01A4:
21644	"cat"
5604	SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));
34847	PosIncrementAnalyzer
18994	(urlAnalyzer,
31891	FieldCache#getLongs(IndexReader,
52065	oldinfos
40218	docs[i]
61726	uf090
14956	q1.add(t1);
20423	03:25:26
20418	03:25:22
64075	MockIndexInput(READ_TEST_BYTES);
4021	io_buffer_size
18447	testrankingsimilarity
5231	"\52",
731	true);
52927	HALF_MASK
42485	assertEquals(pool.size(),
42533	bytearraypool
19034	examples
48361	DisjunctionSumScorer(Weight
13237	uf09a
66889	this.output1
66890	this.output2
55070	IndexingThread[nThreads];
51862	toSync.prepareCommit(directory);
52301	"p:p1"
4075	true),
27103	"\n\u0308\u0061\u2060",
49800	jj_add_error_token(0,
53142	out_offset
34195	example:
21438	Seek
54786	release(),
15139	bytes[i]
66836	queryterms
39094	nextkey
6021	testResize()
56787	assertEquals(3*(N+1),
7644	example,
45423	U+01A5:
10677	"\4\0\2\136\150\0\1\376\24\264\1\u023f\5\264\1\141"+
11167	"\1\u03fc\1\u03fb\1\u03fc\1\u039f\13\0\1\u0122\226\0\1\u02d8"+
54796	release();
29001	IndexFileNames.VECTORS_FIELDS_EXTENSION);
28023	"\u0031\u002C\u0308\u0031\u003A",
32875	(TermVectorsPostingsArray)
68089	Packed32(int[]
63883	testNormalizeCharInSubclass()
63068	regularexpression
55833	IndexReader.openIfChanged(r3);
11068	"\27\230\1\u03ae\1\230\1\347\12\230\175\0\1\346\32\230"+
41779	TreeSet<String>();
17613	TestCloseableThreadLocal
35765	fours
55410	verifyequals
66824	tmpFreqs.add(Integer.valueOf(1));
8831	Stack<String>();
63106	(--nextSave
14669	FIELD_DOC
25923	IndexWriter#rollback}
34266	select
60542	"\151\0\4\u0398\2\0\1\u0398\15\0\1\u0398\6\0\12\u0398"+
39586	writeTerm(fieldNumber,
64071	assertEquals(LONGS[i],
7570	Replaces
29049	tvdPosition;
25515	valIdToItems.put(valId,
26443	this.middleShift
587	Field.Index.NOT_ANALYZED);
5165	jjCheckNAddTwoStates(2,
38221	0x000000100000
53562	rewrittenQuery
4349	testRandomTrieAndClassicRangeQuery_4bit()
31663	oldindexdir
112	IOException
59923	"\1\260\1\261\1\262\1\263\1\264\1\265\1\137\12\266"+
36060	FilteredQuery(new
37935	NULL)
62962	files2)
411	"b"));
52862	PURPOSE
22379	comp).insertionSort(fromIndex,
17687	marking
66232	"b")),
40053	(matched
66862	addValue()
38442	Field("unindexed2","test1",
20394	true){
23361	unstored[i],
40384	<p><b>WARNING</b>:
51073	percentage
2975	dotestsearch
41768	assertEquals(85L,
25202	expectedMatches)
28608	char[len];
27062	"\r\u0061\u0027",
66191	testQueries03()
62961	files1,
61267	"\15\0\1\u0604\6\0\12\u0604\1\u058b\13\0\1\u02e1\160\0"+
37145	byte4
35594	(A[i+3]
40042	startCommit();
51838	startCommit():
37143	byte1
37144	byte2
6649	byte,
54780	LUCENE-2421:
65926	assertEquals("(b:one
51717	merge.readers
21221	byte.
35638	val==0:
6486	IOUtils.closeWhileHandlingException((TestException)
40175	readerTermDocs[pointer]
20700	made.
18896	serial,
28415	chars[]
39751	initialize(readers.toArray(new
12835	uf001
26101	MultiComparatorScoringMaxScoreCollector(queue,
56375	maxdepth
33625	teststring
28502	assertTrue(stringFldStoredTest.equals(binaryValStored));
66743	safe.
51131	readerPool.clear(null);
36425	byte:
12434	uf00b
35599	(A[i+4]
37804	queryExpl.addDetail(new
15886	compound);
35889	true",
40092	latest.read(dir);
15464	compound).
3391	IndexWriter.forceMerge
9106	assertEquals("hash
513	assertfalse
26921	[4.0]
23609	improvements
1851	bytes
36434	serializes
57210	fastFlip(int
9109	ic2.hashCode());
48964	[&lt;TERM&gt;
20634	fsd,
19662	fairly
7676	serialized
35587	(A[i+1]
21528	CompoundFileWriter(d,
34111	bb.remove(j);
5958	RamUsageEstimator.sizeOf(blocks);
8419	(lockFactory
3857	"isTokenChar",
30064	u1efb
49940	rangeex_goop
49156	avoids
35592	(A[i+2]
17187	safe,
2919	doc="
21440	a1.seek(100);
66279	org.apache.lucene.util.SorterTemplate;
49803	jj_expentries.size();
62566	prohibitedscorers
14888	SortField.STRING_VAL:
38847	writer.prepareCommit();
8788	org.junit.runner.Description;
10430	"\1\25\1\65\7\0\1\65\2\0\1\25\1\135\1\232"+
9892	"\2\25\1\0\2\25\2\0\1\25\2\0\1\25\1\0"+
55317	buffer.length);
42861	other.flags
46305	,"5.",
36839	br.utf8ToString());
26296	#getDecodedLength(char[],
21841	Fieldable[0];
35608	(A[i+7]
40564	inputMode,
40562	inputMode)
42222	(PayloadAttributeImpl)
54915	getIndexWriter()
46769	,";",
5707	@return
26389	((((inputArray[inputByteNum]
2680	QueryParser
12057	zzunpackrowmap
45214	"Èª"
61377	"\4\u065d\2\0\1\u065d\15\0\1\u065d\6\0\2\u065e\1\u065d"+
67750	System.arraycopy(((CharTermAttribute)
60350	"\13\0\1\u0126\160\0\1\u0168\4\u02ee\2\0\1\u02ee\15\0"+
52826	Business
30263	ensureindexisread
25798	clauses[i];
24290	"double",
65558	checkpoint(segmentInfos,
51620	mergingSegments.add(info);
19074	testKorean()
23606	Today
55524	testadddocument
44487	"áº½"
18308	skipTo
8019	cleaner.getClass().getMethod("clean")
65914	TestQueryParser.QPTestAnalyzer();
41327	pruned!");
45697	U+01AB:
43096	"title",
43140	topDocs.scoreDocs[3].doc);
12000	HANGUL_TYPE;
36348	getEmptyOutput()
64839	testtermsenum
42130	Signed
35601	(A[i+5]
38190	testLongExtremeValues()
26792	fox",
15166	_TestUtil.getTempDir("lazyDir"
62395	bubba
62901	setMergePolicy(mergePolicy)
16005	i=0;i<allThreads.length;i++)
39073	map.put((Object)
34314	KeepOnlyLastCommitDeletionPolicy()
7393	FreqProxTermsWriterPerThread
52017	message_id
26353	(outputLength
35121	PayloadFunction[]
35606	(A[i+6]
18283	d4.add(newField("dek",
32104	Re-use
25840	SpanNearQuery(newClauses,
52671	MinPayloadFunction
58112	TwoPhaseCommitTool}
40739	inputMode;
6377	getbooleanquery
14883	comparatorSource.newComparator(field,
24048	"100",
26651	NeverPeeksLookaheadTokenFilter(tokenizer);
51142	#addIndexes(IndexReader[])}
21521	testManySubFiles()
15709	result[i];
42651	randomize
34154	phrasepositions
38169	MAX_VALUE
60622	"\1\352\12\232\175\0\1\u0101\3\266\1\u03fa\26\266\1\142"+
15800	getHasProx()
11732	user-EOF-code
40049	directory.sync(segmentInfos.files(directory,
64183	u1ea1
30147	SegmentTermEnum(directory.openInput(indexFileName,
60344	"\12\u02e8\176\0\4\u021c\2\0\1\u021c\15\0\1\u021c\6\0"+
35745	hackersdelight
29368	limit-upto;
51415	(config.getRAMBufferSizeMB()
6945	private,
58195	super.release(id);
29680	"\15\0\1\2\57\0";
52646	private:
5892	long[size+1];
6287	Parses
29504	systempropertiesinvariantrule
64704	StandardCodec(minTermsInBlock,
25708	Parser
59801	"\1\141\32\36\1\142\12\143\1\u014e\1\137\1\144\1\137"+
22309	ints)
37990	ints,
29932	"\1\53\42\0\1\54\11\0\3\25\5\0\1\25\1\0"+
35704	ints.
45992	U+01BF:
38806	ints2
18303	skipOk
24528	testParallelMultiSort()
34205	CREATE,
37491	leave
60645	"\30\266\1\u0409\1\266\1\142\12\266\1\0\3\137\1\0"+
42109	ints;
36946	ints:
28670	stpf.getEnablePositionIncrements();
26485	inputcharnum
25758	relationships
30912	9.17561f,
49919	label_1
16925	testreadonlycloneafterfullmerge
30918	9.17561f;
57851	FileChannel.read
55717	doTestIndexWriterReopenSegment(boolean
16257	st(String
14526	yytext
54599	Integer[0];
3958	offsetAtt.setOffset(correctOffset(start),
52083	maintained
9081	LUCENE-2417:
39509	output.writeInt(skipInterval);
775	super(input);
40366	testOutOfOrderCollection()
50420	infoIsLive(info);
2734	least
3923	if(!charUtils.fill(ioBuffer,
11245	"\1\u0439\15\0\1\u0439\6\0\12\u0439\1\u0391\13\0\1\u02cf"+
6507	org.apache.lucene.util.ToStringUtils;
28890	nexttermshash
21333	".one",
8265	mmapdirectory's
65728	forced
37466	exact",
65758	i<nTerms;
60154	"\4\u016d\2\0\1\u016d\15\0\1\u016d\6\0\12\u016d\176\0"+
51750	merge.info.setHasProx(merger.fieldInfos().hasProx());
29921	"\1\25\6\0\2\25\5\0\1\25\1\0\1\25\1\0"+
52454	(valSize)
16992	Map<Integer,TVPositionInfo>
52039	learn
29058	tvdLengths[count]
23623	forces
20689	posting
37307	Set.
66609	AbstractNestedTest
53771	Set,
67469	readersToClose
51272	(dsNames.containsKey(dsName))
27107	"\n\u0308\u0061\u0027",
64044	assertEquals(16384,is.readVInt());
37208	endaddress
20410	"dateTime";
40752	input.compareTo((other).input);
28831	remember
10375	"\2\0\1\u015a\15\0\1\u015a\6\0\12\u015a\1\334\175\0"+
33453	(resource:
39788	newReaders[i].incRef();
7123	opteron64
5806	bitPos;
19537	closing,
29713	"\24\0\1\25\3\0\1\25\1\0\1\25\1\0\1\25"+
30229	ti2.skipOffset)
58617	stopwordsupper
27547	"\u00AD\u0308\u000B",
58013	1+docFreeList.length;
32544	trip
20332	"while
19319	trim
27631	"\u0061\u2060\r",
1442	testrollbackexceptionhang
53726	Set}
47895	getValues(IndexReader
6538	trie
3563	Sets
29305	storingpositions
54475	DefaultSimilarity}
30160	(resources
50228	closing;
8220	closing:
2504	DefaultSimilarity{
56543	(reqDoc
29576	"\2\0\2\133\2\0\3\133\10\0\2\133\4\0\2\132\1\0\3\132"+
30507	<li>&lt;NUM&gt;:
20535	available,
11709	zzState;
8585	available.
9749	"\1\27\1\0\1\27\3\0\1\66\1\0\1\27\53\0"+
7866	Before
9221	deletes.numTermDeletes.get();
16340	macro
27498	"\u005F\u0308\u0041",
31735	#IndexUpgrader(Directory,Version,PrintStream,boolean)}.
64579	available;
41571	NUM_TERMS
66500	(code*31)
15286	testNumericField()
10200	"\2\u0103\10\264\1\141\12\264\1\0\3\136\1\0\2\136"+
11512	"\1\u0122\160\0\1\346\32\230\1\347\11\230\1\u0505\175\0"+
58038	initTermVectorsWriter();
10410	"\5\u016a\3\230\2\u016a\1\230\10\u016a\1\347\12\230\175\0"+
46670	,"))",
11027	"\1\u038f\175\0\4\u0390\2\0\1\u0390\15\0\1\u0390\6\0"+
60391	"\150\0\1\u0101\32\266\1\142\10\266\1\u015b\1\266\1\0"+
15974	getfilter
66526	text[textUpto+tokenTextLen]
63069	num_char
61353	"\1\u034d\1\u064e\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\25\u02e2"+
17387	cachingwrapperfilter
14865	missingValue);
63011	FUZZY_SLOP
40333	c.setScorer(this);
858	kk";
64731	"bb1"));
27892	"\u0031\u003A\n",
43457	SpanNotQuery(A,
28554	before_class
1823	fieldsStream.writeVInt(0);
15152	(AlreadyClosedException
53172	chars);
54956	writer.getAndIncrementGeneration();
55033	sameFieldOrder=random.nextBoolean();
9620	"\2\uab33\2\uabd6\2\uac79\2\uad1c\2\uadbf\2\uae62\2\uaf05\2\uafa8"+
32960	createPostingsArray(int
22890	(matches
32424	rmDir(dirPath);
10244	"\1\u0103\1\264\1\u0103\1\264\1\u0103\2\264\1\u0103\1\264"+
35168	reset(float
499	true
42268	assertcloneisequal
28684	"123"});
55071	i<threads.length;
59433	"\4\0\2\25\3\34\10\0\1\65\2\25\2\0\1\34"+
2973	withtimeout
24067	"51",
20349	testNoWrappedCollector()
25983	Fastmatch:
2457	int[1];
45908	,"ue",
25103	"nowildcardx"});
40126	Collections.unmodifiableCollection(infos.files(dir,
23334	re-instantiate
48647	endConsumer.finish();
42634	{"/Computers",
43832	==============
37228	getarcwithoutputcount
42574	testnumerictokenstream
28349	relationship,
48635	+maxFieldLength+
7762	doTest(int[]
53925	highsurrogateat3
33662	iter=0;iter<10;iter++)
18913	"5000",
66280	nextPerField;
58924	!storePayloads;
1010	LuceneTestCase?
27887	"\u0061\u002C\u0308\u0031\u002E\u2060",
42478	payload[]
56604	r.getSequentialSubReaders().length,
44336	U+01C5:
8401	args[3];
25171	"*tal*")),
20214	inherit
56112	testBoost()
58998	byte[1<<(i+1)];
44350	U+01C6:
24996	parallelmultisearcher
36633	"fake"
39129	(termArrays.size()
59280	"\1\26\2\0\1\25\1\77\32\25\1\0\12\26\2\0"+
54760	"Permission
42770	adjusting
49854	getfieldquerywithquotedmethod
29851	"\7\0\1\27\4\0\2\27\3\0\2\27\1\0\1\27"+
64901	//System.out.println("Threads
47949	throwing
19749	chunkStates[t];
52388	deletepayloadprocessor
29121	vectorized
60387	"\1\u0314\30\266\1\142\12\266\1\0\3\137\1\0\2\137"+
20941	continuing
26115	(FieldValueHitQueue<Entry>)
21295	CompoundFileWriter
41979	ftop
28201	MultiCollector
56483	((target
55822	"val",
41409	[output]");
51351	#prepareCommit
9907	"\12\0\1\32\210\0\2\32\6\0\1\32\153\0\1\32"+
52449	setFloatValue(final
32802	randomint
4378	lower=-1000,
56172	testboost
67353	modifier.deleteDocument(0);
18888	"Jim's",
28437	CharsRef("abc");
33445	checksumindexoutput
32378	writerthread
33342	example)
44330	U+01C4:
55277	assertEquals(terms1[j],
3451	totalDocCount
62572	lastdocscore
4214	doc",
61790	u1f0b
18978	InputStreamReader
66496	ch)*31+ch2;
30454	(comparison
30389	failonprepare
65285	Arc[1];
36804	ArcAndState<T>
13309	u1f15
27802	"\u0061\u0027\u2060\u3031",
53504	searchables[i].docFreq(term);
40760	leafy
21859	NO_BYTES
9618	"\2\ua103\2\ua1a6\2\ua249\2\ua2ec\2\ua38f\2\ua432\2\ua4d5\2\ua578"+
64648	flushBuffer(IndexOutput
5229	"\51",
14940	doublecomparator
38754	tp1.seek(enum1.term());
57117	fastGet(int
43256	assertTrue(tdocs.skipTo(24));
66681	runandreturnsyserr
30522	"\0\u026a\0\u0b44\0\u0bab\0\u0c12\0\u0c79\0\u046d\0\u0ce0\0\u0d47"+
68086	Align
65524	directory.fileLength(fileName)
258	THIS
56319	setPivot(mid);
892	trace.length;
1528	IndexFileNames.TERMS_EXTENSION),
27240	"\u0041\u0308\u003A",
21813	removeFields(String
31561	fcl)
35244	proxOutput.getFilePointer());
41977	elastic
41667	style=\"bold\"";
49999	LinkedList<FileEntry>
67001	out.writeObject(dir);
31743	printUsage()
24629	Occur.SHOULD);
27932	"\u0031\u003A\u0308\u0031\u002E\u2060",
12106	u1f33
8004	leads
60541	"\1\u0101\24\266\1\u0397\5\266\1\142\12\266\1\0\3\137"+
57028	border="1">
8308	isclone
26869	(endOffset
36033	bq2.add(new
36554	endAddress
46147	U+01B6:
55364	getIdString();
34906	extremely
46116	U+01B5:
49022	phraseSlop
12908	u1f1f
12507	u1f29
52423	assigned.
3491	getPause()
57727	analyzer).
16720	assertEquals(docCount-1,
10668	"\1\u0168\6\0\12\u0168\176\0\4\u0169\2\0\1\u0169\15\0"+
20819	java.util.Map)}
20194	requested.
68135	hitA.score
22308	toIntArray(Collection<Integer>
49571	getWildcardQuery(field,
40788	fst.readFirstTargetArc(arc,
22537	UnsupportedOperationException(clazz.getName()
819	analyzer);
21947	"numBytes="
48497	<b>public</b>,
59574	"\2\0\1\116\303\0\1\351\32\232\1\352\12\232\175\0"+
15798	setHasProx(boolean
18840	COMBINING
38807	FieldCache.DEFAULT.getInts(r2,
43366	nextInt)
29184	totalLength,
28258	non-maximum-scoring
17917	extremes,
14957	q1.add(t2);
42981	shorthand
43388	nextInt;
62399	testrewrite2
62396	testrewrite0
62398	testrewrite1
38411	IndexReader.openIfChanged(r2);
38815	FieldCache.DEFAULT.getInts(r1,
67027	objectoutput
59174	"\3\u614d\3\u61f0\3\u6293\3\u6336\3\u63d9\3\u647c\3\u651f\3\u65c2"+
58976	testSeekZero()
8873	however
22682	newByteRange(String
40504	Modifier.PRIVATE))
17241	fieldsReaderOrig.size()
25589	kids
55580	r3));
29174	totalLength)
37007	nodes[nodeUpto+1])
14931	getcomparator
59308	"\4\0\2\137\2\0\1\50\1\0\1\51\1\0\1\52"+
37187	fsts
58530	newWords)
6885	NumericRangeTermEnum(reader);
759	name.equals("DocumentsWriter.ThreadState.init
64424	value.length(),
8450	sleeptime
10937	"\2\0\1\u033e\15\0\1\u033e\6\0\12\u033f\1\u02d8\13\0"+
9576	"\1\ucb13\1\ucbb6\1\ucc59\1\uccfc\1\ucd9f\1\uce42\1\ucee5\1\ucf88"+
34579	super(query,
42967	positionlength
33663	i=0;i<19;i++)
31554	fci)
21728	openDelFileCount="
5551	0xffffff)
6497	testsuppressedexceptions
50945	(docWriter.deleteQuery(query))
2356	CheckHits.checkExplanations(query,
62714	int[subSearchers.length];
22723	FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}.
66188	testQueries02()
10749	"\226\0\1\u0197\13\0\1\u0122\160\0\1\u0279\33\0\12\u0224"+
27369	"\u002C\u0308\u0031\u0027",
16164	org.apache.lucene.search.spans.SpanNearQuery;
30269	scanenum
38853	WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(sdp));
65514	!fileName.equals(IndexFileNames.SEGMENTS_GEN))
30065	u1f62
60030	"\1\u01d3\1\0\2\u01ce\4\0\1\u01ce\3\0\1\50\1\0"+
58120	#commit()
9387	"\1\141\13\0\5\133\5\0\6\133\1\0\1\132\15\0\1\132\20\0"+
32326	try{
26148	trackdocscores
6124	ts.addAttribute(FlagsAttribute.class)
65843	tnum>=termsInIndex)
49780	jj_entries_loop;
49770	jj_entries_loop:
58760	random.nextInt(lim);
67637	testparallelreaderreopen
11442	"\1\u04d0\1\u04cf\13\0\1\u0325\161\0\4\u04d3\2\0\1\u04d3"+
39396	d1.add(newField(term.field(),
12104	u1ded
51863	toSync;
46678	,"<",
65561	deleteCommits();
39965	starts[mid+1]
66152	littleReader
17601	querytest
2331	shouldn't
54116	"+w,w,termAtt.toString());
53886	Version[]
4597	conf.getWriteLockTimeout());
51786	mergedDocCount;
17865	Term("body",
15284	assertTrue(exc);
38902	(toInc.tryIncRef())
26441	this.initialShift
29871	"\46\0\1\147\15\0\1\150\14\0\1\151\16\0\1\152"+
22921	acceptposition
36777	setPosWrite(int
63854	builder.append("a");
6965	WARNING:
59519	"\32\157\1\137\12\271\1\66\1\137\1\144\1\137\1\0"+
34922	searcher.search(sprq,
31668	trielong
65354	getmappedstatecount
25558	badEntries.add(cacheEntry);
65278	depth,
21184	fcsi
36932	q.insertWithOverflow(new
5992	writemasks
67993	optimizations)
16522	pre-populate
9372	"\3\0\1\142\4\0\1\142\1\143\2\0\12\134\41\0\3\133\2\0"+
41606	depth)
429	kind
15004	depth;
42204	TypeAttributeImpl
30258	indexfilename
31714	command
28737	obsoleteos
38814	SegmentReader.getOnlySegmentReader(r);
40237	MultiTermPositions
11695	"\1\1\2\0\1\1\1\0\1\1\10\0\3\1\15\0"+
30430	{"yourselves",
58286	UTF8SortedAsUnicodeComparator
62887	labeled
18617	"in",
39576	"freqPointer
21705	openDeletedFiles
18024	farsiindex
9505	"\0\u6354\0\u63f7\0\u649a\0\u653d\0\u65e0\0\u6683\0\u6726\0\u67c9"+
54775	!lockExists())
11459	"\1\u04df\1\u04de\1\u04df\1\u04ae\13\0\1\u02cf\226\0\1\u0435"+
16703	TestIndexReaderReopen.modifyIndex(5,
51833	toSync,
51818	toSync)
41907	getbyoutput
62494	requiredNrMatchers;
37434	queryterm
48968	href="../../../../../../queryparsersyntax.html">query
63905	s.substring(offsetAtt.startOffset(),
18440	f.format(score)
29876	"\3\0\1\34\4\0\1\34\2\25\2\34\10\0\1\52"+
67209	java.net.Socket;
66066	MultiFieldQueryParser.PROHIBITED_FIELD};
48045	kill
67657	firstreader
66149	NUM_EXTRA_DOCS
54924	waitForGeneration(targetGen,
25121	wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
26692	<code>term</code>.
21064	END_COUNT);
9704	"\117\0\1\25\12\0\1\25\12\0\2\25\11\0\1\25"+
27858	"\u0061\u002C\u002C",
59953	"\24\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
18866	"some-dashed-phrase",
30680	"\3\25\1\0\1\54\1\0\2\25\4\0\3\25\1\0"+
54111	log("Token
18222	thescore
59356	"\1\65\2\25\2\0\1\25\6\0\1\25\126\0\2\25"+
51578	deleter.refresh(merge.info.name);
31091	out.print(positions.nextPosition());
6372	querytext
26623	deletereader
935	doc.add(newField("contents",
7287	results[i]
35665	ntzTable[lowByte]
5284	SwitchTo(int
17392	headline
16877	assertEquals(reader.isDeleted(doc),
23854	(maxAgeSec
10770	"\32\230\1\347\3\230\1\u0296\6\230\175\0\1\346\3\230"+
29992	StandardTokenizer.IDEOGRAPHIC;
51132	lastCommitChangeCount
41456	FST<Object>(fst,
26420	Handle
63955	doFail);
43193	idIndex
26375	(((inputArray[inputByteNum
37797	MatchAllDocsQuery.this;
67441	assertTrue(segmentReader1.normsClosed("field1"));
38327	expectedshifts
11514	"\32\230\1\347\7\230\1\u0506\2\230\175\0\1\346\32\230"+
20213	rewrote
14623	SCORE
43066	swapReference
57027	<table
55891	leak,
63568	bitIndex;
18226	java.text.DecimalFormat;
34844	quick(incr=2)
30198	WildcardQueries
22924	candbytes
53572	CachedDfSource(dfMap,
26785	org.apache.lucene.analysis.StopAnalyzer;
50614	segFieldInfos
28221	collectors.length)
13261	uffe2
56648	policy:
65494	policy;
27053	"\r\u0308\u005F",
16289	MACRO:
6844	half-open
17526	ir.close();
37304	this.stopWords
61750	uffd8
30118	t.text());
17339	"headline
60533	"\4\0\2\137\150\0\1\u0101\32\266\1\142\6\266\1\u0382"+
51093	Collections.unmodifiableMap(segmentsToMerge));
42606	result.getPositions();
66292	TermsHashPerField(DocInverterPerField
43927	MACRON
17197	decRef()
7853	java.security.PrivilegedActionException;
8745	delID));
67845	setmaxmergembforforcedmerge
1965	compatibility
8331	arrayindexoutofboundsexception
61226	"\32\u02e2\1\u034e\3\u02e2\1\u05de\6\u02e2\175\0\1\u034d\5\u02e2"+
55216	(len2>0)
14832	locale.hashCode()^0x08150815;
42775	<code>{@linkplain
58919	this.indexOptions
58865	ufffd
61149	"\1\u034d\1\u02e2\1\u0595\30\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
58601	uffff
15802	(dir.fileExists(fileName))
3564	policy.
15499	"3.1"
11653	"\4\u0563\2\0\1\u0563\15\0\1\u0563\6\0\12\u0563\1\u0542"+
25887	policy,
60785	"\1\u0155\3\266\1\0\3\137\1\0\2\137\1\140\3\137"+
40568	BytesRef(s),
12459	ufff6
15740	lockless
33540	jj,
64855	byteStarts;
67225	s.accept();
56100	QueryUtils.checkUnequal(cswcq(new
31208	shouldStillBeCompressed)
4805	assertEquals(MyWarmer.class,
44364	U+00CA:
34210	#setTermIndexInterval(int)}.
12860	uffec
49514	LPAREN:
58325	[reserved
1515	FieldInfos(directory,
51136	drop
50436	BufferedIndexInput.BUFFER_SIZE;
48581	stringValue
53536	docs.getMaxScore());
62653	lengthfilter
11891	yylength()-1.
31834	jar
32385	testnativefslockfactorylockexists
48859	assertTrue(freqVector
50426	BufferedIndexInput.BUFFER_SIZE,
22399	jan
61345	"\1\u0647\6\u02e2\175\0\1\u034d\2\u02e2\1\u0608\27\u02e2\1\u034e"+
42354	tps[i]
4244	TestNumericUtils.FLOAT_NANs)
48853	termVectorOffsetInfo
52444	setIntValue(final
40617	terms[idx]
65198	frontier[idx-1].addArc(input.ints[input.offset
17135	LinkedHashSet<CoreClosedListener>());
24815	this.density
16463	locked!");
44763	,"I",
36741	getNodeCount()
65751	createDummySearcher()
61220	"\1\u05d6\13\u02e2\1\u034e\12\u02e2\175\0\1\u034d\11\u02e2\1\u05d7"+
15921	other.name.equals(name);
66555	while(text[pos]
3869	Characters
2500	tf(float
57154	endmask
501	testdeletereaderwriterconflictfullmerge
31719	[-delete-prior-commits]
58411	CharArraySet.unmodifiableSet(set);
29703	"\11\0\1\25\20\0\1\25\22\0\1\25\10\0\3\25"+
7179	reached
40651	idx));
5462	jjstartnfawithstates_1
8721	Map<String,Document>
27890	"\u0031\u003A\r",
58328	preflex's
39038	iter2.setValue(val*100);
5419	jjstartnfawithstates_3
10508	"\175\0\1\u01a3\5\230\1\u01a5\4\230\1\u016a\17\230\1\347"+
20123	e.getValue();
5473	jjstartnfawithstates_2
62261	"smith")
55991	if(positions
6348	qp.parse(query);
7430	assertion
50592	docWriter.setInfoStream(infoStream);
26045	anyone
16411	e.getValue(),
17088	isignoringpositions
50839	mergeScheduler.close();
40432	jdk
38447	Field.TermVector.YES));
28438	assertEquals('b',
64032	l1;
5721	setkeyword
2176	accessed
2688	counterThread.stopTimer();
34969	filter:
4815	indexingchain
8622	filter;
44722	U+00CF:
41149	IntsRef[numWords];
38585	fileDirName
42568	NumericTokenStream();
5127	l1,
18716	ØªØ®ØµØµÛ
28013	"\u0031\u002C\u0061\u003A",
5219	l1)
59903	"\12\232\175\0\1\351\13\232\1\u017f\6\232\1\u0180\7\232"+
32745	Integer.toHexString(binary[byteNum]
15261	BufferedIndexInput.BUFFER_SIZE);
17166	purge
50276	#commit}.</p>
59850	"\1\26\2\0\1\25\1\u011b\32\36\1\142\12\333\1\0"+
14918	interpreted
37133	job
23682	org.apache.lucene.search.NRTManager;
37706	asserting
29807	"\1\0\1\25\10\0\1\25\1\0\2\25\21\0\1\25"+
39340	OpenBitSetDISI(int
50349	readerMap.get(info);
35438	interpreter
5131	l2)
21100	lockInterruptibly()
3666	filters
49370	newMatchAllDocsQuery();
64799	-validTerms.length-1;
23504	two,
33300	expecteds.set(val,false);
6155	tochararray
6501	getmessage
154	writer.close();
27588	"\u0300\n",
16914	testclonewritetoorig
9971	"\3\136\3\0\1\136\4\0\2\136\2\0\1\47\1\0"+
31197	"29.nocfs",
37597	two:
43529	assertEquals(i,bv.count());
24833	random.nextBoolean();
16064	indexer",
6385	getrangequery
33697	writer.close())
15395	hmmm
60515	"\25\266\1\u0388\4\266\1\142\12\266\1\0\3\137\1\0"+
15459	<name>.nrm
60723	"\4\u02e2\1\u0428\2\u02e2\1\u0428\14\u02e2\1\u034e\12\u02e2\175\0"+
56210	d2.add(newField("default","one
10796	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\5\264"+
15764	setDocStoreIsCompoundFile(boolean
40539	desiredassertionstatus
66221	random.nextBoolean(),
47967	enforceSingleSegment);
9079	TestIndexCommit
30608	"\6\0\1\102\56\0\1\102\3\0\1\102\2\0\1\102"+
26868	this.endOffset
1053	RuntimeException");
17989	"H\u00D8T",
45277	"Ã¶"
39836	UnsupportedOperationException("call
8559	filter)
36695	(arc.flag(BIT_TARGET_DELTA))
19677	5*postings[0].docFreq;
18065	filter,
1345	cannedtokenstream
53332	merge(Object
60978	"\1\u04f6\6\0\1\u04f7\2\u04f8\1\u04f7\5\u04f8\1\u04f9\14\0"+
56520	<code>ReqExclScorer</code>.
7199	filter.
636	t.printStackTrace(System.out);
24730	assertEquals(((Float)o1).floatValue(),
2469	warning
65204	lastNode.output
44366	U+00CB:
35764	twos
21665	(wildcardEquals(pattern,
11197	"\4\0\2\136\150\0\1\376\32\264\1\141\11\264\1\u030c"+
64074	testBufferedIndexInputRead()
10199	"\1\376\3\264\1\u0103\1\264\1\u0103\10\264\1\u0103\1\264"+
35676	ntz(int
64643	clone.bufferPosition
65645	Tell
5918	size();
10858	"\1\u02f2\10\230\1\347\12\230\175\0\1\346\4\230\1\u02f3"+
40423	documents</b>
26205	roundfixedsize
57712	.setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));
56918	"\1\0\1\11\2\52\1\0\1\30\4\0\1\30\1\31"+
841	(count++
43833	get.test.cases.pl
44716	U+00CC:
21503	i<largeBuf.length;
15304	typeAnswer
60805	"\33\0\12\u0476\175\0\1\u0475\33\0\1\u0415\1\u0477\1\u0476"+
18446	lengthnorm
57458	doc.add(newField("dc",
40235	(readerTermDocs[i]
31924	DEFAULT_LONG_PARSER
10757	"\175\0\1\346\3\230\1\u0283\26\230\1\347\2\230\1\u0284"+
52834	"Software"),
2487	computeNorm(String
61113	"\3\0\1\137\4\0\2\137\150\0\1\u0101\1\266\1\u057b"+
55057	compare(Fieldable
33275	"Rolled
42934	reflector.reflect(TypeAttribute.class,
53163	chars.offset;
44718	U+00CD:
37904	put(K
51866	testPoint("midStartCommitSuccess");
51822	exist";
39017	Iterator<Map.Entry<Object,Integer>>
53734	#stringIterator()}
20325	testIllegalCollectorOnReplay()
9713	"\5\0\1\25\7\0\1\25\3\0\1\25\2\0\1\25"+
51048	maxNumSegmentsMergesPending()
17136	SegmentCoreReaders(SegmentReader
29990	StandardTokenizer.NUM;
2322	super.tearDown();
30183	term.compareTo(enumerator.term())
64319	termCountLimit
57466	exist",
21560	pre;
26683	Searcher#search(Query,int)})
39449	checkskipto
43836	$file
36511	Math.max(maxBytesPerArc,
49179	this.dateResolution;
44720	U+00CE:
43194	fieldname);
20655	switchDir);
58784	asUnicodeChar(s.charAt(0));
23405	String.valueOf(++id));
42379	forbidden
29985	"\1\116\2\0\4\116\2\0\1\116\40\0";
18548	"Õ¯Õ¡Õ´Õ¡Õ¾Õ¸ÖÕ¶Õ¥ÖÕ«",
62924	contentFieldIndex);
6293	(field1:query1)
45086	U+00D1:
46817	(expectedIter.hasNext())
48638	stream.end();
337	its
9028	output.writeBytes(scratch.bytes,
64711	makeIndex("aa0",
55927	iv;
48069	machines)
34416	(ramBufferSizeMB
25555	rfMap.get(rf))
41519	Collections.sort(sortedAllIDsList);
49419	ParseException("Term
2692	iw)
18238	TestSimilarity
33735	Score
50238	HashSet<MergePolicy.OneMerge>();
28964	cachedfieldsourcehashcode
62931	"_188.cfs");
38472	assertTrue(indexedFieldNames.contains("text2"));
48911	DocNumAwareMapper()
40108	machines,
65335	ist
28290	scoreSum
44256	U+00D0:
56169	pres
54307	maxbyteslengthexceededexception
38907	testcommituserdata
14783	SCORE:
19825	prev
7002	(!maxInclusive
48666	exist).
9304	"\1\220\1\216\1\223\2\221\2\240\1\222\1\202\1\147\1\226\1\203"+
11667	"\14\0\1\u0325\11\0";
68039	leftPos.getPositionIncrement(),
45180	U+00D3:
35200	lastSkipFreqPointer;
39890	openReadOnly=true
16659	minimum
34306	KeepOnlyLastCommitDeletionPolicy}
67722	termBuffer.length)
38328	neededshifts
49731	(jj_scanpos
50246	readerPool
48143	inSameDoc
55687	closeDir()
4888	iwc
4353	testRandomTrieAndClassicRangeQuery_NoTrie()
15056	"_0";
38988	RANDOM_MULTIPLIER;
59836	"\1\u0153\1\u015a\31\266\1\142\12\266\1\u0154\3\137\1\0"+
10211	"\7\u0103\1\u010f\3\u0103\1\264\1\u0103\1\264\3\u0103\1\141"+
35043	hackidy
16479	prepareindexandsnapshots
46765	U+204F:
51315	doFlush(true);
43684	stringtodate
43131	topCollector.topDocs(0,
52495	iw2
45177	U+00D2:
17177	getTermsReader()
52488	iw1
43700	getSpans(IndexReader
46742	U+204E:
37474	enough",
52535	ir1
52536	ir2
29179	String(charBuffer,
61209	"\1\u02e1\226\0\1\u0503\13\0\1\u02e1\160\0\1\u034d\25\u02e2"+
34955	ir,
5237	"\175",
40553	ir)
59077	UAX29URLEmailTokenizerImpl
17681	getTermsEnum(IndexReader
30893	ScoreDoc(doc
21392	is)
65760	freq[i]
40589	ir;
40991	random.nextBoolean())
30956	PQ's
58160	(immediately),
5337	jjMoveStringLiteralDfa0_1();
65606	message("refresh
66740	<p><h3>Object
27953	"\u0031\u0027\u0030",
65698	RefCount(String
38735	curField2
38733	curField1
39365	fastFlip(doc);
11423	"\1\347\1\230\1\u012f\10\230\175\0\1\346\13\230\1\u04c3"+
59841	"\5\266\1\142\12\266\1\u0154\3\137\1\0\2\137\1\140"+
53293	Math.min(output1,
66177	collector.totalHits,
59945	"\242\0\1\u0191\15\0\1\50\1\0\1\51\1\0\1\52"+
24354	v2[j];
48404	Investigate
49321	cal.set(Calendar.MINUTE,
748	threads[i]
50680	though.
36524	nodeIn.numArcs
12206	u5edf
23766	though,
9112	indexcommit
43187	prio
55093	.setReaderPooling(doReaderPooling).setMergePolicy(newLogMergePolicy()));
20412	oldest
35826	it:
65827	oq.add(bq,
49526	firstQuery;}
67678	irs
35261	FreqSkip,ProxSkip
55811	IndexWriter.IndexReaderWarmer()
55408	docsandwriter
3303	{@code
8932	it.
3947	it,
39627	isi
21172	invocations,
40257	getkeepfullydeletedsegments
24362	field1(field2)(docID):"
3003	Once
32176	lf.lockPrefixSet);
60275	"\25\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
28978	tvx;
13008	u5ecb
54639	it;
53818	older,
20744	(Payload)
33594	checkAnalysisConsistency(random,
26847	newbuffers
37354	is.
27971	"\u0031\u0027\u0061\u002C",
12607	u5ed5
50132	LockObtainFailedException}.
49381	is,
26454	d8000
51354	it)
43615	reader.getCoreCacheKey();
30215	sameTermInfo(TermInfo
1171	it!
51153	pendingMerges.clear();
15457	is;
32578	IndexableBinaryStringTools.getDecodedLength(encoded,
6689	is:
19536	<tt>Closeable</tt>s.
8516	<code>reader1</code>
19479	<tt>Closeable</tt>s,
41708	assertEquals('a',
55798	Term("field3",
19793	doTestRank(INT_FIELD,FieldScoreQuery.Type.BYTE);
41990	outofbounds
248	everything
45761	U+00D9:
31517	f.setIndexOptions(IndexOptions.DOCS_ONLY);
13409	u5ec1
5141	jjStopStringLiteralDfa_1(int
57381	(a.bits[i]!=0)
58264	RuntimeException(uee);
12100	u1b61
57464	allFiles.addAll(ic.getFileNames());
56391	offsetEnd
45188	U+00D8:
16834	bitvector,
40930	assertTrue("accepted
27177	"\u3031\u0308\u3031"
66197	testQueries06()
51803	buffer.append(reader.toString());
30055	u1b5c
42422	b2.length)
30530	"\0\u2301\0\u2368\0\u23cf\0\u2436\0\u249d\0\u2504\0\u256b\0\u25d2"+
20646	fsd.listAll();
38227	random.nextInt(100)-50;
67871	List<Token>
50834	Give
12501	u1b57
43391	initBytes()
32286	assertNull("Lock
43579	bitvectors
68141	RollingBuffer<Position>()
33018	parallelpostingsarray
12902	u1b4d
57126	prob
9105	ic2);
66048	((+stop))
54653	<p>Implements
51749	prox
13303	u1b43
11437	"\2\0\1\u04ce\15\0\1\u04ce\6\0\12\u04ce\1\u04cf\13\0"+
63309	0x65421,
42827	setEndOffset(int
978	threads[t]
10047	"\1\25\2\65\5\0\1\25\3\0\1\25\1\65\1\0"+
37751	assertEquals("check
22795	(!this.field.equals(other.field)
49613	goop2.image.length()-1);
61177	"\4\232\1\u05b0\5\232\175\0\1\351\16\232\1\u05b1\13\232"+
23546	limit)
9849	"\3\0\1\176\7\0\1\56\2\0\1\57\4\0\1\177"+
34178	connected
39481	acceleration
10231	"\4\0\2\136\150\0\1\376\1\u0103\1\264\6\u0103\1\u0115"+
42859	other.startOffset
2498	idf(int
33948	parts:<br>
61784	u1b39
17971	danishIndex
58168	CREATE_OR_APPEND,
27069	"\r\u0308\u0031\u003A",
32754	charArrayDump(charBuf.array(),
51290	info.setDocStore(info.getDocStoreOffset(),
67190	entry.setPositions(newPositions);
29595	"\6\143\1\0\2\143\1\142\2\0\5\142\1\0\1\142\1\0\6\143"+
42804	termBufferLength
51892	limit.
45184	U+00D5:
57502	indexSize
11057	"\214\0\2\u0340\1\0\2\u0340\2\0\1\u0340\1\0\1\u0340"+
41303	limit,
40808	willRewrite
36305	nodeCount
38241	0x7fffffffffffedL,
37161	version_start
60072	"\2\137\150\0\1\136\4\u0144\2\137\1\u0144\15\137\1\u0144"+
27129	"\u000B\u0308\u3031",
29339	limit;
36806	chain;
7892	Only
8116	ByteBuffer[nrBuffers];
17300	maxdoc
36808	chain)
28155	midletter
19968	chain,
45182	U+00D4:
14564	hangul
47997	docs[index];
10739	"\1\u0272\175\0\4\u0273\2\0\1\u0273\15\0\1\u0273\6\0"+
54195	ByteBlockPool(new
19976	purposes.
30688	"\1\54\2\0\2\54\1\0\3\54\1\0\1\54\2\0"+
50731	#setMaxBufferedDeleteTerms
11473	"\1\346\3\230\1\u04ea\26\230\1\347\12\230\175\0\1\346"+
34464	merging,
50206	merging.
16309	making
56782	.setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)
46796	U+2053:
21760	releasesearcher
21818	getFieldable(name);
34264	merging;
24991	izj
42671	merging:
599	cycle");
27522	"\u005F\u0308\u0061\u003A",
23649	""+id),
53944	decRef).
3226	addition
43014	decRef(G
15066	FieldsReader
46836	chaine
5715	attributeimpl
30100	indexLength;
35492	B[\1]\)/g'
45186	U+00D6:
46732	U+2052:
35251	DocSkip,
20733	Copies
58077	(numVectorFields
46754	U+2044:
19343	
55653	addDirThreads.NUM_THREADS
64198	0xFFFFL
25594	kid
7833	getDocIdSet(IndexReader
25716	preserve/log
20914	intervening
66281	Copied
8776	fieldids
23691	SearcherLifetimeManager();
58339	copy.copyBytes(other);
12207	u5f82
2780	limits
48444	scorerqueue
7252	parameters,
28979	tvd;
48235	parameters.
15001	MultiPhraseQuery();
14534	zzatbol
46621	U+2045:
5367	error_column,
63860	{builder.toString().toLowerCase(),
29688	"\0\u0f4a\0\u0fb1\0\u1018\0\u107f\0\u10e6\0\u114d\0\u11b4\0\u121b"+
16012	docs...
29069	tvd,
48026	#createOutput(String)}).
10587	"\2\0\1\u01e0\15\0\1\u01e0\6\0\12\u01e0\176\0\4\u01e1"+
39710	DirectoryReader(directory,
46634	U+2046:
4014	useoldapi
10061	"\1\0\1\25\6\0\1\25\1\0\2\25\123\0\1\25"+
50441	(info.dir
52768	assertEquals(s.explain(query,
19664	rarest
830	ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());
21523	FILE_COUNT
1946	storedCount
12101	u1c04
34303	getOpenMode()
16066	indexer2",
65527	CommitPoint(commitsToDelete,
46774	U+2047:
50303	getReader(config.getReaderTermsIndexDivisor(),
12457	ufeb0
62877	typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.ACRONYM]);
49251	buffer.getAttribute(PositionIncrementAttribute.class);
67194	*<br/>
17990	"MAND"
30914	7.9793315f,
39349	inPlaceAnd(DocIdSetIterator
44707	,"HV",
39968	hasNorms(String
67520	Exception;
40394	(3.1)
19510	Exception>
10171	"\1\304\1\305\1\306\1\307\1\310\1\311\1\312\1\313"+
51535	!keepFullyDeletedSegments;
2484	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
52704	StandardAnalyzer(TEST_VERSION_CURRENT)).setMergePolicy(newLogMergePolicy()));
11818	System.arraycopy(zzBuffer,
56546	exclScorer,
6478	Exception:
39391	testSimpleSkip()
42645	"multiField";
65531	commitPoint;
28819	skipBuffer[0].writeTo(output);
59696	"\1\u0107\2\266\2\u0107\1\142\12\266\1\0\3\137\1\0"+
16861	clonedReader.close();
46777	U+2048:
28037	"\u0031\u002E\u2060\u000B",
33136	OffsetAttributeImpl);
56300	numberOfLeadingZeros(x
28646	"is",
9202	PrefixCodedTerms.Builder
23265	Map<Term,Integer>
4276	cTopDocs
58165	null).setOpenMode(mode));
38127	testSortableFloatNaN()
53882	CharacterUtils.newCharacterBuffer(2);
46555	LOW-9
63021	RANGEIN_QUOTED
16319	key
24717	m);
17259	freqstream
60500	"\175\0\1\351\24\232\1\u037d\5\232\1\352\12\232\175\0"+
725	partway
40641	assertNotNull(fst);
46722	U+2049:
19159	Ø§ØØ
17846	Exception.
37953	queue);
50891	Exception,
18236	TestRanking.zip
44667	,"H",
19965	mapbackedset
38239	0x7fffffffffffecfL,
52921	0xFFFD;
40371	TopScoreDocCollector.create(3,
51156	while(runningMerges.size()
30150	getSkipInterval()
37515	foobarword
64525	this.exclude.equals(other.exclude)
25526	insanity.addAll(checkSubreaders(valIdToItems,
21364	byte).
53627	SortField.DOC)
36226	flag(int
24455	SortField.DOC,
26949	MARK
36772	ArrayUtil.grow(bytes);
50629	pushMaxBufferedDocs();
64787	validTerms
53299	valid(_output,
29168	char[10];
9640	"\3\u1113\3\u11b6\3\u1259\3\u12fc\3\u139f\3\u1442\3\u14e5\3\u1588"+
2857	counterThread.setResolution(TimerThread.DEFAULT_RESOLUTION);
31200	"31.cfs",
14860	SortField.DOC:
28003	"\u0031\u002C\u0308\u0030",
13410	u5f64
60507	"\150\0\1\u0101\32\266\1\142\5\266\1\u0384\4\266\1\0"+
19770	postingsandfreq
16388	PersistentSnapshotDeletionPolicy
28980	tvf;
13009	u5f6e
62811	fieldidx
6747	<code>precisionStep</code>).
64372	pendingterms
26511	DocHelper.setupDoc(docToDelete);
24742	hits.scoreDocs[1].doc);
58645	IndexReader.open(w.w,
18992	urls.length
65756	int[nTerms];
12608	u5f78
11858	<b>cannot</b>
60498	"\1\352\12\232\175\0\1\351\32\232\1\352\1\232\1\u037b"+
15708	i++){
46193	U+00B9:
27091	"\n\u0308\u002C",
57992	tvf,
47451	kra
59465	"\1\54\2\0\1\55\3\0\1\200\7\0\1\57\2\0"+
22635	includeLower;
12099	u1abe
19052	testURLs()
29803	"\24\0\1\25\3\0\1\25\6\0\2\25\5\0\1\25"+
8089	buffers[curBufIndex]
17440	gettermfrequencies
32359	lockprefixset
38965	HashMap<String,Integer>
25829	c.rewrite(reader);
16173	"primitive"
20403	auto-sorting
42341	sb.append(terms[i].text);
18751	Î¬ÏÎ¸ÏÎ±
39278	termArrays1,
9442	zzUnpackCMap(ZZ_CMAP_PACKED);
24705	Float.valueOf(hits[i].score));
26102	MultiComparatorScoringNoMaxScoreCollector(queue,
54946	genLock.isHeldByCurrentThread();
23694	"new"
41131	stopNode[0]);
42331	ram.close();
22640	includeLower,
39279	termArrays2)
42036	OneComparatorFieldValueHitQueue<T
52517	assertFalse(td.next());
5951	"Packed64(bitsPerValue="
60430	"\1\u020e\6\0\12\u020e\176\0\4\u0335\2\0\1\u0335\15\0"+
42095	entry.score,
3878	Unicode
1285	assertEquals(numDocs2,
826	testExceptionOnMergeInit()
22067	constrains
67818	constraint
27652	"\u0061\u2060\u0030"
6584	algorithm
30054	u1af5
14713	this(field,
22958	CollectionUtil.insertionSort(list1);
29557	"\1\133\10\0\33\132\5\0\4\132\1\136\13\0\4\133\10\0\2\137"+
34640	nonPayloadExpl
14594	usual
36893	this.nodeRefToAddress
48422	currentDoc.
27373	"\u002C\u0308\u0031\u002E\u2060",
48421	currentDoc)
15939	delgen
27682	"\u0061\u2060\u0031"
21949	copyBuf[]
62655	addAndGet(long
50163	Points
55865	multisegment
48395	currentDoc;
54462	NormsWriter
41480	BytesRef("aa"));
25625	getAllDescendantReaderKeys(Object
2778	within
1870	FIELD_IS_BINARY;
42409	Math.log(10));
29151	occur!
52579	bq.isCoordDisabled();
50578	write-once.
46547	U+00BB:
9166	write-once,
20049	occur)
401	dir.setPreventDoubleWrite(false);
42298	assertEquals(testData[i],
52972	((utf32
36890	System.out.println("TOT
12858	ufea6
16248	Term[]
36979	backwards,
24711	m1,
47231	diagonal
68147	posUpto
40255	dobody
19667	rarer
55133	!(r1.maxDoc()==r2.maxDoc()
29727	"\2\0\5\25\2\0\2\25\4\0\6\25\1\0\2\25"+
16396	psdp
31966	appropriate
5586	assertEquals(f4,f5,0.0);
10630	"\4\0\2\136\150\0\1\376\32\264\1\141\1\u0205\11\264"+
33134	OffsetAttributeImpl",
51468	merge.info).
17157	freqStream
53953	bytesRef;
7798	testLazyBroken()
34390	whichever
58055	perDoc.docID="
24713	m2)
54792	LockReleaseFailedException(
51751	merge.info);
53168	bytesRef,
29735	"\1\25\10\0\1\25\1\0\2\26\1\0\1\25\10\0"+
56694	.setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)
56096	"data",
13302	u1aa0
6518	equivalent
27398	"\u0027\u0300",
15358	no_tf_key
8388	"Make
11763	Breaking
29905	"\1\0\1\52\4\0\1\52\1\0\1\52\2\0\2\52"+
20769	targetoffset
16014	Field("id",
23524	exc:");
63932	testnormalizecharinsubclass
23152	assertTrue("searcher
60916	"\1\u04c8\2\u04c9\1\u04c8\5\u04c9\1\u04ca\175\0\1\u0349\4\u04cb"+
55561	createIndexNoClose(!doFullMerge,
12500	u1ab4
48054	Lock}.
33536	kkk
1827	((long)
15201	fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))
18954	"<NUM>",
18580	"áá»",
67623	assertEquals(1+v,
42185	assertCloneIsEqual(att);
50856	(docWriter
1986	scratchArc
64072	is.readLong());
12901	u1aaa
21931	occur.
65920	occur,
54496	testGrowth()
23075	subSearcherQuery
60660	"\1\u03a1\4\u0413\2\0\1\u0413\15\0\1\u0413\6\0\12\u0417"+
31070	merger.createCompoundFile(merged
38286	9500,
66260	occur;
50714	2048.</p>
241	assertEquals("deleted
46179	,"(z)",
14520	astate
43911	U+00C1:
13260	uff3f
11811	occurs
6766	showed
49122	setEnablePositionIncrements(boolean
15342	indexoptions
40533	imperative
34967	(0.0f,
12458	uff53
58552	assertFalse(CharArraySet.EMPTY_SET.contains("foo"));
42276	testkeywordattribute
21828	NO_FIELDS
1502	turn
43908	U+00C0:
39281	termArrays2.size())
48007	fullmerge
46719	U+203C:
29127	docNumber,
33920	simpler,
23582	testFlushPushedDeletesByRAM()
18935	String[]{"QUOTED",
9577	"\1\ud02b\1\ud0ce\1\ud171\1\ud214\1\ud2b7\1\ud35a\1\ud3fd\1\ud4a0"+
35605	B[i+5]);
32386	lockfile
34851	TestPosIncrementFilter(TokenStream
3329	jvm
7941	MMapDirectory}
48091	is.copyBytes(os,
62223	nextUpto
1490	MockTokenizer.KEYWORD,
22582	prependattclass
2594	org.apache.lucene.util.ThreadInterruptedException;
36252	smarter
43076	mayberefresh
33306	System.out.print("\t
61749	uff35
3818	Tokenizer}
35602	B[i+5]))
36097	org.apache.lucene.util.CodecUtil;
6698	rounded
24251	"AGICE");
64804	getNonExistTerm(validTerms);
54682	NativeFSLockFactory(String
24483	(full);
58679	Tokenizers
19287	dashed
40836	(random.nextBoolean()
52574	uniques
12859	uff49
30661	"\1\25\1\0\1\25\2\0\1\25\17\0\1\25\3\0"+
50176	(1,000).
10519	"\1\u016a\7\230\1\347\12\230\175\0\1\u01a3\23\230\1\u016a"+
8890	_innerSet;
33875	simplest
3853	useOldAPI;
10044	"\1\25\2\0\3\25\1\0\1\25\1\0\1\25\2\0"+
25649	(this.readerKey
33557	int[]{0,2,4,6,8,11,16,20},
37121	a.compareTo(b);
25730	cacheentrys
20544	timing
25688	label;
63005	LPAREN
19397	matchDoc(int
50129	MergeScheduler}).</p>
58598	jsp
63030	Literal
57020	1.5_06
67868	1!!!
42338	.setOpenMode(OpenMode.CREATE)
12052	labels
8460	instantiationexception
27436	"\u0030\u003A",
12503	u1c9d
31029	siMerge
11812	zzRefill()
29450	InBeforeClass
51766	MB",
19018	{"mailto",
34004	multi-terms
10343	"\1\u0141\3\0\1\136\4\0\2\136\150\0\1\376\20\264"+
34382	enabled");
60268	"\231\0\12\u02ad\10\0\1\u016c\1\u016d\1\u016e\162\0\1\u0101"+
59436	"\5\0\1\25\3\0\1\25\1\34\1\0\1\25\2\0"+
48659	postingtable
25495	Set<Integer>>(17));
19802	doTestRank(INT_FIELD,FieldScoreQuery.Type.FLOAT);
55471	"synonym"
22740	lowerVal.longValue();
60147	"\13\0\1\u0126\161\0\4\u022c\2\0\1\u022c\15\0\1\u022c"+
28330	subScorers[rchild];
15327	FieldCache.DEFAULT.getInts(sub,
4802	writer.getConfig().getWriteLockTimeout());
28171	accent
29452	VALUE1);
56963	TOKEN_TYPES
59273	"\2\0\1\64\41\0\2\25\1\65\1\0\1\66\1\0"+
58977	MMapDirectory(_TestUtil.getTempDir("testSeekZero"));
14517	zz_error_msg
23135	"doc0"));
65294	label,
36755	label.
37775	normsField
64377	int[valueCount];
21211	SimpleFSDirectory(file,null);
25690	label)
64053	assertEquals("\u2620",is.readString());
9180	Terms,
6657	3825</code>
19788	FunctionTestSetup
52949	(out.length
49589	goop1
49597	goop2
14622	(relevance).
43100	"ipod
53563	rewrite(original);
1533	indexEnum
8261	jre
29148	Terms:
44362	U+00C9:
40615	inputModeToString(inputMode));
52965	12)));
55619	assertEquals(500,
27705	"\u0061\u003A\u0041"
62426	assertFalse(i.equals(i2));
7821	accept
66231	Term("field2",
66876	addvalue
25345	CharArraySet
51570	mergeInit(merge);
50292	consumed.</p>
27584	"\u0300\u0001",
15923	name.hashCode();
32394	niofsdirectory
35877	bq.clauses())
44359	U+00C8:
42730	TokenFilters
56110	result[i].score,
42929	reflector.reflect(PayloadAttribute.class,
34512	conveniently
35352	teststoplistpositions
66201	testQueries07()
28606	tokenStart);
37368	out.writeString(codec);
27484	"\u005F\u0308\u0001",
3652	Normalizes
36056	"sorter",
51119	pendingCommit.rollbackCommit(directory);
3659	<i>in</i>.
11541	"\2\0\1\u051d\15\0\1\u051d\6\0\12\u051d\1\u0500\13\0"+
61474	"\1\u034e\11\u02e2\1\u03c1\175\0\1\u034d\3\u02e2\1\u06a1\26\u02e2"+
23328	mergeScheduler));
21925	#toString}.
12904	u1c93
24491	8));
10927	"\1\u0168\1\u0169\2\0\2\u0214\4\0\1\u0214\152\0\4\u0214"+
55363	ArrayList<Field>
41846	outputs.add(prefixOutput,
39150	idfExp;
55012	IW.getReader
67908	part.split("/");
37265	rarely
39618	(!isIndex)
35008	short-circuited
48986	latter
22929	TestCollectionUtil
1178	length
44195	U+00C7:
63924	testlowercasetokenizer
53883	CharacterUtils.newCharacterBuffer(1);
61102	"\1\352\12\232\175\0\1\351\2\232\1\u0571\27\232\1\352"+
51743	merge.readers.size());
13305	u1c89
3064	access
19553	Exceptions
42102	multicomparatorsfieldvaluehitqueue
64280	IllegalArgumentException(type+"
56403	byteslicewriter
38483	tvFieldNames.size());
61786	u1c7f
38906	filenotfoundexception
41910	seekceil
59307	"\1\137\1\0\1\137\1\145\1\140\3\137\3\0\1\137"+
34115	tord.keySet().toArray(new
39188	idfExpl
44086	U+00C6:
26657	nexttoken
56601	assertEquals("lastCommit.segmentCount()="
37906	queue),
30058	u1c91
12709	u9fc7
28142	uff19
48607	docState.analyzer.reusableTokenStream(fieldInfo.name,
7594	retval.append("\\\"");
42467	Thread[numThreads];
28141	uff10
47	compliance
20960	resize
27388	"\u0027\u002C",
60550	"\15\0\1\u039f\6\0\1\u03a2\1\u03a4\1\u03a3\2\u03a2\2\u03a3"+
43922	U+00C5:
58487	assertFalse(String.format(falsePos,
53401	(SimpleFSIndexInput)super.clone();
30057	u1c2a
10649	"\2\0\1\25\1\u011a\32\36\1\141\1\u01d1\1\u0219\1\u0218"+
67598	assertTrue(sr1.deletedDocs==sr2.deletedDocs);
10260	"\1\201\41\0\1\25\1\65\7\0\1\65\2\0\1\25"+
29253	format_utf8_length_in_bytes
39704	infos.read(directory,
26429	ByteBuffer.wrap(outputArray);
56421	conf.setMaxBufferedDocs(2);
54801	(!path.exists())
20602	WhitespaceTokenizer}
35412	Kind.
61599	u9fb3
53261	"TwoLongs:"
38966	hmap
43540	bv.write(d,
30415	voc.txt
56720	preCount);
50432	get(SegmentInfo
23243	searcher2});
26268	Export
67671	normsclosed
34929	testspanmultitermquerywrapper
40174	readerTermDocs;
43920	U+00C4:
17487	fieldInfos.size());
3599	expunge
27506	"\u005F\u0030",
40546	org.apache.lucene.util.LineFileDocs;
24850	""+numDocs,
11106	"\1\u03d0\1\264\1\141\12\264\1\0\3\136\1\0\2\136"+
55461	assertEquals(502,
37647	lastDoc.get(k);
42274	testpayloadattribute
40749	this.output
43917	U+00C3:
49695	QueryParserTokenManager(stream);
25255	"abc**"},
41107	finalOutput="
35275	lastSkipPayloadLength[level]
54677	subclass,
60175	"\150\0\1\u0101\24\266\1\u0253\5\266\1\142\12\266\1\0"+
24992	jzi
67791	subclass.
25824	clauses.get(0).getSpans(reader);
15403	faultyfsdirectory
13110	u9fbd
29655	"\2\60\7\73\1\72\7\73\7\52\1\15\1\52\1\75\2\45\1\44"+
43914	U+00C2:
52123	forcemergedeletes
12308	u9fd1
28687	System.out.println(s);
63901	StringReader(s));
19502	resource2,
19554	detected)
56756	.setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy).setMergePolicy(newLogMergePolicy());
46699	U+207A:
22498	reflection.
48642	LUCENE-2387:
66193	testQueries04()
20830	PerFieldAnalyzerWrapper(new
8268	objects
12205	u5e3c
30092	<Term,
25729	getcacheentries
64825	numNext
24399	Math.pow(
31916	FieldCache.class.getName()+".DEFAULT_INT_PARSER";
43655	j",
46613	U+207B:
42878	newType)
2208	NoMergePolicy(boolean
21833	List<Field>
3458	#setException}.
33748	b"~2,
50125	#setRAMBufferSizeMB})
50188	#setRAMBufferSizeMB}.
13007	u5e28
40582	s.codePointAt(charIdx);
49095	setFuzzyMinSim(float
36317	IllegalStateException("already
62915	already:
9900	"\7\0\1\114\1\0\2\114\7\0\3\114\2\0\2\114"+
13408	u5e1e
59173	"\3\u5c35\3\u5cd8\3\u5d7b\3\u5e1e\3\u5ec1\3\u5f64\3\u6007\3\u60aa"+
33040	assertEquals("Hash
42794	typ)
4096	ascending
11273	"\1\347\4\230\1\u0453\5\230\175\0\1\346\26\230\1\u0454"+
26057	TopFieldCollector}
63031	tokenImage
49256	(hasMoreTokens)
887	StackTraceElement[]
57807	LUCENE-2386,
51830	already.
19501	resource1,
51266	already,
12606	u5e32
30228	ti1.skipOffset
27642	"\u0061\u2060\u0041"
49809	Enable
15150	testLazyFieldsAfterClose()
5454	jjcanmove_2
5455	jjcanmove_1
5453	jjcanmove_0
28133	han
2238	findforcedmerges
57340	and(OpenBitSet
2725	hc,
9585	"\1\uf8eb\1\uf98e\1\ufa31\1\ufad4\1\ufb77\1\ufc1a\1\ufcbd\1\ufd60"+
25344	testIncrementToken()
21984	state.termIndexInterval);
67808	parser.parse("a
14796	buffer.append("<int:
391	has
38643	_TestUtil.getTempDir("deletetest");
24901	hat
55368	nFields
9603	"\2\u549b\2\u553e\2\u55e1\2\u5684\2\u5727\2\u57ca\2\u586d\2\u5910"+
7201	had
36344	cachedRootArcs[arc.label]
38321	triecodelong
42084	SortField[]
22471	prependAttClass=false}:</em>
32583	decoded,
43101	ipod",
26294	decoded.
54803	obtain();
36418	writer.writeByte((byte)
37623	4097,
32552	decoded:
9155	getperdoc
4843	default_reader_pooling
45032	,"ls",
25710	etc...)
42604	docIdSet,
42884	newType;
42617	docIdSet)
3843	4096;
65798	sets[random.nextInt(sets.length)];
55475	testPreAnalyzedField()
11611	"\1\u0534\13\0\1\u02cf\226\0\1\u0500\13\0\1\u02cf\160\0"+
16026	directory)
1634	directory,
8963	org.apache.lucene.store.RAMInputStream;
17751	setTermCountCutoff(int
26201	i=0;i<limit;i++)
58252	sliceEquals(BytesRef
25876	directory.
30115	CloneableTerm(Term
61472	"\1\u034d\26\u02e2\1\u0428\3\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
1478	directory;
40948	-(pos+1);
15723	directory:
21175	increases.
6755	therefore
50382	sr.getRefCount()
31140	<i>target</i>.
57370	idx+1;
123	"bbb");
24946	lastdocid
37128	intsref
9547	"\1\u37fe\1\u38a1\1\u3944\1\u39e7\1\u3a8a\1\u3b2d\1\u3bd0\1\u3c73"+
16280	snear(SpanQuery
36744	1+nodeCount;
66898	output2.hashCode();
48252	1].end();
18245	hed
57216	Grrr,
6114	assertTrue("SenselessAttribute
67718	growTermBuffer(int
48919	documentNumber)
39272	calculation
33674	j);
19336	hex
15663	si.delGen
38658	doc.add(newField("termvector","termvector",
48917	documentNumber;
18234	isolate
9597	"\2\u360b\2\u36ae\2\u3751\2\u37f4\2\u3897\2\u393a\2\u39dd\2\u3a80"+
28568	FastCharStream(Reader
48487	#Scorer(Weight)}
50002	<code>dir</code>
59593	"\13\36\1\355\2\36\1\355\1\142\12\143\1\66\1\137"+
15506	SegmentInfo(String
4114	fieldNoTrie.setIntValue(val);
22387	classlib
25603	badChildren.remove(kid);
31358	increased:
4037	charcount
18080	query.extractTerms(terms);
7427	TestSameTokenSamePosition
8645	weakreference
39869	hasChanges;
55455	termPositions
64515	clone.include
24415	slotValues;
24873	expected:");
34395	compensate
11419	"\12\230\175\0\1\346\32\230\1\347\1\230\1\u04bf\10\230"+
67531	hasChanges)
32989	dovectors
3986	Class<?
39370	bitsetdoc
56302	hi,
39960	hi)
55060	nThreads,
49884	setoccur
8026	(default
1612	termPosition;
39967	hi;
19778	chunkend
32747	(hex.length()
20308	MockScorer());
33629	tmakdbl
3327	segstart
22182	extra;
31508	BINARY_TO_COMPRESS,
44958	HIGH
29082	//System.out.println("Num
54288	offsetHash
65268	isCompiled();
4766	LogDocMergePolicy());
31519	Field.Index.NO);
37823	maximal
24188	end)));
57001	calculating
9163	buffered
32428	interior
11315	"\1\0\1\u0471\5\0\1\u0471\310\0\1\u020c\164\0\4\u0472"+
57718	good:
6733	good.
48370	positive");
3668	type
67903	sb.toString().split("
25337	hij
38808	ints2.length);
4561	java.lang.reflect.Modifier;
715	hit
26988	"\u0001\u0308\u005F",
46658	U+207E:
46543	U+00AB:
34932	extrem
710	(thread.failure
55272	v1.getTermFrequencies();
42795	typ;
29711	"\4\0\1\25\1\0\1\25\3\0\2\25\1\0\1\25"+
62465	prohibitedScorers
41390	idx++;
8426	myID,
44889	,"K",
16778	pr1Clone.setNorm(4,
26061	(SortFields).
4705	conf.clone();
45157	U+207F:
59453	"\1\56\7\0\1\57\2\0\1\60\4\0\1\171\14\0"+
27123	"\u000B\u0308\r",
42309	clone.length());
56991	Float.toString(boost);
60183	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\1\266"+
43279	segtermdocs
66120	stdAnalyzer.tokenStream(fieldName,
59634	"\2\0\1\25\1\141\3\36\1\355\13\36\1\355\12\36"+
18529	Õ¢Õ¸Õ¬Õ¸Ö
6809	this.dataType
60812	"\4\u047b\2\0\1\u047b\15\0\1\u047b\6\0\12\u047b\1\u047c"+
58046	tvd.writeVInt(perDoc.fieldNumbers[i]);
29217	storingOffsets;
35830	testparallelreaderemptyindex
15487	hasVectors;
41835	testShortestPathsWFSTRandom()
46707	U+207C:
29244	storingOffsets)
65173	input.offset;
37259	dowritetarget
22449	object.
31276	oldNames[i]
7323	object,
42451	payload.numFieldInstancesToSkip--;
58509	stopwordsUpper
55931	object)
11479	"\1\u04f0\30\264\1\141\12\264\1\0\3\136\1\0\2\136"+
15510	hasVectors)
65677	RefCount(fileName);
5677	modify
34258	maxThreadStates;
64382	0xFFFFFFFF);
27021	"\u0001\u0031\u0027",
61344	"\14\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\3\u02e2"+
46641	U+207D:
28495	docFromReader
52374	numExpectedPayloads
9495	"\0\u324d\0\u32f0\0\u3393\0\u3436\0\u34d9\0\u11d4\0\u357c\0\u361f"+
35241	Arrays.fill(lastSkipFreqPointer,
64054	assertEquals("Lu\u2620ce\u2620ne",is.readString());
26031	MultiComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>
48884	sortedSet
54031	this.dirty
49009	QueryParser.Operator.AND
50889	#getAnalyzer()}.
18054	ConstantScoreQuery(Query
20098	(even
24171	("tracer2",
61089	"\12\u02e2\175\0\1\u034d\7\u02e2\1\u0565\5\u02e2\1\u0566\14\u02e2"+
21712	openDeletedFiles.size()
34999	gonna
44808	U+2071:
64284	responsibility
54193	newHash(pool);
34460	maxThreadStates)
55025	maxThreadStates,
11752	Khmer,
34576	PayloadTermWeight
57667	addoffcorrectmap
37433	testconstructor
20570	SavedStreams();
67030	read_buffer_size
34360	this.mergeScheduler
53620	FIELD_DOC,
32643	encodedComparison
31411	File(LuceneTestCase.TEMP_DIR,
46181	U+2070:
49490	MINUS:
911	i=0;i<200;i++)
15029	NoMergeScheduler#INSTANCE}.
61069	"\6\0\2\u054b\1\u054a\2\u054b\2\u054a\1\u054b\1\u054a\1\u054b"+
66542	writeByte(stream,
26866	tokenizers/filters.
61447	"\2\0\1\u054c\15\0\1\u054c\6\0\12\u054c\14\0\1\u02e1"+
48597	streamValue;
5442	x7bffd0f8ffffd9ffl
5126	i2,
29738	"\1\25\4\0\1\25\4\0\6\25\2\0\1\25\1\0"+
30656	"\1\25\5\0\1\25\3\0\1\53\4\0\1\53\2\25"+
36253	go;
65928	(b:two
50926	addDocuments(docs,
23521	i/o
5125	i1,
40368	"OutOfOrderTopScoreDocCollector",
26323	go.
2887	down
52288	PerDirPayloadProcessor
1337	byte[]
244	Open
67408	multiReader2.close();
12604	u5cec
62649	LengthFilter(boolean
58116	Consult
23318	English.intToEnglish(n),
55895	reclaimable.
51645	""+merge.maxNumSegments);
30619	"\5\0\1\32\7\0\1\32\4\0\2\32\3\0\2\32"+
7421	addfield
51140	progress.
53169	UTF8toUTF16(bytesRef.bytes,
25212	qp.setAllowLeadingWildcard(true);
33020	numtocopy
38242	0x7fffffffffffefL,
3679	dots
27036	"\r\n",
34867	DumbQueryWrapper(Query
34082	this.hasMultiTermRpts
18275	"d3"));
33615	testnothingchange
30892	pq.insertWithOverflow(new
12203	u5cf6
33604	(!keys.contains(key))
19722	cs.posEnum.nextPosition();
521	testundeleteallafterclose
36430	static<T>
1137	got
54569	Item(int
62764	subHits.totalHits
60046	"\6\0\1\u01de\2\u01df\1\u01de\5\u01df\1\u01e0\14\0\1\u0126"+
14887	FieldComparator.StringOrdValComparator(numHits,
57089	OpenBitSet(long[]
55752	MyWarmer();
1962	field_is_binary
24759	sortMin
34684	gsi
39173	termIdx=0;termIdx<terms.length;termIdx++)
14859	FieldComparator.RelevanceComparator(numHits);
13005	u5ce2
28368	initially
7321	<code>start</code>,
39095	currentvalue
38021	fail("decoding
52140	dsname
65795	super.collect(doc);
61343	"\1\u0645\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\15\u02e2\1\u0646"+
22546	assertExternalClass(clazz)
31429	4.x's
67695	termLength
20619	org.apache.lucene.index.IndexWriterConfig;
62686	w.w.getConfig().setMaxBufferedDocs(atLeast(100));
51462	tricky
62982	remainder);
5895	tricks
54404	Explanation,
28641	stopTypes);
4238	NumericField("int").setIntValue(Integer.MIN_VALUE));
13406	u5cd8
65426	rord()
16086	dirPath
52189	docupto
27472	"\u0030\u0308\u0061\u002C",
46380	U+2079:
32628	randomInt;
67798	min_buffer_size
48101	extensions
67487	Term("field1",
9693	"\2\25\7\0\3\25\1\0\3\25\5\0\4\25\1\0"+
63916	testCrossPlaneNormalization2()
8235	buffers:
65588	writeTo)
8081	buffers;
57679	BITS_PER_VALUE);
10079	"\6\0\3\25\2\0\1\25\2\0\2\25\1\0\1\25"+
17147	cfsDir
7059	actualEnum.term();
41764	r[0].output.output1.longValue());
49585	termImage,fms);
29792	"\5\25\10\0\1\52\1\0\2\25\1\0\1\25\10\0"+
46356	U+2078:
50269	"near
8078	buffers.
36340	readFirstRealTargetArc(arc.target,
64475	spanNotQuery;
27596	"\u0300\u003A",
46918	subscript
5873	backed
20768	byteat
5910	readMasks
11033	"\2\u0393\1\u0392\1\u0393\1\u0392\1\u0391\13\0\1\u02cf\161\0"+
67583	assertReaderOpen(subReaders[i]);
19560	invoking
46333	U+2077:
64572	if(len>0)
24778	MultiCollector.wrap(collectorMin,
48821	tokens[tokenUpto-2].pos);
34737	phrases:
12605	u5d8f
41018	fstEnum.current().output);
1767	switch
46241	U+00B3:
39332	bulk-update
26097	OneComparatorNonScoringCollector(queue,
194	delete
4741	1");
12204	u5d99
25080	WildcardQuery(new
59511	"\2\0\1\25\1\152\32\36\1\142\2\155\1\333\2\155"+
46310	U+2076:
20433	fifth
67187	System.arraycopy(positions,
27303	"\u003A\u0308\u0027",
26848	getcharblock
46218	U+00B2:
59891	"\1\351\1\u017c\1\u016f\1\232\1\u0173\6\u016f\3\232\1\u016f"+
59303	"\1\56\7\0\1\57\2\0\1\60\4\0\1\61\14\0"+
36612	(arc.flag(BIT_ARC_HAS_OUTPUT))
64689	exists="
13407	u5d7b
7300	sentinel
13006	u5d85
491	testbasicdelete
40596	br.length;
20160	Explanation(coordFactor,
52181	mergeexception
40051	Rollback
49104	phrases.
46287	U+2075:
27496	"\u005F\u0041",
33152	src.addAttribute((Class)
8179	preserve
921	i="
7429	reproduce
37013	ptr;
21990	freqOut/proxOut)
40306	readercommit
65170	frontier[0].inputCount++;
37280	<code>CharArraySet</code>
62520	optionalScorers);
60679	"\1\u0423\1\u0422\1\u0423\1\u03ac\13\0\1\u02e1\161\0\4\u0424"+
18860	String[]{"2B"});
29725	"\5\0\1\25\11\0\2\25\12\0\1\26\1\0\2\25"+
34801	fox\"").toString());
35639	i=0
42256	clone);
46264	U+2074:
1466	org.apache.lucene.document.Field.Store;
42280	clone's
22193	0x7ffffff8;
60510	"\1\u0382\6\266\1\0\3\137\1\0\2\137\1\140\3\137"+
49031	fieldToDateResolution
53283	second);
56104	testBasicsRngCollating()
66472	intUptos[intUptoStart];
4904	java.util.Date;
31475	'content'
5014	jjstateSet[jjnewStateCnt++]
60382	"\12\232\175\0\1\351\24\232\1\u030f\5\232\1\352\12\232"+
32031	caches.
33630	gzw
17973	Danish
18781	"à¸à¸²à¸£à¸à¸µà¹à¹à¸à¹à¸à¹à¸­à¸à¹à¸ªà¸à¸à¸§à¹à¸²à¸à¸²à¸à¸à¸µ.
46624	QUILL
34381	"maxBufferedDeleteTerms
19900	reused!",
26865	"break"
4822	mywarmer
65124	node.output;
22144	Python
29635	"\51\132\3\0\136\146\21\0\33\132\65\0\20\135\37\0\101\0\37\0"+
60093	"\3\0\1\137\4\0\2\137\150\0\1\u0101\31\266\1\u01fd"+
50933	docWriter.updateDocuments(docs,
11344	"\12\u0486\1\u0445\13\0\1\u0122\160\0\1\u0163\4\u0485\2\0"+
53663	document.add(newField("oddeven",
24762	sortMax
56240	!methodsThatShouldNotBeOverridden.contains(name))
20712	getData()
8198	clone()
36105	not)...
42890	append(newTerm);
28756	i>0
62628	HIT.
10845	"\1\346\1\230\1\u02e5\30\230\1\347\12\230\175\0\1\346"+
66915	valid(Pair<A,B>
59023	lot,
27915	"\u0031\u003A\u0061\u2060",
19288	dogs
66507	charPool.charUpto
9085	ic1
64522	SpanNotQuery))
9102	ic2
36277	back-compat
5352	error_after
33847	i<rg.length;
68113	top.score
30236	indexOffset);
6745	solely
66196	testQueries05()
7681	detected
7391	iae
39344	id.
4993	0x7fffffff;
17867	id,
55141	id2
14599	zzinput
55152	id1
53180	ibm
30840	getLength()
55633	r4));
41100	cmo2.isLeaf
15267	readInternal(byte[]
66268	(cb!=null)
56425	w.getSegmentCount();
32317	Index
27662	"\u0061\u2060\u0308\u00AD"
31496	id)
1332	testLegalbutVeryLargePositions()
7989	(SIGSEGV).
15161	assessing
5906	(int)(totBitCount/64
64012	0x00,
19470	Charset}
48145	matchStart
10880	"\3\0\1\136\4\0\2\136\150\0\1\376\1\u0306\27\264"+
22191	0x7ffffffe;
7166	maxbound
15019	testrepetitiveincreasingsloppiness
26897	ALetter}
4996	0x7fffffff)
58283	UTF8SortedAsUnicodeComparator();
11285	"\1\u0300\1\264\1\0\3\136\1\0\2\136\1\137\3\136"+
7364	loop
55467	(Character.isDigit(termAtt.buffer()[0]))
56862	"\2\12\11\0\1\12\2\0\5\12\1\0\1\12\11\0\12\2\2\0"+
22142	grows.
49931	fuzzyslop
48119	getlockid
15721	look
30529	"\0\u1fc9\0\u2030\0\u2097\0\u20fe\0\u2165\0\u21cc\0\u2233\0\u229a"+
20286	readable
21716	open");
31830	w.message("All
64174	vlong
59556	"\1\26\4\0\1\77\236\0\2\26\231\0\1\77\147\0"+
59578	"\1\0\1\25\2\0\1\25\1\141\1\361\2\355\1\36"+
20131	sumExpl.setMatch(Boolean.FALSE);
16238	ItemizedFilter(String
17978	{"H\u00D8T",
57248	BitUtil.pop_array(bits,0,wlen);
15965	format_lockless
11468	"\1\347\10\230\1\u04e5\1\230\175\0\1\346\1\230\1\u0171"+
8263	outofmemoryexception
67033	getrecomputedsizeinbytes
473	docs
22192	0x7ffffffc;
67467	ReaderThread[n];
51609	pending]");
4745	conf.setMaxBufferedDocs(4);
589	long
52125	ithis
2245	org.apache.lucene.search.payloads;
25768	ies
22278	int[newSize][];
36872	readNextArc(arcAndState.arc);
60495	"\21\232\1\352\12\232\175\0\1\351\3\232\1\u0377\26\232"+
5230	"\72",
42069	extension.
58394	"will",
51471	commitMergedDeletes(MergePolicy.OneMerge
6513	(expert:
66364	this.postingsHash;
41520	Sprinkle
1493	indexDivisor
8964	Prefix
6653	Overall,
62922	extension:
56073	ih)
45833	"Ãº"
3861	iff
57682	values[i]
56077	ih,
3232	maximum
35940	doc?
52146	ifd
20413	doc:
16278	st(e),
2920	doc;
2180	does
60108	"\32\266\1\142\1\266\1\u01fb\10\266\1\0\3\137\1\0"+
1681	indexenum
20530	icu
36335	Arc<T>();
3778	expects
36111	ie,
47926	initCause(cause);
48405	ie.
48872	tve.getOffsets()
49244	CachingTokenFilter(source);
2915	ie)
22460	#reflectAsString}
27639	"\u0061\u2060\u0308\u3031",
41537	id;
19558	SUPPRESS_METHOD.invoke(exception,
34916	dog"
67982	hackish
67605	delDocs
2165	idx
41543	idv
3352	ids
54621	testmergesortstability
66523	System.arraycopy(tokenText,
60155	"\4\u016e\2\0\1\u016e\15\0\1\u016e\6\0\12\u016e\175\0"+
52128	ido
63352	0x76321,
20899	if,
20726	retArray
58988	random.nextBytes(bytes);
59878	"\1\u0175\2\u016f\2\232\1\u016f\6\232\3\u016f\11\232\1\352"+
57384	b.bits[i])
2586	idf
2912	if(
62760	subHits);
23712	mgr.acquire(token);
17115	AtomicInteger
34805	expands
25064	expectedresult
6043	growth
58389	"these",
54719	webapps).
31759	System.err.println("this,
32371	testdefaultramdirectory
63978	0x07,
35364	this.bitSet
36667	readFirstRealTargetArc(arc.nextArc,
37217	readfirsttargetarc
54017	reWrite(SegmentInfo
31159	build/test/index.cfs
61273	"\175\0\1\u034d\26\u02e2\1\u0609\3\u02e2\1\u034e\12\u02e2\175\0"+
60501	"\1\351\32\232\1\352\4\232\1\u037e\5\232\175\0\1\351"+
31339	d.getField("autf8");
61411	"\1\352\5\232\1\u0674\4\232\175\0\1\u0101\1\266\1\u0382"+
11915	done
56072	il,
5558	underflow:
26439	finalMask;
22270	RamUsageEstimator.NUM_BYTES_CHAR)];
63980	0x06,
6218	MultiFieldQueryParser(Version
62576	dualconjunctionsumscorer
15229	fsDir;
65918	assertEquals(expectedRes,
2836	"2*resolution
7345	dont
16757	ParallelReader();
24990	ijz
47215	crossed
48680	!this.__test_dir.isDirectory())
23259	contents.length;
20002	permitted,
14766	SCORE,
37053	bytes:
54567	Comparable<Item>
55707	mainWriter.addIndexes(dirs);
1930	bytes.
3019	bytes,
41221	System.out.println(ord
30854	org.apache.lucene.util.IndexableBinaryStringTools;
16442	PSDP
5233	"\133",
54502	assertTrue(nextSize
38267	assertLongRangeSplit(9500L,
12007	jflex
67051	ii;
15215	fb.getBinaryValue());
38389	java.util.SortedSet;
17229	storeCFSReader
33688	bytes;
5517	backup
27393	"\u0027\u0308\u0030",
64010	0x08,
62489	requiredNrMatchers
23420	modifier.rollback();
5984	updatecached
25363	set)),
66022	t:two",
43882	%codes)
58927	indexOptions);
22619	functionality,
1925	bytes)
7928	functionality.
8217	ioe);
40494	TokenStream(AttributeSource
64690	exists);
28844	TermsHashPerThread(DocInverterPerThread
37272	FilteringTokenFilter
9543	"\1\u239e\1\u2441\1\u24e4\1\u2587\1\u262a\1\u26cd\1\u2770\1\u2813"+
30660	"\1\25\1\0\1\25\1\0\3\25\2\0\1\25\1\0"+
30428	set));
51887	Private
61427	"\12\u067a\14\0\1\u02e1\226\0\1\u0600\13\0\1\u02e1\160\0"+
3238	cached.
2357	PayloadHelper.FIELD,
24194	low;
7308	topDocsSize());
4564	org.apache.lucene.analysis.WhitespaceAnalyzer;
64781	getNonExistTerm(BytesRef[]
23523	io)
3021	cached)
11229	"\1\u03e0\1\u042e\1\u042d\2\u03e0\2\u042d\1\u03e0\1\u042d\1\u03e0"+
3846	offsetAtt
289	deletions
53755	CharArrayMap#keySet()}
23543	inc
24594	full.search(q,
15812	cached:
25663	entries.length)
54659	perfectly
63988	0x02,
4642	(Method
49719	jj_2_rtns[i];
11574	"\1\u0533\6\0\12\u0535\1\u0534\13\0\1\u02cf\160\0\1\u0332"+
37537	qp.setEnablePositionIncrements(true);
10625	"\3\0\1\136\4\0\2\136\150\0\1\376\23\264\1\u0200"+
26634	fieldvalue
8038	lots
6549	Lower
40781	arc.output);
57988	RuntimeException("tvx
311	int
21533	ins
57131	0x01;
19856	expectedScore,
20728	System.arraycopy(this.data,
52716	expectedScore)
22267	boolean[newSize];
27099	"\n\u0308\u00AD",
1420	ioe
63976	0x01,
24177	low,
66493	low.
57123	0x01)
42417	sb.toString());
23895	recordTime,
44836	,"J",
23371	modifier.deleteDocuments(term);
3504	").append(info.name);
39130	terms[0].field();
49937	rangein_end
300	lost
51349	loss
56609	assertTrue(commit.isDeleted());
14858	SortField.SCORE:
63416	0x86321,
17460	single;
65691	deletion.
25126	((BooleanQuery)
24452	SortField.SCORE,
54074	doTestStopPositons(stpf,true);
61221	"\13\u02e2\1\u05d8\4\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
5306	im;
9574	"\1\uc0e3\1\uc186\1\uc229\1\uc2cc\1\uc36f\1\uc412\1\uc4b5\1\uc558"+
20257	maxclausecount
64006	0x04,
55887	single,
4257	testRandomTrieAndClassicRangeQuery(int
67942	MockGraphTokenFilter(random,
52724	expectedScores
21897	in.
29602	"\u0100\146\111\132\1\0\4\132\2\0\7\132\1\0\1\132\1\0\4\132"+
1999	in)
33816	k0)
5890	in,
43844	"<:utf8",
48855	assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));
23515	lose
6450	suppressed
65464	deletion,
23395	String.valueOf(id)));
11866	grown.
52545	in:
6407	in;
48324	possiblepayload
63995	0x03,
64025	8)];
37351	org.apache.lucene.index.IndexFormatTooOldException;
46669	U+2E29:
22253	grow(long[]
25370	set2)),
27727	"\u0061\u003A\u0061"
38724	fieldable2
2737	Test
38722	fieldable1
50473	Thread.currentThread().getName()
20202	(getBoost()
25491	Integer>
21883	no_fieldables
10954	"\1\u034f\20\230\1\u0350\5\230\1\347\12\230\175\0\1\346"+
52518	assertEquals("field1:fox",
9005	PrefixCodedTerms:
716	failure");
2807	how
64801	loc;
53595	hq;
65435	arr[doc]);
36677	(arc.bytesPerArc
15157	fieldable;
35900	lowerterms
59684	"\3\0\1\137\4\0\2\137\150\0\1\u0101\2\u0107\2\266"+
46655	U+2E28:
117	Term
22680	FieldCache#getBytes(IndexReader,String)}.
3144	replayInit(other);
36109	pure
10840	"\2\0\1\u027a\1\0\1\u027a\175\0\1\346\1\230\1\u02e0"+
62553	countingSumScorer.score();
55540	r.termDocs(t);
54975	atomiclong
53519	hq,
58205	indexcommits
22408	hot
38545	assertNotNull(fieldables);
38609	version2);
7217	load
31767	@SuppressWarnings("deprecation")
8117	bufferStart
40559	ir.length;
3764	href=
33208	anothertestterm
54348	StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH;
61783	u1a96
50072	is.length();
12602	u5ba6
51556	MergePolicy.MergeAbortedException)
41026	pairs.get(upto+1).input)
9006	repeatedly,
51597	MergePolicy.MergeAbortedException,
26816	DocumentsWriter.CHAR_BLOCK_SIZE;
66976	testRAMDirectory
30053	u1a8e
6115	SenselessAttributeImpl",
5990	elementpos
36601	arc.numArcs
21832	getFields(String
26699	docFreqs(Term[]
11988	Break
67712	char[ArrayUtil.oversize(newSize,
57663	diffs[size++]
24111	(((i%2)==0
3990	(matchVersion.onOrAfter(Version.LUCENE_31)
8768	docs.get(testID);
437	field
22923	hmm
40609	IntsRef[]
51287	exists";
27699	"\u0061\u003A\u3031",
21380	fsdir.createOutput(file);
11703	zzUnpackAttribute()
15869	affects
3930	correctOffset(offset);
17683	pull
5545	round
19859	testCachingByte
6467	PrintWriter(sw);
11003	"\1\136\4\0\2\136\150\0\1\376\32\264\1\141\6\264"+
30721	"\2\130\1\0\3\130\1\0\1\130\2\0\4\130\2\0"+
42746	<p>Typical
15867	fileName.startsWith(prefix))
59851	"\1\77\1\137\4\0\2\137\2\0\1\70\1\0\1\51"+
58279	senseless
43292	this.fieldSelections
18039	testinternationalsort
14825	other.comparatorSource.equals(this.comparatorSource))
24670	hte
49367	termStr
38989	pump
53218	x3ffl
32734	decodedLen);
1281	Term("subid",
29099	docNum
2884	counting
51459	MergePolicy.MergeException("MergePolicy
12201	u5bb0
518	deletedocument
54642	#getMatch
32735	decodedLen),
50076	endPtr
66554	(perThread.primary)
60453	"\2\u0219\1\u0275\3\u0219\3\0\1\u0219\1\u021b\3\0\2\u0219"+
58230	<code>capacity</code>.
10658	"\1\u0163\4\u021d\2\0\1\u021d\15\0\1\u021d\6\0\12\u0220"+
63556	shift();
3617	mergegen
37801	queryExpl
3909	implement
38543	fieldables
20651	SimpleFSDirectory(_TestUtil.getTempDir("foo"));
44292	"Ã°"
57444	_TestUtil.getTempDir("TestNeverDelete");
33979	rptGroups
8844	junitcompat
41133	testRandomWords(1000,
23059	StandardAnalyzer(TEST_VERSION_CURRENT))
58037	docWriter.writer.testPoint("TermVectorsTermsWriter.finishDocument
31500	"Lu\uD834\uDD1Ece\uD834\uDD60ne
65292	arcs[numArcs-1].output;
63229	newBuffer(size);
57201	Math.min(wlen,
18444	testdisjunctionmaxquery
50017	#addFile(String)},
57175	Math.max(numBits,
58855	utf16.length);
52233	filesexist
18292	dq.add(tq("dek",
3185	wrapped
35554	eights=(fours&foursA)|(u&foursB);
37464	"two"));
15174	regularTime
55698	j="
34277	Similarity.getDefault();
6423	wrapper
39169	(terms.length
1836	struck,
35373	docNr:
48332	ppend
53633	Integer.valueOf(((Integer)
38767	tp2.nextPosition());
66229	hits2);
50414	sr.doCommit(null);
45279	"Ã¸"
42802	startTermBuffer
34614	function.currentScore(doc,
42402	b.length);
56036	common(Long
18997	testEmails()
36070	"two")),
37190	getfirstarc
41111	while((current
38504	reader.termDocs(term);
53066	i=0;i<s1.length();i++)
42343	payloadDataLength
41179	charIDX=0;charIDX<ints.length;charIDX++)
11721	endRead
60219	"\151\0\1\u027c\32\u021d\1\u027d\12\u021d\1\u027e\2\u021c\1\u021f"+
38963	CharArrayMap<Integer>
61302	"\175\0\1\u0101\32\266\1\142\5\266\1\u0627\4\266\1\0"+
34302	#setOpenMode(OpenMode)}.
6731	<b>4</b>.
26005	FieldComparator<?>[]
6558	<b>4</b>,
59464	"\1\175\1\0\1\51\1\0\1\176\2\0\1\177\3\0"+
54555	Integer.valueOf(random.nextInt(2));
50189	IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}
62286	Term("first",
20867	getPositionIncrementGap(String
54314	directbytesstartarray
33116	assertSame("Second
41834	testShortestPathsRandom,
6108	SenselessAttributeImpl);
27341	"\u002C\u0308\u0041",
2730	TimeLimitingCollector(hc,
63424	0x864321,
12499	u1a11
63311	0x65431,
24904	hut
40364	doc'
261	should
11186	"\175\0\1\346\32\230\1\347\4\230\1\u0171\5\230\175\0"+
11032	"\1\u0390\15\0\1\u0390\6\0\1\u0392\1\u0394\1\u0393\2\u0392"+
28253	doc.
9148	doc,
27148	"\u000B\u0061\u003A",
66571	previoussize
51747	"mergedDocCount="
12900	u1a07
65379	outputprefix
17257	coreclosedlistener
1945	doc)
55610	doc5
28387	BytesRef(s);
18387	doc2
18389	doc3
18383	doc0
18385	doc1
29825	"\1\41\1\0\1\126\3\0\1\43\5\0\1\44\3\0"+
15186	(finish
63312	0x65432,
65429	ReverseOrdFieldSource(String
55202	len1++;
29791	"\2\25\4\0\1\25\5\0\1\25\3\0\1\25\4\0"+
66848	doc.add(foo);
57548	estimatePageBits(long
66859	puts
61158	"\30\u02e2\1\u034e\12\u02e2\175\0\1\u034d\31\u02e2\1\u059e\1\u034e"+
53964	refCount++;
21972	FormatPostingsTermsWriter
49559	term.image
1978	already-frozen
8928	Term.compareTo().
12098	u1a1b
9418	"\1\34\1\75\1\35\1\34\10\75\2\53\5\52\2\46\5\52\1\22"+
38003	-3000L,
64290	rough
49465	System.out.println(q.toString("field"));
4245	NumericField("float").setFloatValue(f));
39252	termArrays.get(i);
53326	valid((Long)
66508	DocumentsWriter.CHAR_BLOCK_SIZE)
33216	typeatt2
59142	"\2\ubef0\2\ubf93\2\uc036\2\uc0d9\2\uc17c\2\uc21f\2\uc2c2\2\uc365"+
50712	IndexWriterConfig#getMaxBufferedDocs()}
56146	assertEquals("med,med,F,F,c",
30052	u1a27
48220	spans1.doc()
43415	bits2vintlist_size
859	doc.add(newField("content",
34027	res.get(g).add(pp2);
8858	push
59520	"\1\0\1\26\2\0\1\25\1\335\32\157\1\137\12\160"+
5888	retrieved.
1245	ioe.getMessage());
17562	docSingle.get("f2"));
42241	att.setKeyword(true);
7954	lock
22875	spans.isPayloadAvailable();
18643	"ÜÜ¢ÜÜ ÜÜ",
35880	tq.getTerm().text();
21017	diskFree)/diskUsage;
30497	Text
28337	subScorers[rchild]
17306	testBasic()
3738	character-oriented
6010	assertEquals("word",
30157	term/value
50280	guarantee
20962	resizeTermBuffer(int
55018	dw.writer.close();
22306	i])
48880	testFields.length,
10247	"\12\u0118\1\0\1\136\1\151\1\136\1\0\2\152\1\137"+
34863	super.getFieldQuery(f,t,quoted);
10052	"\1\65\136\0\1\25\3\0\1\25\3\0\1\25\1\66"+
3384	chance
60777	"\150\0\1\u0101\1\u0461\31\266\1\142\12\266\1\0\3\137"+
65062	tailLength)
6073	testMixedStringArray()
48761	testFields.length;
745	threads
11393	"\6\0\12\u04b0\1\u04ae\13\0\1\u02cf\160\0\1\u0332\4\u04ad"+
58797	i=0;i<b.length;i++)
39961	midValue
47119	ffl
51973	getFlushPending()
36291	in.readBytes(bytes,
42110	IntsRef()
47117	ffi
32847	(perThread.doc
35974	checkbooleanterms
18552	"Õ¢Õ¸Õ¬Õ¸Ö",
5181	jjStartNfa_2(int
33996	Detect
594	(VERBOSE)
58044	(perDoc.numVectorFields
37241	nodeandincount
13106	u9d31
43355	bits.nextSetBit(nextInt
49074	e.initCause(tme);
8881	few
10716	"\151\0\1\u01c8\32\u01c9\1\u020a\12\u01c9\1\u01ca\2\u01c8\1\u01cb"+
24603	multi/single
61595	u9d27
36427	short:
14891	feb
49546	(float)1.0;
23973	short,
64013	0x17,
32559	0x13,
18049	CachingWrapperFilter.DeletesMode#DYNAMIC}).
25754	rfmap
1593	ArrayList<Term>();
52839	distribute,
17326	FuzzyQuery(new
6441	super("BASE-EXCEPTION");
18519	Õ°Õ¸Õ¤Õ¾Õ¡Õ®Õ¶Õ¥ÖÕ¨
64094	ByteArrayDataInput(RANDOM_TEST_BYTES);
40391	emits
2699	testSearch()
29852	"\4\0\1\27\1\0\1\27\2\0\2\27\1\0\3\27"+
7517	fi)
37248	guess
14896	shorts
39878	doOpenIfChanged(true,
265	having
30946	tdc.topDocs().scoreDocs.length);
1862	fi,
36319	finalBytes
52124	nummerges
51133	"rollbackInternal");
20479	dateTimeString,
3983	buffer!!
8822	Statement()
16073	indexerThread.count
1766	change
22	distributed
13403	u5aef
14672	dynamically
28152	capital
65567	now-deleted
55138	r1.termDocs();
55352	r.nextInt(10));
62675	TestTopDocsMerge
1853	directory.fileExists(fieldsIdxName));
38630	[incorrectly]
19232	ÏÏÏ¿ÏÏÏµÏ
41031	finalOutput;
16613	Should
15396	testloadsize
57138	set(long
23472	retained
834	i=0;i<10;i++)
64049	assertEquals(Long.MAX_VALUE,
37240	nodequeue
31489	filenames
1894	offset;
6536	far
51610	merge.mergeGen
27980	"\u0031\u0027\u0308\u0031\u002C",
13002	u5af9
6721	given.
28679	stpf.end();
51035	thread:
23479	thread;
31950	NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(val));
20677	fdx
56874	"\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0"+
14817	SortField))
67372	(subReaders2[i]
55150	termDocs2.seek(termEnum);
52334	false)).
41601	scratchIntsRef),
43872	'(.+)';/)
55235	ff1
55237	ff2
2707	search(myHc);
9157	fdt
48551	InvertedDocEndConsumerPerField
3489	thread,
54830	thread.
24108	dirs.add(indexStore);
374	false));
38646	addDocumentWithFields(IndexWriter
17007	offsets
23482	thread)
32897	DocumentsWriter.CHAR_BLOCK_SHIFT];
41091	(cmo.count
31557	fcl
19394	(docsWithField
65900	(stop)",
48554	perThread.fieldState;
31551	fci
9730	"\1\0\2\32\1\0\4\32\1\0\2\32\1\0\21\32"+
43106	"x"}));
7373	newTopDocs(results,
6674	distribution).</p>
12202	u5c53
33690	(4*startDiskUsage)
34859	DumbQueryParser(String
63194	FieldCacheSource(String
4976	0x0L,
4641	getters.add("getReaderTermsIndexDivisor");
32368	getnolockfactory
5933	((blocks[elementPos+1]
62262	"female"),
36307	byte[in.readVInt()];
13004	u5c3f
9249	num_bytes_object_ref
53026	(outUpto+length
29451	System.setProperty(PROP_KEY1,
39288	iterator1.next();
16907	testindexreaderreopen
19877	expectedArrayTypes.put(FieldScoreQuery.Type.INT,
984	fail();
29133	readTermVectors(int
15536	src.delGen;
22468	<li><em>iff
53907	CharacterUtils.newCharacterBuffer(5);
12603	u5c49
55661	addDirThreads.closeDir();
21988	(that
2751	(TimeExceededException
57589	reuse.length);
54800	lock!
34627	getSpanScore()
13405	u5c35
32670	encoded1.length)
38547	fb1
10641	"\1\u0216\3\0\1\u0217\1\0\2\u0212\4\0\1\u0212\151\0"+
10660	"\1\u021f\1\u0220\1\u021f\1\u021e\13\0\1\u0122\161\0\4\u0222"+
34479	#setIndexingChain(IndexingChain)}.
33573	h";
35475	Harley
34689	StandardFilter(TokenStream
65571	commit.files)
12008	snapshot
43139	topDocs.scoreDocs[2].doc);
6601	1947-1955.
64327	(col.hasCutOff)
32346	lock;
39906	lock:
56564	TestDeletionPolicy
32463	lock,
64036	Math.abs(random.nextInt()))
34369	lock.
37619	ArrayList<List<String>>();
45062	"É°"
8986	buffer);
9341	"\6\132\3\0\3\132\1\0\4\132\3\0\2\132\1\0\1\132\1\0"+
29296	totallength
30947	testGetResultsFromStart()
42860	other.endOffset
30811	Character.isHighSurrogate(charBuffer[buffer.length
15592	ext
50853	buffer),
55834	assertNull(r4);
59750	"\1\174\147\0\1\65\104\0\1\65\235\0\2\174\12\0"+
3373	<p>Whenever
16738	IndexWriter(dir1,
46357	EIGHT
24410	(empty,
34757	foo\"~10").toString());
48818	offsetAtt.setOffset(testToken.startOffset,
37551	query.setSlop(100);
31210	TEXT_TO_COMPRESS.length()
36311	(nodeAddress
52780	exp
30279	indexoffset
67705	buffer()
60413	"\2\137\150\0\1\u0101\32\266\1\142\5\266\1\u0329\4\266"+
21110	locks
39431	CountingStream
11887	zzMarkedPos-zzStartRead
27787	"\u0061\u0027\u0308\u0031\u003A",
23236	srchr.close();
15282	exc
57498	TermInfosReaderIndex(SegmentTermEnum
17515	IndexWriter(dir2,
39981	normsCache.remove(field);
48284	lastEnd))
56247	checkOverrideMethods(FilterIndexReader.FilterTermDocs.class);
29956	"\3\64\1\0\1\64\2\0\4\64\2\0\1\64\42\0"+
17864	minId);
7845	java.nio.ByteBuffer;
55059	indexRandomIWReader(int
50723	IndexWriterConfig#getRAMBufferSizeMB()}
29295	deltalength
31852	SortField!!
38568	assertTrue("locked",
67780	char[this.termLength];
31447	outputDirName
38497	map.get("termvector");
1183	fail("reader
14826	(other.parser
3901	depreciated
9715	"\5\0\3\25\17\0\1\25\6\0\1\25\213\0\1\33"+
12705	u9d3b
12304	u9d45
19725	chunkStart
55862	testindexwriterreopensegmentfullmerge
48303	"("+query.toString()+")@"+
5697	(this
26178	current.getBitsPerValue();
3034	@lucene.experimental
51135	closeInternal(false);
40080	subReaders[i].decRef();
20242	BooleanQuery))
36135	BYTE2,
13003	u5b9c
64236	Type#BYTE}
6577	BooleanQuery's
46995	eth
52472	setomitnorms
33764	b"~2
64011	0x0E,
23689	SearcherLifetimeManager
31167	oldNames
25125	BooleanQuery);
18555	"Õ­Õ´Õ¢Õ¡Õ£ÖÕ¥Õ¬",
40543	feature
60670	"\4\u041e\2\0\1\u041e\15\0\1\u041e\6\0\1\u041f\2\u0420"+
62561	Occur.MUST_NOT,
59669	"\1\142\12\266\1\0\3\137\1\0\2\137\1\140\3\137"+
9550	"\1\u4746\1\u47e9\1\u488c\1\u492f\1\u49d2\1\u4a75\0\u16ec\1\u4b18"+
67274	FilterIndexReader(IndexReader.open(dir3,
58948	QueryParserTestBase
2950	strudel
19997	expanded
51032	OutOfMemoryError;
53388	OutOfMemoryError(
59499	"\1\0\2\137\1\140\3\137\3\0\1\137\4\0\2\137"+
56936	"\2\34\7\0\1\34\4\0\2\37\7\0\1\37\4\0"+
14602	zzmarkedposl
27441	"\u0030\u0308\u0027",
4519	testrangesplit_8bit
50674	OutOfMemoryError.
10309	"\1\65\1\66\1\0\1\25\2\0\1\25\1\u013d\5\36"+
50809	OutOfMemoryError,
31117	filetodelete
35292	freqoutput
16744	ex)
3326	empty_int_array
801	Analyzer()
39046	assertTrue(map.containsKey("foo"));
42817	positionIncrement;
63998	0x0C,
31762	FSDirectory.class.getSimpleName()
40857	verifyUnPruned(inputMode,
42812	positionIncrement)
57285	(subIndex
13404	u5b92
7822	lazy_load
42837	positionIncrement,
18332	testSimpleEqualScores2()
17063	ArrayList<TermVectorOffsetInfo>();
30398	numobjects
20019	BooleanQuery()
31317	oldName)
28271	tieBreakerMultiplier,
54089	log("Stop1:
12303	u9ca2
28678	posIncrAtt.getPositionIncrement(),
50754	IndexWriter.defaultInfoStream
59289	"\2\0\1\25\1\0\32\25\1\0\12\26\2\0\1\115"+
10929	"\1\0\12\u026f\176\0\32\u026f\1\u02d3\12\u026f\176\0\4\u0337"+
33713	PhraseQueue
28260	tieBreakerMultiplier;
49280	posIncrAtt.getPositionIncrement();
27220	"\u3031\u0308\u0031\u002E\u2060",
20133	sumExpl.setDescription
57215	Flips
39726	ex;
41120	!cmo.isLeaf)
21464	assertEquals(1910,
33956	"connected
38001	-5003400000000L,
21864	ArrayList<byte[]>();
9138	storedFieldsWriter.getPerDoc();
37595	palindrome",score1+SCORE_COMP_THRESH<score2);
54084	log("Stop0:
9405	"\1\132\4\0\12\134\34\132\10\133\2\0\27\132\15\133\14\0\35\146"+
5739	Consider
3722	eos
1291	("indexExists".equals(trace[i].getMethodName()))
31843	dirimpl
11656	"\15\0\1\u0564\6\0\12\u0564\1\u0549\175\0\4\u0565\2\0"+
36280	(they
15156	(Field)
21472	assertEquals(1911,
21696	es,
20043	Gets
1252	PhraseQuery
39408	250);//
64795	terms:");
44423	,"E",
21706	((MockDirectoryWrapper)
51326	doAfterFlush();
9227	Iterable<QueryAndLimit>
28160	midnumlet
64909	mtr.length
16700	reopen
43796	assertTermEquals("cles",
11212	"\150\0\1\376\10\264\1\u0420\21\264\1\141\12\264\1\0"+
18376	h[h.length
39255	j<(position-lastPos);
49083	surrounded
65229	frontier[prefixLenPlus1-1].setLastOutput(input.ints[input.offset
51903	mode),
27977	"\u0031\u0027\u0031\u0027",
20241	buffer.append(ToStringUtils.boost(getBoost()));
27022	"\u0001\u0308\u0031\u0027",
32733	encodedLen,
36292	(packed)
29647	"\7\132\1\0\7\132\221\0\43\132\10\133\1\0\2\133\2\0\12\134"+
32730	encodedLen)
2256	org.apache.lucene.analysis.LowerCaseTokenizer;
23982	"A-3",
29675	"\1\0\207\132\2\0\1\133\7\0\1\140\4\0\1\137\1\0\1\140"+
53357	mode);
24843	_TestUtil.randomUnicodeString(random,
1168	testSimulatedCorruptIndex1()
32666	encodedLen1
16587	heap[size]
32676	encodedLen2
1269	numDocs3
63979	0x0F,
4637	getters.add("getMergedSegmentWarmer");
1283	numDocs4
1218	numDocs1
7538	JavaCCOptions:
51513	message("commitMerge:
1246	numDocs2
64609	0x0F)
66219	randBoolQuery(new
20344	numDocs;
58602	esc
28254	Scorer[]
4801	assertEquals(100,
3718	acronym_type
11091	"\4\0\2\136\150\0\1\376\6\264\1\u010e\23\264\1\141"+
4225	+startOffset;
32318	e.toString());
58778	"U+"
51427	segmentInfos.asList());
3441	RuntimeException("segments
26503	//There
17862	numDocs,
6499	err
1825	numDocs)
11257	"\1\u0444\15\0\1\u0444\6\0\12\u0447\1\u0445\13\0\1\u0122"+
8251	closedchannelexception
11224	"\160\0\1\u0386\4\u0429\2\0\1\u0429\15\0\1\u0429\6\0"+
12776	uca70
44068	U+2090:
61666	uca5c
48250	subSpans[subSpans.length
65655	segmentInfos.files(directory,
28610	System.err.println("Caught:
21460	assertEquals(101,
43668	hits[i].score
25567	insanity;
1076	w.forceMerge(1);
26722	specifically,
56905	"\1\21\1\22\2\12\1\13\1\23\20\0\1\2\1\0"+
1289	openInput(String
58176	SnapshotDeletionPolicy,
63842	builder.insert(1023,
44500	U+2091:
38837	r.getSequentialSubReaders()[0]).termsIndexLoaded());
67556	"b30"));
50404	for(SegmentReader
53167	UTF8toUTF16(BytesRef
30296	this.failOnPrepare
46202	DINGBAT
3173	NoScoreCachingCollector
41134	atLeast(2));
13177	uca66
19338	randomtextwithurls
1787	fieldsStream
60200	"\3\0\3\u020e\1\u016e\3\0\1\u020e\157\0\4\u0268\2\0"+
16550	@SuppressWarnings("unchecked")
43956	STROKE
58124	SnapshotDeletionPolicy}
43626	delCoreKey,
40764	prefixLength)
55089	doReaderPooling)
64188	ene
7473	eng
2575	end
1902	offset,
51328	(anySegmentsFlushed)
19980	#getFlags()
6401	offset.
56383	offset0
22188	env
14722	BYTE);
9211	ent
15769	offset)
12375	uca7a
67838	assertFalse(sis.info(2).hasDeletions());
979	Thread()
34900	TestSpanMultiTermQueryWrapper
5610	(Float.isNaN(f))
30764	offset);
64404	ByteArrayOutputStream(length);
7696	eof
40765	prefixLength.length
53876	newCharacterBuffer
24577	filt,
34421	"ramBufferSize
29224	if(storePositions)
52417	stream.setIntValue(value)
27757	"\u0061\u0027\u0308\u0041"
32566	0x0A,
44071	U+2094:
9813	"\1\114\1\26\1\115\3\0\1\114\1\0\1\114\2\0"+
31899	Byte#toString(byte)}
65646	Decref
35288	lastskipdoc
58733	"ab\udc17cd",
56378	offset0;
27722	"\u0061\u003A\u0061\u2060",
16304	reqB(makeQuery(q));
61128	"\226\0\1\u04bb\13\0\1\u033c\214\0\12\u0541\14\0\1\u033c"+
27715	"\u0061\u003A\u0308\u0030",
32740	binaryDump(binaryBuf.array(),
34268	montonic
42594	testFilterWorks()
55369	nextInt(maxFields);
4221	testLeftOpenRange_2bit()
19021	mailto:
26466	getencodedlength
41726	//w.close();
48198	ArrayUtil.mergeSort(subSpansByDoc,
67044	SeekCountingDirectory(Directory
3294	totHits="
47647	¼¹
34764	foo\"
39973	(bytes==null
32026	Values.
60424	"\150\0\1\u0101\32\266\1\142\6\266\1\u0331\3\266\1\0"+
47818	¼?
67431	IndexReader.openIfChanged(reader3);
41086	((prune2
45354	U+2092:
29987	"\1\0\1\11\27\1\2\11\1\1\15\0\1\1\1\0"+
8058	//System.out.println("Got
36036	assertEquals(boost,
49669	token_source;
60277	"\1\u02b6\25\266\1\142\12\266\1\0\3\137\1\0\2\137"+
5232	"\136",
20350	CachingCollector.create(true,
22928	bytearray
58983	mmapDir.close();
3623	paused
4315	countTerms(NumericRangeQuery.newIntRange("field4",
46033	U+2093:
50779	IndexWriterConfig.getDefaultWriteLockTimeout();
40794	arcs.clear();
26358	caseNum
55542	td.doc();
50651	pauses
34399	<code>int</code>s
5349	EOFLoop;
60008	"\1\137\4\0\2\137\150\0\51\u016c\1\u01a6\6\u016c\1\u016e"+
30789	fill.
19933	testcachingint
57531	dataOutput.getPosition());
52608	result.add(clause2);
14644	Comparable
15787	1:0));
55837	assertNull(r5);
28804	newChildPointer
53444	nrTopDocs
24130	("custom",
33878	initSimple()
11605	"\2\0\1\u054e\15\0\1\u054e\6\0\12\u054e\1\u0534\13\0"+
62712	sortFields.add(new
41693	checkStopNodes(fst,
39227	fieldNormExpl.setDescription("fieldNorm(field="+field+",
46660	U+208E:
8718	newField("id",
39354	(disiDoc
3337	maxdocstocache
5275	i--
50590	getCurrentFieldInfos(),
52572	combine(Query[]
67295	iwriter.commit();
10285	"\1\25\2\0\1\25\1\u013d\4\36\1\u0142\25\36\1\141"+
11976	(eof)
41521	PKs:
52638	assertTrue(NoMergePolicy.COMPOUND_FILES.useCompoundFile(null,
43313	getTerms();
51845	message("startCommit
6562	<p>This
66434	hashPos
38491	FieldSortedTermVectorMapper(new
21757	smoketestsearcher
16362	testCharFilter2()
21109	timeunit
14568	fills
64792	Arrays.sort(validTerms,
8005	fact,
42661	mergeCount
35396	(without
985	threads[t].start();
41568	idTerm);
4618	Sanity
34472	this.readerPooling
54440	getsummary
35641	i+1
1607	sample;
364	Field.Index.NOT_ANALYZED));
59755	"\1\u0139\1\u013a\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f\1\u0140"+
4002	characterbuffer
11466	"\14\0\1\u0122\226\0\1\u0445\13\0\1\u0122\160\0\1\346"+
16586	size++;
6642	exactly.
30446	PriorityQueue<SegmentMergeInfo>
61276	"\1\u034e\1\u02e2\1\u060c\10\u02e2\175\0\1\u034d\1\u060d\31\u02e2"+
22103	Character.MAX_RADIX)
40283	nowrite
56488	initSpanQueue(-1);
59604	"\1\67\1\0\1\25\2\0\1\25\1\141\1\355\31\36"+
57711	MockAnalyzer(random)).setMaxBufferedDocs(10));
37503	"marketing"));
8923	docidsetiterator
14861	FieldComparator.DocComparator(numHits);
8375	betweeen
15849	Pre-2.1:
42506	pool.add(b);
50293	latency
52970	(byte)(0xF0
56928	"\4\0\1\37\1\40\1\0\1\12\1\0\1\11\2\12"+
59716	"\2\137\150\0\1\u0101\3\266\2\u0107\2\266\2\u0107\1\266"+
29166	(preUTF8)
1131	gen
37421	gold,
51215	newSegmentName();
160	get
11510	"\1\u04e0\1\0\1\u04e0\14\0\1\u02cf\226\0\1\u0480\175\0"+
58100	(pp1.position
562	i);
59687	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\5\u0107"+
53893	CharacterUtils.newCharacterBuffer(6);
59525	"\3\0\1\25\3\0\1\25\1\65\5\0\1\25\2\0"+
28651	sb.append(i).append("
46700	PLUS
18099	everything)
52650	everything,
21667	i))
41346	verify...");
22004	everything.
54042	i'm
40248	writelock
57756	IW.rollback
36889	arcAndState2.arc.label;
2903	getLastDocCollected()
37557	"phrase"));
36394	out.writeVInt(arcCount);
2042	safely
26946	VERTICAL
5623	assertEquals(b4,b5);
61240	"\1\351\32\232\1\352\2\232\1\u0176\7\232\175\0\1\351"+
61108	"\1\352\12\232\175\0\1\u0101\7\266\1\u0578\22\266\1\142"+
48357	<br>When
31975	setDocsWithField
17103	java.util.concurrent.atomic.AtomicInteger;
59402	"\2\27\6\0\3\27\15\0\1\27\226\0\1\27\247\0"+
21122	contrib/queries),
17744	ConstantScoreAutoRewrite#DEFAULT_TERM_COUNT_CUTOFF}
57491	PackedInts.Reader
61202	"\1\u058b\13\0\1\u02e1\161\0\4\u05c1\2\0\1\u05c1\15\0"+
52842	persons
62353	qA.getSpans(searcher.getIndexReader());
24078	"W",
39933	isOptimized()
54541	ArrayUtil.parseInt("foo
52964	(byte)(0xE0
37334	!stopWords.contains(termAtt.buffer(),
19739	cs.lastPos)
26772	getEnd()
61358	"\175\0\1\u034d\32\u02e2\1\u034e\1\u0651\11\u02e2\175\0\1\u034d"+
17610	iscurrent
29899	"\1\0\2\25\21\0\1\25\3\0\1\25\5\0\1\25"+
19331	personc
19329	persona
19330	personb
31977	setDocsWithField)
51012	#forceMerge(int)},
12200	u5b0d
26189	bpv++;
46823	testasciifoldingfilter
4975	0x1L,
61594	u9c84
20108	(Iterator<Weight>
66970	RAMDirectory.READ_BUFFER_SIZE
29235	(storingPositions)
48233	start2);
11462	"\1\u04b4\1\u04e0\1\u04b4\14\0\1\u02cf\161\0\4\u04e2\2\0"+
51321	syncing.
28657	typeTokenFilter
67844	testbytesizelimit
62885	mischaracterized
15445	file.
60910	"\2\0\1\u04c4\15\0\1\u04c4\6\0\12\u04c4\1\u041d\175\0"+
1212	file,
35788	@author
3341	cachedsegs
1204	file:
15439	file;
18876	"dc"});
41167	isValidUnicode)
64865	newInstance(newSize);
10453	"\1\25\2\0\1\25\1\140\27\36\1\u0189\2\36\1\141"+
30995	file"
65777	BitSet[numSets];
42388	singleTerm));
41176	s.charAt(charIDX);
6834	DataType");
47501	swash
48367	IllegalArgumentException("Minimum
23517	one-shot)
21707	dir).getOpenDeletedFiles();
55770	testDuringAddIndexes()
12601	u5b03
21379	file)
46076	U+00FF:
56160	search.search
13105	u9c8e
52960	(byte)(0x80
66762	INDEXORDER
3681	java.io.IOException
4587	conf.getIndexDeletionPolicy().getClass());
61667	ucaff
22123	offset],
45745	U+00FE:
34262	Version#LUCENE_32},
42636	/Computers
51176	dups
60153	"\4\u016c\2\0\1\u016c\15\0\1\u016c\6\0\12\u016c\176\0"+
1189	files
27816	"\u0061\u0027\u2060\u005F",
36800	.setPosition
45370	"É¶"
6321	BooleanClause.Occur.SHOULD);
12704	u9c98
46074	U+00FD:
23438	doTestOperationsOnDiskFull(boolean
34993	filterDocIdSet
49802	int[jj_expentries.size()][];
67212	startTime)
59419	"\21\0\1\114\20\0\1\116\1\0\1\116\3\0\1\67"+
32372	testsimplefslockfactory
28614	getEndColumn()
39986	MultiTermEnum(this,
49581	1.0f){
497	testdeletereaderreaderconflictnofullmerge
32742	binaryBuf.arrayOffset());
16291	optional,
38958	testfieldcachereuseafterreopen
56448	setsegmentspertier
21016	((double)
63254	0x21,
10663	"\6\0\12\u0222\1\u0197\13\0\1\u0122\226\0\1\u0162\13\0"+
46616	U+208B:
4351	testRandomTrieAndClassicRangeQuery_2bit()
2131	nodehash
45838	U+00FC:
62463	optional;
49130	optional:
17688	Matching
8686	returning
41484	BytesRef("c"),
16233	String[terms.length];
207	assertTermDocsCount("after
27166	"\u3031\u0308"
61476	"\5\u02e2\175\0\1\u034d\16\u02e2\1\u06a3\13\u02e2\1\u034e\12\u02e2"+
48816	tokens[tokenUpto++];
66835	indexOf(terms[i]);
61013	"\1\u0522\6\0\12\u0523\1\u04d5\174\0\1\u0168\4\u0522\2\0"+
32706	assertNotNull("encode()
17512	testIncompatibleIndexes()
15126	assertTrue("stringValue
8852	statement
33329	1-"+currentRecordId);
56170	testbasicsrngcollating
58198	persistSnapshotInfos(String
41463	BytesRef("c");
20176	BooleanScorer(this,
46702	U+208A:
3816	useOldAPI(matchVersion);
45836	U+00FB:
35281	(curProxPointer
4206	assertSame(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE,
64333	1.0f);
54120	inserts
10930	"\2\0\1\u0337\15\0\1\u0337\6\0\12\u0337\1\u0272\175\0"+
49575	discardEscapeChar(term.image.substring
37705	rudimentary
32869	inverting
46644	U+208D:
32557	0x23,
50928	#addDocuments(Collection)}.
31774	("-verbose".equals(arg))
37138	morfologik
34705	tokens:
67872	tokens;
45834	U+00FA:
5785	int[][]
31492	actual:\n
11420	"\175\0\1\346\6\230\1\u04c0\23\230\1\347\12\230\175\0"+
56278	swaps
10830	"\1\u02d7\15\0\1\u02d7\6\0\12\u02d7\1\u02d8\13\0\1\u0122"+
24553	SortField("int",
3873	tokens.
18336	testSimpleEqualScores3()
35391	tokens,
23167	document.get("contents");
46710	U+208C:
6056	assertEquals("aloha",
1684	indexposition
18200	super.hashCode()
37600	palindrome",score1+SCORE_COMP_THRESH<score3);
3876	handle
67289	doTestReopenWithCommit
3369	determines
60308	"\2\u01d0\1\u0214\3\u01d0\1\u01d2\1\0\1\u0213\3\0\2\u01d0"+
27983	"\u0031\u002C\u0001",
28074	"\u0031\u002E\u2060\u0308\u0031\u0027",
41129	outputs.outputToString(cmo.output));
42959	associate
12376	ucb1d
19227	Ï¿Ï?ÏµÏ¹
8611	SinkTokenStream#reset()}.
22981	collectionutil
60956	"\1\u04e3\4\232\1\352\12\232\175\0\1\351\1\u04e4\31\232"+
4346	TRQ",
46266	U+2084:
26460	codingcase
3067	defined
12199	u5a6a
56043	add(Long
27076	"\n\u0001",
17827	default_doc_count_percent
43118	BooleanQuery(false);
2050	h="
17676	defines
4936	jjMoveNfa_3(jjStopStringLiteralDfa_3(pos,
59460	"\2\0\1\210\21\0\1\114\17\0\1\25\1\67\1\65"+
719	System.out.println("exception
35354	SoreType
31330	fields.size());
6360	queries.length
28232	c.collect(doc);
46289	U+2085:
39217	tfExplanation.setDescription("tf(phraseFreq="
63564	0x0f)
7475	testmoredocs
50363	checkpoint()
12777	ucb13
34119	bb.get(i).iterator();
10593	"\1\347\12\230\175\0\1\346\3\230\1\u016a\26\230\1\347"+
7337	topDocsSize();
25937	TopFieldCollector.
16544	times,
7361	discard
61230	"\1\u02e2\1\u034e\12\u02e2\175\0\1\u034d\12\u02e2\1\u05e4\17\u02e2"+
27304	"\u003A\u0030",
24005	"A-2",
970	NUM_ITER
5514	matchedtoken
46312	U+2086:
54402	setDescription(String
17621	assertEquals(TEST_VALUE,
7979	report.
35072	(int)(end
13178	ucb09
47783	angle
58298	aBytes[aUpto++]
50917	re-sorting
58255	(bytes[i++]
22390	luni
46335	U+2087:
54947	(time
34169	initsimple
43286	MapFieldSelector
35468	((int)x)
11649	"\6\0\2\u0561\1\u0560\2\u0561\2\u0560\1\u0561\1\u0560\1\u0561"+
47823	¼
42949	attClass.isAssignableFrom(Token.class)
47800	¼
65673	exists(String
47131	¼§
47857	¼
37224	fta
47841	¼
47826	¼
47836	¼
23159	ftl
27200	"\u3031\u0300"
48499	Scorer},
2129	fst
22626	<p>Thus
58213	String(bytes,
35693	0x000000FF)
46359	U+2088:
28205	<li>Filters
28995	IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);
47843	exclamation
14552	reports
46825	testlatin1accentfilter
10356	"\3\0\1\136\4\0\2\136\150\0\1\376\32\264\1\u0148"+
11857	reset,
44291	,"D",
47851	¼
47371	¼¿
63913	fun
6364	length");
47839	¼
47828	¼
47853	¼
20957	#setTermBuffer(String,
47714	¼
47707	¼
47721	¼
19045	"20or",
47730	¼
47739	¼
34875	setphraseslop
47868	¼
47749	¼
51383	triggerMerge
46383	U+2089:
47791	¼
47323	¼¾
47846	¼
47862	¼
47689	¼
47681	¼
21091	java.util.concurrent.locks.Condition;
47695	¼
47701	¼
9137	addField(Fieldable
11931	yypushback(int
57222	11111...111000
64568	readBytes(b,
11543	"\1\u051a\2\u051b\1\u051a\5\u051b\1\u051c\175\0\1\u0332\4\u051d"+
31097	tis.close();
52683	explain(int
40969	assertEquals(pairs.get(pos).output,
65542	message("forced
40988	reset:
37364	ASCII,
37252	anynegdelta
55763	assertEquals(110,
65331	fsa
13001	u5a56
60019	"\1\0\2\u016e\4\0\1\u016e\3\0\1\50\1\0\1\51"+
55082	synchronized(th)
20630	fsd
47873	¼¼
19891	log(i
48780	testTerms[i];
17969	farsiIndex.close();
10829	"\15\0\1\u02d5\6\0\12\u02d5\1\u02d6\175\0\4\u02d7\2\0"+
37327	stopWords.length,
17932	hyphens
47563	¼µ
14706	FieldCache.Parser},
13402	u5a4c
14703	FieldCache.Parser}.
33609	testmappingcharfilter
22513	determined
47815	¼»
12600	u5a60
12703	u9bf5
26808	fox
26	for
29946	"\1\54\7\0\1\54\4\0\2\54\3\0\2\54\1\0"+
14581	resets
33600	angry
42805	Token(char[]
17132	Set<CoreClosedListener>
2567	foo
977	t=0;t<NUM_THREAD;t++)
25711	VALUEMISMATCH
39663	testPrefixBooleanQuery()
6987	minBound
23951	org.apache.lucene.search.FieldValueHitQueue.Entry;
13104	u9beb
18632	ÜÜÜªÜ¬Ü
65087	UnCompiledNode<T>
39844	starts[i]
36065	query,searcher);
26203	growablewriter
52711	document.add(newField(FIELD_TEXT,
714	thread.getName()
14839	sortPos
12302	u9bff
18457	testskiptofirsttimehit
18498	UAX29URLEmailTokenizer.TOKEN_TYPES[UAX29URLEmailTokenizer.URL])
32189	lf.locksCreated.get(lockName);
16105	computation
39776	newReaders[i]
54164	((LogByteSizeMergePolicy)
25357	"The
29389	RuntimeException("not
43531	assertEquals(0,bv.count());
67406	IndexReader.openIfChanged(reader2);
35769	lowbyte
65533	incRef(sis,
49578	fms
36306	arcWithOutputCount
31148	Scorers.
1044	RuntimeException("now
51755	message("create
60641	"\4\0\2\137\150\0\1\u0101\12\266\1\u0407\17\266\1\142"+
49607	goop1.image.length()-1);
43491	obviously.
37146	inputtype
7000	max.longValue();
16863	cloneReader2.close();
24751	testCountingCollector()
52594	#combine(Query[])}
5236	"\135",
63740	x864321
29271	seektvx
36401	BufferedOutputStream(new
65770	numBitsToSet)
52266	fp,
42077	retain.
53088	Shift
538	org.apache.lucene.analysis.TokenFilter;
57335	~otherArr[idx];
7036	reached.
62932	fnm
33011	initreader
65224	(lastInput.length
28960	floatval
33099	typeAtt2.setType("OtherType");
52268	fp;
51850	(commitUserData
19769	chunkstates
40753	doTest()
32347	clearLock(String
38962	iter,
46183	U+2080:
58042	tvx.writeLong(tvf.getFilePointer());
39221	fieldNorms
30312	commit(Map<String,
58702	addDocs(final
51239	mergedName
11432	"\150\0\1\376\26\264\1\u04c9\3\264\1\141\12\264\1\0"+
54178	buffer[0]
39031	iter2
39018	iter1
65076	plugin:
55419	iter0
3407	TieredMergePolicy}.</p>
55773	SECONDS
42085	lessThan
26147	fielddoc
50718	message("setRAMBufferSizeMB
22366	a.length);
25387	LowerCaseFilterMock
64883	fld
10379	"\2\0\1\u0161\15\0\1\u0161\6\0\12\u0161\1\u0162\13\0"+
29403	PrefixQuery
6083	buffer[1]
41191	tempDir
46195	U+2081:
29063	fn,
51118	bufferedDeletesStream.clear();
61495	"\1\1\15\0\1\1\24\0\2\1\1\0\4\1\1\0"+
1783	fn)
10599	"\3\0\1\136\4\0\2\136\150\0\1\135\4\u0140\2\136"+
34666	(!function.equals(other.function))
11897	Reports
53840	fly
21005	gotExc
1786	fn;
40798	in.length)
27685	"\u0061\u2060\u0031\u0027",
48084	newFile);
37389	(actualVersion
31655	fie
57911	IndexFileNameFilter();
9581	"\1\ue48b\1\ue52e\1\ue5d1\1\ue674\1\ue717\1\ue7ba\1\ue85d\1\ue900"+
37211	fst's
46220	U+2082:
64674	iters
28210	MultiCollector}
918	testDocumentsWriterExceptions()
34787	sublcass
35144	qtest(pt("xx",
38908	commituserdata
40858	fst);
51089	updatePendingMerges(maxNumSegments);
30257	fis
7871	fit
48673	(this.__test_dir.exists())
262	fix
40085	cloned/reopened
19915	fieldscorequery
33448	writelong
21317	assertSameSeekBehavior("d1",
46243	U+2083:
67828	testLastSegmentTooLarge()
9796	"\1\71\3\0\1\53\2\0\1\54\3\0\1\72\7\0"+
62602	search(t2));
61593	u9be1
2542	payloadtermquery
18686	"à¦«à¦¾à¦à¦¨à§à¦¡à§à¦¶à¦¨",
33229	testreflectionoftostring
60242	"\2\u0289\1\u028a\1\u0289\1\u028a\1\u0228\13\0\1\u0126\226\0"+
59877	"\2\232\1\u016f\1\352\12\232\175\0\1\351\1\232\1\u016f"+
17319	Occur.MUST);
8232	safety
30318	Error("failOnRollback");
32412	fl;
36452	(bytesPerArc.length
1496	atLeast(100);
59679	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\1\u0107"+
25308	prefixx
3985	matchVersion)
2810	maxTime(multiThreaded))
52799	Inc.,
8169	super.readInt();
597	TEST:
30992	LinkedList<File>();
47341	horn
10257	"\1\173\1\0\1\50\1\0\1\174\2\0\1\175\3\0"+
3812	matchVersion,
49106	setPhraseSlop(int
55630	id75)));
62194	f";
49425	'9')
14789	\"").append(field).append("\">");
3833	AttributeSource,
53613	(scoreDoc
12307	u9f2e
24058	f",
60933	"\1\u021e\152\0\4\u04d3\2\0\1\u04d3\15\0\1\u04d3\6\0"+
31973	getBytes
5969	block_size
8363	host
3629	notifyall
28039	"\u0031\u002E\u2060\u3031",
40608	"ftation"};
68076	int[ENTRY_SIZE][ENTRY_SIZE];
12708	u9f24
22771	FieldCache#getDoubles(IndexReader,String,FieldCache.DoubleParser)}.
62739	c.topDocs(0,
49079	e.initCause(tmc);
36159	"FST";
28547	TEST,
40655	ByteSequenceOutputs
50523	href="#deletionPolicy">above</a>
51332	commitLock
24453	"IEGCA");
13109	u9f1a
65480	(KeepOnlyLastCommitDeletionPolicy).
20664	"file";
44771	U+00EF:
43880	hex($a)
27367	"\u002C\u0308\u0031\u003A",
55808	didWarm
23526	"docswriter
61598	u9f10
61169	"\7\u02e2\1\u05aa\2\u02e2\175\0\1\u034d\1\u05ab\31\u02e2\1\u034e"+
3081	List<float[]>
40078	writer.nrtIsCurrent(segmentInfos);
5329	matchedToken;
15204	FieldSelectorResult.NO_LOAD;
34839	this.prevType
4106	increasing
1083	startDir.close();
2080	scratchArc.output.hashCode();
5683	AttributeImpl
17481	getDir1(random);
20607	matchVersion;
7331	application,
25726	calculateed
40428	application.
101	public
64321	termCountCutoff);
53895	buffer.getOffset());
53747	Collection<?>
26875	o.endOffset
9	Software
871	tdocs
28937	intVal(doc);
63891	TestingCharTokenizerNormalize
27033	"\r\r",
51756	compoundFileName);
61668	ucba2
414	apache
29581	"\1\0\10\132\1\0\3\132\1\0\27\132\1\0\12\132\1\0\5\132"+
21302	dir.openInput(name);
66283	numPostingInt;
65999	Float.valueOf(10));
59456	"\32\36\1\142\12\143\1\0\1\137\1\144\1\137\1\0"+
59394	"\1\26\135\0\1\211\3\0\1\212\2\0\1\213\12\0"+
52473	hood
8455	verifierhost
46879	hook
58958	assumeTrue("test
12778	ucbb6
48301	matchPayload.addAll(possibleMatchPayloads);
43881	hex($b)
26224	char's
40959	inputToString(inputMode,seekResult.input)
51169	message("waitForMerges
33255	//Rolls
30352	TwoPhaseCommitWrapper
65253	compileAllTargets(UnCompiledNode<T>
59649	"\2\0\1\170\3\0\1\54\2\0\1\55\3\0\1\56"+
2399	items
53815	matchVersion}
14671	determining
13179	ucbac
44558	,"ffi",
22070	day
58740	"ab\ufffd\ufffdcd",
38601	testLastModified()
8558	newSinkTokenStream(SinkFilter
9764	"\1\34\2\0\1\34\1\65\32\25\1\0\12\64\1\65"+
50636	(mergeScheduler
4795	assertEquals(1.5,
5997	org.apache.lucene.util.Attribute;
1364	ddd
24183	getRandomCharString(num,
28768	df)
12377	ucbc0
52265	df,
29167	charBuffer
58512	setIngoreCase.add(Integer.valueOf(1));
16354	testCharFilter1()
51083	(test
33048	AttributeSources
24625	bw.scorer()
33154	testLUCENE_3042()
63144	findTerms");
52267	df;
27485	"\u005F\r",
41778	allPrefixes
56456	soq.setBoost(getBoost());
19208	ÏÏµÏÏ
59275	"\1\0\12\65\1\66\1\0\1\67\3\0\1\66\20\0"+
8948	(term
17563	assertEquals(docParallel.get("f3"),
8606	AttributeSource}
64907	mtr[i].timeElapsed;
30801	charBuffer[0]
36369	emptyOutputBytes,
17604	getdir1
17605	getdir2
22209	hot"
39457	folks
67551	b");
57345	andNot}
29518	getproperties
36177	emptyOutputBytes;
17314	QueryWrapperFilter(termQuery);
28028	"\u0031\u002C\u0308\u0031\u002C",
5433	jjnewstatecnt
47663	e92
47673	e93
47662	e90
47672	e91
47971	fullMerge)
6892	getMax()
7500	ByteSliceReader();
60018	"\4\0\2\137\150\0\51\u016e\1\u01a8\6\u016e\1\0\1\233"+
47604	e7f
47603	e7d
47591	e7e
47575	e7b
47590	e7c
9557	"\1\u6a4b\1\u6aee\1\u6b91\1\u6c34\1\u6cd7\1\u6d7a\1\u6e1d\1\u6ec0"+
47555	e7a
64014	COUNT
9358	"\2\142\6\143\1\0\2\143\1\142\2\0\5\142\1\0\1\142\1\0"+
47626	e89
11482	"\151\0\4\u04f1\2\0\1\u04f1\15\0\1\u04f1\6\0\12\u04f1"+
47619	e88
47625	e87
50403	dropAll()
47618	e86
44983	"É­"
47624	e85
43440	elsewhere.
47617	e84
65384	initialCommit);
47623	e83
47615	e80
9784	"\1\61\4\0\1\62\2\0\1\63\41\0\2\25\1\64"+
47622	e81
21788	elsewhere,
47616	e82
17627	ctl
7271	hold
35425	actions.
47523	e6e
47534	e6f
6389	bquery
40482	CachingTokenFilter},
47520	e6a
47531	e6b
47521	e6c
47532	e6d
55509	newField("f2",
58374	"by",
47571	e77
47553	e76
21296	csw
47573	e79
47554	e78
56022	csq
47568	e73
34635	PayloadFunction#docScore(int,
39024	entry.getValue();
47551	e72
2285	PayloadAttribute
47570	e75
21301	csr
47552	e74
49868	getphraseslop
44429	U+00EA:
59306	"\1\25\1\141\32\36\1\142\12\143\1\66\1\137\1\144"+
12020	home
61228	"\21\u02e2\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2\1\u05e1\26\u02e2"+
1330	iw.addDocument(doc);
49455	org.apache.lucene.analysis.SimpleAnalyzer}.
15007	'z'));
29097	//System.out.println("Fieldable
47511	e9d
51374	flushDocStores
47516	e9e
48418	(!scorerDocQueue.topNextAndAdjustElsePop())
55756	assertTrue(warmer.warmCount
62447	coordFactors.length;
47510	e9c
47107	e9b
51925	nrtIsCurrent(SegmentInfos
46904	e9a
46205	SANS-SERIF
2657	three",
31929	Double#toString(double)}
7862	portion
34548	term.text().startsWith(prefix.text()))
17775	useless.
47632	e8c
47636	e8d
47641	e8e
47649	e8f
30320	testPrepareThenCommit()
40758	doTest(_TestUtil.nextInt(random,
47635	e8b
47631	e8a
25914	onInit(List<?
47674	e95
63824	setbitsiterator
4325	cur
47664	e94
47536	e97
65360	cut
47163	e96
18161	collector.setScorer(new
47650	e99
47627	e98
62981	Math.min(b.length,
54588	System.out.println("Sorted:
63256	0x31,
54128	posIncAtt.setPositionIncrement(0);
38848	assertNull(r2);
44765	U+00EC:
10800	"\150\0\1\376\21\264\1\u02b7\6\264\1\u02b8\1\264\1\141"+
44605	,"G",
7212	SpanFilterResult
45140	"É²"
20113	cIter.next();
7912	applications
4179	doc=searcher.doc(sd[sd.length-1].doc);
6312	fields[i],
62608	C:optimize
58021	(lastDocID
44431	U+00EB:
63098	charTerm
63257	0x32,
39936	numDocs()
37963	cxf
50508	Maximum
55760	_TestUtil.checkIndex(dir1);
22562	fields[i];
34232	arrive
39954	numSubReaders)
45142	"É³"
31531	RuntimeException();
16745	!exception;
34792	brown",
9252	docidupto
23431	TermQuery(term),
44769	U+00EE:
37887	<K,V>
35118	focusing
32253	freed",
62401	xxxxx
52313	Payload(p));
59647	"\1\0\3\137\1\0\2\137\1\140\3\137\3\0\1\137"+
67236	(err)
17374	numDocs);
53708	testsearchafter
8713	fieldCount
62672	threadsafe
27281	"\u0041\u0308\u0031\u0027",
57432	otherarr
52441	setLongValue(final
44767	U+00ED:
67066	this.searcher.search(pq,
3432	List<SegmentInfo>
7677	serialversionuid
7344	params
55298	(offsets1
62283	qr.extractTerms(terms);
17727	TermQuery(term);
28574	refill()
41579	allTerms)
64654	setbuffersize
32588	encoded.length)
46642	PARENTHESIS
32582	encoded.length,
58916	this.storeTermVector
5726	org.apache.lucene.store.DataInput;
67642	withreopen
57944	scores[idx];
66203	testQueries08()
10813	"\1\u02c5\6\0\12\u02c5\215\0\1\u02c6\223\0\4\u01ca\2\0"+
54498	insist:
19914	getName();
45280	U+00F8:
52208	sourcesegment
29926	"\1\25\2\53\5\0\1\25\2\0\1\25\1\53\4\0"+
64836	BytesRef(actualTerm.text()));
20137	required/prohibited
55782	endTime);
57167	-1L);
29372	((buffer[1+limit]&0xff)<<16)
56351	first_cut);
46957	e04
46964	e03
59834	"\3\0\1\137\4\0\2\137\150\0\1\u0153\5\266\1\u0107"+
34721	foo",
46958	e06
46965	e05
46977	e08
46966	e07
46985	e09
45832	U+00F9:
46876	e00
46956	e02
46902	e01
29302	models
31396	reader.setNorm(searcher.search(new
27836	"\u0061\u0027\u2060\u0031\u003A",
5356	e1)
41863	input.ints[0]
66467	i=0;i<streamCount;i++)
47072	e19
47040	e18
47071	e17
38746	index1.termPositions();
47039	e16
65389	cms
47070	e15
47038	e14
47020	e13
24334	cmp
47004	e12
41049	cmo
47019	e11
47003	e10
57190	fastClear(long
9888	"\2\0\1\25\2\0\1\25\4\0\2\114\11\0\1\25"+
6483	e2)
50490	getLogMergePolicy().getUseCompoundFile();
47002	e0e
21732	anyOpenDelFiles);
47018	e0f
47001	e0c
47017	e0d
47000	e0a
47016	e0b
51090	updatePendingMerges(int
41940	getdefaultfieldcodec
40029	commitUserData)
47161	e29
57612	setposition
53120	cp;
3729	setlength
33299	expecteds.get(val));
34071	cnt
47147	e26
67898	char[256];
47159	e25
47148	e28
27494	"\u005F\u0308\u3031",
47160	e27
47145	e22
47138	e21
47146	e24
47158	e23
59947	"\1\25\1\141\32\36\1\142\12\143\1\u0152\1\137\1\144"+
56811	expirationtimedeletionpolicy
22028	model:
47124	e20
8722	HashMap<String,Document>();
47074	e1d
47094	e1e
47106	e1f
25827	NearSpansUnordered(this,
47041	e1a
11279	"\32\230\1\347\4\230\1\u0458\5\230\175\0\1\346\32\230"+
47073	e1b
47042	e1c
57786	commitData.put("tag",
47222	e30
48922	testfields
47236	e31
28219	col
30478	this.comparator
47224	e34
47238	e35
47223	e32
47237	e33
14955	randomTerm();
24900	e38
47271	e39
47254	e36
62740	topHits.totalHits
15742	exists)
47270	e37
59042	alreadyclosedexveption
58378	"it",
4739	conf.setMaxBufferedDocs(1);
47198	e2d
50308	IndexWriter#setTermIndexInterval}
7049	exists.
47178	e2c
47162	e2b
1624	exists,
47149	e2a
41538	exists;
62933	exists:
30298	this.failOnRollback
47199	e2f
47179	e2e
63880	StringReader(""));
47293	e40
47309	e41
47295	e42
47311	e43
35374	bitSet.nextSetBit(docId
47317	e44
47330	e45
47319	e46
17805	cpu
47332	e47
64168	u2620ce
47320	e48
1058	testForceMergeExceptions()
11488	"\1\u04f4\6\0\1\u04f5\2\u04f6\1\u04f5\5\u04f6\1\u04f7\175\0"+
47333	e49
3272	lastReader
50612	sweep
31181	createIndex("index.singlesegment.cfs",
60661	"\1\u03a0\13\0\1\u033c\160\0\1\u03a1\4\u0413\2\0\1\u0413"+
47255	e3a
31078	out.println(reader.document(i));
47256	e3c
47272	e3b
58485	lowerArr[i]),
47292	e3e
47273	e3d
39003	cs)
47308	e3f
37104	topCount="
32332	locksCreated
18856	testAlphanumericSA()
27066	"\r\u0061\u002C",
47417	e56
47435	e57
47416	e54
25272	matchAll[i];
36631	(follow.isFinal())
47433	e55
4063	generate
47349	e52
47380	e53
23544	Math.min(left,
5447	jjchecknadd
47348	e50
47379	e51
30271	sameterminfo
47461	e58
47479	e59
47378	e4f
56657	i=0;i<ITER;i++)
10310	"\1\352\24\36\1\141\12\142\1\u013e\1\136\1\143\1\136"+
47346	e4e
21626	(sEnd)
47376	e4d
28741	Example
47345	e4c
47335	e4b
47321	e4a
12779	ucc59
47491	e60
28783	RAMOutputStream();
29485	testRuleInvariantAfterClass()
38944	assertindexequals
52133	mergefinish
47506	e65
47494	e66
47508	e67
47495	e68
47504	e61
47492	e62
47505	e63
47493	e64
56074	TermRangeQuery(f,
60875	"\1\352\12\232\175\0\1\u0101\32\266\1\142\1\u04ad\11\266"+
47509	e69
52564	re-writing
8926	<p>Term
20227	buffer.append("-");
47466	e5e
47483	e5d
47484	e5f
33195	assertEquals("bar",
47462	e5a
47464	e5c
6923	q.min.equals(min))
25551	badEntries
47481	e5b
2846	increase
62785	_TestUtil.assertEquals(topHits,
61669	ucc45
47535	e71
47524	e70
43707	justcompilespans
31635	number_of_chars
17011	offsets,
36143	BIT_ARC_HAS_OUTPUT
42792	offsets.
55980	offsets)
64045	assertEquals(16385,is.readVInt());
16279	inOrder);
19003	emailList
3186	avoid
44293	U+00F0:
58102	pp.position,
29195	offsets?
17056	offsets;
32823	termsHashPerField;
134	ccc
30547	"\6\25\1\0\2\25\4\0\5\25\1\0\5\25\1\0"+
55294	offsets1
57070	OpenBitSet(long
55296	offsets2
32741	binaryBuf.limit()
12378	ucc63
53318	in.readVLong();
10458	"\1\0\1\50\1\0\1\174\2\0\1\175\3\0\1\53"+
28423	assertEquals("bcde",
41348	(iter
17145	cfsReader
58386	"their",
43483	testspanfirstversusspanterm
67208	java.net.ServerSocket;
19562	Wrapping
45121	U+00F1:
22035	<li>Return
50354	"info="
13180	ucc4f
53615	lock.unlock();
53529	scoreDocs,
4716	IndexDeletionPolicy
61050	"\1\u053a\6\0\12\u053d\1\u053b\13\0\1\u033c\160\0\1\u03a1"+
18018	extremes
26435	numBytes,
43126	ElevationComparatorSource(priority),
55790	assertEquals("openDeleted="
23466	writer.close");
21945	numBytes)
33711	SloppyPhraseScorer
24978	jfhdb
67980	poslengthatt
32631	numBytes2
33737	position-combinations
7791	e);
32618	numBytes1
2168	MergePolicy}
31464	corresponds
21948	numBytes;
17324	Query#createWeight)
53501	getSearchables()
7934	indirectly
43551	doTestDgaps(10,0,1);
45270	U+00F2:
46526	,"19.",
53830	(item
3851	ioBuffer
29529	<code>getFloats()</code>
57717	writer.abort",
67885	offsetAtt.setOffset(t.startOffset(),
33774	pp.position;
42442	PayloadData(numFieldInstancesToSkip,
17442	binarysearch
7580	ch;
21527	cfw
29838	"\4\0\2\26\3\0\2\26\1\0\1\26\4\0\1\26"+
15951	cfx
32322	FIFO).
7407	termsHashPerField,
16224	qtest(reqB(q),
1188	cfs
21535	cfr
19659	Coarse
39552	ch2
39550	ch1
58819	ch,
45272	U+00F3:
61333	"\1\u058b\13\0\1\u02e1\160\0\1\u034d\32\u02e2\1\u034e\1\u063d"+
11749	(Thai,
46843	folded
17942	Neither
19341	wordbreaktest
42107	Comparable<IntsRef>,
10590	"\5\230\1\u016a\24\230\1\347\12\230\175\0\1\346\15\230"+
27028	"\u0001\u0031\u002E\u2060",
9739	"\41\0\2\25\1\64\1\0\1\65\1\0\1\65\1\66"+
46831	cha
52519	assertEquals("field1:jumps",
11756	together
59787	"\1\66\1\67\1\0\1\25\2\0\1\25\1\141\22\36"+
45274	U+00F4:
60025	"\1\u01c2\1\266\1\u01c3\1\u01c4\1\266\1\u01c5\1\u01c6\1\142"+
49928	jj_2_1
5742	</p><p>
1462	doccount
53151	(char)(((b&0xf)<<12)
56422	tmp.setMaxMergeAtOnce(3);
49335	newPhraseQuery(){
43713	TestLatin1AccentFilter.testU().
28586	bufferLength);
53446	nrTopDocs.totalHits
48865	mapper.getTermVectorEntrySet();
51227	infos.add(info);
45276	U+00F5:
64632	bufferLength))
32387	createnewfile
36324	finalBytes;
6563	{@linkplain
32196	dir.setLockFactory(NoLockFactory.getNoLockFactory());
40311	matchingsegments
56382	DocumentsWriter.BYTE_BLOCK_SHIFT];
46850	chr
38059	Double.NEGATIVE_INFINITY,
53667	'after',
19105	blast
52821	http://www.icu-project.org
19576	charSetDecoder
64169	u2620ne
17042	currentField
42074	int[numComparators];
33952	solution
36322	finalBytes,
39295	microsoft
23542	ids.size()
45278	U+00F6:
66471	postingsArray.byteStarts[termID]
27010	"\u0001\u0061\u0027",
35927	(tokenizer
38832	LUCENE-1609:
32170	MockLockFactory
21397	cis
62180	System.out.println("rewritten
6928	q.maxInclusive
54665	abnormal
22450	general,
59404	"\1\27\5\0\1\27\2\0\3\27\7\0\1\27\1\0"+
49289	newPhraseQuery();
43622	delCoreKey);
32474	writer2.getConfig().getMergeScheduler()).setSuppressExceptions();
37516	Term("contents","woo"));
37136	non_final_end_node
35911	"C",true,
22780	Double.NEGATIVE_INFINITY;
6640	<em>trie</em>,
32409	randomField()
20189	BooleanScorer2(this,
19989	BooleanQuerys.
59127	"\2\u7288\2\u732b\2\u73ce\2\u7471\2\u7514\2\u75b7\2\u765a\2\u76fd"+
21321	assertSameSeekBehavior("d2",
20539	significantly
27619	"\u0300\u0308\u0061\u002C",
39874	doOpenIfChanged(readOnly,
40933	termsMap.containsKey(scratch));
46520	NINETEEN
47076	ebb
47044	eba
47077	ebd
47045	ebc
47078	ebf
24545	assertSameValues
47046	ebe
14746	this.comparatorSource
52792	recipient
47353	ed0
63127	System.out.println("numDocs="
47385	ed1
47355	ed2
47387	ed3
47357	ed4
47389	ed5
47358	ed6
47391	ed7
47360	ed8
47393	ed9
6112	StringReader("foo
54262	assertTrue(strings.add(str));
41734	r[0].output.longValue());
46884	eac
46910	eab
46883	eaa
46912	eaf
46885	eae
46911	ead
58747	"\ud917",
65952	mfqp.parse("one*
47048	ec0
32207	(can't
47080	ec1
27946	"\u0031\u0027\u0308\u003A",
45653	U+00DF:
29428	superclass
52443	NumericTokenStream(precisionStep).setIntValue(value))</code>
8368	on\n"
47051	ec4
47084	ec5
47050	ec2
30192	enumerator.termInfo();
47082	ec3
47181	ec8
47201	ec9
43099	"a"}));
47053	ec6
47086	ec7
52687	expl.setDescription("MinPayloadFunction(...)");
61450	"\1\u034e\10\u02e2\1\u0608\1\u02e2\175\0\1\u034d\15\u02e2\1\u03c1"+
52255	delinc
7015	maxBound);
907	FailOnlyOnFlush();
39212	phraseFreq;
39012	cs.clear();
46913	eb1
46887	eb2
46914	eb3
46888	eb4
45728	U+00DE:
64178	ramindexinput
10755	"\22\230\1\347\4\230\1\u027f\5\230\175\0\1\346\10\230"+
46886	eb0
1918	write
47075	eb9
20973	token's
15360	testlazyfields
46915	eb5
46889	eb6
46916	eb7
3112	caching
47043	eb8
5446	jjaddstates
35397	token).
3677	<tt>'s</tt>
20395	(lazyFieldsToLoad.contains(fieldName)
62355	qB.getSpans(searcher.getIndexReader());
43350	SortedVIntList(BitSet
19060	WordBreakTestUnicode_6_0_0
18153	theScore
53277	this.doShare
59963	"\1\25\1\u0196\32\36\1\142\1\u015d\1\u0198\1\u0197\2\u015d"+
29100	termVector
46043	U+00DD:
46878	ea2
29413	buffer.append(prefix.field());
40989	isDone
46906	ea3
20826	KeywordAnalyzer());
46877	ea0
46905	ea1
22968	CollectionUtil.quickSort(list,
59537	"\1\25\10\0\1\25\4\0\1\25\6\0\1\25\122\0"+
46882	ea8
36066	testBooleanSHOULD()
46909	ea9
30807	buffer.lastTrailingHighSurrogate
46881	ea6
24404	(val.charAt(0)-'A');
46908	ea7
46880	ea4
46907	ea5
50963	getFlushCount()
7820	selector
47284	efa
48927	getstartoffset
61670	ucce8
47289	efb
47593	efc
63508	range(8,0,-1):
31689	analyzerPerField.put("special",
47646	efe
47657	eff
65943	mfqp.parse("one~
25751	valuemismatch
29907	"\53\0\1\154\3\0\1\155\5\0\1\156\3\0\1\157"+
1699	not_analyzed_no_norms
33186	src.addAttribute(FlagsAttribute.class));
7417	termshashperthread
51320	eg,
13181	uccf2
50181	"write.lock";
47580	eeb
47560	eec
47559	eea
47583	eef
47581	eed
6805	this.field
47561	eee
6522	eg:
39075	map.putAll(Collections.singletonMap(NOT_IN_MAP,
6417	input.markSupported();
65330	owner.validOutput(output);
66146	TestBoolean2
47562	ef0
47363	edc
47397	edd
47365	ede
57894	bb.position();
47398	edf
47361	eda
9691	"\2\25\117\0\1\25\3\0\2\25\2\0\2\25\1\0"+
47395	edb
24199	getEmptyIndex()
14641	SHORT
47656	ef9
55395	i<iterations;
20487	edt
47644	ef6
47653	ef5
47645	ef8
47654	ef7
47642	ef2
47584	ef1
47643	ef4
47651	ef3
47383	ecf
47381	ecd
47351	ece
47203	ecb
18363	q2.add(tq("hed",
47350	ecc
14734	(String
3634	indefinitely
306	TERM:
47182	eca
52214	os_version
24103	"U")
61437	"\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\6\u02e2"+
47579	ee9
47558	ee8
47578	ee7
47557	ee6
26324	#encode(byte[],
47576	ee5
47556	ee4
47400	ee3
47367	ee2
47399	ee1
47366	ee0
66154	RAMDirectory(directory));
52013	max_term_length
50253	dye
27758	"\u0061\u0027\u003A",
12707	u9e81
49350	WildcardQuery(t);
595	System.out.println(Thread.currentThread().getName()
13108	u9e77
2217	maxSegmentCount,
45084	,"(m)",
15333	f="
58928	update(boolean
58051	perDoc.perDocTvf.writeTo(tvf);
66857	Arrays.toString().
61597	u9e6d
28841	ByteBlockPool
23117	indexWriter
5152	jjMoveStringLiteralDfa1_1(long
7947	DEFAULT_MAX_BUFF
4005	chartokenizer
17105	(unchanged)
10440	"\1\25\1\0\32\25\1\0\12\u017e\175\0\1\u017f\45\u013f"+
16729	assertFalse("deleting
16113	mscores;
43898	testAllFoldings()
38470	assertTrue(indexedFieldNames.contains("unstored"));
19789	createIndex(true);
1920	series
8810	stack.push("@Before");
10128	"\1\65\1\66\1\0\1\25\2\0\1\25\1\140\5\352"+
59007	ii.readBytes(slice,
35188	numoverlap
29891	"\1\0\1\25\1\0\1\25\4\0\1\25\4\0\1\52"+
34283	DEFAULT_RAM_BUFFER_SIZE_MB;
32051	fieldcacheimpl
33788	matchLength)
64922	docId++)
57654	ArrayUtil.grow(offsets);
11421	"\1\346\32\230\1\347\5\230\1\u04c1\4\230\175\0\1\346"+
51579	(and,
12780	uccfc
27659	"\u0061\u2060\u00AD",
36915	inCounts.length);
43021	tryIncRef(G
8322	remaining
43432	equivalence
5746	operations,
21891	operations.
10526	"\3\136\3\0\1\136\4\0\2\136\150\0\51\u0167\1\u01a0"+
12306	u9e8b
40030	segmentInfos.setUserData(commitUserData);
55253	verifyEquals(TermFreqVector[]
52035	dvd
20125	"match
7350	newTopDocs(null,
56162	testmultitermconstantscore
11930	yylength()!
28136	aletter
4910	org.apache.lucene.document.DateTools;
51825	somewhere,
55087	dw;
22783	FieldCache.DEFAULT.getDoubles(reader,
40150	smi.ord
4170	assertEquals("Score
24086	g",
44528	,"F",
45767	U+00DC:
32562	0x41,
22907	(SpanNearPayloadCheckQuery)
31332	assertEquals(""+i,
1293	UOE");
30306	prepareCommit
25055	djaihgfebc
25815	(i.hasNext())
59509	"\12\333\1\0\1\137\1\153\1\137\1\0\2\154\1\140"+
28004	"\u0031\u002C\u0308\u0030"
49554	wildcard=true;
2013	!arc.output.equals(scratchArc.output)
18853	StandardAnalyzer,
60262	"\1\u02a5\5\232\1\u02a6\14\232\1\352\12\232\175\0\1\351"+
63260	0x42,
45765	U+00DB:
3142	replay(Collector
51586	"merge");
4709	cloneable.
63677	x764321
33786	matchLength2
11205	"\4\264\1\141\12\264\1\0\3\136\1\0\2\136\1\137"+
64840	allowemptystring
55353	arr[i*2+1]
63262	0x43,
45763	U+00DA:
43105	"boosted",
41540	exactOnly
66237	hits4.totalHits);
54816	getcanonicalpath
21325	selected
33983	Comparator<PhrasePositions>()
30227	enumerator.skipInterval
63171	test2bterms
53118	0x010000)
34200	overwrites
34441	mergeSegmentWarmer;
26807	teststartpositions
8394	(myID
56895	"\0\142\0\160\0\176\0\214\0\232\0\250\0\266\0\304"+
11179	"\1\347\12\230\175\0\1\346\32\230\1\347\3\230\1\u0407"+
32725	Round
24932	sortmissinglasttesthelper
34439	mergeSegmentWarmer)
58513	setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));
53105	LEAD_SURROGATE_SHIFT_);
1063	i=0;i<27;i++)
28024	"\u0031\u002C\u0308\u0031"
56850	"\1\0\2\12\2\0\4\12\3\0\1\12\36\0\2\12\1\0\3\12"+
31761	System.err.println("Specify
44425	U+00E8:
67110	matchVersion.onOrAfter(Version.LUCENE_24);
34816	prevStartOffset;
66205	testQueries09()
34372	minimal
62654	counters
41961	dot
21475	a1.close();
11467	"\24\230\1\u04e4\5\230\1\347\12\230\175\0\1\346\32\230"+
41894	twolongs
66912	outputs2.getNoOutput())
2188	going
16779	"field1",
44427	U+00E9:
59608	"\1\25\2\0\1\25\1\141\6\355\1\36\5\355\3\36"+
54622	testemptyarraysort
9486	"\0\u0a30\0\u0ad3\0\u0b76\0\u0c19\0\u0cbc\0\u0d5f\0\u0e02\0\u0ea5"+
58541	assertFalse(set.contains(string));
23136	initIndex(random,
881	setDoFail()
17503	doc11.getFields().size());
3402	SerialMergeScheduler},
59341	"\1\0\1\26\2\0\1\25\1\152\32\36\1\142\1\43"+
26679	discouraged.
67895	offsetAtt.setOffset(correctOffset(lastOffset),
34041	distinctGroupIDs
4929	ds)
67106	StandardAnalyzer}
2644	counter;
34445	do,
44123	U+00E6:
22342	(endindex
21212	createRandomFile(Directory
30636	"\1\0\1\25\103\0\2\34\6\0\1\34\56\0\1\34"+
60182	"\5\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
30181	((enumerator.prev()
42720	sentence
62160	dmq
3004	collection
34638	payloadScore);
62657	counter.
20064	do:
2731	counter,
48641	fieldState.boost
55201	f1;
8613	do;
39414	counter)
32902	Term's
39802	oldNormsCache.entrySet())
66639	testAssumeRule()
53456	java.util.concurrent.Callable;
43586	docompare
44222	U+00E7:
6390	getclauses
18535	Õ¸Õ¾
38174	//System.out.println("0x"+Long.toHexString(min>>>shift)+"L,0x"+Long.toHexString(max>>>shift)+"L)/*shift="+shift+"*/,");
68098	(int)value;
55214	f2;
36918	selection
49390	minSimilarity,
58457	set.add(Integer.valueOf(1));
6265	minSimilarity)
17210	notifyCoreClosedListeners();
59483	"\1\137\1\145\1\140\3\137\3\0\1\137\4\0\2\137"+
12379	ucd06
359	doc
4723	conf.setMergeScheduler(null);
1190	testSimulatedCorruptIndex2()
34927	dog
43052	reopenLock.tryAcquire();
7106	doi
18295	dq,
36462	arcsStart="
62375	s(span.doc(),
7238	provide
51115	merges");
31234	(Integer.parseInt(d.get("id"))
48035	retrieving
29137	readTermVector(fields[i],
51095	selecting
3936	Character.charCount(c);
17026	storeOffsets
62640	testbooleanor
4180	assertEquals("Last
39979	doSetNorm(int
59025	mmapDir.setUseUnmap(true);
32109	(byteUpto
36533	expand
34267	non-contiguous
35053	collecting
33840	pp2.position
60546	"\161\0\4\u039f\2\0\1\u039f\15\0\1\u039f\6\0\12\u039f"+
8884	logic
34038	termGroups(rptTerms,
20046	#getMaxClauseCount()
25504	dup
20347	cc.collect(numDocs);
5867	due
38016	prefixVals[i]=NumericUtils.longToPrefixCoded(vals[i]);
35459	0x33333333);
66910	outputs2.getNoOutput();
18317	testSimpleEqualScores1()
4930	ds;
16731	deleteWorked(1,
23261	i==0,
53658	setfields
48943	f50
51269	'null'
22337	Comparable<?
46733	COMMERCIAL
4152	(constant
61596	u9dca
53853	highSurrogateAt3
13107	u9dd4
11837	numRead
47943	instruction
7221	bitSpans(IndexReader
50356	segmentInfos.info(idx)
2206	NoMergePolicy(true);
5477	lexer
64502	includeSpans.doc();
52754	topdocs.scoreDocs[i].score;
6163	resizetermbuffer
20013	maxClauseCount)
42771	them.</li>
19882	Object[s.getIndexReader().getSequentialSubReaders().length];
4525	sortableinttofloat
11302	"\6\0\12\u0466\1\u0467\175\0\4\u0468\2\0\1\u0468\15\0"+
35774	hackers
11583	"\175\0\1\346\32\230\1\347\6\230\1\u012f\3\230\175\0"+
2564	testnomatch
12305	u9de8
46460	FOURTEEN
62787	rebaseDocIDs(int
20008	maxClauseCount;
51248	merger.add(reader);
16876	assertDocDeleted(SegmentReader
19301	serial
15837	Definitely
27130	"\u000B\u0041",
30989	workDir.mkdirs();
36862	chain.length
39184	(s.noDocs)
53654	cachesim
14877	(Byte)
22942	CollectionUtil.quickSort(list1);
10802	"\1\264\1\u02ba\10\264\1\0\3\136\1\0\2\136\1\137"+
7574	equivalents
7755	f++
36869	Arc<T>().copyFrom(scratchArc),
25327	testparsingandsearching
52085	getdefaultinfostream
12706	u9dde
22630	<code>NOT_ANALYZED</code>
41241	randomTerm));
2166	java.util.Map;
43995	U+00E0:
12781	ucd9f
30453	stiA.term.compareTo(stiB.term);
24579	assertEquals(docs1.scoreDocs[0].score,
39251	i<termArrays.size();
42143	aInts[aUpto++];
55954	Take
1184	did
37691	numterm
64472	SpanNotQuery((SpanQuery)include.clone(),(SpanQuery)
59677	"\2\u0107\2\266\1\u0107\1\266\1\u0107\13\266\1\u0107\2\266"+
49	obtain
61446	"\226\0\1\u062f\13\0\1\u033c\226\0\1\u0636\175\0\4\u054c"+
15314	NumericField.DataType.INT;
20658	testNoDir()
30392	rollbackcalled
25722	directoryreader
43997	U+00E1:
66315	bytesUsed(long
61671	ucd8b
63629	x65432
46828	des
60817	"\15\0\1\u047d\6\0\1\u047f\1\u0481\1\u0480\2\u047f\2\u0480"+
58897	Controls
63628	x65431
12022	dev
36030	f);
13182	ucd95
64770	(numTermsSamePrefix
40623	Arrays.sort(terms2);
107	private
12032	dfa
41098	while(scratch.length
55731	dec
35636	def
35631	~B[i+7]))
10848	"\10\230\1\347\12\230\175\0\1\346\24\230\1\u02e9\5\230"+
20675	fileswitchdirectory
496	del
33762	equivalent.
38421	re-create
18246	dek
25951	queue.getComparators()[0];
40433	dep
63626	x65421
37858	java.util.Map}
53554	dfs
20190	clauses)
19993	clauses.
20097	clauses,
17724	addClause(BooleanQuery
20144	clauses:
20062	clauses;
30111	termOrd
50395	sr.hasChanges;
27452	"\u0030\u00AD"
35632	~B[i+7]);
22033	IndexSearcher#IndexSearcher(IndexReader,
36759	#FIXED_ARRAY_NUM_ARCS_DEEP
62589	"T";
29919	"\2\25\1\0\1\25\5\0\3\25\1\0\1\25\10\0"+
64838	assertEquals(validTerms[loc],
50419	sr.hasChanges)
60230	"\1\u0145\2\0\1\77\1\137\4\0\2\137\151\0\4\u0282"+
17227	(si.getDocStoreOffset()
7992	useUnmapHack)
66073	BooleanClause.Occur.SHOULD};
55051	verify");
32105	buffers[0];
40606	"stat"};
28630	testTypeFilter()
49944	jj_3_1
8001	useUnmapHack;
18691	"à¦¶à§à¦°à§",
44003	U+00E4:
33566	a,0,4
59756	"\1\0\12\232\176\0\32\232\1\352\12\232\175\0\74\233"+
7141	unchecked
29901	"\2\52\5\0\1\25\2\0\1\25\1\52\4\0\1\25"+
31607	w.addIndexes(ramDir);
28862	InvertedDocConsumerPerField
11418	"\1\u01a8\6\230\175\0\1\346\30\230\1\u04be\1\230\1\347"+
62692	docIDX=0;docIDX<numDocs;docIDX++)
2559	numtens
61396	"\1\u034d\32\u02e2\1\u034e\6\u02e2\1\u0666\3\u02e2\175\0\1\u034d"+
15399	assertsizeequals
33237	super(parent.maxDoc());
56101	"pre*n?t")),
44005	U+00E5:
67883	token="
31279	newFSDirectory(oldIndxeDir);
48202	1].doc();
61040	"\3\0\1\137\4\0\2\137\150\0\1\u0101\16\266\1\u0534"+
2345	other
67206	setpositions
17443	indexesof
20000	super("maxClauseCount
33708	incrmin
57108	div
39808	re-opened,
25757	badentries
23715	mgr.release(searcher);
68043	leftOffset.endOffset(),
114	dir
17351	dis
43845	die
62947	dif
58762	fillUnicode(char[]
43999	U+00E2:
43000	ReferenceManager
50859	counted.
66610	(isRunningNested())
52145	deletenewfiles
15200	(fieldName.equals(DocHelper.TEXT_FIELD_1_KEY)
38455	assertTrue(allFieldNames.contains("unindexed"));
39445	testmultilevelskiplist
68004	token?!
40745	this.doReverseLookup
44001	U+00E3:
60810	"\212\0\12\u0479\11\0\1\u0213\231\0\1\u0342\175\0\4\u047a"+
20950	Grows
42287	test!".getBytes();
55574	assertFalse(r1.isCurrent());
33832	bits.clear(pp2.rptInd);
38566	holding
43367	diff
17778	query/filter.
19846	aSd.score;
31170	testCreateNoCFS()
16986	TermVectorMapper{
26317	numFullBytesInFinalChar);
1725	FIELD_IS_NUMERIC_MASK
35767	rhs
28683	String[]{"121",
23643	').append(_TestUtil.randomRealisticUnicodeString(random));
21894	Expert
31612	merged",
64918	isAlive()
28241	(it's
30123	term.equals(other.term);
7068	(actualEnum
52529	assertEquals("field3:jumps",
53280	get(long
28295	(scoreSum
38032	j));
27464	"\u0030\u0061"
33972	rgs
54785	somebody
5574	orig_byteToFloat((byte)i);
16152	scc.mscores[i],
15637	sizeInBytesNoStore;
8619	LinkedList<AttributeSource.State>();
33044	copy.addAttribute(CharTermAttribute.class);
34668	spanweight
65510	counts:
64271	getValueSource(String
2061	ret
2729	res
24948	rev
33910	rg:
36518	vastly
60223	"\15\0\1\u0280\6\0\12\u0280\176\0\32\u0281\1\0\12\u0281"+
18428	t);
33994	rg;
11014	"\1\u0380\6\0\1\u0381\2\u0382\1\u0381\5\u0382\1\u0383\14\0"+
49767	int[jj_endpos];
19325	rfc
65757	Term[nTerms];
31107	simerge
37375	guard
34422	DISABLE_AUTO_FLUSH)
33235	AllTermDocs(SegmentReader
2304	setUp()
36792	ReverseBytesReader(byte[]
59326	"\4\0\1\74\14\0\1\62\4\0\1\75\2\0\1\76"+
21549	expectedbuffer
17342	rdr
44150	"É"
56217	clazz.getMethods())
17851	medId
68130	ScoreDoc(Integer.MAX_VALUE,
5638	testAllFloats()
32089	byteOffset
8593	ref
25704	red
57706	reader.isCurrent());
34220	DISABLE_AUTO_FLUSH;
59480	"\1\64\41\0\2\25\1\65\1\0\1\66\1\0\1\66"+
20185	req
21771	Searcher#doc(int)}
11666	"\175\0\4\u04fa\2\0\1\u04fa\15\0\1\u04fa\6\0\12\u04fa"+
24845	(seen.contains(s))
30161	ThreadResources();
51203	ArrayList<SegmentInfo>();
49890	newtermquery
39043	testModifyOnUnmodifiable(){
12524	u29fc
50012	getName()
11398	"\15\0\1\u04b2\6\0\12\u04b2\1\u0435\13\0\1\u02cf\214\0"+
5289	invalid
59113	"\2\u2b38\2\u2bdb\2\u2c7e\2\u2d21\2\u2dc4\2\u2e67\2\u2f0a\2\u2fad"+
57176	index+1))
6631	description
21423	magic)
56445	assertEquals(numDocs-1,
29040	SegmentMerger
26279	IllegalArgumentException("original
16373	testcharfilter
7984	unsupported
9389	"\1\132\3\0\5\132\6\0\1\132\1\0\1\132\1\0\1\132\1\0"+
58882	KeywordTokenizer(AttributeFactory
21704	reader="
35795	rd2
42917	target).setPositionIncrement(positionIncrement);
7809	country
15544	src.hasProx;
49082	delimited
621	re)
12925	u29f2
24428	slotValues[slot2];
1927	raw
66175	TopScoreDocCollector.create(1000,
10041	"\2\25\2\0\7\25\1\0\2\25\3\0\2\25\3\0"+
67573	reader).normsClosed());
49191	rc;
5708	isKeyword()
54368	StandardFilter(matchVersion,
39494	other.other
25537	valIdToItems,
51061	i=0;i<numMerges;i++)
19908	log("compare:
60659	"\1\u039e\231\0\1\u0414\2\u0415\1\u0414\5\u0415\1\u0416\175\0"+
24768	collectorMin
35793	rd1
16655	heapsize
34541	inputstreamdatainput
31792	upgrader
45957	,"VY",
31713	upgrades
24974	myfieldcomparatorsource
59260	"\6\0\1\32\117\0\1\32\52\0\1\32\1\0\1\32"+
25524	readerFieldToValIds,
25573	readerFieldToValIds)
56253	testsuite
64656	getbuffersize
15220	sizebytes[0]);
39175	reader.termPositions(terms[0]);
51547	!dropSegment)
27389	"\u0027\u0308\u002C",
49190	rc)
1698	ran
46152	"É"
62387	female
3318	ram
60877	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\10\266"+
45028	,"ll",
63392	0x84321,
8069	raf
28084	"\u0063\u0061\u006E\u0027\u0074"
31174	upgraded
5281	Switch
186	reader2,
63622	x65321
34000	rpp
53288	valid(_output2,
40008	classes;
56245	classes:
41419	PositiveIntOutputs.getSingleton(false);
43210	//After
65202	frontier[input.length];
62938	non-cfs
27359	"\u002C\u0308\u0061\u003A",
42367	tp.getPayloadLength());
16310	help
27448	"\u0030\u005F"
61526	u7138
3276	classes.
37113	compareTo(NodeAndInCount
23706	clicks
49352	classes,
41790	e.getValue());
66288	postingsHashMask
60396	"\3\266\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
67437	reader1.
10248	"\2\0\1\25\1\u0117\32\36\1\141\1\326\1\u0119\1\u0118"+
22655	inclusiveLowerPoint,
177	reader1,
68062	testletterhtmlish
5878	element
38077	Double.compare(vals[i],
53287	valid(_output1,
2608	searching
50034	(entries.isEmpty())
885	dir)
356	dir,
9479	row
6065	t1b
6062	t1a
24913	assertmatches
61098	"\4\u056e\2\0\1\u056e\15\0\1\u056e\6\0\12\u056e\14\0"+
45525	,"R",
29827	"\1\132\21\0\1\101\17\0\1\25\1\54\1\52\1\103"+
3683	char[]
67439	reader4,
38423	testGetFieldNames()
13326	u29e8
39833	buffer.append(subReaders[i]);
31256	compressedSize
67264	dir3
67266	dir4
67105	ClassicAnalyzer
66069	"two",
16667	dir1
48103	closeDirSrc
16752	dir2
12235	u7156
61807	u29de
17143	dir0
38275	FixedBitSet(upper-lower+1)
3541	dir;
42960	browser
12636	u714c
65797	rnd
67315	dir5
54894	(passing
12793	ud543
59090	"\10\0\1\12\63\0\1\12\u01ea\0";
2787	assertTrue
41473	b));
20764	held
29500	JUnitCore.runClasses(IgnoredProperty.class);
18473	BaseTokenStreamTestCase
67438	reader3,
13037	u7142
30249	indexlength
58149	doc.removeField(SNAPSHOTS_ID);
12392	ud54d
34189	distinctgroupids
19410	dis;
63108	savedTerms.add(s);
59353	"\1\166\1\0\2\164\3\0\1\25\3\0\1\25\3\0"+
30734	u29d8
51549	(!segmentsToMerge.containsKey(merge.info))
28838	charPool;
16787	r1.deleteDocument(11);
1326	t1,
11991	numeric,
18116	disi
51020	segmentsToMerge.clear();
60205	"\4\0\1\u01ce\151\0\34\u01d0\12\u026a\1\0\2\u01d0\1\u0214"+
6550	disk
7717	"now",
39770	readerShared
64696	assertTrue(actualTerm
1991	int[16];
23701	HTML
50974	Character.MAX_RADIX);
14919	getlocale
23311	org.apache.lucene.search.*;
24220	dirs
56894	"\0\0\0\16\0\34\0\52\0\70\0\16\0\106\0\124"+
41872	outputstreamwriter
2107	here
65851	Term("f",Character.toString((char)(tnum+'A'))),
61683	ud52f
59927	"\1\201\14\0\1\62\4\0\1\202\2\0\1\203\41\0"+
31757	-delete-prior-commits
37690	lastdoc
14990	testRepetitiveIncreasingSloppiness3WithHoles()
13194	ud539
28731	prefixfilter
63492	0x876521,
65033	doShareNonSingletonNodes,
18567	áµá­á­ááá
64133	char[charsToRead];
52414	document.add(field);
44548	U+24A1:
34739	foo\"",
48127	overlapping
64965	doShareNonSingletonNodes;
41852	e.getValue().b
3993	"For
7435	riw
42494	(!first)
28593	buffer.length-newPosition);
66104	"blah
35481	adapted
53739	CharArrayMap<Object>
19366	
11601	"\6\0\12\u054b\1\u0549\174\0\1\u0332\4\u0548\2\0\1\u0548"+
50148	directly.</p>
49716	jj_gen++;
44510	U+24A0:
34070	tcnt.get(t);
66599	"aabcdefgaa"
56007	rid
27735	"\u0061\u003A\u0308\u0061\u002C",
60937	"\2\0\1\u04d4\15\0\1\u04d4\6\0\12\u04d7\1\u04d5\174\0"+
44070	"â"
48803	testing,
6712	testing.
55944	hardRefs.keySet().iterator();
25375	Trees
55009	seed=0;
63890	TestingCharTokenizer(Version
39507	output.writeLong(0);
34233	DEFAULT_MAX_THREAD_STATES
9609	"\2\u732b\2\u73ce\2\u7471\2\u7514\2\u75b7\2\u765a\2\u76fd\2\u77a0"+
9359	"\6\143\2\0\12\134\2\0\2\142\42\0\1\132\27\0\2\133\6\0"+
38526	fields[0];
45538	"É¼"
24232	(full,
868	reader.docFreq(t));
10827	"\1\u0169\230\0\1\u01d5\175\0\4\u02d4\2\0\1\u02d4\15\0"+
59934	"\2\u0145\1\u018b\1\u016e\2\u0145\1\u018c\2\u0145\1\137\2\0"+
49173	(fieldToDateResolution
37737	printHits(out,
11225	"\2\u042a\1\u0429\2\u042a\2\u0429\1\u042a\1\u0429\1\u042a\1\u03da"+
16852	reopenedReader
297	reader's
29102	ParallelArrayTermVectorMapper();
52320	populateDirs(Random
55464	reader))
18483	StringReader(input));
37137	fstenum
28640	reader),
11530	"\1\u0510\15\0\1\u0510\6\0\12\u0513\1\u0511\13\0\1\u0325"+
53550	scenario.
11619	"\1\u0553\6\0\12\u0556\1\u0554\174\0\1\u0386\4\u0553\2\0"+
23389	t="
32711	"decodedBuf:
2279	reader);
37757	med_priority
38753	enum2.term());
46032	"â"
51472	mergedReader)
7687	charat
34592	payloadScore;
65157	fst.outputs.outputToString(output));
1362	run
20816	scenarios
47948	tpc.prepareCommit();
24057	"I",
22419	paranoia
34495	sb.append("commit=").append(commit
52681	payloadScore)
34619	payloadScore,
54082	a0.toArray(new
3385	pick
60433	"\1\u0338\15\0\1\u0338\6\0\1\u0339\2\u033a\1\u0339\5\u033a"+
53700	paged.totalHits);
45353	"â"
3716	token_types
15994	doWork()
37786	this.termDocs
21926	IndexInput(String
40744	this.pairs
6426	marksupported
36930	q.top();
16379	testcharfilter12
16380	testcharfilter11
19110	200*RANDOM_MULTIPLIER,
17295	getdocstoreoffset
5744	conditionals
47999	set.cardinality()
44676	"É¦"
63240	lastmodified
32279	_TestUtil.getTempDir("TestLockFactory.8.Lockdir");
44067	"â"
20120	w.explain(reader,
5998	TestToken
34452	this.mergePolicy
60827	"\10\u02e2\1\u03c1\21\u02e2\1\u034e\12\u02e2\175\0\1\u0486\17\u02e2"+
4573	MyIndexingChain
39860	openReadOnly);
45311	"Éµ"
23352	"Venice
40286	readcurrentversion
43222	testBadSeek()
40891	outputs.outputToString(pair.output));
25364	jdkSet
44499	"â"
25521	insanity
63008	CARAT
52986	UTF16toUTF8(final
44978	"É«"
66581	intuptos
7639	"after
59993	"\1\u016f\2\232\1\352\12\232\175\0\1\u01a9\6\232\1\u01aa"+
25920	commit.</p>
29515	testmethod1
27703	[7.0]
29516	testmethod2
28998	tvdFormat
25678	getMsg();
40867	verifyUnPruned(int
19476	Charset.forName("UTF-8");
62838	"<SOUTHEAST_ASIAN>",
18714	Ø¨Ø±Ø§Û
26156	<p>@lucene.internal</p>
57621	substring;
5510	getendline
67602	rs2
10751	"\1\u027b\1\u027a\2\u0224\2\u027a\1\u0224\1\u027a\1\u0224\175\0"+
53699	assertEquals(all.totalHits,
42585	c.length);
46659	"â"
19362	checkoneterm
67807	d1.add(newField("field",
2648	counter
55362	indexDoc()
40851	(fully
53185	charge
37573	counted
7802	fieldselectorresult
32163	first_level_size
52509	pr.add(ir2);
32720	binary[byteNum]
17458	TestParallelReader
12635	u70a9
62837	"<ACRONYM_DEP>",
26124	TopFieldDocs(totalHits,
33281	expectedLastRecordId
7198	SpanQuery
62319	:EMPTY:
28067	"\u0031\u002E\u2060\u0061\u002C",
19025	http://tools.ietf.org/html/rfc6068
39336	OpenBitSetDISI.
2054	arc.isFinal);
12234	u70b3
43545	size/count
1434	startswith
64589	length())
57107	this.wlen=nWords;
21826	getFields()
33908	advanceRepeatGroups()
44348	,"db",
58728	nextfloat
19845	sd)
62185	es.awaitTermination(1,
46788	CARET
25954	updateBottom(int
7708	java.util.Iterator;
29970	"\1\65\2\0\4\65\2\0\1\65\42\0\1\103\37\0"+
38223	0x0000fff)
23574	happened
7719	time",
11734	zzEOFDone;
21935	length();
16051	SearcherThread(directory,
57520	fieldStrs
23494	saw
45065	"É±"
59670	"\3\0\1\137\4\0\2\137\150\0\1\u0101\1\266\1\u0107"+
53487	weight,Filter
14922	getcomparatorsource
31225	FieldsReader.canReadRawDocs()
4601	conf.getMaxBufferedDeleteTerms());
41633	FST.FIXED_ARRAY_SHALLOW_DISTANCE
5162	jjMoveNfa_1(int
30965	mytopsdoccollector
4297	precisionStep
273	reader",
30400	anyfailure
20695	Serializable,
1066	TEST_NIGHTLY
733	Term("content4",
50730	config.setMaxBufferedDeleteTerms(maxBufferedDeleteTerms);
24985	cegia
56726	commit.getGeneration()
44618	"É¡"
65421	"apple","banana","pear"
21508	largeBuf.length);
11963	zzAttrL[zzState];
58404	words={"Hello","World","this","is","a","test"};
64453	SpanQuery.
11608	"\6\0\12\u054f\1\u0534\13\0\1\u02cf\160\0\1\u0332\4\u054e"+
31206	"31.optimized.nocfs",
19036	delimiter
32924	tvf.writeVInt(suffix);
22358	getSorter(a,
60307	"\12\u02d3\1\u02d4\242\0\1\u02d5\174\0\34\u01d0\12\u02d6\1\0"+
764	"I'm
47938	proceeds
48521	sub-scorer
47891	requirements:
60997	"\1\u0502\6\0\1\u0504\1\u0506\1\u0505\2\u0504\2\u0505\1\u0504"+
26230	overcome
23231	Multisearcher
49553	goop2;
48156	o2.doc();
48414	advanceAfterCurrent()
16565	heap
12391	ud4aa
2861	doTestMultiThreads(true);
19697	while(doc2
26817	head
44789	"É¨"
18993	BaseTokenStreamTestCase.assertAnalyzesTo
40843	pairs.size()
26385	chars.
42272	testtypeattribute
39002	n=0;
24981	caegi
33078	clone.getAttributeClassesIterator();
18008	medip
63092	chars;
22864	SpanQuery}
19746	cs.posLimit)
68017	chars!
56467	SpanQueue
36844	scratchArc.label);
20581	indexablebinarystringtools
32130	levelSizeArray[0];
22093	chars)
52798	media
18002	medid
22096	chars,
12792	ud4a0
39324	int[(int)
18733	"ØªØ®ØµØµÛ",
56766	!r.hasDeletions();
10999	"\2\136\150\0\1\376\1\u0377\31\264\1\141\12\264\1\0"+
54192	newPool();
2516	tokenattributes
7533	lastvectorfieldname
27330	"\u002C\u0001",
10890	"\2\264\1\u030f\7\264\1\0\3\136\1\0\2\136\1\137"+
30601	"\2\0\1\27\153\0\1\27\35\0\1\102\11\0\3\25"+
17963	"\u0698",
42471	PoolingPayloadTokenStream(pool)));
37928	NoSuchElementException();
37938	backingStore.values().iterator();
61492	int[275796];
49534	jj_consume_token(COLON);
4971	catch(java.io.IOException
52163	hardwired
64410	compressor.finish();
24771	collectorMax
37005	nodeUpto
56276	MERGESORT_THRESHOLD
620	(RuntimeException
49552	goop1,
9737	"\2\0\1\54\3\0\1\55\7\0\1\56\2\0\1\57"+
5775	left-shift
39651	field.setValue("meaninglessnames");
29969	"\1\65\1\0\1\65\2\0\2\65\1\0\3\65\1\0"+
53231	bytesout
1724	_NUMERIC_BIT_SHIFT
24121	("int",
40572	toIntsRefUTF32(String
26299	(encoded.hasArray())
33449	IndexFormatTooOldException
35436	javaccparser
46052	"É"
42472	fail(e.toString());
15673	si;
54703	File(lockDir,
23681	java.util.concurrent.ConcurrentHashMap;
24899	u00eache
38284	testSplitIntRange()
45738	U+24AF:
33821	resolved,
7544	Serializable
30254	cloneableterm
1815	flushDocument(int
67522	ReaderThread(ReaderThreadTask
60982	"\175\0\1\u03a1\4\u04fa\2\0\1\u04fa\15\0\1\u04fa\6\0"+
37711	checkHits
18327	SCORE_COMP_THRESH);
13036	u709f
24464	(undefined)
10746	"\1\u0277\6\0\12\u0277\1\u021e\13\0\1\u0122\160\0\1\u0163"+
27878	"\u0061\u002C\u0061\u002C",
35209	DefaultSkipListWriter(int
44026	"É"
15467	sizeInBytesNoStore
34738	assertEquals("\"(multi
45650	U+24AE:
31021	si1
21558	WildcardTermEnum
48956	parentheses.
52446	setDoubleValue(final
25278	assertEquals(docs.length,hits.length);
31026	si2
35096	setFileLength()
17223	si)
38193	0xffffffffffffffffL,0xffffffffffffffffL
17138	si,
55607	Term("indexname",
35514	A[i+1])
45479	U+24AC:
63207	field.hashCode()
8860	beforeclasscleanup
37479	six
37205	fixedarraystart
61525	u7095
33256	rollBackLast(int
58344	utf8sortedasunicodesortorder
58206	persistsnapshotinfos
11051	"\12\u03a1\1\u039f\13\0\1\u0122\160\0\1\u0163\4\u039e\2\0"+
45572	U+24AD:
27860	"\u0061\u002C\u0027",
59469	"\1\25\2\0\1\25\1\141\11\36\1\272\20\36\1\142"+
49689	JJCalls[1];
23659	italy
22934	a.length;
58144	sid
56840	"\5\0\13\12\25\0\12\2\7\0\143\12\1\0\1\12\17\0\2\12"+
740	testRandomExceptionsThreads()
58546	CharArraySet.EMPTY_SET));
44172	"É"
45448	U+24AB:
61099	"\1\u0126\226\0\1\u0497\13\0\1\u0126\160\0\1\351\24\232"+
35424	sit
20591	charts
15559	getDiagnostics()
26774	").append(start).append(",
57331	remove(OpenBitSet
33650	sis
66255	vals[rnd.nextInt(vals.length)]));
24906	sin
18241	sim
2497	maxOverlap)
67926	t.setPositionLength(posLength);
31525	binary;
23495	false)).setMaxBufferedDeleteTerms(2).setReaderPooling(false).setMergePolicy(newLogMergePolicy()));
24855	newSearcher(r,
22737	FieldCache#getLongs(IndexReader,String,FieldCache.LongParser)}.
1350	indexsearcher
29959	"\1\25\5\0\1\25\3\0\1\65\4\0\1\65\2\25"+
6119	ts.addAttribute(CharTermAttribute.class)
34031	ArrayList<HashSet<PhrasePositions>>();
64764	String[_TestUtil.nextInt(random,
63455	0x87432,
32744	binary,
33731	this.numPostings
51442	flushControl.clearDeletes();
16404	sdp
45450	"É"
5728	Space
22362	a.length,
42096	fields);
26175	current.get(index);
62800	sd;
17377	sd:
45461	,"Q",
52643	Arrays.toString(ctors),
16140	scc
61424	"\2\0\1\u0679\15\0\1\u0679\6\0\12\u0679\1\u0636\174\0"+
30899	MAX_SCORE
50759	deleter.setInfoStream(infoStream);
60879	"\3\0\1\137\4\0\2\137\150\0\1\u0101\15\266\1\312"+
15160	se,
42556	NumericUtils.longToPrefixCoded(lvalue,
22555	reflectAsString(false)");
28692	stoptypes
48887	sortedSet)
45496	"É"
54551	createRandomArray(1000);
42177	FlagsAttributeImpl
50370	pooled
29354	pool.buffers[bufferUpto];
5280	ReInit(stream);
1100	set
2515	lowercasetokenizer
45536	"É"
34308	Creating
54545	createRandomArray(1000),
16262	SpanOrQuery
60328	"\3\u0219\2\0\1\174\1\u0219\4\0\2\u0219\2\0\1\204"+
62773	mergedHits.totalHits
60384	"\32\232\1\352\7\232\1\u0311\2\232\175\0\1\351\1\u0312"+
59591	"\1\144\1\137\1\0\1\137\1\145\1\140\3\137\3\0"+
45542	"É¾"
26798	sfq
10543	"\1\u01b5\1\264\1\u01b6\1\u01b7\2\264\1\u01b8\1\u01b9\2\264"+
26199	roundFixedSize);
29649	"\1\43\1\13\3\0\1\7\1\5\2\0\1\3\1\1\14\0\1\11"+
46083	"É"
56654	setUseCompoundFile(mp,
49358	newBooleanQuery(disableCoord);
42803	termBufferOffset
16108	scores.length
3150	seg
37407	"again",
63454	0x87431,
302	see
35489	sed
23944	sec
30766	seq
38538	sel
44828	"É"
30920	numResults)
46947	¹
50374	sr;
67593	sr1
67596	sr2
46951	?
53686	searcher.searchAfter(lastBottom,
22947	CollectionUtil.quickSort(list1,
60423	"\1\u0101\24\266\1\u0330\5\266\1\142\12\266\1\0\3\137"+
51304	(String->String)
41950	nextiter
50366	sr)
55355	getUTF8String(int
55871	testduringaddindexes
46708	EQUALS
50368	sr,
25612	rfToValIdSets.get(parent))
27132	"\u000B\u003A",
56484	spans.next())
33888	pp.firstPosition();
44450	"É"
47007	¹
8250	channels
47127	?
67983	btstc
56454	soq
16344	sor
4268	tq=NumericRangeQuery.newIntRange(field,
59467	"\1\203\41\0\1\25\1\66\7\0\1\66\2\0\1\25"+
51467	(incrementing
39141	getPositions()
61685	ud675
46009	"â±³"
56723	setIndexDeletionPolicy(policy).
3694	buffer[bufferLength-1]
56041	valid(output);
15901	'?';
18063	NullPointerException("Filter
64927	"field");
13196	ud67f
6768	raised
22160	bytesPerElement
527	java.io.ByteArrayOutputStream;
12233	u7010
21519	descriptor
25056	cabejgfhdi
44843	"É"
47298	?
67677	srs
21398	(CompoundFileReader.CSIndexInput)
20580	collationkey
20703	this(data,
15989	Thread.yield();
39270	0x4AC65113;
33277	w.commit(data);
3690	buffer[bufferLength-2]
39792	(!readerShared[i])
33645	ldmp.setMinMergeDocs(1);
27356	"\u002C\u0061\u2060",
39286	(iterator1.hasNext())
57632	substring,
56181	TestFilterIndexReader
12026	src
12795	ud689
45465	"É"
39302	allterms
54706	channel;
54920	#maybeRefresh}
64976	FreezeTail<T>
66504	textLen1
27938	"\u0031\u0027\u0308\n",
35555	fours=u^foursB;
62896	attaches
39333	DocIdSetIterator}.
66189	xx";
12394	ud693
54205	BytesRefHash.DirectBytesStartArray(initSize));
53179	attached
39285	termArrays2.listIterator();
12634	u7006
7184	createterm
44387	"É"
46040	U+24B3:
35981	singlechartokenizer
21782	this.boost
17660	computing
9059	prefixcodedterms
55697	//while
17753	instance");
24822	(random.nextFloat()
29983	"\1\116\4\0\2\116\3\0\2\116\1\0\1\116\4\0"+
38810	assertTrue(ints
11913	level
52324	dirs.length;
24059	"-2147483648",
24150	doc.setBoost(2);
21485	//System.out.println("SUCCESS:
48327	lastend
24472	"IZJ");
29108	fieldCount)
2584	overlap
56013	Appends
46015	U+24B2:
19598	charsetdecoder
8240	clone.isClone;
19316	luceneresourceswikipageurls
64629	seekInternal(bufferStart);
24610	MultiComparatorScoringNoMaxScoreCollector
19440	fieldCount;
27704	"\u0061\u003A\u0041",
52182	compacts
47369	overlay
1590	sample(IndexReader
41654	builder.add(Util.toUTF32("station",
45959	U+24B1:
4009	runtime
32464	this.lock
40997	term.compareTo(pairs.get(upto).input)
62984	out.writeBytes(b,
7327	start+howMany)
38404	commitUserData);
5238	Lexer
45984	"â±²"
1674	terms_index_extension
66379	pivotTerm
63936	smp
1625	so,
45903	U+24B0:
48518	visitRequired(P
25040	outoforderonecomparatorscoringnomaxscorecollector
27857	"\u0061\u002C\u0308\u003A",
29020	so.
21239	expectedBuffer[]
1197	(files[i].endsWith(".cfs"))
55097	docs.values().iterator();
35089	bytesToCopy;
10571	"\15\0\1\u01d4\6\0\12\u01d4\1\u01d5\175\0\4\u01d6\2\0"+
67804	TestNot
53430	m<=c;
11908	wrong
40148	smi
34910	swq
21594	wildcards
1202	corrupted);
44820	U+24A4:
30266	enumoffset
51987	delInc;
26282	inputOffset
61686	ud718
15488	wrote
34849	TestPosIncrementFilter(result);
34974	Hackidy-HÃ¤ck-Hack
47110	¼
15048	org.apache.lucene.document.SetBasedFieldSelector;
16117	float[numToCollect];
6647	reduced
35582	pop_intersect(long
49658	jj_3_1()
11041	"\1\u0395\15\0\1\u0395\6\0\2\u0399\1\u0395\2\u0399\2\u0395"+
2359	Spans
46949	»
22965	CollectionUtil.quickSort(list);
55265	assertEquals(v1.size(),
35334	assertNotNull(stream);
27754	"\u0061\u0027\u0041",
44860	U+24A5:
65769	sz,
61316	"\2\0\1\u0633\15\0\1\u0633\6\0\12\u0633\1\u05b9\13\0"+
46944	µ
30449	lessThan(SegmentMergeInfo
46937	¼
39824	buffer.append(getClass().getSimpleName());
28319	subScorers[root];
24293	Double.MAX_VALUE
47546	§
47262	
47276	
8135	readByte()
47278	
53602	this.starts
2465	serialization
47403	
25836	sz;
47227	
47241	
47129	¾
47229	
47413	
47243	
18597	(Ø¨Ø§ÙØ¥ÙØ¬ÙÙØ²ÙØ©:
47419	
45060	"É¯"
47437	
47452	
8900	_innerSet.isCacheable();
47448	
47232	
47441	
47424	
1524	directory.openInput(segmentFileName,
47421	
47439	
47595	
12395	ud736
52191	previousreader
47141	¿
49143	wildcard,
47245	
47485	
65211	wordSuffix;
47454	
47260	
12796	ud72c
47099	»
50445	sr.openDocStores();
24069	"J",
44637	U+24A2:
46988	¾
6643	reduces
15788	(hasSingleNormFile
16619	o.change();
57227	i<endWord;
13197	ud722
40786	in.length
28321	root;
1854	(directory
46990	¿
47443	¼
50587	segmentInfos.createBackupSegmentInfos(true);
51981	delInc)
51675	Constants.JAVA_VERSION);
10362	"\12\0\1\212\17\0\1\213\21\0\1\214\2\0\1\215"+
38922	termvectorentryfreqsortedcomparator
51943	deleter.deletePendingFiles();
27895	"\u0031\u003A\u0308\u000B",
47264	
47280	
26025	OutOfOrderMultiComparatorNonScoringCollector(FieldValueHitQueue<Entry>
28318	root)
28299	root,
65808	result=null;
44709	U+24A3:
47471	
65279	root.
51983	delInc,
47487	
11071	"\12\230\175\0\1\346\32\230\1\347\1\u03b2\11\230\175\0"+
33490	testReaderReset()
35762	sse
54495	realloc/copy
52068	messagestate
25685	buf.append('\t').append(ce[i].toString()).append('\n');
50475	Casts
11378	"\1\u04a2\5\u04a3\1\u04a4\175\0\1\u0386\4\u04a5\2\0\1\u04a5"+
29118	tvfPointers[i]
24384	assertSaneFieldCaches(getName()
45083	U+24A8:
17652	encounter
20999	fail("exception
66559	newHash[hashPos]
38420	assertFalse(reader.isCurrent());
3933	charUtils.codePointAt(ioBuffer.getBuffer(),
67788	i=0;i<termLength;i++)
37545	hi|hello
11409	"\12\u04b8\14\0\1\u0122\161\0\4\u04b9\2\0\1\u04b9\15\0"+
53194	consequential
40382	inordertopscoredoccollector
25950	fillFields);
28209	<li>Otherwise
39443	this.input.clone());
45171	U+24A9:
21075	full");
51141	#forceMerge},
39133	terms[i]);
4686	str
42304	assertEquals(payload.byteAt(i),
65992	mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);
30969	numresults
34078	tord.put(t,tord.size());
3180	specialize
24049	"D"},//G,x
15325	sub
36784	ReverseBytesReader(bytes,
21994	DefaultSkipListWriter(termsOut.skipInterval,
8840	@Before,
18669	à¦¶à§à¦°à§
15630	sum
21500	dir.createOutput("testBufferStart.txt");
44920	U+24A6:
8273	sun
52621	backslash
25101	getIndexStore("field",
37168	emptyoutput
24142	("short",
60378	"\4\232\1\u030a\25\232\1\352\12\232\175\0\1\351\24\232"+
18197	((this.query
5277	jjrounds[i]
10747	"\4\u0277\2\0\1\u0277\15\0\1\u0277\6\0\2\u0278\1\u0277"+
67280	iteration,
23432	hitCount;
10276	"\2\172\1\0\3\172\1\0\1\172\2\0\4\172\2\0"+
45021	U+24A7:
36278	promise
56442	w.setDoRandomForceMerge(false);
12021	svn
45911	"É"
24865	hitCount,
65815	assertEquals(result.cardinality(),
50086	format_no_segment_prefix
58720	iteration:
47097	»
21337	chunk);
56468	PriorityQueue<Spans>
448	asserttermdocscount
67282	iteration.
67262	testParallelReaderReopen()
25314	tal
24118	("contents",
57838	tag
15272	delegate.seek(pos);
25676	tab
11318	"\175\0\4\u0475\2\0\1\u0475\15\0\1\u0475\6\0\1\u0476"+
36603	bpa="
63360	0x764321,
26328	output.hasArray())
45796	"É"
19947	Boolean>
23235	msrchr.close();
63512	tbl
3285	IllegalArgumentException(
25885	"point
32629	originalString1[byteNum]
40324	td,
6325	others
62715	subIDX=0;subIDX<docStarts.length;subIDX++)
5605	iterations
12393	ud5f0
33002	lasttermbytescount
7994	!UNMAP_SUPPORTED)
13195	ud5dc
31222	((SegmentReader)
7397	DocumentsWriter.DocState
41771	assertEquals(57L,
20524	Collator#getInstance(java.util.Locale)}.
27128	"\u000B\u3031",
35164	FieldInvertState(int
25992	FieldValueHitQueue<Entry>
63547	shift2()
57091	this.bits
15054	testDoc
10932	"\175\0\4\u033a\2\0\1\u033a\15\0\1\u033a\6\0\1\u033b"+
37236	arcandstate2
40325	td;
62847	StandardTokenizer(Version
19352	
33295	if(sval!=null)
38843	subReaders[i]).termsIndexLoaded());
21433	other.
26577	work/should
3087	other,
60855	"\13\0\1\u0126\160\0\1\351\3\232\1\u049c\26\232\1\352"+
32239	assertTrue("IndexSearcher
3143	other)
53748	c.size(),
4385	tf,
37373	checkHeader(DataInput
48090	openInput(src);
60333	"\12\u0277\1\0\1\u0219\1\u0278\1\u0219\1\0\2\u0219\1\u0275"+
24592	tdc
17929	unsigned
42978	newstartoffset
36922	(inCounts[node]
48122	overwritten
3188	other;
19409	!reader.isDeleted(doc);
37504	"info"));
22038	near-realtime
48392	(currentDoc
20512	unsafe
27363	"\u002C\u0308\u0061\u0027\u2060",
19745	(cs.posUpto
1354	testutil
9206	builder.finish();
58639	numDocs="
47184	¾
29087	anyway
47498	
15841	gen));
11327	"\2\u0479\1\u047a\1\u0479\1\u047a\1\u0435\13\0\1\u02cf\226\0"+
47526	
2086	count="
7501	UnicodeUtil.UTF8Result
40999	assertTrue(upto
47512	
6678	<code>precisionStep</code>
58723	doTest(100000,
1219	random.nextInt(25);
25435	FieldCacheSanityChecker.Insanity
63515	******/
25617	"Found
22560	1));
25226	"?*1",
45384	U+24AA:
54808	environment
47300	¿
26766	spans.start()
34081	multi-terms,
16648	myqueue
21494	fail("Single
64344	dict
32341	lockName)
50498	config.setSimilarity(similarity);
67769	ta)
47945	execute(TwoPhaseCommit...
12794	ud5e6
30445	SegmentMergeQueue
38175	"shift",
50383	1)))
4913	org.apache.lucene.search.MatchAllDocsQuery;
58531	assertFalse(setIngoreCase.contains(string));
2931	timerthread
17858	medIP
19498	..do..stuff..
1874	(((NumericField)
61684	ud5d2
54691	lockName;
27084	"\n\u3031",
36208	copyFrom(Arc<T>
4295	totalTermCountC);
33474	normMap
51387	closing==true,
35028	clone.query
64829	loc="
59506	"\1\57\2\0\1\60\4\0\1\74\14\0\1\62\4\0"+
60849	"\12\u0498\1\u0497\13\0\1\u0126\160\0\1\u0168\4\u0496\2\0"+
24401	DoubleParser");
45156	"â¿"
13102	u9aa5
58859	testindexwriterunicode
59389	"\1\25\2\26\5\0\1\25\3\0\1\25\1\26\1\0"+
25417	levels
30146	indexFileName
48005	simpledocidsetfilter
55999	copyBuffer(char[]
10700	"\4\0\2\136\150\0\1\376\21\264\1\u0250\10\264\1\141"+
239	assertEquals("reopened",
62502	req2);
40166	matchingSegments[numMatchingSegments++]
1737	FIELD_IS_NUMERIC_BYTE
21742	testNRTThreads()
1637	f++)
35444	org.apache.solr.util
62369	qA2
62368	qA1
58347	abytes
29340	level;
32152	level:
28914	/*(non-Javadoc)
10987	"\2\136\150\0\1\376\32\264\1\141\3\264\1\u0370\6\264"+
26609	freqs[i];
32039	level.
28791	level,
43694	"unsupported:
4916	org.apache.lucene.search.Query;
26905	(Full-width
12701	u9aaf
24239	sort.setSort
28356	subScorers[i].visitSubScorers(q,
25424	level"
34997	filterDocIdSet.iterator();
9524	"\0\uc379\0\uc41c\0\uc4bf\0\uc562\0\uc605\0\uc6a8\0\uc74b\0\uc7ee"+
28590	charsRead
30085	u27d5
68041	leftOffset.startOffset(),
4779	iw.getConfig().getXYZ(),
12300	u9ab9
63452	0x87421,
23374	.setMaxBufferedDeleteTerms(2));
46418	,"10.",
60908	"\1\0\2\u0476\2\0\1\u0476\1\0\1\u0476\176\0\1\u04c3"+
5151	jjMoveNfa_1(0,
20142	sumExpl.setDescription("Failure
2968	setresolution
9305	"\1\206\1\214\1\207\1\212\1\204\1\205\1\211\1\213\1\210\1\215"+
35970	initializeindex
57427	pop_andnot
22210	(constantly
33831	bits.get(pp2.rptInd))
25895	href="http://issues.apache.org/jira/browse/LUCENE-710">LUCENE-710</a>
53592	Callable<TopDocs>
19337	testurls
62754	shardIDX=0;shardIDX<subSearchers.length;shardIDX++)
35761	pdf
65257	FORCE
3148	EMPTY_INT_ARRAY;
8355	verifierPort
29135	tvfPointers[])
44833	U+24BF:
29141	tvfPointers[],
13323	u27ff
45025	,"lj",
66952	newPair(output1,
34003	(!hasMultiTermRpts)
62524	allReq
16443	initialize
3938	(isTokenChar(c))
39162	postingsFreqs
50177	#setDefaultWriteLockTimeout
37851	java.util.NoSuchElementException;
22800	other.lowerVal
14879	FieldComparator.ShortComparator(numHits,
42070	FieldValueHitQueue(SortField[]
61804	u27f5
35058	currentBuffer;
54360	matchVersion));
25318	testquestionmark
52248	pcp
44757	U+24BE:
7319	<b>NOTE:</b>
44659	U+24BD:
42924	target).setType(type);
25460	sanityChecker.setRamUsageEstimator(true);
16469	snapshots.size(),
52445	NumericTokenStream(precisionStep).setDoubleValue(value))</code>
39648	Field.Index.NOT_ANALYZED_NO_NORMS);
43889	chr(hex($code)),
22406	currentsize
34294	DEFAULT_READER_TERMS_INDEX_DIVISOR;
20484	date_time_field
35086	currentBuffer,
50284	findings
57773	f.setValue(s);
20296	MockScorer()
11956	zzMarkedPosL-zzStartRead;
58122	altogether
52436	Initializes
43808	assertTermEquals("OE",
18006	pad
45481	"È¹"
52023	pendingcommit
62402	xxxx
54782	depend
4120	theoretical
23541	ids.size())
30128	Per-thread
54824	antivirus
66990	j<docsPerThread;
39828	(segmentsFile
17736	constant-score
41561	actual.text(),
31474	assertTrue("could
6749	NumericFields}
49457	<code>java
16721	IndexReader.openIfChanged(reader,
38482	assertEquals(tvFieldNames.toString(),
58075	free(this);
41597	lines.length)
45116	U+24C3:
8581	itself
65643	isCommit);
15603	IndexFileNames.VECTORS_INDEX_EXTENSION));
7647	"Internal
1710	FIELD_IS_TOKENIZED
11674	ZZ_NO_MATCH
49165	setDateResolution(DateTools.Resolution
30937	doSearch(15);
59030	doc.add(junk);
18514	testArmenian()
51039	merge.segString(directory));
40527	whitespaces
41287	wordsFileIn;
35859	checks,
45689	,"T",
41215	(term.text().length()
64805	t.utf8ToString());
45049	U+24C2:
41291	wordsFileIn,
59768	"\21\36\1\142\12\143\1\u0142\1\137\1\144\1\137\1\0"+
19119	tokenstreamcomponents
8757	r);
4871	indexdeletionpolicy
7354	Math.min(size
52814	products
45407	U+24C5:
55600	writer.addIndexes(dir2);
57446	"see"
63501	0x876543,
55690	handle(Throwable
59714	"\1\u0107\11\266\1\142\12\266\1\0\3\137\1\0\2\137"+
20234	buffer.append(subQuery.toString(field));
9657	zzUnpackRowMap()
32018	b.append(System.identityHashCode(getValue()));
55556	doFullMerge
2416	per
42081	MultiComparatorsFieldValueHitQueue<T>(fields,
63142	assertTrue("count
17850	signedIndexReader;
3366	org.apache.lucene.util.SetOnce;
45259	U+24C4:
42311	clone.byteAt(i));
22261	1)];
5494	curlexstate
39963	midValue)
24910	getindex
63499	0x876542,
21243	remainder
58085	numVectorFields++;
8683	SegmentWriteState
18837	Standard
55358	addUTF8Token(upto);
9633	"\2\ued6b\2\uee0e\2\ueeb1\2\uef54\2\ueff7\2\uf09a\2\uf13d\2\uf1e0"+
3011	means
42676	docIDX=0;docIDX<numStartDocs;docIDX++)
46194	"â"
65307	arcs[numArcs++];
64958	Outputs}.
63498	0x876541,
31573	infos.size();
60112	"\46\u01ce\1\u01d0\2\u01ce\1\u01d1\3\u01ce\1\u01d2\5\0\2\u01ce"+
28798	numLevels
23562	r.nextBoolean();
41989	pks
32234	searcher.isAlive())
62597	"optimize"));
49456	Usage:<br>
2958	timoutexception
32655	encodedComparison);
219	ATTEMPT
22681	FieldCacheRangeFilter<Byte>
53530	Math.min(n,
30978	java.io.FileReader;
46182	"â"
24785	Integer.MAX_VALUE);
44948	U+24C1:
28861	nextTermsHash.addThread(docInverterPerThread,
26492	SegmentReader.get(true,
37831	LetterTokenizer}:
32591	binary.length),
9022	scratch.length
60699	"\3\u02e2\2\u0428\1\u0431\1\u0428\1\u02e2\2\u0428\12\u02e2\1\u034e"+
59570	"\226\0\1\116\247\0\2\116\12\0\1\116\210\0\2\116"+
43060	swapReference(newReference);
20923	getpositionincrement
65141	play
32571	binary.length);
42618	(it.nextDoc()
2949	pie
15573	numNormGen
2535	nopayloadfield
50486	LogMergePolicy}.
38105	-1.0E-1f,
44877	U+24C0:
32426	plan
54554	createSparseRandomArray(int
15450	mean:
25778	unmatched
51916	startCommitMerge
10889	"\3\0\1\136\4\0\2\136\150\0\1\376\1\u0300\31\264"+
7003	(maxBound
2370	assertTrue("scores
7274	pq;
44933	"È½"
24960	pow
7386	pop
18681	"à¦à¦",
12120	u281d
39772	infos.size()
1600	pos
23211	scores[1],
24300	(t.sortField,
26053	pq,
7278	pq)
44217	U+24B8:
46657	"â¾"
21814	NumericField}.
10574	"\1\u01da\6\0\12\u01da\1\u0197\13\0\1\u0122\161\0\4\u01d6"+
7371	pq.
9097	Map<String,
22392	quantity
43629	this.filter.equals(((CachingSpanFilter)o).filter);
53068	//System.out.println("s2
67263	pr;
27306	"\u003A\u005F",
14779	getReverse()
55602	r0.close();
20275	isrequired
33728	pps
14912	shortparser
62820	StandardTokenizer:
5264	lexState){
57837	run_sec
16756	pr1
28950	org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceHashCode()
35568	eights=fours&foursA;
44285	U+24B9:
58610	ud800
56449	setforcemergedeletespctallowed
29545	Hiragana
53923	ud801
57008	encapsulation
38985	map.get(keyStr).intValue());
41580	f.setValue(term);
49891	currentquery
42219	att.setPayload(pl);
32909	termBytesCount
67514	r1;
59843	"\1\215\21\0\1\216\2\0\1\217\42\0\1\77\1\26"+
43544	r/w
26519	assertTrue(deleteReader.hasDeletions()
52794	applicability
60001	"\1\352\12\232\175\0\1\u01a9\23\232\1\u016f\6\232\1\352"+
30086	u283c
32488	r1,
16771	r1)
29542	StandardTokenizer,
17290	onclose
1643	collections
25513	Integer.valueOf(System.identityHashCode(val));
9257	termsarray
27155	"\u000B\u0308\u0061\u002C",
66878	maxceiling
4884	setmaxthreadstates
21703	r2;
33843	pp;
62340	assertEquals(s(1,0,1),
29183	String(byteBuffer,
34184	pp1
21851	NumericField}s
33819	pp2
55111	r2,
33838	pp,
34158	phraseposition
67513	r2)
33793	pp)
10307	"\1\u013d\16\36\1\u0145\13\36\1\141\12\142\1\u013e\1\136"+
35721	nlzTable[y
58152	"should
65336	psu
61592	u9b3e
34812	TestFilter(result);
51100	collection!
40350	(pointer++;
46107	U+24B4:
3289	collection,
12702	u9b52
33547	cc,11,15
1340	bytearrayoutputstream
13103	u9b48
1401	getconfig
25980	collection.
39479	acceleration,
60204	"\12\u01cf\1\u01d0\2\u01ce\1\u01d1\3\u01ce\1\u01d2\5\0\2\u01ce"+
42675	atLeast(20);
57601	loads
59835	"\24\266\1\142\12\266\1\u0154\3\137\1\0\2\137\1\140"+
27487	"\u005F\n",
26800	"quick")),
23607	count=21553;
36694	arc.numArcs);
57925	(extensions.contains(extension))
35576	(pop(fours)<<2)
24560	FieldSortedHitQueue.maxscore
56004	Appendable}
54594	last.val);
16313	spanfirstquery
29044	tvx.readLong();
46178	U+24B5:
25694	SUBREADER
37018	ptr
41345	System.out.println("\nNow
66971	docsToAdd
65500	policy);
26588	(f.isIndexed())
38939	testfilesopenclose
51683	finishMerges
5058	jjCheckNAdd(24);
37603	testPalyndrome3()
46764	"â"
17721	getMaxSize()
4274	tTopDocs
41340	System.out.println("New
51921	finishStartCommit
36579	arc.output
31648	ud834
61805	u2898
50240	mergeExceptions
20162	List<Scorer>
37901	IdentityWeakReference(key,
12301	u9b5c
42971	setpositionlength
20521	variant,
43988	U+24B6:
34124	ps,
20374	load.
57599	indextodataoffset
31422	prx
3265	docBase);
66621	pt)
55132	hasDeletes
52142	newname
44343	,"(d)",
43167	pri
46741	"â"
62993	QueryParserConstants.java
15940	pre
1617	assumeTrue("ran
9325	"\4\133\1\132\11\133\1\132\3\133\1\132\5\133\22\0\31\132\3\133"+
44164	U+24B7:
2191	policy's
20260	iscoorddisabled
49051	QueryParser(Version
51209	!infos.contains(info):
41355	RuntimeException("wrong
16261	SpanNotQuery(i,e);
32363	mocklock
8011	PrivilegedExceptionAction<Object>()
24881	(FieldDoc)
41663	FileOutputStream("/x/tmp/out.dot"));
9141	"doc.numStoredFields="
25585	rfToValIdSets.keySet();
55668	didClose
9337	"\2\133\2\0\12\134\21\0\3\133\1\0\10\132\2\0\2\132\2\0"+
11582	"\12\230\175\0\1\346\24\230\1\u012f\5\230\1\347\12\230"+
27433	"\u0030\u0041"
57749	(startDiskUsage*150),
10539	"\1\0\1\25\2\0\1\25\1\140\20\36\1\u01b0\11\36"+
19559	suppressed);
36259	building;
54933	(targetGen
5541	orig_floatToByte_v13(float
35348	english_stop_words_set
52915	0xDBFF;
40202	for(;;)
8813	stack.push("@After");
44418	U+24BA:
36858	System.out.println("chain:
7147	valueof
42648	RAMDirectory,
66967	RAMDirectory.
63145	r.terms();
8756	r="
11262	"\13\0\1\u0122\160\0\1\346\3\230\1\u044a\26\230\1\347"+
49479	jj_consume_token(-1);
40970	seekResult.output);
15569	(docStoreOffset
6164	put
34261	Analyzer}.
24041	"G",
18244	.setSimilarity(sim).setMergePolicy(newLogMergePolicy()));
52630	NoMergePolicy.NO_COMPOUND_FILES;
37716	pw,
44518	U+24BB:
46795	"â"
10	Foundation
4970	input_stream.readChar();
34226	(1,000
58414	set.add(val);
11441	"\6\0\1\u04d0\1\u04d2\1\u04d1\2\u04d0\2\u04d1\1\u04d0\1\u04d1"+
22953	testMergeSort()
23160	ftl.add("other");
16572	Object[heapSize];
20883	analyzermap
19679	ChunkState(postings[i].postings,
4061	values:
31870	values;
7483	setpositionincrement
18808	"à½à½´",
44598	U+24BC:
46731	"â"
66251	(level>0)
5224	values.
63087	Test2BTerms
40136	SegmentMergeInfo[]
21762	runtest
5864	values,
2383	spanTermQuery.equals(boostingFuncTermQuery));
18479	sb.append("testing
2274	byte[]{4};
35933	values)
11853	Resets
8998	prefix,
37522	doc3.add(newField("field",
33396	end-of-stream
42607	getDocIdSetSize(docIdSet);
48393	(scorerDocQueue.size()
32284	prefix1
29402	prefix.
20762	getpayloadlength
29407	prefix)
12450	ufa3b
61317	"\1\u033c\161\0\4\u0634\2\0\1\u0634\15\0\1\u0634\6\0"+
20861	analyzerMap.put(fieldName,
25114	wq.getBoost(),
22954	CollectionUtil.mergeSort(list1);
18445	score_comp_thresh
24490	Executors.newFixedThreadPool(_TestUtil.nextInt(random,
23560	iter++)
7223	spanfilter
52280	this.proxPointer
50197	MaxFieldLength.UNLIMITED.getLimit();
22939	createRandomList(1000),
12851	ufa31
9440	"\6\146\2\0\3\146\34\0\3\133\4\0";
61741	ufa1d
35907	without",
59502	"\1\26\6\0\1\77\3\0\1\136\33\137\12\160\1\0"+
9023	prefix;
25288	prefix:
64930	verifyVectors(TermFreqVector[]
22946	createRandomList(1000);
21709	System.out.println("OBD
40831	builderObject.add(pair.input,
5625	floating
32289	prefix2
47937	TwoPhaseCommit#prepareCommit()}
7558	manager.
12521	u2813
11941	zzCurrentPosL;
2712	tlCollector
21765	Fieldable#isStored()
22945	list1);
17890	med",
8329	getfilepointer
27340	"\u002C\u0041",
13252	ufa27
12922	u2809
60039	"\1\u01d7\2\u01d8\1\u01d7\5\u01d8\1\u01d9\1\0\3\137\1\0"+
10765	"\1\u028e\20\230\1\347\11\230\1\u0289\175\0\1\346\22\230"+
8677	Abort
58514	setCaseSensitive.add(Integer.valueOf(1));
23074	subSearcher()
28291	scoreMax
39690	normsCache
48379	<code>scorerDocQueue</code>.
11444	"\1\u0386\4\u04d3\2\0\1\u04d3\15\0\1\u04d3\6\0\12\u04d3"+
7107	cageo
11906	Happen".
17425	least,
42944	TokenAttributeFactory
39361	inPlaceNot(DocIdSetIterator
30190	enumerator.scanTo(term);
33624	testtokenstream
24700	scoreMap
4609	assertTrue(DocumentsWriter.defaultIndexingChain
44591	"É¢"
21492	is.readBytes(b,
62414	qa1
62415	qa2
58793	(!hasIllegal)
36881	(queue.size()
17405	termFreqs;
26455	dfff
29559	"\2\132\1\133\143\132\1\0\1\132\7\133\1\133\1\0\6\133\2\132"+
34672	payloadtermspanscorer
20686	testdirectoryfilter
26968	(MidNum)
38479	notIndexedFieldNames.size());
53320	Long;
64751	"xx"));
51902	#getReader}
24692	j<v.length;
29246	termFreqs,
16702	testReopenSegmentReaderToMultiReader()
33603	_TestUtil.randomSimpleString(random);
38152	Iterator<Integer>
40800	in.ints[in.length++]
53311	Long)
49285	Term[0]));
56577	SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());
37556	Term("nonexist",
39903	doOpenNoWriter(openReadOnly,
30143	origEnum.size;
64685	"likely
4606	conf.getMaxBufferedDocs());
42809	copyBuffer(startTermBuffer,
31791	deletePriorCommits;
15444	field's
23702	field):
7074	termCompare(currentTerm))
1955	field);
21551	assertequalarrays
61439	"\12\u02e2\175\0\1\u034d\1\u0686\31\u02e2\1\u034e\12\u02e2\175\0"+
17400	SegmentTermVector(String
37127	codecutil
31802	deletePriorCommits)
59895	"\2\u016f\1\232\1\u016f\3\232\1\u016f\2\232\2\u016f\1\352"+
7245	consider
38548	fieldables[0];
1647	bytesref
32840	doVectorPositions
32390	testnativefslockfactoryprefix
24965	docvalues
37703	LOW_PRIORITY
44265	AFRICAN
45103	"É´"
2879	threadArray[i].start();
48864	SortedTermVectorMapper(new
33694	forceMerge(1,
31710	org.apache.lucene.store.FSDirectory;
255	searchTerm
30832	CharacterUtils#fill(CharacterBuffer,
54007	cnse)
18546	"Õ£ÖÕ¾Õ¥Õ¬",
37510	termQuery,searcher);
30838	getBuffer()
60860	"\1\352\3\232\1\u049e\6\232\175\0\1\351\32\232\1\352"+
49325	999);
27439	"\u0030\u0308\u002C",
16590	heap[1];
39749	infosUpto++;
54652	java.nio.channels.FileLock;
67002	assertTrue("contains
50172	checkpoints.
49547	Float.valueOf(boost.image).floatValue();
50355	pool";
49412	(lastCharWasEscapeChar)
66089	parser.parse("bla*");
17801	(!rewriteMethod.equals(other.rewriteMethod))
15091	lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);
19386	field()
67947	c/y:2
52766	assertEquals(expectedScores[i],
52695	SpanTermQuerys
11069	"\1\347\1\u03af\11\230\175\0\1\346\4\230\1\u03b0\25\230"+
27985	"\u0031\u002C\r",
52698	FIELD_ID
13198	ud7c5
53239	x010000
39974	!hasNorms(field))
65019	building.
46311	"â"
57229	~bits[i];
5842	2]);
25643	System.identityHashCode(readerKey)
54929	time's
20514	time):
15458	<name>.cfs
44980	"É¬"
65701	(!initDone)
21586	searchText
63569	arr[i]
6070	assertTrue(t1a.equals(t1b));
63218	modifiable
30423	set.add("yourselves");
12396	ud7d9
36286	in.readByte()
20366	Declare
66348	DocumentsWriter.INT_BLOCK_MASK;
9998	"\1\151\1\136\1\0\2\152\1\137\3\136\2\0\1\76"+
55438	doc.getFields("textField1");
18296	s);
61687	ud7bb
37593	SloppyPhraseScorer.phraseFreq().
7593	'\"':
30113	CloneableTerm
10242	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\3\264"+
54194	newPool(){
35748	pop_arrayhs
12797	ud7cf
17531	modifier.close();
13199	ud868
17529	modifier.setNorm(0,
63495	0x876532,
50639	finishMerges(true);
29940	"\2\25\4\0\3\25\1\0\1\25\10\0\1\25\1\0"+
44696	U+24D7:
10446	"\2\u0141\1\136\2\0\1\u0169\1\u0141\4\0\1\u0141\1\136"+
17848	BaseTestRangeFilter
65813	s.search(bq,
25320	mxtxls
61688	ud85e
46334	"â"
43308	org.apache.lucene.document.Fieldable}
62443	init(Similarity
54338	t.setPayload((payload
56212	TestReader(IndexReader.open(directory,
3256	(int)
67425	modifier.setNorm(1,
63278	0x543,
62303	QueryUtils.checkEqual(q1,
25051	acegibdfhj
9985	"\1\325\5\326\1\327\1\0\3\136\1\0\2\136\1\137"+
30394	commitdata
39837	ReaderUtil.getMergedFieldInfos,
63090	charTerm;
24277	"short",
12798	ud872
63494	0x876531,
46358	"â"
792	field",
58096	PhraseQueue(int
27830	"\u0061\u0027\u2060\u0061\u0027",
44630	U+24D6:
35378	docidbitsetiterator
65989	f:two");
49557	jj_consume_token(WILDTERM);
5316	curTokenImage);
3607	expert
51373	skip");
42709	re-associate
26858	setOffset(int
2289	fieldName)
46615	"â"
772	fieldName,
39356	clear(bitSetDoc,
52019	getandincrement
1705	org.apache.lucene.document.Fieldable;
44541	U+24D5:
63213	elsewhere).
22898	payloadRef:
12397	ud87c
769	fieldName;
16682	testCloneNoChangesStillReadOnly()
43603	CachingWrapperFilter.DeletesMode.DYNAMIC)
51187	parallelize
28517	binaryvalstored
27993	"\u0031\u002C\u0041",
11088	"\1\u03c3\175\0\1\346\25\230\1\u03c4\4\230\1\347\12\230"+
19019	"test@example.org"},
46382	"â"
20585	lucene's
10885	"\150\0\1\376\32\264\1\141\1\u030b\11\264\1\0\3\136"+
30167	get(term,
66441	Conflict:
1032	FailOnlyInCommit
25638	fieldName"
44502	U+24D4:
27454	"\u0030\u0308\u00AD"
56259	filtertermenum
6515	textual,
17347	QueryWrapperFilter(tq);
39578	ti.proxPointer
25439	FieldCacheSanityChecker()
11630	"\226\0\1\u0518\175\0\4\u055b\2\0\1\u055b\15\0\1\u055b"+
14899	fieldcache
22922	ispayloadavailable
40670	buffer[i]
46709	"â"
43621	coreKey,
48319	firstindex
38477	assertTrue(indexedFieldNames.contains("tvoffset"));
53392	"with
25340	org.apache.lucene.analysis.tokenattributes.KeywordAttribute;
66556	text[--pos];
58781	s0;
12121	u28c0
63241	getlastmodified
43619	coreKey;
44324	U+24D3:
41627	childCount++)
46701	"â"
45602	,"S",
65863	atLeast(3),
26219	15-bit
12923	u28ac
38087	Double.longBitsToDouble(0xffffffffffffffffL)
68021	right.reset();
61237	"\31\232\1\352\12\232\175\0\1\351\32\232\1\352\1\u03dc"+
44244	U+24D2:
23559	atLeast(3);
2735	collected.
12522	u28b6
57542	Term(fieldStrs.get(i));
17523	fail("didn't
62633	FIELD_T,
57199	~startmask;
46643	"â"
38715	assertEquals("Doc
224	fail("Delete
20281	booleanscorer
48913	(documentNumber
63276	0x542,
54892	waitingListeners.remove(l);
16690	r1))
59588	"\10\36\1\142\12\143\1\66\1\137\1\144\1\137\1\0"+
16151	assertEquals(scores[i],
34164	queuing
58951	qp;
19800	Type.FLOAT
58559	fail("null
58623	testcopyemptyset
30087	u28a3
13324	u28a2
36199	(into
62869	correctOffset(start+termAtt.length()));
2538	inttoenglish
9338	"\26\132\1\0\7\132\1\0\2\132\1\0\5\132\2\0\1\133\1\132"+
42650	multiField
42526	verifypayloaddata
44187	U+24D1:
59220	"\1\25\6\0\1\25\2\0\1\25\2\0\1\25\17\0"+
55727	r1);
58820	s1,
39999	Tries
61591	u9a9b
36413	IOUtils.close(is);
6742	<em>int/float</em>
63275	0x541,
21082	diskratio
4746	conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);
1782	FieldsWriter(Directory
27842	"\u0061\u0027\u2060\u0031\u002E\u2060",
25579	badKids
27790	"\u0061\u0027\u0031\u002C",
67613	i+"");
7560	Tried
25418	ValueSourceQueries)
61242	"\3\137\3\0\1\137\4\0\2\137\151\0\4\u05f0\2\0"+
7577	StringBuffer
8226	local
59539	"\3\0\1\25\4\0\2\25\2\0\7\25\1\0\2\25"+
16426	assertSnapshotExists(dir,
44073	U+24D0:
49374	ParseException("'*'
13200	ud90b
60482	"\175\0\1\351\32\232\1\352\11\232\1\u0364\175\0\1\351"+
58842	doc2.getField("f"+i).stringValue());
35819	TermVector.NO));
43526	doTestCountVectorOfSize(100);
22082	Harmony
48435	currentdoc
55757	warmer.warmCount;
21123	drastically
31652	ud917
34754	triplemulti
54105	enableIcrements)
12799	ud915
67489	(hits.length
43893	qq!
57627	replacement's
30733	u2971
46219	"â"
57419	rotateright
9139	localFieldsWriter.setFieldsStream(doc.fdt);
12700	u9a0c
56677	leeway
4997	ReInitRounds();
4480	indexorder
17528	assertTrue(pr.isCurrent());
12299	u9a16
61689	ud901
59494	"\1\221\3\0\1\54\2\0\1\55\3\0\1\73\7\0"+
51355	#finishCommit}.
963	analyzer).setMaxBufferedDocs(10));
29003	tvfFormat
49004	MOD_NONE
66958	"PairOutputs<"
61806	u293b
58171	harm
4375	conversion
18752	Î¼ÏÎ¿ÏÎµÎ¯
1448	getlastcommitsegmentsfilename
37575	testPalyndrome2()
11345	"\160\0\1\u0163\4\u0485\2\0\1\u0485\15\0\1\u0485\6\0"+
16895	clones[x].close();
22671	upperVal
29475	System.clearProperty(PROP_KEY1);
39756	oldNormsCache,
60264	"\1\352\3\232\1\u02a8\6\232\175\0\1\351\3\232\1\u02a9"+
54626	"boolean"
39006	(char[])
11445	"\1\u0469\13\0\1\u0325\214\0\1\u04d4\2\u04d5\1\u04d4\5\u04d5"+
46242	"â"
37945	hard
51286	!directory.fileExists(newFileName):
39812	subReaders[i].norms.get(field)))
15870	has.
12924	u294f
11469	"\30\230\1\347\12\230\175\0\1\346\2\230\1\u04e6\27\230"+
60513	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\12\266"+
12398	ud91f
12523	u2959
13101	u9a02
12122	u2963
66683	testassumerule
37112	//@Override
62703	ShardSearcher[]
22129	(next
38899	IncThread(IndexReader
37933	collected!
3940	buffer.length-1)
42512	testpayloads
4366	half
38205	testRandomSplit()
56177	testrangequeryrand
21241	testBuffer[]
24928	iagce
29945	"\1\54\3\0\1\54\2\0\1\54\3\0\1\54\5\0"+
65440	strVal(doc);
64729	"bb0"));
36921	node=0;node<inCounts.length;node++)
2935	time_allowed
45595	U+24C8:
36175	NON_FINAL_END_NODE
29913	"\1\53\10\0\1\25\24\0\1\25\11\0\2\25\2\0"+
18892	"O'Reilly's",
24462	"CEGIA");
65241	root.numArcs
20596	versa
65003	construction,
55269	v1.getTerms();
4707	shallow
20859	construction.
1346	mocktokenizer
62705	ShardSearcher[subReaders.length];
37116	other.node
65059	CompiledNode
35050	scorerdoc
25752	isempty
45684	U+24C9:
66527	bytesUsed(2*numPostings
38696	fieldInfo1.name,
60207	"\1\u026b\3\0\3\u0213\1\u016e\2\0\1\u026c\1\u0213\157\0"+
17807	multitermqueries
20033	satisfied.
16819	clonedSegmentReader.norms.get("field1");
51581	(success
1248	w.getReader();
11123	"\2\0\1\u03d9\15\0\1\u03d9\6\0\1\u03db\1\u03dd\1\u03dc"+
60914	"\2\0\1\u04cb\15\0\1\u04cb\6\0\12\u04cb\1\u047e\13\0"+
41096	scratch.copyInts(prefix);
55971	LimitTokenCountFilter
28461	chararray
26248	interpret
7035	Compares
51812	satisfied:
48643	hang
6229	ParseException
53396	IOException(ioe.getMessage()
17780	clearTotalNumberOfTerms()
7116	hand
45454	U+24C6:
35884	allowedTerms.size());
1829	indexStream.getFilePointer())
42121	this.intsEquals((IntsRef)
55914	purge,
55913	purge.
17182	real-time
58304	utf8SortedAsUTF16SortOrder
31749	[-dir-impl
17036	Mapper");
41319	System.out.println(
53557	dfs.
64593	(((buffer[bufferPosition++]
53854	"Abc\ud801".toCharArray();
55443	doc.getFields(DocHelper.NO_NORMS_KEY);
62422	ints[]
27623	"\u0300\u0308\u0031\u0027",
23079	mSearcher2.subSearcher(hits2[1].doc));
45515	U+24C7:
36165	2-byte
43079	reopenlock
33402	input.end();
29880	"\4\0\6\25\2\0\1\25\1\0\1\25\1\0\3\25"+
14630	STRING
26778	(SpanPositionRangeQuery)o;
37171	startnode
46022	U+24CD:
31243	binary",
55889	purges
65427	ReverseOrdFieldSource
17313	qwf
21895	Similar
38103	-1.0E15f,
55704	//doBody(5,
26134	fastmatch
34679	getspanscore
15718	i=0;i<normGen.length;i++)
52317	newIndexWriterConfig(random,
28537	decompressstring
63971	org.apache.lucene.store.ByteArrayDataInput;
21421	expect
25250	"*ab*",
41783	1..100
66327	bytesUsed(-postingsArray.bytesPerPosting()
5734	less,
68092	less.
62314	QueryUtils.checkEqual(qA,
62918	normSuffix,
54174	buffer[];
38967	HashMap<String,Integer>();
9174	plus
46069	U+24CE:
3538	problems
6996	minBound++;
25749	checkvaluemismatch
20605	WhitespaceAnalyzer
35018	collecting.
33388	deletelastcommitpolicy
42433	PayloadFilter.
6607	full-text
39275	Arrays.hashCode(termArray));
15730	(normGen[fieldIndex]
38085	Double.longBitsToDouble(0x7fffffffffffffffL),
41429	(storeDocFreqs)
34891	plug
38699	curField
46131	U+24CF:
50285	learn,
29117	tvfPointers[0]
24847	s="
61508	UAX29URLEmailTokenizerImpl(java.io.InputStream
21102	tryLock(long
46265	"â"
31808	this.deletePriorCommits
20216	(BooleanQuery)super.clone();
56562	excldoc
45922	U+24CB:
64328	MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE.rewrite(reader,
59380	"\1\207\2\0\1\210\21\0\1\114\17\0\1\25\1\67"+
54141	testignorecase
32462	IndexerThread(Object
9628	"\2\ud3f3\2\ud496\2\ud539\2\ud5dc\2\ud67f\2\ud722\2\ud7c5\2\ud868"+
41072	outputs.outputToString(cmo.output)
19453	lastgen
975	Thread[]
24050	"H",
54980	max_searcher_gen
31539	oldIndexDir);
49942	rangeex_to
67177	existingPositions
45983	U+24CC:
10588	"\2\0\1\u01e1\15\0\1\u01e1\6\0\12\u01e1\176\0\4\u01e2"+
58638	400);
38208	randomLong(random);
19585	FileInputStream
49494	MOD_NOT;
11029	"\1\u0390\15\0\1\u0390\6\0\12\u0392\1\u0391\13\0\1\u02cf"+
53313	output.second
35330	newStop
6047	assertEquals(20000,
28544	INITIALIZER,
32231	writer.start();
6715	<p>Good
23209	scores[0],
25042	endswith
16357	CharReader.get(
33278	testRepeatedRollBacks()
40718	idx2=0;idx2<output.length;idx2++)
21406	assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));
1355	testindexwriterexceptions
10750	"\175\0\1\u0279\33\0\12\u027a\175\0\1\u0279\33\0\1\u0224"+
24908	's
2024	hash
53769	add(CharSequence
3502	(info
56142	search.search(csrq("id",
13325	u2945
41956	noarcarrays
8917	technically
19449	consumer.abort();
31706	testperfield
43160	vals.length
45827	U+24CA:
956	numDel
16672	reader.clone(true);
29182	tvf.readBytes(byteBuffer,
18307	fail("firsttime
15658	SegmentInfo(name,
39271	Breakout
1308	have
61010	"\175\0\4\u0522\2\0\1\u0522\15\0\1\u0522\6\0\12\u0522"+
34774	testMultiAnalyzerWithSubclassOfQueryParser()
60612	"\4\232\175\0\1\351\32\232\1\352\7\232\1\u03ef\2\232"+
18450	testsimilarity
26735	fieldSelector)
31576	ArrayList<String>(oldNames.length
58282	utf8SortedAsUnicodeSortOrder
46288	"â"
8647	teesinktokenfilter
49296	query).setSlop(slop);
25182	testQuestionmark()
34076	cnt);
36928	(q.size()
41878	getsingleton
60977	"\6\0\12\u04f4\1\u04f5\175\0\4\u04f6\2\0\1\u04f6\15\0"+
55656	assertEquals(addDirThreads.count.intValue(),
5319	t.beginColumn
52114	deletequeries
26284	getEncodedLength(byte[]
43041	#acquire()}
25699	problem.
26231	problem,
62636	FIELD_C,
9284	specification
30088	u290a
63152	sb.append(Integer.toHexString(b&0xFF));
54021	re-written
1411	incrementtoken
32767	max_random_binary_length
19373	org.apache.lucene.util.Bits.MatchAllBits;
15906	s.append(docCount);
1024	writer.getConfig().getMergePolicy()).setMergeFactor(5);
40458	AttributeSource},
45639	U+24E2:
44613	U+0123:
48619	posIncr
6688	calculate
18123	scoresDocsOutOfOrder()
34890	Implement
37834	AttributeSource}.
54439	getdescription
12451	ufade
58393	"was",
49240	StringReader(queryText));
6311	QueryParser(matchVersion,
6983	NumericRangeTermEnum(final
9331	"\3\133\1\0\6\132\4\0\2\132\2\0\26\132\1\0\7\132\1\0"+
35912	String[]{
29844	"\1\143\11\0\1\46\2\0\1\144\16\0\1\145\2\0"+
41988	sprinkle
17441	termtext
18341	s.doc(h[0].doc).get("id"));
40659	random.nextInt(30)
64154	eighth
67525	stopThread()
44640	U+0124:
45721	U+24E3:
66230	q3.add(q1,
55129	"r1.numDocs()="
35038	getBoost()==fq.getBoost());
16492	partial
46873	inverted
11618	"\12\u0555\1\u0554\174\0\1\u0386\4\u0553\2\0\1\u0553\15\0"+
40570	utf32
53405	flushBuffer(out,
18754	ÏÏÎ¿ÏÏÎµÎ¸Î¿ÏÎ½
724	hits
13253	ufaca
41029	tryCount++;
38563	LockObtainFailedException");
16924	multi
40846	FileOutputStream("out.dot"),
17285	loadtermsindex
12852	ufad4
15014	randomterm
37009	(!retry)
60031	"\1\25\2\0\1\25\1\141\32\36\1\142\12\143\1\u01d4"+
37260	neg
26200	Math.min(size(),
47919	tpc.rollback();
2842	behavior
45898	U+24E4:
44611	U+0121:
4765	conf.setMergePolicy(new
19698	net
16686	r2))
44699	"â±¶"
68083	valueCount);
3179	needsScores()
42100	hita
10107	"\1\47\1\0\1\50\1\0\1\51\2\0\1\52\3\0"+
42101	hitb
64029	INTS[i]
14917	gettype
16797	r2);
14793	buffer.append("<byte:
28457	utf16
44578	U+0122:
61742	ufac0
45944	U+24E5:
25926	nfs
3662	APOSTROPHE_TYPE
21628	is/are
119	new
27656	"\u0061\u2060\u005F"
27235	"\u0041\u0041",
2933	testtimelimitingcollector
11531	"\1\u0512\1\u0514\1\u0513\2\u0512\2\u0513\1\u0512\1\u0513\1\u0512"+
42051	hitA
27374	"\u0027\u0001",
25939	hit;
52156	anysegmentsflushed
36962	topCount;
54740	instead?
19310	testwikiurls
27657	"\u0061\u2060\u0308\u005F",
46008	U+24E6:
8278	useunmaphack
37325	instead;
28481	binaryFldStored
62400	testequality1
26666	compact
38773	r2.getIndexCommit().getSegmentCount());
36421	//writeInt(v);
21032	reader.close()
35225	setSkipData(int
3829	instead.
10824	"\4\u02d1\2\0\1\u02d1\15\0\1\u02d1\6\0\12\u02d1\176\0"+
15449	filesystem.
48544	instead,
17366	newField("field",
15428	norms/deletions
64092	ByteArrayDataInput(READ_TEST_BYTES);
58558	set.contains((char[])
44576	U+0120:
46035	U+24E7:
37324	String[],
21904	utf8"
46430	,"11.",
26876	(OffsetAttribute)
29660	"\10\103\1\51\7\100\1\12\2\100\32\103\1\12\4\100\1\12\5\102"+
60451	"\21\0\1\347\2\0\1\350\42\0\1\174\1\65\6\0"+
53012	utf8,
50574	Swap
34848	PosIncrementAnalyzer()
41704	assertEquals(nothing,
25489	ValueIds
67119	ClassicFilter(src);
19111	8192);
4459	nan
58678	cacheddir
35290	lastskipfreqpointer
35535	twos=u^twosB;
46102	U+24E8:
9808	"\1\136\1\0\2\152\1\137\3\136\2\0\1\76\1\136"+
33995	rg[j].rptInd
21119	org.apache.lucene.index.TermDocs;
55520	f2",
9830	"\3\25\1\0\1\25\6\0\1\25\1\0\2\25\121\0"+
9075	writebytes
40524	API).
40743	this.inputMode
46169	U+24E9:
34825	offsetAtt.setOffset(prevStartOffset,
35229	this.curStorePayloads
48448	topskiptoandadjustelsepop
50200	#setInfoStream}).
9357	"\3\142\1\0\1\142\1\0\1\142\2\0\2\142\1\0\4\142\1\143"+
28951	cachedFieldSourceHashCode()
38101	float[]{
36121	layers
15948	docstoreoffset
23683	Keeps
16950	clonereader2
67846	testnumdocslimit
45119	,"N",
11877	yystate()
5583	SmallFloat.byteToFloat((byte)i,5,2);
61744	ufc06
51222	info="
58905	na,
50982	forceMerge(maxNumSegments,
41021	while(tryCount
30880	icucollationkeyfilter
24081	"0.1",
17013	positions.length;
50746	mergePolicy.getMergeFactor
57859	Thread#interrupt()}
9899	"\6\0\1\114\153\0\1\114\5\0\1\114\2\0\3\114"+
43380	((diff
58911	na;
46706	"â¼"
3154	other.setScorer(cachedScorer);
61280	"\1\u034d\25\u02e2\1\u0612\4\u02e2\1\u034e\12\u02e2\175\0\1\u034d"+
10485	"\2\0\1\u0194\15\0\1\u0194\6\0\12\u0194\1\u0195\175\0"+
4330	assertTrue(last.text().compareTo(cur.text())
59034	numAsserts;
4813	whitespaceanalyzer
66057	b:two)
54612	copycostperelement
31486	(!Arrays.equals(expected,
37342	matchVersion.onOrAfter(Version.LUCENE_29);
60652	"\1\u040f\13\0\1\u033c\160\0\1\u03a1\4\u040e\2\0\1\u040e"+
16343	spanterm
37918	backingStore.keySet().iterator();
39460	mergeFactor.
21197	stringindex
50744	mergeFactor)
24487	ParallelMultiSearcher
20204	no-op
25881	filesystems
63230	buffers.add(buffer);
21964	anonymous
29608	"\15\132\1\0\3\132\1\0\2\133\14\0\64\142\2\143\36\143\3\0"+
14976	random.nextInt(3);
66980	ramDir.getRecomputedSizeInBytes());
11415	"\15\230\1\u012f\14\230\1\347\12\230\175\0\1\346\23\230"+
38485	mergeFactor;
37299	matchVersion.onOrAfter(Version.LUCENE_29),
30080	u25d2
27899	"\u0031\u003A\u0041",
3311	cache).
25134	assertTrue(wq.getEnum(searcher.getIndexReader())
27691	"\u0061\u003A\u0001",
36212	other.flags;
28077	"\u0031\u002E\u2060\u0031\u002E\u2060",
56584	lastVersion);
52160	fsync
26198	GrowableWriter(getBitsPerValue(),
45963	,"vy",
39160	square
64549	this.bufferSize
56699	r.getSequentialSubReaders().length
60898	"\4\u04ba\2\0\1\u04ba\15\0\1\u04ba\6\0\12\u04bc\1\u04bb"+
26669	hit.
18938	Korean
44609	U+011F:
2419	hit,
57724	testCommitOnCloseDiskUsage()
46286	"âµ"
59431	"\3\0\1\25\1\34\5\0\1\25\2\0\1\25\2\0"+
54730	lockFileName);
24213	"f"));
17005	Callback
27589	"\u0300\u0308\n",
1573	assertEquals(compareTo,
56363	hit)
21866	result.add(field.getBinaryValue());
8695	docinverterperthread
66012	+foo:test",
19720	cs.pos
12854	ufc1a
5416	jjmatchedpos
62466	coordinator.init(similarity,
57559	fieldId
21441	e1.getFilePointer());
53698	paged)
17504	doc24.getFields().size());
10158	"\1\140\3\36\1\352\1\36\1\375\4\36\1\352\2\36"+
10102	"\4\36\4\352\1\36\1\352\1\36\3\352\1\141\12\142"+
38875	closeCount[0]++;
61003	"\1\0\2\u04ce\2\0\1\u04ce\1\0\1\u04ce\175\0\1\u034d"+
50485	mergePolicy.getUseCompoundFile
55992	positions.length)
21059	":exception
22434	insertionsort
61493	zzUnpackTrans(ZZ_TRANS_PACKED_1,
58494	"abc\uD800efg",
3805	CharTokenizer
30385	testtwophasecommittool
44607	U+011D:
33999	rptTerms)
60334	"\3\u0219\3\0\1\u0219\4\0\2\u0219\2\0\1\175\1\0"+
21426	cr.close();
12453	ufc24
54666	exit.</p>
51672	diagnostics.put("os.version",
45470	U+24E0:
22644	this.includeLower
49506	Modifiers();
3317	ramusageestimator
48954	searched.
53384	hint
11670	zzUnpackTrans(ZZ_TRANS_PACKED_0,
56213	assertTrue(terms.term().text().indexOf('e')
56394	b[offset++];
23658	netherlands
4576	getChain(DocumentsWriter
13255	ufc10
64651	buffereindexinput
21366	f19,
44574	U+011E:
48587	perThread.singleToken;
24651	isFull)
54574	testMergeSortStability()
45563	U+24E1:
57354	Expand
58059	docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(),
56032	Outputs<Long>
44572	U+011C:
11161	"\161\0\4\u03f7\2\0\1\u03f7\15\0\1\u03f7\6\0\1\u03f8"+
43966	HOOK
44907	U+24DA:
22118	parse(char[]
2306	PayloadAnalyzer())
62139	"nestedvalue1")),
10812	"\2\u01ca\4\0\1\u01ca\152\0\4\u02c5\2\0\1\u02c5\15\0"+
7242	entirely
9108	ic1.hashCode(),
68052	StringReader(s);
53988	bytesRef.incrementAndGet();
34456	Values
31355	TermPositionVector);
3642	sizeinbytes
42313	PayloadAnalyzer();
60911	"\4\u04c5\2\0\1\u04c5\15\0\1\u04c5\6\0\12\u04c5\1\u04c6"+
37924	(nextIsSet
1850	indexStream.getFilePointer()
37795	"weight("
49788	(jj_kind
17542	td.close();
44807	"â±"
44441	U+011B:
7709	org.apache.lucene.document.FieldSelector;
2421	assertTrue(count
48446	topscore
36539	arcIdx=nodeIn.numArcs-1;arcIdx>=0;arcIdx--)
53778	EMPTY_SET)
60527	"\1\u0390\27\266\1\142\12\266\1\0\3\137\1\0\2\137"+
65337	viewdoc
64373	docvisitcount
59152	"\2\uf13d\2\uf1e0\2\uf283\2\uf326\2\uf3c9\2\uf46c\2\uf50f\2\uf5b2"+
15249	fsDir.createOutput(name);
25934	#create(org.apache.lucene.search.Sort,
41666	[label=\"t\"
5904	(long)
45078	U+24DC:
37817	x1aa71190
20843	defaultAnalyzer
27987	"\u0031\u002C\n",
44376	U+011A:
20576	streams.result;
21676	granta
32135	nextLevelArray[level];
18010	nul
2873	num
44996	U+24DB:
56770	rwReader
11972	zzForAction;
52812	grants
11965	zzForAction:
52131	progress
56290	j--)
41766	r[0].output.output2.longValue());
32493	r1="
3049	SegStart(IndexReader
26718	org.apache.lucene.document.FieldSelector}
12516	u24e4
26177	getBitsPerValue()
29433	testsimpleexplanations
35702	ntz
56952	HOST
23403	Term[3];
38119	i<intVals.length;
56098	QueryUtils.check(cswcq(new
12917	u24da
49709	oldToken;
48822	posIncrAtt.setPositionIncrement(testToken.pos+1);
26727	nth
43496	doTestConstructOfSize(8);
25354	LowerCaseFilterMock(
60760	"\175\0\1\351\1\u0454\31\232\1\352\12\232\175\0\1\351"+
45356	U+24DE:
59940	"\3\36\1\355\26\36\1\142\12\143\1\66\1\137\1\144"+
13318	u24d0
5710	isKeyword
58914	nu;
53096	Trail
10318	"\1\276\1\277\1\300\1\301\1\302\1\303\1\304\1\305"+
65338	deduphash
8275	unmap_supported
48762	fieldInfos.add(testFields[i],
57319	union(OpenBitSet
9278	email
22320	SorterTemplate()
55951	countUntilPurge.set(nextCount);
32712	binaryDumpNIO(decodedBuf),
45201	HORN
54772	(channel
58907	nu,
8109	//System.out.println("length="+length+",
45159	U+24DD:
43404	DocIdSetIterator()
5194	jjMoveNfa_2(int
57889	ByteBuffer.wrap(b);
8794	invoked
19399	MatchNoBits)
54833	visible.
14782	(type)
40274	nrt
37091	"fst.nodeCount="
204	reader2.deleteDocuments(searchTerm1);
4518	nrq
15741	nrm
59288	"\1\25\1\115\1\26\1\116\3\0\1\115\1\0\1\115"+
1325	Token[]
20989	testDiskFull()
3381	invokes
1749	FORMAT_VERSION_UTF8_LENGTH_IN_BYTES
66580	rehashpostings
60655	"\1\u0412\1\u0411\2\u0410\2\u0411\1\u0410\1\u0411\1\u0410\1\u040f"+
22221	overflow?";
4090	general
52022	lastcommitchangecount
67896	correctOffset(inputLength));
52520	assertEquals("field1:quick",
12115	u24ee
29379	(subtract
14809	buffer.toString();
45059	,"M",
24917	testtypedsort
46612	"â»"
61505	"\2\1\1\0\4\1\2\0\3\1\111\0\1\1\10\0"+
45435	U+24DF:
18744	ÏÎ¿
1114	IllegalStateEx
2041	high
53164	#UTF8toUTF16(byte[],
60397	"\1\142\1\266\1\u031b\10\266\1\0\3\137\1\0\2\137"+
8318	npe
26444	middleShift;
65672	decRef(SegmentInfos
54118	assertFalse(stpf.incrementToken());
37034	delta");
66877	foonorms
365	w.addDocument(doc);
28961	intval
44853	U+24D9:
24295	SortField.BYTE,
26196	resize(int
33370	rolls
32491	RuntimeException("doc
61330	"\6\0\12\u063b\1\u0600\13\0\1\u02e1\160\0\1\u0349\4\u063b"+
62570	singlematchscorer
37702	="medium";
12518	u262a
57054	Opteron,
1565	,getText());
27672	"\u0061\u2060\u0061"
54294	assertTrue((-offsetKey)-1
65526	commitPoint
66313	postingsArray.bytesPerPosting());
12117	u2634
67172	existingOffsets.length,
8864	decorator
30081	u2639
35860	testTopTermsRewrite()
17695	result.setBoost(query.getBoost());
462	random
44811	U+24D8:
66256	"w*"));
49918	firstquery
18485	"testing",
9299	non
43	not
66560	newHash;
50248	BufferedDeletesStream
26257	middleShift,
17842	nor
27317	"\u003A\u0308\u0061\u0027",
27586	"\u0300\r",
202	now
95	org.apache.lucene.util.LuceneTestCase;
25389	addAttribute(KeywordAttribute.class);
26387	codingCase.numBytes
67702	buffer.length();
14875	SortField.BYTE:
62460	coordinator
54817	markedheld
56342	first_cut,
9798	"\1\74\2\0\1\75\41\0\1\25\2\26\2\0\2\76"+
37170	nnn
44439	U+0119:
50742	LogMergePolicy#setMergeFactor(int)}
7104	computers
8488	WhitespaceTokenizer(reader1));
60167	"\2\137\150\0\1\u0101\14\266\1\u024c\15\266\1\142\12\266"+
41092	(!keep)
34998	(filterIter
19275	¿
8642	restoreState(finalState);
66392	p2;
59470	"\1\140\3\137\3\0\1\137\4\0\2\137\2\0\1\50"+
44374	U+0118:
7254	(enough)
34118	no.
41313	toIntsRef(w,
58366	TEST_STOP_WORDS
51220	newName="
49467	<TERM>
23238	searcher1
23240	searcher2
64761	!"field".equals(terms.term().field()));
23731	searcher.
27193	"\u3031\u0308\u005F",
22172	1/8th,
18088	searcher)
679	System.out.println("\nTEST:
19348	¿
35892	other);
2358	searcher,
41560	actual="
46263	"â´"
2265	searcher;
65747	TestScorerPerf
54747	synchronized(LOCK_HELD)
44437	U+0117:
21738	searcher:
16913	testclonenochangesstillreadonly
4192	-1000,
14944	stringordvalcomparator
35778	nlz
51772	searches,
53875	testNewCharacterBuffer()
55055	fieldNameComparator
31886	IntParser
43644	searches.
304	DOCUMENTS
31153	org.apache.lucene.search.NumericRangeQuery;
62362	s(spanA),
59197	"\3\ud675\3\ud718\3\ud7bb\3\ud85e\3\ud901\3\ud9a4\3\uda47\3\udaea"+
50307	Subsamples
44372	U+0116:
54416	ArrayList<Explanation>();
53074	uee)
60926	"\1\u0428\14\u02e2\1\u034e\12\u02e2\175\0\1\u034d\10\u02e2\1\u0428"+
60228	"\2\u0222\1\333\2\u0222\2\333\1\u0222\1\333\1\u0222\1\u0154"+
54336	o.payload.equals(payload);
16894	subs[x].clone();
485	searchers
7100	generic
44435	U+0115:
12919	u2620
32541	IndexableBinaryStringTools.encode(binaryBuf);
39564	field="
65258	arc="
9658	zzUnpackRowMap(ZZ_ROWMAP_PACKED_0,
27248	"\u0041\u0308\u0030",
17050	org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo}.
54383	stop_words_set
39461	let's
65642	incRef(segmentInfos,
51481	Math.min(info.getBufferedDeletesGen(),
39444	testcases
9619	"\2\ua61b\2\ua6be\2\ua761\2\ua804\2\ua8a7\2\ua94a\2\ua9ed\2\uaa90"+
38821	getUniqueTermCount
61801	u260c
54274	random.nextInt(37)
44370	U+0114:
25927	minutes
40563	toIntsRef(s,
62228	scorer.advance(hits.get(nextUpto).doc);
13320	u2616
25033	testsortwithscorenomaxscoretrackingmulti
54364	getMaxTokenLength()
36795	i=0;i<len;i++)
49582	ParseException("Minimum
19850	expectedScore
57918	IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE)
47986	setDocBases(IndexReader
8247	nio
51271	(dsName
44433	U+0113:
67047	(name.endsWith(".prx"))
28048	"\u0031\u002E\u2060\u0308\u0027",
54669	remain.</p>
49857	autogeneratephrasequeries
2286	payloadAtt;
3211	cacheScores,
31147	#docID()}.
41161	simpleRandomString(random);
63067	otherfilesgen
23778	ConcurrentHashMap<Long,SearcherTracker>
5839	currentMasks[base+2]
36514	arc'd
67283	recreate,
59136	"\2\ua060\2\ua103\2\ua1a6\2\ua249\2\ua2ec\2\ua38f\2\ua432\2\ua4d5"+
3247	cacheScores)
46224	U+24F6:
62642	field_c
9822	"\4\0\3\25\4\0\1\25\2\0\1\25\1\0\2\25"+
54044	clonenormbytes
36167	VERSION_SHORT_BYTE2_LABELS
36669	arc's
46776	"â"
40736	FSTTester<T>
54671	environment,
62641	field_t
4846	getindexingchain
58495	"\uD800efg",
52433	NumericTokenStream(final
5836	currentMasks[base+1]
9573	"\1\ubbcb\1\ubc6e\1\ubd11\1\ubdb4\1\ube57\1\ubefa\1\ubf9d\1\uc040"+
36049	assertEquals(hits1[i].score,
44262	U+0110:
10669	"\1\u0169\6\0\12\u0169\175\0\1\346\20\230\1\u0226\11\230"+
46247	U+24F7:
3090	maxRAMMB,
46773	"â"
44552	LIGATURE
3088	maxRAMMB)
33467	indexformattoooldexception
47171	hwair
15096	fieldSelector
42376	tp.skipTo(2
42377	tp.skipTo(3
49616	getRangeQuery(field,
21413	one);
67143	termToTVE
56667	one's
61690	ud9a4
7389	topdocssize
44297	U+0111:
46534	U+24F4:
34398	one).
38106	-1.0E-2f,
46721	"â"
3043	INITIAL_ARRAY_SIZE
33916	i+=incr)
3997	!matchVersion.onOrAfter(Version.LUCENE_31);
29817	"\5\0\1\44\3\0\1\112\11\0\1\46\2\0\1\113"+
58849	(last[i]
43339	this(sortedInts,
21678	patternidx
56049	org.apache.lucene.analysis.SimpleAnalyzer;
50026	added");
3307	@throws
57039	full</th>
46199	U+24F5:
52294	this.processors
44368	U+0112:
59201	"\3\uead5\3\ueb78\3\uec1b\3\uecbe\3\ued61\3\uee04\3\ueea7\3\uef4a"+
54916	getAndIncrementGeneration()
62827	SOUTHEAST_ASIAN
32923	tvf.writeVInt(prefix);
1035	isCommit
63244	OpenBitSetIterator
52093	dowait
46553	"â"
46633	"â"
38112	1.0E15f,
65898	assertStopQueryEquals("one
60096	"\1\u01ff\1\266\1\u0200\20\266\1\142\11\266\1\u01fb\1\0"+
42411	sb.setLength(0);
25194	'metals'
55398	deleteDoc();
14692	type)
32081	initially,
57298	obs
23784	Records
14698	type,
37976	poll
56366	lower(int
14776	type.
23175	ramDirectory2.close();
20977	newsize
51460	segString(),
21793	#setBoost(float)
67639	testcommitreopen
7564	of)
62872	'else'
7918	of.
54656	environments
48916	getDocumentNumber()
30546	"\1\52\7\0\2\25\2\0\5\25\2\0\2\25\4\0"+
51775	non-realtime
1846	RuntimeException("fdx
2745	multiThreaded,
20486	oct
15173	lazyTime
21605	time.</small>
602	""+r.nextInt(50);
22195	odd
2825	multiThreaded)
28826	bufferskip
46270	U+24F8:
22230	array;
36203	array:
1728	FIELD_IS_NUMERIC_INT
54746	in-process
12119	u277a
66974	English.intToEnglish(i).trim(),
39028	(int)cm.get(key));
49028	DateTools.Resolution
49297	(lowercaseExpandedTerms)
10613	"\3\264\1\u01f3\6\264\1\0\3\136\1\0\2\136\1\137"+
26804	sfq);
43900	of:
54988	targetgen
41044	Map<IntsRef,CountMinOutput<T>>
15053	TestFieldsReader
48983	DateTools.Resolution)}.
6719	types
49397	<code>A</code>.
58437	set");
38114	intVals=new
49832	setautogeneratephrasequeries
2877	synchronized(success)
9273	(https://issues.apache.org/jira/browse/LUCENE-3880)
6717	type:
4150	type;
1964	backwards
58965	mmapDir.createOutput("bytes");
64394	Compresses
25527	readerFieldToValIds));
19904	q);
57121	get1(int
49025	fuzzyPrefixLength
16172	assumption
1503	off
7132	newdoublerange
46293	U+24F9:
16732	reader1));
3039	arrays
28652	English.intToEnglish(i).trim();
20584	setstrength
15515	this.isCompoundFile
52703	mDirectory,
15900	'C';
49178	getDateResolution(String
28538	pointcut-like
44295	U+010F:
44766	"Ã­"
2539	setboost
66614	Nested()
52697	mDirectory;
4634	getters.add("getRAMBufferSizeMB");
30396	testpreparethencommit
52784	http://www.unicode.org/Public/PROGRAMS/CVTUTF
20723	array,
22231	array)
29519	ignoredproperty
24181	getRandomCharString(int
21744	executorservice
5247	array.
48081	destination
48174	subSpans[i];
60787	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\1\u0468"+
49779	jj_expentry[i])
175	reader1.docFreq(searchTerm3));
9300	ZZ_LEXSTATE[]
41722	7L);
16701	multireader,
29260	numtotaldocs
63139	CheckIndex...");
15953	hasprox
17710	computed.
19180	
19374	org.apache.lucene.util.Bits.MatchNoBits;
27824	"\u0061\u0027\u2060\u0308\u0061\u2060",
12519	u26cd
25563	Insanity(InsanityType.VALUEMISMATCH,
67978	poslen
27936	"\u0031\u0027\u0308\r",
16791	expectted
12118	u26d7
38577	(writes
397	testUndeleteAllAfterCloseThenReopen()
46551	"â"
32768	testsinglebinaryroundtripnio
32323	(writer
60731	"\4\0\1\u021e\152\0\4\u043d\2\0\1\u043d\15\0\1\u043d"+
17651	#SCORING_BOOLEAN_QUERY_REWRITE},
30187	index.compareTo(term,termBytesRef,enumOffset)
5330	curPos
36855	append");
18502	EmailFilter(TokenStream
59688	"\1\u0111\1\266\1\u0107\1\u0112\7\u0107\1\u0113\3\u0107\1\266"+
11189	"\4\230\1\347\12\230\175\0\1\346\32\230\1\347\4\230"+
66171	//System.out.println();
54983	newgeneration
46549	"â"
5723	obj
65065	tailLength
21753	obd
44228	U+010B:
1491	termIndexInterval
36692	(!arc.flag(BIT_LAST_ARC))
13201	ud9ae
56568	SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());
61802	u26af
13321	u26b9
12800	ud9b8
46510	U+24F2:
12399	ud9c2
26624	testgetfieldnamevariations
38551	fb1.getBinaryValue();
28790	writeSkipData(int
65478	RefCount>();
32199	NoLockFactory.class.isInstance(dir.getLockFactory()));
3155	(curBase
24083	"0.2",
17482	getDir2(random);
26249	ByteBuffer#slice}.
33826	resolving
44204	U+010C:
31487	actual))
32214	SingleInstanceLockFactory");
6840	Factory
30850	ishighsurrogate
38493	mapper.getFieldToTerms();
15975	patternlength
29657	"\5\21\3\27\12\106\20\27\3\42\32\30\1\26\2\24\2\110\1\111"+
34686	StandardTokenizer}.
46522	U+24F3:
12920	u26c3
38595	testFilesOpenClose()
40307	currentgen
60447	"\1\u034b\1\u034a\1\u0348\13\0\1\u02e1\226\0\1\u0270\10\0"+
67458	modifier.setNorm(i,
917	"aa")));
46575	"â"
60163	"\1\u0248\30\266\1\142\12\266\1\0\3\137\1\0\2\137"+
3848	CharacterUtils
63555	indexArray=bitlist[lowByte];
32205	writer2.close();
38950	fieldid
55729	r3);
42963	tokenfilters
21267	actual);
50715	#DEFAULT_RAM_BUFFER_SIZE_MB}.</p>
4460	stringhelper
43328	#iterator()}
55048	mergeFactor);
50790	(IndexWriter.isLocked(directory))
54175	MyTokenStream()
30209	random-access:
7357	pq's
50778	IndexWriterConfig#getDefaultWriteLockTimeout()}
54342	org.apache.lucene.analysis.StopFilter},
46486	U+24F0:
44230	U+010D:
67683	testreopenchangereadonly
10720	"\2\0\1\u0262\1\u020c\157\0\4\u0263\2\0\1\u0263\15\0"+
46579	"â"
46620	"â"
15176	<String>
42038	oneReverseMul;
43841	$folded
35779	xffff0000
60621	"\1\352\11\232\1\u03f8\175\0\1\351\25\232\1\u03f9\4\232"+
40789	arc);
17830	multireaders
42972	getpositionlength
30082	u26a0
46498	U+24F1:
44259	U+010E:
33147	src.addAttribute(TypeAttribute.class)
46577	"â"
19274	
46753	"â"
26343	outputOffset,
64512	(rewrittenInclude
54476	SimilarityDelegator
21448	ba1);
28893	inverteddocconsumerperfield
23828	they'll
60368	"\1\u0300\5\232\1\352\12\232\175\0\1\351\24\232\1\u0301"+
18280	"d4",
62666	delta)
60668	"\1\u041b\15\0\1\u041b\6\0\12\u041b\1\u0342\175\0\4\u041c"+
1668	segmentreader
46462	U+24EE:
251	dir.close();
19716	chunks
21247	readLen
31505	Field.Store.COMPRESS,
60693	"\10\u02e2\1\u0428\1\u02e2\2\u0428\10\u02e2\1\u034e\12\u02e2\175\0"+
19809	log("test:
125	"ccc");
32586	binary.length)
35332	stopWordsSet);
53969	owner.singleNormStream
17829	cleartotalnumberofterms
56687	gen--;
7240	own
46450	U+24ED:
32575	binary.length,
46609	"â"
51796	docWriter.getPendingDeletes().numTermDeletes.get();
64994	labels).
43134	nDocsReturned);
61191	"\1\u05b8\6\0\1\u05ba\1\u05bc\1\u05bb\2\u05ba\2\u05bb\1\u05ba"+
38349	x7fffffffffffec8l
46573	"â"
45271	"Ã³"
62687	String[atLeast(20)];
64245	penalties
31032	"merge",
33165	src1.hashCode());
10053	"\5\0\1\25\2\0\1\25\2\0\1\25\4\0\2\66"+
20682	testnodir
48976	#setLocale(Locale)
44202	U+010A:
46438	U+24EC:
53910	assertEquals("\ud801\udc1c789",
9757	"\2\0\1\122\42\0\1\32\7\0\1\32\100\0\1\123"+
52024	pendingcommitchangecount
11399	"\1\u04b3\2\u04b4\1\u04b3\5\u04b4\1\u04b5\175\0\1\u047b\242\0"+
18723	"Ø¯Ø±",
49501	q;}
59758	"\1\66\1\67\1\0\1\25\2\0\1\25\1\u0141\32\36"+
9220	numTermDeletes
3596	produced
2101	2*count)
30980	adaptation
53349	path.getPath()
62990	asstring
17905	search.close();
17849	testRangeFilterId()
40515	producer
4445	produces
46426	U+24EB:
11823	zzCurrentPos-=
26360	outputOffset;
62527	addProhibitedScorers(countingConjunctionSumScorer(disableCoord,
42020	allprefixes
61743	ufb63
15722	checked
514	hasdeletions
13254	ufb6d
26311	encoded[offset
51779	(poolReaders
64862	grow()
26346	arrays");
50105	index.</p>
12853	ufb77
39758	infos;
58709	i<ndocs;
25117	ConstantScoreQuery);
32495	r2="
10290	"\1\0\1\136\1\144\1\137\1\u013f\1\u0140\1\u0141\3\0"+
46599	"â"
51631	(sourceSegment.getHasVectors())
39708	infos,
31570	infos)
18861	testDelimitersSA()
36127	what's
6156	settermbuffer
66254	(qType
60674	"\2\u0420\1\u041f\5\u0420\1\u0421\175\0\1\u0349\4\u0422\2\0"+
25330	hijklmn1
45269	"Ã²"
14533	zzendread
3736	org.apache.lucene.util.CharacterUtils.CharacterBuffer;
30239	(term.compareTo(enumerator.term())
50912	compression),
50503	<code>d</code>.
28245	inform
46597	"â"
50505	<code>d</code>,
12452	ufb81
61309	"\160\0\1\u03a1\4\u062e\2\0\1\u062e";
49880	upperterm
36936	HashMap<Integer,Integer>();
11651	"\12\u0562\14\0\1\u0325\161\0\4\u0563\2\0\1\u0563\15\0"+
176	assertTermDocsCount("first
48712	"1.9")
55522	fi.fieldInfo("f2").indexOptions);
3241	NoScoreCachingCollector(other,
66676	testreproducemessage
1510	SegmentReader
19623	scoreCache
55286	tpv1.getTermPositions(j);
46602	"â"
9649	"\3\u3eeb\3\u3f8e\3\u4031\3\u40d4\3\u4177\3\u421a\3\u42bd\3\u4360"+
28821	multilevelskiplistwriter
9911	"\20\0\2\33\25\0\2\33\6\0\3\33\15\0\1\33"+
49415	length++;
20168	(c.isProhibited())
49853	getfieldquerymethod
31104	testindexandmerge
39577	lastTi.freqPointer
62667	delta;
59187	"\3\ua385\3\ua428\3\ua4cb\3\ua56e\3\ua611\3\ua6b4\3\ua757\3\ua7fa"+
62765	(subHits.scoreDocs
55583	nrtReader
31631	assertcompressedfields29
46606	"â"
66587	maxtermprefix
46474	U+24EF:
44963	,"L",
41528	iter=0;iter<2*NUM_IDS;iter++)
8219	our
57367	(idx>=0
904	out
17376	for(ScoreDoc
22115	parse(chars,
44224	U+0107:
15610	or,
33985	pp1,
5376	jjAddStates(int
38332	xfffffffffffffffl
4217	testLeftOpenRange_8bit()
64464	getInclude()
25338	opq
29085	opt
33857	groups
30084	u276e
31249	ops
21401	setUp_2();
2448	BooleanClause.Occur.MUST);
24750	indexStore.close();
28677	positionIncrementAttribute
44198	U+0106:
52095	oom
33839	pp2)
12520	u2770
7196	compare
63208	cachedFieldSourceHashCode();
30906	7.888485f,
29098	//System.out.println("No
25493	Integer>(new
22891	payloadToMatch.size()){
31614	segCount);
22919	payloadtomatch
5362	error_column++;
29081	tvd.readVInt();
3483	RuntimeException(ie);
25473	(estimateRam)
13322	u275c
14678	FieldCache.Parser
44226	U+0109:
54644	m.booleanValue()
36323	writer.posWrite);
33953	group,
37569	one")
61441	"\31\u02e2\1\u0688\1\u034e\12\u02e2\175\0\1\351\7\232\1\u0689"+
34101	group)
12921	u2766
30103	ord
413	org
66525	tokenTextLen);
1213	missing,
50581	oldInfos
59221	"\1\25\11\0\2\25\6\0\2\25\13\0\1\26\2\25"+
22165	(minTargetSize
63853	1+i;
55515	f1",
37950	IdentityWeakReference(Object
65275	simplify
33829	pp2;
17341	one",
6491	printwriter
63100	charTerm.setLength(TOKEN_LEN);
27671	"\u0061\u2060\u0061\u003A",
66502	tokenTextLen))
48094	os,
44200	U+0108:
23601	applied:
31847	11:13:14
61803	u2752
54873	applied.
63044	"\"+\"",
4108	l<noDocs;
36160	VERSION_START
50069	os)
65885	createRandomTerms(100000,25,2,dir);
5956	elements.length="
27925	"\u0031\u003A\u0031\u003A",
50984	doWait)
50066	os;
29095	readTermVector(field,
66783	Arrays.hashCode(fields);
33658	optSegCount);
35248	known.
3768	old
63869	"\ud801\udc44test"
60618	"\12\232\175\0\1\351\32\232\1\352\6\232\1\u03f6\3\232"+
60195	"\1\142\7\266\1\u0262\2\266\1\0\3\137\1\0\2\137"+
67503	threads[i].error.getMessage();
1406	tokenization
46185	U+24EA:
6852	on,
36100	WritableFST
8799	on.
29552	"\1\0\u01ca\132\4\0\14\132\16\0\5\132\7\0\1\132\1\0\1\132"+
52297	processors.get(reader.directory());
10288	"\1\65\1\66\1\0\1\25\2\0\1\25\1\u013d\15\36"+
32932	on)
37835	org.apache.lucene.util.AttributeSource.AttributeFactory}.
43421	lastint
51283	(dsFilesCopied.contains(newFileName))
28968	FORMAT_VERSION2
3190	List<SegStart>
55227	i<len1;
43929	U+0102:
60416	"\1\137\4\0\2\137\150\0\1\u0101\32\266\1\142\11\266"+
5215	0L);
18203	deletesmode
36257	on:
38876	reader.addReaderClosedListener(listener);
50251	once"
43484	testspannearversusphrase
4954	38);
50732	IndexWriterConfig#getMaxBufferedDeleteTerms()}
49527	getBooleanQuery(clauses);}
15187	//Hmmm,
2343	once,
14810	<code>o</code>
32254	l2.obtain());
19884	once.
37338	embed
6506	org.apache.lucene.document.NumericField.DataType;
44007	U+0101:
59005	byte[sliceLength];
21604	company
57391	pentium
54991	getandincrementgeneration
1343	arraylist
62723	FieldComp...
43049	once;
51450	management
53605	(weight,
67224	Socket
53764	map.containsKey(text,
23183	testNormalization10()
30350	tpc.rollbackCalled);
13	one
59946	"\1\141\5\36\1\u0192\24\36\1\142\12\143\1\66\1\137"+
30672	"\1\53\1\0\1\53\2\0\2\53\1\0\3\53\1\0"+
36043	q2)
49137	op)
18366	q2,
65997	Float.valueOf(5));
44011	U+0105:
1234	StringReader("crash
51793	getBufferedDeleteTermsSize()
49139	op;
59311	"\4\0\1\63\2\0\1\64\41\0\2\25\1\65\1\0"+
56284	*(ideal
57736	endDiskUsage
3473	segString(dir));
53038	((utf8[upto]&0x3f)<<6)
40465	<code>TokenStream</code>/{@link
10316	"\1\u0149\5\36\1\141\12\142\1\u013e\1\136\1\143\1\136"+
16471	testpersistentsnapshotdeletionpolicy
66316	(perThread.termsHash.trackAllocations)
17855	pad(minId);
27502	"\u005F\u002C",
33544	8,10
41493	testPrimaryKeys()
37165	version_packed
66309	initPostingsArray()
52279	freqPointer;
42443	PayloadData
43932	U+0104:
18362	q1,
29089	FORMAT_VERSION)
44009	U+0103:
33608	"'");
49067	(ParseException
40388	re-index.
36004	BitSet(5);
9754	"\1\26\1\115\3\0\1\114\1\0\1\114\2\0\1\25"+
67673	assertreaderopen
30083	u2707
52920	UNI_REPLACEMENT_CHAR
27004	"\u0001\u0061\u2060",
30402	testwrapper
52274	freqPointer,
35564	pop(A[i]);
48833	testFields[0]);
28433	LUCENE-3590:
41634	FST.FIXED_ARRAY_NUM_ARCS_SHALLOW)
20967	external
41820	matches.size()).clear();
1871	(field
34400	managing
30076	u2436
40899	pair.input;
65297	(numArcs
12916	u2437
55135	r2r1
12857	ufe03
27137	"\u000B\u0308\u0027",
47963	36};
875	count);
5327	Token.
28412	LUCENE-3590,
42857	Token)
68030	leftPos
12515	u2441
15310	int/long
16699	SegmentReader,
8101	this.chunkSizeMask
52040	descriptors
32195	testRAMDirectoryNoLocking()
67571	SegmentReader)
56223	m.getDeclaringClass();
20060	BooleanClause[clauses.size()]);
24967	bottomvalue
779	count++
56586	out-of-order:
7770	(Iterator<Fieldable>
24835	NUM_DOCS="
13317	u242d
19812	assertEquals("All
56531	reqScorer.nextDoc();
63103	1000000);
33472	NormalizeCharMap
41886	bytesequenceoutputs
58123	discards
54799	present;
65488	List<Collection<String>>
52161	beware
16043	threads[0]
23309	docfrequencymap
14982	A"~N+1
53100	Supplementary
57528	termInfo
22613	TermRangeFilter}.
22607	TermRangeFilter},
26753	discouraged
43790	ASCIIFoldingFilter(stream);
25812	clause.extractTerms(terms);
34463	SegmentReaders
41271	storeOrd)
63538	wordShift
8664	getattributeimplsiterator
6151	"#flags",
62860	tokenType
12114	u244b
22733	FieldCache#getLongs(IndexReader,String)}.
66094	assertEquals("f1:bla~0.5
6567	(long/double)
39813	present,
40984	pair.input,
19377	present.
18515	BaseTokenStreamTestCase.assertAnalyzesTo(a,
40890	pair.input)
16052	threads[2]
28921	java.lang.String,
65016	graph,
57921	java.lang.String)
65539	client
17545	parallel.search(query,
20023	appropriate.
20220	Prints
56187	TestTermEnum(TermEnum
39299	unmodifiablelist
43396	lastBytePos);
2668	i<N_DOCS;
35901	equal()",
49804	exptokseq[i]
1790	indexStream
16431	@Test(expected=IllegalArgumentException.class)
11845	impossible:
51617	message("registerMerge
16047	threads[1]
40455	Token}
48909	//good
48267	prevSpans.isPayloadAvailable())
21001	startDir.getRecomputedActualSizeInBytes();
26100	OutOfOrderOneComparatorNonScoringCollector(queue,
60921	"\2\u04cb\1\u04cc\1\u04cb\1\u04cc\1\u047e\13\0\1\u02e1\226\0"+
7006	NumericUtils.splitLongRange(new
10240	"\4\0\2\136\150\0\1\376\3\264\1\u0103\13\264\1\u0103"+
5139	(jjnewStateCnt
2182	NoMergePolicy#COMPOUND_FILES}
43926	U+0100:
56552	reqScorer.nextDoc())
67230	Locked
52644	ctors.length);
4299	System.out.println("Average
21411	assertTrue(isCSIndexInputOpen(two));
798	testExceptionJustBeforeFlush()
49491	jj_consume_token(PLUS);
55361	nextInt(range));
2128	count()
32092	ByteBlockPool(Allocator
30132	TermInfosReader(Directory
33291	meets
64128	is.readVInt()
30502	Tokens
14547	lao
60	law
7595	'\'':
21939	better,
1222	content",
52690	numpayloadsseen
16056	threads[3]
39462	better.
3097	cachedScores.add(curScores);
27171	"\u3031\u000B",
57046	<th>1%
16652	better'
7542	Error
52272	ti.proxPointer;
59703	"\7\266\1\u0107\13\266\1\142\12\266\1\0\3\137\1\0"+
60208	"\4\u026d\2\0\1\u026d\15\0\1\u026d\6\0\12\u026d\176\0"+
16072	Writer:
29367	limit-upto);
20882	defaultanalyzer
5622	SmallFloat.floatToByte52(f);
30077	u249d
41037	"common"
54461	NormsWriterPerThread
43559	count2)
6005	content);
45421	,"P",
22327	compare(int
28902	org.apache.lucene.search.function.FieldCacheSource
38350	x7fffffffffffecfl
23721	periodically
29021	getTvdStream()
40327	getSimilarity().tf(i)
57687	values[index];
5681	<code>true</code>.
34673	payloadscore
7930	<code>true</code>,
23639	docsInSegment.set(0);
36614	(arc.flag(BIT_ARC_HAS_FINAL_OUTPUT))
15811	Already
25415	numerous
7284	howMany)
18190	.append(')')
38428	ReaderUtil.getMergedFieldInfos(reader);
39489	UnicodeUtil.UTF8Result();
63889	TestingCharTokenizer
7353	howMany.
7329	howMany,
3488	Wakeup
20706	(offset
31906	DEFAULT_SHORT_PARSER
18201	((query
27390	"\u0027\u0027",
7504	UnicodeUtil.UTF8Result(),
10512	"\6\230\1\u01a4\10\230\1\u016a\12\230\1\347\12\230\175\0"+
40879	HashSet<Long>();
8181	AIOOBE:
66220	Random(random.nextLong()),
7863	virtual
41076	(prune2
1165	segments
41378	/x/tmp/allTerms3.txt
54271	random.nextInt(5),
63838	random.nextInt(1024);
52548	omitted.
7202	SpanFilter
32686	String(encoded1,
22018	formatpostingstermsconsumer
57871	otherByteBuf;
35498	fours=0;
33601	random.nextInt(5);
7370	howMany;
65293	addArc(int
40855	(prune1
16065	!indexerThread.failed);
56879	"\1\12\1\0\1\12\1\0\4\12\1\0\3\12\1\0\7\12\u0ecb\0"+
49399	unescaped
18266	"d2",
14831	field.hashCode()^0xff5685dd;
52391	multiplecommits
65348	transition_count
53099	LEAD_SURROGATE_MIN_VALUE
51867	master
33312	files.iterator();
58931	this.isIndexed
43358	SortedVIntList(DocIdSetIterator
36886	queue="
59971	"\1\u019c\15\0\1\u019c\6\0\12\u019f\1\u019d\13\0\1\u0126"+
48028	follows
5942	(value
1779	segment;
5439	x100002600l
68104	write_masks
30847	buffersize
58538	testCopyJDKSet()
6529	ranges
7797	NUM_DOCS/2
15857	segment:
33230	assertionerror
66755	<i>might</i>
59737	"\3\137\1\0\2\137\1\140\3\137\3\0\1\137\1\164"+
26399	getDecodedLength(inputArray,
30432	PorterStemFilter(tokenizer));
32688	String(encoded2,
53582	int[allTermsArray.length];
19303	r2d2
22465	reflectAsString(false);
17876	assertEquals("find
66737	<code>Infinity</code>
18715	Ø¯Ø§ÙØ´ÙØ§ÙÙÙ
44760	LONGA
40973	assertNull("expected
3417	segment.
11990	break;/*
298	segment,
58804	assertEquals(expected[i],
34776	DumbQueryParser("",
60168	"\4\0\2\137\150\0\1\u0101\1\266\1\u024d\30\266\1\142"+
15389	lazydir
15767	segment)
64021	LONGS
67130	checkTokens(TokenStream
65565	deleteCommits()
19076	"íë¯¼ì ì"
38256	range;
7794	NUM_DOCS-1
5342	input_stream.backup(curPos
31723	invoked.
6511	range.
26638	checknorms
42919	target).setPayload((payload
35195	getuniquetermcount
12456	ufe0d
1879	LONG:
62699	NumericField("int").setIntValue(intValue));
17568	together:
6869	range,
21076	testindexreaderondiskfull
8544	URLDetect
27357	"\u002C\u0308\u0061\u2060",
6786	boxes
12113	u23a8
4408	j++)
59760	"\1\145\1\140\1\u0143\1\u0144\1\u0145\3\0\1\137\4\0"+
43558	count1,
40630	List<FSTTester.InputOutput<Object>>
21208	_TestUtil.getTempDir("testIndex");
38298	0x7fffec78,0x8000251c
54529	ArrayUtil.parseInt("foo".toCharArray());
24270	ascendTesters
7655	follow.
18747	ÎºÎ¬ÏÎ¹
36657	follow)
36590	follow,
67490	refreshed.close();
20151	1.0f
23186	query=new
27163	"\u000B\u0308\u0031\u002E\u2060",
11329	"\1\u047b\33\0\12\u047c\175\0\1\u047b\33\0\1\u043b\1\u047d"+
49769	jj_lasttokens[i];
21459	ba2);
22219	"size
51382	(adds
49686	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x6,0x0,0x0,0x0,0x0,};
51718	merge.readerClones
38650	doc.add(newField("unstored","test1",
6177	fields;
59949	"\1\66\2\0\1\25\1\0\32\25\24\0\1\u0193\163\0"+
11940	fields:
55498	rule!",2,tfv1.getTerms().length);
21213	dir.createOutput(name);
24414	docValues;
58973	two.readVInt();
5540	1.3)
6171	fields.
64806	loc
43073	decRef(reference);
23858	Calls
33882	(PhrasePositions
14549	khmer
36423	readLabel(DataInput
16643	log
1950	fields)
4089	fields,
50885	UTF16
43434	lot
52796	magnetic
3310	low
57533	dataOutput.writeString(term.text());
62874	(replaceInvalidAcronym)
56310	hi);
42011	testshortestpaths
40430	onOrAfter(Version
28765	MultiLevelSkipListWriter(int
59548	"\2\0\1\25\2\0\4\25\1\0\1\67\1\25\1\0"+
30957	correctness,
14535	zzateof
64953	on-the-fly
52903	advertising
53722	1.4.
40006	acquireWriteLock()
19049	decoding
26665	designed
31911	Integer#toString(int)}
18658	testBengali()
56063	.add(newField("all",
6259	MultiPhraseQuery)
29014	"numTotalDocs="
2492	sumOfSquaredWeights)
7697	errorline
35064	RAMOutputStream(RAMFile
38394	commitUserData
930	lmp
56288	lo,
26383	CODING_CASES.length)
18480	1234");
7803	testlazybug
6780	1.5,
39958	lo)
62579	summing
36902	singular
57510	1.5)
17623	testNullValue()
65628	deleteFile(oldDeletable.get(i));
56289	lo;
54382	maxtokenlength
50502	IndexWriterConfig#getTermIndexInterval()}
63200	getCachedFieldValues(FieldCache
15347	dochelper
54030	suppress
24548	full));
54724	1.6.
46408	U+24FE:
18348	others:
61796	u22dd
3293	//System.out.println("CC:
40247	deletionpolicy
52939	int[10];
66597	"aabaa"
18274	"d3",
8962	org.apache.lucene.store.RAMFile;
20954	#setTermBuffer(char[],
31461	others,
18967	numCharsRead);
674	intentionally
25859	others.
36605	arc.posArcsStart
64468	buffer.append("spanNot(");
11550	"\1\347\12\230\175\0\1\346\1\u0520\31\230\1\347\12\230"+
31079	(tis.next())
13315	u22e7
19888	readers[j];
46387	U+24FD:
20624	fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);
19465	UTF-8
41385	dirOut
11028	"\12\u0390\1\u0391\13\0\1\u02cf\160\0\1\u0332\4\u0390\2\0"+
60702	"\175\0\1\u034d\5\u0428\1\u0432\1\u02e2\1\u0428\1\u0433\7\u0428"+
60483	"\4\232\1\u0365\25\232\1\352\12\232\175\0\1\351\32\232"+
26723	<code>FieldsReader</code>)
32791	originalbuf1
40464	<li>Instantiation
17338	doc.add(newField("text",
32795	originalbuf2
60144	"\15\0\1\u0227\6\0\12\u022a\1\u0228\13\0\1\u0126\160\0"+
48318	shrinktoaftershortestmatch
61748	ufe92
3546	MergeException(Throwable
27801	"\u0061\u0027\u2060\u0308\u000B",
56087	QueryUtils.checkUnequal(csrq("data",
12513	u22fb
33673	TestIndexWriter.addDocWithIndex(writer,
53121	w++;
66330	compactPostings();
41840	(Map.Entry<String,TwoLongs>
29341	bufferOffset;
53464	Dummy-Searcher.
55342	nTokens
9987	"\1\0\1\50\1\0\1\70\2\0\1\217\3\0\1\53"+
11379	"\15\0\1\u04a5\6\0\12\u04a6\1\u0469\13\0\1\u0325\160\0"+
46187	U+24FF:
49655	ls)
58829	testEmbeddedFFFF()
52542	MultiPhraseQuery}
57537	dataOutput.writeVLong(termInfo.freqPointer);
24503	testLocaleSort()
48714	"1.10")
36909	flags....
34796	brown\"",
13259	ufe9c
30575	"\2\0\1\25\2\0\1\26\11\0\3\25\5\0\1\25"+
65358	docompile
1233	MockTokenizer(new
552	Random(random.nextLong());
31326	(d.getField("content3")
63554	shift3()
12914	u22f1
58989	io.writeBytes(bytes,
22789	.append((upperVal
64081	testRawIndexInputRead()
51761	CFS");
61747	ufdef
14537	alphanumeric
2874	threadArray[num]
64407	Deflater();
13258	ufdf9
40048	Sync
14989	testRepetitiveIncreasingSloppiness3()
51333	<p>Commits
49596	jj_la1[13]
64974	frontier;
56505	top.isPayloadAvailable();
29429	focus
46316	U+24FA:
57041	<td>3.96</td>
30179	resources.termEnum;
54181	test2bpostings
11660	"\6\0\12\u0567\1\u0554\174\0\1\u0386\4\u0567\2\0\1\u0567"+
42332	RamDirectory
54941	listener.waiting(targetGen);
9213	queries[upto]
58173	registerSnapshotInfo(e.getKey(),
14664	FieldCache.STRING_INDEX.
65103	distinguished
65042	(doShareSuffix)
16981	Field,
58473	"\ud801\udc1c\ud801\udc1cCDE",
42578	Field.
44710	,"(h)",
49598	jj_la1[14]
319	count",
47912	TwoPhaseCommitWrapper(TwoPhaseCommit
18645	"ÜÜÜ¢Ü£Ü©Ü ÜÜ¦ÜÜÜ",
8366	port
39898	reader.decRef();
39623	lastindexpointer
15865	fileName.length()
66453	(numPostingInt
63725	x854321
42210	(TypeAttributeImpl)
53219	surrogate_offset
18526	Õ¯Õ¸Õ²Õ´Õ«Ö
25753	readerfields
51539	readerPool.drop(merge.info);
2775	exceptionDoc>lastCollected);
49600	jj_la1[15]
66223	Can't
30917	0.28146625f
33632	checkanalysisconsistency
39404	185);
46363	U+24FC:
20370	Field}
39009	n);
55047	mergeFactor="
63026	RANGEEX_GOOP
5282	lex
7209	post
3130	cache
6300	Fields
64125	"ene",
56250	let
1896	len
64978	frontier,
47304	leg
17670	#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}
17416	sb.toString();
49624	jj_la1[16]
23647	sb.toString(),
65976	assertEquals("(b:\"aa
57656	offsets[size])
46339	U+24FB:
32380	isalive
60672	"\1\u0422\15\0\1\u0422\6\0\12\u0422\1\u03ac\13\0\1\u02e1"+
41380	storeOrds
17407	sb.append('{');
39440	this.input.seek(pos);
9041	pos1
65805	maxClauses)
9045	pos2
4932	pos,
8043	enough.
11278	"\1\346\17\230\1\u0172\12\230\1\347\12\230\175\0\1\346"+
65834	maxClauses,
17738	enough,
8178	pos)
2740	enough!
68056	testletterascii
30710	"\1\103\56\0\1\103\3\0\1\103\2\0\1\103\3\0"+
67934	pos:
21622	pattern.length());
4943	pos;
43086	afterclose
902	flushing
53380	readLength
39998	MultiTermPositions(this,
2870	threadArray.length;
37332	stopSet.addAll(stopWords);
61272	"\1\u02e2\175\0\1\u034d\32\u02e2\1\u034e\5\u02e2\1\u048e\4\u02e2"+
55734	w2r1.maxDoc());
41172	term.offset,
49567	jj_la1[10]
20223	1.0)
60381	"\1\352\12\232\175\0\1\351\21\232\1\u030e\10\232\1\352"+
59552	"\1\67\5\0\1\67\2\0\3\67\7\0\1\67\1\0"+
29392	pool
61798	u2423
24813	docValues)
33543	ll,
49568	jj_la1[11]
6480	trace.contains("java.io.IOException:
7579	StringBuffer();
65947	two^2");
51554	merge.setException(t);
21776	1.0.
23178	1.0,
11826	enough?
55426	lim
29325	enough;
53341	poor
28390	Arrays.sort(utf8);
49640	1.0;
18443	disjunctionmaxquery
8027	GiBytes
34132	"+title);
41965	lib
38981	assertEquals(val,
49593	jj_la1[12]
18623	"Ø¥Ø·ÙØ§ÙÙ",
43611	result.getDocIdSet()
45357	"â±º"
36588	(<code>arc</code>).
6439	TestException
43869	'A';
2198	NoMergePolicy
25985	bottom.doc))
48611	posIncrAttribute
38215	random.nextInt(64)
32762	hex.length()
54160	10))
17626	CloseableThreadLocal<Object>
13319	u2573
29822	"\11\0\1\46\2\0\1\123\16\0\1\124\2\0\1\125"+
55249	assert(f2.isBinary());
25841	spanNearQuery.setBoost(getBoost());
37498	info",
37109	NodeAndInCount(int
5013	((0x280200000000L
54015	readBytes
52952	byte[ArrayUtil.oversize(maxLen,
53161	0xDC00);
65137	nextFinalOutput,
42142	aInt
53212	xfffd
41648	FST.Arc<Object>
18233	effects
2632	MULTI_THREAD_SLACK
29633	"\31\0\11\144\4\133\2\133\1\0\5\135\2\0\3\144\1\132\1\132"+
53230	xffff
2302	numSeen++;
25256	{"*h*",
12517	u2587
19468	UTF_8
22445	Clears
9271	org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer;
53856	'A',
50717	mb)
24156	getFullIndex()
46718	"â¼"
15148	FieldSelectorResult.LATENT;
52041	subsamples
55823	r.termDocs(new
7362	ones,
24789	missingVal)
36198	nextFinalOutput;
50043	totalSize
30079	u256b
30335	failOnPrepare
23260	i+10,
28734	mac
36791	ReverseBytesReader
51954	#waitForMerges()}
60869	"\12\232\175\0\1\351\32\232\1\352\2\232\1\u04a8\7\232"+
33227	mae
27549	"\u00AD\u0308\u3031",
2228	map
5484	jjtotoken
30851	mal
22853	getdoubles
31739	&quot;monotonicity&quot;
2043	subsample?
42	may
1664	max
10344	"\1\u0103\11\264\1\141\12\264\1\0\3\136\1\0\2\136"+
33285	BitSet(100);
61800	u2569
52239	midstartcommitsuccess
50147	#rollback()}
41329	(dirOut
10583	"\1\u01dd\33\0\12\u019d\175\0\1\u01dd\33\0\12\u01de\175\0"+
54339	org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer}
26998	"\u0001\u0300",
34602	payloadsSeen
35448	BitUtil
62467	countingSumScorer
54284	fail("unexpected
41650	s.verifyStateAndBelow(fst,
51074	10%.
35626	~B[i+3]);
48262	lastStart
33468	resourcedesc
48212	subSpansByDoc[0]
36706	Absolute
38117	Float.compare(vals[i],
5404	wildcardquery
39493	TermInfosWriter(directory,
65089	frontier[idx-1];
35625	~B[i+3]))
36318	finished");
68110	HitQueue(10,
49046	getFieldQueryMethod)
17797	rewriteMethod.hashCode();
49630	jj_la1[19]
63464	0x875321,
58377	"into",
38281	neededBounds.next().intValue(),
37730	PRIORITY_FIELD,
32487	SearcherThread(Object
18009	med
42904	prototype.payload;
35384	Describes
51644	details.put("mergeMaxNumSegments",
49628	jj_la1[18]
12116	u2591
50656	mergePolicy.setMaxMergeDocs
26220	chosen
38921	with_positions
51076	warranted.</p>
52243	met
12918	u257d
48098	overwritten.
59008	slice.length);
49459	&lt;input&gt;</code>
7807	men
19344	
27114	"\n\u0031\u0027",
56453	addClause(SpanQuery
49627	jj_la1[17]
31553	"trieInt");
36235	(flag(BIT_LAST_ARC))
23040	StandardAnalyzer(TEST_VERSION_CURRENT));
1494	10);
28234	o);
64191	short[valueCount];
1806	Writes
24694	(v[j]);
27194	"\u3031\u0308\u005F"
40844	Writer
39730	DirectoryReader(IndexWriter
29493	testNonStringProperties()
6525	0.10f,
6611	numerical
50507	mfl
37363	IllegalArgumentException("codec
40863	10),
54745	nobody
19490	usage:<br/>
59117	"\2\u3f98\2\u403b\2\u40de\2\u4181\2\u4224\2\u42c7\2\u436a\2\u440d"+
58799	utf8.result[i]);
58178	happens,
56805	iscommit
49536	jj_consume_token(STAR);
53913	.getOffset(),
21373	cw.close();
10624	"\2\136\150\0\1\376\7\264\1\u01fe\5\264\1\u01ff\14\264"+
57106	nWords)
36248	BytesWriter
67126	offsetAtt.setOffset(0,0);
65667	decRef(String
66178	bigSearcher.search(query,
21252	test.readBytes(testBuffer,
32698	IndexableBinaryStringTools.encode(ByteBuffer.wrap(binary));
7103	portals
43939	CARON
57761	"aborted
7484	org.apache.lucene.util.UnicodeUtil;
15375	getbinaryvalue
35328	stopWordsSet.add("test");
21719	//openDelFileCount="
41740	r[2].output.longValue());
56673	tolerance:
6873	newDoubleRange(final
52760	tolerance;
53779	EMPTY_SET;
28973	FORMAT_SIZE
42055	comparator.compare(hitA.slot,
64234	experiments,
19959	map.remove(o)
1011	addDoc(IndexWriter
53274	UpToTwoPositiveIntOutputs(false);
61254	"\1\u05f8\1\u05f7\1\u05f8\1\u05b9\13\0\1\u033c\226\0\1\u053b"+
58257	startsWith(BytesRef
42111	EMPTY_INTS;
68019	testLetterUnicodeHuge()
9944	"\3\0\2\136\150\0\1\135\32\264\1\141\12\264\1\0"+
59021	MMapDirectory(path);
15643	Cases:
62137	nested1
27843	"\u0061\u0027\u2060\u0308\u0031\u002E\u2060",
62142	nested2
12856	ufd60
11471	"\12\230\175\0\1\346\3\230\1\u04e8\26\230\1\347\12\230"+
53880	newCharacterBuffer.getOffset());
8805	super(true);
24030	"F"},//E,x
48016	JDBC;
39413	(maxCounter
62620	q3.add(new
60260	"\7\232\1\352\2\232\1\u02a2\7\232\175\0\1\351\6\232"+
26020	comparators[i].setBottom(bottom.slot);
61746	ufd4c
17940	.add(newField("body",
21731	open-but-deleted
59814	"\3\0\1\137\4\0\2\137\150\0\1\u0153\15\266\1\312"+
18252	"d1",
61009	"\1\u051e\1\u051f\1\u02e2\1\u0520\1\u0521\1\u02e2\243\0\1\u043f"+
65180	n="
40185	TermDocs[r.length];
49343	minimumSimilarity,
13257	ufd56
37381	CorruptIndexException("codec
56631	numDelete++;
24492	parallelSearcher=new
65872	System.out.println("milliseconds="+(end-start));
41577	NUM_TERMS)
14708	FieldCache}.
21134	FieldCache},
52888	WHETHER
51736	happens:
46584	"âµ"
43402	BIT_SHIFT)
64218	document.</li>
33166	assertEquals(src2.hashCode(),
34185	repeatingpps
36114	arcs.
49659	xsp;
16563	actually
31012	effect,
43035	effect.
61491	"\30\u02e2\1\u034e\12\u02e2\26\0";
41330	arcs;
36173	arcs:
45268	,"O",
49569	termImage=discardEscapeChar(term.image);
51174	noDupDirs(Directory...
30148	dir.fileLength(indexFileName),
16765	Delete
56674	dir.fileModified(fileName);
35581	intersection.
16539	better),
56713	Simplistic
28542	suite.
42799	Token(String
61799	u24c6
58380	"not",
66408	RawPostingList
35221	lastSkipProxPointer
56200	TestTermPositions.
46821	assertTrue(stream.incrementToken());
43386	BIT_SHIFT;
55184	("",
20277	getoccur
15599	CompoundFileReader(dir,
57374	(OpenBitSet)o;
42603	10",
52790	fitness
36444	NON_FINAL_END_NODE;
27023	"\u0001\u0031\u002C",
54235	testCompact()
24792	collected",
23761	ones:
50342	Forcefully
11526	"\15\0\1\u050e\6\0\12\u050e\1\u050f\175\0\4\u0510\2\0"+
62173	qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
6195	body:term1)
28200	ones.
54624	ComplexExplanation()
6783	portal,
25290	assertEquals(PrefixQuery.class,
35326	stopWordsSet
63141	status.segmentInfos.get(0).termIndexStatus.termCount;
21739	s.getIndexReader().close();
9480	transition
55392	deleteByQuery()
16192	docFields[i],
39201	queryExpl.addDetail(queryNormExpl);
2921	bits.set(
4390	testFloatRange_2bit()
59618	"\1\66\1\67\1\0\1\25\2\0\1\25\1\141\1\355"+
6471	System.out.println("TestIOUtils.testSuppressedExceptions:
7433	April
20295	MockScorer
55124	docs:");
53404	file.getFD().valid();
54154	dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);
54645	super.isMatch());
24116	("tracer",
6197	body:term2)
67321	mr,
42440	length));
49276	mpq
51522	commitMergedDeletes(merge,
2058	arc.nextFinalOutput.hashCode();
37660	NUM_DOCS);
65697	initDone;
19113	bufferedreader
66794	(ByteFieldSource)o;
35971	testinclusive
44503	"â±¸"
20466	assertEquals(Arrays.asList(expectedOrder),
64042	assertEquals(128,is.readVInt());
26724	org.apache.lucene.document.Field}
55629	r1.document(75).getField("id").stringValue();
15650	(delGen
1627	mod
30075	u23cf
33226	moo
52470	numerically
58281	utf8SortedAsUnicodeSortOrder.compare(this,
15155	LoadFirstFieldSelector();
18953	"<ALPHANUM>",
40878	validOutputs
3521	simply
43716	mot
18256	.add(newField("hed",
60686	"\1\u042b\5\u0428\6\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u042c"+
36542	srcPos="
39100	singletonmap
52129	getmergingsegments
19974	TypeAttribute#type()},
1006	simple
37902	get(Object
37543	q.toString());
24776	TopFieldCollector.create(sortMaxRev,
53645	maxdocs
50201	MAX_TERM_LENGTH
4023	iobuffer
19699	.skipTo
91	org.apache.lucene.document.Field;
36814	ArrayList<ArcAndState<T>>();
21512	testAddExternalFile()
59334	"\2\0\2\77\1\100\1\0\1\26\2\0\1\25\1\152"+
19732	gen++;
42646	(fieldName.equals(FIELD))
8941	ctor),
42029	Entry(int
31314	reader.getTermFreqVectors(hits[i].doc);
3594	to-be-merged
15937	without_gen
33338	Label
20701	Payload(byte[]
32592	decoded.length));
661	(doFail.get()
52902	notice,
17811	mtq
64892	mtr
51899	LIMITED
35260	PayloadLength?,
34175	mtp
52059	getlogmergepolicy
22368	mergeSort(T[]
49115	setAllowLeadingWildcard(boolean
56507	((queue
326	testBasicDelete()
52900	SOFTWARE.
40882	Math.min(minLong,
12455	ufd6a
4708	parameters
7705	follow
67676	msr
32403	random.nextInt(7);
16146	((doc
25627	all.add(seed);
32175	RAMDirectory",
52447	NumericUtils.doubleToSortableLong(value);
25301	transitive
50565	segments_N.
21552	msg
39753	#doOpenIfChanged()}
40145	readers[i];
5450	xffffffffefffffffl
5242	"RangeEx",
53668	pages.
35519	b)|(
4743	MAX_BUF_DOCS
36214	nextFinalOutput
18056	NullPointerException("Query
4874	mergescheduler
19280	mo
66870	Collections.shuffle(terms,
52919	0xDFFF;
50501	config.setTermIndexInterval(interval);
48654	singletoken
18160	parameter:
4876	setmaxbuffereddeleteterms
10685	"\150\0\1\376\1\264\1\u0245\30\264\1\141\12\264\1\0"+
5140	startsAt)))
57217	-1L>>>64
21850	parameter.
52508	pr.add(ir1);
38132	INFO:
54240	bits.set(key);
8242	this.clones.clear();
34245	getDefaultWriteLockTimeout()
30837	CharacterBuffer(char[]
32815	testrandombinaryroundtripnio
53390	"https://issues.apache.org/jira/browse/LUCENE-1566;
50008	(name
49153	scarcity
48279	ppStart
52963	0xDFFF)
40486	AttributeSource#restoreState}
22241	targetSize)
21661	Examine
38469	assertTrue(indexedFieldNames.contains("text"));
22200	targetSize,
31678	oldindxedir
32482	writer2.prepareCommit();
56472	spans2.doc())
53556	aggregate
2427	payload
63113	test2BTerms()
30078	u2504
52908	holder.
16665	TestIndexReaderClone
52432	<code>precisionStep</code>.
11320	"\2\0\1\u0479\15\0\1\u0479\6\0\12\u0479\1\u0435\13\0"+
13256	ufcb3
41749	PairOutputs<Long,Long>(
61318	"\12\u0634\1\u05c0\175\0\4\u0635\2\0\1\u0635\15\0\1\u0635"+
19414	(negate
12855	ufcbd
3322	experimental
41861	BytesRef(bytes);
36736	(!flag(flags,
54380	stopwordanalyzerbase
50139	quietly
23690	mgr
28476	TestBinaryDocument
55659	_TestUtil.checkIndex(mainDir);
37997	vals=new
50934	delTerm);
41233	BytesRefFSTEnum
12454	ufcc7
31072	info);
58993	BytesRef(bytes),
56139	actual[i].doc);
57072	this.numBits
57271	BitUtil.pop_xor(a.bits,
20287	needparens
30907	8.723962f,
60994	"\13\0\1\u02e1\160\0\1\u0349\4\u0502\2\0\1\u0502\15\0"+
58990	actual[]
16723	assertFalse(deleteWorked(1,
32985	to.lastPositions,
53192	holders
6317	(!(q
14816	(!(o
23434	doTestOperationsOnDiskFull(false);
5559	min
6241	Float
33006	char_block_mask
23948	mis
37447	newField("repeated",
11042	"\1\u0399\1\u0395\1\u0399\1\u0331\13\0\1\u02cf\160\0\34\u0214"+
21688	mix
39894	writer.getReader(applyAllDeletes);
26843	char_block_size
38975	hmapKey
48223	spans2.doc();
22474	#toString()
9819	"\1\25\2\0\1\25\2\0\1\25\4\0\2\25\11\0"+
21555	mid
22197	newSize;
54332	clone.payload
19063	wordBreakTest.test(a);
59521	"\1\0\1\137\1\153\1\137\1\0\2\154\1\140\3\137"+
43354	builder.addInt(nextInt);
58587	testchararrayset
24097	Ã's
65049	frontier[idx]
20951	newSize,
64670	payloadBoost;
26197	newSize)
9957	"\3\136\3\0\1\136\4\0\2\136\2\0\1\173\1\0"+
10974	"\150\0\1\376\25\264\1\u0103\4\264\1\141\12\264\1\0"+
33836	pps,
8046	power
29749	"\1\32\1\0\2\32\1\0\2\32\3\0\2\32\1\0"+
33799	pps.
18991	bufferedReader.close();
65509	this.policy
37347	posinc
27957	"\u0031\u0027\u005F",
26813	numBuffer;
58256	other.bytes[j++])
6724	bit</em>
48272	prevSpans.start();
1173	fileNameOut
4153	filter
27833	"\u0061\u0027\u2060\u0308\u0061\u0027\u2060",
50628	mp;
49736	jj_scanpos.next;
40934	assertEquals(termsMap.get(scratch),
42846	clone(char[]
49633	jj_la1[20]
23102	indexStoreA.close();
1995	nodesEqual(Builder.UnCompiledNode<T>
41982	mnt
21050	Finally,
18459	printhits
1669	getonlysegmentreader
23671	testdeleteallslowly
60835	"\12\u02e2\175\0\1\u0486\16\u02e2\1\u048a\13\u02e2\1\u034e\12\u02e2"+
23306	testdocfreq
9762	"\14\0\1\61\4\0\1\133\2\0\1\134\41\0\1\25"+
28573	buffer[bufferPosition++];
64317	((docCountPercent
50624	mp)
40259	oldreaders
48154	o2)
26781	Float.floatToRawIntBits(getBoost())
65067	dedupHash.add(nodeIn);
40556	ir.ints[ir.offset+i];
23199	assertTrue(message,
3171	(cache
10554	"\1\215\42\0\1\76\1\26\6\0\1\76\3\0\1\135"+
49634	jj_la1[21]
62229	(nextUpto
27468	"\u0030\u0308\u0061\u0027",
60606	"\175\0\1\351\32\232\1\352\3\232\1\u03e8\6\232\175\0"+
30379	random.nextInt(numObjects);
48153	o1,
3715	apostrophe_type
37717	MAX_DOCS);
49639	jj_la1[22]
61745	ufca9
60276	"\1\142\11\266\1\u02b5\1\0\3\137\1\0\2\137\1\140"+
60878	"\1\u0317\1\266\1\0\3\137\1\0\2\137\1\140\3\137"+
14656	comparisons.
50955	analyzing
2636	N_THREADS
26714	low-level
10560	"\2\0\2\76\1\77\1\0\1\26\2\0\1\25\1\u0190"+
37796	MatchAllDocsQuery.this
38534	data1[i
44600	U+A77D:
64573	0...
32548	"original:
63951	TestAnalyzer2();
26017	compete
53987	origNorm.bytesRef;
46350	U+248E:
51396	event
53244	arrayoutofboundsexception
43217	Term(DocHelper.TEXT_FIELD_2_KEY,
51092	mergePolicy.findForcedMerges(segmentInfos,
8151	AlreadyClosedException("MMapIndexInput
27135	"\u000B\u0308\u002C",
61185	"\1\u05b5\15\0\1\u05b5\6\0\12\u05b5\1\u057e\175\0\4\u05b6"+
38409	i=0;i<7;i++)
44543	U+A77C:
33129	"("+tok.toString()+")",
48306	subclassing
45265	LOOP
5863	(2^31
14965	testIncreasingSloppinessWithHoles()
10087	"\1\77\1\0\1\25\2\0\1\25\3\0\1\25\177\0"+
29269	gettvdstream
4837	default_max_buffered_delete_terms
1942	position-start);
16448	testTooManySnapshotInfos()
46374	U+248F:
40386	components
40426	<b>re-test
44522	U+A77B:
23886	0.0)
66874	state.getMaxTermFrequency();
46072	,"Y",
59673	"\1\u0107\10\266\1\u0107\1\266\2\u0107\10\266\1\142\12\266"+
54829	org.apache.lucene.search.SearcherFactory;
36583	<code>follow</code>
17386	querywrapperfilter
41687	rootNode.addArc('b',
62462	coordinator.maxCoord
24127	("string",
10556	"\1\303\1\304\1\305\1\306\1\307\1\310\1\311\1\312"+
48537	SHOULD:
9008	Builder
64097	utf8Str
49045	getFieldQueryWithQuotedMethod,
13421	u6665
4046	onorafter
54513	elemSize=0;elemSize<10;elemSize++)
5212	switch(hiByte)
41381	storeDocFreqs
44326	U+A77A:
62302	Term("xXXX",
57207	(bits[wordNum]
41583	Collections.shuffle(allTermsList,
3687	typeAtt.type();
11176	"\1\346\12\230\1\u0403\17\230\1\347\12\230\175\0\1\346"+
55804	id.setValue("1");
24624	SHOULD,
33852	pp2.rptInd;
36398	automaton
24801	dataIntVal(int
33266	(ud.size()
41088	(cmo2.count
25378	HashSet<String>(Arrays.asList(new
18507	Tokenize
15598	dirToTest
9604	"\2\u59b3\2\u5a56\2\u5af9\2\u5b9c\2\u5c3f\2\u5ce2\2\u5d85\2\u5e28"+
15239	fileModified(String
64461	this.include
28213	convenience,
2659	multiOne",
26670	convenience.
25382	"Dogs",
25136	Wildcard
22758	0.0f
17275	compound_file_extension
63811	x876532
63810	x876531
14607	zzrowmapl
12619	u6679
38764	tp2.freq());
60371	"\175\0\1\351\24\232\1\u02fe\5\232\1\352\12\232\175\0"+
54401	getDescription()
46258	U+248A:
60166	"\150\0\1\u0101\1\266\1\u024b\30\266\1\142\12\266\1\0"+
23452	0.1;
64055	assertEquals("\uD834\uDD1E",is.readString());
11054	"\4\u03a3\2\0\1\u03a3\15\0\1\u03a3\6\0\12\u03a3\1\u02d8"+
67278	IndexWriter.commit()
29628	"\u032d\0\64\132\u0716\0\57\132\1\0\57\132\1\0\205\132\6\0\4\132"+
64444	inflater
21853	<code>String[]</code>
56585	timestamps
13212	ue0af
16208	qp.parse(queryText);
10064	"\1\25\1\66\1\0\1\25\2\0\1\25\3\0\1\25"+
63814	x876541
58372	"be",
12218	u6683
60740	"\2\0\1\u0444\15\0\1\u0444\6\0\12\u0444\1\u03d4\13\0"+
63817	x876543
63815	x876542
42196	att.getPositionIncrement());
46281	U+248B:
21027	0.0;
12410	ue0c3
50870	#setMaxFieldLength(int)}
11524	"\2\136\216\0\1\u04a0\175\0\4\u050d\2\0\1\u050d\15\0"+
17956	orders
44821	,"(i)",
13020	u666f
6530	0.03
32049	indicator
8680	Flush
37071	order)
49230	RuntimeException("Clause
8861	afterclasscheck
8539	order,
3434	totalDocCount;
1081	cause");
38849	assertFalse(r.isCurrent());
40419	order!
56661	(1000.0*(SECONDS/5.0)));
14676	order"
36904	~6%)
24112	even)
24105	even,
15552	src.isCompoundFile;
1210	testSimulatedCrashedWriter()
12811	ue0b9
2849	//400
3625	setexception
46304	U+248C:
17586	parallel(Random
30373	0.3;
65903	assertStopQueryEquals("(stop)",
30073	u2301
44602	U+A77E:
63808	x876521
12112	u2305
1187	(reader
53940	udc1c7891
17475	Term("f4",
24690	searcher.doc(result[i].doc);
57045	<td>1.58</td>
31866	order;
61701	ue0a5
9181	order:
44632	U+A77F:
46327	U+248D:
48898	DocNumAwareMapper();
59596	"\1\25\1\141\2\36\4\355\3\36\2\355\1\366\1\355"+
14636	LONG
14647	order.
32020	if(null
22848	shortvalue
20001	maxClauseCount);
66159	w.maxDoc();
57766	0.5;
19124	urlanalyzer
27654	"\u0061\u2060\u0308\u0030"
24350	System.out.println("doc
7848	javadoc
62643	testelements
49341	minimumSimilarity
9510	"\0\u7ccc\0\u7d6f\0\u7e12\0\u7eb5\0\u7f58\0\u7ffb\0\u809e\0\u8141"+
56671	while(gen
63836	border
33366	capability
55536	testlucene_1590
47996	index++)
38694	assertEquals("Different
20258	setmaxclausecount
59576	"\1\67\1\0\1\25\2\0\1\25\1\141\1\36\2\355"+
66450	postingsHashHalfSize)
36578	arc.flags
51086	maybeMerge()
25518	valId))
24689	i<n;
33984	compare(PhrasePositions
35684	ntz2(long
40054	rollbackCommit();
43024	#release};
63217	publicly
24595	tdc);
29045	tvd.seek(tvdPosition);
1172	fileNameIn
43395	newBytes,
39022	iter1.next();
12812	ue15c
28728	"/Computers/ZZZ"));
17675	numberOfTerms
43397	newBytes;
66851	reader.norms("foo");
22782	Double.POSITIVE_INFINITY;
12411	ue166
54179	index++;
5837	~0;
46398	U+2490:
22701	parser);
35909	Collator.getInstance(Locale.ENGLISH));
34371	getWriteLockTimeout()
34518	delpolicy
59957	"\150\0\1\u0101\3\266\1\u0107\26\266\1\142\12\266\1\0"+
17000	Never
35375	BitSet.nextSetBit()
16191	newField(FIELD,
19651	this.norms
38071	Double.POSITIVE_INFINITY,
67095	writer.merge(merge);
8972	PrefixCodedTerms(RAMFile
13313	u21a1
43992	FULLWIDTH
68093	"required
57403	getnumwords
36459	vInt
27151	"\u000B\u0308\u0061\u0027",
49430	('A'
40994	0.75
46417	U+2491:
57310	other.bits;
68072	rightpos
57030	<th></th>
16770	performDefaultTests(IndexReader
12511	u21b5
33621	test3to1
10432	"\1\243\1\244\1\245\1\246\1\247\1\250\1\251\1\252"+
27641	"\u0061\u2060\u0041",
35999	("field",
53948	originalNorm
45522	U+A782:
4655	every
10925	"\1\u0331\13\0\1\u02cf\226\0\1\u0266\10\0\1\u020c\163\0"+
29643	"\4\133\57\132\16\133\16\0\1\132\12\134\46\0\51\132\16\133\11\0"+
23353	canals"
9725	"\2\0\1\32\2\0\3\32\1\0\1\32\6\0\1\32"+
33988	i<rptGroups.length;
37561	"exist"));
58274	byte[other.length];
12912	u21ab
60893	"\2\137\1\140\3\137\3\0\1\137\4\0\2\137\216\0"+
29008	numTotalDocs
34215	Disabled
54223	uniqueCount
49360	query.add(clause);
34059	Actual
31241	assertTrue(compressed.isBinary());
53534	MultiSearcherCallableWithSort(DummyConcurrentLock.INSTANCE,
2772	assertTrue("greedy,
34410	2048.
6374	parseexception
45004	U+A781:
11878	zzLexicalState;
56573	lastTimestamp
52649	testMethodsOverridden()
52884	LOSS
37162	numbytesperarc
17910	1000).totalHits;
68015	2048;
12110	u21bf
40839	fst.save(out);
29617	"\3\132\12\134\44\132\122\0\3\133\1\0\25\133\4\132\1\133\4\132"+
53319	valid(Long
8254	security
11701	"\1\1\145\0\1\1\143\0\1\1\130\0\1\1\111\0"+
1077	(ioe.getCause()
37263	topcount
44960	U+A780:
51759	deleter.deleteFile(compoundFileName);
38233	"standard"
30070	u21cc
15701	IndexFileNameFilter.getFilter();
30097	threadResources
54037	rollbackdirty
21420	isCSIndexInputOpen(one));
27684	"\u0061\u2060\u0308\u0031"
64340	this.termCountLimit
63412	0x8621,
54951	getCurrentSearchingGen()
18021	unsignedindexreader
54794	component:
28901	needed.
25422	shifted
64970	~6%
26269	IndexableBinaryStringTools()
22973	needed)
26392	Decodes
42260	assertCopyIsEqual(AttributeImpl
29323	needed,
48609	fieldState.length;
53155	"b="
58780	termDesc(String
15636	(sizeInBytesNoStore
40532	feeds
46489	U+2497:
53449	discussion
64274	Type.SHORT)
62581	makecountingsumscorersomereq
52004	flushControl
48910	"f50");
55817	i=0;i<20;i++)
7748	FieldSelectorResult.LOAD;
32216	SimpleFSLockFactory("test");
40793	arcs.get(random.nextInt(arcs.size()));
1396	setenablechecks
18633	ÜÜÜ¢ÜÜªÜ¢Ü
57036	<th>iterator</th>
41882	positiveintoutputs
46477	U+2496:
13316	u238a
26142	empty_scoredocs
33201	fail("TestAttributeImpl2
12915	u2394
25669	suggest
60601	"\1\351\1\u03e2\27\232\1\u03e3\1\232\1\352\12\232\175\0"+
51563	indicated
3223	calls
52914	UNI_SUR_HIGH_END
63991	3-byte
28681	testTypeFilterWhitelist()
2201	indicates
27318	"\u003A\u0061\u0027\u2060",
22566	f.get(this));
46513	U+2499:
24179	sb.append(getRandomNumber(low,
66893	Pair
33535	//(out)
5745	expensive
28491	Field.Store.NO);
58545	assertSame(CharArraySet.EMPTY_SET,
7446	addAttribute(PositionIncrementAttribute.class);
29736	"\1\25\24\0\1\25\3\0\1\25\6\0\2\25\5\0"+
19250	testtibetan
6868	Double#NaN}
38282	bits.flip(0,
6495	java6
7541	TokenMgrError
53862	java5
27443	"\u0030\u0030",
34644	call?
53849	java4
889	Exception().getStackTrace();
46501	U+2498:
22005	IOUtils.close(termsOut,
18261	.add(newField("dek",
35347	invalidtokens
40471	call.
33104	"OtherType",
30486	java.util.SortedSet}s
1547	directory.close();
43031	acquiring}.
39352	disiDoc;
14521	zzunpackattribute
56633	ExpirationTimeDeletionPolicy
39053	call"
12514	u239e
57236	elementary
23981	"c",
46441	U+2493:
37747	d.get(ID_FIELD));
37163	version_int_num_bytes_per_arc
67288	testCommitRecreate
32667	originalArray1,
54511	testMaxSize()
65101	edge',
2621	multithread
51018	forceMerge");
35947	docCount++;
53009	byte[maxLen];
46429	U+2492:
61702	ue148
16679	readOnlyReader.close();
15680	IndexFileNames.DELETES_EXTENSION,
9672	"\5\42\1\43\1\2\1\35\1\44\1\35\1\2\2\35"+
43081	newreference
33517	"aa"
6442	testSuppressedExceptions()
35534	foursA=(twos&twosA)|(u&twosB);
38204	0x0000000000000010L,0x0000000000000010L,
25177	term.append("*");
37582	//System.out.println("(sloppy)
56494	(top().skipTo(target))
8328	getlong
23182	index:");
13213	ue152
38416	r3.close();
789	w.setInfoStream(VERBOSE
56149	assertEquals("nul,min,F,T,c",
41969	noverify
57912	extensions;
19314	numcharsread
55670	numaddIndexes
18491	Passes
48173	subSpansByDoc[i]
5503	beginline
68116	*truly*
56745	testKeepLastNDeletionPolicy()
46465	U+2495:
38901	this.toInc
32399	TestWindowsMMap
50286	iterate.</p>
568	"aaa
47893	ValueSource
62588	FIELD_T
49252	positionCount
57707	assertFalse("reader
31722	#upgrade}
60401	"\150\0\1\u0101\4\266\1\u0320\25\266\1\142\12\266\1\0"+
9263	queriesiterable
9199	termCount
62590	FIELD_C
49315	Calendar
64908	//System.out.println("threadcount:
46453	U+2494:
52378	testAddIndexesIntoExisting()
1472	org.junit.AfterClass;
33412	digest;
21066	newSearcher(newReader);
10324	"\1\135\33\136\12\267\1\0\3\136\1\0\2\136\1\137"+
7884	bug</a>
15941	normgen
24326	lastDocId
43535	doTestWriteRead(20);
65724	lastsegmentinfos
7910	consuming
51200	addIndexes(Directory...
35192	getnumoverlap
48409	<br>For
1972	fieldinfo
2805	can't
8129	this.buffers[bufNr]
9230	Iterator<QueryAndLimit>
26321	#getEncodedLength(java.nio.ByteBuffer)}.
58398	i=0;i<TEST_STOP_WORDS.length;i++)
60237	"\1\u0286\2\u0287\1\u0286\5\u0287\1\u0288\175\0\1\u0168\4\u0289"+
34808	"multi3",
57993	lastDocID
52853	WARRANTY
37609	testEmptyPhraseQuery()
24117	data[i][0],
6342	-(description:query)
37220	seektonextnode
62969	(i1.hasNext())
15151	AlreadyClosedException
32622	originalStringBuf1.limit(numBytes1);
7836	BitSet());
65227	fst.outputs.merge(lastNode.output,
48163	spanNearQuery);
1101	stream
8334	keyiterator
46537	U+249B:
26736	re-write
66834	integer.intValue();
11717	zzMarkedPos;
55280	freq2[j]);
7606	retval.append("\\u"
5848	shifts;
31063	SegmentInfo(merged,
39470	slower.
44287	U+A779:
48203	(subSpansByDoc[firstIndex].doc()
64439	decompress(value);
49466	[<TERM>
27711	"\u0061\u003A\u0308\u002C",
63546	shifts,
46525	U+249A:
58288	{};
17662	performant
11954	zzMarkedPosL
10086	"\1\25\5\0\1\25\2\77\5\0\1\25\3\0\1\25"+
30577	"\1\0\2\26\4\0\1\25\5\0\1\25\3\0\1\26"+
27490	"\u005F\u0308\u000B",
67300	doc.add(newField("id3",
51034	Forward
64844	validtermstrings
31625	indexupgrader
16607	heap[size];
34058	ArrayList<PhrasePositions>(hs));
30074	u2368
20197	(minNrShouldMatch
22658	binarySearchLookup
21128	slower,
10101	"\1\25\1\140\1\356\2\352\1\36\1\352\1\357\6\352"+
27996	"\u0031\u002C\u0308\u003A",
32154	newUpto+3;
31414	LogByteSizeMergePolicy();
9879	"\17\0\1\25\1\77\1\26\1\115\3\0\1\77\1\0"+
39321	IntBlockPool(DocumentsWriter
5920	(long)index
42755	reusableToken.reinit(buffer,
52893	OTHER
2239	maxsegmentcount
61797	u2380
43456	assertSameSet(q1,
57605	getdataoutput
35656	addition,
55794	writer.addDocument(DocHelper.createDocument(10*count+docUpto,
33187	Map<String,Object>
38559	fail("setNorm
34005	i<rpp.length;
6598	&amp;
36746	getArcWithOutputCount()
40197	(termEnum
55231	termEnum2.next();
37336	version-dependent
11076	"\1\u03b6\7\230\175\0\1\346\32\230\1\347\2\230\1\u03b7"+
38999	cm.size());
40139	MultiTermEnum(IndexReader
55484	termPositions.freq());
58316	fixup
56718	postCount
41412	benefits
29808	"\3\0\1\25\5\0\1\25\32\0\15\25\5\0\3\25"+
39649	5137;
5861	bitsPerValue)
4027	predicate
63803	x876432
61053	"\1\u033c\161\0\4\u053f\2\0\1\u053f\15\0\1\u053f\6\0"+
10184	"\1\25\2\0\1\25\1\140\32\36\1\141\12\142\1\u0101"+
63802	x876431
61793	u20f4
32202	fail("Should
15959	clearfiles
14577	newbuffer
46432	U+247E:
33062	touched",
68087	bitsPerValue,
62495	defaultSimilarity
50816	(!closed)
13312	u20fe
58834	doc.add(newField("f"
15392	lazytime
54346	StopwordAnalyzerBase
49762	jj_add_error_token(int
7077	further
36426	in.readByte()&0xFF;
48387	collector.collect(currentDoc);
50122	calls).
46444	U+247F:
48236	docSpansOrdered(int
33687	assertTrue("forceMerge
10452	"\2\0\1\25\1\140\3\36\1\352\26\36\1\141\12\142"+
55238	d2.getFields();
52597	allClauses
50462	includePendingClose)
6710	seeking
26506	DocHelper.unstored.size());
31991	uses.
20779	Outputs<T>
35477	Seal's
67023	i.seek(3*RAMInputStream.BUFFER_SIZE);
26241	uses,
20966	synchronize
46401	U+247C:
5673	keyword.
844	});
5704	keyword,
39652	5138;
11643	"\2\136\216\0\1\u0526\175\0\4\u0560\2\0\1\u0560\15\0"+
55815	}).
23078	mSearcher2.subSearcher(hits2[0].doc));
15534	src.dir;
38910	keyword2
53666	iw.addDocument(document);
24381	}),
20199	1-clause
17702	user,
18891	String[]{"don't"});
10438	"\2\0\1\57\4\0\1\177\14\0\1\61\4\0\1\200"+
35204	curDoc;
36998	writer.writeVInt(arc.numArcs);
41335	System.out.println("Wrote
18204	recache
5685	keyword;
4509	returned
6836	bound
46420	U+247D:
41737	r[1].output.longValue());
3131	curDocs
2373	}*/
56675	(modTime
1499	3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));
5300	endColumn;
60557	"\175\0\4\u03ab\2\0\1\u03ab\15\0\1\u03ab\6\0\12\u03ab"+
7932	guarantees).
17759	MultiTermQuery()
46353	U+247A:
57979	addThread(TermsHashPerThread
64732	"bb5"));
23344	keywords
61159	"\12\u02e2\175\0\1\u034d\24\u02e2\1\u059f\5\u02e2\1\u034e\12\u02e2"+
34209	Change
33626	testchained
5350	error_line
39674	testprefixbooleanquery
46377	U+247B:
40586	intIdx++;
49120	getAllowLeadingWildcard()
30508	number</li>
52588	result.add(query,
22594	getattributeinterfaces
43444	assertSameSet(new
61142	"\1\u058f\15\0\1\u058f\6\0\12\u058f\1\u0503\13\0\1\u02e1"+
66035	+b:more)
64279	FloatFieldSource(field);
37546	testWrappedPhrase()
1423	testexceptiononmergeinit
11154	"\12\u03f3\1\0\2\u0214\1\u026d\3\u0214\1\u0216\1\u0167\1\u0168"+
33219	testdefaultattributefactory
31298	testAddOldIndexesReader()
63939	highlightedtext
11700	"\2\1\43\0\1\1\61\0\1\1\53\0\1\1\64\0"+
64735	testFloorBlocks()
49482	{if
3251	int[INITIAL_ARRAY_SIZE];
33041	restore",
14608	zzattrl
33034	different",
5698	(getClass()
16689	testCloneWriteToOrig()
52568	correspondence
12050	zz_cmap
63800	x876421
26818	charOffset
4897	edit
61453	"\10\u02e2\175\0\1\u034d\32\u02e2\1\u034e\3\u02e2\1\u048b\6\u02e2"+
14802	").append(comparatorSource).append('>');
56201	TestTermPositions(in.termPositions());
54102	doTestStopPositons(stpf01,true);
59397	"\1\0\1\51\1\0\1\71\2\0\1\221\3\0\1\54"+
27928	"\u0031\u003A\u0308\u0031\u0027",
65957	t:two*)",
14737	this.locale
55102	d1.setBoost(d.getBoost());
28616	getBeginColumn()
25413	inconsistent.
39478	Larger
51829	Walk
29890	"\2\0\1\34\42\0\1\52\11\0\3\25\5\0\1\25"+
33883	pp=min,prev=null;
52479	setdoublevalue
64872	toArray.byteStarts,
6020	assertEquals("junk",
66517	charPool.nextBuffer();
7622	modifying
9084	IndexCommit
65980	ee\"
43202	ndocsreturned
65132	undecided:
11169	"\175\0\1\346\1\u03fe\31\230\1\347\12\230\175\0\1\346"+
39127	PhraseQuery#add(Term,
53174	programs
52951	result.bytes
37732	out.println("Query:
53316	out.writeVLong((output.first<<1)
16083	RAMDirectory());
29355	DocumentsWriter.BYTE_BLOCK_MASK;
39121	PhraseQuery#add(Term)
24359	result[x].doc+")
41664	(willRewrite)
2102	rehash();
6851	excluding
18845	"moÍ¤chte"
13422	u6708
65713	CommitPoint(Collection<CommitPoint>
11065	"\12\230\175\0\1\346\26\230\1\u03aa\3\230\1\347\12\230"+
3616	registerdone
49126	#setEnablePositionIncrements(boolean)
4334	checkTermCounts(int
65281	(node
64064	assertTrue(expectedEx.isInstance(e));
11140	"\1\u03ec\14\0\1\u02cf\161\0\4\u03ed\2\0\1\u03ed\15\0"+
58498	.asList(TEST_STOP_WORDS),
36440	nodeIn.numArcs);
49427	('a'
50302	IndexReader#open(IndexWriter,boolean)}
25723	fieldcachesanitychecker
64303	#setTermCountCutoff
20076	weights;
38976	keyStr.toLowerCase(Locale.ENGLISH)
21062	END_COUNT)
41959	tstart
66919	noOutput2
62547	ReqExclScorer(requiredCountingSumScorer,
27644	"\u0061\u2060\u0308\u0041"
55915	stillAliveCount.
17474	Term("f3",
42321	"somedata".getBytes(),
23760	Newer
36092	java.io.BufferedOutputStream;
1587	searcher.search(query,
2721	"Wrong
24260	"AIGEC");
30202	TermInfoAndOrd(ti,
17799	(Float.floatToIntBits(getBoost())
32443	dir.delete();
57484	MAX_PAGE_BITS
43156	getElevatedQuery(String[]
20096	weights)
9083	inconsistent
64401	orginal
51165	Wait
43892	$desc\n!;
66917	noOutput1
54474	implementation..
51725	sourceSegments.get(segUpto);
31035	"merge2",
64513	include)
16674	only");
4354	testRandomTrieAndClassicRangeQuery(Integer.MAX_VALUE);
56194	FilterTermPositions
54005	oldRef.decrementAndGet();
64459	include,
14593	yypushback
48209	subSpansByDoc.length;
12620	u671c
67581	assertReaderOpen(IndexReader
18741	Î±ÏÏ
64454	include;
42501	pool.add(new
37719	useCompoundFiles,
22512	non-static
48208	subSpansByDoc.length)
6720	used,
32177	used)
2508	scoredoc
15060	MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());
42847	newTermBuffer,
29363	buffer[upto++];
31584	testUpgradeOldSingleSegmentIndexWithAdditions()
38216	randomLong(final
53813	used:
16432	testIllegalSnapshotId()
51662	mergingSegments.add(merge.info);
26685	skips
18269	"albino",
28485	Field("stringStored",
3518	included
64999	INPUT_TYPE#BYTE4}
15031	used.
31242	assertTrue("incorrectly
19009	String[emailList.size()]);
46328	,"6.",
54492	similaritydelegator
29468	Object());
24439	value(int
41752	Builder<Pair<Long,Long>>
63415	0x8632,
15214	assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length,
9766	"\3\136\1\0\2\136\1\137\3\136\3\0\1\136\4\0"+
3419	includes
46139	,"Z",
55351	(char)('A'
13021	u6712
21836	(result.size()
58877	this(input,
9446	ZZ_ACTION_PACKED_0
42455	skip,
5434	jjstateset
22517	implementation):
63414	0x8631,
57093	OpenBitSetIterator(bits,
63024	RANGEEX_END
42457	skip;
19765	useadvance
25769	subreaders
12219	u6726
66605	aabcdefgaa
64791	BytesRef(validTermStrings[termIDX]);
51781	(!commitMerge(merge,
17305	TestQueryWrapperFilter
31436	"ð",
17900	assertEquals("min,min,T,T",
4800	writer.setWriteLockTimeout(100);
30072	u229a
46540	U+2487:
67473	refreshed;
24537	1000).scoreDocs,
15583	input.readByte()
59492	"\1\0\2\137\1\140\3\137\3\0\1\137\1\164\3\0"+
9134	storedFieldsWriter.fieldInfos);
3254	(cacheScores)
21264	actual.seek(seekTo);
66091	f2:bla*
17546	1000).scoreDocs;
42537	TestNumericTokenStream
66882	Outputs<A>
12217	u65e0
19794	Type.SHORT
53476	dfMap.get(term).intValue();
42006	rootnode
46528	U+2486:
17643	initialvalue
16872	orig.norms("field1")[1]);
13019	u65cc
55179	tv2);
17084	tvpositioninfo
49859	newbooleanquery
57305	newLen=
53079	UNI_SUR_HIGH_END)
11020	"\1\u0384\15\0\1\u0384\6\0\1\u0387\1\u0389\1\u0388\2\u0387"+
57318	newLen;
45955	U+A760:
12618	u65d6
59808	"\1\67\1\0\1\25\2\0\1\25\1\141\16\36\1\u0151"+
59791	"\1\u0143\1\u0144\1\u0145\3\0\1\137\4\0\2\137\150\0"+
34066	LinkedHashMap<Term,Integer>();
66884	Outputs<B>
46516	U+2485:
4819	myindexingchain
49042	boolean.class);
4011	matchversion
45962	U+A761:
64777	terms.length)
13420	u65c2
54224	assertNull(strings.put(str,
65525	"future"
23859	Pruner}
4470	empty_docidset
16234	terms.length;
46504	U+2484:
67026	2*RAMInputStream.BUFFER_SIZE);
27319	"\u003A\u0308\u0061\u0027\u2060",
16784	assertTrue(!r1.isDeleted(10));
33100	clone.copyTo(src);
57119	(int)index
17745	ConstantScoreAutoRewrite#setDocCountPercent}
46135	U+A762:
59632	"\2\0\1\25\1\141\2\355\1\36\1\355\3\36\2\355"+
36059	testBooleanMUST()
41792	//System.out.println("testing:
49781	jj_expentries.add(jj_expentry);
54442	detail
46492	U+2483:
64661	AveragePayloadFunction
1916	fieldsStream.writeString(field.stringValue());
56893	int[51];
23254	"b",
49932	fuzzy_slop
23946	affected
46173	U+A763:
6920	q=(NumericRangeQuery)o;
9103	"b";
27300	"\u003A\u002C",
1069	i=0;i<iter;i++)
8356	lockFactoryClassName
48918	setDocumentNumber(int
28757	logarithmic
28912	IntFieldSource(String
33330	Rolls
5733	bits/value
46480	U+2482:
21817	getField(String
31013	checkSegment(String
60220	"\3\u021c\1\u0220\1\u016c\1\u016d\1\u016e\2\0\2\u021c\4\0"+
39930	subReaders[i].getTermFreqVector(n
61700	ue002
56003	resizeBuffer(int
4455	assertFalse(q1.equals(q2));
59450	"\1\137\1\164\3\0\2\137\150\0\1\136\32\266\1\142"+
21643	WILDCARD_STRING)
30674	"\1\25\4\0\1\54\1\0\2\54\4\0\1\25\5\0"+
53819	next()}</li>
16205	zz"
57316	newLen)
21930	this.resourceDescription
55136	int[r2.maxDoc()];
603	idField.setValue(id);
41620	verifyStateAndBelow(FST<Object>
46468	U+2481:
12810	ue016
59892	"\2\232\1\u016f\2\232\1\u016f\6\232\1\352\12\232\175\0"+
12409	ue020
29032	returns,
13211	ue00c
66831	int[tmpFreqs.size()];
28744	(posting
19382	negate
19017	"mailto:test@example.org",
37774	normsField;
41038	thresholds,
36399	save(final
6465	PrintWriter
45731	U+A766:
9782	"\1\51\2\0\1\52\3\0\1\53\2\0\1\54\3\0"+
46456	U+2480:
29639	"\2\0\147\132\2\0\4\132\1\0\2\132\16\0\12\132\120\0\10\132"+
54172	ci.checkIndex();
22557	part.substring(0,
18822	testChinese()
37780	normsField)
31294	IndexWriter(targetDir,
41759	85L));
42068	circuit
62482	countingDisjunctionSumScorer(final
59051	SCORING_BOOLEAN_QUERY_REWRITE;
46478	,"15.",
66946	output.output2));
17359	rdr.document(docId).get("id"));
40343	pointer++;
2075	scratchArc.flag(4)
55894	standpoint
28738	zzz
65319	owner.validOutput(newOutput);
53770	map.put(text,
50938	deleteDocuments(Term
40351	pointer++)
7814	u2222
55077	1000000*i;
45751	U+A767:
57306	Math.min(this.wlen,other.wlen);
20099	affects)
27587	"\u0300\u0308\r",
57492	indexToDataOffset;
52897	CONNECTION
33356	"+iterator2.next());
41476	BytesRefFSTEnum<Long>(fst);
52925	0x0010000;
19736	while(cs.pos
27500	"\u005F\u003A",
20853	(fieldAnalyzers
6580	works</h3>
34809	"multi2".
36026	bq1.add(tq,
56702	assertEquals(needsMerging
34804	"multi2",
14981	A"~N
45926	U+A768:
18096	sumOfSquaredWeights
37196	poswrite
11967	zzEndReadL)
5413	jjmovenfa_3
5470	jjmovenfa_2
5459	jjmovenfa_1
5466	jjmovenfa_0
6595	Metadata
62435	ReqOptScorer
55708	mainWriter.forceMerge(1);
10837	"\4\u02dc\2\0\1\u02dc\15\0\1\u02dc\6\0\12\u02dc\1\u021e"+
51945	DirectoryReader.doClose
39463	rebuilding
52359	populateDirs(random,
8302	numberofleadingzeros
48711	assertTrue(comp.compare("1.10",
47883	inputtext
4991	jjstateSet[0]
3836	CharTokenizer(AttributeFactory
46308	,"(5)",
30659	"\2\25\1\0\3\25\1\0\4\25\1\0\5\25\2\0"+
41000	seekFloor("
40076	writer.isClosed())
65363	edge
17614	TEST_VALUE
18918	developers
56277	QUICKSORT_THRESHOLD
16793	testMixedReaders()
67692	TermAttribute,
6727	<b>6</b>
20636	"ram",
19851	expectedFieldScore(id);
10938	"\1\u0122\160\0\1\u0163\4\u033e\2\0\1\u033e\15\0\1\u033e"+
58132	persisting
21230	expected);
26650	testNeverCallingPeek()
7702	users
51649	details);
17974	(example
39597	lastIndexPointer);
12913	u224e
51712	merge.info.name;
29697	"\1\2\1\3\1\2\1\4\1\2\1\5\1\2\1\6"+
55703	//doBody(j++,
43075	referencemanager
50882	details).
21229	expected",
45166	,"NJ",
12111	u2262
56133	q.add(csrq("data",
18328	(Error
61795	u223a
22130	/*while
6559	<code>Numeric*</code>
23965	NUM_STRINGS
65750	setUp()....
55217	(!termEnum2.next())
12512	u2258
27778	"\u0061\u0027\u0308\u0061\u003A",
43520	doTestClearVectorOfSize(1000);
60140	"\1\u0225\6\0\12\u0225\1\u0226\175\0\4\u0227\2\0\1\u0227"+
54881	reference.getIndexReader().decRef();
38820	LUCENE-1586:
66858	lettertokenizer.
39662	"notexistnames")),
607	List<Document>
22677	inclusiveUpperPoint)
1855	IOUtils.close(fieldsStream,
21087	setmaxsizeinbytes
40941	IntsRefFSTEnum.seek:
46235	U+2489:
5905	bitsPerValue;
31201	"31.nocfs",
29506	notification
6296	</pre>
40697	PairOutputs<Long,Long>
13314	u2244
56837	"\1\0\54\12\1\0\10\12\2\0\32\12\14\0\202\12\12\0\71\12"+
22656	inclusiveUpperPoint;
2904	lastDocCollected;
1869	(field.isBinary())
42324	assertFalse("Payload
5644	b2==0
62536	countingDisjunctionSumScorer(
14890	IllegalStateException("Illegal
46212	U+2488:
66847	newField("foo",
28770	numberOfSkipLevels
49512	label_1:
49523	label_1;
36389	out.writeVInt(nodeRefToAddress.length);
57365	trimTrailingZeros()
30071	u2233
17242	si.docCount)
1475	NUMBER_OF_FIELDS;
45924	U+A75E:
29989	StandardTokenizer.ALPHANUM;
48260	possiblePayload
58584	set.toString());
34361	ConcurrentMergeScheduler()
16599	insertWithOverflow(T
60631	"\4\0\2\137\150\0\1\u0101\32\266\1\142\5\266\1\u03ff"+
60206	"\3\u01d0\1\u01d2\5\0\2\u01d0\4\0\1\u01d0\151\0\51\u0213"+
28079	0063
20196	disableCoord);
10896	"\2\136\150\0\1\376\1\264\1\u0315\30\264\1\141\12\264"+
28091	0062
27000	0061
66381	postingsArray.textStarts[pivotTerm];
26983	005F
59081	"\2\0\1\2\1\0\2\2\6\12\3\0\2\12\1\0"+
56409	conf.setMergePolicy(tmp);
41004	(attempt
53110	bounds.
67246	getoutputstream
6613	bounds,
52028	pendingmerges
2665	strudel",
55207	termEnum2.term();
55282	assertTrue(v2
57779	ac=false
1926	each
68018	testLetterUnicode()
56258	testtermenum
56666	segments_N's
34753	(triplemulti
27068	"\r\u0031\u003A",
3165	this.scorer
28092	0079
65518	segments_N),
26239	arrayOffset()
27960	"\u0031\u0027\u0308\u00AD",
35454	http://www.hackersdelight.org/HDcode/newCode/pop_arrayHS.cc
67860	"a/x
64966	shareMaxTailLength;
51633	ConcurrentMergePolicy
2822	elapsed="+timoutException.getTimeElapsed()
37293	enablePositionIncrements,
41559	assertEquals("expected="
45565	U+A75B:
37337	enablePositionIncrements.
3828	Reader)}
39220	fieldNormExpl
28585	System.arraycopy(buffer,
34168	initfirsttime
20414	"Document
17986	Locale("da",
11163	"\1\u03fb\15\0\1\u03fb\6\0\12\u03fc\1\u039f\13\0\1\u0122"+
48992	#getRangeQuery(String,
28080	006E
65034	shareMaxTailLength,
51760	message("abort
31948	NUMERIC_UTILS_FLOAT_PARSER=new
14753	"Missing
49128	enablePositionIncrements;
41554	useCache);
15205	doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);
65066	shareMaxTailLength)
28081	0074
30881	getcollationkey
41503	allIDs
48755	Comparable<TestToken>
45519	U+A75A:
33524	String[]{"cc"},
57892	ByteBuffer.wrap(b,
700	//writer.setMaxBufferedDocs(10);
66495	((code*31)
39735	synchronizes
63997	0xA0,
51754	IndexFileNames.COMPOUND_FILE_EXTENSION);
60052	"\15\0\1\u01e1\6\0\12\u01e1\1\u019d\13\0\1\u0126\160\0"+
56204	main(String
49537	field="*";
24288	Float.MIN_VALUE,
43587	SpanFilter's
62218	iter2="
57860	Future#cancel(boolean)}
43680	calendar.getTime().getTime();
54420	buffer.append(getSummary());
2976	synchronized
26909	0001
37803	"MatchAllDocsQuery,
26925	000D
60675	"\1\u0422\15\0\1\u0422\6\0\12\u0423\1\u03ac\13\0\1\u02e1"+
26933	000A
26940	000B
9624	"\2\ubf93\2\uc036\2\uc0d9\2\uc17c\2\uc21f\2\uc2c2\2\uc365\2\uc408"+
40656	ByteSequenceOutputs.getSingleton();
12413	ue2ac
30509	<li>&lt;SOUTHEAST_ASIAN&gt;:
6675	name="precisionStepDesc"><h3>Precision
28101	0036
28100	0035
60021	"\1\25\2\0\1\25\1\141\3\36\1\370\26\36\1\142"+
28099	0034
28098	0033
59085	"\3\12\23\0\1\12\40\0\1\12\4\0\1\12\6\0"+
41550	nextID="
28102	0037
60793	"\175\0\4\u046e\2\0\1\u046e\15\0\1\u046e\6\0\1\u046f"+
53184	granted
38161	max>=lower
40869	Set<Long>
26961	003A
50949	"deleteDocuments(Query..)");
7665	TokenMgrError(boolean
20092	getBoost()
37563	assertEquals("nonexisting
66579	textstart
26954	0041
11247	"\5\u043b\1\u043c\175\0\1\u03f0\242\0\1\u03f0\33\0\2\u03f1"+
28103	0025
28096	0024
26971	0027
5695	equals(Object
12814	ue2a2
49396	<code>\\u0041</code>
32517	testtransactions
53035	(utf8[upto]&0x3f);
58630	testNRTAndCommit()
19995	FuzzyQuery,
26966	002C
28097	002D
5103	((0xffffffffefffffffL
27025	002E
63796	x876321
30184	enumOffset
43360	docIdSetIterator.nextDoc())
26976	0030
27016	0031
54149	~82M
59102	"\1\231\1\u013c\1\u01df\1\u0282\1\u0325\1\u03c8\1\u046b\1\u050e"+
56012	append(char
49216	both.
48210	(subSpansByDoc[i].doc()
59793	"\1\305\1\306\1\307\1\310\1\311\1\312\1\313\1\314"+
51199	among
50776	IndexWriterConfig#setDefaultWriteLockTimeout(long)}
28623	charsread
8465	setlockprefix
66153	IndexSearcher(littleReader);
63519	both?
39579	lastTi.proxPointer:
34799	fox").toString());
55912	PURGE_MULTIPLIER
30662	"\1\25\5\0\2\25\3\0\1\25\4\0\3\25\4\0"+
43647	statements.
1518	segmentFileName
7744	FieldSelector()
65806	nClauses
56839	"\2\0\1\12\7\0\47\12\110\0\33\12\5\0\3\12\56\0\32\12"+
6520	<p>You
60779	"\150\0\1\u0101\32\266\1\142\6\266\1\u0463\3\266\1\0"+
40537	performed
65552	rc.count)
60848	"\160\0\1\u0168\4\u0496\2\0\1\u0496\15\0\1\u0496\6\0"+
59751	"\1\174\210\0\2\174\6\0\1\174\153\0\1\174\5\0"+
9316	"\1\132\1\136\3\132\1\0\1\132\1\0\24\132\1\0\123\132\1\0"+
27387	"\u0027\u0308\u003A",
28822	numberofskiplevels
52543	FuzzyQuery}
11592	"\15\0\1\u0541\6\0\1\u0543\1\u0545\1\u0544\2\u0543\2\u0544"+
6528	"weight"
54347	DEFAULT_MAX_TOKEN_LENGTH
60998	"\1\u0505\1\u0504\1\u0503\13\0\1\u02e1\161\0\4\u0507\2\0"+
34326	setSimilarity(Similarity
46632	,"[",
9699	"\2\25\3\0\1\25\4\0\2\25\2\0\7\25\1\0"+
11297	"\1\141\1\264\1\307\10\264\1\0\3\136\1\0\2\136"+
32567	0xA6,
29172	deltaLength;
65188	UnCompiledNode[ArrayUtil.oversize(input.length+1,
515	asserttrue
54133	StopAnalyzer.ENGLISH_STOP_WORDS_SET);
7381	criteria
24764	sortMinRev
49784	generateParseException()
23122	OpenMode.APPEND));
64046	is.readVInt());
9447	"\1\0\23\1\1\2\1\3\1\4\1\1\1\5\1\6"+
17146	IndexFileNames.COMPOUND_FILE_EXTENSION),
66921	(noOutput1
60232	"\4\u0283\2\0\1\u0283\15\0\1\u0283\6\0\12\u0283\1\u0284"+
59767	"\1\67\1\0\1\25\2\0\1\25\1\u0141\10\36\1\250"+
52907	authorization
66924	(noOutput2
56380	init(int
19645	ExactPhraseScorer(Weight
49692	CharStream.
64560	numToCopy;
19949	MapBackedSet(Map<E,
34923	testFuzzy2()
18649	"Ü£ÜÜÜÌÜ",
39015	keys");
55040	nThreads="
36713	(labelToMatch
33125	termAtt.setEmpty().append("TestTerm");
66850	fooNorms[]
14942	shortcomparator
20623	fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);
58204	snapshots_id
55123	System.out.println("\nr1
49984	file</li>
27870	"\u0061\u002C\u0061\u2060",
56957	solves
55126	System.out.println("\nr2
43795	assertTermEquals("mot",
40980	assertNotNull(seekResult);
36720	System.out.println("fta
7365	executed,
15037	executed.
41144	iter=0;iter<numIter;iter++)
48500	ease
33416	digest
42710	highlighted
42173	newlength
54872	tolerate
41685	rootNode.arcs[0].target
30795	fill(final
61408	"\175\0\1\u034d\32\u02e2\1\u034e\6\u02e2\1\u048b\3\u02e2\175\0"+
61288	"\1\u034e\5\u02e2\1\u061a\4\u02e2\175\0\1\u034d\32\u02e2\1\u034e"+
25332	matchall
5437	xfbffd4f8ffffd9ffl
14544	east
42430	b1[i]
60769	"\1\u045a\11\232\175\0\1\351\32\232\1\352\3\232\1\u045b"+
50799	starvation"
18060	#ConstantScoreQuery(Query)}!
18449	zip
55017	verifyEquals(random,
31613	origSegCount,
33012	reuse
30523	"\0\u0dae\0\u0e15\0\u0e7c\0\u0ee3\0\u0f4a\0\u0338\0\u039f\0\u0fb1"+
38799	SegmentReader.getOnlySegmentReader(dir);
50604	CompoundFileReader(directory,
32973	numToCopy)
65735	lastfile
56964	StandardTokenizer.TOKEN_TYPES;
18232	lengthNorm
31337	\u2620
57829	assertEquals("test1",
28486	binaryValStored,
17473	Term("f2",
24989	zji
49407	(codePointMultiplier
36587	in-place
10074	"\1\0\3\76\1\0\1\76\2\0\4\76\2\0\1\76"+
60610	"\2\232\1\u03ec\7\232\175\0\1\351\15\232\1\u03ed\14\232"+
45950	U+A75F:
59918	"\7\0\1\57\2\0\1\60\4\0\1\201\14\0\1\62"+
9635	"\2\uf79b\2\uf83e\2\uf8e1\2\uf984\2\ufa27\2\ufaca\2\ufb6d\2\ufc10"+
45439	U+A753:
12613	u62a7
3832	this(Version.LUCENE_30,
10467	"\1\320\1\321\1\322\1\323\1\324\1\136\12\264\1\u014f"+
41596	scratchIntsRef
7774	fi.next();
27585	"\u0300\u0308\u0001",
50190	IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;
32016	b.append(getCacheType()).append(",").append(getCustom());
49734	(jj_scanpos.next
24484	(multiSearcher,
23856	maxAgeSec
31874	parsers.
15287	atLeast(500);
66112	is.search(q,
63265	0x4321,
56940	"\1\11\2\52\1\0\1\24\3\0";
55255	assertTrue(d2
56078	query.setRewriteMethod(method);
76	KIND,
42852	Token(newTermBuffer,
61794	u2197
1195	corrupted
38259	precisionStep=4
49848	defaultprefixlength
45417	U+A754:
62719	subIDX
41181	assertTrue(ch
10358	"\3\0\1\136\4\0\2\136\150\0\1\u014e\23\264\1\u0103"+
10058	"\1\25\1\0\1\25\4\0\1\25\2\0\2\25\1\0"+
12414	ue34f
16709	assertTrue(deleteWorked(1,
58616	setcasesensitive
63861	builder.toString().toLowerCase()});
45437	U+A751:
7897	later,
46122	"á´¢"
27897	"\u0031",
34503	sb.append("writeLockTimeout=").append(writeLockTimeout).append("\n");
48613	stream.next
18559	"Õ¢Õ¡ÖÕ¥Õ¬",
42270	assertattributereflection
58295	b.offset;
64462	this.exclude
38434	setMergePolicy(newLogMergePolicy())
65473	later:
29165	preUTF8
41190	MockAnalyzer(random)).setMaxBufferedDocs(-1).setRAMBufferSizeMB(64);
43854	<IN>)
4678	IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB,
16805	origSegmentReader);
4849	getmaxthreadstates
12212	u62b1
28519	testbinaryfieldinindex
25587	(seen.contains(rf))
58758	"\udc17\ud917\udc17\ud917",
45414	U+A752:
40210	termDocs(pointer++);
14786	buffer.append("<doc>");
53590	Integer.valueOf(aggregatedDfs[i]));
60972	"\1\u0101\3\266\1\u04f0\26\266\1\142\12\266\1\0\3\137"+
53360	(isOpen)
59600	"\1\25\1\141\5\355\1\367\1\36\1\355\1\370\7\355"+
18611	"ÙØ³ÙÙ",
17012	positions)
3478	indefinitely,
52409	<p>Here's
57341	intersect(other);
24745	i<5;
26422	outputByteNum;
57177	wordNum;
65778	i<sets.length;
61705	ue331
30069	u2165
37118	NodeQueue(int
30822	charBuffer[--buffer.length];
60881	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\23\266"+
26989	00AD
42154	account.
45411	U+A750:
18948	{5,
60574	"\1\u03c7\1\u03c8\1\u03c9\1\u03ca\1\u03cb\1\u03cc\1\u03cd\1\u03ce"+
4259	totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;
57834	testcommitonclose
33884	prev!=max;
13216	ue33b
55173	tv1);
7623	LexicalError(boolean
7516	vectorFieldsInOrder(FieldInfo
41551	nextID);
60114	"\2\u01ce\1\u01d1\3\u01ce\1\u01d2\1\0\1\u0213\3\0\2\u01ce"+
12815	ue345
56143	MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT),
38262	precisionStep=2
38265	precisionStep=1
4148	i<3;
28609	Done()
1817	RAMOutputStream
30321	TwoPhaseCommitImpl[]
27244	"\u0041\u0308\u0027",
67164	//copy
1537	tiiFileLength,
56173	testbooleanorderunaffected
40725	UpToTwoPositiveIntOutputs");
20717	byteAt(int
10540	"\1\66\1\0\1\25\2\0\1\25\1\140\3\36\1\365"+
50996	running.</p>
53715	lastbottom
15880	<code>_a(3.1):c45/4->_1</code>,
16307	Placeholder:
41	you
67296	i<4;
59810	"\150\0\1\u0153\32\266\1\142\12\266\1\u0154\3\137\1\0"+
56981	u215c
4369	testRangeSplit(8);
17248	(si.getHasVectors())
27668	"\u0061\u2060\u0061\u2060"
59487	"\1\0\1\137\1\145\1\140\3\137\3\0\1\137\4\0"+
56426	Math.max(count,
1560	enumerator.term());
11124	"\2\u03db\2\u03dc\1\u03db\1\u03dc\1\u03db\1\u03da\13\0\1\u0325"+
30942	(exactly
1164	latest
58577	assertTrue(it
50388	Discard
18813	"à½à½à½º",
21493	is.readByte();
10119	"\1\352\1\141\12\142\1\65\1\136\1\143\1\136\1\0"+
31628	singlesegment
38095	correctly:
49718	JJCalls
10934	"\2\0\1\u033e\15\0\1\u033e\6\0\12\u033e\1\u02d8\13\0"+
18114	filter.getDocIdSet(reader);
20735	copyTo(byte[]
54875	SearcherFactory();
50939	(docWriter.deleteTerm(term,
56248	correctly,
22247	grow(int[]
12510	u2112
50186	IndexWriterConfig#DEFAULT_MAX_BUFFERED_DOCS}
23110	(contents2!=null)
25206	correctly.
39051	assertEquals("Map
22341	quickSorts
48915	point!");
17620	(String)tl.get();
18156	docIdSetIterator.nextDoc();
31704	"qwerty",
50789	this:</p>
14654	(using
15904	s.append('x');
33270	RuntimeException("Couldn't
45474	U+A759:
66830	(int[])tmpFreqs.toArray(termFreqs);
5776	block
4102	doc.add(ascfield8);
18762	"Î±ÏÏ",
27260	"\u0041\u0308\u0300",
54889	waitingListeners.add(l);
37440	TestPositionIncrement
25198	doc.add(newField(field,
21422	and/or
52329	verifyPayloadExists(dirs[i],
1425	getmergepolicy
17001	positions.
57603	datapagedbytes
5443	xfbfffcf8ffffd9ffl
25779	positions,
18985	(line.length()
10945	"\25\230\1\u0342\4\230\1\347\12\230\175\0\1\346\1\u0343"+
15885	<code>C</code>
19978	org.apache.lucene.analysis.TokenFilter}s.
29187	positions?
8349	args)
12109	u211c
29237	positions;
59776	"\1\25\1\141\7\36\1\355\22\36\1\142\12\143\1\66"+
66295	perThread.bytePool;
1606	Collections.shuffle(sample);
36374	IllegalStateException("call
47994	docBase+reader.maxDoc();
38805	assertTrue(r2
67629	assertTrue(r3
15380	latent
67587	assertTrue(r1
21377	demo_FSIndexInputBug(Directory
11607	"\12\u054d\175\0\1\u0332\4\u054e\2\0\1\u054e\15\0\1\u054e"+
51949	#addIndexes}.
49858	toplevelquery
41944	fstlines
26002	OutOfOrderOneComparatorScoringMaxScoreCollector
56625	Assert
29482	Assert.assertTrue(runClasses.getFailures().get(0).getMessage()
24014	"a",
45472	U+A757:
41724	FileOutputStream("out.dot"));
24654	"ACEGIBDFHJ";
37999	Long.MIN_VALUE+1,
57505	indexEnum.skipInterval;
30826	if(offset
45970	"á´¡"
65893	fields[]).
9088	"a";
6297	match;
54971	isSearcherCurrent()
62216	match:
12213	u6354
35407	Token()
12614	u634a
58618	copycasesens
45458	U+A758:
18309	match?
55148	(termEnum);
5310	input_stream.getBeginColumn();
22868	match,
31099	filewriter
53144	chars.chars
33867	match)
1085	testOutOfMemoryErrorCausesCloseToFail()
5618	assertEquals(b2,b3);
37523	yyy
59676	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\4\266"+
38000	Long.MIN_VALUE+2,
65958	mfqp.parse("[a
7215	match.
62376	span.start(),
53333	valid(first,
67390	<=1;
32008	estimateSize()
38716	index.",
12911	u2108
42453	numFieldInstancesToSkip;
26240	ByteBuffers
55747	IndexWriter.IndexReaderWarmer
2019	scratchArc.isFinal())
45441	U+A755:
18612	"Ø§ÙØ­ÙÙÙØ©",
532	java.util.List;
56490	queue.updateTop();
43215	SegmentTermDocs(reader);
58569	((Iterator)
24496	parallelSearcher.close();
55948	PURGE_MULTIPLIER;
42441	numFieldInstancesToSkip,
10387	"\1\346\1\u016e\2\u016a\1\230\1\u016a\1\u016f\6\u016a\4\230"+
35759	harley
65441	ReverseOrdFieldSource.class)
32616	testNum
45456	U+A756:
12813	ue1ff
63565	i<<6
6120	Token);
15018	testincreasingsloppiness3withholes
9489	"\0\u18d5\0\u1978\0\u03d2\0\u0475\0\u1a1b\0\u05bb\0\u065e\0\u1abe"+
35998	sub-segment
51443	message("don't
51380	flush(triggerMerge,
37759	low_priority
38587	(!fileDirName.exists())
20926	Token's
41553	useCache="
16369	correct(int
44253	U+249E:
43879	(sort
40240	((TermPositions)current).nextPosition();
31442	s.toCharArray())
52546	java.io.Serializable,
19277	testlucene1545
28348	parent,
37388	actualVersion
54506	copyCost)/currentSize;
28800	childPointer
54812	lock_held
30121	(CloneableTerm)
30858	CollationKeyFilter.
65303	arcs.length);
40872	maxLong
44342	U+249F:
30247	threadresources
22072	java.util.Comparator;
51526	allDeleted
26743	Computing
33322	w=new
61703	ue1eb
9144	doc.fdt.getFilePointer();
12216	u653d
44116	U+249C:
16628	heap[j]))
45264	U+A74C:
42519	testpayloadsencoding
13214	ue1f5
48488	Scorer(Similarity
41372	(!verifyByOutput)
9881	"\1\77\36\0\1\27\20\0\2\27\25\0\2\27\6\0"+
45361	U+A74B:
23060	.setOpenMode(OpenMode.APPEND));
9873	"\1\207\3\0\1\210\2\0\1\211\12\0\1\212\17\0"+
31566	SegmentInfos();
64227	affecting
56847	"\20\0\7\12\1\0\1\12\1\0\3\12\1\0\26\12\1\0\7\12"+
44192	U+249D:
53531	FieldDocSortedHitQueue
17824	settermcountcutoff
33236	parent)
33324	currentRecordId=1;currentRecordId<=100;currentRecordId++)
45261	U+A74A:
63898	LetterTokenizer(TEST_VERSION_CURRENT,
20915	org.apache.lucene.index.TermPositions
29494	JUnitCore.runClasses(NonStringProperties.class);
40881	Math.max(maxLong,
20369	Pass
9646	"\3\u2fa3\3\u3046\3\u30e9\3\u318c\3\u322f\3\u32d2\3\u3375\3\u3418"+
22751	FieldCache#getFloats(IndexReader,String,FieldCache.FloatParser)}.
15482	yet
1649	beforeclass
26889	\p{Script
13419	u651f
259	POINT
183	reader2.docFreq(searchTerm1));
24828	docID);
29083	Fields:
9458	"\1\0\2\12\1\0\1\12\2\2\7\0\2\3\20\0"+
68000	left.tokenStream("foo",
8400	Integer.parseInt(args[2]);
36329	nodeAddress[node];
40466	TokenFilter}s
56466	that.getBoost();
27661	"\u0061\u2060\u0308\u00AD",
12617	u6533
31375	pre-lockless
48766	tokenUpto
30596	"\132\0\1\27\153\0\2\27\11\0\1\27\115\0\2\27"+
22495	(default),
21933	getFilePointer();
6118	Token",
68095	"implementation
57186	*if*
23571	Term("foo",
3766	>supplementary
25393	termAtt.setEmpty().append(term);
53789	CharArraySet)
34383	this.maxBufferedDeleteTerms
57213	flipAndGet(int
673	RuntimeException(Thread.currentThread().getName()
52592	UnsupportedOperationException
4345	classical
28736	existant
60823	"\1\u0425\242\0\1\u0425\33\0\2\u0426\1\0\2\u0426\2\0"+
9647	"\3\u34bb\3\u355e\3\u3601\3\u36a4\3\u3747\3\u37ea\3\u388d\3\u3930"+
40713	List<FSTTester.InputOutput<IntsRef>>
40544	java.io.OutputStreamWriter;
52012	getlimit
10899	"\1\u0317\10\264\1\0\3\136\1\0\2\136\1\137\3\136"+
65175	Math.min(lastInput.length,
7276	totalHits;
28886	intblockpool
2496	overlap,
34489	#setReaderTermsIndexDivisor(int)
38532	bin.length;
23795	follow-on
51002	(some
68081	Packed32(DataInput
7304	totalHits.
15661	si.docStoreSegment
54633	description);
3076	docID()
42088	collated
28997	d.openInput(fn,
16109	Float.NaN
11324	"\1\u02cf\160\0\1\u0332\4\u0479\2\0\1\u0479\15\0\1\u0479"+
68103	totbitcount
66483	UnicodeUtil.UNI_SUR_LOW_START
49026	FuzzyQuery.defaultPrefixLength;
14614	java.io.Serializable;
37644	docs.get(r.nextInt(docs.size()));
2167	{@link
29061	(tvfPosition-lastTvfPosition);
36096	org.apache.lucene.store.OutputStreamDataOutput;
9500	"\0\u49dc\0\u4a7f\0\u4b22\0\u4bc5\0\u4c68\0\u4d0b\0\u4dae\0\u4e51"+
57670	adjustments
13018	u6529
28874	nextPerThread.consumer.finishDocument();
14799	buffer.append("<double:
37275	CharArraySet}
38300	1024+63,
28446	CharSequence
28509	CompressionTools.compressString(binaryValCompressed));
61374	"\4\u065d\2\0\1\u065d\15\0\1\u065d\6\0\12\u065e\1\u062f"+
58099	pp2.doc)
28276	that),
38800	FieldCache.DEFAULT.getInts(r,
5568	fixed
48131	overlaps
8828	{/*
58111	pp2.doc;
61245	"\4\u05f3\2\0\1\u05f3\15\0\1\u05f3\6\0\1\u05f4\2\u05f5"+
40664	FSTTester<BytesRef>(random,
10337	"\1\0\2\136\1\137\1\u013f\1\u0140\1\u0141\3\0\1\136"+
64180	testbytearraydatainput
16560	that's
27880	"\u0061\u002C\u0031\u003A",
27158	"\u000B\u0031\u0027",
20940	setTermBuffer(String
4397	retun
20116	Explanation(0.0f,
6078	t.setTermBuffer("hello2");
42368	tp.getPayload(null,
17740	org.apache.lucene.search.ConstantScoreAutoRewrite
16258	Term(FIELD,s));
18946	{0,
65368	lastnode
25188	"metals?"));
39071	map.entrySet().clear();
54515	ArrayUtil.oversize(Integer.MAX_VALUE,
8652	lowercasefilter
58299	bByte
4001	virtualmethod
32121	{1,
42034	FieldValueHitQueue}
52368	writer.setPayloadProcessorProvider(new
55830	reality...:
57759	assertTrue("Reader
5819	rBits;
30214	indexPos);
8708	//w.w.setInfoStream(System.out);
9994	"\1\214\2\0\1\215\42\0\1\76\1\26\6\0\1\76"+
26405	outputByteNum
66209	{2,
17470	Term("f1",
7767	SELECTOR);
1157	retry
51541	message("after
18841	LATIN
26130	reversemul
10298	"\5\36\1\u0143\4\36\1\352\17\36\1\141\12\142\1\u013e"+
19266	chinese
26371	outputArray[outputCharNum]
20614	createComponents(final
33413	ChecksumIndexOutput(IndexOutput
40012	delete,
45374	U+A74E:
53092	trail
15714	normGen's
65492	delete:
30479	TermVectorEntry
65428	Contructor
35655	architectures.
64126	tmpStr.equals("ene"
32516	assertTrue(!threads[i].failed);
57586	reuse.length
3350	cachescores
3100	float[INITIAL_ARRAY_SIZE];
42286	testData
10089	"\3\77\7\0\1\77\1\0\2\77\7\0\3\77\2\0"+
41942	setdefaultfieldcodec
45363	U+A74D:
60544	"\12\u0399\1\u039a\175\0\4\u039b\2\0\1\u039b\15\0\1\u039b"+
9034	term.field;
16630	parents
2702	totalResults
64913	runsToDo
12615	u63ed
33739	traversing/hopping
57525	term.field)
22386	enhanced
59	applicable
65115	node.inputCount
63015	RANGEEX_START
36466	nodeIn.numArcs-1;
39994	subReaders[0].termDocs(term);
25091	assertFalse(wq1.equals(null));
2667	i=0;
29139	(SegmentTermVector)
15250	sync(Collection<String>
12214	u63f7
43513	assertFalse(bv.get(i));
26348	outputArray
41871	result.bytes[result.offset+byteIDX]);
65324	arcIdx=0;arcIdx<numArcs;arcIdx++)
13215	ue298
268	"bbb"
8286	directbytebuffer
67690	os.write(b,
21830	Field}s
61704	ue28e
18320	h.length);
49865	setfuzzyminsim
16620	pq.push(o);
30784	filling
33401	method.*/
34798	brown\"").toString());
30692	"\2\26\134\0\1\64\153\0\2\64\11\0\1\64\115\0"+
45392	U+A74F:
38474	assertTrue(indexedFieldNames.contains("tvnot"));
40442	fixes
54385	getwordset
1059	startDir
18573	ááááá",
31271	hasTested29
51058	(spec
5004	((0xfbffd4f8ffffd9ffL
13016	u63e3
65854	sets...
8930	greater
37565	Working
2579	querynorm
14726	DOUBLE);
24796	i=1;
10166	"\1\136\4\0\2\136\150\0\1\376\32\264\1\141\12\264"+
60903	"\1\u033c\161\0\4\u04bf\2\0\1\u04bf\15\0\1\u04bf\6\0"+
19943	MapBackedSet<E>
37925	setNext())
42677	w.addDocument(docs.nextDoc());
4465	numericrangequery
37789	termDocs.doc()
51205	message("addIndexes:
23084	place
59367	"\1\0\3\25\1\0\1\25\2\0\4\25\2\0\1\25"+
13417	u63d9
44881	U+A740:
2671	iw.getReader();
8352	org.apache.lucene.store.LockStressTest
29046	tvfPosition
11575	"\4\u0533\2\0\1\u0533\15\0\1\u0533\6\0\12\u0536\1\u0534"+
31838	printusage
48612	fieldState.attributeSource.addAttribute(PositionIncrementAttribute.class);
41884	lastoutput
20065	<pre>for
9050	term2.bytes[term2.offset
42105	int[],
42106	int[].
30068	u2097
15028	executes
36245	arcArray(idx="
14562	katakana
10407	"\175\0\1\346\1\u016a\2\230\1\u016a\1\u0178\1\230\2\u016a"+
44911	U+A741:
22356	toIndex,
4083	ascfield8
22364	toIndex)
4087	ascfield2
1297	UOEDirectory();
28566	tokenStart
4085	ascfield4
12509	u206f
67555	"a11"));
65759	(nTerms+1)-i;
5391	collator
66793	ByteFieldSource.class)
11733	executed
31065	si2.docCount,
4658	easy
30702	"\1\25\2\65\5\0\1\25\2\0\1\25\1\65\4\0"+
37261	deltacount
58940	downgrade
55748	warmCount;
36010	FilteredQuery(query,
7632	(EOFSeen
27428	"\u0030",
65833	termsInIndex,
4417	testSorting_4bit()
44883	U+A742:
37923	setNext();
49660	xsp
66018	t:two^10.0)^4.0)",
11621	"\2\u0556\1\u0555\1\u0556\1\u0555\1\u0554\175\0\4\u0558\2\0"+
55716	doTestIndexWriterReopenSegment(false);
13311	u205b
10517	"\1\347\12\230\175\0\1\u01a3\1\u01a9\31\230\1\347\12\230"+
37425	QueryTermVector("foo
7125	mininclusive
64374	doubletolongbits
31632	shouldstillbecompressed
10993	"\1\u0372\20\264\1\141\12\264\1\0\3\136\1\0\2\136"+
12108	u2079
22443	org.apache.lucene.analysis.TokenStream}.
28174	u2060
31524	handled
33655	optSegCount
3613	closeable
12910	u2065
56076	query.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
6182	Boost,
50164	(possibly
56481	SpanQueue(clauses.size());
52527	assertEquals("field3:dog",
10886	"\150\0\1\376\32\264\1\141\2\264\1\307\7\264\1\0"+
11728	zzAtBOL
61792	u2051
24115	doc.add
9525	"\0\uc891\0\uc934\0\uc9d7\0\uca7a\0\ucb1d\0\ucbc0\0\ucc63\0\ucd06"+
5932	shifts[base+1])
7101	xml
15982	org.apache.lucene.util.*;
22077	intended
58685	currentOff);
55023	doReaderPooling
62979	dir.createOutput(dest);
7891	handle.
25433	usages
14538	word_type
51876	isLocked(Directory
14646	natural
12412	ue209
37530	assertEquals(0.71,
20273	citer
42782	deprecate
39873	doOpenIfChanged()
31686	"Qwerty";
33355	System.out.print("
17263	terminfosreader
49437	'\u005c\u005c'
6446	Full
63203	(FieldCacheSource)
42133	this.ints;
31699	"Qwerty",
15848	(CHECK_DIR
15843	plain
32391	getlockprefix
8344	usage.
39374	xor
50312	usage,
888	trace
15503	track
52875	LIABLE
50954	getAnalyzer());
53780	(set.map
42626	testfilterworks
16984	thread-safe.
49431	'F')
30067	u2030
992	17-NUM_THREAD*NUM_ITER;
7900	usage:
58696	num--;
60020	"\2\0\1\25\1\141\20\36\1\u01b6\11\36\1\142\12\143"+
58423	assertEquals("Not
37271	handles
4513	numeric
24606	assertTrue(Float.isNaN(sd[j].score));
2237	findmerges
15501	version;
11532	"\1\u0511\13\0\1\u0325\161\0\4\u0515\2\0\1\u0515\15\0"+
58839	Term("f"+i,
27872	"\u0061\u002C\u0061\u003A",
45000	U+A747:
18720	"ÙÛÚ©Û",
57160	bits[startWord]
54604	ArrayUtil.mergeSort(a,
57701	j=0;j<11;j++)
56647	expiration"
782	IOException(CRASH_FAIL_MESSAGE);
34142	t[i].position;
52962	0xD800
65282	fanout
1001	sync");
56843	"\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0"+
20138	clause(s)");
6514	NumericTokenStream}).
42312	testPayloadFieldBit()
28181	u2019
17903	assertEquals("max,nul,T,T",
29563	"\1\132\11\133\1\132\3\133\1\132\5\133\22\0\31\132\3\133\244\0"+
998	"sync".equals(trace[i].getMethodName()))
44957	U+A748:
30760	version.
20518	version,
40803	allowRandomSuffixSharing)
28916	description()
15931	version)
62851	(matchVersion.onOrAfter(Version.LUCENE_34))
67402	assertRefCountEquals(2
67398	assertRefCountEquals(1
38607	version2
20791	"bar"
59262	"\1\0\1\32\1\0\2\32\1\0\3\32\1\0\2\32"+
33495	buf[0])
30866	(Collator)
45002	U+A749:
52244	deleteunusedfiles
1162	removing
53112	codePoints,
53108	codePoints.
19827	resID.compareTo(prevID)<0);
27039	"\r\u0308\u000B",
67544	(multiSegment)
11517	"\5\230\175\0\1\346\16\230\1\u0509\13\230\1\347\12\230"+
56698	needsMerging
24461	"BFJHD");
40450	TokenFilter},
32625	randomInt
27055	"\r\u0308\u00AD",
24827	docID="
23365	modifier.forceMerge(1);
37427	checkGold(String[]
66724	<code>Integer.MIN_VALUE</code>
30855	IndexableBinaryStringTools},
7043	termCompare(Term
4250	topDocs.scoreDocs.length
65471	(likely
12215	u649a
44913	U+A743:
59231	"\2\25\1\0\2\25\1\0\3\25\1\0\1\25\2\0"+
60325	"\1\172\2\0\1\173\41\0\1\25\2\65\2\0\2\174"+
53665	"odd",
8893	FilteredDocIdSet(DocIdSet
39823	buffer.append("*");
65660	VERBOSE_REF_COUNTS)
59938	"\1\67\1\0\1\25\2\0\1\25\1\141\10\36\1\355"+
33861	repetitions:
51562	(MergePolicy.MergeAbortedException)
16465	though
38040	int[]{
33930	repetitions,
4521	testrangesplit_4bit
33858	repetitions.
55993	positions[index];
44886	U+A744:
51426	.applyDeletes(readerPool,
34615	term.field(),
21585	term.field())
63001	_TERM_CHAR
42289	length.",
23704	follow-up
12616	u6490
29317	nextPosition()
32842	(field.isIndexed()
66780	Arrays.equals(this.fields,
1244	assertEquals(CRASH_FAIL_MESSAGE,
13418	u647c
60993	"\4\u0502\2\0\1\u0502\15\0\1\u0502\6\0\12\u0502\1\u0503"+
54503	currentSize);
23518	flushed:
44915	U+A745:
35410	this(kind,
13017	u6486
57489	PagedBytesDataInput
66275	xxx
19457	java.nio.charset.Charset;
2275	protected
51164	waitForMerges();
51384	flushed)
51469	flushed,
34374	flushed.
17228	(si.getDocStoreIsCompoundFile())
33393	TokenFilter(TokenStream
44954	U+A746:
28087	SINGLE
57378	a=this;
58271	sb.append(Integer.toHexString(bytes[i]&0xff));
2246	org.apache.lucene.util.English;
50254	DVD-R
34461	this.maxThreadStates
55004	maxFields=4;
3788	versions
28578	(buffer
49424	('0'
6408	correctOffset(int
26477	x7fff
46656	,"((",
24809	ArrayList<String>());
971	analyzer).setMaxBufferedDocs(-1)
59651	"\4\0\1\172\2\0\1\173\41\0\1\25\2\65\2\0"+
28849	docInverterPerThread.docState;
39806	subReaders.length;
53115	codePoints[r];
52885	USE,
27688	"\u0061\u2060\u0308\u0031\u002C",
16316	spanorquery
53383	readLength);
22756	bigger/lower
39253	positions.get(i);
44143	U+A73D:
17544	parallelHits
37908	backingStore.remove(new
20961	newSize
18207	extractterms
58341	bytesequals
60028	"\1\137\4\0\2\137\227\0\1\u01cd\163\0\1\u01ce\32\u01cf"+
44791	"á´"
42305	testData[i]);
19905	reloaded
63006	RPAREN
16097	anyerrors
35006	scorerDoc
44246	U+A73E:
52237	midstartcommit
9287	StandardTokenizerInterface
62454	optionalScorers
10305	"\1\0\1\25\2\0\1\25\1\u013d\24\36\1\u0144\5\36"+
58065	docWriter.newPerDocBuffer();
44389	"á´"
65938	-(b:three
55876	endtime
27444	"\u0030\u0030"
32106	byte[ArrayUtil.oversize(buffers.length+1,
61395	"\175\0\1\u034d\32\u02e2\1\u034e\3\u02e2\1\u0665\6\u02e2\175\0"+
19872	HashMap<FieldScoreQuery.Type,Object>();
40479	Sometimes
67233	RuntimeException("unrecognized
12209	u60c8
58361	xfc
58362	xfd
58360	xfe
24024	"h",
5452	xff
65080	prefixLenPlus1);
50099	#IndexWriter(Directory,
32032	needing
44140	U+A73B:
38331	xfl
9954	"\21\0\1\113\17\0\1\25\1\66\1\64\1\115\3\0"+
44107	U+A73A:
12610	u60be
18434	DecimalFormat
21827	Field[]
49756	jj_expentries
44465	"á´"
66935	outputs2.common(pair1.output2,
39458	ridiculous
13011	u60b4
27474	"\u0030\u0031"
58359	xee
13412	u60aa
53227	xef
9565	"\1\u930b\1\u93ae\1\u9451\1\u94f4\1\u9597\1\u963a\1\u96dd\1\u9780"+
44112	U+A73C:
30342	anyFailure
64156	xf0
60105	"\1\137\4\0\2\137\150\0\1\u0101\3\266\1\u0209\26\266"+
20129	shouldMatchCount++;
16854	(reopenedReader
3032	including
18785	"à¹à¸¥à¹à¸§à¹à¸à¸­à¸à¸°à¹à¸à¹à¸«à¸",
60172	"\1\u0250\10\266\1\142\12\266\1\0\3\137\1\0\2\137"+
60130	"\1\0\2\154\1\140\1\u0143\1\u0144\1\u0145\2\0\1\77"+
2673	"one";
40189	this.pointer
17888	medId,
31009	fw.close();
40454	Attribute}-based.
7985	lead
53106	Cover
25427	leaf
49824	xla
35451	Hacker's
66054	"one",
9451	"\53\0\32\2\3\0\4\2\32\0\4\3\17\0\1\11"+
11994	hiragana,
64727	"b0"));
6022	2000;
65665	rc.IncRef();
8471	analyzed.
52213	os_arch
4144	upper,
31141	Behaves
10423	"\1\230\1\u017d\4\230\1\u016a\2\230\1\u016a\14\230\1\347"+
7442	testMoreDocs()
65347	tweaks
23440	leak
3510	b.toString();
32356	testcustomlockfactory
4313	upper;
11516	"\1\347\12\230\175\0\1\346\32\230\1\347\4\230\1\u0508"+
37209	startaddress
42991	#maybeRefresh()}
44248	U+A73F:
11841	(numRead
32564	0xC9,
29610	"\6\0\130\132\10\0\51\132\1\133\1\132\5\0\106\132\12\0\35\132"+
43797	assertTermEquals("A",
44272	"á´"
50211	messageID
39088	testchararraymap
63039	"<token
31019	setMaxBufferedDocs(-1).
19727	CHUNK;
3029	<p>See
42779	org.apache.lucene.analysis.tokenattributes.CharTermAttribute}.
64412	(!compressor.finished())
63083	-DtempDir=build
61258	"\1\u05fd\1\u05fe\175\0\4\u05ff\2\0\1\u05ff\15\0\1\u05ff"+
37219	readfirstarc
32984	System.arraycopy(lastPositions,
17358	assertEquals("1001",
53217	half_mask
796	expected
19413	field.hashCode());
17337	Index.NOT_ANALYZED));
42413	(Math.log(i)
10054	"\11\0\1\25\11\0\2\25\2\66\4\0\2\25\3\66"+
40473	performed.
64147	xa0
52049	x_n
30595	"\16\0\1\27\4\0\1\27\2\0\2\27\15\0\1\27"+
4289	checkTermCounts(precisionStep,
32778	xa6
63598	x5432
63597	x5431
48560	fieldState.reset(docState.doc.getBoost());
16576	getSentinelObject();
38823	z",
16334	itemizedfilter
26918	"\u0001\u0001",
6424	currentoff
63595	x5421
42688	random.nextInt(numStartDocs)),
26366	++outputCharNum)
35151	minpayloadfunction
25852	folding
59485	"\1\66\1\67\1\0\1\25\2\0\1\25\1\141\17\36"+
54784	path.delete();
49209	c.setOccur(BooleanClause.Occur.SHOULD);
4418	testSorting(4);
54313	initsize
28134	linebreak
31472	(fi.name.equals("content"))
44138	U+A739:
5993	maxpos
39798	initialize(newReaders);
46822	ASCIIFoldingFilter(tokenizer));
54388	ArrayList<Explanation>
41436	IntsRef()),
24518	"ECAGI");
29598	"\44\132\4\0\24\133\1\0\2\133\5\132\13\133\1\0\44\133\11\0"+
10811	"\1\0\2\u01ca\1\u020d\3\u01ca\1\u01cc\1\0\1\u020c\3\0"+
21432	two/4",
36541	arcIdx="
10503	"\51\u0169\1\u01a2\6\u0169\3\0\2\u0169\4\0\1\u0169\151\0"+
29249	termFreqs);
49949	jj_scan_token
21303	csr.openInput(name);
21360	check.close();
27463	"\u0030\u0061\u003A",
21578	-1?searchTerm.text().substring(0,idx):
11361	"\1\u0494\1\347\12\230\175\0\1\376\24\264\1\u0495\5\264"+
34384	#setMaxBufferedDeleteTerms(int)
61238	"\11\232\175\0\1\351\24\232\1\u05ed\5\232\1\352\12\232"+
9152	localfieldswriter
11031	"\12\u0393\1\u0391\13\0\1\u02cf\160\0\1\u0332\4\u0390\2\0"+
33411	Checksum
41080	prefix.offset,
56711	commits.size());
6889	includesMin()
32772	xe4
36178	synthetic
47990	maxDoc);
19752	counts[posIndex]++;
64146	xe2
12612	u6204
32277	_TestUtil.getTempDir("TestLockFactory.8");
21963	xe0
44270	"á´"
5629	Similarity.
5983	bitspervalue
61162	"\1\u05a2\10\u02e2\1\u034e\12\u02e2\175\0\1\u034d\4\u02e2\1\u05a3"+
2316	doc.add(newField("multiField",
10963	"\1\u035b\21\230\1\347\12\230\175\0\1\346\3\230\1\u035c"+
14863	FieldComparator.IntComparator(numHits,
59454	"\1\62\4\0\1\172\2\0\1\173\41\0\1\25\2\65"+
57913	extensionsInCFS;
58631	NRTCachingDirectory
50282	experiment
2813	action
20648	fsd.close();
59664	"\1\266\1\u010a\5\u0107\6\266\1\142\12\266\1\0\3\137"+
24227	searchY.close();
17311	"value"));
32779	xd8
62748	sd.score);
21538	cfr.openInput("file."
52008	clarification
42994	#acquire()
42723	<br><br>
65040	this.shareMaxTailLength
56729	MockAnalyzer(random)).setIndexDeletionPolicy(policy));
30355	TwoPhaseCommitWrapper(impl,
5602	SmallFloat.floatToByte315(-Float.MIN_VALUE));
67261	openReader()
20496	org.apache.lucene.analysis.KeywordTokenizer;
6282	inclusive)
53463	acting
35323	(stream.incrementToken())
31455	mergePolicy.setNoCFSRatio(1);
32776	xc9
37306	CharArraySet(matchVersion,
55374	fields.add(newField("f"
14677	Locale)
34237	DEFAULT_READER_TERMS_INDEX_DIVISOR
64142	xc2
49346	inclusive,
2762	lastCollected
53225	xc0
6532	inclusive.
20964	termLength();
16985	PositionBasedTermVectorMapper
66211	oldSimilarity
53229	xbd
40296	prunedeletedsegments
54269	MaxBytesLengthExceededException.class)
14773	Locale,
2423	200);
53228	xbf
12211	u620e
34324	Similarity}
25184	"mXtals",
26701	maxDoc()
32775	xb2
66284	postingsCompacted;
20872	analyzer.getOffsetGap(field);
9825	"\1\25\122\0\1\25\6\0\3\25\2\0\1\25\2\0"+
37212	readlasttargetarc
21439	e1.seek(100);
29440	org.junit.runner.Result;
4493	positive_infinity
30865	contention
62252	writer.addDocument(doc(new
34104	unionTermGroups(ArrayList<OpenBitSet>
30872	collationKey,
36953	fst.writer;
24424	docValues[doc];
63989	0xC2,
59868	"\1\u0166\6\0\12\u016a\1\u0167\13\0\1\u0126\160\0\1\u0168"+
38948	getmergedfieldinfos
29873	"\3\0\1\54\1\0\1\103\5\0\1\34\11\0\3\25"+
48758	TestToken[]
54234	org.apache.lucene.util.BytesRefHash#compact()}.
9831	"\1\64\1\0\2\25\3\0\1\25\4\0\2\25\2\0"+
6579	<br><h3>How
25351	"LuceneFox",
37618	List<List<String>>
65704	"\"";
11335	"\4\u047f\2\0\1\u047f\15\0\1\u047f\6\0\12\u0481\1\u0480"+
59812	"\2\137\150\0\1\u0153\4\266\1\u0155\25\266\1\142\12\266"+
52988	(upto+4
50923	backport
3487	(!paused)
45313	"á´"
41680	rootNode.arcs[0].nextFinalOutput
40297	rollbackcommit
6082	t.termBuffer();
44096	U+A734:
67630	ReadOnlyDirectoryReader);
40323	TermScorer(Weight
767	CrashingFilter
68142	newInstance()
45400	"á´"
50637	NullPointerException("MergeScheduler
45316	"á´"
2719	//==fail
9767	"\2\136\2\0\1\47\1\0\1\50\1\0\1\51\2\0"+
40223	readerTermDocs[i];
44120	U+A733:
27947	"\u0031\u0027\u002C",
30663	"\1\25\1\0\1\25\2\0\1\25\1\0\2\25\4\0"+
234	RECREATE
31853	STRING_INDEX
40647	List<FSTTester.InputOutput<Long>>
66775	getSort()
27085	"\n\u0308\u3031",
42234	testKeywordAttribute()
45380	"á´"
59339	"\2\0\1\60\4\0\1\74\14\0\1\62\4\0\1\75"+
19178	testaramaic
32756	charBuf.arrayOffset());
39633	comparetolastterm
63300	0x652,
45830	,"U",
65280	LUCENE-2934
44082	U+A732:
31734	From
26995	0300
5917	get(final
45597	U+A731:
63306	0x654,
7636	"\"")
26920	0308
42168	intsequals
39885	doOpenFromWriter(boolean
20659	newFSSwitchDirectory(Collections.<String>emptySet());
35501	#define
63302	0x653,
37302	ignoreCase){
41702	startArc
57614	comparefield
6206	body=>10)
7825	wtf
29288	readtermvectors
19671	~15%
55494	"f1");
53003	0xBF;
19546	reflected
63990	0xBF,
25061	gdhjicefab
39144	result[i]
18509	URLs
22275	RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];
3412	perform
29197	TermVectorOffsetInfo[freq];
35517	u=ones
63460	0x87521,
44104	U+A738:
50062	os.seek(fe.directoryOffset);
43883	$codes{$code};
23478	sawMaybe
9607	"\2\u68fb\2\u699e\2\u6a41\2\u6ae4\2\u6b87\2\u6c2a\2\u6ccd\2\u6d70"+
13012	u6157
7931	enabled
28992	checkValidFormat(idxName,
45388	"á´"
20393	(fieldsToLoad.contains(fieldName)
12611	u6161
11566	"\1\u0325\160\0\1\u0386\4\u052b\2\0\1\u052b\15\0\1\u052b"+
12818	ue52e
39683	rollbackHasChanges;
253	//Directory
37125	outputstream
13413	u614d
15491	Tracks
44135	U+A737:
7975	enables
14595	syntax
65570	message("deleteCommits:
20165	w.scorer(reader,
22964	LUCENE-2989
7724	aid",
63299	0x651,
50969	synchronized(segmentInfos)
49871	setlowercaseexpandedterms
29507	testsystempropertiesinvariantrule
12417	ue538
23277	ldoc
60662	"\15\0\1\u0413\6\0\12\u0413\1\u03a0\13\0\1\u033c\160\0"+
50261	poolReaders;
61708	ue51a
424	www
54278	ref.offset
59053	NullQuery?
13219	ue524
55323	nextInt(0xd800,
12210	u616b
44100	U+A736:
4160	q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
9913	"\6\0\1\33\153\0\1\33\5\0\1\33\2\0\3\33"+
58492	"\uD800\ud801\udc1cB"
49123	enable)
29047	tvf.seek(tvfPosition);
61394	"\12\u02e2\175\0\1\u034d\3\u02e2\1\u0664\26\u02e2\1\u034e\12\u02e2"+
43912	ACUTE
31693	analyzer.tokenStream("field",
33643	ldmp
861	writer.addDocument(doc);
44132	U+A735:
2547	getspans
9436	"\2\141\30\0\3\141\1\137\1\0\1\140\1\0\1\137\1\136\32\0"+
41274	toString(fstEnum.current().input));
62701	(subReaders
38851	testListCommits()
49125	enable;
6419	readAheadLimit
9872	"\3\26\1\0\1\26\2\0\4\26\2\0\1\26\135\0"+
63135	numSavedTerms));
46863	macron
59451	"\1\137\4\0\2\137\2\0\1\167\1\0\1\51\1\0"+
60807	"\2\0\1\u0474\15\0\1\u0474\6\0\12\u0474\1\u03a0\13\0"+
57610	getdatainput
27562	"\u00AD\u00AD",
31179	unimportant:
57745	assertTrue("writer
36933	Free
7082	super.close();
37888	newHashMap()
45105	"á´"
24128	data[i][4],
6079	"hello2");
4098	-noDocs/2
21183	FieldCache.StringIndex
4275	searcher.search(tq,
26461	coding_cases
21145	matching,
58526	newWords
5530	exponent
42449	payload.offset,
62867	scanner.getText(termAtt);
28810	newChildPointer;
3552	MergeAbortedException()
56234	methodsThatShouldNotBeOverridden.add("doOpenIfChanged");
35613	pop((A[i]
37493	"words"));
53083	UNI_SUR_LOW_END)
39250	lastPos
6660	covers
45224	"á´"
318	reader.close();
46841	strict
55502	rule!",2,tfv2.getTerms().length);
36727	found!");
65221	parentNode.setLastOutput(input.ints[input.offset
30987	workDir
48774	offsets[i][j]
53004	0xBD;
50469	message(String
27087	"\n\u0308\u0041",
52912	UNI_SUR_HIGH_START
29382	while(len
45040	"á´"
479	reopened
53604	searchable.search
52989	out.length)
11043	"\12\u039a\1\0\2\u0214\1\u026d\3\u0214\1\u0216\1\u0167\1\u0168"+
42408	(Math.log(n)
43859	URL>
5403	prefixquery
54848	reopener
65741	TypeAttributeImpl)
1813	already
49121	multi-phrase
30520	int[124];
45222	"á´"
35871	(BooleanQuery)
1694	shuffle
4611	assertNull(conf.getMergedSegmentWarmer());
39125	positions.get(positions.size()-1).intValue()
51400	flush:
14710	subclasses.
64574	bufferPosition+=len;
42927	"startOffset",
14764	Could
29910	"\1\25\1\0\1\25\1\0\1\25\4\0\1\25\4\0"+
42547	stream.getAttribute(TypeAttribute.class);
15337	nf.getNumericValue());
40031	deleter
17070	getPosition()
9168	flush.
44520	U+A730:
44937	"á´"
48629	flush,
3600	deletes
38489	Field("tvposition","one
38951	itfield1
28855	primaryPerThread.charPool;
38952	itfield2
67243	setreuseaddress
31889	FloatParser
48391	'currentDoc'
22842	hints
37296	ignoreCase);
25371	LUCENE-2901
19007	emails
31185	"19.nocfs",
41358	Util.getByOutput((FST<Long>)
249	deleted
23470	wrt
66082	parser.parse("bla
56175	testrangequeryid
32574	IndexableBinaryStringTools.encode(binary,
41769	r[1].output.output2.longValue());
5153	jjStopStringLiteralDfa_1(0,
62470	Count
8310	resourcedescription
23103	indexStoreB.close();
7220	issue
7144	x64365465
59242	"\1\0\1\25\15\0\1\25\6\0\1\25\122\0\1\25"+
36144	BIT_ARC_HAS_FINAL_OUTPUT
36726	mid-1;
25083	wq3
36793	super(bytes,
60843	"\1\u016e\2\0\2\u021e\4\0\1\u021e\217\0\1\u0354\175\0"+
25082	wq2
40365	TestTopScoreDocCollector
56739	testKeepNoneOnInitDeletionPolicy()
8390	LockVerifyServer.\n"
25079	wq1
37681	woo
44868	"á´"
25107	wq,
5889	Packed64(DataInput
27451	"\u0030\u00AD",
25004	testlocalesort
22592	reflector
21648	wildcardSearchPos++;
55347	synchronization.
50151	synchronization,
44830	"á´"
56255	testrunner
3401	using
56942	"\1\0\1\11\3\1\1\11\1\1\13\0\4\1\2\0"+
10036	"\1\0\2\25\2\0\1\25\2\0\1\25\1\0\1\25"+
40935	//System.out.println("lookup
5656	intbitstofloat
32958	skippingLongTerm()
23145	indexSearcher1
1461	missing
28533	stringcompressed
23147	indexSearcher2
17451	top-level
13414	u61f0
48626	exc...
49996	FORMAT_NO_SEGMENT_PREFIX;
62904	for(;i<45;i++)
24101	oStrokeFirst
60783	"\1\137\4\0\2\137\150\0\1\u0101\1\u0467\31\266\1\142"+
26606	terms.length
18367	printHits("testBooleanRequiredEqualScores1",
57103	setBits(long[]
48300	possibleMatchPayloads.size()
31175	IndexUpgrader.
28419	CharsRef(chars,
31580	for(String
56914	"\4\0\1\24\1\25\1\0\1\53\1\0\1\11\2\54"+
50585	message("init:
66758	Searcher#search(Query,int)
67548	Field("field1",
52204	mergesuccess
40875	(FST<Long>)
52544	org.apache.lucene.search.spans.SpanQuery}
40414	settings,
16094	run_time_msec
36506	normal"
50262	settings.
11215	"\12\u0422\1\u037f\175\0\4\u0423\2\0\1\u0423\15\0\1\u0423"+
61293	"\32\u02e2\1\u034e\1\u02e2\1\u0620\10\u02e2\175\0\1\u034d\24\u02e2"+
48599	field.readerValue();
40711	IntSequenceOutputs
18890	"don't",
58429	assertTrue(set.contains(TEST_STOP_WORDS[i]));
9595	"\2\u2bdb\2\u2c7e\2\u2d21\2\u2dc4\2\u2e67\2\u2f0a\2\u2fad\2\u3050"+
40334	(++pointer
61216	"\4\u02e2\1\u05cf\25\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2"+
20074	BooleanWeight
17772	sub-readers.
49881	examined
50315	sub-readers)
48843	vector.getTermPositions(i);
50459	readerPool.release(reader);
14998	randomPhraseQuery(long
52137	dsfilescopied
25512	item.getFieldName());
19444	DocFieldProcessorPerThread
41152	termsSet.add(toIntsRef(term,
57577	compare.
32206	SingleInstanceLockFactory
43575	compare)
37949	WeakReference<Object>
7126	maxinclusive
66318	shrinkHash(int
20925	TermAttribute
11392	"\1\u02cf\160\0\1\u0332\4\u04ad\2\0\1\u04ad\15\0\1\u04ad"+
49987	FileEntry
52723	"4"};
1748	UTF8
18899	"21.35",
19892	compare:
49974	fileCount</li>
67355	true).refreshedReader;
64426	compressionLevel);
54578	(-1)
2430	testIgnoreSpanScorer()
19897	innerArray[j].getClass(),
58499	.contains(lowerArr[i]));
16473	getdeletionpolicy
32798	encodedbuf2
32794	encodedbuf1
67609	testReopenOnCommit()
34451	mergePolicy)
19402	who
35253	ProxSkip
65327	arcs[arcIdx].output);
30821	read2;
24783	Integer.MIN_VALUE);
61207	"\1\u0349\4\u05c5\2\0\1\u05c5\15\0\1\u05c5\6\0\2\u05c6"+
52018	messageid
9756	"\100\0\1\116\6\0\1\117\32\0\1\120\21\0\1\121"+
32393	dirname
60919	"\6\0\12\u04cb\1\u047e\13\0\1\u02e1\160\0\1\u0349\4\u04cb"+
32646	(testNum
34257	mergePolicy;
65870	i<bigIter;
7299	populated
56451	SpanOrQuery(SpanQuery...
50644	config.setMergeScheduler(mergeScheduler);
34667	other.includeSpanScore)
51404	mergePolicy,
43236	bbb");
20653	switchDir
5727	java.util.Arrays;
9927	"\3\25\1\0\1\25\5\0\1\25\2\34\5\0\1\25"+
29426	TestSimpleExplanationsOfNonMatches
51084	mergePolicy.
29612	"\54\142\4\0\21\143\7\142\2\143\6\0\12\134\1\142\3\0\2\142"+
20201	c.getQuery().rewrite(reader);
18254	Field.Keyword("id",
10277	"\1\172\304\0\1\u0123\1\u0124\1\u0125\1\u0126\1\u0127\1\u0128"+
13013	u61fa
39590	lastTi.freqPointer);
11105	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\30\264"+
672	throw
11704	zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0,
3172	cleared)";
16908	createindex
7383	populates
66799	processTerms(queryTerms);
24034	"g",
35283	lastSkipDoc[level]
6285	super.getRangeQuery(field,
10939	"\6\0\12\u033e\1\u02d8\13\0\1\u0122\160\0\1\u0163\4\u033e"+
16089	_TestUtil.rmDir(dirPath);
1103	message
38051	prefixVals[i]=NumericUtils.intToPrefixCoded(vals[i]);
10366	"\2\76\1\77\1\0\1\26\2\0\1\25\1\u0117\32\36"+
16167	org.apache.lucene.search.spans.SpanQuery;
26180	getArray()
57295	(--i
65661	IncRef
7554	why
7434	2011.
57087	bits.length,
22157	2010.
7641	addEscapes(errorAfter)
30499	href="http://unicode.org/reports/tr29/">Unicode
43053	(doTryRefresh)
50645	#setMergeScheduler(MergeScheduler)
40379	testoutofordercollection
21869	only)
20845	PerFieldAnalyzerWrapper(Analyzer
37134	only'
15582	SegmentInfos.FORMAT_HAS_PROX)
5989	majorbitpos
45734	U+A728:
50052	disk-full
9302	ZZ_CMAP_PACKED
5378	(start++
2546	checkexplanations
59821	"\1\u0156\4\266\1\u0107\17\266\1\142\12\266\1\u0154\3\137"+
57075	bits.length;
61706	ue3d4
15364	large_lazy_field_key
8854	testjunitruleorder
31503	Field("fie\u2C77ld",
50335	handing
10135	"\4\0\1\62\2\0\1\63\41\0\2\25\1\64\1\0"+
10808	"\1\u025c\12\u0206\176\0\4\u02c0\2\0\1\u02c0\15\0\1\u02c0"+
53664	"even"
63591	x5321
10635	"\1\u020c\3\0\2\u01c8\4\0\1\u01c8\151\0\46\u01ca\1\0"+
42279	createattributeinstance
45758	U+A729:
31608	origSegCount
32433	.setOpenMode(OpenMode.CREATE));
50323	getReader");
60611	"\1\352\12\232\175\0\1\351\32\232\1\352\5\232\1\u03ee"+
12816	ue3e8
49972	format:<br>
3525	List<OneMerge>
10589	"\2\0\1\u01e2\15\0\1\u01e2\6\0\12\u01e2\175\0\1\346"+
4482	testleftopenrange_8bit
13217	ue3de
3406	<p>The
4101	inclusive/exclusive
29255	format_size
43549	testDgaps()
64466	include.getField();
32563	0xB2,
41033	verifyPruned(int
58926	isIndexed,
12415	ue3f2
58930	isIndexed)
55686	mainWriter.close(doWait);
21807	unchanged.</p>
42666	merge.segments.size()
21135	persistent
38107	-0.0f,
58677	nrtcachingdirectory
58892	isIndexed;
9993	"\1\210\2\0\1\211\12\0\1\212\17\0\1\213\21\0"+
8347	LockStressTest
27430	"\u0030\u0308",
37547	Term("repeated",
24153	writer.close
15255	BufferedIndexInput
65375	prependoutput
10369	"\1\57\4\0\1\73\14\0\1\61\4\0\1\74\2\0"+
2685	queryParser.parse(qtxt);
57827	data.put("label",
18739	ÏÎµ
13015	u6340
16601	add(element);
13416	u6336
35993	y",
12031	zz_lexstate
54226	assertEquals(uniqueCount,
67644	testmultireaderreopen
29637	"\103\0\56\132\2\0\u010d\132\3\0\20\132\12\134\2\132\24\0\57\132"+
36032	bq2.add(filteredquery,
51623	_mergeInit(merge);
36901	locality?
33964	rptTerms
55718	createIndexNoClose(false,
21997	termsWriter
54658	SimpleFSLockFactory}
23019	lDoc3.add(newField("fulltext",
15067	FieldsReader(dir,
59313	"\1\141\10\36\1\146\6\36\1\147\12\36\1\142\12\143"+
26958	"\u0001\u0041",
58006	getPerDoc()
60526	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\1\u038f"+
23954	NUM_STRINGS;
17637	initvaluetest
3060	way
15016	testincreasingsloppinesswithholes
39193	+")");
60146	"\1\u022b\1\u022a\2\u0229\2\u022a\1\u0229\1\u022a\1\u0229\1\u0228"+
216	was
54430	/>\n");
51330	startCommit(toCommit,
37807	queryExpl;
59098	"\0\u3bda\0\u3c7d\0\u3d20\0\u3dc3\0\u3e66\0\u3f09\0\u3fac\0\u404f"+
41741	Comparator<Pair<Long,Long>>
2468	Remove
51210	"dup
51509	mergedReader.getSegmentInfo().getBufferedDeletesGen();
32263	File(TEMP_DIR,
68122	prePopulate
63981	'L',
45930	,"V",
66055	assertEquals("+b:one
64822	-loc-1;
36023	newStaticFilterA();
67911	overlapped)
55492	doc.add(newField("f2",
23368	hitCount
19921	testrankshort
60695	"\175\0\1\u034d\4\u02e2\2\u0428\2\u02e2\1\u0428\1\u02e2\1\u0428"+
53485	weight,int
43583	dotestgetsetvectorofsize
65734	olddeletable
34350	flushed/merged
63588	x53
63592	x54
63585	x51
26956	LETTER
63586	x52
38364	x3l
30364	wrapper.commit(new
38866	LUCENE-2812
53226	x3f
5820	~(~0L
14561	katakana_type
49366	templates.
6104	Attribute
31062	merger.merge();
5263	input_stream
11581	"\11\230\1\u0539\175\0\1\346\4\230\1\u016a\25\230\1\347"+
33189	AttributeReflector
63601	x62
56898	"\0\u01b2\0\u01c0\0\u01ce\0\u01dc\0\u01ea\0\u01f8\0\322\0\u0206"+
63603	x63
15726	fieldIndex
63607	x64
63615	x65
20432	1192104129000L));
63600	x61
26293	decode
10292	"\1\136\1\143\1\136\1\0\1\136\1\144\1\137\1\u013f"+
59248	"\1\0\1\25\5\0\1\25\7\0\1\25\3\0\1\25"+
18103	getBoost();
10331	"\1\136\4\0\2\136\150\0\1\u014e\32\264\1\141\12\264"+
64495	(!moreExclude
63632	x71
63633	x72
63647	x75
32773	x76
63635	x73
14876	FieldComparator.ByteComparator(numHits,
31568	System.out.println("checkAllSegmentsUpgraded:
63639	x74
52981	result.length
2073	fst.outputs.outputToString(scratchArc.output)
52624	allclauses
27594	"\u0300\u0041",
9307	"\1\153\1\156\1\157\1\175\1\160\1\176\1\201\1\161\1\162\1\163"+
20676	createindexnoclose
42086	Given
64493	excludeSpans.end()
15669	String>(diagnostics);
57151	expandingWordNum(endIndex-1);
37285	Input
21546	simplefsinputs
4517	precstep
44212	"á´"
481	ramdirectory
21962	x80
63695	x81
63696	x82
63698	x83
63702	x84
6375	floatvalue
63710	x85
57409	x86
26035	ScoreDoc[0];
63757	x87
10798	"\10\264\1\u02b5\21\264\1\141\12\264\1\0\3\136\1\0"+
54156	.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
7258	ScoreDoc[0],
6948	NumericRangeTermEnum)
32770	x98
38508	(tdocs
51359	message("commit:
22540	this.");
2219	segmentsToMerge)
67018	LUCENE-2852
64973	UnCompiledNode<T>[]
24276	Byte.MAX_VALUE
30996	files.add(createOutput("test2.txt",
62219	iter2);
22876	candidate
13415	u6293
67014	i.seek(1024);
7694	x7e
54684	File(lockDirName));
5661	x7f
60462	"\1\u0352\15\0\1\u0352\6\0\12\u0352\1\u0284\175\0\4\u0353"+
7980	hack
30935	MyTopsDocCollector(5);
66653	testFailureInitializer()
15382	testlazyfieldsafterclose
34428	#setRAMBufferSizeMB(double)
59739	"\12\0\1\214\17\0\1\215\21\0\1\216\2\0\1\217"+
10828	"\1\u02d4\6\0\12\u02d4\1\u0272\175\0\4\u02d5\2\0\1\u02d5"+
43003	Semaphore
66080	"f3"
33714	hasRpts;
44680	FISHHOOK
2765	"doc
5565	v1.3)
55367	fields.add(idField);
40977	pair.input));
58345	utf8sortedasunicodecomparator
26864	Problem
21450	a2.seek(1027);
13014	u629d
2277	result
60570	"\15\0\1\u03b0\6\0\2\u03b4\1\u03b0\2\u03b4\2\u03b0\1\u03b4"+
48749	{"this",
5818	bitPos);
30609	"\3\0\1\102\5\0\1\102\7\0\1\102\4\0\2\102"+
26597	reader.norms(f.name(),norms,
18622	"Ø³ÙØªÙ",
64157	x9d
10675	"\1\u023b\1\u023c\1\230\231\0\12\u023d\10\0\1\u0167\1\u0168"+
36980	unchanged:
42988	refreshing
52894	TORTIOUS
51979	waitUpdate(int
17330	only,
11836	finally:
64158	x9e
56806	expiretime
30950	only.
62808	contentidx
19163	ØØ¿ØØ§
53543	hc);
17514	only:
64477	include.getSpans(reader);
24018	String.valueOf(Short.MIN_VALUE),
2082	(scratchArc.isFinal())
63462	0x87531,
40270	hasnorms
42351	TermPositions[]
54815	canonicalpath
8755	x="
25294	matchOneDocWild[i].length;
9735	"\1\0\1\32\1\0\1\32\242\0\1\33\112\0\1\47"+
37254	usearcarray
37182	targetnext
29251	format_version
63463	0x87532,
1489	MockAnalyzer(random,
10917	"\2\0\1\u032a\15\0\1\u032a\6\0\12\u032a\1\u032b\175\0"+
41420	VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut,
291	via
32456	RandomFailure
16114	ScoreCachingCollector(int
28138	excludes
1561	clone.close();
7652	super.getMessage();
57819	assertNull(reader3);
57347	remove(other);
50838	stopMerges
3321	grouping
33176	excluded
24125	data[i][3],
36594	follow.isFinal();
42322	SegmentReader.getOnlySegmentReader(ram);
54852	MAX_SEARCHER_GEN
31409	fullyMerged)
32448	storepathname
66454	intPool.intUpto
2347	assertTrue(hits.getMaxScore()
28055	"\u0031\u002E\u2060\u00AD",
22485	(prependAttClass)
9435	"\14\132\4\0\20\133\1\137\2\0\1\136\1\137\13\0\7\133\14\0"+
66387	comparePostings(pivotBuf,
66642	SorePoint.BEFORE;
57622	shorter;
23881	(SearcherTracker
65346	previnput
54953	refreshIfNeeded(IndexSearcher
45415	FLOURISH
51960	FlushControl
42193	testPositionIncrementAttribute()
22266	shrink(boolean[]
5900	blocks[i]
44128	"á´"
22421	getsorter
7465	termAtt.setEmpty().append(terms[nextTokenIndex]);
63834	loosing
40266	newreader
16491	readsnapshotsinfo
20072	<p>NOTE:
4617	conf.getMergePolicy().getClass());
43282	testskipto
10846	"\1\230\1\u02e6\30\230\1\347\12\230\175\0\1\346\1\230"+
64460	exclude)
23776	Tracker
32626	random.nextInt(0x100);
41991	compile
65981	t:\"dd
7111	doubles
60602	"\1\351\32\232\1\352\1\u03e4\11\232\175\0\1\351\4\232"+
56996	author.
33422	digest.update(b,
39348	fastSet(doc);
55900	CloseableThreadLocal<T>
28371	establish
44616	"É "
17885	medIP,
64141	x02
64145	x03
38385	x00
57408	x01
64140	x06
64139	x07
51621	merge.registerDone
27859	"\u0061\u002C\u0308\u002C",
64155	x04
19855	shuould
65522	point");
64455	exclude;
44154	"á´"
44242	REVERSED
59563	"\5\0\3\25\1\0\1\25\5\0\1\25\2\100\5\0"+
11433	"\2\136\150\0\1\376\32\264\1\141\7\264\1\u04ca\2\264"+
40888	assertNotNull(pair.output);
33848	rg[i];
29106	pre-seek
9522	"\0\ub949\0\ub9ec\0\uba8f\0\ubb32\0\ubbd5\0\ubc78\0\ubd1b\0\ubdbe"+
64159	x08
26563	reader.termDocs();
2272	byte[]{2};
62954	(filesPre.length
34742	assertEquals("(field:multi
2658	three
29333	PostingVector.
31233	d.getFieldable("compressed");
64161	x17
18843	LETTRE
49332	newBooleanClause(Query
32771	x13
59951	"\2\137\1\140\1\u0143\1\u0144\1\u0145\3\0\1\137\1\164"+
55715	testIndexWriterReopenSegment()
28040	"\u0031\u002E\u2060\u0308\u3031",
8753	x=0;x<2;x++)
31413	LogByteSizeMergePolicy
44674	"É¥"
34358	ConcurrentMergeScheduler}.
63831	x0f
37869	CXF</a>
36483	BIT_FINAL_ARC;
64160	x0e
61707	ue477
31434	"ð",
64148	x0c
33110	src.getAttributeImplsIterator();
32777	x0a
63573	x21
7693	x20
63994	CROSSBONES")
13218	ue481
5423	x0l
1079	threw
52904	promote
41947	termsenum
27573	"\u00AD\u0308\u0061\u0027\u2060",
30222	ti2.freqPointer)
32769	x23
62621	q4.add(new
7162	currentupperbound
15864	allFiles[i];
41936	newstring
67842	testsizeboundedforcemerge
30439	voc
53233	x1f
26303	encoded.arrayOffset());
39244	boq.setBoost(getBoost());
60473	"\1\u035a\1\u0359\1\u035a\1\u02ef\13\0\1\u0126\226\0\1\u0228"+
43957	"á´"
36433	arc.target
5422	x1l
31510	Integer.toString(BINARY_COMPRESSED_LENGTH),
63575	x32
4575	DocConsumer
63574	x31
28709	"/Computers/Mac/One",
34529	mergesegmentwarmer
41813	e.getValue()
9021	scratch);
10784	"\1\376\24\264\1\u02a6\5\264\1\141\12\264\1\0\3\136"+
12817	ue48b
35163	FieldInvertState()
49673	jj_lastpos;
64635	read()
49743	(jj_la
23972	double,
27822	"\u0061\u0027\u2060\u0061\u2060",
28704	PrefixFilter}
53489	n,Sort
12416	ue495
50455	ensureOpen(false);
41453	scratch),
32012	estimateSize
54865	SearcherFactory}.
65977	t:\"aa
44092	"á´"
6591	2008.
63580	x43
63578	x42
65538	(currentCommitPoint
50423	getReadOnlyClone(SegmentInfo
32774	x41
49019	multiTermRewriteMethod
65088	frontier[idx];
19013	emails);
50766	config.toString());
49732	jj_lastpos)
11117	"\1\u037f\175\0\4\u03d7\2\0\1\u03d7\15\0\1\u03d7\6\0"+
1333	t1.setPositionIncrement(Integer.MAX_VALUE-500);
50905	joining)
56068	Field.Text("data",data[i]));
16229	FieldCacheTermsFilter
24501	"CEAGI");
20907	matches.
64559	bufferLength-bufferPosition;
22053	matches,
38125	Float.intBitsToFloat(0xff800001),
1452	filenamefromgeneration
54525	testParseInt()
67730	IndexOutOfBoundsException();
5003	switch(jjstateSet[--i])
37954	System.identityHashCode(obj);
55934	synchronized(hardRefs)
18554	"Õ§",
31040	"merge3",
35490	's/A\[\([^]]*\)\]/\(A[\1]
51322	filesToCommit
24043	"f",
57183	extension).
23451	x);
61426	"\1\u0636\175\0\4\u067a\2\0\1\u067a\15\0\1\u067a\6\0"+
43860	($line
50015	addFile(String
11987	WORD_TYPE;
21671	searchtermtext
31471	fieldInfos.fieldInfo(i);
34987	indexReader
19866	doTestCaching(INT_FIELD,FieldScoreQuery.Type.FLOAT);
31641	compressedsize
33792	advancePP(PhrasePositions
62146	testException()
51639	(merge.segments.contains(info))
27145	"\u000B\u0308\u0300",
4420	testSorting(2);
34017	pp.rptGroup;
9344	"\3\133\1\0\10\132\1\0\3\132\1\0\27\132\1\0\12\132\1\0"+
64617	bufferLength-bufferPosition)
24613	SortField.FIELD_SCORE)
7877	OutOfMemoryException,
38126	Float.intBitsToFloat(0xffffffff)
49154	unduly
36589	readLastTargetArc(Arc<T>
59884	"\1\232\3\u016f\1\u0177\14\u016f\2\232\2\u016f\2\232\1\u016f"+
33368	field_record_id
21315	csr.openInput("d1");
61199	"\12\u05bf\1\u05c0\175\0\4\u05c1\2\0\1\u05c1\15\0\1\u05c1"+
26043	queueFull;
16322	docfields
18316	docid",
32190	Lock.obtain
1426	setmergefactor
39434	TestMultiLevelSkipList.this.counter++;
66299	bytesUsed(postingsHashSize
48331	ppstart
6169	constructs
56596	numOnCommit;
6057	t.setTermBuffer("hi
7385	howmany
66134	required_field
48849	assertTrue(offset
16204	w3",
29854	"\35\0\1\102\11\0\3\25\5\0\1\25\1\0\1\25"+
52107	adddocuments
9320	"\2\137\2\0\13\133\5\0\53\132\25\133\12\134\1\0\1\134\1\137"+
65412	testCrashReaderDeletesAfterClose()
26831	NUM_BYTES_OBJECT_REF)][];
26640	TestLookaheadTokenFilter
53358	isOpen=true;
7824	val
35502	CSA(h,l,
53520	starts).call();
48369	matchers
54374	stopwords);
24766	sortMaxRev
37153	num_arcs_array
35827	author
41068	Map.Entry<IntsRef,CountMinOutput<T>>
34340	uncommon
42992	semantics.
59689	"\1\u0107\1\266\3\u0107\1\142\12\266\1\0\3\137\1\0"+
26985	LINE
43801	assertTermEquals("C",
38166	assertFalse("ranges
43425	vb1
7908	semantics,
7599	((ch
24224	searchY.reader.close();
33394	this.input
61131	"\1\u04c6\175\0\4\u0587\2\0\1\u0587\15\0\1\u0587\6\0"+
5311	endLine
26646	Position
37983	assertTrue("actual
48316	advanceafterordered
27266	"\u0041\u0061\u003A",
50756	#setDefaultInfoStream
56658	OpenMode.APPEND).setIndexDeletionPolicy(policy);
10529	"\1\u013f\1\u0140\1\u0141\2\0\1\u0168\1\u0140\1\162\3\0"+
58250	otherBytes[otherUpto])
56274	InsertionSort
39816	oldStarts[oldReaderIndex.intValue()],
31000	File(workDir,
63118	newFSDirectory(_TestUtil.getTempDir("2BTerms"));
4155	q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
31083	tis.docFreq());
18816	"à½¦à½¼"
66105	footest
26286	inputOffset,
54391	Explanation()
25133	"prefix*"));
54013	clone.origNorm
37066	maxBytesPerArc="
44851	CROSSED-TAIL
17536	pr.termDocs(null);
50496	Required
25122	wq.setBoost(0.4F);
67988	poslength
19658	i=0;i<postings.length;i++)
26331	inputOffset;
24023	"2f",
56443	r.maxDoc());
43186	idIndex.lookup[idIndex.order[doc]];
54392	Explanation(float
32560	0xE4,
49292	#getFieldQuery(String,String,boolean)}.
63156	iter=0;iter<10*terms.size();iter++)
35994	x",
57019	Pentium
19437	fieldInfo;
3110	bigger
55968	weakref
68020	left.reset();
41621	Arc<Object>
7409	fieldInfo)
54114	assertEquals("expecting
3371	primitive
27955	"\u0031\u0027\u0308\u0030",
38692	fieldInfo2
38690	fieldInfo1
50023	"file
67186	existingPositions.length);
63285	0x621,
18206	getquery
27768	"\u0061\u0027\u00AD",
25770	getfieldcachekey
40741	FSTTester(Random
27764	"\u0061\u0027\u0030",
1666	setusecompoundfile
29080	tvx.getFilePointer());
37645	r.nextInt(lastDoc.size()-len);
45988	,"W",
22376	partially
16481	getsnapshots
68045	assertFalse("wrong
2235	usecompoundfile
5286	lexState
20566	reusableTokenStream(String
40374	actualTSDCClass[i],
48234	#docSpansOrdered(Spans,Spans)},
786	testExceptionDocumentsWriterInit()
15421	related
1514	fieldInfos
43029	current)
33177	reflectWith
7195	useful
60263	"\23\232\1\u02a7\6\232\1\352\12\232\175\0\1\351\32\232"+
26159	current;
55831	current:
50220	rollbackSegments;
48310	matchend
43178	FieldComparator<Integer>()
39399	(SegmentTermPositions)
48905	testBadParams()
20163	ArrayList<Scorer>();
8223	unsetBuffers()
9787	"\1\136\1\143\1\136\1\0\1\136\1\144\1\137\3\136"+
11130	"\1\u0325\160\0\1\u0386\4\u03de\2\0\1\u03de\15\0\1\u03de"+
11381	"\1\u0469\13\0\1\u0325\160\0\1\u0386\4\u04a5\2\0\1\u04a5"+
1078	fail("forceMerge
30310	IOException("failOnPrepare");
55594	writer.setInfoStream(infoStream);
9490	"\0\u07a4\0\u1b61\0\u1c04\0\u1ca7\0\u1d4a\0\u1ded\0\u1e90\0\u028c"+
25092	FuzzyQuery
38326	expectedbounds
31897	DEFAULT
50070	source.dir.openInput(source.file);
506	newlogmergepolicy
60524	"\3\137\3\0\1\137\4\0\2\137\150\0\1\u0101\1\u038e"+
56768	assertEquals(2*(N+2)
32719	binaryBuf.limit(numBytes);
27728	"\u0061\u003A\u0308\u0061\u003A",
41481	fstEnum.seekCeil(new
14565	email_type
55472	doc.add(newField("f1",
21536	CompoundFileReader(d,
65453	org.apache.lucene.util.CollectionUtil;
15213	f3.stringValue());
30481	currentSet.add(entry);
52505	ir1.close();
54994	curgen
26761	org.apache.lucene.search.spans.SpanFirstQuery
24977	iegca
33576	int[]{4,7,9},
26167	currentMaxValue
35257	SkipInterval
29790	"\1\25\1\0\1\25\4\0\1\25\4\0\1\25\1\0"+
38236	0x7fffffffffffec78L,0x7fffffffffffec7fL,
32731	char[ArrayUtil.oversize(encodedLen,
8729	fieldIDs)
38378	x800024
63131	numSavedTerms
37386	(!actualCodec.equals(codec))
36261	inputType,
52427	"lowerPrecNumeric";
16773	Similarity.getDefault().decodeNormValue(r1.norms("field1")[4]);
36137	inputType;
22839	upperpoint
9823	"\10\0\2\25\2\0\2\25\5\0\3\25\5\0\3\25"+
42731	TokenStream#incrementToken()}
67232	System.out.println(getTime(startTime)
24122	data[i][2],
38377	x800020
33783	(matchLength
9256	buffereddeletes
22454	<p><b>WARNING:</b>
38850	LUCENE-2753
39922	normsCache,
2417	//100
18531	Õ§
48589	consumer.add();
16402	getDeletionPolicy(Map<String,
49663	(jj_3R_3())
49808	tokenImage);
36978	re-reverse
56792	firstcommit
35528	=(ones&b)|(u&c);
6253	super.getFieldQuery(field,
62280	searcher.rewrite(q);
62658	newCounter()
2993	optionally
26011	reverseMul[i]
35811	rd2.close();
46650	FLATTENED
22705	newShortRange(String
34591	byte[256];
27566	"\u00AD\u0061\u2060",
35462	0x0000003F;
10011	"\6\0\12\333\1\334\242\0\1\335\174\0\1\336\54\0"+
5529	mantissa
44	use
33520	String[]{"b"},
38536	lazyFields
55818	w.waitForMerges();
35710	y>>>=2;
25968	comparator.setBottom(bottom.slot);
33022	TestAttributeSource
42764	one.</li>
16960	decref
2551	boostingfunctermquery
40685	true).doTest();
17156	we'll
60765	"\175\0\1\351\32\232\1\352\4\232\1\u0447\5\232\175\0"+
60989	"\33\0\1\u04c1\1\u04fe\1\u04fd\2\u04c1\2\u04fd\1\u04c1\1\u04fd"+
60681	"\1\u02e1\160\0\1\u0425\33\0\12\u03b2\175\0\1\u0425\33\0"+
4007	utf
60164	"\24\266\1\u0249\5\266\1\142\12\266\1\0\3\137\1\0"+
35707	y>>>=4;
68031	left.addAttribute(PositionIncrementAttribute.class);
67540	changes.");
269	docFreq",
1453	copybytes
66828	tmpList.toArray(terms);
29448	"new-value-1";
21913	0xE0)
54767	us)
27967	"\u0031\u0027\u0061\u0027",
19609	addsuppressed
39737	us,
55054	Comparator<Fieldable>
16760	performDefaultTests(pr1);
5646	fail("Failed
57137	us.
19166	ØØØØ
15123	DocHelper.FIELD_UTF2_TEXT,
11730	zzAtEOF
10576	"\5\u01d8\1\u01d9\175\0\1\u0163\4\u01da\2\0\1\u01da\15\0"+
20166	(subScorer
17716	<code>size</code>
63287	0x631,
30754	matchVersion.onOrAfter(Version.LUCENE_31)
49564	jj_consume_token(FUZZY_SLOP);
4210	upper=(count-1)*distance
58300	bBytes[bUpto++]
2791	(allowed-resolution)="+(TIME_ALLOWED-counterThread.getResolution()),
12018	uri
14567	url
28527	testcompressiontools
18023	testfarsi
4900	org.apache.lucene.queryParser;
32401	"abcdefghijklmnopqrstuvwzyz";
3591	True
6445	TestIOUtils.testSuppressedExceptions:
63288	0x632,
19079	"ä»®åé£ã
8953	docFreq()
27725	"\u0061\u003A\u0308\u0061\u2060"
66168	w3"
63996	0xE2,
31813	Collection<IndexCommit>
38383	x800000
5960	packed
50757	getDefaultInfoStream()
38384	x800003
12420	ue721
25264	"*op*",
63886	testNormalizeAndIsTokenCharCharInSubclass()
5142	((active0
1296	uoe
60057	"\175\0\1\u01e4\33\0\12\u01e5\175\0\1\u01e4\33\0\1\u01a3"+
8699	freeram
38664	assertEquals("IndexReaders
65844	tnum=termflag.nextClearBit(0);
28054	"\u0031\u002E\u2060\u0308\u005F",
58790	fillUnicode(buffer,
12821	ue717
9291	ZZ_BUFFERSIZE
11842	zzEndRead+=
33213	testcloneattributes
41019	pairs.size()-1)
6597	Computers
54460	keywordset
15165	System.getProperty("user.name");
49257	numTokens++;
37256	nodeupto
11040	"\12\u0395\1\u0331\13\0\1\u02cf\160\0\1\u0332\4\u0395\2\0"+
3862	unit
59029	doc.add(docid);
48633	(docState.infoStream
8954	actualEnum.docFreq();
13222	ue70d
34901	field.setValue("quick
1659	sampleterms
685	analyzer.setEnableChecks(false);
28799	numLevels++;
46972	cedilla
100	org.apache.lucene.index.TestIndexReader.createDocument;
43915	CIRCUMFLEX
48025	(such
57817	reader3.close();
11422	"\32\230\1\347\5\230\1\u04c2\4\230\175\0\1\346\32\230"+
19418	(other.field
17164	assign
36411	InputStreamDataInput(is),
31688	Analyzer>();
22730	includeUpper
5940	(blocks[elementPos
1115	w/o
2270	byte[]{1};
48526	gathering
39785	newReaders[i].reopenSegment(infos.info(i),
54944	genLock.unlock();
51783	commitMerge
58904	FieldInfo(String
43239	"ccc
20679	primaryextensions
21623	we're
56359	merge(new_mid,
18750	ÏÏÎ¹
43805	assertTermEquals("D",
50920	up.
9803	"\2\0\1\54\3\0\1\72\7\0\1\56\2\0\1\57"+
11759	up,
54090	"+stopWords1[i]);
57170	expandingWordNum(long
25828	(SpanQuery)
59376	"\41\0\1\25\1\66\7\0\1\66\2\0\1\25\1\0"+
11822	zzEndRead-=
42010	minlongcomparator
30800	(buffer.lastTrailingHighSurrogate
29630	"\11\0\7\132\1\0\7\132\1\0\7\132\1\0\7\132\1\0\7\132"+
59087	"\2\2\10\0\1\12\53\0\1\12\71\0\1\12\147\0"+
8160	curAvail);
26859	endOffset)
17887	up",
18218	complexexplanation
52640	assertTrue(Modifier.isFinal(NoMergePolicy.class.getModifiers()));
34850	TestPosIncrementFilter
57260	a.wlen,
66545	nextPerField.finish();
43653	mp).setUseCompoundFile(useCompoundFile);
34720	multi2)
348	deleteReaderWriterConflict(false);
26851	endOffset;
7643	messages.
47192	dotless
66691	dtestmethod
25574	ArrayList<Insanity>(23);
23569	while(w.getFlushCount()
50589	DocumentsWriter(config,
52009	checkpoints
43589	CachingSpanFilter
23818	undo
35324	assertFalse(inValidTokens.contains(termAtt.toString()));
41392	(args[idx].equals("-utf8"))
10351	"\2\136\150\0\1\u014e\16\264\1\u0153\13\264\1\141\12\264"+
1335	t1.setPayload(new
33551	a,20,22
57942	TestPositiveScoresOnlyCollector
28536	decompress
65596	segmentPrefix2;
60043	"\151\0\4\u01da\2\0\1\u01da\15\0\1\u01da\6\0\12\u01da"+
58150	doc.getFields())
32790	originalarray1
40654	true).doTest(0,
16062	searcherThread2.join();
14807	(reverse)
19700	we've
43084	referencetorefresh
15316	Long.valueOf(l);
43148	documents[i]
57113	bitmask
65595	segmentPrefix1;
5476	jjstrliteralimages
24052	"e",
23522	testErrorInDocsWriterAdd()
41532	"non-exist
50626	non-null");
50174	checkpoint.
16948	lbfe
65611	checkpoint,
17176	getCFSReader()
2309	System.out;
25746	getreaderkey
33482	"cc"
2436	testNoMatch()
18673	à¦¸à¦¾à¦²à§à¥¤
3052	this.reader
23598	""+0);
65487	checkpoint:
17302	gethasvectors
6189	(assuming
28899	org.apache.lucene.search.FieldCache
35976	allowedterms
48715	assertTrue(comp.compare("0",
18756	Î±Î»Î»Î¬Î¾Î¿ÏÎ½
58718	(tdocs.next())
1948	doc.getFields();
50699	config.setMaxBufferedDocs(maxBufferedDocs);
53573	getSimilarity());
44302	"É"
463	setopenmode
16573	unbounded
51439	readerPool.drop(info);
37667	testpositionincrement
22645	this.includeUpper
13220	ue5c7
57550	Math.max(Math.min(64
11	(ASF)
65560	currentCommitPoint.isDeleted();
60363	"\1\352\12\232\175\0\1\351\14\232\1\u02fb\15\232\1\352"+
5955	maxPos="
49232	#getFieldQuery(String,String,boolean)}
63558	(++i
44452	"É"
61709	ue5bd
41893	willrewrite
16242	int2str(keys));
24450	testReverseSort()
5847	blocks.length
28130	ucd
12819	ue5d1
39016	ue)
43539	d.setPreventDoubleWrite(false);
53453	trtopdocs
43663	c\"",
11313	"\5\u046f\1\u0470\175\0\1\u042c\242\0\1\u042c\33\0\2\u042d"+
40962	pairs.get(pos).input),
20548	languages.
10073	"\1\0\2\76\7\0\3\76\2\0\2\76\12\0\2\76"+
30511	languages,
44305	"É"
60097	"\2\137\150\0\1\u0101\22\266\1\u0201\7\266\1\142\2\266"+
41353	w);
19432	matchdoc
54869	this(writer,
18166	collector.setNextReader(reader,
20760	ArrayUtil.hashCode(data,
67117	ClassicTokenizer(matchVersion,
20533	ICU4J's
11060	"\1\346\6\230\1\u03a6\23\230\1\347\12\230\175\0\1\346"+
44029	"É"
12418	ue5db
14993	testRandomIncreasingSloppiness()
63187	uee
8459	lockclass
54394	"match"
50703	(config.getMaxBufferedDocs()
8636	lazy
22792	FieldCacheRangeFilter))
50915	IndexSplitter
26151	totalhitcountcollector
40602	"plastic",
29324	reasons.<br>
15489	Map<String,String>
504	randomindexwriter
20839	Map<String,Analyzer>
3926	aware
57655	ArrayUtil.grow(diffs);
50483	(true).
32863	(!doVectors
33757	propagate
34222	approximately
57085	longs).
9934	"\1\162\3\0\2\136\151\0\32\230\1\0\12\230\13\0"+
26355	inputLength));
11331	"\1\0\2\u0214\1\u026d\3\u0214\1\u0216\1\u0167\1\u0168\1\u0169"+
60049	"\1\u01dd\6\0\1\u01de\2\u01df\1\u01de\5\u01df\1\u01e0\175\0"+
48424	(true);
60666	"\1\u01d2\1\0\1\u0213\3\0\2\u01d0\4\0\1\u01d0\155\0"+
16955	refcount
54318	testcompact
16023	stress
41444	testTrivial()
9185	Parallel
52055	numdeleteddocs
45309	"É"
60883	"\32\266\1\142\1\266\1\u04b0\10\266\1\0\3\137\1\0"+
49003	CONJ_OR
24508	differently
35169	docBoost)
2624	slack)
41912	isdone
8541	ready.
36600	straight
14550	uax
51167	message("waitForMerges");
59139	"\2\uafa8\2\ub04b\2\ub0ee\2\ub191\2\ub234\2\ub2d7\2\ub37a\2\ub41d"+
43291	fieldSelections)
60832	"\1\u034e\12\u02e2\175\0\1\u0486\6\u02e2\1\u0487\10\u02e2\1\u0428"+
44235	"É"
24500	"IGEAC");
51192	(opened
49649	xla;
33937	up-front,
43288	fieldSelections;
51422	(applyAllDeletes)
55444	assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));
35173	docBoost;
5320	t.endColumn
53678	searcher.maxDoc());
49647	xla)
47879	swung
60132	"\32\36\1\142\12\u0222\1\u0154\1\137\1\153\1\137\1\0"+
64520	clone.exclude
53173	validUTF16String(CharSequence
6646	(each
33055	src2.addAttribute(TypeAttribute.class);
53816	&ge;
22098	radix
19040	"?cc=personC@example.com",
60285	"\150\0\1\u0101\32\266\1\142\11\266\1\u02c0\1\0\3\137"+
65064	(doShareNonSingletonNodes
44458	"É"
52836	rights
60296	"\4\0\2\137\150\0\1\u0101\12\266\1\u02cb\17\266\1\142"+
10450	"\1\140\10\36\1\352\21\36\1\141\12\142\1\65\1\136"+
27331	"\u002C\u0308\u0001",
21526	fileIdx);
45673	"á´"
56695	useCompoundFile);
42220	Collections.singletonMap(PayloadAttribute.class.getName()
34143	t[i]);
35316	inValidTokens.add(it.next());
18577	"ááá",
19532	#closeWhileHandlingException(Exception,
1540	input.close();
48716	assertTrue(comp.compare("00",
16414	numSnapshots
44456	"É"
55039	range=random.nextInt(20)+1;
11579	"\160\0\1\u0332\4\u0538\2\0\1\u0538\15\0\1\u0538\6\0"+
61012	"\12\u04d9\1\u035b\174\0\1\u0168\4\u0522\2\0\1\u0522\15\0"+
27399	"\u0027\u0308\u0300",
35510	v;}
25223	"**1",
45502	"á´"
23398	.setMaxBufferedDeleteTerms(100));
41322	%9d...",
65313	deleteLast(int
9332	"\2\132\1\0\2\132\1\0\2\132\2\0\1\133\1\0\5\133\4\0"+
31324	!oldName.startsWith("21.")
48951	(<code>-</code>)
42793	typ
53970	(--refCount
44460	"É"
43199	getelevatedquery
19942	Collections.newSetFromMap(Map<E,Boolean>)}.
28761	interval
31398	10).scoreDocs[0].doc,
27780	"\u0061\u0027\u0061\u0027",
58955	finishDocument();
47760	eleven
66606	right.
5780	right,
10913	"\1\u01cc\1\0\1\u020c\3\0\2\u01ca\4\0\1\u01ca\152\0"+
37812	0x1AA71190;
3306	replayed.
22725	FieldCacheRangeFilter<Integer>(field,
59683	"\4\u0107\3\266\2\u0107\1\u0110\1\u0107\1\266\2\u0107\12\266"+
46402	,"(9)",
34960	f.getDocIdSet(ir);
49793	la1tokens[j]
9562	"\1\u83c3\1\u8466\1\u8509\1\u85ac\1\u864f\1\u86f2\1\u8795\1\u8838"+
25819	buffer.append(slop);
42337	performTest(Directory
36558	right)
40982	seekResult.input)
26494	IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);
39030	CharArrayMap<Integer>.EntryIterator
44845	"É"
4113	field2.setIntValue(val);
22515	implementations.
21124	implementations,
37913	Keys
52434	NumericTokenStream(AttributeSource
61711	ue703
58430	set.size();
45504	"á´"
52154	dobeforeflush
49764	jj_lasttokens[jj_endpos++]
22914	right?
1299	uoe);
55779	i=0;i<NUM_THREAD;i++)
35479	revisions
23880	System.nanoTime()/NANOS_PER_SEC;
35695	y>>>=8;
1163	last
55649	mainWriter);
23441	sometimes
28990	tvx
21857	String[result.size()]);
39021	Map.Entry<Object,Integer>
51703	merge.readerClones.get(i).getRefCount();
23384	Term("foobar",
14947	phrase
40783	randomAcceptedWord(FST<T>
44454	"É"
48869	tve
28996	tvd
52602	queries.length==0?
6252	getBooleanQuery(clauses,
29002	tvf
21946	numBytes
22171	exponential
213	unchanged
37863	mandates
66692	testfailurebefore
41403	System.exit(-1);
51116	pre-close
44031	"É"
21077	usable
7792	testLazyWorks()
65696	deletable.add(fileName);
3588	away.
24006	"p\u00E9ch\u00E9",
21393	CompoundFileReader.CSIndexInput;
3840	MAX_WORD_LEN
23394	modifier.getBufferedDeleteTermsSize());
23667	getnumbuffereddocuments
36490	(inCounts
19317	txt
54697	away:
21720	dir.openDeleteFileCount());
39419	tp.doc());
17630	assertNull(ctl.get());
50018	(merged)
21885	no_strings
18902	C3PO",
26050	extend
50230	mergingSegments
65755	power,
66165	bigSearcher
39614	termBytesLength;
45544	"É¿"
15670	si.normGen
2414	two
53362	isClone;
28627	getline
45798	"á´"
46025	,"X",
10024	"\1\0\1\64\2\0\4\64\2\0\1\64\135\0\1\337"+
39532	termBytesLength)
39544	termBytesLength,
54403	summary
39167	termArrays.get(pos);
17225	(fieldsReaderOrig
369	SlowMultiReaderWrapper(w.getReader());
21138	consumption.
41799	arc.output;
21455	e2.readByte();
65334	citeseerx
22917	spannearpayloadcheckquery
16882	reader.deletedDocsRef.get());
58063	docFreeList[freeCount++]
24119	data[i][1],
42452	ts;
1998	FST.BytesReader
41658	//System.out.println(w.toString());
63522	i=-1;
52240	finishstartcommit
8987	hasNext()
25777	<i>slop</i>,
20307	cc.setScorer(new
1732	FIELD_IS_NUMERIC_DOUBLE
59295	"\2\0\1\55\3\0\1\56\7\0\1\57\2\0\1\60"+
37166	version_current
57133	0x0000003f;
54418	Render
3390	When
11305	"\13\0\1\u0325\160\0\1\u0386\4\u0468\2\0\1\u0468\15\0"+
48442	investigate
56413	i=0;i<80;i++)
53344	NIOFSDirectory}
9717	"\1\0\3\32\1\0\2\32\1\0\3\32\1\0\7\32"+
42128	(ints[upto]
5516	begintoken
51844	background.
222	try
20821	analyzers
22040	background,
20289	bools
61710	ue660
43705	justcompilesearchspans
52090	shouldclose
31220	readers)
5385	jjCheckNAddStates(int
41459	testSimple()
12609	u601b
16663	readers,
48596	(streamValue
25693	readers.
32269	(lockFile.exists())
18141	Explanation(queryNorm,
16814	(SegmentReader)
39712	DirectoryReader(Directory
3430	readers;
40751	InputOutput)
59153	"\2\uf655\2\uf6f8\2\uf79b\2\uf83e\2\uf8e1\2\uf984\2\ufa27\2\ufaca"+
8309	newconcurrenthashmap
55171	tv1
21367	setUp_2()
28229	MultiCollector(Collector...
55177	tv2
25172	LUCENE-2620
50313	expense
53584	searchable.docFreqs(allTermsArray);
24802	data[doc][2]==null
66163	"big
29250	tv;
36220	posArcsStart
17395	java.util.*;
695	analyzer)
41608	to)
49860	tme
16928	readonlydirectoryreader
39097	unmodifiablemap
49861	tmc
6219	analyzer,
33335	this.rollbackPoint
54003	oldRef
20842	analyzer.
62208	ArrayList<ScoreDoc>();
8533	to:
13010	u6011
34247	analyzer;
48628	fieldState.numOverlap++;
34030	tmp
18525	Õ¯Õ¡Õ´Õ¡Õ¾Õ¸ÖÕ¶Õ¥ÖÕ«
56137	hit#"
14986	testRepetitiveIncreasingSloppinessWithHoles()
3224	to.
57231	v1,
3889	to,
19807	tp)
17648	matched.
56845	"\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\2\12"+
49926	rangeex_start
11936	matched,
12208	u6025
59230	"\1\25\1\0\2\25\117\0\1\25\3\0\2\25\2\0"+
26504	assertTrue(DocHelper.numFields(result)
31374	v1;
41615	to;
63291	0x641,
55285	v2;
198	reader
68155	buffer.get(pos);
37449	doc.add(repeatedField);
6699	summand
38745	tp1
38747	tp2
57232	v2,
39410	tp,
57233	v3)
29800	"\2\0\1\25\1\0\2\25\4\0\1\25\1\0\1\25"+
65897	t:one");
63292	0x642,
57799	writeable
52365	ReaderPayloadProcessor>();
28484	stringFldStored
35463	0x5555555555555555L);
68111	pre-populate.
4809	lang
18929	"FOO",
32596	originalBuf1
59789	"\23\36\1\355\6\36\1\142\12\143\1\u0142\1\137\1\144"+
32607	originalBuf2
35563	tot
63294	0x643,
29584	"\1\0\3\132\1\0\27\132\1\0\12\132\1\0\5\132\2\0\1\133"+
33123	tok
61286	"\1\u034d\32\u02e2\1\u034e\2\u02e2\1\u0618\7\u02e2\175\0\1\u034d"+
2785	too
7261	top
9374	"\35\132\3\0\14\133\4\0\14\133\12\0\12\134\36\142\2\0\5\142"+
35284	//System.out.println("write
29689	"\0\u1282\0\u12e9\0\u1350\0\u13b7\0\u141e\0\u1485\0\u14ec\0\u1553"+
57088	&gt=
13411	u6007
17477	bq1.add(new
29309	&gt;
34736	multi\"").toString());
49219	MOD_REQ);
7816	lamb
31900	DEFAULT_BYTE_PARSER
30346	tpc
6279	getRangeQuery(String
66215	testRandomQueries()
54409	Explanation[]
60100	"\1\u0204\22\266\1\142\12\266\1\0\3\137\1\0\2\137"+
27618	"\u0300\u0061\u002C",
26505	DocHelper.numFields(testDoc)
31633	text_plain_length
14723	FieldCache.LongParser)
42352	tps
58906	tk,
29472	IgnoredProperty
39628	tii
64334	query.incTotalNumberOfTerms(col.pendingTerms.size());
22175	tie
60971	"\32\266\1\142\1\266\1\u04ef\10\266\1\0\3\137\1\0"+
17155	tis
32264	"test.lock");
4727	assertEquals(MySimilarity.class,
16520	filled
58009	(allocCount
60891	"\1\142\1\266\1\312\10\266\1\0\3\137\1\0\2\137"+
28674	typeAtt.type()
34086	rp.add(pp);
43019	referenceToRefresh)
57385	--i>=0;)
17133	coreClosedListeners
67779	t.termBuffer
52087	lucene_version
19779	org.apache.lucene.search.function;
47955	CommitFailException(t,
62492	similarity.coord(requiredScorers.size(),
39551	utf16Result1.result[i];
48819	testToken.endOffset);
64672	TestTermsEnum
22638	lowerVal,
43802	assertTermEquals("E",
22359	comp).quickSort(fromIndex,
29816	"\1\0\1\40\1\0\1\41\1\0\1\111\3\0\1\43"+
23456	"bbb
58913	tk;
23943	lastrecordtimesec
62950	(!Arrays.equals(files,
10251	"\2\0\1\71\3\0\1\53\2\0\1\54\3\0\1\72"+
5480	boost
36130	~2.1
22633	lowerVal;
51520	(merge.isAborted())
21040	dir.setRandomIOExceptionRate(rate);
49705	tm)
1961	field_is_tokenized
34362	#setMergeScheduler(MergeScheduler)}
49056	setAutoGeneratePhraseQueries(true);
38473	assertTrue(indexedFieldNames.contains("unstored2"));
32405	tl;
22181	presumably
33003	char_block_shift
33862	<b>"ho
38776	uoe)
57230	v0,
6981	Term(field);
48107	src.listAll())
43498	doTestConstructOfSize(100);
30196	dictionary
30763	codePointAt(final
56462	o.getClass())
49706	tm;
9929	"\1\25\177\0\2\34\6\0\1\34\153\0\1\34\5\0"+
27108	"\n\u0061\u0027\u2060",
19831	testExactScoreShort
32580	byte[decodedLen];
9537	"\1\u050e\1\u05b1\1\u0654\1\u06f7\1\u079a\1\u083d\1\u08e0\1\u0983"+
12419	ue67e
47753	ten
41465	17L);
8614	tee
5594	rounds
58676	testnrtandcommit
21078	testdiskfull
60717	"\7\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u0428\11\u02e2\1\u0428"+
50672	accomodate
20146	sumExpl.setMatch(0
2809	(timoutException.getTimeElapsed()
28443	off-by-one
15933	setBufferedDeletesGen(long
55765	"test"));
23223	overide
34648	GSI:
19517	(Closeable
42737	#buffer()},
13221	ue66a
41690	42L;
28754	((skipInterval
1123	testRollbackExceptionHang()
16534	pqTop
53721	lack
2243	newsegment
29974	"\1\103\2\0\1\103\3\0\1\103\5\0\1\103\7\0"+
1715	Kept
52513	assertTrue(te.next());
54997	await
24061	"d",
12820	ue674
27576	"\u00AD\u0031\u003A",
39723	readers[i]
34122	tg;
35509	v);
480	deletereaderwriterconflict
64301	docCountPercent
41906	termsmap
30274	ti1
62157	assertEquals(score*.5,
30275	ti2
58573	hset);
39513	ti)
15667	si.diagnostics
30108	ti,
32128	200};
3721	termatt
19650	weight);
32899	postings.textStarts[termID]
65657	incRef(Collection<String>
31347	tfv
19526	th;
20388	<code>fieldsToLoad</code>
56761	reader.setNorm(4*i+1,
15995	Throwable;
48697	assertTrue(comp.compare("1",
16952	testclonewithdeletes
20014	(maxClauseCount
7	the
1088	ArrayList<Throwable>();
24458	"CAEGI");
42126	other.ints;
33865	<b>"my
6644	dramatically.</p>
53065	//for(int
26337	output.limit(outputLength
48382	(Scorer
37685	testnonexistingphrase
551	Random
30188	ti;
49856	compareimplementationdistance
52573	HashSet<Query>
32230	SearcherThread(100,
168	IndexReader.open(dir,
11270	"\4\230\175\0\1\346\32\230\1\347\7\230\1\u0450\2\230"+
5377	jjnextStates[start];
44413	"á»"
19043	"Subjectivity",
6192	<code>body</code>):</p>
20503	CollationKey
27569	"\u00AD\u0308\u0061\u003A",
33415	this.main
30169	mustSeekEnum,
20879	keywordanalyzer
34783	bar\"~99",
30901	2.9655676f,
58239	copyChars(CharSequence
42245	assertCloneIsEqual.clear();
19994	PrefixQuery,
25129	PrefixQuery.
18205	dynamic
62294	"last")},
50808	(shouldClose())
49070	ParseException("Cannot
17320	booleanQuery.add(new
2614	SLOW_DOWN;
25447	Quick
28881	(primary)
36016	SortField.STRING))).scoreDocs;
6194	(title:term1
36917	NodeQueue(topN);
16922	testreopenwriteabletoreadonly
27138	"\u000B\u0030",
40876	fstLong
6196	(title:term2
48835	vector.getTerms();
43129	searcher.search(newq,
65574	(preserving
19441	Fieldable[]
5999	testCtor()
9269	org.apache.lucene.analysis.standard.std34;
32345	makeLockCount++;
27446	"\u0030\u0308\u0030"
20613	this(Version.LUCENE_30);
33577	initReader(Reader
10818	"\1\u02ca\175\0\4\u02cb\2\0\1\u02cb\15\0\1\u02cb\6\0"+
67742	resizeBuffer(termLength
55787	lastCount);
36123	Util)
498	testdeletereaderreaderconflictfullmerge
53181	library
50947	deleteDocuments(Query...
42206	assertEquals(TypeAttribute.DEFAULT_TYPE,
65071	fn.node
54768	"root
36778	this.posWrite
47910	TwoPhaseCommitTool#execute(TwoPhaseCommit...)}
65127	Util,
33138	src.addAttribute(FlagsAttribute.class)
32584	decoded.length);
3603	resources
10056	"\1\25\6\0\3\25\2\0\1\25\2\0\2\25\1\0"+
18944	{"David",
57200	~endmask;
35297	curfreqpointer
29541	org.apache.lucene.analysis.standard.std31;
32590	decoded.length),
10609	"\1\u01ee\26\264\1\141\2\264\1\u01ef\7\264\1\0\3\136"+
24249	"FBJHD");
4721	MergeScheduler
46309	"â¶"
48700	assertTrue(comp.compare("2",
51604	pendingMerges.add(merge);
27476	"\u0030\u0308\u0031"
63561	motion
35082	currentBuffer.length
62807	setdorandomforcemerge
56576	commits.get(i);
17471	"v1")));
54635	Boolean.valueOf(match);
21194	fixedbitset
33107	"("+termAtt.toString()+","+typeAtt.toString()+")",
52229	loaddocstores
7248	TopDocsCollector<T
20259	disablecoord
9775	"\3\0\1\53\2\0\1\54\3\0\1\55\7\0\1\56"+
14530	startread
42973	setstartoffset
33488	"llll"
35669	grab
62550	prohibitedScorers)));
20958	optimally
63868	"tokenizer",
62448	coordFactors[i]
22353	(exclusive)
17633	initialValue()
15712	fileName.startsWith(pattern)
67736	append(csq,
8098	this.length
42797	EXPERIMENTAL.
24100	english.
60811	"\2\0\1\u047a\15\0\1\u047a\6\0\12\u047a\1\u041d\175\0"+
14898	string_val
35733	isPowerOfTwo(int
11206	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\1\u041c"+
67533	hasChanges);
11628	"\1\u0559\6\0\2\u055a\1\u0559\2\u055a\2\u0559\1\u055a\1\u0559"+
60635	"\4\266\1\u0402\5\266\1\0\3\137\1\0\2\137\1\140"+
48798	Field.TermVector.WITH_OFFSETS;
16212	expDocNrs)
21391	isCSIndexInput(IndexInput
57013	"safe",
63286	0x63,
59156	"\3\u059d\3\u0640\3\u06e3\3\u0786\3\u0829\3\u08cc\3\u096f\3\u0a12"+
59815	"\14\266\1\142\12\266\1\u0154\3\137\1\0\2\137\1\140"+
36035	bq2);
4416	testSorting(8);
10411	"\1\346\1\230\2\u016a\1\u0175\1\u0179\3\u016a\1\230\3\u016a"+
19307	bones
35186	getUniqueTermCount()
51273	newDsName
60063	"\1\u01e9\6\0\12\u01e9\175\0\1\351\5\232\1\u016f\24\232"+
27889	"\u0031\u003A\u0308\u0001",
22838	binarysearchlookup
30620	"\1\0\1\32\4\0\1\32\1\0\1\32\2\0\2\32"+
63290	0x64,
57897	(readLength
10645	"\1\u0140\1\u0141\2\0\1\76\1\136\4\0\2\136\2\0"+
18842	SMALL
65408	assertEquals(157,
67304	prevItereationDoc
19518	(object
21711	openDeletedFiles);
23864	prune(Pruner
18144	result.setMatch(Boolean.FALSE);
65694	Will
14952	â
25614	descendants
56641	dir.fileModified(lastCommit.getSegmentsFileName())/1000.0
39777	oldReaders[oldReaderIndex.intValue()];
23004	upon
29715	"\1\0\4\25\1\0\2\25\2\0\3\25\1\0\11\25"+
24191	(Math.abs(random.nextInt())
68162	random.nextInt(posUpto
63283	0x61,
59650	"\7\0\1\57\2\0\1\60\4\0\1\171\14\0\1\62"+
27272	"\u0041\u0061\u0027\u2060",
35132	includeSpanScore);
32313	i=0;i<this.numIteration;i++)
59697	"\1\u0101\6\u0107\1\266\5\u0107\3\266\2\u0107\1\266\10\u0107"+
44415	"á»"
55635	w2r1
54598	testEmptyArraySort()
52206	registermerge
39106	"Microsoft
33199	src.reflectWith(reflector);
23754	theory]
6655	<code>7*255*2
63284	0x62,
17696	deserializing
61674	ucf74
35167	docBoost
51390	triggerMerge)
10304	"\6\36\1\u0142\10\36\1\352\12\36\1\141\12\142\1\u013e"+
51057	mergePolicy.findForcedDeletesMerges(segmentInfos);
39014	fail("keySet()
35054	advancetonextcommondoc
51377	triggerMerge,
29918	"\1\25\1\0\2\25\4\0\1\25\1\0\1\25\3\0"+
22079	4.0!
40105	LUCENE-948:
24426	slot2)
10869	"\3\0\1\136\4\0\2\136\150\0\1\376\6\264\1\u02ff"+
21759	getcurrentsearcher
37014	absPtr;
42093	(maxscore
52667	testmethodsoverridden
3482	wait(1000);
32708	decodedBuf
7206	entered
48082	dir.listAll())
12784	ucf88
3830	4.0.
1194	dir.listAll();
9323	"\1\133\1\132\1\133\36\132\33\133\2\0\131\132\13\133\1\132\16\0"+
37028	absPtr)
55050	serial");
34596	super(spans,
21025	4.0)
39307	termarrayshashcode
629	ioe.printStackTrace(System.out);
33036	src.restoreState(state);
2394	4.0,
9501	"\0\u4ef4\0\u4f97\0\u503a\0\u50dd\0\u5180\0\u5223\0\u52c6\0\u5369"+
48076	lockFactory="
12383	ucf92
39008	co.length));
3103	Cache
29674	"\30\0\3\141\1\137\1\0\1\140\1\0\1\137\1\136\32\0\5\132"+
36006	(1);
24425	slot1,
20182	(optional.size()
13185	ucf7e
43476	testSpanNearVersusSloppySpanNear()
4867	indexof
41798	prefix.charAt(idx),
16435	(1),
42369	assertEquals(payload[0],
24149	data[i][11],
46588	"âº"
36309	getInputType()
2313	English.intToEnglish(i),
65413	assertEquals(156,
38918	mergefactor
48947	#parse(String)}.
983	ERROR:
58475	lowerArr
60517	"\1\u0101\15\266\1\u038a\14\266\1\142\12\266\1\0\3\137"+
26146	sortfields
45893	"á»¯"
1940	lengths[i];
44190	,"b",
44495	"á»"
66660	ERRORS
18784	"à¸à¸²à¸£à¸à¸µà¹à¹à¸à¹à¸à¹à¸­à¸à¹à¸ªà¸à¸à¸§à¹à¸²à¸à¸²à¸à¸à¸µ",
8994	suffix
41288	doPack;
28041	"\u0031\u002E\u2060\u0041",
49830	setdateresolution
41293	doPack,
20799	write(T
54561	ArrayUtil.mergeSort(a1,
62298	"XXXXX");
51250	setDiagnostics(info,
62499	req2)
38680	index2.getSequentialSubReaders().length
3957	termAtt.setLength(length);
60469	"\1\u0359\15\0\1\u0359\6\0\12\u035a\1\u02ef\13\0\1\u0126"+
62300	"XXXXX"))
32675	encodedLen1);
38744	index2.terms();
39980	(normsCache)
33097	typeAtt);
52330	Term("p",
18627	"ÜÜÜ©ÜÜ¦ÜÜÜ
27949	"\u0031\u0027\u0027",
21115	trylock
1676	filelength
54528	//expected
29298	prevposition
43143	topDocs.scoreDocs[i];
16995	PositionBasedTermVectorMapper()
14514	zz_unknown_error
6790	@since
495	system
58431	assertEquals("Set
22009	termsout
51497	(currentReader.isDeleted(j))
18259	Field.Text("hed",
50750	getLogMergePolicy().getMergeFactor();
24027	String.valueOf(Long.MIN_VALUE),String.valueOf(Double.MAX_VALUE),
32469	setMergePolicy(newLogMergePolicy(2))
36555	startAddress;
37649	sb.append(t).append('
26760	lies
54024	si.getNormFileName(this.number);
53945	NORMS_HEADER
8798	4.10
67879	upto="
60194	"\1\142\1\u0261\11\266\1\0\3\137\1\0\2\137\1\140"+
50345	(Map.Entry<SegmentInfo,SegmentReader>
20157	sum*coordFactor,
65512	currentCommitPoint
58126	life
54137	"fox"
5850	writeMasks;
50215	4.0:
16799	multiReader.close();
40169	top.termEnum.docFreq();
28376	TestCharsRef
59109	"\2\u16d8\2\u177b\2\u181e\2\u18c1\2\u1964\2\u1a07\2\u1aaa\2\u1b4d"+
4786	writer.setMaxBufferedDeleteTerms(4);
46786	"â¸"
64485	(moreInclude
25138	testAsterisk()
43788	ï¬"),
58626	testcontainswithnull
36627	follow.target="
62498	req1,
53223	maxlen
4791	writer.getConfig().getMaxBufferedDocs());
39427	b[0]);
49087	IllegalArgumentException("You
65135	compileNode(node,
52369	PerDirPayloadProcessor(processors));
65497	VERBOSE_REF_COUNTS
27863	"\u0061\u002C\u0308\u0030",
54352	StopAnalyzer.ENGLISH_STOP_WORDS_SET;
35346	teststopanalyzer
33441	finishCommit()
30293	failOnPrepare,
31718	org.apache.lucene.index.IndexUpgrader
39926	readerIndex(n);
41009	advanceFloor("
41541	Pick
7078	activity,
30286	failOnPrepare;
8915	demand
31664	origoldname
26157	GrowableWriter
22416	num_bytes_char
3786	indexes
36472	(Builder.CompiledNode)
38022	(NumberFormatException
38324	assertlongrangesplit
51734	segUpto++;
30518	StandardTokenizerImpl
2786	early
16299	bq.add(q,
54387	description;
23653	closing.set(true);
8634	finalState)
58270	0x65]
52733	description,
42432	WhitespaceTokenizer
67109	ClassicAnalyzer(Version
6523	NumericRangeQuery.newFloatRange("weight",
8821	description)
35171	maxTermFrequency
64841	numtermssameprefix
38868	LUCENE-2474
5509	getbegincolumn
60271	"\1\u0101\15\266\1\u02b0\14\266\1\142\12\266\1\0\3\137"+
8000	getUseUnmap()
16301	Term("NEVER","MATCH")),
25575	Set<ReaderField>>
30943	5).scoreDocs.length);
53509	sub-index.
8620	finalState;
56714	orphan'd
3138	upto
10265	"\151\0\4\u011b\2\0\1\u011b\15\0\1\u011b\6\0\12\u011b"+
8742	""+rand.nextInt(i);
66257	randBoolQuery(rnd,
17073	getTerms()
22849	getints
54856	CopyOnWriteArrayList<WaitingListener>();
59659	"\1\67\1\0\1\25\2\0\1\25\1\141\11\36\1\u0105"+
38291	0x8000250,
63298	0x65,
44042	HALF
17327	"valu")));
37117	PriorityQueue<NodeAndInCount>
67074	seeks()
639	After
16060	indexerThread2.join();
41867	assertNotNull(result);
61132	"\12\u0587\1\u0545\175\0\4\u0588\2\0\1\u0588\15\0\1\u0588"+
34621	.end(),
23054	performing
4684	IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR);
28669	enablePositionIncrements
61673	uced1
57777	assertFalse(failed.get());
25713	"insanity".
26138	onecomparatorscoringmaxscorecollector
19157	Ø§Ø
17823	constantscoreautorewrite
55308	lim)
23897	(pruner.doPrune(ageSec,
30270	wildcardqueries
44493	"á»"
27521	"\u005F\u0061"
3132	cachedSegs.clear();
66596	"aba",
66804	stream.addAttribute(CharTermAttribute.class);
28240	flush()
26653	mockrandomlookaheadtokenfilter
37700	="high";
40171	queue.close();
41379	inputMode
1009	like
23266	docFrequencyMap
8862	testruleorder
64252	#SHORT}
14971	testIncreasingSloppiness3()
58660	verifyCompiles()
58585	set.add("test2");
9863	"\2\0\1\25\2\0\1\25\1\0\1\25\4\0\1\25"+
4664	IndexWriterConfig.class,
19594	resource,
12382	uceef
1622	indexed
2229	link
5389	line
832	conf.getMergePolicy()).setMergeFactor(2);
1360	indexer
22248	int[oversize(minSize,
7193	maintains
67953	pendingPosInc;
2720	assertEquals(
38487	Field("termvector","one
30493	currentset
16018	writer.updateDocument(new
52555	toString("");
60719	"\1\u02e2\6\u0428\1\u043a\1\u02e2\2\u0428\2\u02e2\2\u0428\1\u02e2"+
16600	(size
13184	ucedb
54601	ArrayUtil.mergeSort(a);
49667	jj_3R_2()
27916	"\u0031\u003A\u0308\u0061\u2060",
39567	lastField="
21924	resource;
15794	output.writeInt(delCount);
18117	innerWeight
12783	ucee5
19493	resource3
29902	"\2\0\1\25\1\0\1\25\103\0\2\52\6\0\1\52"+
19492	resource2
19491	resource1
5838	Keep
61045	"\12\u0537\1\u04f5\175\0\4\u0538\2\0\1\u0538\15\0\1\u0538"+
39529	compareToLastTerm(int
17709	#SCORING_BOOLEAN_QUERY_REWRITE}
41265	System.out.println("expected
34928	spanmultitermquerywrapper
49606	goop1.image.substring(1,
37930	!nextIsSet;
52947	4-for-1
62144	bq2.add(nested2,
7742	FieldSelector
44409	"á»"
54246	numEntries;
37956	(IdentityWeakReference)o;
24143	data[i][9],
43409	(bytePos
11790	UAX29URLEmailTokenizerImpl34(java.io.Reader
7923	non-Sun
10191	"\1\264\3\u0103\1\141\12\264\1\0\3\136\1\0\2\136"+
17014	posVal
44491	"á»"
51861	unwinds
42632	PrefixQuery}
64351	hasCutOff
55874	opendeleted
48073	getLockID()
6734	&lt;
57086	&lt=
34432	"maxBufferedDocs
27615	"\u0300\u0308\u0061\u0027",
52786	Unicode,
16200	w5",
56304	Integer.numberOfLeadingZeros(hi
66446	postingsArray.size)
19164	ØØ
34500	sb.append("mergeScheduler=").append(mergeScheduler.getClass().getName()).append("\n");
59710	"\2\u0107\10\266\1\u0107\1\142\12\266\1\0\3\137\1\0"+
66337	postingsArray.size;
30797	buffer.offset
45822	"á»®"
59331	"\1\71\2\0\1\72\3\0\1\54\2\0\1\55\3\0"+
6474	trace:");
32063	getstrings
53644	preparedweight
20376	lazyFieldsToLoad
20161	"coord("+coord+"/"+maxCoord+")"));
55972	LimitTokenCountFilter(TokenStream
36445	startAddress
60301	"\1\u02ce\5\266\1\142\12\266\1\0\3\137\1\0\2\137"+
35234	freqOutput.getFilePointer();
32364	lockattempts
54718	classloaders
38960	TestCharArrayMap
44411	"á»"
25451	checkSanity(FieldCache
33096	typeAtt2,
11153	"\1\u03ef\6\0\12\u03ef\1\u0331\13\0\1\u02cf\160\0\34\u0214"+
24532	HashMap<String,Float>
9938	"\1\200\2\0\1\201\41\0\1\25\1\65\7\0\1\65"+
27435	"\u0030\u0308\u0041"
25106	assertMatches(searcher,
64226	freedom
58030	docWriter.directory.createOutput(IndexFileNames.segmentFileName(docWriter.getSegment(),
60648	"\6\0\12\u040b\1\u039a\175\0\4\u040c\2\0\1\u040c\15\0"+
1729	FIELD_IS_NUMERIC_LONG
11203	"\1\u041a\3\264\1\0\3\136\1\0\2\136\1\137\3\136"+
11689	"\1\0\1\11\44\1\15\0\1\1\1\0\1\1\10\0"+
15362	text_field_utf1_key
42818	getPositionIncrement()
24325	lastSub
39216	tfExplanation.setValue(similarity.tf(phraseFreq));
11989	warning:
43474	testSpanNearVersusBooleanAnd()
39380	checked..
50610	(segmentInfos.getFormat()
2801	warning.
5645	f>0)
52762	warning,
10315	"\1\65\1\66\1\0\1\25\2\0\1\25\1\u013d\24\36"+
29208	tvx.clone();
48808	IndexFileNames.segmentFileName(seg,
48522	visitScorers(ScorerVisitor<Query,
34259	readerPooling;
12483	u0fe1
30839	#getOffset()}
67150	SortedTermVectorMapper(boolean
24146	data[i][10],
59968	"\1\u019c\15\0\1\u019c\6\0\12\u019c\1\u019d\13\0\1\u0126"+
41338	fst.pack(4,
60138	"\216\0\1\u0161\175\0\4\u0224\2\0\1\u0224\15\0\1\u0224"+
28239	written.
45895	"á»±"
7047	Increments
67854	testsinglenonmergeablesegment
34471	readerPooling)
13285	u0fcd
64286	getvaluesource
9559	"\1\u747b\1\u751e\1\u75c1\1\u7664\1\u7707\1\u77aa\1\u784d\1\u78f0"+
60477	"\1\u035d\4\232\1\352\12\232\175\0\1\351\1\u035e\31\232"+
36822	//System.out.println("cycle
56751	assertEquals(N+1,
48789	10)));
6704	15*15*2
3324	max_array_size
65668	pre-decr
26126	pq).getFields(),
45349	"á»¡"
29759	"\2\32\1\0\2\32\1\0\3\32\1\0\11\32\1\0"+
62766	subHits.scoreDocs.length));
46842	warnings
57112	0x3f;
18595	ÙØµØ©
43161	Term(vals[i],
21307	actual.close();
46180	"â°"
51770	loadDocStores;
23148	IndexSearcher(ramDirectory2,
1971	writefield
25191	"meta??"));
52980	upto);
51778	loadDocStores,
15404	fsdir
12082	u0feb
55938	(countUntilPurge.getAndDecrement()
37095	arcWithOutputCount="
23146	IndexSearcher(ramDirectory1,
62309	qA.setBoost(9f);
22790	upperVal.toString())
38633	deleteDocument
61458	"\5\u02e2\1\u0694\4\u02e2\175\0\1\u034d\32\u02e2\1\u034e\1\u02e2"+
18	agreements.
7839	mockfilter
45816	"á»¨"
26539	allFieldNames)
35917	SingleCharTokenizer
5133	(!jjCanMove_1(hiByte,
1267	doc.add(newField("subid",
54257	sort.length);
17966	included.",
19097	"ìã");
48077	getLockFactory();
43171	adoc(String[]
45098	LEFT
53267	((first^(first>>>32))
56800	lastcommit
53568	createDocFrequencyMap(terms);
60894	"\1\u039a\175\0\4\u04b7\2\0\1\u04b7\15\0\1\u04b7\6\0"+
58510	stopwordsUpper.add(string.toUpperCase());
38693	fieldInfos2.fieldInfo(fieldID);
4461	testnumericrangequery32
11339	"\1\u0482\1\u0481\1\u0480\175\0\4\u0484\2\0\1\u0484\15\0"+
52056	getdelcount
8132	bufSize);
10935	"\1\u0122\161\0\4\u033a\2\0\1\u033a\15\0\1\u033a\6\0"+
2376	Term(PayloadHelper.MULTI_FIELD,
32750	(byteNum
1546	termEnum.close();
11569	"\1\u04d9\175\0\4\u052d\2\0\1\u052d\15\0\1\u052d\6\0"+
41651	testFinalOutputOnEndState()
63974	READ_TEST_BYTES
67820	newWriterConfig();
56697	needsMerging;
29809	"\1\0\1\25\5\0\3\25\5\0\1\25\2\0\2\25"+
63297	0x64321,
41298	doPack);
59770	"\1\u0141\17\36\1\355\12\36\1\142\12\143\1\u0142\1\137"+
8468	java.lang.ref.WeakReference;
22291	offsetLeft
23799	IR.getVersion
28865	TermsHashPerField(docInverterPerField,
12782	uce42
32969	lastPositions;
38372	x7fffec8
58129	persist
38486	Field("tvnot","one
41689	rootNode.arcs[1].output
38789	files)
2202	files.
41168	(!isValidUnicode)
2181	files,
62992	files1
50464	closing))
62944	files2
61672	uce2e
7298	topDocsSize()
20906	inhibit
103	TestIndexReaderDelete
38570	reader.commit();
58547	Smoketests
49416	'\u005c\u005c')
1750	Lucene
21710	files:
35226	storePayloads,
15466	files;
15011	searchequivalencetestbase
58936	storePayloads)
58779	Integer.toHexString(c);
18057	this.query
66956	outputs2.outputToString(output.output2)
35230	storePayloads;
1588	assertTrue(topDocs.totalHits
59040	testclonesafety
49584	getFuzzyQuery(field,
24727	m2.get(key);
25740	validtoitems
45919	"á»¼"
22186	(Constants.JRE_IS_64BIT)
25108	wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
4069	.setMaxBufferedDocs(_TestUtil.nextInt(random,
10144	"\1\66\1\0\1\25\2\0\1\25\1\140\1\36\2\352"+
63267	0x51,
7204	"foo"
64882	//writer.setUseCompoundFile(false);
17478	"v1")),
32083	recycleByteBlocks(byte[][]
31627	testcreatesinglesegmentcfs
33350	UserData="+commit.getUserData()
36819	Arc<T>()),
63804	x8764321
52169	getflushdeletes
25953	queue.getReverseMul()[0];
27219	"\u3031\u0031\u002E\u2060",
27242	"\u0041\u0308\u002C",
31944	NumericUtils.prefixCodedToInt(val);
39845	maxDoc;
9425	"\2\116\1\131\3\120\1\116\2\120\5\116\4\120\4\117\1\116\3\117"+
20536	allowing
2619	multithreading
41731	r.length);
55487	"term3"));
53437	lower=random.nextInt(Integer.MAX_VALUE);
65658	incRef(file);
17046	currentPositions);
30654	"\1\53\11\0\3\25\5\0\1\25\1\0\1\25\1\0"+
49180	fieldToDateResolution.get(fieldName);
25065	scoremap
13183	uce38
39846	maxDocs
63268	0x52,
20599	getprevioustokenstream
17972	danishIndex);
5451	hibyte
15862	allFiles
32229	WriterThread(100,
61507	UAX29URLEmailTokenizerImpl(java.io.Reader
16947	assertdocdeleted
28364	scoremax
1186	index");
146	addDoc(writer,
34042	HashSet<Integer>(tg.values());
17520	w2.close();
58421	10,true);
20004	cause
63530	OpenBitSetIterator(long[]
22837	lowerpoint
3147	chunkUpto
45814	"á»¦"
67104	href="https://issues.apache.org/jira/browse/LUCENE-1068">LUCENE-1068</a>)
30026	u0fb1
17081	termvectormapper
53052	((chHalf
35294	curdoc
50989	changed).</p>
8596	(sink
41119	(cmo.isFinal
447	adddocumentwithfields
42164	other.length
53472	maxDoc,
35679	ntzTable[val>>>24]
30570	"\1\53\2\0\1\25\1\0\1\35\1\0\1\36\1\0"+
5689	(KeywordAttribute)
46093	"á»µ"
65053	fst.nodeCount;
48204	maxDoc)
67043	SeekCountingDirectory
50095	org.apache.lucene.analysis.LimitTokenCountAnalyzer;
67201	existingoffsets
36629	isFinal="
45889	"á»«"
46698	"âº"
11744	Complex_Context}
33450	IndexFormatTooOldException(String
21185	getFieldCache().getStringIndex(reader,
27962	"\u0031\u0027\u0308\u0300",
12884	u0fd7
38373	x7fffecf
12381	uce4c
9745	"\1\25\2\26\2\0\2\76\1\77\1\0\1\26\2\0"+
14745	CUSTOM);
3035	abstract
48211	NearSpansOrdered.toSameDoc()
17189	synchronization
44251	,"c",
11086	"\32\230\1\347\3\230\1\u03c2\6\230\175\0\1\346\1\u03b3"+
67192	this.storePositions
40246	current).isPayloadAvailable();
3438	OneMerge(List<SegmentInfo>
61767	u0fc3
43809	assertTermEquals("TH",
23005	time.....",
65359	suffixmincount2
63709	x84321
21927	resourceDescription)
26649	nextToken();
19194	Ø¿Ø
37854	Useful
8095	resourceDescription,
56622	onCommit");
51006	#close(boolean)}
38391	org.apache.lucene.store.NoSuchDirectoryException;
49099	getFuzzyPrefixLength()
19829	testExactScoreByte
19002	emails;
46355	"â¸"
67307	prevItereationDoc.get("id");
1240	tokenizer));
633	(Throwable
53511	starts[subSearcher(n)];
2821	allowed="+timoutException.getTimeAllowed()
56412	tmp.setForceMergeDeletesPctAllowed(30.0);
45256	"á»¢"
10132	"\4\0\2\136\2\0\1\47\1\0\1\50\1\0\1\51"+
23193	hits=indexSearcher1.search(query,
1092	(message.startsWith("now
61222	"\1\u034e\11\u02e2\1\u05d9\175\0\1\u034d\23\u02e2\1\u05da\6\u02e2"+
46332	"â·"
15058	DocHelper.setupDoc(testDoc);
64996	Shorter
50242	stopMerges;
21916	resourceDescription;
21862	getBinaryValues(String
39695	maxIndexVersion;
37195	possave
10405	"\6\u016a\3\230\1\u016a\2\230\1\u016a\2\230\1\u016a\6\230"+
27086	"\n\u0041",
9990	"\1\77\1\0\1\77\2\0\1\25\1\135\32\155\1\136"+
41188	LineFileDocs
8121	raf.getChannel();
53675	"even")),
18730	"ÙÚ©ÙÙÛ",
48632	maxFieldLength)
39755	oldStarts,
23634	doAfterFlush()
62780	assertEquals("doc="
21900	bitwise
3415	resulting
40023	maxIndexVersion)
50683	maxFieldLength;
43870	elsif
25963	competitive.
26016	competitive,
3575	whenever
42864	other.payload
6572	With
1429	setdofail
30412	TestPorterStemFilter
61499	"\2\1\1\0\2\1\1\0\3\1\3\0\1\1\4\0"+
40706	FSTTester<PairOutputs.Pair<Long,Long>>(random,
34199	#CREATE}
17965	assertEquals("The
26412	outputArray[outputByteNum]
67358	assertEquals(subReaders0.length,
65577	writeTo
15212	assertEquals(DocHelper.FIELD_3_TEXT,
22936	Arrays.asList(a);
59753	"\3\174\2\0\2\174\12\0\2\174\1\0\3\174\1\0"+
2854	decrease
31115	filestodelete
26046	else.
29806	"\1\0\3\25\1\0\1\25\1\0\2\25\4\0\3\25"+
3595	else,
57077	this(64);
57424	grrr
19169	ØØ
60643	"\4\266\1\u0408\5\266\1\0\3\137\1\0\2\137\1\140"+
67662	numreaders
48128	Spans.<br>
63274	0x54,
31194	"24.cfs",
30107	TermInfoAndOrd(TermInfo
3302	instance
54428	buffer.append("<li>");
57509	(tiiFileLength
59523	"\1\336\15\0\1\336\6\0\12\336\1\337\242\0\1\340"+
51657	(1.0
53424	testMultiValuedNRQ()
10469	"\1\136\1\162\3\0\2\136\204\0\12\u017e\175\0\1\376"+
23369	getHitCount(dir,
58921	IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
62343	assertEquals(s(2,1,2),
67534	(createReaderMutex)
63270	0x53,
38314	0x8000251c,0x8000251c
41939	codecprovider
57471	_TestUtil.rmDir(tmpDir);
35135	(PayloadFunction
28386	utf8[i]
32473	setMergePolicy(newLogMergePolicy(3))
40427	application</b>
20245	other.getBoost())
18586	testArabic()
21244	expected.length()
55516	IndexOptions.DOCS_AND_FREQS_AND_POSITIONS,
39944	subReaders[i].isDeleted(n
5348	jjnewLexState[jjmatchedKind];
2255	org.apache.lucene.search.spans.TermSpans;
30573	"\1\142\16\0\1\143\2\0\1\144\21\0\1\101\17\0"+
23697	returend
64881	TestMultiThreadTermVectors
24084	"Z",
46891	circled
25843	SpanNearQuery))
18789	àºàº°àºàº²àºàº´àºàº°à»àº
4028	unicode
62696	intValue;
15543	hasProx
34786	qp.getSuperFieldQuery("","multi
29158	else{
22911	other.getBoost();
21210	SimpleFSInputs
21882	no_fields
9065	grow
14657	#STRING},
30539	"\11\0\1\46\2\0\1\120\16\0\1\121\2\0\1\122"+
14667	SortField(null,
57066	(elements)
52675	currentPayloadScore)
45887	"á»©"
66628	FAILURE:
35781	nexthighestpoweroftwo
26349	getEncodedLength
36477	(lastFrozenNode
66002	assertEquals("b:one^5.0
54097	stpf0.setEnablePositionIncrements(true);
43828	assertFalse(filter.incrementToken());
41211	termEnum.docFreq();
24140	data[i][8],
35356	FAILURE,
52677	currentPayloadScore;
34246	WRITE_LOCK_TIMEOUT;
55745	createIndexNoClose(boolean
52613	supported:
63214	untokenized
16549	supported.
31552	FieldCache.DEFAULT.getInts(searcher.getIndexReader(),
34135	PhrasePositions[pq.size()];
27504	"\u005F\u0027",
45026	"á»»"
36526	ArrayUtil.grow(bytes,
66649	FAILURES
42059	#31241):
32818	touppercase
28654	log(sb.toString());
38732	(itField1.hasNext())
62730	randomSortFields[sortIDX]
56477	spans1.start()
67603	SegmentReader.getOnlySegmentReader(r1);
16131	7.4950366f,
16575	supported,
29041	formats");
39603	while(start
59961	"\32\36\1\142\12\u015d\1\0\1\137\1\153\1\137\1\0"+
45812	"á»¤"
53701	assertEquals(all.scoreDocs[pageStart
3162	curScores[curUpto];
52705	addDocument(writer,
14639	Shorts.
51634	deterministic
53334	valid(second,
66732	<code>Long.MAX_VALUE</code>
30824	chars[offset];
5270	curLexState
45820	"á»¬"
16487	testtoomanysnapshotinfos
36231	isFinal()
60178	"\4\0\2\137\150\0\1\u0101\24\266\1\u0254\5\266\1\142"+
441	directory
52500	iw2.close();
6139	"foobar");
31229	decompression
57352	((thisArr[pos]
43524	doTestCountVectorOfSize(8);
12380	ucda9
50797	close(false),
3164	other.collect(curDocs[curUpto++]);
58056	perDoc.docID;
58053	perDoc.docID:
8543	EntityDetect
55303	assertEquals(offsets1[k].getStartOffset(),
35487	transformed
56182	TestReader
11859	(internal
65138	isFinal);
6944	(package
10706	"\150\0\1\376\24\264\1\u0256\5\264\1\141\12\264\1\0"+
64665	(payloadScore
55432	testAddDocument()
33407	checksum.
46060	"á»´"
38418	assertTrue(reader.isCurrent());
59083	"\1\0\2\12\1\0\1\12\2\2\3\0\1\2\4\0"+
10015	"\2\25\3\64\10\0\1\64\2\25\2\0\1\64\6\0"+
37131	nodecount
33221	payloadattributeimpl
53324	(!allowDouble)
21036	space");
39851	clone(readOnly);
2462	PayloadHelper.NO_PAYLOAD_FIELD,
7124	portal
1895	field.getBinaryValue();
43918	TILDE
11383	"\1\u04a5\1\u04a6\1\u0469\13\0\1\u0325\226\0\1\u03da\13\0"+
58767	offset--;
58291	a.bytes;
51752	compoundFileName
36233	b.append("node="
17650	#CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE}
27342	"\u002C\u003A",
14611	zznext
56605	lastCommit.getSegmentCount());
27216	"\u3031\u0308\u0031\u0027",
20416	dateTime
5767	avoided.
36686	arc.numArcs;
20671	fields_extension
8505	d.add(new
62134	testEquality()
33810	pp.rptInd;
10234	"\3\136\3\0\1\136\4\0\2\136\150\0\1\376\4\264"+
32619	random.nextInt(MAX_RANDOM_BINARY_LENGTH
27567	"\u00AD\u0308\u0061\u2060",
42976	newtermoffset
65222	node.prependOutput(wordSuffix);
45351	"á»£"
38869	testReaderFinishedListener()
22941	ArrayList<Integer>(list1);
27606	"\u0300\u00AD",
41290	dirOut,
27561	"\u00AD\u0308\u005F",
25410	org.apache.lucene.search.FieldCache.CacheEntry;
23341	java.util.concurrent.atomic.AtomicBoolean;
25766	kidkey
26717	<code>n</code><sup>th</sup>
5518	eofseen
41286	dirOut;
18136	result.setValue(queryWeight);
30648	"\2\0\1\52\3\0\1\52\5\0\1\52\7\0\1\52"+
56088	csrq("data",
1629	written;
31142	written:
36632	Insert
56635	ExpirationTimeDeletionPolicy(Directory
4216	(count-1)*distance+startOffset,
8832	afterClassCheck()
29035	tvfLengths,
3345	creates
4344	compared
54581	Item(equal
308	created
48934	freqvector
43257	assertTrue(tdocs.skipTo(25));
28853	charPool
54962	genLock.lock();
7178	compares
45036	,"lz",
42525	generaterandomdata
55684	NUM_THREADS;
40315	weightValue;
48920	this.documentNumber
30825	seq.charAt(offset);
55801	testForceMergeDeletes()
14946	sloppy
5303	curTokenImage
49408	hexToInt(curChar)
33606	keys.add(key);
43442	TermQuery(A)
67455	40);
57503	((int)
43067	installed
50555	create;
64294	fastest:
23115	create,
46556	"â³"
28648	TypeTokenFilter
67328	reopen()
10592	"\21\230\1\347\12\230\175\0\1\346\3\230\1\u01e3\26\230"+
48538	visitor.visitOptional(parent,
23332	IndexerThread(modifier,
20625	primaryDir
27060	"\r\u0061\u003A",
64942	totaltime
54678	create!
39254	(first)
40417	**here**
24134	data[i][6],
8824	stack.push("@Rule
9519	"\0\uaa01\0\uaaa4\0\uab47\0\uabea\0\uac8d\0\uad30\0\uadd3\0\uae76"+
2708	myHc.hitCount();
46582	"â²"
11308	"\1\u046b\2\u046a\2\u046b\1\u046a\1\u046b\1\u046a\1\u0469\13\0"+
29397	firstsize
54166	MyTokenStream());
2764	assertTrue(
54668	exiting
54131	testFirstPosInc()
27255	"\u0041\u00AD"
48351	ScorerDocQueue
19324	uris
50584	segmentInfos.replace(oldInfos);
52232	getnumbuffereddeleteterms
61393	"\1\u034e\12\u02e2\175\0\1\u034d\1\u02e2\1\u061e\30\u02e2\1\u034e"+
33909	(PhrasePositions[]
10303	"\1\352\2\36\1\141\12\142\1\65\1\136\1\143\1\136"+
40926	Util.getByOutput(fstLong,
38351	x800000000000250l
42284	TestPayloads
51907	IndexWriterConfig#getMergedSegmentWarmer()}
56978	u0ecb
16888	subs.length
15776	"delCount="
63975	0x80,
52737	searcher.search(query);
41364	tStart)/1000.0);
21909	0x80)
58600	dtrue
41260	termEnum.term());
41314	intsRef);
11365	"\1\376\3\264\1\u0498\26\264\1\141\12\264\1\0\3\136"+
49905	newfuzzyquery
5929	blocks.length;
59446	"\1\62\4\0\1\202\2\0\1\203\41\0\1\25\1\66"+
30024	u0ee3
42215	testPayloadAttribute()
35815	testEmptyIndexWithVectors()
59515	"\1\53\3\0\1\54\2\0\1\55\3\0\1\56\7\0"+
56992	byteArray(StringBuilder
53032	0x80;
63509	0x80:
3166	(isCached())
58080	fieldPointers.length)
63752	x865421
8938	measure
30406	tpctool
54328	bytestart
31351	index="
35342	positions");
39642	end=8192,
26213	hasarray
29560	"\2\133\1\0\4\133\2\132\12\134\3\132\2\0\1\132\17\0\1\133"+
22313	SorterTemplate
26593	reader.norms(f.name());
46804	inputText.append('
47957	commitfailexception
19898	q.valSrc.getValues(reader).getInnerArray());
33732	postings==null
63755	x865432
57083	index%64
29823	"\41\0\1\25\1\53\7\0\1\53\2\0\1\25\1\0"+
54473	Query#getSimilarity(Searcher)}
63754	x865431
62965	set1.add(files1[x]);
18987	urls
29292	readtermvector
59996	"\20\232\1\352\12\232\175\0\1\u01a9\16\232\1\u01ad\13\232"+
58276	append(BytesRef
53834	stringiterator
17840	'false
16346	snear
29459	testMethod2()
59973	"\1\u019d\13\0\1\u0126\161\0\4\u01a1\2\0\1\u01a1\15\0"+
55609	index2df);
32485	writer1.close();
54705	NativeFSLock
39996	termPositions()
41865	builder.add(input,
27665	"\u0061\u2060\u0308\u0300",
38257	0x00L,0xffL
59163	"\3\u2945\3\u29e8\3\u2a8b\3\u2b2e\3\u2bd1\3\u2c74\3\u2d17\3\u2dba"+
50245	ReaderPool
41193	newFSDirectory(tempDir);
23349	unstored
6052	'a'};
48769	int[TERM_FREQ];
55557	(iwc.getMaxBufferedDocs()
53823	recursion)
63381	0x83,
35549	//CSA(eights,
65463	mechanics
989	expected,
19786	expected.
1112	expected)
68136	hitB.score;
26033	OutOfOrderMultiComparatorScoringNoMaxScoreCollector(
550	final
3682	(!input.incrementToken())
68134	hitB.score)
25503	item.getValue();
12080	u0ea5
39517	utf8Result.result,
63385	0x84,
30351	testWrapper()
16095	allthreads
10162	"\3\36\1\352\13\36\1\352\12\36\1\141\12\142\1\65"+
37735	SortField(ID_FIELD,
5894	non-conditional
19833	testExactScoreInt
10794	"\3\0\1\136\4\0\2\136\150\0\1\376\32\264\1\141"+
24280	Short.MAX_VALUE
33981	Comparator<PhrasePositions>
11951	ZZ_ROWMAP;
11120	"\2\0\1\u03d9\15\0\1\u03d9\6\0\12\u03db\1\u03da\13\0"+
64275	ShortFieldSource(field);
36094	java.io.OutputStream;
63378	0x81,
33869	(!checkedRpts)
37830	spaces.
54136	"hte",
11114	"\1\u03d5\1\264\1\141\12\264\1\0\3\136\1\0\2\136"+
43224	testBadSeek(int
58334	((aByte
38662	index1,
63034	"<_ESCAPED_CHAR>",
22530	exclude
26277	original.limit()
42685	w.getConfig().setMaxBufferedDocs(2);
45318	BOTTOM
63379	0x82,
67445	assertFalse(segmentReader3.normsClosed());
60435	"\1\u0214\3\u01d0\1\u01d2\1\0\1\u0213\3\0\2\u01d0\4\0"+
18158	docIdSetIterator.advance(target);
26757	finds
30173	tiOrd
43475	SpanNearQuery([A
10721	"\1\u0263\6\0\12\u0263\176\0\4\u01c8\2\0\1\u01c8\15\0"+
38663	index2)
8438	l.release();
50848	"closeInternal");
63441	0x87,
56402	writeByte((byte)
9025	output.writeVInt(prefix
35662	ntzTable[lowByte];
58420	set=new
21019	testName;
52108	dwpt
53741	href="#version">Version
3191	cachedSegs
814	crashDoc.add(newField("crash",
62359	spanB.next());
4477	getrewritemethod
5828	currentMasks
6692	(2^precisionStep
61093	"\1\u034d\17\u02e2\1\u056a\12\u02e2\1\u034e\1\u056b\11\u02e2\175\0"+
60665	"\1\u033c\160\0\34\u01d0\12\u0418\1\0\2\u01d0\1\u0214\3\u01d0"+
1022	setMergePolicy(newLogMergePolicy(5))
58794	20).getBytes("UTF-8");
33684	MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));
35351	newstop
10948	"\12\230\175\0\1\346\16\230\1\u0346\4\230\1\u0347\6\230"+
382	assertTrue(r.isDeleted(1));
59837	"\2\137\150\0\1\u0101\32\266\1\u014c\12\266\1\0\3\137"+
63048	"\")\"",
18481	UAX29URLEmailTokenizer
27232	"\u0041\u0308\u3031",
38082	DOUBLE_NANs
3695	'S'))
27800	"\u0061\u0027\u2060\u000B",
28522	stringfldstored
35401	meaningful
57399	bits2words
4952	jjStartNfaWithStates_3(0,
34213	disabled.
46601	NON-BREAKING
63393	0x85,
59302	"\1\52\2\0\1\53\3\0\1\54\2\0\1\55\3\0"+
55197	(termDocs1.next())
22411	newarray
10149	"\7\36\1\352\13\36\1\141\12\142\1\65\1\136\1\143"+
33284	expecteds
61278	"\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\1\u0610\11\u02e2"+
57425	redefine
54576	Item[100];
31385	expected;
38638	(IndexWriter.isLocked(dir))
41408	expected:
52358	Directory[2];
67511	assertReaderClosed(firstReader,
33375	rolled
60563	"\2\0\1\u03b0\15\0\1\u03b0\6\0\12\u03b0\1\u0348\13\0"+
50903	fine,
27708	"\u0061\u003A\u003A",
28114	"\u0033\u0034\u002C\u0035\u0036\u0037\u002E\u0031\u0034",
41646	Arrays.sort(input);
65232	count[0]="
44328	,"d",
63409	0x86,
62757	subHits
22870	super(match);
29017	fine)
15405	getlockfactory
9797	"\1\56\2\0\1\57\4\0\1\73\14\0\1\61\4\0"+
41447	monotonically.
63124	(TERM_COUNT/TERMS_PER_DOC);
26088	IllegalArgumentException("numHits
32201	writer2
33444	crc32
66096	f3:bla~0.5",
32467	writer1
16009	writer,
20411	writer.
9135	non-aborting
52493	iw1.addDocument(doc);
66846	TestSimilarity());
558	writer)
6998	maxBound
23010	lDoc2
23018	lDoc3
39311	termarrays1
54472	Delegating
39312	termarrays2
50438	xfer
59656	"\26\36\1\142\12\143\1\66\1\137\1\144\1\137\1\0"+
64065	is.readVLong();
61327	"\1\u063a\15\0\1\u063a\6\0\12\u063a\175\0\1\u0349\4\u063b"+
64090	testByteArrayDataInput()
26085	IllegalArgumentException("Sort
35013	directly:
17645	directly;
7346	sneaky
21425	two/2",
53421	SOLR-1322
18908	"David
63822	int_table
9854	"\1\57\4\0\1\204\14\0\1\61\4\0\1\205\2\0"+
10973	"\1\376\32\264\1\141\10\264\1\u0368\1\264\1\0\3\136"+
41189	LineFileDocs(random);
23026	writerA
23029	writerB
1030	failure.clearDoFail();
16187	writer=
17713	FuzzyQuery}.
549	writer;
17664	FuzzyQuery},
21035	writer:
38363	xffl
47921	PrepareCommitFailException
32576	encoded.length);
57276	subIndex;
50219	changeCount
11760	complex
6341	+(contents:query)
34417	2048.0)
50173	index).
28639	StandardTokenizer(TEST_VERSION_CURRENT,
57111	(i>=bits.length)
328	MockAnalyzer(random)));
36523	sizeNeeded
37622	4096
3338	curdocs
2845	testModifyResolution()
23281	writera
23282	writerb
55257	d2.length);
37412	gold
53657	relative'
19773	nextdocs
4872	setindexdeletionpolicy
4481	parseint
24468	"IJZ");
66612	triggerOn(SorePoint.RULE);
15577	j=0;j<numNormGen;j++)
2023	fst.readNextRealArc(scratchArc,
1505	directly.
47540	thorn
29753	"\1\32\1\0\1\32\1\0\1\32\1\0\1\32\1\0"+
5875	directly,
36470	nodeIn.arcs[arcIdx];
35069	BUFFER_SIZE;
59584	"\1\141\1\36\1\355\1\363\2\355\2\36\1\355\6\36"+
38931	writers
67767	s.getChars(0,
56937	"\2\42\7\0\1\42\4\0\2\62\7\0\1\62\4\0"+
29204	positions);
29766	"\3\32\2\0\1\32\1\0\1\32\1\0\2\32\1\0"+
38475	assertTrue(indexedFieldNames.contains("termvector"));
19777	nextposition
6557	good
28834	writeto
30025	u0f4a
46481	,"(15)",
50378	sr.decRef();
53141	UTF8toUTF16(byte[]
23567	startFlushCount
22135	HARMONY
10874	"\150\0\1\376\26\264\1\u0301\3\264\1\141\12\264\1\0"+
40238	MultiTermPositions(IndexReader
32068	humanreadableunits
941	crash
38742	index1.terms();
29169	byteBuffer
28644	"palindrome",
56159	words.length
3932	gone
18824	ï¼ï¼ï¼ï¼
65566	commitsToDelete.size();
34605	spans.doc())
15039	happening.
32296	index):
67010	dir.createOutput("out");
30963	sd[i].score);
38139	happening)
48661	hasmoretokens
60456	"\2\u0219\150\0\46\u0219\1\0\3\u0219\1\0\2\u0219\1\0"+
9760	"\1\0\1\51\2\0\1\131\3\0\1\53\2\0\1\54"+
39592	lastTi.proxPointer);
12883	u0f34
22727	includeLower
34600	spans.doc();
64734	non-floor
51104	getNextMerge()
36379	VERSION_CURRENT);
56728	assertTrue(lastCommit
54605	ArrayUtil.insertionSort(a,
16610	size--;
54494	ArrayUtil.getNextSize
9566	"\1\u9823\1\u98c6\1\u9969\1\u9a0c\1\u9aaf\1\u9b52\1\u9bf5\1\u9c98"+
19832	doTestExactScore(INT_FIELD,FieldScoreQuery.Type.SHORT);
31169	createIndex("index.cfs",
35915	initializeIndex(words);
13284	u0f2a
60284	"\1\u02be\13\266\1\u02bf\4\266\1\142\12\266\1\0\3\137"+
53104	(SUPPLEMENTARY_MIN_VALUE
23626	@Nightly
19118	reusableanalyzerbase
4333	assertFalse(termEnum.next());
12081	u0f48
1487	beforeClass()
1319	Token("bar",
62565	optionalscorers
28513	String(CompressionTools.decompress(docFromReader.getBinaryValue("binaryCompressed")));
18323	assertEquals("score
12482	u0f3e
48205	subSpansByDoc[firstIndex].skipTo(maxDoc))
2866	Thread[N_THREADS];
42762	<li>clear()
63183	numsavedterms
55221	assertEquals(len1,
65862	doNestedConjunctions(atLeast(10000),
31876	FieldCache.Parser)}.
41266	got:
49586	termImage,
7191	mechanism
68166	testrollingbuffer
41558	assertTrue(!actual.equals(idTerm));
64576	got.
60273	"\2\137\150\0\1\u0101\16\266\1\u02b2\4\266\1\u02b3\6\266"+
67601	testDeletes2()
63599	x54321
23603	w.updateDocument(delTerm,
20471	textField
33031	termAtt.setEmpty().append("AnotherTestTerm");
66210	testQueries10()
11260	"\1\u0449\6\0\12\u0449\1\u039f\13\0\1\u0122\160\0\1\u0163"+
51828	"IndexFileDeleter
42225	OffsetAttributeImpl();
15898	(getUseCompoundFile())
32601	CharBuffer.wrap(originalString1);
21308	csr.close();
61766	u0f20
27302	"\u003A\u0027",
55824	"val"));
39919	doOpenIfChanged(SegmentInfos
67287	doTestReopenWithCommit(random,
1247	docCount=0;docCount<numDocs2;docCount++)
38186	concenated
56817	precount
62569	makecountingsumscorer
22892	//we've
57864	NIOFSIndexInput(new
29362	nextSlice();
19873	expectedArrayTypes.put(FieldScoreQuery.Type.BYTE,
19395	MatchAllBits)
66630	ASSUMPTIONS.
34626	#getPayloadScore()}
53080	size-1)
7038	FilteredTermEnum},
48722	testversions
54078	(i%2==0)
9504	"\0\u5e3c\0\u5edf\0\u5f82\0\u6025\0\u60c8\0\u616b\0\u620e\0\u62b1"+
28316	heap.
23028	StandardAnalyzer(TEST_VERSION_CURRENT)));
56503	theTop.isPayloadAvailable())
933	lmp.setMergeFactor(Math.max(lmp.getMergeFactor(),
45480	,"(q)",
17540	td.doc());
16502	heap;
25030	isnan
6685	reduces,
9237	(numTermDeletes
14716	INT);
41836	TreeMap<String,TwoLongs>
38091	DOUBLE_NANs)
4680	IndexWriterConfig.DEFAULT_READER_POOLING);
33203	(AssertionError
33344	lastVal
28216	n++;
24137	data[i][7],
36356	emptyOutputBytes
22333	comp.compare(pivot,
17381	English.intToEnglish(i)));
28478	index";
5899	i=0;i<size;i++)
3423	used
37627	(r.nextInt(5)
56232	methodsThatShouldNotBeOverridden
9406	"\3\0\4\133\57\132\16\133\16\0\1\132\12\134\46\0\51\132\16\133"+
7466	offsetAtt.setOffset(starts[nextTokenIndex],
33549	b,16,19
60671	"\1\u041f\5\u0420\1\u0421\14\0\1\u02e1\161\0\4\u0422\2\0"+
52639	testFinalSingleton()
8307	curbuf
44562	,"ffl",
22802	!this.upperVal.equals(other.upperVal)
17090	termvectorreader
40460	AttributeImpl}
64797	validTerms[idx]);
41156	getRandomString()
3002	use.
49340	query.setRewriteMethod(multiTermRewriteMethod);
7955	use,
16029	.setMaxBufferedDocs(7);
21778	Fieldable#getBoost()}
48071	index".
51005	again.</p>
31226	index",
29144	readTermVector(String
32809	encodedlen2
60957	"\1\352\12\232\175\0\1\351\32\232\1\352\6\232\1\u04e5"+
32808	encodedlen1
5553	0x7f)
15581	SegmentInfos.FORMAT_DEL_COUNT)
58832	testInvalidUTF16()
15371	calling
6839	setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
39238	fieldExpl;
6835	shortcut
6843	href="#precisionStepDesc"><code>precisionStep</code></a>.
16594	heap's
1709	FieldsWriter
56626	commits.get(commits.size()-1)).getSegmentsFileName();
41587	(array
22551	part.indexOf('=');
36136	BYTE4};
26578	reader.norms(DocHelper.TEXT_FIELD_1_KEY);
24082	"Y",
47969	MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));
10875	"\2\136\150\0\1\376\1\264\1\u0302\30\264\1\141\12\264"+
20802	read(DataInput
17249	termVectorsReaderOrig
7603	0x7e)
33596	testRandomMaps()
22501	AttributeImpl>
10436	"\2\0\1\173\1\0\1\50\1\0\1\174\2\0\1\175"+
59185	"\3\u9955\3\u99f8\3\u9a9b\3\u9b3e\3\u9be1\3\u9c84\3\u9d27\3\u9dca"+
1251	IndexSearcher(r);
1614	uses
48763	testFieldsStorePos[i],
43342	SortedVIntList(int[]
18154	w.getValue();
4776	user
9215	queryLimits[upto]
9296	ZZ_LEXSTATE[l+1]
4176	doc"+type,
55642	mainWriter
29531	string-to-float
4670	assertEquals(128,
843	IOException();
36287	(in.readByte()
41700	checkStopNodes(FST<Long>
61764	u0dda
17532	IndexReaders
7519	lastVectorFieldName.compareTo(fi.name)
9027	output.writeVInt(suffix);
12480	u0df8
64016	INTS;
8031	mapping.
64722	"aa2"));
16271	st(m),
66725	<code>Integer.MAX_VALUE</code>
4836	write_lock_timeout
35220	long[numberOfSkipLevels];
39677	readOnly;
58675	testnrtcachingdirectory
39615	creation.
39905	readOnly:
45337	"á»"
50736	creation,
5714	isKeyword;
25514	mapping,
8449	lockdirname
18970	(null
13282	u0de4
25912	commits},
39699	readOnly,
19201	Ø¿Ø§ØØ
25871	commits}.
42104	retain
28026	"\u0031\u002C\u0308\u0031\u0027",
16705	IndexReader.openIfChanged(reader1);
39912	readOnly)
4628	getters.add("getOpenMode");
5713	isKeyword)
8897	cacheable
25620	IndexReader,
45242	"á»"
25630	IndexReader)
58560	raise
21351	"test.cfs");
59160	"\3\u19fd\3\u1aa0\3\u1b43\3\u1be6\3\u1c89\3\u1d2c\3\u1dcf\3\u1e72"+
64242	IndexReader.
52063	attempted
51893	MaxFieldLength(int
15094	lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);
25500	mappings
4292	left
16617	pq.top().change();
5609	Float.intBitsToFloat(random.nextInt());
36381	casing
45240	"á»"
12881	u0dee
59997	"\1\352\12\232\175\0\1\u01a9\12\232\1\u01ae\17\232\1\352"+
24131	data[i][5],
37193	setemptyoutput
9226	terms.iterator();
27779	"\u0061\u0027\u0308\u0061"
34034	rptTerms);
30303	this.prepareCommitData
57376	this.wlen)
59652	"\2\174\1\67\1\0\1\65\2\0\1\25\1\u0102\32\157"+
55740	.setMergePolicy(new
57327	this.wlen,
62439	prohibitedScorers;
49394	escape.
45341	"á»"
29455	testMethod1()
41386	args.length)
43838	$output
20720	index];
32398	specificlockname
34791	assertEquals("quick
34877	testmultianalyzerwithsubclassofqueryparser
42891	append(newTerm,
1893	len;
27686	"\u0061\u2060\u0308\u0031\u0027",
29390	implemented");}
21097	stateless.
32603	char[IndexableBinaryStringTools.getEncodedLength(originalBuf1)];
2355	doc.score
45339	"á»"
59277	"\1\54\2\0\1\55\3\0\1\73\7\0\1\57\2\0"+
18189	query.toString(field))
39246	MultiPhraseWeight(searcher);
30949	tdc.topDocs(0).scoreDocs.length);
24363	buff);
32624	++byteNum)
60426	"\4\0\2\137\150\0\1\u0101\1\u0323\31\266\1\142\12\266"+
34574	this.includeSpanScore
41661	BytesRef("stat"),
60145	"\1\u0168\4\u0227\2\0\1\u0227\15\0\1\u0227\6\0\1\u0229"+
62560	prohibitedScorers)
62505	prohibitedScorers.
34581	query.getSpans(reader),
52254	docinc
54896	TrackingIndexWriter,
45246	"á»"
63748	x865321
8576	existing
43042	<b>Threads</b>:
26952	"\u3031"
33669	MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));
26099	OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue,
20380	this.fieldsToLoad
27888	"\u0031\u003A\u0001",
57321	Math.max(wlen,other.wlen);
21842	Fieldable}s
54711	(locks
22097	len,
25407	houses
38457	assertTrue(allFieldNames.contains("keyword2"));
6414	len)
38222	yields
64657	len'
9707	"\2\0\2\25\1\0\2\25\1\0\3\25\1\0\1\25"+
26280	array");
27583	"\u00AD\u0308\u0031\u002E\u2060",
45244	"á»"
30021	u0dae
55421	len2
21187	FixedBitSet(fcsi.lookup.length);
55425	len1
31020	setMergePolicy(newLogMergePolicy(10))
52038	anynonbulkmerges
39821	normsCache.put(field,
1745	FORMAT
24242	"IGAEC");
59315	"\3\137\3\0\1\137\4\0\2\137\2\0\1\50\1\0"+
63921	testextendcharbuffer
24225	full.close();
11303	"\1\u0468\6\0\12\u0468\1\u0469\13\0\1\u0325\160\0\1\u0386"+
41968	storedocfreqs
8452	sleeptimems
753	threads[i].getName()
45345	"á»"
40067	writeLock.release();
42024	tables.
55096	Iterator<Document>
50611	Pre-3.1
39475	tables,
3495	numSegments
7030	endEnum()
722	writer.rollback();
10687	"\4\0\2\136\150\0\1\376\24\264\1\u0247\5\264\1\141"+
46099	"á»¿"
56385	(slice[upto]
33204	testcapturestate
55909	Increase
3713	classicfilter
25183	"metals",
57936	singleton;
1174	IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,
68046	left.end();
24373	check/purge
61443	"\1\u068a\6\0\12\u068a\1\u0658\174\0\1\u03a1\4\u068a\2\0"+
60598	"\30\232\1\352\12\232\175\0\1\351\26\232\1\u03df\3\232"+
43582	testgetset
3462	committed
8904	docid)
10626	"\1\141\3\264\1\u0201\6\264\1\0\3\136\1\0\2\136"+
65159	singleton:
40244	isPayloadAvailable()
11654	"\13\0\1\u0325\161\0\4\u0564\2\0\1\u0564\15\0\1\u0564"+
65476	RefCount>
32942	fieldState.offset
64378	Direct32(DataInput
25811	isInOrder()
34338	dominated
42863	type.equals(other.type))
11319	"\2\u0477\1\u0476\5\u0477\1\u0478\14\0\1\u02cf\161\0\4\u0479"+
22277	RamUsageEstimator.NUM_BYTES_OBJECT_REF);
43803	assertTermEquals("I",
25224	"*?",
19077	"<HANGUL>"
9540	"\1\u1456\1\u14f9\1\u159c\1\u163f\1\u16e2\1\u1785\1\u1828\1\u18cb"+
45248	"á»"
63315	0x71,
315	Re-open
33709	java.util.LinkedHashMap;
63942	TestAnalyzer1
21328	testRandomFiles()
63943	TestAnalyzer2
63944	TestAnalyzer3
63945	TestAnalyzer4
27227	"\u0041\u0308\n",
33245	illustrate
49291	term),position);
3632	mergeabortedexception
28618	fastcharstream
31145	&le;
56685	leeway);
45343	"á»"
1143	IndexOutput
63316	0x72,
25680	buf.append(m);
58278	length+offset,
33961	//System.err.println("initFirstTime:
36104	(packed
12481	u0e9b
60906	"\226\0\1\u03a0\13\0\1\u033c\214\0\1\u04c0\2\u04c1\1\u04c0"+
32696	testEmptyInputNIO()
60995	"\1\u0502\6\0\12\u0504\1\u0503\13\0\1\u02e1\160\0\1\u0349"+
29476	testRuleInvariantBeforeClass()
52870	COPYRIGHT
8919	docids
22786	sb.append(includeLower
64561	(leftInBuffer
59773	"\1\25\2\0\1\25\1\u0141\5\36\1\u0147\4\36\1\355"+
2713	createTimedCollector(myHc,
42703	docidx
63318	0x73,
29206	(TermVectorsReader)
2618	relaxed
36549	srcPos,
42149	copyInts(IntsRef
8773	doc.get("f"+i));
39102	org.apache.lucene.search.Explanation.IDFExplanation;
10734	"\2\152\1\137\1\u013f\1\u0140\1\u0141\2\0\1\76\1\136"+
41041	//System.out.println("TEST:
14525	zzlexicalstate
17933	unsignedIndexReader;
34555	org.apache.lucene.search.spans.SpanScorer;
36548	srcPos;
2531	multifield
52751	expectedIds[i]);
26846	nextbuffer
45347	"á»"
52722	{"1",
12882	u0e91
24639	sd.length);
8943	matching
66586	textlen1
66873	decodeNormValue(byte
26963	(MidLetter)
50895	docWriter.updateDocument(doc,
21178	dependent.
32509	dir1.setFailOnOpenInput(false);
63322	0x74,
62278	q.setBoost(8.7654321f);
16228	Convenience
66249	i<rnd.nextInt(vals.length)+1;
10776	"\150\0\1\376\1\u029d\31\264\1\141\12\264\1\0\3\136"+
45252	"á»"
59488	"\2\137\2\0\1\211\3\0\1\212\2\0\1\213\12\0"+
28541	STATIC_INITIALIZER,
57842	testpreparecommitrollback
1792	fieldsStream.writeInt(FORMAT_CURRENT);
38244	0x80000000000024L,
1670	getsegmentname
41924	crazy
58817	String(utf8.result,
63330	0x75,
55829	r.getVersion());
7782	fval);
64641	clone.buffer
2828	less
39558	<<fieldNumber,
905	those
11885	expression.
17452	IndexReader}
9413	"\1\14\21\0\1\112\7\0\1\65\1\23\6\0\1\130\3\0\1\114"+
45250	"á»"
26590	!f.getOmitNorms());
14987	q1.add(t,
15567	input.readLong();
8989	input.length();
59580	"\3\355\1\142\12\143\1\66\1\137\1\144\1\137\1\0"+
53001	18));
37041	topNodeMap.size())
32561	0x76,
25477	lets
44508	,"e",
32685	encodedLen2);
41516	ArrayList<String>(allIDs);
23042	searchables
16230	ItemizedFilter
45885	"á»§"
63507	arr=0
15230	FaultyFSDirectory(File
6741	<b>&ge;32</b>
61166	"\175\0\1\u034d\21\u02e2\1\u05a7\10\u02e2\1\u034e\12\u02e2\175\0"+
60402	"\2\137\150\0\1\u0101\25\266\1\u0321\4\266\1\142\12\266"+
8744	w.deleteDocuments(new
62793	fieldHits
68145	posSet
24565	normalization
7406	addField(TermsHashPerField
19913	getClass().getName()+"."+
38380	x80001
25429	upgrading
33234	deletedDocs;
32681	char[ArrayUtil.oversize(encodedLen2,
43569	i>=count1;
56313	(compare(lo,
34270	LogDocMergePolicy}.
5134	curPos;
22976	one-element
59854	"\14\0\1\62\4\0\1\75\2\0\1\76\41\0\1\25"+
18045	strips
57191	size.*/
4080	fieldNoTrie
44752	"á»"
58091	alloccount
4987	curPos)
59228	"\2\26\2\0\1\25\6\0\1\25\122\0\1\25\6\0"+
56951	StandardTokenizer.EMAIL;
16394	SnapshotDeletionPolicy
27040	"\r\u3031",
16506	<tt>b</tt>.
64934	z++)
64131	assertTrue(utf8Str.length()
20870	getOffsetGap(Fieldable
51898	MaxFieldLength("UNLIMITED",
32671	char[ArrayUtil.oversize(encodedLen1,
2505	payloads
1654	terminfosreaderindex
8997	input.readBytes(bytes.bytes,
29973	"\1\103\115\0\2\103\6\0\1\103\56\0\1\103\3\0"+
13283	u0e87
2015	arc.target).node
63035	"<_TERM_START_CHAR>",
9382	"\2\0\46\132\2\0\6\132\2\0\10\132\1\0\1\132\1\0\1\132"+
65239	(root.inputCount
58379	"no",
1381	string
57445	newFSDirectory(tmpDir);
48562	docState.maxFieldLength;
33458	this(in.toString(),
21868	byte[result.size()][]);
30023	u0e7c
61765	u0e7d
57062	<td>2.51</td>
24829	matchValues.add(docValues.get(docIDToID[docID]));
34624	payload?
34836	termAtt.toString();
56478	(clauses.get(0)).getSpans(reader);
1286	assertEquals(numDocs1+numDocs3+numDocs4,
30022	u0e15
6848	&gt;/&ge;
41230	(rewriteIter
35245	payload.
63245	General
33290	//Perhaps
44805	"á»"
60722	"\1\u034e\12\u02e2\175\0\1\u034d\3\u02e2\1\u0428\1\u02e2\1\u043b"+
59149	"\2\ue1f5\2\ue298\2\ue33b\2\ue3de\2\ue481\2\ue524\2\ue5c7\2\ue66a"+
59702	"\3\0\1\137\4\0\2\137\150\0\1\u0101\6\266\1\u0107"+
42488	payload;
43640	x1117bf25
4095	doc.add(fieldNoTrie);
58462	fail("can
54282	(MaxBytesLengthExceededException
21430	two/3",
21045	"content",
24674	FieldCache.DEFAULT.purgeAllCaches();
27821	"\u0061\u0027\u2060\u0308\u0300",
42835	payload)
53670	"odd")));
21314	dir.openInput("d1");
2477	payload,
23969	accented
37392	actualVersion,
44754	"á»"
10382	"\2\0\1\u0161\15\0\1\u0161\6\0\12\u0165\1\u0162\13\0"+
64871	System.arraycopy(byteStarts,
25211	"content";
7962	lockFactory);
53209	uni_sur_low_end
23834	tracker.searcher.getIndexReader().tryIncRef())
10495	"\5\u019d\1\u019e\175\0\1\u0163\4\u019b\2\0\1\u019b\15\0"+
53458	#search(Query,int)}
37393	actualVersion;
57421	xfffffffe
66700	testerrortest
19649	super(similarity,
53593	searchable;
44714	,"hv",
64385	xffffffff
25098	ConstantScore
44497	"á»"
55869	testafterclose
59752	"\1\174\2\0\3\174\7\0\1\174\1\0\2\174\7\0"+
53597	searchable,
32159	byteoffset
32489	(r1.numDocs()
38589	IndexReader.open(fileDirName);
44803	"á»"
58886	offsetAtt.setOffset(correctOffset(0),
41249	toString(fstSeekResult.input)
41930	maxnumwords
17925	assertEquals("biggest
50665	mergePolicy.getMaxMergeDocs
67144	HashMap<String,TermVectorEntry>();
17553	singleHits[i].score,
21960	utf8
58818	assertEquals("codepoint
53831	sb.append((char[])
45329	"á»"
63094	nextSave;
53617	Callable<TopFieldDocs>
10460	"\4\0\1\177\14\0\1\61\4\0\1\200\2\0\1\201"+
37856	.equals}.
59491	"\1\137\1\330\2\331\1\330\5\331\1\332\1\0\3\137"+
25544	rfMap
42975	newtermbuffer
2954	lastcollected
16037	d.add(newField("contents",
20932	#termLength()}
22781	upperVal.doubleValue();
45331	"á»"
56743	.setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);
32611	CharBuffer.wrap(originalString2);
64336	CutOffTermCollector(IndexReader
40444	additionally
53127	newlen
22479	reflect(Class<?
51399	message("
14721	FieldCache.ByteParser)
49614	("*".equals(goop2.image))
1380	dofail
21996	totalNumDocs,
45234	"á»"
48141	subSpans;
6007	t.endOffset());
19339	testunicodewordbreaks
42609	SpanFilterResult.PositionInfo
60136	"\1\u01d8\1\u0154\1\137\1\153\1\137\1\0\2\154\1\140"+
5114	hiByte
15401	field_3_text
25870	x99afd3bd
48285	subSpans.
67987	colonindex
21975	totalNumDocs;
56050	TestMultiTermConstantScore
22113	offset++;
48186	matchPayload.clear();
64798	END_LOC
7817	aslist
39575	lastTi.freqPointer:
46066	"á»¾"
36081	singledoctestfilter
42522	generateterms
42733	#copyBuffer(char[],
18973	BufferedReader
1098	message);
12079	u0e02
48240	(end1
21168	exceptionally
6959	INT_POSITIVE_INFINITY
37596	reveresed
40734	outputs.get(value);
60646	"\1\u0101\30\266\1\u040a\1\266\1\142\12\266\1\0\3\137"+
59922	"\1\250\1\251\1\252\1\253\1\254\1\255\1\256\1\257"+
21431	two.close();
65181	frontier[pos1]);
4066	noDocs
39739	ArrayList<SegmentReader>();
38836	assertFalse(((SegmentReader)
12058	zz_rowmap_packed_0
15542	src.hasVectors;
56679	(oneSecondResolution
45333	"á»"
40538	assertfinal
42748	Copying
38053	NumericUtils.prefixCodedToLong(prefixVals[i]);
33399	TokenStream.<p/>
38187	bits.cardinality());
39582	(!isIndex
24695	assertEquals
36716	labelToMatch
45335	"á»"
24787	assertIntResultsOrder(collectorMaxRev,
60603	"\1\u03e5\25\232\1\352\12\232\175\0\1\351\25\232\1\u03e6"+
56875	"\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0"+
22173	favors
49748	t.next;
19791	testRankByte
4595	conf.getTermIndexInterval());
58405	findme="xthisy".toCharArray();
20044	getMinimumNumberShouldMatch()
10172	"\1\314\1\315\1\316\1\317\1\320\1\321\1\322\1\323"+
35196	getattributesource
30480	TermVectorEntry(currentField,
2017	!arc.nextFinalOutput.equals(scratchArc.nextFinalOutput)
45236	"á»"
50918	IndexSorter
33498	testNothingChange()
11919	zzScanError(int
42254	att.clone();
59914	"\2\u016f\2\232\2\u016f\1\232\2\u016f\1\232\1\u016f\3\232"+
35469	0x7F;
16287	SpanFirstQuery(st(s),
18435	DecimalFormat("0.000000000");
65635	(segments_N
4264	a=lower;
66588	textupto
64602	0x7F)
32565	0x7F,
24080	"X",
47991	sub.maxDoc();
49664	jj_3R_3()
9193	FrozenBufferedDeletes(BufferedDeletes
42487	PoolingPayloadTokenStream
48255	HashSet<byte[]>();
27093	"\n\u0308\u0027",
45238	"á»"
4060	negative
55401	Assert.fail(e.toString());
23006	lDoc.add(newField("id",
4839	default_ram_buffer_size_mb
24659	SortField.FIELD_DOC);
38549	assertTrue(fb1.isBinary());
60336	"\13\u0219\1\0\3\u0219\1\0\2\u0219\1\u0275\3\u0219\3\0"+
8856	nested
59293	"\2\0\1\130\42\0\1\33\7\0\1\33\100\0\1\131"+
24561	That
9697	"\2\25\2\0\2\25\5\0\3\25\5\0\3\25\1\0"+
41563	actual.text());
60003	"\231\0\12\u01b2\10\0\1\u016c\1\u016d\1\u016e\162\0\1\u0184"+
52664	testfinalsingleton
27453	"\u0030\u0308\u00AD",
49391	fuzzyPrefixLength);
17585	ParallelReader:
36406	IOUtils.closeWhileHandlingException(os);
29752	"\1\32\1\0\3\32\4\0\1\32\4\0\1\32\17\0"+
17679	MultiTermQuery}s
15045	nomergescheduler
57003	2**32-1)
15393	regulartime
60197	"\1\u0264\31\266\1\142\12\266\1\0\3\137\1\0\2\137"+
26594	Similarity.getDefault().encodeNormValue(1.0f);
67578	ParallelReader)
24265	sortField,
25522	ArrayList<Insanity>(valMismatchKeys.size()
44505	NOTCH
57457	indexThreads[x]
24263	sortField;
38427	Field("unstored","test1",
62363	s(spanB));
22714	upperVal.shortValue();
40320	<code>Term</code>
43298	FieldSelectorResult.LOAD);
33775	pq.top().position;
1923	array
6583	href="http://www.panfmp.org">panFMP</a>,
17432	res[]
49483	ret;}
42838	super.clear();
38574	3.0);
24684	(query,
33723	(query)
56341	lo);
64756	testRandomSeeks(r,
42777	toString()}</code>
50350	r.hasChanges
23589	(flush
56305	lo))
48760	TERM_FREQ];
25792	this(clauses,
21848	NO_STRINGS
9091	Collection<String>
29307	&lt;document,
3245	classes
62710	sortFields
6933	min.hashCode()^0x14fa55fb;
57751	endDiskUsage="
22488	"null"
56767	assertEquals(2*(N+1)+1,
54372	StopFilter(matchVersion,
26027	MultiComparatorScoringMaxScoreCollector
66684	testassumebefore
60909	"\1\0\1\u04c3\5\0\1\u04c3\310\0\1\u0213\164\0\4\u04c4"+
54163	petabyte:
51655	delCount)/info.docCount;
20611	#WhitespaceAnalyzer(Version)}
34950	query.getSimilarity(searcher);
41566	!actual.equals(idTerm));
34447	selects
61513	u68f1
32766	num_random_tests
5717	stemming
20569	(streams
41905	intsreffstenum
39983	(subReaders.length
20266	getminimumnumbershouldmatch
6174	965592
49266	!autoGeneratePhraseQueries))
49500	jj_consume_token(0);
53852	"Abc\ud801\udc1c".toCharArray();
18676	à§¨à§¦à§¦à¦à¦¿à¦°à¦
9463	"\1\12\63\0\1\12\367\0";
43327	DocIdSet}).
15731	normGen[fieldIndex]
56704	policy.numOnInit);
27014	"\u0001\u0061\u002C",
51302	prepareCommit.
21781	setBoost(float
2000	fst.readFirstRealTargetArc(address,
34933	testfuzzy
51372	prepareCommit:
35029	getQuery().extractTerms(terms);
59503	"\3\137\1\0\2\137\1\140\3\137\3\0\1\137\4\0"+
20193	scorer()
33269	(last==null)
53414	newioe
40010	(stale)
49458	org.apache.lucene.queryParser.QueryParser
21861	<code>byte[][]</code>
67648	refreshedreader
62626	C:optimize)</code>
13024	u68fb
58174	super.onInit()
35181	cumulative
34585	scorer's
8513	final4));
43829	Perl
9681	"\1\0\2\25\1\0\1\25\1\0\1\25\117\0\2\25"+
15103	field.isLazy());
40755	doTest(0,
47950	rollback(objects);
10093	"\2\115\12\0\1\115\210\0\2\115\6\0\1\115\153\0"+
25547	Set<CacheEntry>>
11679	"Error:
20834	"firstname"
55341	nTokens)
26962	COLON
66801	analyzer.reusableTokenStream("",
59861	"\1\u015f\6\0\12\u015f\1\337\175\0\4\u0160\2\0\1\u0160"+
65601	"_";
2371	equal
43848	$!";
53902	buffer.getLength()));
61084	"\12\u02e2\175\0\1\u034d\31\u02e2\1\u055d\1\u034e\12\u02e2\175\0"+
31530	CompressionTools.compress(TEXT_TO_COMPRESS.getBytes("UTF-8")).length;
40644	fst.getArcCount());
307	NOTE:
42854	t.positionIncrement
19458	java.nio.charset.CharsetDecoder;
29289	docnumber
42776	#toString
62790	docFieldLocs
27417	"\u0027\u0308\u0031\u002E\u2060",
12879	u0ca8
39498	initialize(Directory
48900	ir.getTermFreqVector(0,
59128	"\2\u77a0\2\u7843\2\u78e6\2\u7989\2\u7a2c\2\u7acf\2\u7b72\2\u7c15"+
58583	assertEquals("[test]",
63358	0x76431,
16296	optB(Query
21641	wildcards.
33196	map.get("foo"));
48317	stretchtoorder
67847	testlastsegmenttoolarge
1412	reset
28498	String(docFromReader.getBinaryValue("binaryStored"));
8638	cachedStates.iterator();
36602	arc.bytesPerArc
39927	subReaders[i].getTermFreqVectors(n
49365	Analyzer,
48903	ir.getTermFreqVector(1,
54828	java.util.concurrent.atomic.AtomicLong;
20265	minnrshouldmatch
20849	Analyzer)
12478	u0cb2
51258	Register
63359	0x76432,
55534	testmixedtermvectorsettingssamefield
18372	h.length
42638	assertEquals("One
60576	"\147\0\34\u021e\12\u03cf\1\0\2\u021e\1\u027f\3\u021e\1\u0220"+
62903	mergePolicy.setUseCompoundFile(false);
50847	handleOOM(oom,
31687	Analyzer>
48882	(Map.Entry<String,SortedSet<TermVectorEntry>>
2967	default_resolution
58646	assertEquals(1+docCount,
35621	~B[i]),
2582	distance
5336	jjMoveStringLiteralDfa0_0();
41691	rootNode.arcs[1].target
55001	issearchercurrent
50541	<code>OpenMode.APPEND</code>
14687	<code>null</code>
19896	type!",
24664	"BAFECIJHDG");
18391	assertTrue("doc0
60874	"\1\232\1\352\12\232\175\0\1\351\30\232\1\u04ac\1\232"+
18396	assertTrue("doc1
30783	Reader}.
42230	unknown
20858	Analyzers
10761	"\175\0\1\346\32\230\1\347\5\230\1\u0289\4\230\175\0"+
33114	termAtt",
62743	topHits.scoreDocs.length));
37712	testRun()
43699	JustCompileSpanQuery
23220	Searcher[]{srchr});
53101	SUPPLEMENTARY_MIN_VALUE
8719	i=0;i<fieldCount;i++)
30019	u0ce0
33904	repeats<br>
60479	"\12\232\175\0\1\351\21\232\1\u0360\10\232\1\352\12\232"+
27614	"\u0300\u0061\u0027",
38592	(FileNotFoundException
56537	excluded.
18242	TestSimilarity();
60415	"\2\266\1\0\3\137\1\0\2\137\1\140\3\137\3\0"+
7842	java.io.EOFException;
62232	hits.get(nextUpto);
50413	infoIsLive(sr.getSegmentInfo());
63243	OpenBitSet.
17981	docnum
25374	StringReader("Dogs
29678	"\2\0\3\146\34\0\3\133\4\0";
10670	"\1\347\12\230\175\0\1\346\3\230\1\u0175\26\230\1\347"+
57882	pre-wrapped
4538	testequalsandhash
65117	node.arcs[arcIdx].target;
26542	assertTrue(indexedFieldNames.size()
39123	add(Term[]
40288	docommit
42583	this.upto
49342	newFuzzyQuery(Term
57545	dataPagedBytes.getDataInput();
443	util
49535	field=discardEscapeChar(fieldToken.image);
11761	UAX#29.
64456	<code>include</code>
34924	expansion
30554	"\1\0\1\25\10\0\1\25\24\0\1\25\3\0\1\25"+
16712	testCloneWriteableToReadOnly()
62486	super.nrMatchers;
55278	terms2[j]);
46791	,"^",
39819	starts[i]);
895	("doFlush".equals(trace[i].getMethodName()))
17087	ignoringoffsets
8357	lockDirName
42498	ByteArrayPool(int
60395	"\3\0\1\137\4\0\2\137\150\0\1\u0101\26\266\1\u031a"+
64391	decompress.
26288	intermediaries
37577	scorer",
66547	occupied)
51478	minGen
68099	(intValue
33949	identification
38996	hm.put("bar",2);
12077	u0cbc
35957	<empty
24955	purgeallcaches
55267	v1.size();
10264	"\2\136\1\137\3\136\3\0\1\136\1\162\3\0\2\136"+
50000	SegmentMerger.CheckAbort
1717	<3.0
42662	MyIndexWriter(Directory
11175	"\175\0\1\346\17\230\1\u0402\12\230\1\347\12\230\175\0"+
51253	deleter.deleteNewFiles(info.files());
13279	u0bfb
65203	lastNode.isFinal
8536	source2.newSinkTokenStream();
34292	DEFAULT_READER_POOLING;
40938	assertNotNull(input);
5355	(java.io.IOException
21192	bits.set(termNumber);
35836	termvectors
40034	IndexFileDeleter
46639	,"]",
14714	(parser
63926	udc44test
61321	"\2\0\1\u0635\15\0\1\u0635\6\0\12\u0638\1\u0636\174\0"+
37707	observed
57387	leftmost
18148	ConstantScorer(Similarity
34744	field:foo",
56603	IndexReader.segmentCount="
67188	existingPositions.length,
41407	arguments,
2817	slower
30225	skipOffset
60199	"\32\u020d\1\u0266\12\u020d\11\0\1\u020e\163\0\51\u020e\1\u0267"+
51714	message("merging
11978	zzTransL[
9265	1.5.0-SNAPSHOT
23876	searchers.values())
23902	searchers.remove(tracker.version);
61761	u0bf1
26058	arguments.
43794	termAtt);
65572	decRef(file);
25228	"***",
20865	analyzer.reusableTokenStream(fieldName,
5299	beginColumn;
19089	checkOneTerm(a,
41208	!"body".equals(term.field()))
53683	(pageStart
58072	buffer.recycle();
11098	"\2\136\150\0\1\376\32\264\1\141\7\264\1\u03cb\2\264"+
23425	String.valueOf(id),
9386	"\1\140\2\0\1\136\2\0\5\133\20\0\2\141\3\0\1\137\17\0"+
34286	mergedSegmentWarmer
16664	deletedDocs
4631	getters.add("getWriteLockTimeout");
7572	escaped
25883	"delete
38844	LUCENE-2046
29885	"\4\0\1\25\2\0\1\25\1\0\1\25\103\0\2\34"+
10835	"\1\u02d8\13\0\1\u0122\161\0\4\u02dc\2\0\1\u02dc\15\0"+
25483	CacheEntry>
59028	newField("junk",
7302	Therefore
36616	(arc.flag(BIT_TARGET_NEXT))
38412	assertNotNull(r3);
18223	wrapcollector
50227	mergeMaxNumSegments;
51418	(1024*1024*config.getRAMBufferSizeMB()/2)))
33389	testrollbackdeletionpolicy
29917	"\1\25\4\0\3\25\4\0\1\25\1\0\1\25\2\0"+
57754	testCommitOnCloseForceMerge()
59358	"\4\25\2\0\1\25\2\0\4\25\1\0\2\25\1\0"+
18894	testNumericSA()
43600	CachingWrapperFilter.DeletesMode
55218	(!hasDeletes)
58791	UnicodeUtil.UTF16toUTF8(buffer,
37178	willpackfst
39534	fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));
26367	codingCase
29150	termvector.
65773	set.set(random.nextInt(sz));
7972	Class.forName("java.nio.DirectByteBuffer")
25455	CacheEntrys
41421	rand;
64057	assertEquals("Lu\uD834\uDD1Ece\uD834\uDD60ne",is.readString());
41718	testShortestPaths()
31483	"segments.gen"};
8866	filtering/validation
24975	testnewcustomfieldparsersort
30703	"\1\25\2\0\1\25\1\0\1\25\103\0\2\65\6\0"+
11075	"\31\230\1\347\12\230\175\0\1\346\32\230\1\347\2\230"+
30781	CharacterBuffer(new
29101	ParallelArrayTermVectorMapper
9687	"\2\25\2\0\1\25\2\0\1\25\1\0\1\25\4\0"+
39728	readers);
30224	ti2.proxPointer)
36585	(2nd
25642	this.readerKey
47964	SimpleDocIdSetFilter
58158	definition,
38765	tp1.freq();
55334	nextInt(0xe000,
1071	RAMDirectory(startDir));
58505	testCopyCharArraySetBWCompat()
6977	LinkedList<String>
38763	tp1.freq(),
1605	terms.close();
28370	bubble
7229	collectors
15283	reader.document(i);
4100	range
36996	(useArcArray)
47993	docBasePerSub.get(reader);
17566	docSingle.get("f4"));
4625	getters.add("getIndexCommit");
21065	err.printStackTrace();
280	This
10568	"\1\330\2\u0191\2\330\1\u0191\1\330\1\u0191\1\0\1\136"+
68040	rightPos.getPositionIncrement());
11402	"\1\u04b6\6\0\12\u04b6\1\u0480\175\0\4\u0484\2\0\1\u0484"+
1987	FST.Arc<T>();
22496	overrides
8292	doprivileged
39500	isIndex
30715	"\1\130\4\0\1\130\2\0\2\130\10\0\1\52\4\0"+
392	really
52469	valSize==0
8819	apply(final
64595	0xFF));
63186	findterms
64082	dir.createOutput("foo");
39108	add(Term)
32483	writer1.commit();
18178	collector,
9197	deletes.terms.keySet().toArray(new
46433	,"(11)",
2696	collector)
39198	queryExpl.addDetail(idfExpl);
28647	"not"});
794	fail("did
12078	u0d5f
29802	"\10\0\1\25\1\0\2\52\1\0\1\25\10\0\1\25"+
43412	(lastInt
32197	assertTrue("RAMDirectory.setLockFactory
17051	Map<String,Map<Integer,TVPositionInfo>>
36556	endAddress;
12624	u69a8
11748	scripts
67259	modifyIndex(int
7682	loop_detected
1516	IndexFileNames.segmentFileName(segment,
7520	fi.name;
32381	hitexception
62999	_ESCAPED_CHAR
40072	subReaders[i].rollbackCommit();
29722	"\1\0\2\25\1\0\2\25\1\0\1\25\1\0\3\25"+
58710	addDocs(random,
12880	u0d4b
50594	conf.getIndexDeletionPolicy(),
8416	(ClassNotFoundException
4373	testRangeSplit(2);
31869	this.order
6482	TEST-IO-EXCEPTION-2"));
67913	part2.indexOf(':');
61065	"\1\u0549\175\0\1\u0349\4\u054a\2\0\1\u054a\15\0\1\u054a"+
58654	System.out.println("FAIL:
11927	They
54966	searchingGen
12479	u0d55
31656	u2c77ld
4006	istokenchar
65431	sindex
20913	Then
61483	"\1\u034d\32\u02e2\1\u034e\2\u02e2\1\u042f\7\u02e2\175\0\1\u034d"+
24217	"m"));
13281	u0d41
4483	testleftopenrange_4bit
48669	__test_dir;
33347	(last>rollbackPoint)
15963	setnumfields
55875	testduringadddelete
5254	CharStream
30020	u0d47
37331	stopWords.size(),
30246	doublebarrellrucache
38564	testWritingNorms()
65432	arr[]
3503	b.append("
3498	b.append('
25074	synchronizedlist
3627	getexception
65244	compileAllTargets(root,
3121	(nextLength
6863	<code>int</code>
36638	isLast="
31106	printsegment
2999	collector.
61763	u0d37
29998	2650)
10507	"\12\230\175\0\1\u01a3\17\230\1\u016a\12\230\1\347\12\230"+
38367	testsplitintrange
30645	"\1\0\1\25\5\0\1\25\2\52\5\0\1\25\2\0"+
8732	doc.add(newField("f"+field,
41784	slowCompletor.put(s,
43793	assertTermEquals("Des",
59232	"\4\25\1\0\2\25\7\0\3\25\1\0\3\25\5\0"+
19592	getDecodingReader(Class<?>
12223	u69b2
28434	charsequence
3509	[ABORTED]");
32558	0x98,
67401	assertNotNull(multiReader2);
58745	"ab\ud917cd",
33957	regions"
60741	"\1\u0126\160\0\1\u0168\4\u0444\2\0\1\u0444\15\0\1\u0444"+
10622	"\7\264\1\141\2\264\1\u01fb\7\264\1\0\3\136\1\0"+
27743	"\u0061\u003A\u0308\u0031\u002E\u2060",
35430	ofKind)
36843	scratchArc);
15036	unnecessary
50694	usage).</p>
25571	InsanityType#SUBREADER
44117	PARENTHESIZED
16650	myobject
9402	"\11\132\2\0\147\132\2\0\4\132\1\0\2\132\16\0\12\132\120\0"+
34996	filterIter
25564	"Multiple
33380	showavailablecommitpoints
50451	sr.incRef();
34287	(matchVersion.onOrAfter(Version.LUCENE_32))
22285	array[i];
61035	"\2\137\150\0\1\u0101\32\266\1\142\7\266\1\u0531\2\266"+
57847	synchronizing.
14903	field_score
61176	"\1\u05af\26\232\1\352\12\232\175\0\1\351\32\232\1\352"+
20942	alter.
65370	getlastoutput
30018	u0c79
31049	indexDoc(IndexWriter
11374	"\2\0\1\u04a1\15\0\1\u04a1\6\0\1\u04a2\2\u04a3\1\u04a2"+
51407	setDiagnostics(newSegment,
15620	FORMAT_LOCKLESS
18777	"Î±Î»Î»Î¬Î¾Î¿ÏÎ½",
64523	(SpanNotQuery)o;
22541	interf
62332	"id"),
6624	converted
57989	state.numDocs
50702	pushMaxBufferedDocs()
3374	altered
11385	"\12\u04a8\175\0\1\u04a7\33\0\1\u046f\1\u04a9\1\u04a8\2\u046f"+
62720	"]="
4497	intern
15328	"id");
26272	getEncodedLength(ByteBuffer
7683	errorcode
64899	mtr.length;
24699	(ScoreDoc[]
4659	chaining.
16759	pr1.add(r2);
2646	counterThread;
26302	encoded.limit()
26217	constructed
61762	u0c94
53892	StringReader("helloworld");
62574	countingconjunctionsumscorer
35371	this.docId
38058	double[]{
67276	dir4.close();
21313	csw.addFile("d2");
54510	nextSize;
61024	"\1\352\12\232\175\0\1\351\23\232\1\u0528\6\232\1\352"+
52789	claims
19970	think
4431	QueryUtils.checkEqual(
36396	out.writeVInt(bytes.length);
31094	positions.nextPosition());
1949	(Fieldable
3094	ArrayList<float[]>();
32245	f.setLockPrefix("test");
36628	follow.target
32235	Thread.sleep(1000);
2267	similarity
8487	TeeSinkTokenFilter(new
13280	u0c9e
15032	thing
65546	newest):
39932	subReaders[i].getTermFreqVector(docNumber
24393	FieldCache.LongParser(){
35427	ofKind,
67286	testCommitReopen
35417	ofKind.
56092	QueryUtils.checkUnequal(cspq(new
2059	(arc.isFinal)
32470	writer1.getConfig().getMergeScheduler()).setSuppressExceptions();
17286	decrementandget
3218	wraps
2391	Twice
60135	"\1\142\1\u01d8\1\u0223\1\u0222\2\u01d8\2\u0222\1\u01d8\1\u0222"+
19685	getSimilarity().tf((float)
29864	"\5\0\3\25\1\0\1\25\5\0\1\25\2\102\5\0"+
37122	bufferedinputstream
52605	for(BooleanClause
22064	this.query.equals(((QueryWrapperFilter)o).query);
40502	(clazz.getModifiers()
49271	numTokens;
44744	"Éª"
62276	Term("last",
22598	this'
20754	this)
24196	getXIndex()
288	this,
28064	"\u0031\u002E\u2060\u0308\u0061\u0027",
42387	Term(fieldName,
52223	sethasvectors
23716	this!
7425	docwriter
22324	a[i]
31910	FieldCache.class.getName()+".DEFAULT_SHORT_PARSER";
1577	testRandomSearchPerformance()
2139	numarcs
14756	this;
23688	this:
8532	this.
11094	"\1\141\3\264\1\u03c7\6\264\1\0\3\136\1\0\2\136"+
34590	this?
27595	"\u0300\u0308\u0041",
20425	third
22796	other.includeLower
39085	assertTrue(cm.values().toString().contains(",
48278	prevSpans.doc())
17868	bounded
8548	LinkedList<WeakReference<SinkTokenStream>>();
19617	onunmappablecharacter
51848	changeCount);
60470	"\160\0\1\u0168\4\u0359\2\0\1\u0359\15\0\1\u0359\6\0"+
32540	ByteBuffer.wrap(binary);
54942	(!waitOnGenCondition(time,
21348	".notIn2",
10012	"\1\137\165\0\74\162\2\0\1\25\3\0\1\25\3\0"+
14603	zzendreadl
2944	docthatnevermatchessowecanrequirelastdoccollectedtobegreaterthanzero
30597	"\6\0\1\27\56\0\1\27\3\0\1\27\2\0\1\27"+
59678	"\1\u0107\1\142\12\266\1\0\3\137\1\0\2\137\1\140"+
28638	TypeTokenFilter(true,
48066	getLockFactory()
55590	dirReader.maxDoc());
39146	termArrays)
4298	Integer.MAX_VALUE)
22326	a[j]
4082	Integer.MAX_VALUE,
37852	java.util.WeakHashMap}
53838	unmodifiableset
3193	List<int[]>
2064	Integer.MAX_VALUE;
41005	random.nextInt(pairs.size()
61463	"\5\u02e2\1\u034e\12\u02e2\175\0\1\u034d\32\u02e2\1\u034e\10\u02e2"+
1807	buffer
12030	yyinitial
53966	owner.singleNormStream)
51324	deleter.incRef(filesToCommit);
57147	startIndex)
8194	EOFException("seek
29345	startIndex,
1956	fieldable
26741	developing
38311	assertIntRangeSplit(9500,
36052	FilteredQuery's
28196	Collector}s.
21010	IOExceptions
57153	startIndex;
15127	isn't
21767	Thus
23179	testNormalization1()
24178	high)
40195	termEnum)
20337	high,
19817	resID
1609	termEnum,
47788	heavy
6571	high.
36488	(!targetHasArcs)
26706	<code>filter</code>
21906	IOException{
66264	(allowMust)
10112	"\1\137\3\136\3\0\1\136\4\0\2\136\2\0\1\47"+
48578	docState.analyzer.getPositionIncrementGap(fieldInfo.name);
53575	IOException}
4615	conf.getReaderTermsIndexDivisor());
15192	tmpDir.close();
40667	simpleRandomString(Random
48343	<br>The
55572	id10),
59069	nullquery
20740	ArrayIndexOutOfBoundsException();
26426	#encode(java.nio.ByteBuffer,
33755	(distance=2).
50794	href="#OOME">above</a>
30016	u0bab
35578	pop(ones)
55185	termEnum2
55183	termEnum1
30693	"\2\64\6\0\1\64\56\0\1\64\3\0\1\64\2\0"+
1480	termEnum;
3777	constructor
46794	,"_",
24612	Sort(SortField.FIELD_DOC,
37955	IdentityWeakReference)
7117	important
61473	"\32\u02e2\1\u034e\7\u02e2\1\u06a0\2\u02e2\175\0\1\u034d\32\u02e2"+
5671	org.apache.lucene.util.AttributeImpl;
56949	StandardTokenizer.COMPANY;
37155	arcs_as_fixed_array
56630	i=0;i<size-numToKeep;i++)
54184	throttling
24318	IOException,
41140	"utf32";
43331	intent
19524	IOException)
22894	AcceptStatus.NO;
6121	assertTrue("OffsetAttribute
65434	sindex.lookup.length;
18353	scores",
3558	intend
3316	IOException;
21047	IOException:
51491	docIDs.
19568	Decoding
39918	doOpenIfChanged(infos,
21163	docIDs,
39634	termbyteslength
43241	assure
41786	(Map.Entry<String,Long>
66736	<code>NaN</code>
12876	u0abf
47962	filterBits
12074	u0ad3
48512	sub-scorers.
51932	isClosed()
20236	buffer.append("null");
60016	"\2\0\1\u016e\1\u0145\1\164\3\0\1\u0145\1\137\150\0"+
45960	,"(v)",
10294	"\1\0\1\25\2\0\1\25\1\u013d\17\36\1\352\12\36"+
61759	u0aab
25525	valMismatchKeys));
60790	"\1\140\3\137\3\0\1\137\4\0\2\137\151\0\4\u046b"+
36229	isLast()
60617	"\1\u03f4\10\232\175\0\1\351\24\232\1\u03f5\5\232\1\352"+
10978	"\1\136\4\0\2\136\150\0\1\376\32\264\1\141\5\264"+
17328	"not_exist"));
57135	hmmm,
41746	testShortestPaths,
66128	testboostssimple
12475	u0ac9
25741	readerfield
32315	out:")
52299	PayloadProcessor
28817	output.writeVLong(length);
24961	parsebyte
30424	StringReader("yourselves
30434	vocabularyassert
53427	DecimalFormatSymbols(Locale.US));
30014	u0add
34943	(Query
35227	payloadLength)
66352	compactPostings()
15823	vectors)
53997	(bytesRef.get()
61366	"\1\u0657\15\0\1\u0657\6\0\12\u0659\1\u0658\174\0\1\u03a1"+
52660	m.getDeclaringClass()
15472	vectors,
23308	termsset
49063	(EOF)
58019	vectors.
23196	scores={
32182	assertTrue("#
58603	upperarr
4863	default_terms_index_divisor
26674	Lower-level
30569	"\16\0\1\136\2\0\1\137\41\0\1\25\1\53\7\0"+
62525	ArrayList<Scorer>(requiredScorers);
28967	vectors:
19816	i<h.length;
17052	getFieldToTerms()
64636	seekInternal(pos);
54066	a.add(w);
18758	ÎºÎ±Î¸Î­Î½Î±.",
30716	"\1\130\37\0\1\52\102\0\1\52\147\0\2\52\134\0"+
59846	"\1\312\1\313\1\314\1\315\1\316\1\317\1\320\1\321"+
8359	"\n"
52580	bq.getClauses();
53157	((utf8[offset+1]&0x3f)<<6)
59722	"\1\55\3\0\1\73\7\0\1\57\2\0\1\60\4\0"+
7067	rangeBounds.size()
35232	payloadLength;
37349	getenablepositionincrementsversiondefault
46574	U+2018:
53454	nrtopdocs
66620	triggerOn(SorePoint
37012	(!targetHasArcs(arc))
55881	java.util.WeakHashMap;
65084	idx--)
52571	queries[0]
65017	doShareNonSingletonNodes
36935	topNodeMap
48429	NO_MORE_DOCS);
66505	1+tokenTextLen;
64008	0x9D,
57369	idx--;
59636	"\2\36\2\355\1\36\2\355\1\36\1\355\3\36\1\355"+
21831	<code>Field[]</code>
960	reader.document(j);
25073	matchvalues
15638	(IndexFileNames.isDocStoreFile(fileName))
46535	,"20",
50579	(commit.getDirectory()
21446	a1.readByte();
31481	contentFieldIndex,
8671	restorestate
49080	#setAutoGeneratePhraseQueries(boolean)
64009	0x9E,
67930	t.startOffset()
59338	"\3\0\1\54\2\0\1\55\3\0\1\73\7\0\1\57"+
18137	result.setMatch(Boolean.TRUE);
15143	LAZY
29524	testruleinvariantafterclass
14932	getstringindex
39339	inPlaceOr(disi);
42326	fi.fieldInfo("f1").storePayloads);
59794	"\1\315\1\316\1\317\1\320\1\321\1\322\1\323\1\324"+
51847	changeCount="
32508	dir2.failOn(new
18965	reader.read(buffer)))
6187	parse(String
19690	not-first
33537	llll
2989	acceptsdocsoutoforder
8573	IllegalArgumentException("The
18109	innerWeight.normalize(norm);
33921	j<rg.length;
1575	termBytesRef,
20828	PerFieldAnalyzerWrapper
15565	input.readInt();
26627	notindexedfieldnames
46576	U+2019:
30170	termBytesRef)
3560	#setIndexWriter(IndexWriter)}.
54201	BytesRefHash(blockPool)
16632	downHeap()
29569	"\1\0\6\132\4\0\2\132\2\0\26\132\1\0\7\132\1\0\2\132"+
20727	byte[this.length];
43097	"ipod",
8134	seek(0L);
52815	supporting
5642	non-numbers
46607	U+2013:
15699	null");
40216	freqs);
50588	docWriter
4744	RAM_SIZE_MB
43289	fieldSelections
58656	id)));
60555	"\2\0\1\u03a8\15\0\1\u03a8\6\0\12\u03a8\1\u0342\175\0"+
39114	termArrays
8323	readshort
67723	IllegalArgumentException("length
564	@Override
11938	zzInput;
9978	"\1\137\3\136\3\0\1\136\4\0\2\136\2\0\1\207"+
51939	preventing
33328	"records
56326	maxDepth);
46603	U+2012:
53445	trTopDocs.totalHits,
59572	"\7\0\1\116\1\0\2\116\7\0\3\116\2\0\2\116"+
8710	w.w.setInfoStream(System.out);
11077	"\7\230\175\0\1\346\15\230\1\u03b8\14\230\1\347\12\230"+
53832	sb.append(item);
32066	setestimatedsize
46572	,"\"",
40052	[fully]
37305	(CharArraySet)stopWords
15219	(size>>>24),
23128	testFieldSelector()
15683	fieldNumber
766	problems";
41250	null"),
59610	"\1\141\1\36\2\355\1\370\1\374\3\355\1\36\3\355"+
2781	timoutException.getTimeAllowed(),
65716	Collections.unmodifiableCollection(segmentInfos.files(directory,
31227	shouldStillBeCompressed
3282	required");
20175	required.size()
42348	payloadData,
31676	getnumberofsegments
1701	character
11232	"\1\u020d\3\u01ca\1\u01cc\1\0\1\u020c\3\0\2\u01ca\4\0"+
20981	LockReleaseFailedException
15197	Time
39287	termArray1
39289	termArray2
62913	contentFieldIndex;
915	assertEquals(198,
28432	4));
29582	"\3\0\1\132\7\133\1\0\3\133\1\0\4\133\7\0\2\133\1\0"+
12878	u0c05
39273	termArray:
39771	boolean[infos.size()];
46610	U+2014:
66607	TestReproduceMessage
67766	CSQ's
65907	expectedRes)
49468	Conjunction()
39119	PhraseQuery#getSlop()
47875	caret
16758	pr1.add(r1);
31818	commits);
23168	document.get("other");
17906	testRangeFilterIdCollating()
61112	"\1\137\4\0\2\137\150\0\1\u0101\24\266\1\u057a\5\266"+
31218	ReaderUtil.gatherSubReaders(readers,
18601	Story)Ø
17733	q.setBoost(boost);
4520	testrangesplit
57848	reading;
7219	SpanFilterResult}
7858	reading,
64114	charsToRead
2913	Thread.sleep(slowdown);
19977	encode
59827	"\1\u0155\10\266\1\u0107\12\266\1\142\12\266\1\u0154\3\137"+
12477	u0c0f
66469	intUptos[intUptoStart+i]
62784	sd.shardIndex);
43851	'$output':
23698	user's
42814	("Increment
67042	"zz";
12076	u0c19
61179	"\12\232\175\0\1\351\32\232\1\352\7\232\1\u05b3\2\232"+
7280	Populates
30017	u0c12
28557	FastCharStream.java
32955	postings.lastOffsets[termID]);
49878	getdateresolution
33241	isDeleted(int
38192	Arrays.asList(
29750	"\1\32\3\0\2\32\1\0\2\32\1\0\2\32\1\0"+
22670	(upperPoint
50329	ReadOnlyDirectoryReader(this,
27900	"\u0031\u003A\u0308\u0041",
46600	U+2011:
43145	scoreDoc.doc;
2369	hits.length();
30292	TwoPhaseCommitImpl(boolean
25809	getSlop()
39893	(writer.nrtIsCurrent(segmentInfos))
2410	assertTrue(numTens
64395	compressionLevel
46598	U+2010:
62182	searcher.rewrite(qp.parse("+foo
66540	(intUptos[intUptoStart+stream])++;
2320	searcher.setSimilarity(similarity);
16510	assume
66814	tmpList
49930	carat
10274	"\1\172\153\0\1\172\5\0\1\172\2\0\3\172\7\0"+
53323	allowDouble)
46307	U+2478:
21968	FormatPostingsFieldsWriter
61320	"\15\0\1\u0635\6\0\12\u0637\1\u0636\174\0\1\u0349\4\u0635"+
9902	"\2\0\1\114\247\0\1\115\130\0\1\223\6\0\1\224"+
20817	techniques.
57529	indexEnum.termInfo();
57863	NIOFSDirectory(File
20441	SortField.STRING,
33184	TestAttributeImpl",
46330	U+2479:
24411	SortField.STRING)
65675	getRefCount(fileName).count
52353	++numPayloads;
25523	insanity.addAll(checkValueMismatch(valIdToItems,
57532	dataOutput.writeVInt(fieldCounter);
55859	numaddindexes
16003	exc");
14886	SortField.STRING:
27658	"\u0061\u2060\u0308\u005F"
48759	TestToken[testTerms.length
22556	reflector.reflect(interf,
28643	String[]{"is",
59586	"\1\0\1\66\1\67\1\0\1\25\2\0\1\25\1\141"+
30264	cachekey
12476	u0b6c
56776	Work
51807	callers
55809	setReaderPooling(true).
46261	U+2476:
23835	tracker.searcher;
41573	(1+random.nextDouble()));
30496	Word
17891	minId,
12075	u0b76
29456	(System.getProperty(PROP_KEY1)
38635	fail("delete
17853	minId)
7526	perfield
20771	clonenotsupportedexception
29720	"\3\0\2\25\1\0\1\25\1\0\1\25\1\0\2\25"+
22901	buffer.append(';');
17541	td.freq());
2937	n_docs
16523	queue.<br>
49807	exptokseq,
29536	(FloatFieldSource)o;
62506	makeCountingSumScorer(boolean
46284	U+2477:
58087	termshashconsumer
8218	register
11980	zzCMapL[zzInput]
38916	tvpositionoffset
23612	100000)
68034	(left.incrementToken())
63117	100000,
62857	replaceInvalidAcronym
21248	Math.min(remainder,
8720	fieldIDs.add(i);
37687	testpalyndrome2
33812	lesser(pp,
42071	class's
60936	"\15\0\1\u04d4\6\0\12\u04d6\1\u04d5\174\0\1\u0168\4\u04d4"+
10528	"\1\u0182\45\u0140\1\u0168\2\u0140\1\u0183\1\0\2\136\1\u0184"+
4371	testRangeSplit(4);
55437	assertTrue(fields[0].isTermVectorStored());
61760	u0b4e
63184	testsavedterms
59064	query.getBoost()
28494	doc.fields.size());
62149	testNullOrSubScorer()
36007	(3);
10381	"\6\0\12\u0164\1\u0162\13\0\1\u0122\160\0\1\u0163\4\u0161"+
13278	u0b58
28400	random.nextInt(charArray.length);
24172	//writer.forceMerge(1);
29650	"\21\0\1\112\7\0\1\65\1\17\6\0\1\130\3\0\1\120\1\120"+
54663	NativeFSLockFactory}
4537	testsorting_2bit
54317	uniquecount
16553	heapSize;
46869	caron
50950	Updates
4788	writer.getConfig().getMaxBufferedDeleteTerms());
65187	input.length+1)
18858	String[]{"B2B"});
37416	QueryTermVector
62255	field("gender",
39228	doc="+doc+")");
31809	upgrade()
12877	u0b62
1973	org.apache.lucene.util.fst;
49595	jj_consume_token(RANGEIN_TO);
65300	Arc[ArrayUtil.oversize(numArcs+1,
36516	wasteful"
11164	"\160\0\1\u0163\4\u03fb\2\0\1\u03fb\15\0\1\u03fb\6\0"+
60441	"\1\u0344\2\u0345\1\u0344\5\u0345\1\u0346\14\0\1\u02e1\161\0"+
17535	testAllTermDocs()
430	implied
34691	(matchVersion.onOrAfter(Version.LUCENE_31))
1534	SegmentTermEnum(input,
1968	storedcount
41754	outputs.newPair(22L,
59377	"\32\25\42\0\1\204\1\0\1\51\1\0\1\52\2\0"+
8696	abortexception
28450	subsequence
32221	NativeFSLockFactory:
39258	terms.length-1)
7608	s.length()));
10284	"\1\u0141\3\0\1\136\4\0\2\136\2\0\1\47\1\0"+
9101	getSegmentCount()
32780	binarybuf
39596	output.writeVLong(other.output.getFilePointer()
66269	cb.postCreate(current);
25846	(slop
65905	assertStopQueryEquals
25045	outofordermulticomparatornonscoringcollector
50935	"updateDocuments");
30015	u0b44
39142	int[positions.size()];
46578	U+201A:
63219	Directory.touchFile(),
33529	int[]{},
22843	newbyterange
24240	SortField.INT),
46874	stroke
4925	debugStream
46495	U+2470:
62311	QueryUtils.checkUnequal(qA,
8115	this.buffers
63058	"\"{\"",
57949	-7.285586f,
67151	mentions
16647	getsentinelobject
31095	out.println("");
59372	"\2\0\1\67\2\0\2\174\6\0\1\174\11\0\1\175"+
46580	U+201B:
66429	TermsHash),
10020	"\1\25\3\0\1\25\1\64\1\0\1\25\2\0\1\25"+
30544	"\1\25\3\0\1\25\4\0\5\25\10\0\1\52\1\0"+
57047	<td>3.31</td>
10286	"\12\142\1\u013e\1\136\1\143\1\136\1\0\1\136\1\144"+
7115	distribution
46507	U+2471:
56236	FilterIndexReader.class.getMethods())
34159	initphrasepositions
20328	NoOpCollector(true));
4103	doc.add(ascfield4);
64752	"yy"));
60317	"\45\u0219\1\0\3\u0219\1\0\2\u0219\1\u0275\3\u0219\3\0"+
47956	preparecommitfailexception
13277	u0ab5
63017	RANGEIN_TO
22059	IndexSearcher(reader).createNormalizedWeight(query);
22014	freqout
36841	!seen.get(arcAndState.arc.target))
34826	prevEndOffset);
39949	readerIndex(int
58920	non-indexed
19806	FieldScoreQuery.Type
28436	testCharSequenceCharAt()
40015	(writeLock
39542	utf16Result1);
4207	q.getRewriteMethod());
53850	CharacterUtils.getInstance(Version.LUCENE_30);
58093	getsegment
22759	Float.isInfinite(f))
19192	¿Ø
23545	20));
40669	char[end];
18598	Truth
23298	ramdirectory2
23297	ramdirectory1
17272	coreclosedlisteners
3199	CachingCollector}
60584	"\1\u03d3\6\0\12\u03d6\1\u03d4\13\0\1\u0126\160\0\1\u0168"+
59444	"\1\176\2\0\1\177\3\0\1\54\2\0\1\55\3\0"+
22439	dynamic,
53279	singletonNoShare;
33968	(hasRpts)
3408	implements
52192	currentreader
24871	Collections.reverse(f.matchValues);
64251	#BYTE}
24878	hitIDX=0;hitIDX<hits.scoreDocs.length;hitIDX++)
46554	U+201E:
19371	testrandomhugestrings
1169	dir.setCheckIndexOnClose(false);
8409	LockClass
11772	KATAKANA_TYPE
46215	U+2474:
67241	socket
17062	(storeOffsets)
42227	att.endOffset());
51901	10000);
15107	DocHelper.LAZY_FIELD_TEXT,
4163	searcher.search(new
32998	termids
48187	advanceAfterOrdered();
57226	i=startWord+1;
56873	"\130\12\10\0\51\12\u0557\0\234\12\4\0\132\12\6\0\26\12\2\0"+
19398	!docsWithField.get(doc);
27832	"\u0061\u0027\u2060\u0061\u0027\u2060",
55246	ff1.get(i);
32025	strong
46238	U+2475:
23680	termidx
62236	scorer.score());
5506	endcolumn
8425	VerifyingLockFactory((byte)
10586	"\1\u01dc\6\0\12\u01dc\1\u0162\13\0\1\u0122\161\0\4\u01e0"+
24870	Collections.sort(f.matchValues);
61255	"\13\0\1\u033c\226\0\1\u0545\175\0\4\u05f9\2\0\1\u05f9"+
54124	bufferedState;
31673	unzip
425	writing
10988	"\4\0\2\136\150\0\1\376\2\264\1\u0300\27\264\1\141"+
458	searchterm3
457	searchterm2
455	searchterm1
46550	U+201C:
46519	U+2472:
24526	searchY);
38035	"+vals[i]+"
6058	there");
31244	Arrays.equals(BINARY_TO_COMPRESS,
61406	"\1\u034e\12\u02e2\175\0\1\u034d\17\u02e2\1\u0430\12\u02e2\1\u034e"+
55063	0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));
15795	(hasProx
27978	"\u0031\u0027\u0308\u0031\u0027",
10270	"\3\0\1\136\1\162\3\0\2\136\14\0\1\172\20\0"+
46552	U+201D:
19207	ÏÏÏ
46531	U+2473:
56202	ReaderUtil.getMergedFieldInfos(in);
22466	#reflectWith(AttributeReflector)}
2425	includeSpanScore
59479	"\1\60\4\0\1\61\14\0\1\62\4\0\1\63\2\0"+
32290	dir2.getLockFactory().getLockPrefix();
2478	length)
8082	length,
9314	"\37\132\1\0\u01ca\132\4\0\14\132\16\0\5\132\7\0\1\132\1\0"+
21322	length.
10787	"\1\u02ab\13\264\1\141\12\264\1\0\3\136\1\0\2\136"+
12622	u6862
61512	u684e
8197	length;
15462	DocumentWriter
32172	dir.setLockFactory(lf);
1450	createoutput
54086	stopWords1[]
57797	(c.getUserData().get("tag").equals("second"))
52569	queries).
18732	"Ø¯Ø§ÙØ´ÙØ§ÙÙÙ",
13023	u6858
38398	IndexReader.open(d,
38110	1.0E-1f,
16897	r1.incRef();
43530	assertEquals(i+1,bv.count());
41829	TwoLongs
10686	"\2\136\150\0\1\376\21\264\1\u0246\10\264\1\141\12\264"+
53763	contains(char[]
23857	this.maxAgeSec
35878	assertTrue(c.getQuery()
57641	(currentOff
52474	token_type_full_prec
29430	non-matches
48498	BooleanScorer).
25619	Checks
1922	lengths
66442	((code>>8)+code)|1;
27366	"\u002C\u0031\u003A",
509	not_analyzed
26445	this.finalShift
52171	anydeletes
49729	LookaheadSuccess();
10780	"\1\u02a2\25\264\1\141\12\264\1\0\3\136\1\0\2\136"+
66895	output1.equals(pair.output1)
7953	lockFactory
8319	alreadyclosedexception
27172	"\u3031\u0308\u000B",
28842	bytePool;
49766	jj_expentry
46483	U+246F:
22378	insertionSort(T[]
20382	Indicate
63421	0x8643,
52825	International
23242	Searcher[]{searcher1,
19541	#close(Closeable...)
30632	"\2\25\2\34\10\0\1\52\1\0\2\25\1\0\1\34"+
1231	Field.Index.ANALYZED);
26029	OutOfOrderMultiComparatorScoringMaxScoreCollector
3392	called,
4645	(m.getDeclaringClass()
10634	"\1\u020a\12\u01c9\1\u020b\2\u01c8\1\u01cb\3\u01c8\1\u01cc\1\0"+
16726	testCloneReadOnlyToWriteable()
50704	LogDocMergePolicy)
41803	(slowCompletor)
37939	reap()
41544	random.nextInt(NUM_IDS-1);
3581	called.
50325	called:
22528	Attribute}
18377	1].score;
46471	U+246E:
57946	-1.7839992f,
34594	PayloadTermSpanScorer(TermSpans
22437	Attributes
41736	assertEquals(17L,
54356	org.apache.lucene.analysis.WordlistLoader#getWordSet(java.io.Reader,
60545	"\6\0\1\u039c\2\u039d\1\u039c\5\u039d\1\u039e\14\0\1\u033c"+
50842	message("at
8901	Validation
38768	testGetIndexCommit()
67064	this.term1));
48552	endConsumer;
38229	val<<1;
17871	minIP,
17296	getdocstoreiscompoundfile
10370	"\1\75\41\0\1\25\2\26\2\0\2\76\1\77\1\0"+
28289	#nextDoc()}
63418	0x8641,
11036	"\6\0\1\u032d\2\u032e\1\u032d\5\u032e\1\u032f\231\0\1\u0396"+
9705	"\3\0\1\25\5\0\3\25\5\0\3\25\1\0\1\25"+
66238	System.out.println("failed
37384	actualCodec
30896	Assign
62841	skipped.
57680	long[valueCount];
20578	collationkeyfilter
48304	(firstTime?"START":(more?(doc()+":"+start()+"-"+end()):"END"));
16317	explanation
10300	"\1\66\1\0\1\25\2\0\1\25\1\140\7\36\1\352"+
10777	"\150\0\1\376\15\264\1\u029e\14\264\1\141\12\264\1\0"+
34288	TieredMergePolicy();
67083	super("SeekCountingStream("
27871	"\u0061\u002C\u0308\u0061\u2060",
48460	delegate.getPositionIncrementGap(fieldName);
53839	unmodifiablechararraymap
22480	Attribute>
21804	add(Fieldable
28369	scoreall
37429	assertTrue(terms[i].equals(gold[i]));
63419	0x8642,
55996	Attribute,
16962	case.
3400	case,
22951	case)
10346	"\1\376\27\264\1\u0103\2\264\1\141\12\264\1\0\3\136"+
52052	termsindexloaded
67361	subReaders1[i])
56040	subtract(Long
33433	getChecksum();
42248	Collections.singletonMap(KeywordAttribute.class.getName()
33730	super(weight,
56153	testRangeQueryRand()
38218	switch(random.nextInt(4))
22885	//Unfortunately,
11884	regular
6135	HashMap<String,Object>()
60691	"\1\u0428\1\u042e\2\u0428\2\u02e2\1\u0428\6\u02e2\3\u0428\11\u02e2"+
29659	"\1\34\1\64\6\41\1\34\66\41\5\115\6\103\1\51\4\103\2\51"+
55262	System.out.println("v1="
2859	doTestMultiThreads(false);
53866	'\udc1c'),
6291	constructs:
7610	retval.toString();
31030	merge(si1,
50865	memory.<p/>
37343	stopfilter
60152	"\2\u01e5\1\0\2\u01e5\2\0\1\u01e5\1\0\1\u01e5\176\0"+
15850	existence
64432	Inflater();
28269	scorers.
30982	TestDoc
48350	scorers,
37289	cased
30125	DoubleBarrelLRUCache<CloneableTerm,TermInfoAndOrd>
50212	MESSAGE_ID.getAndIncrement();
22905	result.setBoost(getBoost());
48664	#LUCENE-715
27450	"\u0030\u0308\u005F"
53716	assertpage
2710	3600000;
36224	numArcs
60580	"\6\0\12\u03d1\1\u03d2\175\0\4\u03d3\2\0\1\u03d3\15\0"+
62304	QueryUtils.checkUnequal(q1,
50295	pre-warm
3377	flushed
23508	case;
19203	Ø¾ØµØµ
11961	case:
57206	getAndSet(int
48415	scorerDocQueue.topDoc();
961	reader.getTermFreqVectors(j);
60361	"\1\u02f8\5\232\1\352\12\232\175\0\1\351\24\232\1\u02f9"+
52729	queries",
25511	ReaderField(item.getReaderKey(),
34217	flushes
50563	getReader
9239	queries";
53981	synchronized(in)
53339	straightforward
48825	MyTokenizer(reader);
1901	fieldsStream.writeBytes(data,
7754	NUM_FIELDS;
54311	recyclingbyteblockallocator
29090	(number
58365	TestCharArraySet
7878	recommended
53730	Object#toString}
5703	<code>true</code>
62459	negative");
48494	<code>firstDocID</code>
11551	"\175\0\1\346\32\230\1\347\1\u03a7\11\230\175\0\1\346"+
38794	LUCENE-1579:
50322	message("flush
41344	(!verify)
59124	"\2\u6340\2\u63e3\2\u6486\2\u6529\2\u65cc\2\u666f\2\u6712\2\u67b5"+
38530	assertEquals(bin.length,
31118	non-decreasing
1397	cases
60345	"\12\u021c\175\0\1\u02e9\32\u0281\1\u02ea\12\u0281\1\u0154\7\0"+
34411	#DEFAULT_RAM_BUFFER_SIZE_MB}.
37376	bogus
29176	totalLength);
28532	stringfldcompressed
64754	while(te.next())
7079	freeing
21489	is.seek(is.length()
64556	checkBufferSize(newSize);
225	allowed
46459	U+246D:
61362	"\12\232\175\0\1\u0101\7\266\1\u0655\22\266\1\142\12\266"+
38679	index1.getSequentialSubReaders().length
43304	selection!=null
46803	foldings.length
1882	FIELD_IS_NUMERIC_FLOAT;
24454	"JFHDB");
38177	shift);
64143	skull
4038	resizebuffer
51611	merge.isExternal
35120	functions[]
64567	checkBufferSize(int
28140	digits
11589	"\1\u0542\13\0\1\u0325\160\0\1\u0386\4\u0541\2\0\1\u0541"+
7731	\u2222
42557	shift),
53652	multisearchercallablewithsort
25277	"+q.getClass().getName());
46447	U+246C:
4718	SnapshotDeletionPolicy(null));
18265	d2.add(newField("id",
39697	open(final
16147	s.nextDoc())
21140	FixedBitSet}
63928	testwhitespacetokenizer
1822	skipDocument()
19484	<tt>priorException</tt>,
63531	shift()
35973	testtoptermsrewrite
15368	getfieldable
8257	privilegedactionexception
46435	U+246B:
19424	"]";
12221	u686c
6002	t.setTermBuffer(content,
57853	Inside
37152	bit_arc_has_final_output
19911	changed!",
48108	file))
1209	file),
9722	"\1\0\3\32\1\0\1\32\2\0\1\32\1\0\2\32"+
26332	outputOffset
15218	assertEquals((byte)
22128	digit;
38987	testCharArrayMap()
30441	getdatafile
21642	(wildchar
41795	prefixOutput
48110	file);
1835	detect
46423	U+246A:
48036	file's
34152	checkedrpts
44660	"â±§"
54937	genLock.lockInterruptibly();
43166	Integer.valueOf(max--));
57933	file).
52855	IMPLIED,
35891	assertEquals("equivalent
10376	"\4\u015b\2\0\1\u015b\15\0\1\u015b\6\0\12\u015b\1\u015c"+
201	first
61511	u67ab
24432	bottom)
46291	U+2464:
50288	(though
33454	resourceDesc
50255	heated
31354	assertTrue(tfv
68053	MockReaderWrapper(random,
10908	"\12\u0207\176\0\4\u031e\2\0\1\u031e\15\0\1\u031e\6\0"+
29733	"\1\25\2\0\1\25\1\0\2\25\4\0\1\25\1\0"+
27763	"\u0061\u0027\u0308\u0027",
24736	IndexReader.open(w,
24361	System.out.println("topn
67053	SeekCountingDirectory(new
48896	DocNumAwareMapper
13022	u67b5
53019	result.offsets;
50824	doWait();
322	CREATE
46314	U+2465:
24044	"C-100",
27466	"\u0030\u0308\u0061"
59900	"\1\u016f\1\352\12\232\175\0\1\351\1\u016f\6\232\1\u016f"+
12621	u67bf
62234	hit.doc
27475	"\u0030\u0308\u0031\u003A",
61138	"\4\u058a\2\0\1\u058a\15\0\1\u058a\6\0\1\u058c\1\u058e"+
58016	PerDoc();
12220	u67c9
11522	"\1\376\24\264\1\307\5\264\1\141\12\264\1\0\3\136"+
22020	SearcherManager}
33117	typeAtt",
42292	copyTo()
15344	testfieldsreader
26172	PackedInts.getNextFixedSize(bpv);
46337	U+2466:
5115	(int)(curChar
40027	semantics).
44076	"â±¯"
25921	IndexWriter#commit}
21057	semantics):
60834	"\1\u034e\12\u02e2\175\0\1\u034d\11\u02e2\1\u0428\20\u02e2\1\u034e"+
52282	this.skipOffset
23939	agesec
64440	UnicodeUtil.UTF8toUTF16(bytes,
25149	"m*tal*"));
30013	u0a76
58754	"ab\udc17\ud917\udc17\ud917cd",
27118	"\n\u0031\u002E\u2060",
48194	toSameDoc()))
36560	bytes[left++]
46361	U+2467:
39377	detecting
19057	("urls.from.random.text.with.urls.txt"),
49445	'\u005c"'
33973	gatherRptGroups(rptTerms);
48812	super(reader);
65305	newArcs[arcIdx]
34348	<p>Takes
66820	tmpSet.get(term);
6193	<code>
57813	testPrepareCommit()
15042	NoMergeScheduler();
40931	scratch)
6274	super.getPrefixQuery(field,
46385	U+2468:
30012	u0a0f
6521	methods,
6861	(4).
36048	hits1.length;
46404	U+2469:
13276	u0a12
4773	methods.
40267	getsegmentinfo
43399	BIT_SHIFT
12875	u0a1c
24074	"34334543543",
24471	SortField.INT)
38861	assertTrue("currentGen="
58043	tvd.writeVInt(perDoc.numVectorFields);
4401	SortField.INT,
325	re-test
32191	lock.lockAttempts
10933	"\2\u033c\1\u033b\5\u033c\1\u033d\14\0\1\u0122\161\0\4\u033e"+
5567	detection
58782	assertTrue(s.length()
12474	u0a26
27239	"\u0041\u003A",
14862	SortField.INT:
24930	aigec
3378	addIndexes*
39545	utf16Result2);
2641	Query
10842	"\1\347\12\230\175\0\1\346\24\230\1\u02e2\5\230\1\347"+
57625	correction
54934	curGen)
6938	interned
61304	"\1\u0628\6\0\12\u0628\1\u05f2\175\0\4\u0629\2\0\1\u0629"+
40204	current.next())
12073	u0a30
23430	getHitCount(Directory
24737	Term("t",
39780	infos.info(i).getUseCompoundFile()
31058	IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,
30835	methods:
56229	methods;
42704	org.apache.lucene.analysis.tokenattributes.TermAttributeImpl;
14576	arraycopy
50199	IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL;
36204	posArcsStart;
30353	prepare/commit
67299	doc.add(newField("id2",
25225	"*?1",
66273	num_extra_docs
31365	"\u0000")),
66826	tmpFreqs.set(position.intValue(),
27788	"\u0061\u0027\u0031\u0027",
64099	utf8Bytes
62541	SingleMatchScorer(optionalScorers.get(0))
36973	topCount
66038	queries5,
26042	FieldValueHitQueue.Entry
43055	newReference
7949	chunkSizePower;
53545	queries[i]
17466	parallel.getIndexReader().close();
3774	</p>
60465	"\1\u0356\5\u0357\1\u0358\14\0\1\u0126\161\0\4\u0359\2\0"+
55424	hasdeletes
27730	"\u0061\u003A\u0061\u0027",
34647	payloadBoost.setValue(payloadScore);
46558	"â¶"
29096	mapper);
23153	assertTrue(hits.length
8377	"You
28445	testCharSequenceSubSequence()
66034	queries4,
29520	clearproperty
31520	TEXT_TO_COMPRESS
65632	commits)".
49303	DateFormat.getDateInstance(DateFormat.SHORT,
30806	buffer.length
28076	"\u0031\u002E\u2060\u0308\u0031\u002C",
37494	"here"));
41350	Util.get(fst,
18857	"B2B",
57630	adjustments,
39790	reopenSegment:
24338	System.out.println("fail:"
66026	queries2,
48877	fsMapper
9893	"\1\25\4\0\1\25\2\0\2\25\1\0\1\25\1\0"+
66030	queries3,
27225	"\u0041\u0308\r",
52058	casts
3355	internal
7310	[start
9924	"\2\0\4\25\1\0\1\34\1\25\1\0\1\25\4\0"+
53784	copy(final
5154	active0);
24943	getfullstrings
11336	"\174\0\1\u0163\4\u047f\2\0\1\u047f\15\0\1\u047f\6\0"+
32271	testNativeFSLockReleaseByOtherLock()
39367	inplaceor
40039	Checkpoint
22058	QueryWrapperFilter(Query
4937	active0),
55929	weakRef.get();
55460	termPositions.nextPosition());
5590	orig_floatToByte(5.8123817E-10f));
6976	NumericRangeTermEnum
53314	write(Object
10661	"\2\0\1\u0222\15\0\1\u0222\6\0\12\u0222\1\u0197\13\0"+
8688	freeRAM();
38179	bound",
12623	u6905
56926	"\1\12\1\0\1\11\2\12\1\13\1\37\4\0\1\37"+
34843	brown"
45686	U+A786:
53139	ArrayOutOfBoundsException
63356	0x76421,
55399	deleteByQuery();
53433	doc.add(newField("asc",
8679	AbortException)
39063	unmodifiable
46197	U+2460:
38090	(double
28488	Field.TermVector.NO);
47902	Object#equals(Object)
68151	Math.max(posUpto,
23940	live
1865	fieldsStream.writeVInt(fi.number);
26967	COMMA
19033	delimiter.
45599	U+A785:
395	undeleteAll()
42335	_TestUtil.getTempDir("test_payloads");
18538	Õ¯Õ¡ÕµÖÕ¨Ö",
840	TokenFilter(tokenizer)
46222	U+2461:
51197	(including
55671	AddDirectoriesThreads(int
63879	TestingCharTokenizer(Version.LUCENE_30,
29811	"\6\0\1\25\56\0\1\25\3\0\1\25\2\0\1\25"+
44080	,"a",
56123	hits[1].score);
27834	"\u0061\u0027\u2060\u0061\u002C",
65086	doCompile
43588	caching.
58343	uptoit
45641	U+A784:
33752	(distance=0),
16226	bqtest(String
15088	String[]{DocHelper.LARGE_LAZY_FIELD_KEY,
8106	IllegalArgumentException("RandomAccessFile
29551	"\7\0\1\132\1\0\1\136\2\0\1\132\5\0\27\132\1\0\37\132"+
50265	payloadProcessorProvider;
54670	suspect
66051	queries7,
8935	FilteredTermEnum()
38243	0x80000000000020L,
46245	U+2462:
28680	stpf.close();
8096	chunkSizePower)
35207	curFreqPointer;
38066	+0.0,
9690	"\1\25\4\0\3\25\1\0\1\25\6\0\1\25\1\0"+
28891	primaryperthread
20971	setTermLength(int
19286	delimiters
51245	payloadProcessorProvider,
1344	list
45567	U+A783:
48525	default*/,
50780	Commits
21961	skipchars
21905	skipChars(int
35116	setlastmodified
29104	mapper.materializeVector();
46268	U+2463:
66045	queries6,
62390	lisa
42550	shift+=NumericUtils.PRECISION_STEP_DEFAULT)
43643	TestSearch
51792	mergeExceptions.add(merge);
55566	r1.document(10).getField("id").stringValue();
67867	offsets...
30856	<code>ICUCollationKeyFilter</code>
54081	stopWords0[]
18127	scorer(reader,
27795	"\u0061\u0027\u2060\u0308\u0001",
8786	org.junit.Rule;
14736	STRING);
24791	collector.topDocs().scoreDocs;
34493	analyzer.getClass().getName()).append("\n");
29006	tvfFormat;
42664	(merge.maxNumSegments
27197	"\u3031\u0308\u00AD",
15961	getdiagnostics
14717	FieldCache.FloatParser)
53833	sb.append(']').toString();
30921	MyTopsDocCollector(numResults);
56551	((reqDoc
67958	gotOne
30722	"\1\130\40\0";
15634	dir.fileLength(fileName);
28331	rscorer.docID();
52060	defaultinfostream
38057	testDoubles()
1020	setMergeScheduler(new
40637	FST<Object>
57744	endDiskUsage);
4395	reverse
55733	iwr2.close();
61143	"\242\0\1\u02e1\214\0\2\u054c\1\0\2\u054c\2\0\1\u054c"+
29492	Assert.assertTrue(f.getMessage().contains(PROP_KEY1));
35659	lowByte
49112	<code>?</code>
40035	IndexFileDeleter(directory,
6828	setRewriteMethod(
64544	Inits
54113	"+stpf);
29192	positions[j];
32413	fb.append(randomToken());
67624	assertEquals(7-v,
61031	"\1\u052e\4\232\175\0\1\351\32\232\1\352\1\232\1\u0133"+
66226	searcher.search(q1,
20007	getMaxClauseCount()
6804	>=1");
64030	bdo.writeVInt(i1);
63426	0x8651,
59093	"\0\u01e9\0\u1978\0\u1a1b\0\u03d2\0\u0475\0\u1abe\0\u05bb\0\u065e"+
12016	browse
12222	u690f
4012	charutils
67743	CSQs,
66553	Arrays.fill(newHash,
59880	"\1\u016f\1\232\2\u016f\10\232\1\352\12\232\175\0\1\351"+
6384	getwildcardquery
7746	accept(String
46236	,"2.",
41499	(377
63427	0x8652,
19694	(cs.useAdvance)
4886	logbytesizemergepolicy
54616	testparseint
21090	java.util.concurrent.locks.Lock;
31050	fileName);
21795	Several
41677	Builder.CompiledNode();
58653	cachedFiles)
19011	(emailAnalyzer,
34365	#setDefaultWriteLockTimeout(long)}.
45050	"â±®"
53351	getReadChunkSize());
4747	conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);
27991	"\u0031\u002C\u3031",
42888	reinit(String
314	(StaleReaderException
28729	existent
229	catch
59858	"\1\140\3\137\2\0\1\77\1\137\4\0\2\137\2\0"+
54811	webapps
51912	hitOOM
27518	"\u005F\u0308\u0061\u2060",
36343	cachedRootArcs.length)
48155	o1.doc()
63429	0x8653,
27477	"\u0030\u0031\u0027",
33671	writer.getConfig());
60770	"\6\232\175\0\1\351\32\232\1\352\3\232\1\u0133\6\232"+
40378	testtopscoredoccollector
59375	"\4\0\1\201\14\0\1\62\4\0\1\202\2\0\1\203"+
58455	TEST_STOP_WORDS.length;
59269	"\1\0\2\32\1\0\1\32\1\0\1\32\242\0\1\33"+
38552	fb1.getBinaryOffset()]);
36982	fst.nodeCount++;
30110	super(ti);
4104	doc.add(ascfield2);
61118	"\1\u057e\175\0\4\u057f\2\0\1\u057f\15\0\1\u057f\6\0"+
43054	acquire();
39393	Term("test",
46589	U+203A:
50851	getDirectory
63433	0x8654,
38934	testwritingnormsnoreader
51928	segmentInfos.version
55015	dw.writer.getReader();
43211	assertEquals(indexDivisor,
51873	"startCommit");
26678	Collector-based
28743	(skip
27674	"\u0061\u2060\u0308\u0061"
55157	r2r1[id2]
58425	TEST_STOP_WORDS.length,
53754	only),
62952	fail("IndexFileDeleter
57606	indextoterms
37222	findtargetarc
15791	normGen.length;
46557	U+2033:
24574	DocIdBitSet(bs);
28363	scoresum
17609	testiscurrent
26024	OutOfOrderMultiComparatorNonScoringCollector
38322	triecodeint
27125	"\u000B\u0308\n",
839	MockTokenizer.SIMPLE,
30700	"\2\25\1\0\1\65\10\0\1\25\24\0\1\25\3\0"+
52256	skipwait
27030	[3.1]
46583	U+2032:
17617	InitValueThreadLocal
21117	newcondition
61758	u0a08
28471	testcopycharsref
66953	outputToString(Pair<A,B>
53865	assertEquals(Character.toCodePoint('\ud801',
36113	only',
65748	BitSet[]
53629	docs.scoreDocs.length;
64725	"aa5"));
56527	super(reqScorer.weight);
46585	U+2035:
53522	scoreDocs
27035	[3.0]
30586	"\1\0\3\26\1\0\1\26\2\0\4\26\2\0\1\26"+
56867	"\7\12\1\0\1\12\1\0\4\12\2\0\47\12\1\0\1\12\1\0"+
46562	HEAVY
34331	Large
20616	WhitespaceTokenizer(matchVersion,
50997	figures
2652	counterThread.start();
48726	ByteArrayDataOutput(byte[]
15750	dir.fileExists(IndexFileNames.segmentFileName(name,
62829	HIRAGANA
24308	Reverse
61349	"\1\u064a\31\u02e2\1\u034e\12\u02e2\175\0\1\u034d\1\u064b\31\u02e2"+
59964	"\2\u0197\1\u015d\1\u0197\1\u015d\1\0\1\137\1\153\1\137"+
66938	newPair(outputs1.subtract(output.output1,
56772	assertEquals(176,
19083	"é£",
33469	minversion
27164	"\u3031\u0001",
38770	assertNotNull(r2);
56102	cswcq(new
40224	readerTermDocs[i]
23906	affected,
10414	"\1\u016a\6\230\1\u016a\6\230\1\u016a\4\230\1\u016a\4\230"+
16543	#size()}
24495	(parallelSearcher,
41676	rootNode.addArc('a',
38685	fields.",
46559	U+2036:
682	MockAnalyzer
39319	intOffset
18357	q1.add(tq("hed",
36364	upto];
61514	u6994
16746	testCloneReadOnlyDirectoryReader()
2743	testTimeoutNotGreedy()
4332	(termEnum.next());
50316	IndexWriterConfig#setReaderTermsIndexDivisor}.
38109	1.0E-2f,
54771	channel.close();
18874	"ac/dc",
16694	!deleteWorked(1,
10791	"\4\0\2\136\150\0\1\376\31\264\1\u02b0\1\141\12\264"+
65508	"\";
59037	reader.document(docID).get("docid"));
65662	"\":
23463	unreferenced
38096	repr:
50685	maxFieldLength);
32896	charBuffers[postings.textStarts[termID]
41016	fstEnum.current().input);
46587	U+2039:
17004	isIgnoringPositions()
67421	parallelReader2.close();
10922	"\12\u0333\1\u0331\13\0\1\u02cf\160\0\1\u0332\4\u0330\2\0"+
50688	config.setReaderTermsIndexDivisor(divisor);
50299	far</p>.
35964	testInclusiveLowerNull()
43661	"\"a
2079	scratchArc.target;
52380	testRegularMerges()
10627	"\3\264\1\u0202\26\264\1\141\12\264\1\0\3\136\1\0"+
13025	u699e
22385	repos
35735	(v-1))
55211	termDocs2.freq();
46787	U+2038:
22698	(inclusiveLowerPoint
59332	"\1\73\7\0\1\57\2\0\1\60\4\0\1\74\14\0"+
788	MockIndexWriter2(dir,
37492	"holes",
