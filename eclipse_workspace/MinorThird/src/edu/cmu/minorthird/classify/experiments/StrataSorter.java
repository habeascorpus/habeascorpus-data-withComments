package edu.cmu.minorthird.classify.experiments;import java.util.ArrayList;import java.util.Collections;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Random;import java.util.TreeMap;import edu.cmu.minorthird.classify.Example;/** * Helper class for splitting up iterators over Examples, by class. * * @author Edoardo Airoldi * Date: Dec 8, 2003 */public class StrataSorter{//	static private Logger log=Logger.getLogger(StrataSorter.class);	private Map<String,List<Example>> labelMap; // map label-Id's to arrayLists of examples	private List<String> strataList;		/** 	 * Create a StrataSorter. Iterator i must iterate over	 * Examples.	 */	public StrataSorter(Random random,Iterator<Example> i){		labelMap=new TreeMap<String,List<Example>>();		while(i.hasNext()){			Example example=i.next();			String id=null;			id=example.getLabel().bestClassName();			if(id==null){				System.out.println("Error: unlabeled example!");			}			List<Example> list=labelMap.get(id);			if(list==null){				labelMap.put(id,(list=new ArrayList<Example>()));			}			list.add(example);		}		strataList=new ArrayList<String>(labelMap.keySet().size());		for(Iterator<String> j=labelMap.keySet().iterator();j.hasNext();){			String key=j.next();			Collections.shuffle(labelMap.get(key),random);			strataList.add(key);		}		Collections.shuffle(strataList,random);	}	/** 	 * Create a StrataSorter. Iterator i must iterate over	 * Examples.	 */	public StrataSorter(Iterator<Example> i){		this(new Random(),i);	}	/** 	 * Return an iterator over lists of strata.	 * The strata, and the lists of Instances within	 * each stratus, are randomly ordered.	 */	public Iterator<List<Example>> strataIterator(){		return new StrataSorter.HisIterator(0); // 'His' as in William's Iterator  =:-)	}	private class HisIterator implements Iterator<List<Example>>{		private int i;		public HisIterator(int i){			this.i=i;		}		@Override		public boolean hasNext(){			return i<strataList.size();		}		@Override		public List<Example> next(){			return labelMap.get(strataList.get(i++));		}		@Override		public void remove(){			throw new UnsupportedOperationException("can't remove");		}	}}