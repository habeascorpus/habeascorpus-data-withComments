4457	assertEquals(.87,e.f1(),0.02);
0	
12216	"No
20187	SpanResult(String[]
11610	classCounts.put(s,(d=new
22731	testData)
23369	System.out.println("labels
9533	SmartVanillaViewer
3175	instance.getSubpopulationId();
24140	+(((C7
20801	setShowTestDetails(boolean
23282	Task{
21004	testData;
14928	"+e1.averageLogLoss());
9823	for(i=0;i<n;i++)
7300	statusMsg);
7653	System.out.println(sd.toSummary());
9521	time.
10865	Color.cyan);
4924	testData,
11440	(Example)query;
11443	c=new
17385	if(checkStandardStatsOnly){
14236	binaryclassifierlearner
575	mainPanel.setBorder(new
4337	if(textBaseId!=null)
1303	"
17999	newobjectfrombsh
4803	if(email.contains(test))
2112	IOException("Could
8368	#
2989	&
16478	POS,
10786	'
8370	%
13093	possibly
6	*
127	answer
11528	testData=
21333	TrainTestClassifier().callMain(args);
1296	+
1563	getSubpopulationId();
10433	(
469	)
11857	.
3589	Logger.getLogger(EncapsulatingAnnotatorLoader.class);
6266	Map<Span,Integer>
8844	/
17453	cvs.split(i);
10013	unit-length
11949	,
35	-
5390	3
3458	2
6077	1
4951	TransformedViewer(v.toGUI())
23565	Pr(+)
16396	"POS
1367	0
17900	helpConsumed=true;
5662	srcname
12467	5
6060	4
737	;
2968	if(loc==ViewerControls.LEFT){
922	:
23372	labels.getTypes().iterator();
14775	highrisk
11910	9
8395	8
937	?
8719	"+theCount);
5777	>
367	=
14172	runmixup
5800	<
4474	LongUITest(
7543	currentPrediction=w_t.score(x);
21341	E
1341	TextBaseLoader.DOC_PER_LINE,sgmlExpected);
17598	(d==0.0)
6974	onlinetextclassifierlearner
7510	G
1538	A
10537	getValue();
8956	B
18310	C
20588	log.debug("segmentation:
4568	notcmt
8902	rejection
9670	L
23665	3.472021382978770e-03,
18670	TypeSelector(Class<?>[]
3404	N
5837	iitb.CRF.DataIter
8558	I
20647	J
20600	"+annotationType+":\n"+segmenter+"]";
3396	K
386	innerLearner,Splitter<Example>
9149	U
3775	T
23451	XValTest
2632	statusMsg){
9223	W
9174	V
18489	CrossValidatedSequenceDataset(learner,sequenceDataset,splitter);
18628	P
8697	times
4887	trainCds;
8036	R
16070	shuffle(){
8911	09/24/99
9672	]
17078	WebmasterSplitter(String
15590	predictedrlt
13926	cd=(MultiClassifiedDataset)o;
12942	"+superView+":
1619	schema.getClassIndex(
9180	Y
22966	notation
9162	X
15693	[
4000	l){
7781	Z
1268	f
20368	action){
19831	value=index.size(f);
9907	g
3842	lookup(accum,span,i);
8363	d
9119	-Math.log(r5);
19805	Feb
471	e
1728	policy.
10208	b
742	c
19281	isinline
51	a
20269	SetResult<Span>{
16284	"false"(more
15236	n
12319	newHi)
1431	o
6773	Toggles
7641	Results",extractionEval.toGUI());
9763	l
21491	standardDeviation)
9025	m
13044	Options
853	j
10503	FancyLoaderTest
3152	k
936	h
15268	c.getExplanation(instance).getTopNode();
14392	POSTagger
886	i
509	w
23572	Pr(-)
561	v
590	u
6389	t
4895	s
17566	r
3157	InstanceFromSequence(Instance
18416	innerLearner.addExample(answeredQuery);
8584	q
4001	button.addActionListener(l);
8574	p
22512	i.next()
21480	standardDeviation;
18784	currentName=shortenedClassName(o.getClass());
9151	U(0,
4398	getbase
203	}
8082	|
19043	'"+textField.getText()+"'");
363	{
19668	z
8093	-wp*(1-tau)*sig
13058	y
9954	x
22723	TransformingMultiClassifier(c,
10193	ispositive
14911	l.setDoProbabilityEstimates(false);
7684	entity
7497	x1,Instance
22229	span=input.next();
15167	ff=new
20953	type.test(s);
14740	namematcher
3130	gettext
22702	train-test
19366	splitPane.setDividerLocation(400);
13754	BOTTOM;
11943	LEAGUE
23336	"defSpanType
20739	setpmsneg
3791	estimated
3785	basic
22485	bestclassnames
5049	s=(Span)o;
16062	buf.append("size
3392	derived
8144	jan
18742	log.warn("can't
7455	this(true,1.0);
7873	tokenizer.splitIntoTokens(sampleDocs[0]);
18762	seperately)
6129	documentList.setVisible(true);
21100	JProgressBar[0];
15327	this.args
9863	belongs
14901	libsvm
2692	much
11679	dotprod
13470	Index(i,j));
15262	MyBinaryClassifier
14493	ArrayList<String>(allNames);
965	"+c.schema.getClassName(i)));
6766	outType){
6775	ReadOnlyButton
2307	loadops
3290	CommandLineProcessor[]{gui,base,
8380	column
3010	ControlledViewer(new
8656	addFeature(String
10661	schema){
15207	testList=iteratorToList(testIterator);
13303	classifiers=multiClassifier.getClassifiers();
4900	saveTrainPartitions
4686	jtable
862	update
9496	Result",new
9629	.getSpansWithProperty(spanProp,id);
22225	extendLabels(labels,i.next(),statement);
11954	premiership
17458	rs.split(cvs.getTrain(k));
16253	hypothesis).
6108	t=j.next();
1023	tostring
20767	ClassifyCommandLineUtil.Learner{
23630	pseudoCounts,boolean
17216	"+k1+"
14046	dc.targetFeature=(Feature)argument;
2633	synchronized(documentList){
14599	]+");
1158	possible
983	sequential
3034	applyControls(ViewerControls
362	BatchClassifierLearner
317	activelearning
12803	isType(String
5658	charindexsubspan
22506	schema's
11744	"My
14910	estimates
9734	iseed1,iseed2;
12695	0,...,hmm.nstate-1
6723	labelBox.addItem(spanTypes[i]);
14501	FreqAnal
2117	entire
11146	(IOUtil.saveSomehow(testParams.resultToSave,testParams.saveAs))
113	which
8252	extractFeatures(Span
5110	idviewer
6963	EditedSpan{
14819	checkClassifyText()
18798	edit");
4671	i=instance.featureIterator();i.hasNext();){
1681	java.io.ObjectInputStream;
836	k<=historySize;
9671	"+p+"Continue*
44	schema);
20891	learn){
16330	updateVotedHyperplane(1);
8564	hmm;
19845	filter=
13709	classifiers[i]=innerLearner.get(i).getClassifier();
19839	filter;
21096	format=new
18652	getAllowedPValues
3163	history.add(
9866	documentGroupId);
19780	IllegalStateException("constrained
10160	if(otherLabel==null)
19943	split(Iterator<Example>
6155	statusMsg.display("Token
20332	i=bag.iterator();i.hasNext();){
8568	hmm,
474	Example(transformInstance(schema,e,innerClassifiers),
9568	setTrainFraction(double
22019	p,MonotonicTextLabels
15559	augmentedinstance
21382	constructing
18598	NegativeBinomial(10,0.5);
7561	increment
20455	filter_
1235	interpreted
12065	spanish
14336	i=b.documentSpanIterator();i.hasNext();){
273	MultiExampleSchema
15172	setNumberOfFeatures(int
2748	AbstractAction{
18209	MultinomialClassifier
12206	labels.addToType(longSpan,
15709	System.out.println("Score
1415	interpreter
419	innerLearners[0];
23450	assertEquals(0.415,error,0.05);
14386	stand-off
5688	currdstentry
22121	filters
1267	getProperty(SCRIPTDIR_PROP);
3578	fileName.substring(0,fileName.length()-".class".length());
18109	REFERENCE:
16476	spanProp
15183	featvalues
3746	getmessage
11082	ex.asInstance();
14430	writer.close();
20544	"If
14307	space
17549	TreeMap<String,Double>();
22346	ViewerTest()
13987	ExplanationViewer
23039	SoftDictionary[schema.getNumberOfClasses()];
14119	mixup=new
5993	getTruthBox(){
11154	getExtensionFor(String
803	rather
7850	constructior
9622	useSpanType=spanType!=null;
5180	parentName.
2820	spandocument
9892	this(innerLearner,5);
10306	splitter=b;
16249	EMNLP,
18990	j=0;j<allowedValues.length;j++){
10526	fancyloadertest
2653	nullSpan(){
4194	labels,StatusMessage
20766	SequentialLearner
13609	importance'
23526	ClassifierTeacher
11378	labelsFile
19964	helps
8439	'label'
16118	setSignalParameters(CommandLineUtil.OnlineSignalParams
14525	i=lowRiskNameList.iterator();i.hasNext();)
23086	if(edit.trueType!=null){
4347	MixupDebugger(base,groundTruthLabelsFile,mixupProgramFile,
21156	System.out.print("|
7885	TextToken[]
22091	filter,
14974	st=new
23239	System.out.println("\nTotal
13314	Explanation.Node("MultiClassifier
6461	recall
20178	filter.
19088	if(value!=null)
14580	highRisk=(tn.matches("(\\w"+DIV+")+"));
1462	datapropertiesfound
4105	specified";
7134	warning
21814	AdaptedSequenceClassifier(sequenceClassifier,sequenceDataset);
13623	rankedexamples
14311	BasicSpan(documentId,textTokens,0,textTokens.length,
5185	single
16366	pos_h,Hyperplane
14486	NameMatcher(String
23922	(k==0
23924	(k==1
19663	val;
18375	combineddataset
4241	updateTypeBox(programLabels,viewer.getGuessBox());
908	Hyperplane[]
9645	getTaggedLabels(){
21966	lineNo=0;
15484	val:
2276	String[]{beginOrEnd,type});
7686	testextractor
12086	bradford
16163	"+i,
14202	classificationsignalparameters
1147	"+props.getProperty(DATADIR_PROP));
7097	result=new
13795	Tell
1162	getPossibleTextLabelKeys()
21192	Analogous
9867	size();
1316	documents");
8906	Modelling
12825	indict
14702	~re'([\\.\\-\\w+]+\\@[\\.\\-\\w\\+]+)',1;"});
1377	MixupInterpreter(new
21779	Iterator<Feature>{
5093	MixupInterpreter(p);
746	ProgressCounter("training
12594	findbestlongform
17654	StringBuffer("initial
16637	stopList=new
2100	embedded
10086	classLabel.isNegative(),
23689	25.19122118273868150,
23925	k==n-1)
9465	//System.out.println("setting
2247	LabelInfo{
7775	binomialStdErr(){
2890	getvalueisadjusting
6837	Saving
5883	iitb.Model.EdgeFeatures(this,
15691	tmp2*count;
18280	System.out.println("iteration="+(iter+1)+"
16148	gettextlearnerparameters
10363	falseData
11328	loadfromfilename
9795	(0,1).
23090	editor.getViewer().getGuessBox().setSelectedItem(edit.extractedType);
19519	negativeLabel(double
8213	getters
8752	while
8041	R_quickstart.txt
19078	JLabel(type.toString()),
12946	log.debug("no
4658	InstanceViewer
18420	innerLearner.reset();
16819	segmentTransform
16159	history.add(new
21608	add(nextButton,gbc);
14906	trainSet=SampleDatasets.makeToy3ClassData(new
11538	false,signal.cross);
15191	valueig2
2091	out.println("\t"+span.asString().replace('\n','
19628	this.voted
21344	if(b.hasNext()){
8422	tmpBase=new
10754	size(){
13791	MinimalMarkupControls.this);
16387	dec>=0?ClassLabel.positiveLabel(dec):ClassLabel.negativeLabel(dec);
22885	y_t_hat=pos_t.score(example.asInstance())-theta;
22796	(featureIndex(f).get(i)).getWeight(f);
19574	multiposlabel
16884	this.classifier
12136	Schwartz,
23481	SubsamplingCrossValSplitter<Instance>(3,0.2);
8792	lala;
23867	1.8532718694937346E280,
22230	output=labels.getTrie().lookup(span);
18925	warning=false;
3809	gettest
6650	OnlineClassifierDocumentEditor
7530	size="+cache.size());
19019	typeOrBrowsePanel.add(browseButton);
10593	SemiSupervisedClassifierTeacher
15297	"-loadFrom","tmp.ann"})
5656	getlevel
18448	ArrayList<Instance>();it.hasNext();list.add(it.next()));
16167	getSubpopulationId(){
23407	LearnerTest("bayesUnlabeled",new
15595	temval
3769	AbstractLooper(Collection<T>
17951	FeatureBuffer(TextLabels
23649	1.041126526197209e-02,
2519	.numericLabel());
2326	advance
22195	this.offLevel(level);
12260	itr
19579	getprobability
14435	sentencesplitter
13427	batchTrain(s);
6290	boolean[spans.length];
5275	its
3740	findclass
21346	System.err.println("remove()
16841	BinaryClassifierLearner
211	teachers
11446	ViewerFrame("from
23985	a)/(b-a)
3102	weightx
3103	weighty
1552	spans
18979	allowedValueMethodName=
9574	Iterator<List<T>>
21269	ByteArrayInputStream
7467	if(usedFeatures.add(f)){
14358	testList.add(t);
13286	October
19455	viewerTracker2=
14648	last){
8374	-saveAs
12255	isTrueDefinition(String
2316	loader
23243	doMainRunning=false;
12581	iss
6757	readOnly){
21032	MultiTrainTestParams(){
23847	6.917786472619482E236,
17359	query);
4233	JTextField(e.toString()));
3848	node=root;
21606	prev
3717	annotatorloader
17771	Functions
1465	loaded
8201	fe.setFeatureWindowSize(featureWindowSize);
12505	args[++i];
6923	checkLabel(int
21132	graphicCounter.setIndeterminate(numSteps<0);
19450	viewerTracker2;
15630	msg05
21024	getTestsetFilenameHelp(){
5928	negativeclass
7100	ViewerFrame("Result",new
21468	transformation.
20192	fe.emit(this);
19631	if(!w_t.hasFeature(f)){
14861	e1.extend(c1,SampleDatasets.toyTest(),1);
2981	add(controls,gbc);
630	press
21928	Extraction2TaggingReduction.class);
18829	type=props[i].getPropertyType();
11712	docSpan.size());
981	"[MultiClassVPClassifier:"+StringUtil.toString(w_t,"\n","\n]","\n
19308	nosuchmethodexception
19511	score):multiNegLabel(name,
13861	javax.swing.table.TableCellRenderer;
2153	end=start+s.size()-1;
2248	span;
6298	span:
21090	gettestsetfilenamehelp
20897	trainingData.\n
23698	51.60667556776437357,
5614	dstOffset;
133	teacher.
23755	5.502622159812089E57,
17852	"TestExtractor
15613	"msg05";
2695	span.
4965	span,
8202	AnnotatedSpanFE{
7349	base=SampleTextBases.getTextBase();
10081	posWeight()
7435	Status:
12215	span)
21438	documentation.
7985	contrary
4038	object_selected
17724	rates
23942	factorial((int)
17727	"+sigAcceptRate);
17662	"+tau[i][0]+",");
21878	TWO=new
4436	suite(){
4121	statusMsg=new
8647	Pattern.compile(patternStr);
15710	"+ct.getChiSquared());
20400	uwBag.add(str,n);
21442	"as
14750	postlabels
16414	abound
4522	LongUITest(Class<?>
8838	HREF="http://www.statsoft.com/textbook/glosp.html#Poisson
14649	if(name.length()==0)
22946	i=1;i<ll.size();i++){
4725	labels=null;
3376	saveas
8180	AnnotatedSpanFE
12901	receiveContent(content);
8928	k4,
136	must
21836	HashMap<Example[],ClassLabel[]>();
20783	saveAsFilename;
13165	hasid
5858	super(gen);
21443	is"
19492	WeightedSet<String>();
754	curious
13797	selectedType=(String)typeBox.getSelectedItem();
6819	Opening
20959	getSplitter(){
23018	this("SoftTFIDF");
19777	"\t
22884	ll.remove(LIST_SIZE+1);
22486	InsideOutsideReduction
19085	"\n
6244	(DocumentCellWidthSlider)e.getSource();
22122	if("filter".equals(levelType)){
8882	Zechner
2799	changeevent
15084	rate2
14012	classifierViewer=
4282	JFrame("MixupDebugger");
2569	edu.cmu.minorthird.text.Span;
9624	NestedTextLabels(labels);
23324	Merger
14578	tn=j.next();
24118	-1/360
540	this.finalClassifier
20072	requiredAnnotation==null?"":requiredAnnotation;
18818	//Possible
8889	Doctoral
21557	(exi.getLabel().isPositive())
20934	TestParams
9499	TrainTestExtractor().callMain(args);
22470	multiSpanProp){
11388	load(new
2661	here.]");
8800	linematcher
19776	System.out.println(weightOfPrediction
19224	AbstractAction("Print")
22802	total+=1.0;
3072	viewercontrols
13435	same.
16017	getNumberOfSegmentGroups(){
20408	Function{
7793	deviation
19266	propertyeditor
16160	String[]{"Predicted
22649	if(ld.nameOfFileToView==null){
14787	nm_labels
17136	//split
13297	this.transformer=transformer;
4209	truthLabels;
1203	it.
11415	edu.cmu.minorthird.classify.experiments.Tester;
9494	(base.showResult)
9182	acceptance-rejection
1065	repository
16378	Example(instance1,new
14323	getOffset(String
21256	"+redirect);
1301	System.out.println("The
17828	reparametrizelambdas2tausig
4219	truthLabels,
21023	it;
2484	negExamples=new
6559	contextSpan;
3968	button=new
5695	newlevelname
16870	-1.0,
14195	/*"signalParameters",*/"trainingParameters","additionalParameters",
4885	ClassifiedSequenceDataset[]
23129	norm=0.0;
21014	MultiTrainTestParams();
2415	helper
5349	currMapper=dstIterator.next();
5869	SemiMTFeatureGenImpl(int
198	learned.
9532	is.
260	Cameron
20553	is,
9078	k5,
23828	5.574585761207606E196,
13017	superviewer
8920	-1.0;
8630	it)
9666	baseTag){
2996	viewer.canReceive(obj);
7751	b.cov;
18176	numberOfClasses+=1;
15516	truefeatures[i]=features[i];
2881	getstatus
7483	if(tau_t!=0){
10020	addedASegmentStartingAtPos
16524	".data";
8930	k5;
11014	transformations
1302	is:
18004	eval_save_file
19752	IllegalArgumentException("predictedClasses,
5741	compareto
20070	this.requiredAnnotation=requiredAnnotation;
19925	filter.toString(8));
17568	sumWgt2/sumWgt)
17668	it<numIterations;
16106	Online
48	everything
11578	index,ExampleSchema
13406	rankedExamples
19339	zero
10430	"+tot);
13726	ViewerControls.
7050	annotation
12071	draw
4028	defaultdir
3422	Instance[][]
19185	SampleInner();
17989	TRAIN_FILE
20718	infogaininstancetransform
15210	result.add(i.next());
14767	working
21941	save});
12555	schwartz's
19789	Explanation.Node(searcher.explain(sequence));
12487	extracted"
15773	setLogSpaceOption()
3291	save,signal,train});
6366	tp,AttributeSet
683	Hidden
1874	closeLabels(labels,closurePolicy);
10277	FIXME:
13420	"epoch",
2216	TagInfo(label.end,"</"+label.type+">",false));
18023	base.loadDocument("f2","PBJ's");
6133	displayed
22566	annotating
8717	+=exprelength;
16687	if(!format.equals(CONFIG_FORMAT_NAME))
1187	<ol>
13615	rankingboosted
659	transforminstance
21066	paramaters
2450	ranking
16495	endtag
20565	label=new
15825	super.init(tokens);
2478	rankingLists){
12838	propogating
12732	backward
12519	FN:
13109	Give
2995	obj){
2306	setclosurepolicy
13747	makeApplyButton(){
20164	operated
1554	Testing
6346	marks=spanMarkups[index];
5375	.getDocumentContents());
1487	getproperty
15984	mtfeaturegenimpl
2876	tpcolor
23356	prog
1637	BinaryClassifier[
3834	TrieNode();
14618	order){
15389	newStackingDepth){
8086	prob
8617	expressions,
13526	cur_W_Neg=0;
3048	ViewerControls{
661	getlabel
8190	BagOfLowerCaseWordsFE();
9537	JLabel("[null
17958	FeatureBuffer");
14167	StringUtil.toString(output.getAllowedOutputFormatValues()));
8254	EmptyLabels(),s);
1591	innerLearner,int
7679	extractionEval;
8228	getUseCharType(){
5285	parentSpan=
8227	useCharType=flag;
1565	getsubpopulationid'
24007	chbevl(
20960	splitter=s;
16469	BinaryClassifier)
1527	prop
3519	segmentdataset
7742	Combine
19972	annotation);
12741	nesym
5825	segLengths[segmentStart]+segmentStart-1;
12034	remind
11771	TEST
4031	files_and_directories
6085	log.debug("reset
5838	Iterator<CandidateSegmentGroup>
17445	this.folds=k;
5508	MapEntry(childDocId,childOffset,parentDocId,
8400	374.0
21414	super(ex);
22822	"From
6431	initializelayout
14957	setDelta(0.05);
14515	Confidence
3044	uc="+uc+"
22474	getFE()
7812	jtextarea
13934	value,boolean
5539	childDocId,int
21951	signal.spanType,signal.spanProp,fe,historySize,reduction);
338	edu.cmu.minorthird.classify.algorithms.linear.MaxEntLearner;
12517	FP:
12950	obj);
9597	nextdouble
9806	(iseed2<0)
7319	viewer.getGuessBox()
9917	accumNeg
5558	parentLo);
13885	correctButton;
12757	if(multiClassifier
5175	TextBaseEntry
12187	j=accum.iterator();
11905	drew
5194	sure
7085	if(test.loadFrom==null)
19406	getDocumentGroupId();
7070	baseparams
19272	getbeaninfo
16299	Problema:
12120	Abbreviations
21596	add(importButton,gbc);
14885	Only
16312	excount++;
18782	"+key);
17765	i<(K+1);
1135	(props.getProperty(DATADIR_PROP)==null)
1868	i=0;i<docList.size();i++){
22308	getoldtype
2460	HashMap<String,List<Example>>();
6522	batch
17969	dataFile=new
19559	weight)
1770	characters
14541	docSpan.subSpan(j,Math.min(docSpan.size()-j,WINDOW_SIZE));
19871	object){
16305	neg_t=new
22585	annotatorList.add(getAnnotator(s));
884	sequence.length;
8760	Buffer
10926	getTextClassifier(){
5582	purposes.
10143	weight;
11620	weight:
22866	if(mode==4){
20395	fr=new
6777	msg){
11657	aNorm+=aw*aw;
21997	getsaveas
3604	finding
10417	"+wp1+","+wp0+","+wn1+","+wn0);
2429	Learns
10505	FancyLoaderTest(){
15392	making
687	Experiments
9981	previousClass;
23126	featureFreq){
16005	ArrayList<CandidateSegmentGroup>();
23252	\n");
17044	stratified
5335	ultimately
3504	result.addAll(
22062	getLabelsForLevel(String
24334	Currently,
23404	changed---which
18330	System.out.println("******likelihood
20439	addition
18315	priors),
13635	itindex
6097	if(truthBox!=null)
5086	entity:speaker
8874	HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND
9914	weights
23273	JScrollBar
17035	stratifies
19320	helpstring
9950	target
16395	Example(ins,ex.getLabel());
12839	events.
21384	classification.
14520	".
1903	"0
8624	(vitor
14191	/*"extractionSignalParameters",*/"trainExtractorParameters",
12304	indexOf(char
1862	"+
20866	this.trainData=type.trainData;
5304	located.
4914	",
20574	SegmentAnnotator(segmenter,fe,maxWindowSize,annotationType);
8599	plog;
10870	StyleConstants.setBackground(red,
4161	gbc=new
23246	wait
12465	")
14537	"%
3943	kid
180	intervening
9673	";
1999	":
3011	MyViewer(),new
15458	CoreRelationalDataset.getLinksMap();
16206	documentspanlooper
21531	cachefilled
5341	Iterator<TextBaseMapper>
8998	Rectangular
15720	getpmutualinfo
3493	getSubsequenceInstance(int
4697	black
16383	example1=Winnow.normalizeWeights(aa,true);
9668	"...
6619	setCharacterAttributes(beginSubspanInDocument-beginContextSpanInDocument,subspanLength,attributeSet,true);
10689	j=0;j<classLabels.length;j++){
16873	ViterbiSegmenter(c,schema,maxSegmentSize);
13883	targetFeature;
275	dataset.getMultiSchema();
17217	"+k2);
6841	Reset(String
13963	filteredData.addMulti(e);
425	i++)
6646	edu.cmu.minorthird.text.learn.OnlineTextClassifierLearner;
4328	if("-stem".equals(args[argp])){
12890	getSuperView(){
23622	//System.out.println("out
10808	viewer1,viewer2
22522	MaskedInstance(i,
15252	schema,ClassifierLearner[]
20705	d=Math.max(0.0,(v-m)/(r*m));
13159	"[
3238	togui
12790	Collections.EMPTY_SET;
8727	startWithSameInitialPunctCharacters(String
21196	redirectionProps=new
8592	plog,
23862	2.0063439050956838E269,
11992	i++;
15439	"+params.splitter);
14086	classifications
10162	otherLabel?");
22526	makebinarytransform
10886	learner;
23637	poissonclassifier
14897	stuff.
1353	tbl.getLabels()
2503	Comparator<Example>(){
13856	learner1
23176	JTextArea(20,100);
22930	factor=Math.pow(beta2,deltaLoss);
4516	//End
23389	testprogram
22785	addExample(i.next());
19046	checkbox=new
21284	"+this+
15366	stackingDepth=1;
15481	hashMap,
5750	Sarawagi
3003	viewer.canHandle(signal,argument,senders);
13552	System.out.println("W_Pos:
3439	this.maxWindowSize
16648	if(!(stopList.contains(methods[i].getName())||
6495	integer
10629	"Pop
9988	"+instance.getSource());
11110	testParams.resultToSave
7582	extractors.
10489	totalweight
15530	ds){
16612	}catch(InvocationTargetException
7836	boat
17806	sumx
14462	NameMatcher
15094	sumy
58	learner.
13514	(rankedExamples[i][j].getWeight(score)));
3192	"[instFromSeq
8682	[A-Z]
22155	evaluate(Statement
61	learner,
412	learner)
15093	sumv
14545	Found:
846	!=
1969	nothing
17960	spanresult
7888	tokens2.length);
14760	transformdict
21900	s=map.keySet();
17948	buf.getInstance();
3306	construct
1534	Get
13685	getMultiSchema(){
500	innerClassifiers[i].classification(oldInstance);
12027	comments
466	(Iterator<Example>
12140	Symposium
22628	stem=
18801	PropertyEditor(true,false);
8989	body
135	learners
20432	stringbagresult
834	&&
1970	CLOSE_BY_OPERATION:
4876	System.out.println("stem
9263	zechner
18874	String");
23749	8.15915283247898E47,
23394	edu.cmu.minorthird.classify.algorithms.linear.BalancedWinnow;
487	innerLearners[i].batchTrain(dataset);
23642	8.106146679532726e-02,
4862	s.toLowerCase();
4073	stem)
20689	vWgt,double
13683	innerLearner.add(learner.copy());
8837	definition</A>
7988	convinence
14450	readfile
12658	getNamedSubView(String
10544	BINARY_EXAMPLE_SCHEMA=new
11196	TitledBorder("Execution
17522	sumX
1350	key
20780	showData=false;
19054	if(isInLine(pname))
3869	if(kid==null)
2862	editing
4934	ids.add(e.getSubpopulationId());
4563	notdlv
2374	savetypesasops
9932	"no
23771	3.146997326038794E85,
8563	HMM
20720	negativebinomialclassifier
13204	buf.append("instance:
1204	script
23783	3.307885441519387E107,
15256	classifiers);
19269	optionpane
5714	childtb
9755	(LSW)
22597	getTextLabels(File
17087	FileReader(new
1838	setSpanProp(tok,in,file,base,labels);
19306	pname2
4285	mixupProgramFile,false,false);
3455	containing
20714	poissonlearner
1875	addToType(StringTokenizer
8357	crAnn
21887	if(count==ONE)
13554	System.out.println("W_Neg:
13034	lightweight
1911	IllegalArgumentException("bad
6786	docIndex=documentList.getMinSelectionIndex();
21730	prevbutton
12408	(!
5429	pieces.
2045	pc2.finished();
6321	spanComponents[i]
13077	pairs.
2545	HISTORY_FEATURE
21147	progress(){
1018	sequenceiterator
20091	steps,
6976	onlinelearning
18626	follows.
23890	"n
5769	alloc();
13066	-foreground
21514	organization
23865	7.471062926282892E275,
292	MultiExample
20598	"+annotationType+":
5961	neg_class_name
4808	name=i.next();
351	Generalization,
1218	"data.properties"
2086	if(span.size()>0){
5562	follows:
22446	Example(fe.extractInstance(textLabels,s),ClassLabel
16082	copy.addCandidateSegmentGroup(o);
3641	FileInputStream(file);
16547	while(i.hasNext())
15161	val=featValues.get(j).value;
13731	desired,
14724	System.out.println(e2);
22815	Notation
21171	if(graphicCounter!=null&&graphicCounter.isIndeterminate()){
14801	model="modelFile.dat";
6000	label=i.next();
15287	NaiveBayes()"})
657	stackeddata
10083	ignores
1077	"edu.cmu.minorthird.scriptDir";
11259	JProgressBar[]{progressBar1,
18983	o.getClass().getMethod(allowedValueMethodName,
23347	vp:t+
8673	i++){
18704	init(rootClass);
17646	Lambda
20807	showData=show;
21909	multiset
24330	xlongbinomial
13116	configured
7726	serialVersionUID=1;
11268	this.getClass().toString().substring("class
19949	i=0;i<strata.size();i++){
458	+"
12882	setSuperView(superView,ONLY_SUBVIEWER);
9781	@see
22524	"[InstanceTransform:
9050	*=
13722	applyControls()
15136	Object{
76	learning,
24133	(x
13493	expLoss;
12823	isannotatedby
2300	close_types_in_labeled_docs
79	learning.
9033	(u
11641	result.add(s,Math.log(d/tot+0.001)-Math.log((tot-d)/tot+0.001));
21499	(r
4561	deliver
8577	(p
8523	confidencereportingsequenceannotator
23910	(n
7795	combine
4177	row=col=0;
1435	(o
3585	log.warn("error
27	*/
10197	multilabel
24029	(j
21524	standarddeviation
16665	val="";
1611	innerLearner[i].reset();
20965	TestParams{
9042	(k
10597	semisupervisedclassifierlearner
16393	if((lpos_h.hasFeature(f))){
12503	(i
6771	if(readOnly&&!DUMMY_ID.equals(documentSpan.getDocumentId())){
13688	it){
16798	edu.cmu.minorthird.classify.transform.LeaveOneOutDictTransformLearner;
7858	steps
1269	File(new
883	+=
6616	){
23360	guessLabels
24353	tbMan,
20819	BaseParams{
19233	jeditorpane
5450	level=newLevel;
23617	numPos+numNeg,
23020	this(DEFAULT_PATTERN,distanceNames);
20375	j=0;j<wordArray.length;j++){
12277	+3
19093	if(isHelp){
17786	*N
7503	+1
1638	numClasses
20425	annotationprovider
24357	tbMan;
18034	fe.extractInstance(labels,s),
905	Classifier,Visible,Serializable
3534	mutablecandidatesegmentgroup
2134	(B
5283	parentOffset=mapping.dstOffset+(srcOffset-mapping.srcOffset);
4359	windowadapter
17258	size="+totTrainSize);
5007	add(new
2218	if(!added){
16317	f=j.next();
17132	constraint
5760	SegmentDataSequence
24032	Instantly
17733	"sigma",new
582	SmartVanillaViewer(sc.finalClassifier);
7746	followed
11046	Classify
4272	newType=newTypeField.getText().trim();
987	algorithm
7280	kou
22840	(0
16535	i=d.iterator();i.hasNext();){
13595	koo
7417	transform(i.next())
22318	regexgroup
14890	(4
13449	actualFtrs
1261	SampleClassificationProblem.trainLabels();
5546	if(curr.srcOffset<=childOffset){
7664	SpanDifference(propertyIterator(labels,ann.getSpanType(),val),
20501	log.info("committee
15787	()
12791	getProperty(Span
7945	(a
10669	serialVersionUID=2;
3579	System.out.println("loading
11071	jlpTest;
16728	mother=s;
8952	larger
10602	Extraction2TaggingReduction.
20738	mudeltapos
20035	'x
18202	i=index.featureIterator();i.hasNext();){
9241	(X
10949	outputtype
4624	it's
21009	TrainTestParams(){
827	);
7249	edu.cmu.minorthird.classify.relational;
20019	it).
14983	x[j]=new
22647	LabeledDirectory();
13121	configures
17192	partitionContaining(List<Set<String>>
10838	zoomedIn.canReceive(argument)){
23611	estimatedProb(ngp,numPos/c.getScale(),featurePrior,1.0/c.getScale(),
16786	laffter
4605	e,int
11873	's
9202	(U
9194	(V
9186	(W
4253	t=i.next();
839	))
17778	m/N;
5154	HashMap<String,TextBaseMapper>();
9505	gettraintestextractorhelp
16881	),
11472	within
20507	(r.nextDouble()*data.size());
10068	).
17055	String.
1773	LENGTH==-1,
5967	segmentation
4480	"-spanType",
5142	String)
245	/*
9717	Comm.</CITE>
5141	String,
11344	errorarea
23060	traindistances
6547	semisupervised
22532	LeaveOneOutSplitter<T>
158	results
15768	options.setProperty(argTok.nextToken(),argTok.nextToken());
12515	System.out.println("TP:
8274	from(s).right().token(i).prop(tokenPropertyFeatures[j]).emit();
10042	accumneg
9148	(;;)
18125	trials
14959	TestSuite(LibsvmTest.class);
294	query){
21853	(labelSeq==null)
19079	gbc(1,row));
12908	result=
5265	if(srcDocSpan!=null){
12971	appropriate
12824	hasdictionary
2132	such
23582	Logger.getLogger(PoissonLearner.class);
13737	controlled
7915	0,
20367	stopwords(String
6567	this.contextWidth
11953	league
1127	relative
6956	0)
14048	sendSignal(TEXT_MESSAGE,featureSummary((Feature)argument,cd.index));
3024	lastObj=o;
12225	str.length()
17788	Double(v).isNaN())
21170	finished(){
20952	test(String
4373	truthlabels
437	//
2	edu.cmu.minorthird.classify;
22249	IllegalStateException("illegal
18580	/=
11277	knn
22351	String;
11022	RandomSplitter.class,
12914	(namedSubViews.get(ONLY_SUBVIEWER)).getSerializableContent();
14535	i=labels.getTextBase().documentSpanIterator();i
16883	ViterbiSearcher(Classifier
16156	this.instance=instance;
9837	equivalent
12423	lIndex;
18159	SemiSupervisedNaiveBayesLearner
4507	result)
12970	sends
23344	subj
7821	lamb.
10951	labeleddata
14866	stats1[2]=e1.maxF1();
13549	System.out.println("best
12440	lIndex)
3355	getsignalparameters
15777	(very
15632	loadfiledata
3033	result;
9254	generator
13075	treated
21229	is=findFileResource(source);
19214	(!rootClass.isAssignableFrom(o.getClass()))
3782	unknown.
16314	example=Winnow.normalizeWeights(example2,true);
13575	-=
2677	->
7628	(MonotonicTextLabels)annFullLabels);
9126	Arithmetic.logFactorial(m);
12269	ioe.printStackTrace();
4575	begincontinueenduniquereduction
8096	+(b1+b2*sig-1)*Math.log(tau*(1-tau));
11647	this.e=e;
15358	StackedBatchClassifierLearner{
23756	2.5862324151116827E59,
9634	taggedLabels.setProperty(span.getToken(0),tokenProp,beginTag);
6628	rightboundary
23349	[any{5}]
18545	tokpropfeats
9150	--
3678	clazz;
12261	entry.iterator();
21071	getlearnerparametershelp
18866	ep.setEditorKit(new
2270	Set<String[]>
3781	-1
7586	extractionEval=null;
10077	binaryLabel
23187	vb){
17722	buf.append("sigma
16164	previousLabels[i]}));
13828	ManyVsRestLearner()
8707	expression.length();
18631	getter
23521	this.expectedTestError=expectedTestError;
22325	importfromlevel
16203	documentSpan).
11960	36
13125	occurs
8547	seqann
18236	4.
12747	edu.cmu.minorthird.classify.transform.TransformingMultiClassifier;
7052	documentSpan);
8997	hats.
11957	42
10782	annotator.annotate(labels);
3806	getTest(int
11125	(testParams.showTestDetails)
18106	Gamma(r)
22211	input=labels.instanceIterator(startType);
14661	System.err.println("applying
6874	documentMessage(nextCursor);
5357	Tokenizer.
13974	2;
8744	turn
12294	this.lo=ss.lo+lo;
17233	List<HasSubpopulationId>
17740	lambdaEstimateVec)
10221	builder
21657	EDITOR_PROP,
20303	stringBag.add(value);
6451	setcellrenderer
17628	lambdaEstimateVec,
7240	JPanel{
23674	29
8172	negative_infinity
18223	3.
12671	parallelpane
21058	getshowtestdetailshelp
17284	testusers
11345	clearbutton
17892	if(k+1<args.length&&!args[k+1].startsWith("-")){
16548	Dataset",data.toGUI());
13201	buf.append("candidate:
20979	it=((MultiDataset)testData).multiIterator();
17769	lambdaEstimateVec;
22907	3)
13421	numEpochs);
5134	ways
11513	this.save=base;
4930	msg,SequenceDataset
592	innerPanel.add(u);
907	1;
8391	19
12202	doc.charIndexSubSpan(longForm.lo,
22063	levelsToLabelsMap.get(level);
8392	15
3550	getmaxwindowsize
12729	hmm.hmmModel.print(new
3914	ResultIterator{
6340	way!
8399	11
8388	12
4801	labels.instanceIterator("extracted_email",test.getDocumentId());i
5479	20
9445	setTrainingParameters(CommandLineUtil.TrainExtractorParams
18177	2.
6182	figure
13039	"-foo
12371	2,
16795	eqpos0
6658	SpanFeatureExtractor
11358	2)
1138	props.setProperty(LABELDIR_PROP,props.getProperty(REPOSITORY_PROP)+"/labels");
16744	IllegalArgumentException(o+
16684	String[]{CONFIG_FORMAT_NAME};
22173	importType=statement.getImportType();
6222	ZoomAction
7098	ClassifiedDataset(ann.getClassifier(),d);
790	paired
17165	i=0;i<requestList.size();i++){
23577	.}
10185	multiclasslabels
22933	pos_t.multiply(ff,factor);
22857	this.beta=b;
757	0;
9421	jul
18243	hasConverged=false;
730	predicted
10678	this.fe=fe;
16528	i=this.iterator();i.hasNext();){
18105	1.
9437	GUI
2240	TagInfo(int
22629	fileJ.getName().substring(0,fileJ.getName().length()-".txt".length());
5481	10
20227	if(lo<0){
18786	classBox.addActionListener(new
9239	1)
12375	1,
21612	add(contextWidthSlider,gbc);
18291	numberOfFeatures,double
1836	addToType(tok,in,file,base,labels);
4851	stem(TextBase
21709	if(editSpanCursor<0)
18869	ep.setEditable(false);
5626	if(res==0)
20716	featuretokeep
5876	features[]
5673	parentoffset
5314	both
859	correctXj,
4405	oldtypes
4933	i=d.iterator();
472	j.next();
11260	progressBar2,progressBar3});
18684	recursively,
1512	importops
7904	SpanTypeTokenizer");
22127	".")
8756	"\n");
10157	label?
18745	shortenedClassName(Class<?>
14057	label=
6977	onlineclassifierdocumenteditor
9444	getTrainingParameters()
16371	this.mytheta=atheta;
17152	//System.out.println("comparing
7922	8,
9455	(signal.spanProp==null
22846	fmap;//hash
15386	getStackingDepth(){
18167	this.MAX_ITER=iterations;
2411	docpos
21793	System.out.println(aug.toString());
942	label;
14714	!delete:t>+
4654	label:
8414	classifier","document");
17911	"+pos+"
2934	splitPane.setBottomComponent(controls);
17252	System.out.println("train:
12562	longspan
16018	groupList.size();
15637	association
13333	return(new
606	titledborder
8469	'NEG'
20060	generates
731	labels
7824	white
4584	instantiationexception
6884	Property"){
2122	currDoc.getDocumentId())));
18301	|f(t-1)|)/2
17508	subViewer.canHandle(signal,argument,senders);
5143	filter}
8038	properly
1917	labels.setProperty(span.charIndexSubSpan(lo,lo+len),prop,value);
11793	occurred:
20219	subSpan(-2,2)
7919	7,
22381	IndexedViewer()
21484	generated
24130	7.
5455	getParent(){
2815	statusmessage
22940	//returns
18532	v=expt.evaluation();
11980	assertEquals(1264,
16855	5;
23051	trainDistances(schema,softDict);
20009	stdout
17135	requests.add(reqId);
18082	poisson;
16647	params=methods[i].getParameterTypes();
1599	epochs;
12214	labels.setAnnotatedBy(
1056	edu.cmu.minorthird.text.mixup.MixupProgram;
22376	String[]{"Takashi",
8735	tmp1.substring(0,1);
5274	if(mapper==null)
2403	iterate
7820	"Mary
7916	6,
6542	Enables
22909	lossF.increment(ff,coef);
9101	k5+1
22667	textfiles
23678	1.79175946922805500,
15460	i=dataset.iterator();i.hasNext();){
16850	epochs,
18283	6.
10045	sequenceerrors
23026	softDict)
21782	i<newFeatures.length;
11653	aNorm=0,dotProd=0;
3417	MutableCandidateSegmentGroup
10962	erases
21457	2v
11416	DatasetClassifierTeacher
11480	//add
12355	currSentence.lastIndexOf(",
1284	"script
2187	label,
116	label.
1595	epochs)
8398	47
5813	label)
2743	.hasNext();){
7227	getspanfeatureextractor
7534	for(ListIterator<WeightedExample>
15794	String("Number
3613	path){
15126	Collections.sort(featValues,VAL_COMPARATOR);
9956	otherSegments.
6117	(onlyEditedSpans?"
9960	otherSegments,
5797	tokens.getSubsequenceLabel(pos,pos+len);
355	5,
22426	dir=new
17717	estimateMean(v);*/
995	emnlp
23722	1307674368000L,
7484	w_t.increment(example,y*tau_t);
18240	5.
497	i<innerClassifiers.length;
5256	length,String
2447	BatchBinaryClassifierLearner{
4206	RefreshProgramAction
17675	"tau="+tau[i][(it-1)]+"
21696	SpanPropertyViewer();
5347	dstIterator=dstMapperList.iterator();
217	accept
3278	signal=p;
16601	"+arg+"="+args[pos+1]);
5207	bases
16976	trace)
644	regression
2031	hi=s.getTextToken(s.size()-1).getHi();
10562	newValidClassNames[validClassNames.length]=newClassName;
22529	N-fold
4321	if("-truth".equals(args[argp])){
6416	System.out.println("usage:
1954	i=base.documentSpanIterator();i.hasNext();){
20296	"[TokenSetResult:
14818	expectations
23849	1.3462012475717523E241,
21223	\""+annotationType+"\"
13603	considers
17808	maxcnt
12183	short,long
2739	colors[SpanDifference.TRUE_POS]=spanPainter.tpColor();
17795	(double[]
3137	edu.cmu.minorthird.classify.Feature;
3269	classifier=null;
12267	extractAbbrPairsFromString(content);
9422	semisupervisedclassifier
20587	"+g);
1680	java.io.LineNumberReader;
7390	createonlineclassifierdocumenteditor
12361	currSentence
5233	Span.charIndexSubSpan
20846	"+s+
17674	::
18521	if(opt.startsWith("-p")){
3158	instance,String[]
12633	List<Viewer>
2918	if(!(viewer
4211	base;
3645	byte[s.available()];
7831	tiger
20157	traces
8429	Instance[docSpan.size()];
4824	wang
19423	containment
2738	colors[SpanDifference.FALSE_NEG]=spanPainter.fnColor();
23633	Math.log((k+prior*pseudoCounts)/(n+pseudoCounts));
4290	System.exit(0);
12358	(sentenceEnd
12139	Pacific
17049	msgId
3442	ClassLabel[sequenceLength][maxWindowSize];
652	length
20145	if(fe==null)
3467	window[start][end-start-1]
19951	if(j%folds!=k){
24073	approximation.
5229	want
17058	hence
14898	consider:
14417	LBJPOSTagger();
3194	"+instance+"]";
9637	taggedLabels.setProperty(span.getToken(j),tokenProp,contTag);
1533	HasSubpopulationId
13259	linksMap.get(from).get(type).add(to);
22773	restricted
16274	votedCount=0;//number
12248	definitions.get(abbrString);
19611	ROMMALearner
15217	9,
13404	access
218	exampleschema
14994	sumyy+=target*target;
11862	Johnson
15406	StackedGraphicalLearner(BatchClassifierLearner
2289	filenotfoundexception
13177	detailMap;
10733	Exception{
11459	File(argv[2]));
15100	nexttoken
11661	bNorm+=bw*bw;
6284	JComponent[spans.length];
6753	shown,
13936	hasFocus,int
347	based
16202	findSpans(Span
23839	6.466855489220473E219,
8710	theCount
13913	targetCorrectness=false;
3225	ViewerFrame("TestInstance
20908	crossdimensional
17543	maxCnt,Math.pow(mean,2)/(mean-var)
15579	setstackingdepth
13243	'from',
19352	init(base,viewLabels,editLabels,statusMsg);
5273	textBaseMappers.get(srcEntry.getName());
8107	??
17351	learner.getAnnotator();
3382	sliding
3260	CommandLineUtil.SaveParams
2920	IllegalArgumentException("viewer
16963	lastT,
14628	if(cur_order.length==1)
2803	attributeset
10105	isPositive(){
23466	pages/site:
14996	++total;
12854	linked
7895	custom
8659	(lineMatcher(regexp,
20581	this.maxWindowSize=maxWindowSize;
16296	initializing
15111	//keeps
2137	thrown
3113	senders
18324	checkIncreased){
12816	annotationType,
1397	throws
19770	ii<sequence.length;
3921	match=i.next();
1452	property
24346	sense
23326	"TruSecure
3507	lo<window.length;
9564	RandomSplitter(double
5951	addfeature
8126	1,prob
14381	LBJPOSTagger(){
13805	Export
4256	if(!oldTypes.contains(t)){
14631	if(cur_order.length==2)
287	instanceof
871	"+viterbi[j].bestClassName()+"
12089	bulls
7182	annotationType;
1987	base)
2864	subclass
8044	System.exit(-99);
22101	levelType,String
4217	base,
6760	button=i.next();
21148	stepsCompleted++;
5336	base.
2339	warn
23244	stop
18321	loglik,double
9271	stadlober
3435	maxWindowSize,int
17980	ViewerFrame("Evaluation
21160	format.format(100.0*stepsCompleted/numSteps)+"%
3444	Specify
14916	Evaluation(trainSet.getSchema());
5100	v.setContent(s);
22146	while(instances.hasNext()){
5462	TextBaseMapper(TextBase
8478	documentSpan){
8924	>=
16127	outputType=signal.getOutputType(train.output);
17343	//answeredQuery
3944	pretty
22142	importFromLevel");
19109	<a
3070	jsplitpane
16242	"Mistake-Driven
15814	useHighPrecisionArithmeticHelp;
14634	if(cur_order.length==3)
12479	"FP");
3031	=>
5774	==
3757	Foo
736	;}
1757	For
2190	overalpping
12219	str)
761	i=dataset.sequenceIterator();
1840	docId=advance(tok,in,file);
22922	if(mode==5){
6915	Check
16419	mistake
11251	gbc);
3557	locally
14718	if(saveAs!=null){
11465	tolearner
5854	NestedMTFeatureTypes
21138	graphicCounter.setStringPainted(true);
17512	statusfield
12496	str;
9656	=:
68	instances.
6465	highlightdiffs
23736	1.0888869450418352E28,
18444	<T
12837	rules
14698	p=null;
14638	if(cur_order.length==4)
8835	<A
18767	inLine=b;
4599	instances,
518	<=
13714	multischema
17758	=+
14632	k=0;k<o[cur_order[1]].length;k++)
6421	interactively
6439	zoomaction
15303	"-fe",
13766	SemiSupervisedClassifierLearner
21137	"):task);
2669	Activates
16812	this(LeaveOneOutDictTransformLearner.DEFAULT_PATTERN,innerLearner,"Jaccard");
19321	itemselected
15779	removeLogSpaceOption()
16430	theta
1584	GenericCollinsLearnerV1
11087	newEx
9262	rand's
21492	Uses
3820	"TrieNode(ends="+endIds+",map="+map+")";
13241	classNameSet.addAll(example.getLabel().possibleLabels());
9319	Map<String,Set<String>>
7421	(Iterator<MultiExample>
10842	splitviewer
10792	samplemail
11153	clp.getFormatNames();
12845	receiveContent()
2233	buffer.append(docString.substring(docPos,docString.length()));
7640	ViewerFrame("Performance
20340	trBag.add(replacement,n);
3760	</code>
6613	subspan.size()!=0&&
1450	objects
3305	"only
11270	ViewerFrame(className,v);
1185	these
8454	Details(confidence,ConfidenceReportingSequenceAnnotator.class));
17560	Math.pow(
12378	StringSpan(currSentence,openParenIndex+1,closeParenIndex);
10747	validDocumentSpans.add(span);
19944	strata=new
13311	buf.append(classifiers[i].explain(instance));
15410	params.setStackingDepth(1);
19652	if((denom>0)||(denom<0)){
13337	getclassifiers
13383	0.005;
2084	Do
17824	tauacceptrate
10408	wp0=(totalPos-pos)/totalWeight;
708	historySize,int
9713	F.
9072	Ds
5435	Used
15176	addFeature(double
7019	opening
13907	data/classifications
21220	findAnnotator(String
9183	Dk
7918	"sentence");
22511	activeFeatureSet.add(
1946	MutableTextLabels.closeTypeInside(...)
10620	displayDatasetBeforeLearning;
13281	addlink
7865	tearDown()
10856	Color.darkGray);
23853	5.550293832739308E249,
21570	highestnegativeindex
4518	LongUITest
464	split.getTest(k);
22594	dir){
13491	(expLoss<minExpLoss){
3131	recieving
16587	"+arg);
1134	props.setProperty(REPOSITORY_PROP,defaultRepositoryValue);
3258	UIMain{
15257	ExampleSchema(getClassNames());
21371	length="
14570	if(tokens.toLowerCase().matches("(?i)(?s)^\\Q"+name+"\\E(\\W|$).*")){
23658	4.901395948434738e-03,
1923	StackTraceElement[]
15827	TestDataSequenceC
20258	Eg
11403	this.labelFile
3665	contents=fileNameToContentsMap.get(fileName);
6635	getrightboundary
21826	Place
16237	Learning,
11312	define
107	'false',
13328	JLabel(tc.transformer.toString()));
9436	CommandLineProcessor[]{gui,base,save,signal,train,trainTest});
408	getSplitter()
20617	Learner.
9184	(int)(dl
11123	testParams.testData,
19799	possibleclasslabels
6365	fn,AttributeSet
3961	JFileChooser
5964	numstates
21175	currentDepth=depth;
1858	given");
9219	(int)(dr
22388	JList(array);
8881	H.
2885	getname
17865	run/reload
12910	getSerializableContent(){
10875	Color.blue);
12094	Learning.
24034	factorial(int
23914	(a++)
14346	gettokenarray
16318	if(!pos_t.hasFeature(f)){
5790	labels[pos]
21324	HREF=\"http://minorthird.sourceforge.net/tutorials/TrainTestClassifier%20Tutorial.htm\">TrainTestClassifier
12986	jtable.addMouseListener(new
3773	i.remove();
9055	A:
9589	trainfraction
13071	"-config
22242	matcher=pattern.matcher(span.getDocumentContents());
12777	EmptyLabels
101	has
10121	highest-ranking
8339	Wraps
14182	UIMain.
4012	component
19927	chiscore
17995	simpleclassifierui
5293	//Span
9633	beginTag=baseTag+"Begin";
12080	friday
18149	A.
15879	//wwc:
3457	had
10488	totalneg
18761	"+subClass+":
17023	documentsize
3342	datasetclassifierteacher
21575	readOnlyButton=
9155	gen.raw()
22339	javax.swing.JTextArea;
5463	parent,TextBase
13483	0.001;
9017	B:
22256	input=Collections.singleton(span).iterator();
16709	laffter="bwa
13320	Explanation.Node("classification
17847	-splitter
5032	SimpleAttributeSet
13006	processed
1715	assumptions
22050	eval(TextLabels)
4720	AM
24086	C7
9222	f4)/
12340	sentenceEnd,
1414	bsh.Interpreter
11461	tester
13586	it=correct.iterator();it.hasNext();)
17477	setsubsamplefraction
9207	f4),
24082	C3
18994	if(theBox.getSelectedIndex()>0){
16267	excount;//example
771	At
24084	C5
20094	As
20604	compressdataset
557	Explanation(explain(instance));
9293	reflections
17107	"+ex.toString());
16466	tb.documentSpan(docID);
7233	annotationexample
16210	Balanced
6036	displayedTypeBox.setSelectedItem(displayType);
9883	GenericCollinsLearner.
20596	labels.addToType(span,annotationType);
2645	JButton(new
4950	Evaluation",
22617	fileJ=textFiles[j];
14112	setorientation
24078	C0
3142	An
2958	x2=0;
24080	C1
19567	toDetails()
11098	(testParams.showData)
23425	KnnLearner(10),0.0,0.10));
1247	directory,
8198	ExtractionFE
21263	locate
4825	freqanal
89	Learners
9047	C.
23548	sites
7903	testSpanTypeTokenizer()
5665	dstname
9792	iseed2;
19956	CV
16909	y<ny;
8119	Math.exp(ProbTauGivenSigmaX(candidate,sig,vlow,vup,xr,xp,wr,wp,vbeta)
9725	ACM.</CITE>
13967	AbstractTableModel{
11798	directory.
5473	versa).
9544	JTextArea(o.toString()));
7397	checkreadonly
2839	viewed
22638	directory:
2808	tracks
2135	C]
5592	***");
20207	SpanResult(extend("doc"),fe,docSpan);
14096	hasfocus
5483	parent:0
5241	FilterTokenizer
5121	propset
21001	never
20372	if(action.equalsIgnoreCase("use")){
15338	edu.cmu.minorthird.classify.multi.MultiDatasetClassifierTeacher;
7074	TestClassifier
8043	information.");
12587	closeparenindex
6634	getleftboundary
9905	SequenceUtils.MultiClassClassifier(schema,innerLearner);
16701	-laff
2175	there
2966	x2=1;
16247	D.
621	viewer
17065	fraction=0.7;
1070	DATADIR_PROP
15682	Basically,
13879	govern
11894	ARMENIA
13169	filtering
1	package
19601	M.
11455	Tester.logLoss(((BinaryClassifier)c),dataset));
22125	if(levelType.equals("split"))
24376	i=0;i<matchingParentSpan.size();i++)
23341	re('^Acquires?')
15645	Mutual
14899	calculation
5650	childname
18406	MistakeCountingOnlineLearner((OnlineClassifierLearner)innerLearner.copy(),reportMistakes);
4948	trainCds[k];
9852	documentString
14706	predicted_name:1
13473	minimizes
19599	Li
23067	EditLabels
23743	2.952327990396041E38,
22700	v.extend4SGM(
18581	N;
14781	extractornamematcher
3723	filenametocontentsmap
9716	Phys.
16234	N.
22819	optionally,
4617	Color
17587	vWgt[i]/scale;
10460	bestofnrandomtreesplitter
602	jcomponent
9545	pointer
18597	NB
15685	compensate
15376	getUseConfidences(){
4733	heuristic
7995	teardown
21931	N]
17162	k=0;k<folds;k++){
12285	hi)
3183	featureIterator()
19165	x=10;
18455	annotation-learning
18174	if(!((MultinomialClassifier)mc).isPresent(ex.getLabel())){
2580	serialVersionUID=20081125L;
8909	@version
5419	NO
9722	P.
10663	dummy2=
10442	randomtreelearner
22371	String[]{"William",
18799	PropertyEditor
6926	unless
21267	if(s!=null){
19783	weightOfPrediction-weightOfConstrainedPrediction
21970	seq=i.next();
13465	j){
22373	"Joshua",
2551	null_class_name
22279	hierarchy
17471	testit
9556	List<T>
20354	str.replaceAll("[A-Z]+","X+").replaceAll("[a-z]+","x+").replaceAll(
19897	totalNeg
20434	getcount
20052	annotatorLoader=null;
16625	clp.processArguments(fileOptions);
1282	(TextLabels)obj;
6164	System.out.println("TBV:
11474	CharAnnotation
12081	star
2388	mkdir
5426	No
14937	On
12618	views.
16916	maximal
5449	textBase=newTextBase;
22548	CrossValSplitter<T>(random,subpops.size());
14826	calculating
10872	cursorColor
17553	"N",new
16243	I.
2596	JScrollPane
8650	regexp,
22397	viewertest
18071	Dieter
17197	IllegalStateException("request
1712	type
10821	"+content);
20024	result.tokens()
14335	b.loadDocument("arg_"+i,args[i]);
11865	his
2096	out.print(prop);
3378	callmain
1761	ID
4776	array=tokenHash.get(token);
5987	guessBox;
12119	biomedical
16634	'setX'.
1039	"testData/";
2180	(curLabel.end>compLabel.end))
21678	editedDoc.highlight(span,HiliteColors.yellow);
21225	if(source!=null){
20873	type.saveAs=this.saveAs;
1417	interpreter.set("dataDir",
6380	j=0;j<spanDocs.length;j++){
11880	IN
22584	annotate(String
5115	textpane
13810	highlight_color
19441	charindexpropersubspan
6797	AddSelection
19518	result.add(ExampleSchema.NEG_CLASS_NAME,-score);
14332	printing
11158	restore(File
11761	IS
4170	top.add(newTypeField,gbc);
23311	scrolling
17871	command."
8090	"+vlow[0]+"<"+tau+"<"+vup[0]+"
2809	documentlist
11323	typestring
17054	Id
13826	ManyVsRestLearner
1709	If
23821	1.974506857221075E182,
23192	getMainComponent(){
22984	localh
14807	log.setLevel(Level.DEBUG);
7471	log.debug("y="+y+"
12093	Graphical
2129	In
18147	K.
844	i.e.,
22983	localf
9519	Called
7084	save,signal,test});
14841	SVMLearner(),SampleDatasets.toyTrain(),
4704	instancecomponent
10156	Is
1288	object:
1794	It
11866	IBF
10933	learner.completeTraining();
13375	exampleSize=20;
9367	invertIteration(Iterator<Example>
15874	iitb.Model.FeatureGenImpl
14385	"pos";
1697	object.
1035	class...
794	compute
183	object,
3573	in.defaultReadObject();
20184	Modify
18893	url.dll,FileProtocolHandler
21469	G.E.P.
16561	CommandLineProcessor,Saveable{
15070	maxf1
22466	multiSpanProp=null;
21725	exportguessspans
20740	setpmspos
6049	guessBox,
20584	g.setSubsequence(lo,lo+len,instance);
23385	agreement
22515	j=instance.featureIterator();j.hasNext();)
5318	ArrayList<TextBaseMapper>();
23177	errorArea.setFont(new
17699	modify
13345	Reranking
5417	ID.
3012	MyControls());
14248	testLabels(){
5926	batchsegmenterlearner
9710	subroutine
20642	"+data.size()
13156	Has
19005	Object[]{textField.getText()});
1206	stem
13160	ID:
6586	Overrides
13166	java.util.SortedMap;
8102	step
10120	numLabel;
909	s_t,
6726	Document"));
19383	TextToken's
780	W.
17497	gbc.gridx=0;
8359	crAnn.annotate(textLabels);
9191	W)
11360	Logger.getLogger(SimpleTextLoader.class);
3406	*<p>To
23235	doMainRunning=true;
16172	UnionIterator<Feature>(history.iterator(),instance.featureIterator());
18834	value=reader.invoke(o,new
22918	(example.getWeight(ff)*pos_t.featureScore(ff)*exampleSize<1.0)){
18135	negativebinomial
240	completetraining
6873	nextCursor;
12205	SHORT_FORM_TYPE);
19452	super(base,viewLabels,editLabels,statusMsg);
2728	loadSpanHook(){
17494	subViewer.setSuperView(this);
18241	convergence
4416	addwindowlistener
6481	setfixedcellheight
8000	texttoken
11775	US
9130	f(k4,
1939	To
11181	modifications
1273	!f.isDirectory())
10989	UI
23973	Ti
9062	V,
17181	hsi=(HasSubpopulationId)item;
6150	DecimalFormat("##0.000");
3389	objects,
4707	columnnames
1059	objects.
11497	closedTypes(){
4174	gbc.gridx=1;
7138	featurereweighter
19356	Layout
4798	isEmail(Span
8230	"token.charTypePattern.Aa+"
10171	this.labels[i].bestClassName().equals(
7172	"Scheme
20851	if(typeString.equalsIgnoreCase("multi")){
17435	random,int
4039	seteditable
1507	monotonictextlabels
18720	if(file.exists())
9131	f(k1,
16575	arg=arg.substring(2);
15648	Y,
7682	monotonicsubtextlabels
7008	toggles
2831	messages
7303	statusMsg,MutableTextLabels
16245	Y.
23145	gnu
20862	this.crossDim=type.crossDim;
17334	learner.setDocumentPool(
23906	(k<0)
1100	log.info("No
12686	We
12427	sIndex--)
13910	depending
14244	posTest=SampleDatasets.posTest;
23844	2.690472707318049E230,
21310	signal=new
15698	total(){return
9128	f(k2,
10642	data");
22760	userLabelProp;
17406	stat=stats[i];
16982	java.text.DecimalFormat("####.###");
12258	itr;
21504	setState(double
8964	f(int
9058	X,
20938	loadFromFilename=null;
20113	instance.addBinary(f);
16461	BinaryTextClassifier(OnlineClassifierLearner
9243	X!
22814	System.out.println(new
19377	william's
3576	if(fileName.endsWith(".class")){
13836	=(ManyVsRestLearner)(this.clone());
18462	tokPropFeats;
21559	(h.score(exi)
5251	down
22214	defined");
7438	tests.
23528	c=teacher.train(learner);
481	finalLearner.batchTrain(stackedData);
9063	W;
6626	rightcontextchars
3643	byte[]
17155	prof1=req2ProfileMap.get(s1);
21029	split.";
13488	w=w+0.001){
12365	currSentence.indexOf(')',openParenIndex))
17398	given!");
4799	test,MutableTextLabels
7727	sum=0,cov=0,count=0;
6981	exporttype
16287	voted){
19361	Dimension(200,200));
18151	S.
8393	312.0
7867	testRegexTokenizer()
9212	R4
8649	(matcher.find())
808	subtracting,
9157	R2
15427	ViewerFrame("Dataset
9204	R3
380	calibrate
2024	type=i.next();
11490	newSpan=span.charIndexSubSpan(lo,lo+ann.getLength());
20795	other(String
15921	w_t[classIndex].increment(feature,crfWs[fIndex]);
22733	evaluate(learner,trainData,trainTestSplitter);
3749	forname
22126	(e.g.
4162	GridBagConstraints();
2910	controls=null;
16799	LeaveOneOutDictVersion
8876	library.
15340	TrainMultiClassifier
584	w.setSuperView(this);
8622	R.
9168	R1
8788	file...");
11902	YEREVAN
11739	Gum
6606	charIndex){
4046	getselectedfile
10769	loader.load(dir);
22595	this.dir=dir;
19454	((SpanLabeler)viewerTracker).addViewer(viewer);
18997	writer.invoke(o,new
17457	testIt.add(cvs.getTest(k));
2291	filereader
8475	alternateLabels,startIndex,endIndex);
8796	carvalho
21467	Box-Muller
866	wrongXj
1871	getNewException(e,"
2595	editorPane;
11625	if(tot==0||Double.isNaN(tot)){
14460	over-rides
7044	annotations.
12198	doc.getDocumentContents().substring(shortForm.lo,shortForm.hi)+"'");
10970	edu.cmu.minorthird.classify.algorithms.trees.DecisionTreeLearner;
22565	alone,
9061	U,
3282	train=p;
7580	edu.cmu.minorthird.text.learn.experiments.SubTextBase;
11773	TO
11815	this.getNumLabels(labels,
9031	U.
9133	f(k5,
4835	updatehscore
12234	"";
17857	"LabelViewer
4426	junit.framework.TestCase;
16775	getparametertypes
12627	So
2371	getspanproperties
11792	fail("testLoadDataFile
4805	spanType,Span
14849	testSerialization(){
22869	if(mode==2){
13991	Explanation;
173	Teachers
13539	(gain>maxGain){
9452	this.trainTest=trainTest;
17838	"",
10771	annotations:
14094	setdefaultrenderer
15523	predictedClassName){
23473	Feature("site"+site+".page"+page));
23471	page=1;page<=numPagesPerSite;page++){
100	learner
22696	(RealRelationalDataset)s.getTest(k);
2008	FileOutputStream(
2195	sorted
21564	-1.0);
16407	regret
9037	T.
18103	(probability
17114	in.getLineNumber()+":
20167	SortedSet<T>
5635	retokenize
8999	immediate
15293	"-saveAs","tmp.ann",
7367	init(base,labels,new
23920	k==n-1<tt>:
5416	ordered
162	learned
14197	"textLearnerParameters"
13923	bypass
20994	Simple,
822	actual
14715	R]
23155	unnormalizedtfidfweight
2012	Save
16797	edu.cmu.minorthird.classify.transform.InstanceTransform;
15332	testui
22448	ViewerFrame("rr
21270	ByteArrayInputStream(buf);
6835	ocdEditor.saveAnn(file,filter.getDescription());
3214	william")
18901	count=0;count<browsers.length&&browser==null;count++)
10919	tb.loadDocument(docID,text);
11752	"DocPerLineTestData.base@line:6",
23854	8.047926057471989E251,
20503	committee;
3399	<i>segment</i>,
11991	log.debug(l.next().asString());
767	BeamSearcher(c,historySize,schema).bestLabelSequence(sequence);
618	gui
1551	site,
12024	gum
5069	IdViewer
20678	exNeg=0;
2178	overlap=true;
2469	list.add(ex);
23588	PoissonClassifier();
13249	addLink(Link
23128	this.featureFreq=featureFreq;
17109	line,String
19476	TextBaseEditorPlusLabeler(base,labels,labels,statusMsg);
18308	Numerical
5428	chopping
22929	deltaLoss=lossF.featureScore(ff)-(beta2*lossH.featureScore(ff));
7086	IllegalArgumentException("-loadFrom
22307	getpatt
20008	result.trace()
8069	vlow,
6273	currentFont;
14685	fromFile=new
573	mainPanel.setLayout(new
17641	][
22240	pattern.matcher(
16311	example2){
3461	newInstance,ClassLabel
13812	selectedtype
10207	BestOfN
18900	browser=null;
7376	them.
1653	c.innerClassifier[i]
7851	TextBaseTests
14736	NameMatcher.postLabels.instanceIterator(spanType),
12930	them,
20857	\n
18719	File(filename);
8548	newannotator
15655	a,
5312	base.");
6816	IOUtil.saveSerialized((Serializable)textLearner,file);
18119	a.
723	getHistorySizeHelp()
5722	newparent
22031	if(program==null)
2334	switch
23599	ngp=index.getCounts(f,"POS");
8905	Transactions
11347	oldsystemout
7116	untested!!!
22923	lossF.increment(ff,Math.random());
4873	stemmer
14833	refs=new
19904	a;
10705	a=
22916	lossF.increment(ff,1.0);
22980	a1
14768	delete
5615	MapEntry(String
5464	child){
9489	expt.doExperiment();
18771	BoxComponent(o);
1612	(Exception
24087	-5.95238095238095238e-04;
3386	just
23330	"defDict
21919	historySize=1;
5404	TextBaseMapper(parentLabels.getTextBase(),newTextBase);
12278	Holds
12966	fillerGBC(){
2516	exA=instA;
13693	list.add(it.next());
18117	Poisson(seed,a)
3427	subPopId
6091	if(displayType==null||NULL_DISPLAY_TYPE.equals(displayType)){
23081	-edit");
21343	a.next();
8886	discrete
9029	gen.raw();
18002	cv_folds
5015	context){
17493	this.subViewer=subViewer;
22294	evaluates
21328	FixedTestSetSplitter<Example>(testData.iterator());
19162	isValid(Class<?>
96	setInstancePool(Iterator<Instance>
23277	scrolling:
421	this.schema
23695	42.33561646075348503,
6518	Abstract
10457	min_value
5517	parentDocMap=parentToChildMap.get(parentDocId);
7807	TransformedVanillaViewer()
21325	if(signal.spanPropString!=null)
9738	iseed2
4326	if("-readOnly".equals(args[argp])){
14342	documentgroupmap
9735	iseed1
7340	OnlineLearnerEditor(textBase,labels,editLabels,rk,statusMsg,false,
19933	preserve
6100	onlyEditedSpans=false;
5826	setSegment(int
3346	jointcommandlineprocessor
19761	subsequence");
12344	log.debug("finding
3150	previousLabels
8084	tau>vup[0]
19598	Yi
9185	gen.raw())
16054	j=0;j<g.getSequenceLength();j++){
12240	(inFile));
6287	spanMarkups=new
23978	i=0
21340	a.hasNext()||b.hasNext();
601	swing
18685	typeSelector.
4128	saveButton=null;
3879	StringBuilder
7603	vx.setContent(ann);
7694	showextractor
15080	maketoy3classdata
12645	parallelPane.setTabPlacement(SwingConstants.LEFT);
1118	LABELDIR_PROP,
9059	Y;
15557	s=(StackedGraphicalClassifier)o;
3889	level,TrieNode
7466	i=x.featureIterator();i.hasNext();){
5591	child+"
17792	s=0;
3479	IllegalArgumentException("grouping
9697	java.util.Date;
550	buf.append(explainTransformedInstance(schema,instance,innerClassifiers));
22641	annotatorName){
205	minorthird
14719	TextLabelsLoader()).saveTypesAsOps(postLabels,saveAs);
20859	option");
5084	[@stime]
21502	standardDeviation*y*z;
14889	log.info("using
4090	.info("loading
14694	"+fromFile+
882	sequenceErrors++;
2687	if(s!=null)
8048	[]
2556	javax.swing.JList;
15649	[a
15652	[c
20512	committees
4291	frame.pack();
9835	defseed1
20403	Filter{
2640	this.spanPainter=spanPainter;
6578	contextSpan.getTextToken(contextSpan.size()-1).getHi()-
9836	defseed2
23472	MutableInstance("page"+page+".html",subpop);
22903	negFactor=numGivenNeg.featureScore(ff);
11505	annotatestring
12173	'\t';
16003	List<CandidateSegmentGroup>
10355	log.debug("split
18682	typeSelectors
9346	aggregator");
22757	TextLabelsAnnotatorTeacher
20165	something.
4551	cspace
16657	--help
8099	acceptance
15537	p=m[d].classification(ex);
22302	ignorecase
1607	];
2686	s=(Span)documentList.getSelectedValue();
18693	configFilename,Class<?>
17376	trainData,Dataset
2133	[A
1066	REPOSITORY_PROP
2991	sub-viewer
22297	keyword
19071	selection.setSelected(selected);
12469	(annotationMode)
22851	b,boolean
14154	if(base.showResult)
1275	beanShell
1955	document=i.next();
9844	getseed
5651	childtextbase
3702	if(m.find()){
14711	[L
13781	if(types==null)
22036	levelsToLabelsMap.clear();
14140	File(mixup.fileName));
2522	hashmap
2147	their
14747	lowrisknamelist
17653	//buf
11066	testParams.testDataFilename;
381	predictions
7442	log=Logger.getLogger(BBMira.class);
22872	//bug
21479	variance;
6364	fp,AttributeSet
23747	5.23022617466601E44,
17301	TextBaseEditor(TextBase
1445	sampleextractionproblem
12983	monitorSelections(jlist,IDENTITY_TRANSFORM);
129	query,
11375	fileName.lastIndexOf('.'));
21548	h,
13820	Generalizes
7192	query.
22805	buf.append("\n"+f+":");
22985	ff
14542	nameMatch=dictLookup(lowRiskNameList,tokenWindow);
13101	consumeArguments(String[]
18042	fi
20474	fr
22516	ft
17636	fo
10818	super.setSubViews(zoomedOut,zoomedIn);
6503	fn
5176	entry=textBases.get(name);
6502	fp
19206	TypeSelector(new
3860	id.
22541	id,
12939	senders);
4800	i=
9783	RandomElement(Date
18072	(1974):
11045	"Multi
23077	HREF=\"http://minorthird.sourceforge.net/tutorials/EditLabels%20Tutorial.htm\">EditLabels
3764	i;
9300	gy
18000	gz
20093	built.
1270	File(scriptDir),
9299	gx
4922	v.extend(
21361	getLength()
3200	j)
11869	he
20763	Generalized
9472	trainTest.labels);
20907	Cannot
16710	ha
21454	---------
15599	i0
3311	System.out.println("Trying
5042	note:
13099	i.
1099	"+in);
21975	Span)){
13530	Index
23152	tfidfweighter
5812	i,
23281	<code>x.doMain().</code>
19311	setselected
16487	if(span.size()>2){
15329	(UIMain)mainClass.newInstance();
5808	i)
16992	"<=="
11837	235A",
19244	rootclass
12796	id)
5678	mechanisms
21503	variance.
1774	go
6515	i1
12060	ibf
19727	dt
3931	i=trie.lookup(base.documentSpan("span"));i.hasNext();){
11210	output"));
19569	"+wset+"]";
12057	dublin
20265	#tokens_2=1
1799	indicate
570	JPanel
16580	'"+arg+"'
254	edu.cmu.minorthird.classify.Instance;
11325	resulttosave
19486	editandlabel
21134	"+task+"
3530	de
7747	this.add(x).
6418	decimalformat
3188	f)
7344	setLabels(String[]
21165	sec");
19123	//selector.name
15015	rvalues[2]=
4826	df
22676	edu.cmu.minorthird.classify.relational.StackedBatchClassifierLearner;
16347	updateVotedHyperplane(int
9305	dk
7130	f,
6297	loop
22787	f.
9090	dl
4559	f1
184	do
11840	PH.D.",
4552	f3
2929	JSplitPane
4554	f2
7857	super("TokenizerTest");
5936	ds
9132	f5
9093	dr
9129	f4
726	look
23950	safe
22685	log.getEffectiveLevel().isGreaterOrEqual(
556	ex
2015	readable
17736	Estimate("Dirichlet-Poisson
11343	ev
20558	g=
3002	senders){
21327	CommandLineUtil.toDataset(trainTest.labels,train.fe,signal.spanProp,
18600	System.out.println(nb);
18144	edu.cmu.minorthird.classify.BasicFeatureIndex;
14755	fa
11322	newex
10309	allFeatures){
12247	str.substring(j,str.length()).trim();
3366	fe
19838	frequency!");
6260	SortedSet<SpanMarkup>[]
10461	fc
5909	g)
11562	eg
6871	MoveOnlineDocumentCursor
16557	el
13855	manyvsrestlearner
984	hyperplane
2471	Split
16974	g,
18354	em
8304	eq
15445	HashMap<String,ClassLabel>();
23278	closePipes(){
21099	graphicContext=new
78	semi-supervised
660	innerclassifiers
7012	cb
13480	later.)
5989	highlightAction;
3307	d=
3805	k);
6045	highlightAction=
5355	docs
7129	result.addNumeric(
8772	bWriter.close();
11681	bw
15658	d;
15372	getUseLogisticOnConfidences(){
132	by
15189	ig1
15190	ig2
563	long
1650	top.add(classifier);
17693	tauAcceptRate[i]
16954	bp
21299	couldn't
22712	d,
22758	AnnotatorTeacher{
7041	mygbc
12298	//public
4931	d)
18040	bi
17182	k=partitionContaining(partition,reqId);
18390	makes.
3528	bc
21089	traintestparameters
12858	SET_CONTENT=1;
22487	tokenProp="_inside";
71	be
20774	getLearner(){
14091	dc
526	predicts
11399	isLabelFile()
14758	templates
11140	testParams.resultToShow;
15875	MTFeatureGenImpl(String
6399	newFont=currentFont.getFamily()+"-plain-"+(currentSize+delta);
15653	d]
11111	e;
20181	i=set.iterator();i.hasNext();){
23818	1.4438595832024942E176,
21506	standardDeviation!=this.standardDeviation)
646	cv
2878	mpcolor
15704	ct
22164	filesToLoad=statement.getFilesToLoad();
8797	cs
19171	name=s;
4414	getcontentpane
15067	e1
1237	iff
14789	e2
23911	n-k+1;
11886	played
20156	extension;
3432	maximum
3400	<i>sliding
1106	e)
16501	addUnlabeled(Instance
5409	docNum=0;
2796	jslider
9279	ch
12195	doc:
19382	Comparable<Span>{
5010	doc;
22059	setProgram(MixupProgram
22579	nameOfFileToView=null;
19059	log.debug("add
6083	collect
5242	tokenize
3529	cd
10210	Alexander
11051	GUIParams
17415	b;
5377	does
19747	sequence,ClassLabel[]
12476	"TP");
19348	laidOut=false;
8079	b2
7657	propValues.add(labels.getProperty(s,signal.spanProp));
10342	bestFeature=(Feature)result[0];
21508	this.variance
12528	schwartz
753	statistics
15656	b,
24013	b0
8077	b1
21587	MoveSpanCursor("Prev",-1));
15793	maxItersHelp
6964	id;
7101	SmartVanillaViewer(result));
7749	b)
11609	if(d==null)
20316	TokenSetResult(extend("hasProp_"+property+"_"+targetValueTag),
16966	BackPointer(int
15650	b]
15089	crap
14187	"baseParameters","onlineBaseParameters","saveParameters",
7618	CrossValSplitter<Span>(num_partitions);
18469	inputLabel,String
15598	idx
10313	c;
14809	testWrapper(){
14732	.closureIterator(spanType));
11555	edu.cmu.minorthird.util.MathUtil;
3908	ids
815	at
24322	c5
5414	curDocId=currInstance.getDocumentId();
678	as
2383	prediction
6995	saveannbutton
24028	i--;
22660	nameoffiletoview
19709	c3
18333	"+loglik);
9853	referenced
11680	aw
2644	saveButton=new
24323	c7
4749	PFList.add(tokenSpan.asString().toLowerCase());
14820	expect=
14779	al
801	c.
17640	K-1
17348	(answeredQuery!=null)
15657	c,
15063	c1
6611	if(
15072	c2
1252	("sample1.train".equals(script))
24321	c0
8	an
12460	i--)
3835	Lookup
10941	i=candidateLooper;i.hasNext();){
22593	LabeledDirectory(File
8321	aa
3527	ab
18696	this.inLineClasses.addAll(Arrays.asList(inLineClasses));
15264	c)
6728	-------------
7048	annotatedCopy(TextLabels
5488	child2.
9146	p6
14190	"loadAnnotatorParameters","splitterParameters",
9144	p5
9142	p4
1401	labelDir
9139	p3
3684	loader");
9137	p2
145	no
8105	p1
9020	p0
6996	saveannotator
5079	p=
8747	readFile(String
19998	Generally,
16897	ny
4657	p;
17424	k-1
12847	sendSignal()
7026	forgotten
10728	edu.cmu.minorthird.text.Document;
19132	if(row==0){
16842	BinaryBatchVersion(OnlineBinaryClassifierLearner
21977	span=(Span)ex.getSource();
21651	ExportGuessSpans
15	of
11564	Statistical
23010	Extraction",
37	on
17946	SpanFE.from(s,buf).left().subspan(-2,2).emit();
23299	nyou
8576	q,
9744	iseed1=DEFSEED1;
8578	q)
23563	Pr(-|instance)
831	label");
20661	floo=e.featureIterator();floo.hasNext();){
8566	emissions
2325	op
11603	j=set.iterator();num++<k&&j.hasNext();){
77	or
13118	done
327	iteratoroverunlabeled
8115	pi(tau)="+rw.dnorm(tau,
10582	isValid(e.getLabel());
7782	statistic.
11271	System.out.println("Use
9053	q;
19329	TrackedTextBaseComponent
8223	"token.charTypePattern.Aaaa"
8714	line.substring(i,
9237	f(k),
4827	pf
7583	TestExtractor
23591	numPos+=ex.getWeight(f);
18139	pg
17755	K+1
11759	//WARNING:
21985	preprocess
19674	pa
17277	oldprofforrequest
3804	getTrain(int
745	pc
18609	java.beans.PropertyDescriptor;
12045	pm
20510	"+data.getExample(k));
17548	pn
3912	ResultLooper
9102	r1
19591	ROMMA
12048	ph
21521	pi
1193	small
7791	accumulate
24076	r,
20563	span=document.subSpan(lo,len);
3867	TreeMap<String,TrieNode>();
18421	getNumberOfMistakes()
16760	inputError(LineNumberReader
2355	lo
22111	newTextBase=tbManager.retokenize(tokenizer,currentLevel,newLevelName);
20708	mudelta=new
6337	errors?
13678	innerLearner=new
13339	getnumdim
9116	ll
18491	e=Tester.evaluate(learner,sequenceDataset,splitter);
9118	lr
9990	errors;
13822	OneVsAll
8627	LineProcessingUtil
17623	estimateNaiveBayesWeightedMean(
5147	Mercer
22989	lu
15707	Long.parseLong(args[2]),
13318	top.add(classEx);
18079	n;
19948	strata.add(j.next());
2496	map1.put(key+"."+j,ranking1);
6693	viewLabels,TextBaseViewer
9594	subpopsorter
3126	mc
11113	md
13047	errors.
567	o)
7693	gettestextractorhelp
8148	eairoldi
23147	tobjectdoublehashmap
4877	'"+args[i]+"'
6952	k){
16187	knn;
5124	java.util.SortedSet;
16464	text)
23267	closePipes();
18369	mi
13857	javax.swing.ButtonGroup;
11479	providedAnnotation=null;
14754	o2
6504	mp
14753	o1
6781	text.
6246	ListCellRenderer
3302	-spanProp
21988	extractionreductionparams
4207	mixupFile;
8156	mu
10561	newValidClassNames[i]=validClassNames[i];
13684	innerLearner.get(i).setSchema(schemas[i]);
12997	o;
8979	my
10546	String[]{POS_CLASS_NAME,NEG_CLASS_NAME});
17735	tauSigma[i]
1949	Set<String>
8195	tasks.
11694	functionality.
18140	nb
2099	specified
4774	i=tokenHash.keySet().iterator();i.hasNext();){
9311	template.
22746	errors/d.size();
22707	DatasetClassifierTeacher(trainData).train(learner);
17292	item
13610	goodness'
13217	edu.cmu.minorthird.classify.SGMFeatureFactory;
19166	d=0.33;
11038	p)
21079	gettestsetfilename
13464	i,int
13136	specifies
18195	examples="+numberOfExamples);
15158	maxIndex=Math.min(featValues.size(),top);
5847	iter
633	nj
10064	p,
23944	nk
20673	c.setPriorPos(numPos,numPos+numNeg,0.5,1.0);
23984	2(2x
18612	javax.swing.JDialog;
13168	edu.cmu.minorthird.text.SpanFinder;
18067	Compound
9474	FixedTestSetSplitter<Span>(
14797	wrappers
12354	"),
22873	numGivenPos.increment(f,1.0);
9375	invertIterationSGM(splitter.getTrain(k));
9784	d.getTime()/Integer.MAX_VALUE;
8929	k1,
12391	"))
13089	*</pre></code>
9075	m,
9159	m)
4059	edu.cmu.minorthird.text.TextBaseLoader;
8731	ind
16572	while(pos<args.length){
18716	configureWith(String
982	");
9158	[k2,
9244	m!
11693	Begin
9103	k1;
8949	m;
17160	partition=new
654	int
10704	v.setContent(this);
15186	ins
21523	inf
19375	kevin's
17781	m2
21143	this(task,step,-1);
14056	i=0;i<index.size(f);i++){
7258	from;
24302	kk
8927	k2,
10302	RandomTreeLearner(){
3568	readObject(java.io.ObjectInputStream
19720	li
1825	StringTokenizer
20836	crossDim=false;
8050	n,
2382	n'
22673	ld
9821	n)
12579	ioe
3212	Feature("token
3213	lc
9169	[k1,
5016	EmptyLabels(),span,context);
9105	k2;
15066	svmtest
7275	from'
9998	(==)
4828	hs
19687	hp
11468	loss
21623	exportButton.getAction());
13878	MyViewer());
11934	Yugoslavia
19743	this.possibleClassLabels
10041	accumpos
10785	System.out.println(span.toString().replace('\n',
15353	edu.cmu.minorthird.classify.BatchClassifierLearner;
3696	msgPat=Pattern.compile("\\(wrong
19413	words,
14409	<output_file>");
6709	if(editLabels.hasType(s,spanTypes[x]))
17935	SpanFE.SpanResult
16410	blum
12477	truePositives++;
1474	id
17462	k)
99	if
11730	"speaker",
23488	i=0;i<3;i++){
10062	ie
13545	cur_W_Neg;
5035	j=
16944	BackPointer(lastT,t,lastY);
13083	<p>For
10547	validClassNames;
11645	e,double
13590	j;
23891	k"
23705	k!
21955	"':
14497	o1,String
21656	//editLabels.setProperty(documentSpan.documentSpan(),
11241	System.setOut(new
3600	.mixup
3245	iq
9070	k4
148	is
9086	k5
130	it
6591	off,String
20497	"+ithBag.size()+"
2665	in.
17776	i<wgt.length;
15337	k8
11884	MADRID
23485	Set[3];
15092	dataoutputstream
9508	getsplitterparameters
6477	ii
13571	ij
3569	in)
8965	k,
24108	k.
18368	il
21653	if(exportType==null){
2994	canReceive(Object
72	in
10043	k0
985	io
9077	k1
9076	k2
20416	words'
1989	in=
9765	l)
4696	blue
5492	childDocId,
20680	vPos[exPos++]=e.getWeight(f);
19082	"+name+"\n
20939	ClassifyCommandLineUtil.BaseParams
15624	TextBaseLoader(TextBaseLoader.DOC_PER_LINE);
6079	JScrollPane(documentList),gbc);
9811	iz
18146	in:
9054	k;
8443	k=
6624	begincontextspanindocument
22527	activefeatureset
14699	MixupProgram(
23464	sites:
11702	etc)
7566	z1
3818	map=null;
1048	java.util.Properties;
8166	xr
8167	xp
15417	stackedDataset=dataset;
4600	etc.
23779	1.1978571669969892E100,
18319	increasing.
21374	string;
14612	temp=((String)array[i]).trim();
13274	addLink(new
12650	view.setSuperView(this,title);
15468	numNewFeatures=0;
5832	y;
10438	splitters
4440	Test
7569	wx
7081	test=p;
10740	validDocumentSpans=new
1843	span=base.documentSpan(docId);
18250	dataset.iterator()
20037	z'
11977	"B-MISC"));
13061	y,
11665	yang
18435	selected.
13068	y.
2691	how
6905	gbc.gridx=col;
22213	'"+startType+"'
2782	selected,
3094	y1
17006	mainPanel.add(new
3096	y2
8169	wp
17909	k=subprocessor[i].consumeArguments(args,pos);
14302	documentGroupId){
1932	"+in.getLineNumber()+
8168	wr
1459	scriptdir
6282	rendered
7236	gettaggedlabels
15317	assertEquals(0.5,e.spanF1(),0.25);
21176	graphiccontext
5923	sunita
7714	x;
7695	vx
15805	newUseHighPrecisionArithmetic)
17506	TEXT_MESSAGE
13543	cur_W_Pos;
9595	subpopiterator
20125	'pipelines'.
10491	w_
15907	featureGen.train(trainData);
1181	load
7463	y=example.getLabel().numericLabel();
6921	eSpan=editedSpans.get(i);
6423	null_display_type
17031	y'
793	we
5260	IllegalArgumentException("There
10513	script=Globals.DATA_DIR+"seminar-subset";
5046	TokenViewer(TextLabels
12692	x,
3744	noclassdeffounderror
22011	HashMap<String,MonotonicTextLabels>();
21597	buttonsThatChangeStuff.add(exportButton);
5523	give
766	viterbi
13001	events
16577	arg=arg.substring(1);
8035	x)
17004	vs
15591	numnewfeatures
23391	vp
20468	punk
3095	x2
1020	beamsearcher
7789	x0
3093	x1
8197	featureWindowSize){
20152	String[partial.length+1];
13966	MyTableModel
3284	"<A
2105	looper=labels.getTextBase().documentSpanIterator();
9386	System.out.println("Aggregators:
10135	posProbability(){
17420	Splits
9498	getMainResult()
13788	typeBox.addActionListener(new
6278	currentFont=new
23294	vb
21716	statusMsg.display("to
6450	renderer
19258	addclass
3341	ui
10269	bestThreshold=0;
12712	matrix
21248	us
3436	sequenceLength)
389	BatchClassifierLearner[]{innerLearner},
20328	"+bag+"]";
13479	w0
19640	w2
156	up
19008	field
597	v;
13932	getTableCellRendererComponent(JTable
3318	ViewerFrame("SequenceDataset",
8608	hmm
11473	string,
24363	string)
3120	uc
3438	sequenceLength;
6939	editedSpans.add(eSpan);
17987	System.out.println("Usage:");
6369	colorByStatus=
7757	mean(){
12386	newCloseParenIndex);
10535	string.
18	to
12603	tn
17609	tm
6333	index,
12925	senders.add(this);
11167	ts
23364	interp.setProgram(guessProg);
12998	mouseadapter
6453	tr
20449	index1
6455	tp
17796	v)
3524	sequencelength
19745	searcher.bestLabelSequence(sequence);
4695	tf
24304	round
20036	v'
20388	ONLY
18440	index'
13866	inspection
16541	v,
12982	jlist){
10273	f=unusedFeatures.get(featureIndex);
24306	ti
21829	index)
17230	WebmasterSplitter<HasSubpopulationId>
3630	EncapsulatingAnnotatorLoader(boolean
8807	assertions
7004	tb
11009	DecisionTreeLearner.class,
10959	tc
23228	using!\n"
11563	"An
15497	if(PredictedRlt.get(ngbID)!=null){
4874	BoneheadStemmer();
12324	ss
11979	"I-LOC"));
15098	st
15082	setdoprobabilityestimates
587	innerPanel.setBorder(new
18906	Exception("Could
9012	u;
11489	lo=ann.getOffset();
11575	DatasetIndex
11813	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2912_1"));
14267	makelabels
4837	getspantype
20606	setcompressdataset
19666	hyp.featureIterator();
17949	</code></pre>
3522	sn
6459	sp
1313	so
11601	num=0;
22454	ViewerFrame("Results
18349	nigam
17891	delta++;
14946	"+e2.averagePrecision());
6457	sr
17421	disjoint
4968	SpanViewer
2682	this.viewLabels=newLabels;
7698	sd
568	sc
23193	start(){
20816	training.
23297	se
14844	training,
3611	classpath.
8453	labels.addToType(extractedSpan,sequenceAnnotator.getSpanType(),
21063	clslnr
17679	u,
16463	docNum
19205	t=
5563	index:
1219	classpath,
10260	Object[]{bestFeature,new
11576	index;
9290	tabulated
759	transitions
20613	sa
17624	mean=(sumX+prior*1.0/scale)/(sumWgt+1.0/scale);
15192	sb
22464	rr
23427	KnnLearner(10),0.20,0.10));
17473	rs
15741	basicfeatureindex
11202	rv
13179	spanFilter,SpanFeatureExtractor
8029	rw
13838	learner.innerLearner.clear();
21906	t;
22462	t1
20787	File(s);
17280	hsi
21039	refutils
18304	t.
5674	dstoffset
377	splitter;
6302	spanMarkups[i]=new
7395	rk
17231	splitter=
5145	retokenize}.
19069	selector.instanceMap.get(selector.classBox
2079	strings
9849	t)
21073	tosplitter
10466	truedata
22097	re
12553	t'
20724	wgtneg
3143	appears
9298	my_k
2930	splitPane=new
387	splitter)
11527	splitter,
18162	iteratorOverUnlabeled;
6957	s;
20562	if(len+lo<=document.size()){
22074	if(levelsToLabelsMap.get(levelName)==null)
15462	result.add(AugmentEx);
12364	((closeParenIndex
22912	if(mode==3){
199	implement
21785	inst.addBinary(new
9754	s2
3521	s1
21549	s,
11559	cosine
17741	lambdaSum
1678	java.io.FileOutputStream;
15247	provides
18300	(|f(t)|
4861	s)
12591	shorttokenizer
5295	srcEntry.getTextBase().documentSpan(srcDocId).charIndexSubSpan(srcOffset,
13111	Specifies
3748	replaceall
12755	if(signal.cross){
9301	px
17563	r;
9302	py
6474	nulllooper
20599	"[SegmentAnnotator
3624	provided
9459	signal.spanType!=null)
22103	newTextBase=null;
6566	this.span
21074	getclassifierfilename
12641	ev){
628	pp
9104	r2
17634	pr
15478	//this
9106	r4
1115	ps
9109	r5
15899	allocModel(SequenceDataset
12770	transformingmulticlassifier
4558	errorrate
3169	wrapped
18441	indexedviewer
16192	KnnClassifier(index,schema,k);
7112	showtestdetails
1938	applies
19429	getLoChar();
2721	subclass-dependent
11053	gui()
5263	First
5167	whether
3466	totalSize++;
3651	open
20692	N=vCnt.length;
14372	wrapper
9330	oper
10402	j=0
17312	.getSpanPainter(),statusMsg);
16418	margin
952	hyp
8875	WIN-RAND</A>
10398	j=1
13054	processor
1515	ignoring
4246	"+mixupFile.getName()));
22845	Map<Feature,List<ClassLabel>>
23185	t,boolean
931	delta
15744	iitb.CRF.CRF
10716	seqlearner
7914	textBase.getDocument("doc0").getTokens(),
17220	subpop1=((HasSubpopulationId)o1).getSubpopulationId();
16170	UnionIterator<Feature>(history.iterator(),instance.binaryFeatureIterator());
4694	truncate
22228	while(input.hasNext()){
21044	getlearnerinsequentialmode
3849	depth=0;
14461	predictions,
8154	generators
22538	Random());
12715	esym
15878	super(modelSpecs,numLabels,false);
10256	minValue=val;
10201	edu.cmu.minorthird.classify.algorithms.trees;
20308	TokenSetResult(extend("hasProp_"+property),fe,filteredSet);
18218	countsFeatureGivenClass[j],countsGivenClass[j]);
4100	labelsLoader.importOps(truthLabels,base,groundTruthLabelsFile);
20273	(SpanSetResult)doTrace();
16456	mycl
16374	winnow
5098	MarkupControls(labels);
23382	tumbleweed
19728	denom0
14257	makeLabels(String[]
11291	typeselector
17190	o,String
6555	javax.swing.text.DefaultStyledDocument;
8610	logp
5775	||
1859	if("closeAllTypes".equalsIgnoreCase(op)){
8609	logq
21331	CrossValidatedDataset(train.learner,d,trainTest.splitter);
24136	Math.log(f);
23134	.getSubpopulationId());
10874	StyleConstants.setBackground(cursorColor,
165	should
5224	doc.
18989	value-");
19060	"+validSubclasses);
5232	doc,
10481	newunusedfeatures
18614	javax.swing.JOptionPane;
8203	windowSize=5;
16811	this(LeaveOneOutDictTransformLearner.DEFAULT_PATTERN,innerLearner,distanceNames);
14288	Constructor
8002	doc2
8003	doc3
7999	doc0
8001	doc1
13750	ActionListener
6695	editLabels,JList
4198	statusMsg.display("no
6068	JLabel("H:"),gbc);
2215	sortedTags.add(y,new
14945	Precision2:
14281	SortedMap<String,String>
6554	javax.swing.text.BadLocationException;
5771	{}
10288	entropy(trueData.size(),falseData.size(),trueData.size(),falseData
21788	double[argv.length];
4205	"+saveFile.getName()+":
11201	event)
15451	DatasetClassifierTeacher(trainData).train(baseLearner);
14039	if(argument
10192	negweight
13869	MultiClassifiedDataset(MultiClassifier
7255	Zhenzhen
18363	tostal
4644	ExampleViewer(Example
6739	add(classifierButton,gbc);
17391	v.maxF1();
23892	k".
16168	numericFeatureIterator(){
15345	PredictedClassTransform(classifier);
3715	EncapsulatingAnnotatorLoader.class.getClassLoader().loadClass(className+".class");
3286	Tutorial</A></html>";
17637	MCMC
13469	map.get(ftr);
18153	Mitchell.
10791	wcohen
23561	log(
17919	invoked");
14678	File("NM_labels.env");
13273	data=(BasicDataset)SampleDatasets.sampleData("toy",false);
12972	re-map
14116	RunMixup
7861	org.apache.log4j.BasicConfigurator.configure();
24319	log2
15930	explain(Instance[]
15513	truevalues=new
18057	cbgb's
7333	this.ocdEditor=ocdEditor;
17144	"+testUsers);
11705	File(testCaseDir+"/DocPerLineTestData.base"));
15870	setFeatureIdentifier(feature.getID()*numStates+stateId,
8652	producing
19330	log;
3601	.class
9662	}catch(Mixup.ParseException
5823	getSegmentEnd(int
8335	edu.cmu.minorthird.classify.sequential.ConfidenceUtils;
10736	base,Iterator<Span>
596	};
8064	ProbTauGivenSigmaX
16507	sizeUnlabeled(){
1548	contain
20639	infoGain.transform(
5160	TextBaseEntry("root",rootBase,0,null));
6448	setlistdata
8845	k!)
21276	String(buf));
20594	if(type!=null){
3588	log=
15079	trainset
1017	numberofsequences
19068	selected=
11835	"Baker
18116	*seed,
13279	linksmap
14777	za
22277	push
21648	"+importType+
22947	if((ll.get(i)).isPositive())
10618	interactive
6806	.getClassifier()));
17750	tauSigma;
14287	RegexTokenizer());
3638	s=null;
21262	attempts
21644	editedDoc.highlight(guessSpan,HiliteColors.yellow);
19122	selector.setContent(o);
14357	trainList.add(t);
4689	gui's
642	finallearner
7213	"+i+"
19457	viewerTracker).addViewer(viewer);
20305	hasProp(String
8554	applyannotator
16611	"+iax);
5151	HashMap<String,TextBaseEntry>();
3649	redirectionProps.put(file.getName().substring(0,file.getName().length()-6),file.getName());
20644	NegativeBinomialClassifier
5311	refers
11664	nearest
9303	xx
10980	edu.cmu.minorthird.classify.transform.FrequencyBasedTransformLearner;
7517	z;
15342	d=d.annotateData();
7352	Text
12022	george
16020	if(maxWindowSize<0)
12843	canReceive(),
4636	main.addSubView("Subpopulation",new
2418	beginorend
23772	1.9826083154044396E87,
7585	ExtractorAnnotator
9291	applied
12251	entry.add(defnString);
20806	show){
20117	TokenSetResult.
13210	filteredfinder
5420	guarantee
11421	pushed
12949	obtained.
19719	yi
7013	docindex
4663	instanceComponent(Instance
17062	folds=3;
15203	FixedTestSetSplitter<T>
15887	features...
13941	monitorSelections(jtable,1);
7308	TextBaseViewer(base,viewLabels,statusMsg);
24310	arithmeticexception
11802	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2513_0"));
3268	CommandLineUtil.TrainClassifierParams();
2281	<"+type+"
3510	len<=maxWindowSize;
14881	stats2[0]=e2.errorRate();
20274	"[SpanSetResult:
23216	threads
15326	this.mainClass
19408	<b>Note:</b>
14164	TextLabelsLoader().saveDocsWithEmbeddedTypes(annotatedLabels,
13261	linksMap.get(from).put(type,(Set<String>)set.clone());
7309	createOnlineClassifierDocumentEditor(viewLabels,viewer,editLabels,
9153	distinction
24141	C5)
5908	segmentation(CandidateSegmentGroup
1994	labels=(MutableTextLabels)in.readObject();
19534	bestWeight()
14471	short)
14380	log=Logger.getLogger(LBJPOSTagger.class);
3350	saveparams
14330	document.getTokens();
19139	ENTER]"),gbc(0,
5264	srcDocSpan=srcEntry.getTextBase().documentSpan(srcDocId);
4637	TransformedViewer(
21905	t.addAll(s);
4956	traincds
10214	few
21517	fee
1074	"edu.cmu.minorthird.labelDir";
8209	this(3);
20344	trBag.add(str.replaceAll(regex,replacement),n);
19850	feb
1532	'getSubpopulationId'
12880	IllegalStateException("superview
17604	observedCounts,
11810	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2737_0"));
21686	DeleteCursoredSpan(String
13171	FilteredFinder
16559	java.lang.reflect.InvocationTargetException;
5801	pos+len;
20867	this.trainDataFilename=type.trainDataFilename;
17288	comparing
18962	EmptyBorder(0,0,0,0));
10655	spanType,String
21654	newSpans=editedSpans.iterator();
12332	ss.mySubstring
14862	stats1=new
17777	wgt[i];
5063	j=0;j<props.length;j++)
1012	token
10293	thing!
16638	stopList.add("usage");
9816	inline
11915	AUSTRIA
20725	wgtpos
10465	bestfalsedata
4340	data=new
752	dataset.shuffle();
15703	d_value");
18039	(Span)e.getSource();
16113	CommandLineUtil.OnlineSignalParams(labeledData);
8155	rnorm
11763	BUG
14958	checkStats(stats2,expected);
10753	base.getDocument(documentId);
6645	javax.swing.filechooser.FileFilter;
7189	Ask
6482	vlist
5578	parent.documentSpan(childEntry.dstDocId).charIndexSubSpan(
5530	curr=null,parentEntry=null;
1438	ioexception
21736	guess
15091	predict
1786	<em>after
10200	possiblelabels
10060	having
17266	profiles
15415	batchTrain(RealRelationalDataset
5770	SegmentDataSequence()
18172	//System.out.println(dataset);
195	change
15688	getCompensatedPMutualInfo(int
14669	Usually,
7774	distributed
1083	"edu.cmu.minorthird.sgmlPattern";
16207	foundspan
11064	System.out.println();
10265	featureCount=fc;
12999	mouseevent
15696	"+c+"
12339	closeParenIndex
22779	userlabelprop
23981	i.e.
23691	30.67186010608067280,
8317	aaaa
8557	Should
9939	HyperplaneInstance(accumPos[k],subPopId,source),
6440	resetdocumentlist
15890	histFeatures[k][i]
7963	'.'
14292	documentString.
9502	trainextractorparams
9861	documentString,
11391	//-------------------Instance
18102	given)
22633	filePC.finished();
20752	File(s));
15200	given,
2675	this.saveAsFile=file;
13498	(rankedExamples[i][j].getLabel().toString().endsWith("NEG
3732	filenames
21660	statusMsg.display("exported
6355	spanComponents[index].setBorder(BorderFactory.createLineBorder(
21356	offset;
16269	far
10393	W_+^j,
14455	spanTypes
13442	it=correctEx.binaryFeatureIterator();
12726	MultiClassHMMClassifier(
21388	Aug
9035	return(k);
23773	1.2688693218588414E89,
22608	'require'
4034	setfile
10326	negWeight:
19855	frequencymodel
16981	java.text.DecimalFormat
5940	nestedmtfeaturetypes
21161	("+stepsCompleted+
10730	AbstractTextBase{
23047	ex.getLabel().bestClassName()
8646	strsize);
20990	Command
19101	javadocLink=selectedItem;
23795	2.4227095383672744E130,
15170	ff;
6810	file,String
19225	"+instanceMap.get(classBox.getSelectedItem()));
15225	accumPos[correctClassIndex].increment(
6761	button.setEnabled(readOnly?false:true);
6890	gbc.fill
9248	setMean(double
22688	evaluate(StackedBatchClassifierLearner
18409	System.out.println(numMistakes+"
3173	instance.getSource();
22258	output.hasNext();
12725	MultiClassHMMClassifier,
1919	getNewException(
19467	viewerTracker2.setMinimumSize(new
17976	learner=(ClassifierLearner)CommandLineUtil.newObjectFromBSH(learnerName,ClassifierLearner.class);
17589	/*StringBuffer
13198	buf.append("Explaining
8170	vbeta
14024	split=new
23096	EditLabels().callMain(args);
20540	compressDataset;
11067	JointCommandLineProcessor
710	this.numberOfEpochs
1902	offsets
16660	propertyList.
7149	fe;
14610	order={{0,1,2,3},{0,1,3},{0,3},{3},{0}};
5391	spanType,
6220	type=(String)displayedTypeBox.getSelectedItem();
21005	RandomSplitter<Example>(0.7);
20392	filename)
455	innerLearners[i].reset();
19907	ct.getChiSquared();
6132	highlights
11149	"+testParams.resultToSave.getClass()+"
7177	fe)
18173	numberOfClasses=0;
21890	map.put(o,THREE);
12944	","+senders);
4759	spanType;
10603	AbstractBatchAnnotatorLearner{
10657	fe,
6475	truthspanlooper
9607	inside
19013	filename=
16671	result.add(prop);
23820	1.7629525510902457E180,
21370	offset="
12907	if(namedSubViews.size()==1&&namedSubViews.get(ONLY_SUBVIEWER)!=null){
20301	value=fe.textLabels.getProperty(token,property);
17259	WebmasterSplitter
10195	bestweight
5171	textBases.containsKey(levelName);
17603	numberOfClasses,
890	transitionErrors="+transitionErrors+"/"+transitions);
7494	getClassifier(){
11987	getNumLabels(TextLabels
9963	errors
3759	return(Foo)next();
4649	e=(Example)o;
16712	laff(){
2467	map.put(ex.getSubpopulationId(),(list=new
14129	getAnnotatorOutputParams(){
725	tokens
11035	getTestParameters()
20591	j=segmentation.iterator();j.hasNext();){
5133	Currently
11242	PrintStream(outBuffer));
13443	it.hasNext();)
21714	editSpanCursor=0;
8151	r_quickstart
11213	Console(main,
22798	getExample(f,j).getLabel().bestClassName()
10087	classLabel.bestWeight()
12373	//shortForm
20051	requiredAnnotationFileToLoad=null;
21754	newFeatureNames,
9210	(int)((U
5779	int[length()];
23343	...)",
15618	fail();
15122	criterion
11568	Retrieval,
19987	edu.cmu.minorthird.text.AnnotatorLoader;
19274	getpropertytype
22329	annotate_with
13569	pos.iterator();
5602	mappingsIterator=currDocMapings.iterator();
9478	"+trainTest.splitter);
3586	recovering
20103	buffer){
8552	trainextractor
6065	add(guessBox,gbc);
438	build
3866	node.map=new
1556	subpopulation's
9664	error:
10684	Instance[s.size()];
17356	answered,
1736	labeling
5011	textPane;
11034	useGUI;
20812	Details,
12629	error,
5524	error.
10472	built
12527	identifying
5931	seglengths
229	nextquery
2413	curtag
13612	collins'
12315	mySubstring.lastIndexOf(s,fromIndex);
18508	inputLabel=null;
15230	accumNeg[wrongClassIndex].increment(
17286	requestlist
4902	Evaluation(d.getSchema());
13167	edu.cmu.minorthird.text.AbstractSpanFinder;
10458	valmaxvalue
17480	sending
18056	club
1242	interpreted,
15279	TestPackage(String
10113	ExampleSchema.NEG_CLASS_NAME.equals(labels[i].bestClassName());
12212	longSpan,
15208	trainList=iteratorToList(i);
3021	lastObj;
21658	"t");
12964	namedSubViews.get(name);
7938	Document,
17384	"+checkStandardStatsOnly);
22338	Document}
18944	wholePanel=new
4190	saveFile;
7406	InstanceTransform
9802	2147483563;
14150	interpreter=new
12649	view){
4745	j=0;j<docSpan.size();j++){
12321	newLo)
6128	documentList.setCellRenderer(renderer);
7023	ext
16555	numberformatexception
18920	int,
23263	String(buf,0,len));
4899	trainCds
3494	window[start][end-start-1];
18502	edu.cmu.minorthird.classify.transform.*;");
18011	SubPopIdTest()
4116	MixupInterpreter(program);
21594	add(readOnlyButton,gbc);
4916	DatasetSequenceClassifierTeacher(trainData).train(learner);
9812	2147483562;
4905	(SequenceDataset)s.getTrain(k);
9975	map.get(seg);
18216	cnt|class="+countsGivenClass[j]);
13707	classifiers=new
11495	if(providedAnnotation!=null)
15174	this.TOP_FEATURES=number;
7790	exp
8803	punct
7588	doSplit=true;
19160	gbc=gbc(x,y);
2537	exi
16641	params=genericMethods[i].getParameterTypes();
6415	view(labels);
21871	Bag
19538	getWeight(String
4491	assertEquals(0.75,e.spanF1(),0.02);
20126	'start(span)'
11970	base.getDocument("eng.base-5").getText());
14066	Integer(count.intValue()+1));
19837	"+frequencyModel+
8509	SequenceAnnotatorLearner.SequenceAnnotator)){
5795	inst
13602	requirements
9211	p2)/f4));
10284	if(example.getWeight(f)>=threshold)
5969	mapstatestolabels
20414	emit'
21525	muller
20505	r,RandomAccessDataset
14802	testFile="edu/cmu/minorthird/classify/testcases/a1a.t.dat";
19238	hyperlinkevent
21551	1.0/(numUpdates)
12778	isAnnotatedBy(String
5799	!label.isNegative())
20968	testDataFilename=s;
10431	log.debug("w11,w10,w01,w00
3320	classifier=new
7933	token.
20042	possible,
2280	buf.append("
10022	len<=maxSegmentSize;
1961	for(Iterator<String>
861	log.debug("+
1560	into
2941	JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
870	log.debug("-
18712	this.inLineClasses=inLineClasses;
4014	getDefaultDir(){
17486	MessageViewer(){
29	interface
18791	System.out.println("current
4193	saveFile,
16622	clp){
3230	instancefromsequence
2915	controls){
9374	splitter.split(iteratorSGM());
15143	"+this.value+","+this.feature+"
15918	(Feature)featureGen.featureIdentifier(fIndex).name;
11405	things
13478	(this
2106	out;
24226	e149
2005	out=
24225	e148
5107	default_context
23744	1.0333147966386144E40,
8620	etc
12632	parallelPane;
10711	.saveSerialized(a,new
11225	ev)
16400	Explanation.Node("VitorBalancedWinnow
3779	iterated
14333	out.
8668	linelength
8741	outL
20284	SpanResult(name,fe,i.next());
11264	panel.add(progressBar2,
24222	e142
23231	section\n"
16147	set_labeleddataparameters
15566	bundle
13016	hearbroadcast
24221	e140
3983	setFile(File
819	feature
24224	e146
12620	recieves
548	classification(instance).getWeight(classLabelName);
24223	e144
14331	iterates
10692	reduction.extractFromTags(annotationType,labels);
20355	"[0-9]+","9+");
24220	e138
1340	"+baseFile);
8302	bag_of_lc_words
8695	indentNumber(String
15665	Math.log(total());
7431	java.util.LinkedList;
2070	pc3.finished();
11262	panel.add(progressBar1,
12038	seminarannouncements
14232	last-trained
9894	MarginPerceptron(0.0,false,true),epochs);
12935	argument,
24022	argument.
14295	Document(documentId,documentString);
578	finalPanel
12127	out,
14506	name-specific
3285	HREF=\"http://minorthird.sourceforge.net/tutorials/TrainClassifier%20Tutorial.htm\">TrainClassifier
20970	it=testData.iterator();
11019	CollinsPerceptronLearner.class,
15231	sequence[0].getSubpopulationId();
15115	this.TOP_FEATURES=100;
2210	label=sortedLabels.remove(0);
24216	e130
10841	zoomedviewer
24217	e132
446	Dataset.Split
24218	e134
11662	dotProd/(Math.sqrt(aNorm)*Math.sqrt(bNorm));
24219	e136
11671	classifying
1318	ex)
1586	innerLearnerPrototype;
2510	cmp;
24215	e128
21153	System.out.flush();
19648	if((aggressive)&&(decision>=w2*x2)){
19622	ROMMALearner(boolean
24214	e126
20038	</ul>
19705	ex2
7748	addAll(Accumulator
19695	ex1
142	answeredQuery);
7068	ViewerFrame("ViewLabels"+StringUtil.toString(args),new
3868	kid=node.map.get(words[i]);
6598	Clear
19659	ins)
19367	laidOut=true;
18316	likelihood
9575	j=new
2206	sortedTags.add(new
1671	score(String
11736	"Title:
21624	S"),
24213	e124
16149	settextlearnerparameters
18757	addClass(Class<?>
24212	e122
21675	correction=0;
11803	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2516_0"));
8750	BufferedReader(new
24211	e120
22386	lnameListViewer
15518	stackedInstance=
18008	SubPopIdTest
24209	e116
24208	e115
24210	e118
10480	doublevalue
16060	candidateSegmentGroupIterator(){
17496	gbc.weightx=gbc.weighty=0;
53	learning
23375	zhone
21864	SmartVanillaViewer(sequenceClassifier);
3301	"one
11266	panel.add(progressBar3,
1159	arguments
12185	extractAbbrPairsFromString(s);
19713	ex3
7839	Merrily,
17040	restricts
7362	File(args[1]);
24206	e111
24207	e113
558	ex;
16411	quickly
20949	type.loadFrom=this.loadFrom;
20046	STORE_AS_COUNTS=2;
310	multiclassifierlearner
20776	setLearner(edu.cmu.minorthird.classify.ClassifierLearner
1092	FancyLoader.class.getClassLoader().getResourceAsStream("data.properties");
7194	answeredQuery){
450	k<split.getNumPartitions();
8527	extracting
24204	e107
14603	order={{0}};
3590	Map<String,byte[]>
13793	exported
24203	e105
460	"+(k+1)+"/"+split.getNumPartitions());
17644	sigAcceptRate
19858	WeightedSet<T>
24205	e109
4810	getHScore(String
1208	"foo.base"
24202	e103
4431	TestSuite{
24201	e101
24200	e100
5204	Add
12642	receiveContent(ParallelViewer.this.getContent());
10975	edu.cmu.minorthird.classify.multi.MultiClassifiedDataset;
23357	MixupProgram(testProgram);
17099	if(oldProfForRequest!=null&&!oldProfForRequest.equals(f[3])){
3981	mode){
16139	base.repositoryKey,textLearner);
15802	(value.equals("ll")))
16826	TransformingSegmenter(
10742	span=documentSpanIterator.next();
7539	x=wx.example.asInstance();
5880	"1",
5510	Gets
16738	[-laff]
5933	init
18062	food'
21034	SeqTrainTestParams(){
4569	extraction
9525	IllegalStateException("signal:"+signal+"
9172	k2-1
23396	edu.cmu.minorthird.classify.algorithms.linear.VitorBalancedWinnow;
16273	ceiling
14345	texttokens
13713	learnerfactory
2377	savetypesasstrings
15971	set_y
12299	offset()
11003	ClassifyCommandLineUtil.Learner.SequentialLearner.class,
16385	//decision
7563	crammer
1432	FancyLoader.loadObject(args[0]);
3004	handle(int
10475	getdatasetfeatures
21474	deviates,
6589	allowed.
15845	iitb.Model.FeatureTypes
14676	fromFile=null;
13980	.getMultiExample(row));
8745	rcwang's
14729	SpanDifference(NameMatcher.postLabels
5644	containslevel
16849	SegmentCollinsPerceptronLearner(int
13895	ButtonGroup();
3177	numericFeatureIterator()
12492	-usage
15715	pointwise
159	getClassifier().
176	multiple
12864	view";
18256	//System.out.println(combinedDataset);
10553	validClassNameSet=new
23431	DecisionTreeLearner(5,2),0.05,0.10));
3211	instance.addBinary(
10974	edu.cmu.minorthird.classify.multi.MultiClassLabel;
21013	SeqTrainTestParams();
20928	trainData=toDataset(s,true,-1);
10365	newUnusedFeatures=new
12933	superViewer.
13629	multiply
202	getClassifier();
19143	e.toString());
23688	22.55216385312342289,
17747	lambdaSum;
2535	ranking1
23692	33.50507345013688888,
20285	accum.addAll(r.tokens().asSet());
10149	ranking.
9721	originally
10902	if(labeledData!=null)
5470	effect
10914	addDocument(String
12602	err
22711	multiEvaluate(learner,
6485	cspan
13254	cloning
4259	NewTypeAction
2115	while(looper.hasNext()){
23908	(k==1)
10241	RandomTreeSplitter
20550	"Set
11648	this.sim=sim;
19242	specially
21980	span.getDocumentId()+
8039	installed!");
9889	SegmentGenericCollinsLearner()
22720	//if(cross)
662	info
5956	nestedcrfmodel
13755	resizable
18199	((MultinomialClassifier)mc).setClassParameter(j,probabilityOfOccurrence);
4203	statusMsg.display("saved
13761	jbuttons
8885	continuous
23907	(k==0)
7704	MathUtil{
10138	posProb;
12736	ell
8855	0.0</tt>
10282	val=example.getWeight(f);
7449	BBMira(boolean
17696	sig[it-1],sigmaSD)[0]
7882	again
12499	testList
21399	JTree(top);
22243	while(matcher.find()){
23567	-mu(+)
2397	start
2108	log.warn(dir+"
2352	saving
11048	"Seq
23223	if(task
18590	mean[2],
16576	if(arg.startsWith("-")){
13889	JCheckBox();
9957	compareSegmentsAndIncrement(
2420	hashset
2736	AttributeSet[SpanDifference.MAX_STATUS+1];
9860	another.
23510	asSet(Iterator<Instance>
10954	addlabeleddata
14245	negTest=SampleDatasets.negTest;
1656	votedperceptron
15204	testList,trainList;
2987	delegate
6342	JLabel("sync
23443	MaxEntLearner
278	if(activeLearning){
20237	set.add(s.getToken(i));
23264	yield();
18899	{"firefox","opera","konqueror","epiphany","mozilla","netscape"};
12051	eng
16441	aggressive
11070	GUIParams(),testParams});
18290	featurePrior,
13157	hasID(String
1775	end
4302	options
4145	JTextField(10);
21354	offset,
9997	pointer-equivalent
19744	schema.validClassNames();
6801	statusMsg.display("Documents
2464	List<Example>
19902	index.size(f,ExampleSchema.POS_CLASS_NAME);
8787	env
19535	getWeight(ExampleSchema.POS_CLASS_NAME);
13506	double[rankedExamples.length][exampleSize];
12690	1,...,L
21366	offset)
1958	Set<Span>
21375	represents
17296	tottrainsize
12043	etime
15697	"+d+"
6617	beginSubspanInDocument=subspan.getTextToken(0).getLo();
19254	getsystemresourceasstream
2488	if(exi.getLabel().isPositive()){
1167	result.add(
22220	if(statementType==Statement.FILTER){
16448	hasfeature
2088	if(includeOffset){
19627	if(aggressive)
5164	textBases.put(rootBaseName,new
9858	Also,
22467	MultiClassifierAnnotator(SpanFeatureExtractor
15402	this.baseLearner=new
3721	reading
22708	multiEvaluate(ClassifierLearner
15062	testserialization
7631	measurePrecisionRecall("TestPartition"+(i+1),subLabels[i],false);
14716	interp.eval(postLabels);
134	All
24143	C1)
22114	BasicTextLabels(newTextBase);
9538	pointer]");
5712	curdocid
23915	(b++);
4464	//SVM/Commit
16616	option.
20914	setMulti(int
8539	endindex
7531	somethingRemoved=true;
9756	RandomElement(int
14379	StringAnnotator{
9944	correct.size();
18848	if(instanceMap.size()>1){
8734	ind2
20847	option,
18009	Logger.getLogger(CVSplitterTest.class);
13925	receiveContent(cd);
10477	forests
16952	bestEndY;
10347	if(result.length==4){
16835	segmenttransform
21677	correction=1;
16539	jList.setCellRenderer(new
19629	(voted)
19553	isCorrect(double
11800	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2457_0"));
20707	Double(d).isNaN()){
12941	forwarded
19918	"old
4289	windowClosing(WindowEvent
18505	learnerName
20386	missing!");
16173	history.size()+instance.numFeatures();
14642	al=new
9250	representation
15430	StackedGraphicalClassifier(m,params,dataset);
20759	edu.cmu.minorthird.classify.semisupervised.*;");
11655	aw=a.getWeight(f);
19760	IllegalArgumentException("lo..hi
1446	mixup
2046	Iterator<Span>
19064	numTypeSelectors++;
19220	classBox.addItem(
12301	hi-lo;
23936	inf)
19284	eio
14858	stats
7880	tokenizer.splitIntoTokens(sampleDocs[3]);
2593	state
20593	type=segmentation.className(seg);
1256	("sample2.train".equals(script))
10220	log=Logger.getLogger(RandomTreeLearner.class);
21415	jtree
17142	testUsers=asSet(userSplitter.getTest(0));
12422	sIndex;
9227	((X
24142	C3)
20050	requiredAnnotation=null;
2706	Keymap
19360	viewer.setMinimumSize(new
2852	setcontextwidth
9865	documentId,String
9163	((V
9173	((W
23799	1.4857159644817605E138,
13584	correct.add(ex);
9154	((U
8806	Detailed
10507	setUp
12190	longForm
15223	GenericCollinsLearner(int
21426	Permission
10072	special.
1088	Properties();
14870	tempFile)));
23006	Cohen,
18442	indexfor
13614	minkov
23	"teachers".
8136	pi(sig)="+rw.dnorm(sig,
2835	savelabelsaction
8778	files");
17178	testList.add(new
16724	setLaff(String
3828	this.endIds=endIds;
252	edu.cmu.minorthird.classify.multi;
8925	my_last
17867	"EditLabels
21500	Math.sqrt(-2.0*Math.log(r)/r);
8618	stringBuffer
10660	BatchSequenceClassifierLearner(){
2223	while(sortedTags.size()>0){
19368	updateTextLabels(edu.cmu.minorthird.text.TextLabels
15854	(stateId
17832	tausum
1378	MixupProgram(mixupFile));
12675	settabplacement
4919	(trainCds!=null)
23684	12.80182748008146961,
3326	ViewerFrame("Classifier",cv);
821	over
23759	3.0414093201713376E64,
21888	map.put(o,TWO);
11401	setLabelFile(boolean
3772	remove(){
8233	useCompressedCharType=flag;
5280	if(mapping==null)
7452	this.useBudget=useBudget;
9404	clone
11088	MultiExample(annotatedInstance,
20159	fe.trace(this);
22399	lnamelistviewer
12962	Retrieve
12162	"expansion";
18838	editor.setContent(value);
1011	number
16977	nullExample
5006	JSlider(0,100,DEFAULT_CONTEXT);
3503	(label[i][j]!=null)
20176	Filter
7778	binomial!");
23913	i--
2428	edu.cmu.minorthird.classify.Dataset;
17754	tauSigEstimateVec.length;
15296	UITest(TestClassifier.class,
5316	List<TextBaseMapper>
2232	docPos=pos;
4804	isPredictedName(String
9024	Math.exp(-my);
20195	consisting
2928	if(controls.preferredLocation()==ViewerControls.BOTTOM){
6569	log.debug(span.asString());
5291	this.getMatchingSpan(parentSpan,srcEntry.getParent().getName(),
4215	RefreshProgramAction(String
18639	<code>int</code>,
17005	(ViterbiSegmenter)o;
5017	TextViewer(TextLabels
9778	typically
18931	warn,boolean
20675	vNeg=new
3156	before
14475	nameDict=new
9653	baseTag=tagset.iterator().next();
1719	CLOSE_BY_OPERATION=4;
23073	edit;
16905	t=0;
9571	trainList=new
6499	sync
15452	i=testData.iterator();i.hasNext();){
15012	double[3];
20170	set){
8995	sampled
9731	</A>.
269	MultiDatasetClassifierTeacher(MultiDataset
15139	Pair(double
13581	i<ranking.size();
4574	tokenfe
21304	edu.cmu.minorthird.ui.CommandLineUtil.SplitterParams;
14449	isfile
4576	tokenf1
11900	CUP
5901	iitb.CRF.NestedCRF(featureGen.numStates(),featureGen,options);
12246	defnString
12968	gbc.gridx=gbc.gridy=0;
5819	i+=
3767	i){
1479	sample1
1400	getProperty(DATADIR_PROP);
14019	ExplanationViewer(new
19877	map.get(object)!=null;
1486	sample3
1483	sample2
8572	log(p+q)
3016	MyViewer
10600	BatchSequenceClassifierLearner.
17090	f=line.split("
323	emptyset
7030	checklabel
11218	goButton
10447	clever
19564	"[Class:
13472	//Choose
8499	i=labels.instanceIterator(crAnn.getSpanType());i
3952	java.awt.GridLayout;
13113	terminate.
15695	"+b+"
20786	saveAs(String
6975	interactivly
19137	JLabel(
14951	expected[0]=0.08;
8189	BAG_OF_LC_WORDS=
19420	boundary
9527	at:"+this);
1780	close
12377	StringSpan(currSentence,sentenceEnd+2,openParenIndex);
23475	log.debug("instance:
21313	train=new
18546	dummylearner
5792	segLengths[pos]
6869	super.loadSpan(span);
8831	facts
10920	BasicTextLabels(tb);
6596	off,int
22583	dir=getDirectory(s);
15290	e.errorRate(),
5944	gen
21181	starttime
2347	saveserialized
1940	get
14247	makeLabels(SampleDatasets.posTrain,SampleDatasets.negTest);
7520	WeightedExample(Example
22917	if((example.getLabel().isPositive())&&
97	i);
2823	editlabels
4706	tabledata
3839	accum=new
14931	expected[0]=0.07;
12114	compress
11920	Scotland
16000	windows'
2011	out.close();
23995	a)/(b-a).
10443	treesplitter
18663	instantiate
8416	log.info("extracting
4235	programLabels
20464	toconst
704	this(3,5);
12153	acronyms
2679	saveButton.setEnabled(saveAsFile!=null);
3509	len=1;
2193	Otherwise
23941	n_minus_k_fac
5503	childEntry=childToParentMap.get(childDocId);
21298	objinput
8292	dataset.add(new
11406	simpletextloader
12087	england
22896	//criterion
16740	p.processArguments(args);
13881	DataControls
19456	((SpanLabeler)
2479	map1=new
17866	output",
20697	sumX+=vCnt[i];
15220	GenericCollinsLearner
6225	sizeDelta,JList
21965	datasetFileName)
5203	parentEntry=textBases.get(parentName);
7416	transformed.add(
15944	historySize=1"),
21705	if(editedSpans==null||editedSpans.isEmpty())
17269	fraction
23881	instantiable,
13138	shouldterminate
23259	len=0;
3675	findClassResource(String
14677	saveAs=new
1629	BinaryClassifier[]
18675	configFilename,
14009	right=new
16836	transformeddataset
14445	stand
13466	Set<Index>
23422	BalancedWinnow(),1.0/7.0,0.0));
1845	labels.closeTypeInside(type,span);
6612	subspan.getDocumentId().equals(contextSpan.getDocumentId())&&
22813	buf.append("\nindex]");
2572	edu.cmu.minorthird.text.TextLabelsLoader;
22964	"BalancedWinnow:
20850	dim){
16342	if(neg_t.featureScore(f)<W_MAX)
6934	eSpan.label=label;
13023	gridbagconstraint
17193	partition,String
3099	gbc
7289	getOnlineClassifierDocumentEditor(){
12889	contained.
6997	resetbutton
11541	evaluation=
16723	laffter;
4578	crflearner
9714	James,
11297	multitrainparams
6425	displayedtypebox
23700	58.00360522298051994,
17854	extraction-learning
21791	aug=new
4938	"Test
18221	//System.out.println("prob="+probabilityOfOccurrence);
4994	this.span=(Span)o;
2328	operation
2336	break
10904	addLabeledData(TextLabels
1641	innerClassifier[i].score(instance)
23640	stirlingCorrection(...)
3	import
8823	confidence,Object
16754	value=line.substring(eqPos+1).trim();
1691	file.
11649	compareTo(Neighbor
17671	screen
1197	file,
22902	posFactor=numGivenPos.featureScore(ff);
1604	innerLearner
5351	matchingSpan;
17003	ViterbiSearcher(c,schema,maxSegSize).bestSegments(g);
24	@author
14196	"editParameters","annotatorOutputParams","_LabeledDataParameters",
7024	file0
21227	file:
20168	SetResult(String[]
6112	if(spans.size()==0){
2612	include
22025	Effectively
19199	z=0;
21916	Preprocess
15369	CrossValSplitter<Example>(5);
6763	edited.
5457	TextBaseMapper{
8297	samplefe
10303	RandomTreeSplitter();
1742	file)
9270	austria
20671	unseen
15908	CRF","iteration");
3563	EncapsulatingAnnotatorLoader
11579	this.index=index;
5018	this(labels,span,DEFAULT_CONTEXT);
20254	stringBag=new
17829	tausigma
5675	parentspan
2533	posexamples
17467	variant
9772	</PRE>
23195	oldSystemOut=System.out;
15739	basicfeatureindextest
19130	selector.createPE(o.getClass());
6831	file=
881	(errorOnThisSequence)
9441	getSignalParameters()
16752	(=)
14477	WINDOW_SIZE=5;
19117	advancedOptions=new
12592	counttokens
1154	files
9749	Equivalent
23955	quicker
14088	targetcorrectness
3903	b.append("\n");
9768	clock
9650	output,MonotonicTextLabels
20694	sumWgt=0.0;
6357	Color.black,2));
2335	documentspaniterator
21850	"+instanceToPlace);
17626	mcmcEstimateDirichletPoissonTauSigma
20855	mutli
140	addExample.
7067	if(m.base.labels!=null){
22254	hasExtraction(final
22670	filej
13342	Collins
18941	//custom
17780	m2=0;
14439	cogcomp
4898	ClassifiedSequenceDataset[s.getNumPartitions()];
17779	estimateVar(double[]
10670	seqClassifier;
20290	map(Function
12794	Collections.EMPTY_SET.iterator();
17768	MCMC",parameterization,tm);
1068	location
7547	log.info("reduced
17527	vWgt[i];
10117	numLabel=new
21833	HashMap<Object,Place>();
20249	set.add(s.getToken(index1));
20663	wgtTot+=e.getWeight(f);
17805	prior
18985	allowedValues=
17060	log=Logger.getLogger(WebmasterSplitter.class);
6731	add(thisUpButton,gbc);
9304	squeeze
8456	seqClassifier,
20638	//data
11805	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2611_0"));
12040	official
8243	tokenPropertyFeatures=null;
12417	Matching
6912	String[]{"Property","Property's
18060	checksubpopids
10403	(totalPos-pos,totalNeg-neg
4229	base){
22245	span.charIndexProperSubSpan(matcher.start(regexGroup),matcher
6408	StatusMessagePanel(viewer,statusMsg);
18993	theBox.addActionListener(new
16416	machine
17993	[EVAL_SAVE_FILE]");
22652	File(ld.nameOfFileToView));
9039	comparison
16498	examples=new
22161	statement
6181	HiliteColors.yellow;
9872	abstracttextbase
2659	Select
23439	XValTest(50,1,true));
23832	1.2146304367025332E205,
13448	ex=rankedExamples[i][j];
10046	transitionerrors
22079	stack
1195	returned.
20883	trainDataFilename=s;
16886	t=0..size,
3367	candidatetype
7317	EditTypeAction(viewer.getGuessBox(),viewer.getTruthBox(),
5793	(len=1;
6834	.getParentFile(),file0.getName()+ext);
12186	(Iterator<StringSpan>
5105	emptylabels
6856	label=checkLabel(nextCursor);
9786	Can
2033	if(details==null||details==Details.DEFAULT){
19808	deciding
19741	this.searcher
12624	receive
5768	tokens;
10183	details=details+labels[i].toDetails();
14602	int[][]
17227	"[WebmasterSplitter
6521	standard
12549	falsepositives
16860	CollinsPerceptronLearner.MultiClassVPClassifier(schema);
7886	tokens2
7872	tokens1
3813	tokens.
2127	&lt;root>..&lt;type>...&lt;/type>..&lt;/root>.
20034	tokens,
21077	getcrosshelp
2379	print
21112	startTime;
3167	Integer.toString((i+1)),
20919	cross){
5766	tokens)
16686	CONFIG_FORMAT_EXT;
613	maxentlearner
22852	voted,int
9493	evaluation;
18579	//System.out.println(
18496	edu.cmu.minorthird.classify.experiments.*;");
11545	multicrossvalidateddataset
20453	tokens_
18495	edu.cmu.minorthird.classify.*;");
6883	AbstractAction("Insert
14152	NestedTextLabels(base.labels);
14068	label=j.next();
3114	handle
7626	subLabels[i]=
4196	this.labels=labels;
12821	System.out.println("Not
11220	task")
17961	span2instance
2921	controllable");
21580	ExportGuessSpans("Export"));
16145	onlinesignalparams
3446	associate
23198	PipedOutputStream(piOut);
16531	Dataset;
15750	defaults
11190	Viewer.fillerGBC();
17333	unsupervised
20765	sequentialLearner
1126	DATADIR_PROP,LABELDIR_PROP,SCRIPTDIR_PROP
80	Queries
15604	ClassifyTest
17558	sumWgt2
1285	"+script+"
17917	i=0;i<subprocessor.length;i++){
6762	this.readOnly=readOnly;
8583	exp(log
1223	defined
259	Dataset.
21983	terminator
11531	trainTest.splitter=new
4713	rcwang
11049	Dataset,
1522	eval
5746	available
3650	//fileNameToContentsMap.put(file.getName().substring(0,file.getName().length()-6),contents);
11599	classCounts=new
19791	(CMM)o;
8581	log(1
15916	crfWs.length;
23845	3.6590428819525483E232,
2851	declare
10372	if(falseData.size()==0||trueData.size()==0){
1395	"+script);
10589	defines
20568	dataset.addCandidateSegmentGroup(g);
16185	knn.index=new
15106	AbstractInstanceTransform{
20903	multi=new
9793	uniformly
6019	'guess'
11188	line"));
10835	log.debug("zoomedIn.canReceive
6895	subpanel.add(tableScroller,gbc);
16165	asPlainInstance(){
4984	textViewer.applyControls(controls);
3081	preferredlocation
816	sequence[j]
7623	SubTextBase
19804	hisequence
19340	times,
22071	Throws
8231	"Bill".
13960	if(filterOnFeature)
23814	1.0813967582402912E168,
11230	clearButton
22051	instead.");
3136	java.util.HashSet;
17853	"TrainTestExtractor
23841	1.1182486511960037E224,
6898	subpanel.add(valField,myGBC(2));
21435	notice
16619	clp.
5307	if(dstEntry==null)
1972	default:
18528	SequenceAnnotatorExpt(labels,splitter,learner,inputLabel,
1687	edu.cmu.minorthird.util.StringUtil;
2356	gettexttoken
4112	NestedTextLabels(baseLabels),truthLabels);
4178	bottom.add(editor,gbc);
2643	JScrollPane();
17053	</pre></code>.
3289	JointCommandLineProcessor(new
17723	"+sigmaPost);
7353	Bases");
5155	TextBaseManager
5461	childToParentMap;
7209	sequence[i]
15446	k=0;k<s.getNumPartitions();k++){
12780	getTextBase()
10107	positive[i]=
12554	testmode
13390	RankingBoosted()
59	Note:
19647	(w2*(y_t-y_t_hat));
21069	setlearnerparameters
19265	currentname
22255	mixupExpr,final
638	batchclassifierlearner
410	this.splitter=splitter;
1916	labels.setProperty(span,prop,value);
2781	nothing's
8431	sequenceAnnotator.getSpanFeatureExtractor().extractInstance(labels,
5237	takes
15420	params.stackingDepth+1);
19369	viewer.updateTextLabels(newLabels);
9794	pseudo-random
11365	TextBaseLoader(TextBaseLoader.DOC_PER_LINE,
14014	Visible)?((Visible)cd.classifier).toGUI()
12585	currsentence
4918	ClassifiedSequenceDataset(c,
8423	SubTextBase(labels.getTextBase(),justThisDoc);
5034	if(color!=null){
4070	groundTruthLabelsFile,
1931	if(!tok.hasMoreTokens())
16415	littlestone
20315	targetValueTag=(targetValue==null)?"NULL":targetValue;
23470	subpop="www.site"+site+".com";
15804	(boolean
14268	fun
10568	i-th
5266	this.getMatchingSpan(srcDocSpan.charIndexSubSpan(srcOffset,
4077	base,TextLabels
19056	log.debug("type
13452	ftr
17064	populations
10800	view.
17339	passive
2423	edu.cmu.minorthird.classify.ranking;
20509	#"+k+":
18847	InLineComponent(final
18338	converged;
18366	classindex
15601	truevalues
13655	ClassifierLearner{
950	Explanation.Node("CollinsPerceptron
7163	seqData
10798	view,
7814	TokenizerTest
16900	fty
655	testdata
9931	g.getSubpopulationId();
12782	base");
19886	ChiSquareTransformLearner()
11948	SEMIFINAL
6064	add(highlightButton,gbc);
12221	(Character.isLetterOrDigit(str.charAt(0))
22006	edu.cmu.minorthird.text.TextToken;
2136	D)E
16606	'-"+arg+"'");
9429	CommandLineUtil.SplitterParams
19487	setdefaultcloseoperation
16087	instGui=GUI.newSourcedExampleViewer();
18118	...Poisson
9251	receiver.
17105	req2ProfileMap.put(f[2],f[3]);
23631	log){
19765	weightOfPrediction
19572	bestlabel
22401	mainviewer
19884	ChiSquareTransformLearner
14817	//send
12545	long_form_prop
17538	maxCnt,Math.min(
5810	x(int
15355	Learning
10623	this.displayDatasetBeforeLearning=newDisplayDatasetBeforeLearning;
2493	ranking1=new
23201	io){
14751	remove_single_tokens_low_pfidf
11104	Evaluation(testParams.testData.getSchema());
12669	views
10601	determined
303	carnegie
23359	interp.eval(truthLabels);
16654	if(params.length==1&&params[0].equals(String.class)){
14338	texttoken's
769	"+c);
3222	InstanceFromSequence(instance,
50	for
13839	i<innerLearner.size();
8500	d=labels.getDetails(s,crAnn.getSpanType());
17659	).doubleValue();
1472	foo
15004	"+error/total+"
20583	instance=fe.extractInstance(labels,span);
14095	gettablecellrenderercomponent
15833	clabels[i]
7087	ann=(ClassifierAnnotator)IOUtil.loadSerialized(test.loadFrom);
19753	alternateClasses,
7656	i=labels.getSpansWithProperty(signal.spanProp);i
11604	Neighbor
21274	findMixupAnnotatorFromStream(String
14728	names-matching:");
8384	new.labels
22612	textFiles=dir.listFiles(TEXT_FILE_FILTER);
15321	UITest(TestExtractor.class,
9870	documentSpanIterator();
8907	Simulation.
6868	labelBox.setSelectedItem(LABEL_DOCUMENT);
7411	transform(MultiExample
21347	"+this.getClass());
18794	}));
18789	panel.add(new
169	information
9908	SegmentCollinsPerceptronLearner.ViterbiSearcher(c,schema,maxSegmentSize).bestSegments(g);
23584	PoissonLearner(double
11939	halftime
13525	cur_W_Pos=0,
2779	this.delta=delta;
3881	toString(b,0,root);
15538	testData=stackTestDataset(testData,rlt);
21144	task){
13029	mouseclicked
1071	"edu.cmu.minorthird.dataDir";
20260	3-token
5023	if(color!=null)
18587	mean[1],
12855	components.
9092	k1);
13680	ExampleSchema[]
21860	(explanation==null)
5606	currDocMapings=childToParentMap.get(currKey);
21843	instanceToPlace.put(
153	computation
18954	pname2.endsWith("Help")&&
20527	SegmentCollinsPerceptronLearner(),
5310	"The
19633	"+w_t.toString());
2629	editLabels,
13806	Viewer.
6452	fmt
8083	sig<vlow[1]
9677	taggedlabels
24115	</tt>
22547	crossValSplitter=new
20295	(TokenSetResult)doTrace();
20625	scale){
4730	DF=1;
2602	editLabels;
5718	startindex
6486	spancomponents
12402	//tmpStr
20995	Multi,
4322	groundTruthLabelsFile=new
6877	JTabbedPane();
12571	loadtruedefinitions
16132	obtcl=
2605	JButton
4467	assertEquals(.15,e.errorRate(),0.02);
2007	BufferedOutputStream(new
3129	prefixfield
23493	inst=j.next();
16225	CMU
5345	matchingSpan=currMapper.getMappedParentSpan(matchingSpan);
1015	multiclassvpclassifier
2028	s=j.next();
11686	responsible
18827	pname=props[i].getDisplayName();
23352	guessLabels;
22461	textbaselabeler
13648	extractInstance(Span
896	CMM
4935	log.debug(msg+ids.toString());
4692	emphasized
7126	instance.getSubpopulationId());
21880	THREE=new
21303	edu.cmu.minorthird.ui.CommandLineUtil.SaveParams;
12885	(namedSubViews.get(title)!=null)
7161	this.reduction
23486	test=new
20068	e.g.
15328	doTest()
14977	target=atof(st.nextToken());
10307	batchTrain(List<Example>
23044	(text!=null)
14285	BasicTextBase(){
15597	ngbid
12799	type,String
16717	System.out.println("I
3354	setsaveparameters
17499	JTextField("");
13607	answers
4459	"-labels","cspace.1f3","-spanType","Dlv","-test","cspace.2f2",
3119	transformedvanillaviewer
2737	colors[SpanDifference.FALSE_POS]=spanPainter.fpColor();
23796	2.107757298379527E132,
21614	//System.out.println("create
4818	intellij
8445	extractedSpan=k.next();
4181	top.setMinimumSize(new
8298	annotatedspanfe
14240	SampleClassificationProblem{
10119	numLabel[i]=labels[i].numericLabel();
5305	getMatchingSpan(Span
12049	testloadwordperlinefile
19426	getLoTextToken();
11619	"+n.sim+"
23400	log=Logger.getLogger(TestPackage.class);
20471	swbag
13302	TransformingClassifier[multiClassifier.getNumDim()];
14863	double[4];
22975	beta2
7139	reweighter
6982	iotypelabel
8063	P(tau|sigma,X)
5088	entity:loc
6443	getselecteditem
13749	((Controllable)viewer).applyControls(ViewerControls.this);
16265	beta;
5117	resethighlights
16872	fn;
7806	'vanilla'
17811	estimatepoissonweightedlambda
19267	setwarning
5839	iter;
11209	TitledBorder("Error
2130	even
6255	compareTo(SpanMarkup
12928	passing
2076	out.println(printTypesAsOps(labels));
6649	Experiment
2656	BasicTextBase();
2025	pc2=new
3583	ex){
4295	textBaseId=null;
2221	buffer.append("<root>");
103	answer.
12238	fin
2563	javax.swing.event.ListSelectionListener;
20717	infogaintransformlearner
17613	Estimate("Poisson","lambda",tm);
16001	Dataset{
17540	)))
4372	baselabels
14454	fit
5579	childEntry.dstOffset+(childLo-childEntry.srcOffset),
1683	java.io.PrintStream;
24145	xlongBinomial(long
1362	fix
8348	pulled
9941	));
4977	addSubView("Text",textViewer);
22183	if(filesToLoad.size()>0){
18075	beta,
16688	i=propertyList().iterator();i.hasNext();){
14228	data.");
13796	getColor(String
22997	com.wcohen.ss.DistanceLearnerFactory;
14063	map.put(label,(count=new
14544	System.out.println("!
3055	ucBox.addActionListener(this);
19323	javadoclink
15496	ngbID=ngbiter.next();
2561	javax.swing.event.ChangeListener;
5753	BatchSegmenterLearner,SequenceConstants,Segmenter
8219	windowSize=n;
12846	Viewers
5743	CRF
6236	slider=
9748	repeatable
5731	parentdocmap
23253	//end
4771	updateHScore(int
858	sequence[j].getLabel().bestClassName(),
427	finalLearner.setSchema(schema);
2907	Viewer{
21011	Type:
2032	details=labels.getDetails(s,type);
9389	SGMExample
23045	'"+text+"'
10004	previousClassName
19620	this(true,
14653	result.add(name+"
9229	h(x))
9310	coreset
23596	index.numberOfFeatures()
21453	pdf(x)
720	newHistorySize;
14873	FileInputStream("SVMTest.classifier")));
8495	.loadSerialized(loadFile);
8451	"+confidence+"
9976	(seg.lo>=0
15949	convert_to_minorthird_hyperplane
8481	SmartVanillaViewer(sequenceAnnotator);
2052	UnsupportedOperationException(
19379	laidout
4572	sequenceannotatorlearner
3313	ViewerFrame("Dataset",d.toGUI());
20764	Leaner...
10437	Math.log(w00);
1169	"sample"+i+".test"
3990	log.debug("build
22116	matchingChildSpan=
19157	gbc.anchor=y==0?GridBagConstraints.EAST:GridBagConstraints.WEST;
16591	if(result
17691	tau[i][it]
22543	HasSubpopulationId){
22437	serialVersionUID=20080302L;
10828	zoomedIn.setContent(argument);
1058	loading
14651	result.add(name);
13489	expLoss
5934	segdata
20282	newSet.add(set.last());
5670	extract
7460	usedFeatures=new
10619	getDisplayDatasetBeforeLearning(){
22472	this.multiSpanProp=multiSpanProp;
11546	basetype
13834	super(learnerName);
719	newHistorySize)
20935	testData=null;
3910	Iterator<Span>{
10957	negclasslabel
10211	Friedman
15061	serializing
4763	next=it.next();
1455	datadir
22576	ArrayList<Annotator>();
17944	FeatureBuffer();
8376	trueName
18860	if(s.equals(advancedParams.get(i)))
2865	dependent
1620	sequence[j].getLabel().bestClassName()
1967	i=labeledDocs.iterator();i.hasNext();){
13825	Carvalho.
26	Cohen
8108	AlphaTau
16222	Carvalho,
19587	super(textBase);
4939	Partition
11762	KNOWN
4532	}catch(InstantiationException
22200	if(statementType==Statement.PROVIDE){
19522	binaryLabel(double
23423	VitorBalancedWinnow(),0.0,0.0));
15011	rvalues=new
12276	sentence[i].length()+3;
14005	instanceViewer=GUI.newSourcedMultiExampleViewer();
43	setSchema(ExampleSchema
1920	e,String
21582	deleteButton=new
12454	\t\n\r\f-");
14969	error=0;
414	getInnerLearner()
21550	s.multiply(
3975	setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
18386	increasing
10581	isValid(Example
14090	filteronfeature
12107	compactInstance=compress(example.asInstance());
22601	File(f.getParentFile(),stem+".labels");
19646	d_t
3632	fileNameToContentsMap=new
17119	for(Iterator<T>
7559	usedfeatures
8256	if(tokenPropertyFeatures==null){
8771	bWriter.write(aux.toString());
28	public
15643	Mutual-Information,
13599	computational
6514	getfamily
13048	occurs,
19001	textField.setText(value==null?"":value.toString());
15169	ff[j]=featValues.get(j).feature;
608	apache
22385	m.get(o);
19976	annotatorLoader
5763	labels[]=null;
4737	HashMap<String,Double[]>();
1406	labelDir:
11420	activeLearning
2911	ControlledViewer(){
8828	author()
12397	(shortTokenizer.countTokens()
4434	super(name);
11026	String[]{"train","test","trainTest"}));
19917	SampleDatasets.sampleData("toy",false);
22952	voted="+voted+",
20879	SimpleTrainParams
19764	searcher.viterbi(0);
16681	CONFIG_FORMAT_NAME="Configuration
20984	testData=toDataset(s,
2010	out.flush();
6702	Initialize
16791	dad
20885	getDatasetFilename(){
5990	log=Logger.getLogger(TextBaseViewer.class);
8508	if(!(ann
9464	(train.fe
7614	log.info("Creating
10428	w01=(tot-pos)/tot+epsilon;
1089	dataPropertiesFound
18272	eloo=combinedDataset.iterator();eloo.hasNext();){
10987	edu.cmu.minorthird.util.gui.TypeSelector;
23160	PipedInputStream
23202	errorArea.append("Couldn't
3567	code
16571	pos=startPos;
15044	dat
22205	labels.annotateWith(fileToLoad.substring(0,fileToLoad.length()-4),
1614	cloneable");
12702	factors
3778	items
4258	System.out.println("adding
22423	BayesClassifiersTest(){
11907	Cup
12111	factory
17262	asList(Iterator<T>
16262	//threshold
8992	large
17893	log.warn("Unknown
17725	StringBuffer("acceptance
2449	Each
8318	bill
21342	if(a.hasNext()){
4602	concise
8953	that,
9757	s1,int
16255	that.
24090	rr*(C3
6422	null_truth_entry
12766	MultiEvaluation(d.getMultiSchema());
1160	FancyLoader.loadTextLabels()
19957	splitter]";
23643	4.134069595540929e-02,
12434	((sIndex
11018	TFIDFTransformLearner.class,
19689	System.out.println("Hyperplane
14165	save.saveAs);
24091	rr*(C5
12484	<filename>");
553	buf.append(finalClassifier.explain(newInstance));
10267	bestFeature=null;
5223	offset
9767	l%Integer.MAX_VALUE;
22378	"Makoto",
20180	TreeSet<T>();
12927	Listen
4913	"+k+":
20518	edu.cmu.minorthird.classify.sequential.SegmentCollinsPerceptronLearner;
20329	asBag(){
4752	updateHash(TFList,TF);
3176	Iterator<Feature>
15959	newmaxiters
11005	KnnLearner.class,
2680	updateViewLabels(TextLabels
12023	cobb
21593	add(ioTypeLabel,gbc);
14988	if(v==target)
14277	SortedMap<String,Document>
1398	bsh.EvalError,IOException
11498	Override
17123	HasSubpopulationId))
13950	ProgressCounter("classifying
16834	transformlearner
24196	e92
12073	cup
24195	e90
20646	c.setScale(SCALE);
3708	reason
12835	Visualize
16475	otherwise
14687	if(args[i].equals("-saveAs")){
24296	e297
13428	ViewerFrame("hyperplane",
3013	v.setContent("William
9314	COUNT
13500	Math.exp(-w0*(Math.log(rankedExamples[i][0].getWeight(score))-Math.log(rankedExamples[i][j].getWeight(score))));
24295	e295
17268	folds
6531	Implementations
16266	//demotion
3776	next(){
24294	e293
24194	e89
24293	e291
17243	totTestSize=0;
24193	e87
23634	f_in_ex
23165	PipedInputStream();
21773	if(newFeatures[i].equals(f)){
24192	e85
11441	dataset=Expt.toDataset(argv[0]);
24191	e83
2364	closureiterator
24189	e80
6772	importDocumentListMarkup(documentSpan.getDocumentId());
24190	e81
15942	mainPanel.add(
12749	TestMultiClassifier
2066	out.append("setSpanProp
3414	hold
891	(transitionErrors==0)
1791	POLICY</code>
5317	srcMapperList=new
22791	j=0;j<size(f);j++){
13394	exampleSize)
16482	"+span);
23803	1.0873661566567426E146,
8674	if(lineMatcher("\\p{Punct}",line.substring(i,i+1))){
7595	CommandLineUtil.TestExtractorParams();
17616	lambda=(sumX+prior*1.0/scale)/(sumWgt+1.0/scale);
16968	lastY)
24187	e76
19116	if(numAdvancedParams>0&&inLine){
24188	e78
24185	e73
11728	Baker
24186	e74
16181	this(5);
4462	"-labels","cspace.1f3","-spanType","NotDlv","-test","cspace.2f2",
3581	myClassLoader.loadClass(className);
14867	stats1[3]=e1.averageLogLoss();
4427	junit.framework.TestSuite;
2704	editorPane=new
13505	initializeMargins(Example[][]
22904	total=posFactor+negFactor;
9280	randomelement
19151	x,int
16368	atheta){
6704	editedSpans=new
17978	CrossValSplitter<Example>(cvFolds));
11483	spanString=span.asString();
160	completeTraining();
24286	e275
13216	explaining
3431	maxWindowSize
24285	e273
22008	log=Logger.getLogger(MixupInterpreter.class);
342	edu.cmu.minorthird.util.gui.SmartVanillaViewer;
23162	PipedOutputStream
12316	asString()
24287	e278
20058	this.featureStoragePolicy=p;
17514	Dec
8098	probability
9958	schema,Segmentation
17472	cvs
24284	e271
12141	Biocomputing
14047	dc.filterOnFeatureBox.setText(argument.toString());
4942	cvd
18882	url=he.getURL().toString();
9753	(MSW)
2284	">\n");
24079	9.18938533204672742e-01;
5631	sortedset
7472	s="+s+"
14006	left.setBottomComponent(instanceViewer);
24290	e284
17247	totTrainSize+=splitter.asList(splitter.getTrain(k)).size();
24291	e286
17001	maxSegSize)
11302	sequentiallearner
21858	available");
24292	e289
15349	MultiClassifierAnnotator(train.fe,classifier,signal.multiSpanProp);
24197	e94
4399	setbase
13538	Math.abs(Math.sqrt(cur_W_Pos)-Math.sqrt(cur_W_Neg));
24198	e96
24288	e280
12381	((shortForm.indexOf('(')
11522	if(signal.multiSpanProp==null)
24199	e98
24289	e282
609	log4j
19740	historySize,ExampleSchema
10932	completeTraining(){
22877	List<ClassLabel>
16998	maxSegSize;
22389	monitorSelections(jlist);
8665	(\p{punct})
11392	Wizard
15978	featuregenimpl
312	cameron
14121	CommandLineUtil.AnnotatorOutputParams
6989	tbviewer
22861	this.regret=true;
18164	SemiSupervisedNaiveBayesLearner(){
13656	ClassifierLearnerFactory
12470	accum.add(
17591	str.append("
21126	if(depth<graphicContext.length){
21838	explainedSeq
2901	javax.swing.JCheckBox;
6579	span.getTextToken(span.size()-1).getHi();
13533	Math.exp(-1*margins[index.i][index.j]);
6435	resetdocumentlistaction
21067	setdatasetfilename
22939	MyClassifier(pos_t,theta);
13880	filtered.
19593	Maximum
11017	T1InstanceTransformLearner.class,
12884	title){
12550	falsenegatives
16510	(unlabeledExamples.size()>0)?true:false;
3639	if(asFiles){
6115	statusMsg.display("Displaying
16675	"bar".
15506	}//end
20253	Bag<String>
10793	sigfileannotator
1733	setClosurePolicy(int
6289	spanIsDirty=new
18178	BasicFeatureIndex
5950	labelnames
22655	labeleddirectory
18018	base.loadDocument("b2","CBGB's");
7439	buggy.
17425	fold.
17460	trainIt.get(k);
22874	numGivenNeg.increment(f,1.0);
18494	interp.eval("import
11922	msg5
3421	window[start][L-1].
11941	msg6
11893	msg3
11914	msg4
11850	msg1
17270	subpopulationid
11877	msg2
12812	present");
8005	testspantypetokenizer
9477	"+trainTest.labels.getTextBase().size()+"
14540	tokenWindow=
3884	b,int
6852	Completed
8347	trained,
2811	serialversionuid
15565	params
3403	"maxWindowSize",
24317	log10
19540	getProbability(String
12455	longFormSize
16807	this.featurePattern
10648	log.debug("learned
2236	TagInfo{
1402	getProperty(LABELDIR_PROP);
11966	base.getDocument("eng.base-136").getText());
5198	IllegalArgumentException("TextBase
22778	userlabeltype
18402	reportMistakes)
20404	getName();
11828	P.M.",
17612	Double(lambda)
18394	reportMistakes;
13237	compress){
2776	msg,int
8487	undocumented
18542	textlabelsannotatorteacher
21296	redirected
57	copy
3248	cool
7123	this.reweighter
10038	viterbisearcher
14022	classifierViewer.setSuperView(this,"classifier");
23961	<code>1.0
21554	ranking.size();
19980	require.)
19660	ins.featureIterator();
13561	margins,
5682	dstentry
3683	encapsulated
15911	(CONVERT_TO_MINORTHIRD_HYPERPLANE)
8220	getFeatureWindowSize(){
9736	12345
12668	conceptually
11331	clp
991	models
14496	compare(String
5948	semimtfeaturegenimpl
10174	isCorrect(MultiClassLabel
3329	ClassifierAnnotator
23574	{counts
13385	margins;
5721	newlevel
17953	MutableInstance(span,span.getDocumentGroupId());
11085	InstanceFromPrediction(instance,
11703	TextBaseLoader.USE_XML);
9566	RandomSplitter(){
8081	(tau<vlow[0]
9661	interp.eval(taggedLabels);
24008	coef[],
17331	AnnotatorTeacher
24151	e19
11062	graphic
22453	CrossValSplitter<Example>(10));
15150	ig1,Pair
204	cmu
4566	cmt
1673	textclassifier
17590	StringBuffer(""+vCnt[0]);
12135	A.S.
14621	o=new
2543	cmp
5430	newMapper.mapPlace(curDocId,currInstance.getLoChar(),newDocID,0);
15940	cmm
5452	getName(){
8898	E.,
14778	uniquesortedlist
3966	selectedFile=null;
22055	Statement[]
13605	cont
1664	edu.cmu.minorthird.text.learn;
15732	BasicFeatureIndexTest(String
24158	e29
4097	TextLabelsLoader();
9830	comm
9828	comp
24156	e26
21376	setlength
24155	e25
24157	e28
12656	subView
9982	g.getSubsequenceExample(seg.lo,seg.hi),
24153	e22
24152	e21
14886	come
23507	totalTest+=test[i].size();
12532	biocomputing
24154	e23
19890	model;
7354	//labels
22274	levelstack
12560	longform
12677	scroll_tab_layout
1855	log.warn("there
19187	setY(int
9834	houle
7234	reduceextraction2tagging
21925	historySize=StringUtil.atoi(s);
5106	spanviewer
12209	shortSpan,
14966	model)
24159	e30
6211	"+truthType+":
4614	tf=new
4390	col
19844	OrderBasedTransformLearner("word");
16490	result.add(baseTag+"End");
12634	subViewList;
10739	super(base.getTokenizer());
24162	e35
24160	e32
24161	e33
24164	e38
20324	super(name,fe,bag.asSet());
7731	cov
8265	from(s).tokens().eq().charTypes().emit();
8640	tmpstr)
24163	e36
14032	evalViewer=e.toGUI();
23761	8.06581751709439E67,
17630	sigmaSD,
15596	ngbiter
23737	3.048883446117138E29,
18648	String-valued
1209	exists,
22246	.end(regexGroup));
12993	monitorSelections(jtable,colIndex,IDENTITY_TRANSFORM);
8702	"Would
15952	debuglvl
24165	e40
9079	delimit
24166	e41
2523	batchbinaryclassifierlearner
24167	e43
9665	makePattern(String
12273	i<sentence.length;
24168	e44
23851	2.6953641378881633E245,
22607	Re-label
11613	Double(d.doubleValue()+w));
4475	TrainTestExtractor.class,
6174	fpColor(){
24169	e46
24170	e47
8972	nextInt()
24171	e49
9703	period
14467	cost
6088	spans=new
354	Vol.
6330	getListCellRendererComponent(JList
16866	ViterbiSearcher(c,schema,maxSegmentSize).bestSegments(g);
21616	saveAsFile="
6442	truthtype
11281	instancefromprediction
7350	labels=SampleTextBases.getTruthLabels();
7113	summarize
10972	edu.cmu.minorthird.classify.experiments.StratifiedCrossValSplitter;
20352	charTypePattern(){
24175	e56
11684	train(SequenceClassifierLearner
24176	e57
24174	e54
24103	Stirling
5963	validclassnames
24173	e52
5686	generate
7160	reduction)
15348	TransformingMultiClassifier)
24172	e51
24134	7.0)
5916	explain(CandidateSegmentGroup
10676	reduction,
15001	(classification)\n");
14611	i=0;i<array.length;i++){
690	Mike
21863	sequenceClassifier.getExplanation(place.seq);
15306	e.maxF1(),
11194	subpanel2
11182	subpanel1
24177	e59
12313	mySubstring.lastIndexOf(s);
8340	SequenceAnnotatorLearner
5919	crf
7574	cachescore
19618	//this(false,
3871	TrieNode()));
22064	evaluated.
12282	mySubstring;
470	Example
20895	getLearnerParametersHelp(){
22726	evaluate(SemiSupervisedClassifierLearner
21861	explainedSeq.put(place.seq,
1364	"ignoring
14650	if(last)
23276	System.err.println("error
13455	update_A(A_neg,ftr,i,j);
1025	collin's
11716	base.documentSpan("DocPerLineTestData.base@line:5");
23313	testStrings
17422	folds,
21378	settype
17825	sigacceptrate
15679	tmp2/Math.log(2.0);
19594	Margin
24181	e66
23503	"+train[i].size()+"
24182	e67
17915	pos="+pos);
15195	fpColor();
23675	logFactorials
21307	SaveParams
24178	e61
3850	while(node!=null){
7591	subLabels;
24179	e62
22994	factorw_min
24180	e64
2177	(curLabel.end<compLabel.end))
9918	k<schema.getNumberOfClasses();
21795	System.out.println("weight
14442	ccg's
15811	String("Make
13277	Link("2","3","left"));
383	logistic
24183	e69
17224	folds;
21818	csd
8706	exprelength
10320	if(example.getLabel().numericLabel()>0)
7154	reduction;
11408	templabels
16919	lastY++)
6510	increase
24184	e71
21920	reduction=
13218	core
14060	Integer
11670	knnclassifier
14681	annLabels=null;
7197	document=answeredQuery.getDocumentSpan();
13495	initialExpLoss(double
19124	name==null
11700	blamk
22801	getDocCounts(Feature
4638	"Subpopulation
13038	Option
15882	//uncomment
23753	2.6582715747884495E54,
2271	ops=boundaries.get(s);
7905	house
22102	pattern){
1464	getresourceasstream
22589	nameOfFileToView=s;
8273	from(s).left().token(-i-1).prop(tokenPropertyFeatures[j]).emit();
6533	avoid
8447	computeConfidence(sequenceAnnotator.getSequenceClassifier(),
22201	labels.setAnnotatedBy(annotationType);
23426	LearnerTest("toy3",new
1422	getProperty(String
7107	testclassifierparams
9099	p(k)/p(k-1)
1276	"+f);
20556	this.documentLooper=documentLooper;
24129	(double)
7971	unused
12106	compressSGM(SGMExample
21203	"+System.getProperty("java.class.path"));
9095	k4);
24006	coefficients.
23286	pipedoutputstream
4980	addSubView("Ids",new
3584	ex.printStackTrace();
18584	mean[0],
18025	SampleFE.BAG_OF_WORDS;
4897	cds
2123	out.println(createXMLmarkup(currDoc.getDocumentId(),labels));
10719	setdisplaydatasetbeforelearning
11831	"cmu.andrew.official.cmu-news-2674_0",
23650	9.255462182712733e-03,
20682	SortedMap<String,Double>
11994	(with
21815	cdv
19866	map.put(object,weight);
3437	this.sequenceLength
762	i.hasNext();
3707	//for
3829	this.length=length;
5162	TextBaseManager(String
14640	o[cur_order[2]][l]+o[cur_order[3]][m]);
9859	subdocument
24394	tbman
23982	coefficients,
21522	cdf
16233	algorithm",
8313	usecompressedchartype
3533	cde
18896	Unix
16285	aggressive)
2402	remove
15198	mpColor();
404	finalLearner,
14927	Loss:
13346	Natural
14217	additionalparameters
1003	getnumberofepochs
10788	e);
14908	testSet=SampleDatasets.makeToy3ClassData(new
18504	}catch(bsh.EvalError
5284	corresponds
1937	according
8025	ProbabilityFactory()
9909	log.debug("viterbi
13486	w=0.001;
18150	McCallum,
2938	splitPane.setTopComponent(controls);
7816	Logger.getLogger(this.getClass());
10290	**FIXME**
22765	userLabelProp){
12458	shortForm.length();
1609	innerLearner[i]
11756	blank
1385	"+ex);
11362	externalLabelFile)
20656	numPos=0.0,numNeg=0.0;
106	return
2051	if(s.size()!=doc.size()){
4538	framework
8684	if(lineMatcher("a-zA-Z",line.substring(i,i+1))){
17169	j=partition.get(k).iterator();j.hasNext();)
23843	1.99294274616152E228,
22908	coef
4078	baseLabels,
17614	estimatePoissonWeightedLambda(
19813	OrderBasedTransformLearner
14670	'true_name'");
10706	(SequenceAnnotator)edu.cmu.minorthird.util.IOUtil
11033	resultToShow;
1846	log.debug("closed
12305	ch)
15325	UITest(Class<?>
24298	e302
24299	e304
3279	getAdditionalParameters(){
14517	(Iterator
24300	e306
22969	colt
1831	e){
20667	wgtNeg[exNeg++]=wgtTot/SCALE;
16664	opt=processedArgs[k];
5647	adds
16459	DOC
7307	super.init(base,viewLabels,editLabels,statusMsg);
18345	);*/
14851	toyTrain
11409	lastindexof
23999	SPEED:
17905	usage("missing
10795	replytoannotator
7415	dataset.iterator();
13651	converts
12064	saturday
667	edu.cmu.minorthird.classify.sequential;
24297	e300
21992	setreduction
19197	getX()+","+getY()+","+getInner()+"]";
15987	uncomment
14883	stats2[2]=e2.maxF1();
12808	annotationType,String
14325	if(document!=null)
14106	getcolumncount
6688	MoveOnlineDocumentCursor("Down",+1));
13382	SMOOTH_PARAM
20967	testData=toDataset(s,false,-1);
7884	sampleDocs[0]);
23209	Append
4299	mainType
23279	poOut.close();
7102	IOUtil.saveSerialized(evaluation,save.saveAs);
10524	script=Globals.DATA_DIR+"test.bsh";
21094	trainer,
15180	chi
21233	FileInputStream(source);
12895	forceUpdate
4472	suite
11542	Tester.multiEvaluate(train.learner,d,trainTest.splitter,signal.cross);
18928	useAdvanced=false;
4353	[options]");
12014	lastly
23110	TFIDFTransformLearner
19782	prediction?");
5588	Parent:
11283	multiclassifier
8598	Double.NEGATIVE_INFINITY)
15928	crfModel.apply(seq);
5642	textbaseentry
21410	Node(stringEx);
9500	fixedtestsetsplitter
2266	boundaries,
6159	fmt.format(tp)+"
20826	ClassifyCommandLineUtil.Learner.ClassifierLearner
9503	splitterparams
4541	evaluation
17974	saveFile=args[4];
22148	newSpan=
13798	if(selectedType.equals(type))
14422	OutputStreamWriter(new
4870	(lc.endsWith("ly"))
2922	this.controls=controls;
8226	setUseCharType(boolean
4790	numDoc){
18921	boolean,
14673	post-name
4377	evaluating
14480	signatures
4857	Token
23157	java.io.PipedOutputStream;
17321	StatusMessage(),labels,readOnly);
17347	labelInstance(query);
1000	historysize
8087	Double.NEGATIVE_INFINITY;
10222	TreeSplitter
18591	(N-1);
14159	TextLabelsLoader().saveTypesAsOps(annotatedLabels,save.saveAs);
10908	classLabel=labels.hasType(s,spanType)?+1:-1;
23266	missed
3570	ClassNotFoundException{
17648	lambdaEstimateVec[0].getParameterization();
16867	log.debug("viterbi:\n"+viterbi);
2747	SaveLabelsAction
1043	java.io.File;
11238	ByteArrayOutputStream
15746	defaults;
384	regression.
1717	closure.
392	regression,
23373	System.out.println(type+":
19343	fixes,
23870	7.590705053947223E286,
7863	initializations
6790	statusMsg.display("Document
5302	until
3565	serialVersionUID=20080303L;
3089	horizontal_split
4761	print(){
2655	b=new
9685	assigndefaultlabels
4334	.println("Either
1040	globals
9940	ClassLabel.positiveLabel(+1.0)
11487	i=0;i<annotations.length;i++){
14869	FileOutputStream("SVMTest.classifier")));
8971	c_pm);
2745	status=i.getStatus();
11255	JProgressBar();
3758	nextFoo()
10815	this.zoomedOut=viewer1;
23687	19.98721449566188615,
4482	"-learner",
2021	ProgressCounter("saving
7696	annfulllabels
14624	o[i]=transformToken(s[i],(i==0),(i==s.length-1));
22015	tbManager;
11746	parts",
18637	<code>Type</code>
14383	superclass
23597	prior="
13294	TransformingMultiClassifier(MultiClassifier
21558	(highestNegativeExample!=null
17245	k=0;k<splitter.getNumPartitions();k++){
2795	jlist
4791	Double(array[PF].doubleValue()/(array[TF].doubleValue()+2)*
2834	getsize
18802	editor.setContent(instanceMap.get(classBox.getSelectedItem()));
20797	RefUtils.modify(o,s);
17387	v.errorRate();
23837	3.856204823625808E215,
9810	if(iz<1)
13583	(ex.getLabel().toString().endsWith("POS
6002	j=0;j<truthBox.getItemCount();j++){
1832	getNewException(e,",
9433	HREF=\"http://minorthird.sourceforge.net/tutorials/TrainTestExtractor%20Tutorial.htm\">TrainTestExtractor
10232	clever/expensive/etc
7147	AnnotatorLearner
11336	modification
316	multidataset
10686	tokenSpan=s.subSpan(j,1);
7152	seqData;
23626	n,double
6751	write
21357	CharAnnotation(int
10346	falseData=null;
24144	<tt>Math.round(binomial(n,k))</tt>.
22648	ld.getCLP().processArguments(args);
19437	token's
14940	l.setDoProbabilityEstimates(true);
13092	-baz</code>
13924	caching
19174	this.x=x;
8134	//System.out.println("p(cand|t,x)="+ProbSigmaGivenTauX(candidate,tau,vlow,vup,xr,xp,wr,wp,vbeta)+"
9201	c_pm))
12965	GridBagConstraint.
21738	imports
11741	Course",
13270	setLinksMap(Map<String,Map<String,Set<String>>>
9684	getinputprop
23976	coef[i]
21768	MyIterator(),instance
21283	log.warn(c+",
23556	prod_f
20196	precede
8699	expression
10181	toDetails(){
11173	selector
17632	Probability
14212	mixupparameters
13180	candidateFinder){
10858	Color.lightGray);
21157	if(numSteps>=0){
7587	splitting
7075	CommandLineUtil.TestClassifierParams
17592	"+vCnt[i]);
20590	for(Iterator<Segmentation.Segment>
18089	this.gamma
5690	srciterator
17403	"+stats.length+"
23148	replaces
4987	ControlledViewer{
4860	stem(String
4557	assertequals
20674	c.setPriorNeg(numNeg,numPos+numNeg,0.5,1.0);
4854	(Iterator<Span>
2080	replaced
10239	features,
16045	g=new
11159	DataClassificationTask();
9925	g);
8236	features.
17046	stratification
2018	out=new
11047	Multiple
22816	features:
18514	labels=FancyLoader.loadTextLabels(args[pos++]);
19722	rommalearner
13271	linksMap){
8146	rwrapper
375	finalLearner;
9003	tails
17096	requestMap.put(f[0],f[2]);
13947	filteredMultiClassifiedDataset(){
3433	sequenceLength
10994	SELECTABLE_TYPES
334	javax.swing.JPanel;
20358	Removes
20370	SHORT
2257	this.span=span;
14816	testData=DatasetLoader.loadSVMStyle(new
14810	//get
15635	loadlines
21295	redirect
10608	seqLearner=new
20426	setannotationprovider
6754	"guess"
8153	edo
5518	if(parentDocMap==null)
10948	onlinebinarytextclassifierlearner
12009	functionality
15839	CRFDataIter(SequenceDataset
2341	typeset
10066	Math.log(
22053	ahead
19994	from(span).left().subSpan(-2,2).emit();
21392	(String
8229	useCharType;
7294	OnlineLearnerEditor(TextBase
13725	actionEvent
22678	edu.cmu.minorthird.classify.semisupervised.DatasetSemiSupervisedClassifierTeacher;
1004	setnumberofepochs
23873	3.287218585534299E293,
6180	mpColor(){
2945	if(controls.preferredLocation()==ViewerControls.LEFT){
10968	edu.cmu.minorthird.classify.algorithms.linear.NaiveBayes;
19576	multineglabel
17024	bestendy
15212	testiterator
9542	v.setSuperView(this);
24231	e159
24095	21</tt>.
9720	329-344
11776	FIX
24017	while(
5308	dstName+"
12151	"abbrev";
22942	positive,
15164	features*/
5061	String[props.length+1];
13824	positive.
17483	MessageViewer
19396	charHi
15509	"+features.length+"
9915	accumPos
1626	innerLearner[wrongClassIndex].addExample(
24228	e153
22675	edu.cmu.minorthird.classify.relational.RealRelationalDataset;
2562	javax.swing.event.ListSelectionEvent;
24227	e151
24230	e157
21749	editedspan
24229	e155
2145	labels.getTextBase().documentSpan(documentId).getDocumentContents();
9405	getaggregators
14492	allNames.add(sp.asString());
17622	Estimate("Naive-Bayes","mean",tm);
21707	editSpanCursor=editSpanCursor+delta;
5257	dstName){
11216	errorPanel.add(console.getMainComponent());
16857	log.debug("schema:
7034	jtabbedpane
10030	onlineclassifierlearner
23508	assertEquals(totalSize,totalTest);
24232	e161
19226	insets
24233	e163
17396	IllegalStateException("number
10109	positive;
14800	trainFile="edu/cmu/minorthird/classify/testcases/a1a.dat";
24234	e166
994	collins
2845	setenabled
24235	e168
17442	this(5,0.5);
19380	series
925	update(String
6356	Color.blue,2));
4765	array=tokenHash.get(next);
2366	closurespans
6520	teacher-learner
21820	ClassifiedDataset(csd.adaptedClassifier,csd.sequenceDataset);
5538	getChildMapping(String
11052	BasicCommandLineProcessor
18171	MultinomialClassifier();
5980	NULL_TRUTH_ENTRY="-compare
5624	compareTo(MapEntry
24237	e172
21264	findSavedAnnotatorFromStream(String
5703	retokenizing
24236	e170
9002	remaining
1700	operations,
19773	+"\t"+
12776	labeling.
807	Phi(viterbi),
24240	e178
10172	otherLabel.labels[i].bestClassName());
1752	operations:
24239	e176
22736	trainData,SemiSupervisedDataset
24238	e174
20263	Eg,
16505	getUnlabeled()
330	null
4991	TextControls();
11623	s+"]:
16914	trace[t][y]
20872	this.lnr=type.lnr;
17066	subpopulationId
10924	negClassLabel=textLabels.hasType(docSpan,"NOT"+spanType)?+1:-1;
12171	trueNegatives
12270	extractAbbrPairsFromString(String
5292	dstName);
1646	"+schema.getClassName(i));
7314	ocdEditor.setSaveAs(saveLabels);
8365	System.out.println(&quot;confidence=&quot;+d.getConfidence()+&quot;
15156	toString(int
14411	outFile=new
10868	Color.green);
13718	ControlledViewer.
7492	if(useBudget)
10478	outcome
9009	t,g,my_k;
1988	ObjectInputStream
9073	Math.sqrt(my
24241	e180
24242	e182
19037	if(type.equals(double.class)){
20941	RandomSplitter<Example>(.7);
18845	JLabel("[Reminder:
2637	this.viewLabels=viewLabels;
6917	checkIfAdded(int
21322	setTrainingParameters(TrainClassifierParams
7141	reweightinsttranform
14519	System.out.println(++counter
13886	incorrectButton;
2399	labelinfo
24245	e188
20173	if(this.set==null)
4529	m=(UIMain)mainClass.newInstance();
9218	(int)(V/f5));
7039	insert
24243	e184
18204	countsFeatureGivenClass=new
24244	e186
12343	shortTokenizer;
2685	valueChanged(ListSelectionEvent
12297	this.base.substring(this.lo,this.hi);
1081	markup
24052	<tt>log<sub>base</sub>value</tt>.
3888	toString(StringBuilder
10573	if(validClassNames[i].equals(name)){
21986	preprocesstextforextractor
21173	graphicCounter.setMaximum(stepsCompleted);
21087	multitraintestparams
23871	1.2296942187394494E289,
20918	setCross(boolean
18599	NB.nextInt();
24250	e198
21585	EditSpanProperties("Props"));
24249	e196
5862	(SegmentDataSequence)data;
18342	DatasetLoader.loadFile(fileOfCounts);
11057	ClassifyCommandLineUtil.SimpleTestParams();
24246	e190
2859	getviewport
21533	setstate
15405	StackingParams();
24248	e194
6949	viewLabels=textLearner.annotatedCopy(editLabels);
9616	reduceExtraction2Tagging(AnnotationExample
24247	e192
18635	<code>x.setP(Type
16038	compresses
209	iterator
23752	6.041526306337384E52,
23566	Pr(-i)
4333	!mixupProgramFile.exists()||!mixupProgramFile.isFile()){
6035	if(displayType!=null)
3843	MyResultIterator(span,accum);
9930	fp+fn;
9160	*[0,
6622	styleddocument
11186	//subpanel1.add(new
21142	step){
16438	underflow
19748	predictedClasses,ClassLabel[]
19997	inst=fe.extractInstance(span);
16040	compressed
23555	Pr(instance|class)*Pr(class)
10514	FancyLoader.loadTextLabels(script);
11998	num)
9680	tagset
3977	setContent(selectedFile,true);
13832	ManyVsRestLearner(String
7562	hyperplanebias
16599	if(pos+1<args.length){
1597	VotedPerceptron(),historySize,epochs);
21813	this.adaptedClassifier
5053	Object[s.size()][props.length+1];
6401	statusMsg.display("current
735	token."
4024	chooser
1869	docId=(String)docList.get(i);
13194	detailMap.get(s);
4066	editor;
7536	WeightedExample
16735	father
10014	positives
4126	editor=
23964	2</code>.
22319	getregexgroup
2575	selected
16747	if(line.trim().length()>0&&line.charAt(0)!='#'){
4150	layout
11834	"cmu.andrew.official.cmu-news-2527_0",
21866	adaptedsequenceclassifier
8135	p(sig|t,x)="+ProbSigmaGivenTauX(sig,tau,vlow,vup,xr,xp,wr,wp,vbeta)+"
4843	gethscore
1737	importing
10778	ReplyToAnnotator();
13566	A_neg.get(feature);
16424	averaged
7500	i=x1.featureIterator();i.hasNext();){
18562	Poisson(15.0);
2792	actionevent
2292	linenumberreader
17358	labelInstance(Span
16937	schema.getClassName(y)
16439	votedcount
15817	labels[];
16499	unlabeledExamples=new
12389	((tmpIndex
16351	vneg_t.increment(neg_t,count);
18651	<code>x.getAllowedPValues()</code>
14919	"+e1.errorRate());
18157	editor,
23460	this.numSites=numSites;
13186	detailMap.clear();
7962	SplitTokenizer");
6782	LabelDocument
16801	featurePattern;
8742	tmp.split("\n");
24252	e202
15676	Math.log(a+b)+Math.log(a+c);
24251	e200
22022	TextBaseManager("root",rootLabels.getTextBase());
21106	counters
1974	policy("+policy+")
5740	dos
24255	e209
2824	contextwidth
24254	e207
3127	ucbox
18107	Poiss(pG/(1-p))
6313	spansWithDocumentMap.put(documentId,(spansWithDocument=
24253	e205
18787	sendSignal(OBJECT_SELECTED,instanceMap.get(classBox.getSelectedItem()));
10279	above.
21766	instance.binaryFeatureIterator();
20869	type.learner(s);
8932	dr,
8942	f4,
15686	bias
9216	dr)
11451	"+Tester.errorRate(c,dataset));
11722	"stime",
6799	AddDocuments();
12177	accumulator,
1692	Labels
11860	American
10634	features";
14924	F1:
7734	accumulator.
20319	SetResult<String>{
18307	stopping
20007	<li>
24339	(SemiSupervisedClassifier)batchLearner.batchTrain(dataset);
17732	Double(tauPost[i])
17526	vCnt[i];
2990	content
7805	statistic
11232	window")
17098	oldProfForRequest=req2ProfileMap.get(f[2]);
3125	applycontrols
23251	Task
17712	tau[i].length-tail+1
8943	f5,
5893	allocModel(SegmentDataset
5842	ds)
9215	f5)
18677	validSubclasses
8664	punctuation
23570	mu(+)
16268	counter:
15938	Explanation.Node(cmmClassifier.explain(sequence));
8157	runif
12414	((currSentence.length()
8940	f1,
18155	EM.
7932	sentence
343	edu.cmu.minorthird.util.gui.Viewer;
3790	collection
9197	1.0))
24262	e224
11507	do:
21757	instance!");
14579	lowRisk=(tn.indexOf(DIV)==-1);
24261	e221
22104	newLabels=null;
3434	MutableCandidateSegmentGroup(int
1978	closeLabels(Set<String>
24264	e228
4245	JTextField("loaded
24263	e226
16055	k=1;k<=g.getMaxWindowSize();k++){
23666	3.333155636728090e-03,
9708	Fortran
20151	extension=new
3720	encapsulatingannotatorloader
3833	root=new
11076	annotateData(MultiClassifier
8941	f2,
15961	getmaxiters
3997	this.setVisible(true);
20690	prior){
7535	i=cache.listIterator();i.hasNext();){
15728	d_value
743	MultiClassVPClassifier(schema);
11981	"I-MISC"));
16757	accum.add(value);
15423	DatasetClassifierTeacher(stackedDataset).train(baseLearner);
23370	"+labels.getTypes().size()+"
24256	e211
13850	answeredQuery.asInstance(),
13076	option/argument
5697	mutabletextbase
24257	e213
23022	featurePattern)
1976	typeSet
10847	selection
17342	learner.nextQuery();
10006	schema.getClassName(previousSeg.y);
24258	e215
16804	featurePattern,
24259	e217
1304	pattern
24260	e219
1133	(props.getProperty(REPOSITORY_PROP)==null)
1865	doc
16135	textLearner=obtcl;
8856	zero.
4502	"-spanType","true_name",
9135	1.0);
24272	e245
17141	userSplitter.split(users.iterator());
16964	t,lastY;
7689	num_partitions
24271	e243
24270	e241
137	provide
11407	externallabelfile
22167	ignoreCase=statement.getIgnoreCase();
18679	selecting
17584	d="+d);
5322	dst
2874	fncolor
348	Wolpert,
6747	---------------//
17139	userSplitter=new
24316	log10value
12918	sendSignal(int
19342	William's
12357	((openParenIndex
5085	...",
17934	Buffers
2034	out.append("addToType
18031	ClassLabel.binaryLabel(+1
8819	this(1.0,"unknown");
9136	immed.
18830	reader=props[i].getReadMethod();
2749	serialVersionUID=20080314L;
16169	binaryFeatureIterator(){
24274	e249
24273	e247
24266	e232
1589	GenericCollinsLearnerV1()
5573	childEntry=
24267	e234
5549	childEntry;
454	split.getTrain(k);
24265	e230
16839	BinaryBatchVersion
16391	ins=new
19065	//selector.setInLine(isInLine(pname));
9057	Dk,
1439	inputstream
23322	"Tumbleweed
6018	resetDocumentList(labels,displayType,false);
9228	Dk)
9598	randomsplit
4158	col=0;
24318	log2value
12385	-1)){
5985	displayedTypeBox;
6106	wasEdited=false;
21747	spansize
1280	(obj!=null
564	serialVersionUID=20071015;
2621	repaint
19291	exec
9193	Dk;
15820	(tokens.length
24268	e236
2285	buf.append("</extractions>\n");
12138	Hearst;
22356	JTextArea(s.toLowerCase());
24269	e238
4525	this.mainClass=mainClass;
4270	this.truthBox=truthBox;
14727	System.out.println("Pre
24281	e264
24280	e262
24282	e267
3186	UnsupportedOperationException();
5843	ds;
10632	classifierLearner
20310	'null'
1436	TextBaseViewer.view((TextLabels)
24279	e260
2062	i=labels.getSpanProperties().iterator();i.hasNext();){
15567	stackingdepth
11879	RESULT
1854	if(warnings==MAX_WARNINGS){
16220	Minimization
14104	randomaccessdataset
9694	defspantype
24283	e269
12396	StringTokenizer(shortForm.asString());
18779	i=instanceMap.keySet().iterator();i.hasNext();){
4313	-mixup
16690	s.close();
24275	e251
18418	innerLearner.setSchema(schema);
7796	accumulators
24276	e254
4635	((Example)o).getSource();
24277	e256
16072	Random(0));
7135	untested
17300	TextBaseEditor(String[]
9583	testList.iterator();
21673	spanLo="+spanLo+"
16494	...";
990	markov
24313	instantly
23681	6.57925121201010100,
5024	doc.highlight(span,color);
23028	distances[i]
24278	e258
8698	certain
6028	log.debug("types:
555	getExplanation(Instance
12197	'"+
15437	//System.out.println("Stack
13115	shouldTerminate();
21647	"+editedSpans.size()+"
3984	f){
1136	props.setProperty(DATADIR_PROP,props.getProperty(REPOSITORY_PROP)+"/data");
22600	labelFile=new
7356	//base
13565	A_pos.get(feature);
18259	BasicFeatureIndex(combinedDataset);
1110	"+e);
23559	Pr(f|class)
2426	java.util.Map;
7170	setTaggingReduction(Extraction2TaggingReduction
22509	activeFeatureSet
8739	getMessageLines(String
971	main.add(classPanel);
2818	editorpane
13253	type=link.getType();
20062	annotationProvider){
9797	raw()
8799	patternstr
10092	MultiClassLabel(){
632	citeseer
5666	srcentry
14270	(TextToken's)
10348	did
15788	maxIters
1881	loStr=advance(tok,in,file);
4419	exit
23402	obtain
5814	labels[i]
10254	val=example.getWeight(bestFeature);
12938	"+signal+","+argument+","+
20189	trace(){
8194	one-token
22890	ff=j.next();
15593	operiter
2506	instB){
10161	IllegalArgumentException("null
11551	cross
22337	getTokenizer();
6098	truthType=(String)truthBox.getSelectedItem();
13717	Controls
19955	"["+folds+"-Stratified
15610	Globals.DATA_DIR
1873	in.close();
21718	getEditSpan(editSpanCursor));
14144	log.error("Cannot
23377	acquires
3551	classnameset
16569	shouldTerminate(){
15253	super(schema.validClassNames(),
18924	Fraction
265	private
2641	this.statusMsg=statusMsg;
24055	Math.log(base);
16452	dec
8591	logplus(double
15057	testsampledata
8289	label=ClassLabel.binaryLabel(id.startsWith("pos")?+1:-1);
17400	referenceStats);
23455	numSites,int
21326	CommandLineUtil.createSpanProp(signal.spanPropString,trainTest.labels);
20723	jpos
15668	den
4135	"Save
9995	equivalent,
7876	tokenizer.splitIntoTokens(sampleDocs[1]);
18101	failures
150	trigger
4137	specified]",groundTruthLabelsFile,
9466	"+train.fe);
16923	t-maxSegSizeForY);
1291	log.info("Error
15764	argTok
13703	innerLearner.get(i).completeTraining();
15108	List<Pair>
15716	mutual
24035	IllegalArgumentException();
19447	TextBaseEditorPlusLabeler
22283	statementlist
18401	innerLearner,boolean
23593	//System.out.println("n.Pos="+numPos+"
20005	summarized
12268	ioe)
6817	"+file+":
23661	4.166319691996922e-03,
15438	Splitter:
3118	viewerframe
6674	Doc(s)"));
10964	classofs
13024	monitorselections
23180	this.task=t;
8774	readBsh(File
20609	setsemimarkovlearner
12401	currSentence.lastIndexOf("
9060	Ds,
3993	GridLayout(0,2));
7440	BBMira
2972	GridBagConstraints
10751	getTokenizer(){
4784	System.out.println(token+"
21455	exp(
12134	Biomedical
17510	statusField.setText(argument.toString());
12748	edu.cmu.minorthird.text.learn.MultiClassifierAnnotator;
17748	Double(tau[i])
20277	newSet=new
17378	referenceStats){
23571	mu(-)
12974	monitorSelections(final
2282	lo="+lo+"
14723	e2){
685	Models:
21968	for(Iterator<Example[]>
588	TitledBorder("Inner
13408	(Iterator<String>
7489	useBudget="+useBudget+"
23623	batchTrain\n");
5646	containskey
10155	sets;
16685	format){
1085	properties
10238	Selects
4017	defaultDir){
13544	W_Neg
3577	className=
11101	(testParams.loadFrom==null)
20435	tokensetresult
18750	className;
4562	dlv
3681	className)
4336	JFrame("TextBaseEditor");
14759	risk'
2956	x1=0;
1564	marker
7423	instance);
23579	mu(.)
3452	conventions--e.g.,
14156	"+mixup.fileName,new
8850	Valid
19293	dll
3323	cv=new
9928	accumPos,
926	className,
17298	spanEditor;
14598	s[]=str.split("[\\-
1543	other
2836	movedocumentcursor
19460	viewer.getTruthBox().addActionListener(
3440	maxWindowSize;
11795	testLoadDirectoryOfFiles()
22451	10-fold
14743	div
9480	expt
20179	applyFilter(Filter
21065	dim
22661	myclp
13162	"+getLabel()+"
5945	startscanfeaturesat
1221	parameter
2554	javax.swing.AbstractAction;
2969	x1=1;
14689	textLabels=(MutableTextLabels)FancyLoader.loadTextLabels(args[i+1]);
1172	dir
11010	AdaBoost.class,
10012	non-NEGATIVE
7989	setup
17629	tauSD,
18254	unlabeledDataset.iterator()
16130	(OnlineClassifierLearner)train.learner,signal.spanType,
14503	FreqAnal(labels,predType);
17845	"TestClassifier
12524	extractabbrev
2838	loaddocument
910	w_t;
21252	redirection
4382	refreshprogramaction
11129	ClassifiedSequenceDataset((SequenceClassifier)c,
23376	technologies
4645	instance){
17319	if(file!=null)
4192	msg,File
2693	context
8237	'*'
22936	if(regret)
20899	used.";
4550	traintestclassifier
4111	NestedTextLabels(new
6940	AddDocuments(){
9175	dl)
18732	line+"'
8931	dl,
11179	panel.setLayout(new
4688	transformedviewer
4210	//private
14290	t){
13564	updateMargins(Feature
2765	addChangeListener(new
1977	holding
2542	diff
24026	(i>longFactorials.length)
263	MultiDatasetClassifierTeacher
14917	e1.extend(c1,testSet,1);
1617	MultiClassClassifier(schema,innerLearner);
21124	this.depth=currentDepth++;
4734	LAST=4;
22300	getfilestoload
10314	newData=new
11804	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2527_0"));
20441	setresult
14794	org.apache.log4j.Level;
6941	eSpan=(editedSpans.get(i));
11725	"location",
3546	getsubsequenceexample
15413	params.setStackingDepth(depth);
3951	subspan
14389	List<CharAnnotation>
4352	<programFile>
17873	System.out.println(msg[i]);
16615	"+itx);
14616	transform(String[]
21767	UnionIterator<Feature>(new
9331	L_type
22372	"Susan",
1819	if(line.trim().length()==0)
12308	fromIndex)
23719	479001600L,
20843	if(s.equalsIgnoreCase("multi"))
13310	i=0;i<classifiers.length;i++){
6404	viewing
16152	InstanceFromPrediction
6845	Complete
15331	(IllegalAccessException
712	String[historySize];
5742	res
18481	size;
14938	vastly
10361	size:
16931	t);
22654	SmartVanillaViewer(labels));
21440	suitability
1123	System.getProperty(ps[i]));
23310	getmaximum
640	debug
17535	var)/mean;
5111	getspan
8047	Generators
3123	transform
13377	size.
14256	base.loadDocument("neg."+i,neg[i]);
6406	JFrame("TextBaseViewer");
13970	this.cd=cd;
2154	unsortedLabels.add(new
13085	FILE
7291	log.debug("construct");
9553	RandomSplitter<T>
24023	fac1(int
23109	counts.
7859	setUp()
20045	counts,
19661	j.hasNext();)
5955	nestedcrf
7211	log.warn("ignoring
19433	Spans.
8511	SequenceAnnotatorLearner");
23304	join
12490	abbreviation
10400	(pos,neg
13852	onevsalllearner
18690	validSubclasses,String[]
18947	while(i<props.length){
6470	red
16155	previousLabels){
5400	newLevelName,String
4293	debugger;
5992	getGuessBox(){
4553	req
4283	debugger=
16096	sizes
7055	explainannotation
10768	TextBaseLoader();
6011	initializeLayout(displayType);
23826	3.96993716080872E192,
850	InstanceFromSequence.fillHistory(
6243	synchronized(vList){
7457	cache=new
18413	(!answeredQuery.getLabel().isCorrect(predicted))
10519	log.info("testFilewithLabelFile");
17048	<p>Constraints
2295	printstream
19936	Logger.getLogger(StratifiedCrossValSplitter.class);
7990	getrootlogger
11065	getDatasetFilename()
11766	LINES
19164	AbstractSample{
14987	v=svm.svm_predict(model,x);
11261	gbc.gridy=3;
13005	trapped
6056	JButton(highlightAction);
20951	loadFrom(String
1287	invalid
9818	speed.
12143	description
22545	id="youNeeekID#"+subpops.size();
424	i<innerLearners.length;
23723	20922789888000L,
1461	sgmlpattern
7560	numericlabel
21953	System.out.println("error
6394	SpanMarkup(diffSpan,colorByStatus[status]));
17017	viterbisegmenter
12572	infile
20114	c=result.asBag().getCount(s);
16309	vpos_t=new
13378	Map<Feature,Set<Index>>
14934	expected[3]=Double.POSITIVE_INFINITY;
11923	"BASKETBALL
17931	jcp.processArguments(args);
15822	sequence[i];
12029	country
1628	MultiClassClassifier
19963	AnnotatorLoader,
15860	advance();
22092	re,
20243	if(index<0){
319	override
1141	(props.getProperty(SGML_MARKUP_PATTERN_PROP)==null)
15367	useLogistic=true,useTargetPrediction=true,
15050	getresource
16454	lneg_h
11263	gbc.gridy=4;
11561	Yang,
23274	bar=scroller.getVerticalScrollBar();
1069	raw
12819	"[EmptyLabels]";
18819	BeanInfo
21194	AnnotatorLoader{
12275	StringSpan(currString,offset,offset+sentence[i].length()));
12239	FileReader
11448	"+argv[1],((Visible)c).toGUI());
24354	levelName,
10762	AnnotatorRunner
8671	punctCount
5476	following
19073	Object[]{selected});
23186	l,JButton
4187	gbc.gridy=1;
13727	JButtons,
9333	oper,String
13195	"[FilteredFinder
17439	folds,double
23215	Re-initialize
11931	Friday
12432	(Character.toLowerCase(longForm.charAt(lIndex))
23413	NaiveBayes(),1.0/7.0,1.0/7.0));
2448	'rankings'.
16527	DatasetLoader.loadFile(file);
23112	TObjectDoubleHashMap
14210	traintaggerparameters
9856	New
6770	"+importType+"/"+exportType);
4540	testsuite
17757	(tauSigEstimateVec[i].getPms().get("tau")
8869	Patchwork
19411	documentSpan().asString(),
167	advantage
6063	gbc.gridy=2;
17743	lambda[i]
15065	createtempfile
24351	levelName;
8600	qlog;
23169	mainThread,readerThread;
8428	Instance[]
14680	textLabels=null;
8773	//don't
9013	k,i;
14037	MultiExample)||
20794	showTestDetails=true;
17843	-learner
24077	rr;
46	getSchema();
21913	kwayclassifier
322	examplepool
7128	i=instance.featureIterator();
496	MutableInstance();
23046	"+ex.getLabel().bestClassName());
22463	rr'
2750	SaveLabelsAction(String
6914	JTable(table,colNames);
733	help
18752	classes.
4986	ControlledTextViewer
24348	Logger.getLogger(FilterTokenizer.class);
15985	modelspecs
20670	classes,
16126	OnlineBinaryClassifierLearner");
3151	element
1531	support
16885	bestSegments(CandidateSegmentGroup
5156	identify
18878	osName=System.getProperty("os.name");
23115	numDocuments=dataset.size();
2103	dir)
18813	JOptionPane(new
4681	table=new
4391	row
8775	dir,
15991	edgelinearhistfeatures
6876	JTabbedPane
11573	Classifier,Serializable{
16922	lastT=Math.max(0,
3408	suppose
3391	CandidateSegmentGroup
4032	componentfor
5445	newTextBase,int
2662	b.documentSpanIterator().next();
8158	probabilities
22215	if(statementType==Statement.MIXUP){
4329	stem=true;
8593	qlog)
6858	.display("Cannot
11265	gbc.gridy=5;
22767	this.userLabelProp=userLabelProp;
16933	seqSegmentInstance
16116	set_LabeledDataParameters(
4969	serialVersionUID=200803014L;
21232	is=new
13955	if(filterOnCorrectness)
5350	matchingSpan=currMapper.getMappedChildSpan(matchingSpan);
19570	weightedset
17649	Estimate[]
20569	learner.setSchema(ExampleSchema.BINARY_EXAMPLE_SCHEMA);
4789	array,int
4079	groundTruthLabelsFile,File
3627	tests
7428	getmultilabel
4280	JFrame
22573	dir;
19304	browser
8293	Example(fe.extractInstance(textLabels,s),label));
23412	LearnerTest("toy",new
19419	length-zero
18344	"DatasetLoader:\n"
5600	currKey=keyIterator.next();
2681	newLabels){
8403	ExtractorAnnotator,Serializable,Visible{
7267	getTo(){
10247	Generics
6740	add(saveAnnButton,gbc);
6738	add(addButton,gbc);
18169	learner=(ClassifierLearner)this.clone();
306	reserved
11772	FAILING
15077	multiclass
8978	******************************************************************
22330	extendlabels
9007	*****************************************************************/
23808	9.332621544394415E155,
3536	subpopid
21946	if(signal.spanProp!=null&&signal.spanType!=null){
18710	rootClass,boolean
23714	5040L,
21449	Gaussian)
17260	constraint-file
10100	binary=new
15283	"-spanType","fun",
9554	random;
18843	System.out.println("Help
20929	seqLnr.seqLearner=toSeqLearner(s);
17145	cross-val
6317	refreshSpanComponent(int
15587	rlt
13756	prefersToBeResized(){
8350	disk
4125	JTextField(errorString));
10146	expOdds=Math.exp(labels[i].getWeight(label[i]));
14744	window_size
13161	"+getExampleID()+"
6207	spans");
760	(Iterator<Example[]>
9842	clockseed
11367	loader.load(file);
9383	DatasetLoader.loadRelTempFile(new
21938	CommandLineProcessor[]{
16493	"Unique]
2511	random,
3916	lastIdList;
23308	closepipes
10665	TextLabelsAnnotatorTeacher(labels,spanType,spanProp).train(dummy2);
23408	SemiSupervisedNaiveBayesLearner(),0.0,0.0));
10343	bestThreshold=((Double)result[1]).doubleValue();
3549	getsequencelength
21715	editedDoc.highlight(getEditSpan(editSpanCursor),HiliteColors.cursorColor);
14431	outputstreamwriter
3448	derived.
14887	NaN
31	extends
13643	easier
5047	here
19091	numAdvancedParams++;
17982	"+dataFile.getName(),eval.toGUI());
5860	prevPos,
6256	cspan){
13272	CoreRelationalDataset.linksMap=linksMap;
2517	exB=instB;
3918	span,Collection<TrieMatch>
16009	FeatureFactory();
14502	fa=new
428	getSchema(){
1908	len=span.asString().length()-lo;
20980	FixedTestSetSplitter<MultiExample>(it);
11185	modification"));
22598	textBase=getTextBase(f);
7361	saveFile=new
4678	columnNames={"Feature
23868	2.946702272495036E282,
16750	inputError(in,line,file,"no
2883	super
721	Help
18780	log.debug("adding
2550	previouslabel
2161	overlapping
10566	getNumberOfClasses(){
23931	(n>k)
6961	Stores
21967	FileOutputStream(linkFile));
5982	NULL_DISPLAY_TYPE="-top-";
3416	a,b,c,d,e,ab,bc,cd,de,abc,bcd,cde.
10032	genericcollinslearner
11166	doMain();
11526	if(train.showData)
17212	j1=0;j1<testList.get(k1).size();j1++){
9509	setsplitterparameters
9652	if(useSpanType){
595	JScrollPane(mainPanel);
3027	if(prefix!=null)
18165	SemiSupervisedNaiveBayesLearner(int
13019	offer
9440	this.save=save;
20017	overloaded.
4539	testcase
11006	NaiveBayes.class,
15812	arithmetic.");
3620	getResourceAsStream().
22684	Logger.getLogger(Tester.class);
14211	taggersignalparameters
12840	Specifically,
14967	correct=0;
4042	returnval
7668	"+signal.spanProp+":"+val;
11782	base.documentSpan("DocPerLineTestData_WithBlanks.base@line:11");
14845	testing,
19129	(InvocationTargetException
17504	subViewer.canReceive(obj);
15965	getusehighprecisionarithmetic
14239	testing.
15120	this.TOP_FEATURES=num;
499	ithPrediction
9840	restarts
19386	getToken(int
19074	panel.add(selector,gbc(1,row));
6125	SpanRenderer
13492	w0=w;
18225	lables
19524	isBinary()
5135	derive
15708	Long.parseLong(args[3]));
10687	sequence[j]=fe.extractInstance(labels,tokenSpan);
18773	if(!rootClass.isAssignableFrom(o.getClass())){
9577	while(j.hasNext()){
10779	"reply";
2056	closureSpans!=docSpans");
6608	highlight(edu.cmu.minorthird.text.Span
11091	annotatedDataset.addMulti(newEx);
21683	under
3079	removeall
11074	(getDatasetFilename()
10470	i_gain
10560	String[validClassNames.length+1];
6548	edoardo
3265	CommandLineUtil.ClassificationSignalParams(base);
15681	//Compensated
19478	StatusMessagePanel(labeler,statusMsg);
9814	iz=iz+2147483562;
21588	nextButton=new
14509	eliminate
6058	DocumentCellHeightSlider(documentList);
5181	Null
1665	Provides
24333	DatasetSemiSupervisedClassifierTeacher(SemiSupervisedDataset
22447	.binaryLabel(label)));
20772	edu.cmu.minorthird.classify.ClassifierLearner
11930	tournament
7549	entries");
12567	charat
13536	cur_W_Neg
15571	crossvalsplits
9800	iseed1=40014*(iseed1-k*53668)-k*12211;
23323	Valicert
5393	documents.
14950	"+e2.averageLogLoss());
4588	run
8301	extractfeatures
10187	odds
5225	scenarios
22714	MultiDataset.MultiSplit
8023	rw;
23320	Acquire
615	adaboost
10280	pick
5640	textbasemappers
23023	this(featurePattern,"SoftTFIDF");
13847	ClassLabel.positiveLabel(1.0)
15748	CONVERT_TO_MINORTHIRD_HYPERPLANE=true;
21622	E"),
705	CollinsPerceptronLearner(int
19251	typeselectors
2843	save'
7920	BasicSpan("doc1",
23319	"Reuters
21883	TreeMap<T,Integer>();
4363	nestedtextlabels
21141	this(task,"step",numSteps);
16114	get_LabeledDataParameters(){
9439	save)
5297	this.getMatchingSpan(srcSpan,
7935	SpanTypeTokenizer("sentence",
2673	save.
4025	textfield
20775	clsLearner;
15702	c_value
3161	HashSet<Feature>();
19978	Annotation
14741	predtype
3359	gettrainclassifierhelp
11272	-help
24369	document.getId(),
3271	save;
11663	datasetindex
17907	somethingConsumed=false;
22493	taggedLabels.setProperty(span.getToken(j),tokenProp,tag);
5996	updateTextLabels(TextLabels
11787	"DocPerLineTestData_WithBlanks.base@line:6",
11105	IOUtil.loadSerialized(testParams.loadFrom);
434	Classifier[]
11709	base.documentSpan("DocPerLineTestData.base@line:1");
22113	newLabels=new
21774	newValues[i];
17374	checkClassify(ClassifierLearner
12760	((TransformingMultiClassifier)multiClassifier).getTransform();
15480	//LinksMap.get(from)
7818	test.
19439	charhi
11471	substrings
11597	tot=0.0;
4806	test,
3564	Serializable{
21215	'bar'
14876	e2.extend(c2,SampleDatasets.toyTest(),1);
13132	consumearguments
22106	parentLabels=
17362	annotatorteacher
17353	Unlabeled
7076	test=
23495	test:
20025	'bag
7079	test;
9807	2147483399;
1699	saved
10179	labelString=labelString+labels[i].toString();
18327	if(checkIncreased){
12508	(args[i].equals("-help"))
15900	MTFeatureGenImpl(options.getProperty("modelGraph"),schema.getNumberOfClasses(),schema.validClassNames());
9221	f4*r4))
23817	1.324641819451829E174,
17887	while(k<args.length){
16656	foo]");
5399	parentLabels,
5711	currinstance
1689	saves
11476	class,
1793	class.
171	teacher
7947	class)
14635	l=0;l<o[cur_order[2]].length;l++)
18429	numexamples
20073	setAnnotationProvider(String
21466	Polar
20793	showTestDetails(){
1918	IllegalArgumentException
4355	options:
15747	options;
4234	NestedTextLabels
17715	v[j]=tau[i][j-tail];
14884	stats2[3]=e2.averageLogLoss();
3587	class:
12848	Signals
16238	1988.
5873	options)
3104	getcontrols
10067	p/(1-p)
15160	f=featValues.get(j).feature;
4943	(CrossValidatedSequenceDataset)o;
22404	lowercase
17433	rs;
17912	subprocessor
16846	SegmentCollinsPerceptronLearner
12463	(bestLongForm.length()
4471	//Extraction
23374	"+j.next());
16349	vpos_t
2071	out.toString();
7369	this.setSaveAs(saveFile);
9965	Map<Segment,String>
19015	textField.setText(filename);
4087	program=new
3691	interpreting
681	Training
8004	newpattern
930	w_t[index].increment(
14522	counter
16496	Dataset,SemiSupervisedActions,
9592	settrainfraction
6524	Airoldi
4537	junit
17682	ProbabilityFactory.runif(1,
17992	GUI_OP
4655	"+e.getLabel().toDetails()),gbc);
47	Forget
20133	Subclass
10647	seqClassifier=seqLearner.batchTrain(seqData);
21692	editedDoc.highlight(getEditSpan(editSpanCursor),
1010	gethistorysizehelp
8701	counted
20288	filter(Filter
3615	asFiles
22247	extendLabels(labels,subspan,statement);
15162	sb.append(f.toString()+"
7987	textbasetests
15019	argv[])
8625	[at]
9569	this.trainFraction=f;
21801	newvalues
5253	srcName,String
7322	initializeLayout();
19438	charlo
22001	edu.cmu.minorthird.text.mixup;
11742	"sentence",
23690	27.89927138384089157,
17789	variability
4168	top.add(refreshButton,gbc);
7485	cache.add(new
9124	Math.log(my);
2957	y1=0;
2646	SaveLabelsAction("Save"));
13127	coloropts
11204	rv);
6887	tableScroller.getViewport().setView(makePropertyTable(span));
16117	this.labeledData=labeledData;
6119	Span[]
2322	startswith
23483	assertEquals(3,splitter.getNumPartitions());
11099	ViewerFrame("Training
22259	extendLabels(MonotonicTextLabels
12859	TEXT_MESSAGE=2;
23454	XValTest(int
8052	sd)
11160	task.clp.config(file.getAbsolutePath());
8373	sample1.train
20985	testData=toDataset(s,true,-1);
4	java.util.Iterator;
21086	simpletraintestparams
8294	ViewerFrame("Toy
10212	TODO:
20704	v+=(vWgt[i]*Math.pow(vCnt[i]/vWgt[i]-m,2))/(N-1.0);
20278	if(set.size()>0)
85	hasNextQuery(),
8700	happened
12158	"abbrevLong";
20136	name=result.getName();
1478	loadtextlabels
288	MultiDataset){
5818	length();
1727	closure
7296	key,StatusMessage
19926	chisquaretransformlearner
111	hasNextQuery();
829	J="+j+"
18415	numExamples++;
22265	labels.setProperty(span,property,value);
1593	this(innerLearner,historySize,5);
16915	fty[0][y]
3349	commandlineutil
6033	displayedTypeBox.addItem(NULL_DISPLAY_TYPE);
18853	editor.setContent(instanceMap.get(shortenedClassName(type)));
14695	annLabels=(MonotonicTextLabels)ann.annotatedCopy(textLabels);
4156	bottom=new
12943	"+signal+","+argument+
9815	return(iz*4.656613e-10);
8919	my_old
13013	getsuperview
15958	setmaxiters
6990	editedspans
19095	helpString=value.toString();
17459	trainIt.add(rs.getTrain(0));
6217	NULL_TRUTH_ENTRY.equals(truthBox.getSelectedItem());
18559	N_int
13952	filteredData.size());
19247	advancedparams
21640	type?");
3090	setleftcomponent
4251	j=0;j<box.getItemCount();j++){
3555	AnnotatorLoader
14839	//10-12
15846	featureLooper;
20487	committeeSize)
11447	"+argv[0]+"
2715	editorHolder.getViewport().setView(editorPane);
9584	"[RandomSplit
5406	prevDocId="";
14221	getBinaryClassifier()
4797	Double(array[type].doubleValue()+1);
12552	delimiter
5037	typeSpan=j.next();
22482	labels.setProperty(s,multiSpanProp[j],"_predicted_"+bestClassNames[j]);
6199	documentId);
10025	Segmentation.Segment(pos,pos+len,schema.getClassIndex(label.bestClassName()))
22784	BasicFeatureIndex(Dataset
2962	y1=1;
19738	CMM(Classifier
24326	pike
20014	result.emit()
8733	(LineProcessingUtil.lineMatcher("\\p{Punct}",ind)){
6162	paintDocument(String
20484	committeeSize;
16434	excount
921	s_t
23525	data.shuffle(new
12672	subviewlist
3050	ucBox;
11080	for(Iterator<MultiExample>
4548	addtest
12307	ch,int
6161	fmt.format(sp));
17869	textbases",
13146	exampleId;
15896	featureGen;
7199	Example[document.size()];
24362	splitIntoTokens(String
20401	StringBagResult(extend("usewords"),fe,uwBag);
17402	stats,double[]
9052	pp[k]
3022	transform(Object
2204	i=0;i<sortedLabels.size();i++){
18083	n=1,
7282	getfrom
10729	edu.cmu.minorthird.text.Tokenizer;
2923	this.viewer=viewer;
10053	previousclassname
1850	if(warnings<MAX_WARNINGS){
5131	"root"
14114	evalviewer
17208	oj);
16980	ClassLabel("*NULL*"));
19021	numTextFields++;
17278	inputlist
8467	startIndex...endIndex-1
6428	highlightaction
4999	textPane=new
2988	signals
20473	dictfile
19655	//averaging
16479	otherwise.
20396	FileReader(dictFile);
2732	documentId){
1729	policy
23667	3.204970228055040e-03,
20853	this.multi=type.multi;
19335	refactoring
8983	Rejection
20878	Paramaters
3716	bytearrayinputstream
10432	"+w11+","+w10+","+w01+","+w00);
21489	nextDouble(this.mean,this.standardDeviation);
19358	initializeLayout(){
21540	RankingPerceptron(int
17159	Collections.sort(requestList,byProfile);
2583	id***";
2006	ObjectOutputStream(new
7998	splitintotokens
19388	getTextToken(int
15209	iteratorToList(Iterator<T>
8160	poisson
22336	edu.cmu.minorthird.text.Tokenizer}
10039	bestsegments
8377	'new.ann'
9442	signal)
12850	signal,
8031	((Class<?>)rwShadow).newInstance();
12917	signal.
4138	saveButton.setEnabled(false);
6253	span,AttributeSet
7403	Nov
5332	Now
6202	.instanceIterator(truthType,documentId);
6248	ListCellRenderer{
10656	spanProp,SpanFeatureExtractor
15651	Not
13695	hasNextQuery(){
5660	filtertokenizer
3276	signal;
15823	TrainDataSequenceC
10446	falseset
3264	signal=
11094	option.");
20391	usewords(String
21601	--------------//
7312	saveLabels=new
18507	RandomSplitter<Example[]>();
13231	addSGM(SGMExample
18932	useAdv){
20428	getannotationprovider
16090	grouplist
15979	featureimpl
8480	toGUI(){
8950	MEAN_MAX
19062	TypeSelector(validSubclasses,inLineClasses,
2875	true_pos
6447	spanarray
8678	perc;
11715	base.documentSpan("DocPerLineTestData.base@line:4");
4812	array=tokenHash.get(term);
9286	arithmetic
10011	Collect
11881	SPANISH
856	sequence[j],
8808	Serializable
15607	super("LearnToClassifyTest");
13582	ranking.get(i);
16876	otherSegments,double
2546	"previousLabel";
12684	Backward,
19221	classBox.setSelectedItem(o.getClass());
3166	HISTORY_FEATURE,
5499	parentToChildMap.put(parentDocId,parentEntry);
17855	"TrainTagger
4726	spanType="_prediction";
18353	classifiaction
11721	this.checkType(labels,
20203	s.documentSpan().size()-s.documentSpanStartIndex()-s.size());
11307	resulttoshow
2245	this.tag=tag;
19399	charLo,int
2886	addchangelistener
10946	ClassifierAnnotator(fe,getClassifier(),outputType,null,null);
4582	mainclass
8430	sequence[j]=
1529	view
12561	shortspan
6889	pane.revalidate();
15867	f.ystart
20730	wgttot
586	innerPanel
19953	if(j%folds==k){
18037	checkSubPopIds(data2);
6558	edu.cmu.minorthird.text.Span
11411	wizard
9495	ViewerFrame("Experimental
22285	createlevel
22209	input=labels.getTextBase().documentSpanIterator();
21507	this.standardDeviation
11337	execution
21982	(span.getHiChar()-span.getLoChar()));
9813	//if(iz<1)
14559	span=k.next();
21068	getlearnerparameters
5882	addFeature(new
15254	getBinaryClassifiers(learners));
8631	pattern.
15148	Comparator<Pair>(){
11016	InfoGainTransformLearner2.class,
20430	deprecated
5738	sid
5890	NestedMTFeatureTypes(this));
12761	d=transformer.transform(d);
11276	jprogressbar
8463	ConfidenceReportingSequenceClassifier){
21350	list.add(argv[i]);
20353	pattern=
23627	pseudoCounts){
20566	ClassLabel(answeredQuery.getClassName(span));
23529	System.out.println("classifier
12478	falsePositives++;
732	history
9938	innerLearner[k].addExample(
11848	assertEquals(216,
9605	extract,
9608	extract.
20201	rSpan=
16689	s.println(prop+"="+propertyValue(prop));
16032	totalSize+=group.size();
15463	AugmentExample(SGMExample
11595	sim
5625	res=srcDocId.compareTo(o.srcDocId);
2013	extracted
8132	sig
19623	agg,
399	BatchClassifierLearner[]{new
10104	binary;
23970	Math.round(Math.ceil(value));
16592	CommandLineProcessor&&result!=null){
8275	from(s).left().token(-i-1).eq().charTypePattern().emit();
9785	d.getTime()%Integer.MAX_VALUE;
13884	JRadioButton
23218	mainthread
21744	getselectionend
19626	agg;
12369	-2;
13365	binary.
20041	binary,
21959	File(linkFileName),(SequenceDataset)dataset,
18288	totalCounts){
13070	optional
6539	completeTraining()
7755	accumulated
3075	setcomponents
19094	value=reader2.invoke(o,new
3580	"+className);
4102	if(stem)
12350	-1)
19103	if(javadocLink.indexOf('$')>0){
23031	d++)
7245	add(statusMsg,gbc);
18005	edu.cmu.minorthird.text.learn.CVSplitterTest;
13776	sd;
5803	-1,
6604	HiliteColors.gray,true);
7648	sd=
10616	super(fe,reduction);
6224	ZoomAction(String
7364	TextLabelsLoader().loadOps(base,saveFile);
5833	-1;
23197	poOut=new
580	TitledBorder("Final
1494	basefile
7214	seqData.addSequence(sequence);
4543	longtestpackage
3593	myClassLoader;
11896	PORTUGAL
12921	"+this+":
20433	asbag
1588	innerLearner;
17933	somethingconsumed
2275	ops.add(new
5472	vice
66	set
13803	getColoredValues(String
7830	Catch
5941	mtfeaturetypes
15711	PMI
18975	if(!(isInLine(pname)))
23034	distances[i][d]
17681	tau[i][it-1],tauSD)[0]
12861	OBJECT_UPDATED=4;
17762	lambda[K]
9551	information,
22613	if(textFiles==null)
13110	information.
13758	controllableviewer
1174	(dir!=null)
6929	label,int
17790	v=NaN
14177	setmixupparameters
10991	package.
11732	"George
17075	trainList[k]
9048	Creation
16021	maxWindowSize=group.getMaxWindowSize();
7080	setAdditionalParameters(CommandLineUtil.TestClassifierParams
19790	top.add(searcherEx);
3682	"+className+"
4263	newTypeField;
19336	package,
395	innerLearner)
8604	-37
22637	if(!dir.exists()||!dir.isDirectory()){
15226	+1.0
9973	seg
16805	innerLearner,
21151	if(graphicCounter!=null){
6105	see
21190	sec
10411	log.debug("pos,
8426	NestedTextLabels(labels));
10658	historySize,Extraction2TaggingReduction
5910	seq
16403	sep
13362	Automatically
18945	wholePanel.setLayout(new
4442	//Decision
7518	WeightedExample{
6501	sel
5632	manages
2879	differenceiterator
11843	pm",
17772	estimateMean(double[]
12771	multiclassifierannotator
9315	RealRelationalDataset
16138	OnlineLearnerEditor.edit(annLabels,(MutableTextLabels)base.labels,
5168	manager
16258	pos_t,neg_t;//positive
23307	yield
20616	Bayes
3930	base.loadDocument("span",argv[argv.length-1]);
8288	id=s.getDocumentId();
18718	r=null;
11588	Set<Neighbor>
2607	JSlider
1230	Files
13594	terry
12329	(ss.hi>ss.lo
3430	sliding-window
889	sequenceErr="+sequenceErrors
21379	javax.swing.JTree;
5877	Feature[labelNames.length];
13398	numUpdates
6711	EditedSpan(s,spanTypes[x],index));
5925	segmentcrflearner
5048	somewhere...
18452	edu.cmu.minorthird.text.learn.AnnotatorTeacher;
12509	args[i];
20864	data(String
9979	errors++;
477	innerLearners
1660	epochs
1239	regex
3726	classname
7491	:"+x);
4832	dflist
21930	[-history
5739	sos
5195	managed
4979	TokenViewer(labels,span));
2313	documentid
4772	numDoc,int
955	h[i].getExplanation(instance).getTopNode();
11249	gbc.weighty=1;
11652	a,Instance
2461	for(Iterator<Example>
17495	add(subViewer,fillerGBC());
6417	[mixupProgram]");
10965	java.io.ByteArrayOutputStream;
4314	<programFile>");
8282	fe=BAG_OF_LC_WORDS;
1904	-1"
17148	requestList.addAll(requests);
3847	start){
14721	File(
18743	(Class<?>)validSubclasses.get(i)+":
12036	occurred
1443	textbaseviewer
11187	JLabel("Use
22323	onlevel
12005	TestSuite(TextBaseLoaderTest.class);
20390	File.
18417	innerLearner.getClassifier();
13371	Einat
5545	childEntry
21609	//-------------
5321	src
11191	gbc.weighty=0;
15025	output_file\n");
10953	documentfe
11571	1999.
2754	System.out.println("saving
15449	"+params.splitter+",
5447	newParent){
19218	(Class)i.next();
7840	merrily,
12334	ss;
12883	superView,String
5383	don't
4858	span.getToken(j);
1140	props.setProperty(SCRIPTDIR_PROP,props.getProperty(REPOSITORY_PROP)+"/loaders");
7616	CrossValSplitter<Span>
7860	Logger.getRootLogger().removeAllAppenders();
13030	rowindex
16822	segmentTransform.transform(dataset);
3217	Feature("iq"),
22823	External
15041	abstractclassificationchecks
14824	0.6934812760055479,
13668	inner=innerLearner.get(i);
12773	getmulticlassifier
24018	--i
3420	start+L
5031	doc.resetHighlights();
21082	paramters
3976	setSuperView(superView);
1810	attached
10880	setbackground
2760	statusMsg.display("Error:
16212	(MBW),
23393	guesslabels
21349	i=0;i<argv.length;i++){
14633	result.add((String)o[cur_order[0]][j]+o[cur_order[1]][k]);
15003	squared
1901	char
16211	Winnow
21316	trainTest=new
3407	illustrate,
2905	ViewerControls
805	computing
21136	step+"s
17440	Random(),folds,subsampleFraction);
6402	"+newFont);
8448	sequence,extractedSpan,classLabels);
21626	keymap.addActionForKeyStroke(KeyStroke.getKeyStroke("DELETE"),deleteButton
19039	d=Double.parseDouble(textField.getText().trim());
21884	map.keySet().contains(o);
8361	i=textLabels.instanceIterator(crAnn.getSpanType());
2947	splitPane.setLeftComponent(controls);
663	level
7658	SpanDifference[]
12536	psb03
22440	log.error(e,e);
18407	innerLearner.completeTraining();
4018	if(defaultDir!=null)
1945	Span)
19558	add(String
23265	someone
5561	(mapperd)
12174	testMode
5379	underlying
1863	in.getLineNumber()+"
20921	getMultiHelp(){
20525	annotationType="_prediction";
9591	testlist
10455	minvalue
24329	zmath
2131	overlap
22899	lossF.increment(ff,0);
24020	0.5*(b0-b2)
17379	Tester.evaluate(learner,
15007	correlation
7661	i=propValues.iterator();i.hasNext();k++){
11955	semifinal
1789	setClosure:
12929	signals,
5715	pieces
15244	(OnlineClassifierLearner)prototype.copy();
14283	TreeMap<String,String>();
3109	receivecontent
1202	executing
10854	SimpleAttributeSet();
23245	readerThread.join();
6023	guessBox.addItem(type);
13158	exampleId.equals(id);
10509	tearDown(){
4331	"+args[argp]);
10659	dummy1=new
15218	'old'
4403	getdisplayedtypebox
19289	runtime
19658	getNormSquared(Instance
16142	online
7400	edu.cmu.minorthird.classify.BasicDataset;
22559	scalable
23345	[!vp:t+]
4585	illegalaccessexception
19530	(isPositive())
18641	<code>String</code>,
1834	operation.");
7913	BasicSpan("doc0",
17850	classification-learning
16770	invocationtargetexception
11574	log=Logger.getLogger(KnnClassifier.class);
8245	getTokenPropertyFeatures(){
19017	typeOrBrowsePanel=new
11072	base.labels
23189	this.labels=l;
20313	if((targetValue==null&&value==null)||
21722	importbutton
2404	jcomplabel
21604	buttonsThatChangeStuff.add(propButton);
12700	BatchSequenceClassifierLearner,SequenceConstants{
9581	testList.addAll(subpop);
4780	j=0;j<array.length;j++)
20722	jneg
18346	dataset=SampleDatasets.sampleData("bayesUnlabeled",false);
301	activeLearning;
10731	validDocumentSpans;
11691	TextBaseLoaderTest()
1332	TextBaseLoader(
3692	wrong
22139	if(!tbManager.containsLevel(importLevel)){
16554	hasunlabeled
10090	serialVersionUID=20080130L;
5403	FilterTokenizer(this,newLevelName,parentLevelName));
8027	rwShadow
18535	ViewerFrame("Evaluation",v.toGUI());
18130	compound
11788	"DocPerLineTestData_WithBlanks.base@line:7",
14855	DatasetClassifierTeacher(SampleDatasets.toyTrain()).train(l);
22391	familyViewer
14474	threshold=16;
7697	propvalues
22794	getCounts(Feature
15114	ChiSquareInstanceTransform(){
6659	fe=null;
19823	IllegalStateException("can
220	schema
876	scheme
7577	reduced
12443	bestLongForm;
2199	sortedLabels.add(curLabel);
2047	it=labels.closureIterator(type);
23644	2.767792568499834e-02,
3700	Matcher
22112	Finally
1986	file,TextBase
1706	Spans
12170	falseNegatives
22825	Regret,
24337	batchLearner
16741	tryToGetCLP(Object
19584	serialVersionUID=20080609L;
18274	logLik+=((MultinomialClassifier)mc).getLogLikelihood(example);
4878	'"+stemmer.stem(args[i])+"'");
8530	tmplabels
10831	zoomed
5438	TextBaseEntry{
20580	this.segmenter=segmenter;
15934	Explanation.Node("CRF
21584	propButton=new
8418	propogate
3132	revalidate
18029	EmptyLabels(),
14399	for(Token
14575	i=nameDict.iterator();i.hasNext();){
15584	newcrossvalsplits
3566	serialization
11809	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2680_0"));
11042	run:
11642	Comparable<Neighbor>{
16327	if(y_t*y_t_hat<=margin){//if
5929	maxmemory
14961	svm_predict.java
8211	windowSize){
6221	resetDocumentList(labels,type,editedOnlyCheckBox.isSelected());
12738	hmmlearner
4985	Span;
19662	ins.getWeight(f);
3606	(for
8291	EmptyLabels();
19893	ChiSquareInstanceTransform();
19402	charIndexProperSubSpan(int
2959	y2=1;
15024	model_file
16270	margin=1.0;
8696	punctCount;
21282	(Annotator)o;
5282	parentDocId=mapping.dstDocId;
6360	differences
21737	imported
9044	pp[k])
4266	truthBox,JTextField
1212	document
11320	multilabelclassification
21655	editLabels.defineTypeInside(exportType,documentSpan,newSpans);
4016	setDefaultDir(String
3909	Span.
6839	statusMsg.display("Saving
5451	parent=newParent;
9742	seeds
6595	remove(int
20700	m=(sumX+prior*1.0/SCALE)/(sumWgt+1.0/SCALE);
19891	accepts
17966	improper
3623	mostly
19104	javadocLink=javadocLink.replaceAll("\\$","\\.");
17175	ArrayList<List<T>>(folds);
6262	boolean[]
9674	reduces
1809	"TextBase
6716	init(){
21309	ClassificationSignalParams
2309	closetype
17842	"TrainClassifier
17468	subsamplingcrossvalsplitter
11676	implemented
13619	a_neg
3831	root;
2963	y2=0;
12491	pairs");
11199	AbstractAction("View
8536	classlabels
6338	oughta
4142	mixupProgramFile.getName(),mixupProgramFile,base,baseLabels,
7753	b.isBinomial;
8708	((linelength
4626	newSourcedExampleViewer(){
11317	jlptest
11348	outbuffer
7078	result=null;
7374	runs
23948	overflow?
16793	loadoptionsinpropertiesformat
10023	g.getSubsequenceInstance(pos,pos+len);
10646	Dataset",seqData.toGUI());
21671	//System.out.println("spanSize="+span.size()+"
17686	candidate);
12556	annotationmode
2110	overwritten.");
1471	textlabels
11456	if(argv.length>=3&&(c
11089	ex.getMultiLabel(),
3994	add(textField);
4911	"+testData.size());
5338	encounter
21483	SQRT_INV;
23137	unnormalizedTFIDFWeight(Feature
24033	<tt>k!</tt>.
19077	1,row));
196	after
10979	edu.cmu.minorthird.classify.sequential.GenericCollinsLearner;
19785	Explanation.Node("CMM
17564	v=0.0;
7174	extractor
7159	fe,Extraction2TaggingReduction
13424	e++)
6390	diffSpan
9515	JComponent.
1323	"+pattern);
18763	removeClass(Class
17418	referencestats
12743	multiclasshmmclassifier
8129	+(b1+b2*sig-1)*Math.log(tau*(1-tau))
7887	tokenizer.splitIntoTokens(doc);
17938	SpanFE
6714	init();
18951	isHelp;
14073	scrollpaneconstants
12233	str
21450	HREF="http://www.cern.ch/RD11/rkb/AN16pp/node188.html#SECTION0001880000000000000000">
14978	m=st.countTokens()/2;
3621	'asFiles=false'
11486	if(annotations!=null){
15269	(MyBinaryClassifier)o;
11820	assertEquals(49,
24320	overflows
6137	SpanPainter{
10727	edu.cmu.minorthird.text.AbstractTextBase;
16166	getSource(){
21534	perceptron.
18751	sub
22396	assertNotNull(
10268	bestEntropy=Double.MIN_VALUE;
16226	Report
1716	about
818	sum
11247	JLabel("Help:")
11382	labelsFile);
20943	TestParams(){
12802	getTypeSet(String
3026	result=uc?s.toUpperCase():s;
9423	edu.cmu.minorthird.classify.experiments.FixedTestSetSplitter;
18248	//Example.Looper
2064	j=labels.getSpansWithProperty(prop);j.hasNext();){
3402	Here
2452	above
18320	EMconverged(double
15107	TOP_FEATURES;
18817	dialog.setVisible(true);
14731	.instanceIterator(spanType),NameMatcher.postLabels
6564	SpanDocument(edu.cmu.minorthird.text.Span
11993	Asserts
20330	lc(){
16081	o=i.next();
4564	svm
7117	ReweightingInstanceTransform
11502	stringannotator
7475	tau_t=truncateG(-y*s/kernel(x,x));
12945	if(superView==null){
1723	closurePolicy=CLOSE_BY_OPERATION;
20923	getCrosshelp(){
19940	StratifiedCrossValSplitter(int
18523	if(opt.startsWith("-sh")){
3865	if(node.map==null)
14301	Document(documentId,documentString,charOffset);
9913	segments:\n"+correct);
17763	tauSum)
9770	Ranecu(new
21277	MixupAnnotator(p);
3924	base=new
12131	Identifying
13744	addApplyButton(){
6684	Training"));
2263	tag
3946	tab
1640	innerLearner[i].getBinaryClassifier();
4063	JComponent{
11582	log.debug("knn
2435	Data
16078	Splitter<CandidateSegmentGroup>
4345	base=loader.load(data);
2497	map1;
16639	stopList.add("help");
9948	maxSegmentSize);
3185	numFeatures(){
1327	tbl
1283	IllegalArgumentException(
2657	b.loadDocument(DUMMY_ID,"["+documentList.getModel().getSize()+
12018	wing
22962	others
12539	provided_annotation
7332	ocdEditor){
20876	type.showResult=this.showResult;
15384	iterations
20506	i<data.size();
10069	POS
2254	type,int
23056	stringdistancelearner
22417	tba
15614	labelString
18207	countsFeatureGivenClass[classIndex]+=ex.getWeight(f);
5920	iitb
13301	tc=
19841	System.out.println("old
10929	tc;
11027	DataClassificationTask
2267	beginOrEnd,String
15564	stackingparams
11554	edu.cmu.minorthird.classify.DatasetIndex;
8100	tau
12662	for(Iterator<Viewer>
10111	negative=new
20629	1000;
12395	shortTokenizer
24386	currOffset,
12054	wins
3453	start=2
7660	SpanDifference[propValues.size()];
22868	HashMap<Feature,List<ClassLabel>>();
5730	getparentmapping
14344	settokens
3061	addApplyButton();
22557	youneeekid
888	"+epoch+":
16880	seg.y
24148	logfactorials
10275	LinkedList<Example>();
6464	tbv
6169	seems
11868	title
21579	exportButton=new
5708	prevdocid
7334	if(!TextBaseViewer.NULL_TRUTH_ENTRY.equals(truthType))
3851	if(node.endIds!=null){
13313	"+classification(instance).toString());
20597	log.debug("span
20948	loadFromFilename=s;
2606	upButton,downButton,saveButton;
13720	'updated',
2169	Iterate
16239	One
1352	MonotonicTextLabels
15453	ex=(SGMExample)i.next();
10512	log.info("testDirwithNoFile");
14511	dictionary.
1391	textbase
14488	dictionary,
23489	"+(i+1)+":");
9510	spanpropstring
18113	unsigned
12784	dictionary)
20950	type.loadFromFilename=this.loadFromFilename;
915	schema.getNumberOfClasses();
2387	overwritten
11598	Map<String,Double>
19172	getX(){
20333	str=i.next();
23647	1.387612882307075e-02,
2002	labels,File
11550	tomultidataset
5104	simpleattributeset
8890	Dissertation,
5402	BasicTextBase(
16481	IllegalStateException("empty
7925	textBase.getDocument("doc2").getTokens(),
10971	edu.cmu.minorthird.classify.experiments.RandomSplitter;
3953	java.awt.event.ActionListener;
24135	(z=z+1.0;z<7;z+=1.0)
18824	log.debug("inspecting
7620	subLabels=new
10588	"+validClassNameSet+"]";
3722	defaultreadobject
7286	MutableTextLabels.
1944	MutableTextLabels,
1337	e.printStackTrace();
6492	currentfont
12349	(openParenIndex
8621	Vitor
14254	base.loadDocument("pos."+i,pos[i]);
14305	documentMap.get(documentId);
6785	type=(String)cb.getSelectedItem();
19721	philip
19345	twice.
11687	for...
13606	walkerscore
9614	tagset=new
13542	W_Pos
3141	edu.cmu.minorthird.util.gui.ViewerFrame;
21444	expressed
3464	newInstance.getSubpopulationId()
4287	frame.addWindowListener(new
20699	sumWgt2+=Math.pow(vWgt[i],2);
6449	spanrenderer
20097	SpanResult
14548	tokenWindow.asString().replaceAll("[\r\n\\s]+","
2055	environment
3413	window
17862	"DebugMixup
4742	docSpan=i.next();
19044	if(type.equals(boolean.class)){
12504	args.length
20293	TokenSetResult(String[]
12826	dict
15330	(InstantiationException
11239	outBuffer
18012	super("SubPopIdTest");
7741	isBinomial=false;
18512	opt=args[pos++];
14930	expected=new
18865	JEditorPane();
16183	knn=null;
23718	39916800L,
2802	listselectionlistener
18458	sequence-classification
14684	if(args[i].equals("-loadFrom")){
21627	D"),
19498	this(label,1.0);
16326	rule
10845	setsubviews
21726	deletebutton
12706	parsing
12655	subView.setContent(content);
20592	seg=j.next();
83	with
10633	<br>predictions
22913	exampleSize=example2.numFeatures();
16882	ViterbiSearcher
6436	highlightbutton
16858	"+schema);
5210	There's
15175	isSorted=false;
18263	.setClassParameter(j,probabilityOfOccurrence);
22763	this(labels,userLabelType,null);
14403	tags.toArray(new
12940	handle(signal,argument,senders);
4925	Evaluation.DEFAULT_PARTITION_ID
11504	spanstring
24097	IllegalArgumentException{
20601	sa=(SegmentAnnotator)o;
4990	controls=new
4896	d.splitSequence(splitter);
3463	setSubPopId(
22433	verification/correction
12573	abbrstring
1914	value=advance(tok,in,file);
15347	if(classifier
24149	longfactorials
15105	ChiSquareInstanceTransform
3344	commandlineprocessor
18691	inLineClasses,
17157	prof1.compareTo(prof2);
23742	8.68331761881189E36,
14875	e2=new
14872	//ObjectInputStream
12056	verdict
11990	l.hasNext();
12644	putTabsOnLeft(){
19565	"+bestLabel+"
298	else
2755	file="+saveAsFile);
21876	ONE=new
14583	if(hScore!=null&&hScore.doubleValue()<threshold){
17150	byProfile=new
9107	(k4
9094	(k5
23670	2.873449362352470e-03,
7450	useBudget,double
9549	partition.
22450	PoissonLearner();
18879	//String[]
87	setAnswer().
1796	loader.
1093	(in
19641	getHyperplaneNormSquared(w_t);
9091	(k2
1615	"+innerLearnerPrototype.toString(),
11139	resultToShow
1624	wrongClassIndex
11699	(ie
12814	loader)
2615	(if
7235	answerlabels
3669	bytes");
1540	unique
11024	LEGAL_OPS
22416	makoto
5442	level;
4064	serialVersionUID=20080306L;
22196	if("importFromLevel".equals(keyword)){
14664	.println("
6426	editedonlycheckbox
5580	childEntry.dstOffset+(childHi-childEntry.srcOffset));
146	training
22326	importlabelsfromlevel
23636	sum_ex
5216	level.
1227	"dataDir"
4932	TreeSet();
6585	IllegalStateException("inserting:
6848	CompleteTraining
23388	vigilinx
17235	File(args[0])));
12444	tokenizer;
8955	10.0;
11109	testParams.resultToShow
15095	sumvv
16339	neg_t.multiply(f,(1-example.getWeight(f))*(beta));
15097	sumvy
3798	partitions
23206	errorArea.append("SE
9	Classifier.
4478	"-test",
23583	PoissonLearner(){
6933	if(eSpan.added)
21825	Classifier,
13189	prediction=spanFilter.score(fe.extractInstance(labels,candidate));
6259	spanDocs[];
7565	truncateg
22069	getLabelsForLevel(getCurrentLevel());
20993	interact
1570	testing
15920	featureGen.featureIdentifier(fIndex).stateId;
11095	((testParams.typeString.equals("seq"))
2560	javax.swing.event.ChangeEvent;
17884	subprocessor){
14637	o[cur_order[2]][l]);
9390	e=(SGMExample)i.next();
4408	truthtypeset
21621	importButton.getAction());
11890	Coruna
12537	pdf
6392	marks=spanMarkups[indexOfT];
22272	labels.setProperty(token,property,value);
9984	log.debug("class
15096	sumyy
18326	converged=false;
12674	puttabsonleft
18872	helpPanel;
16516	shuffle(new
10780	POSTagger();
5113	textcontrols
3036	System.out.println("controls:
12849	canHandle()
8049	rnorm(int
23946	(nk
18987	theBox=new
4185	JSplitPane(JSplitPane.VERTICAL_SPLIT,top,bottom);
13246	'left',
1720	CLOSURE_NAMES=
3105	initialize
4859	labels.setProperty(token,STEM_PROP,stem(token.getValue()));
16297	VitorBalancedWinnow.
5439	entryName;
9014	(my
2385	currdoc
16254	"voted"
7226	gettaggingreductionhelp
17815	observedcounts
22365	HashMap<String,String[]>();
21329	CrossValidatedDataset
19362	viewerTracker.setMinimumSize(new
15343	MultiDatasetClassifierTeacher(d).train(train.learner);
10387	pos,double
4041	setselectedfile
4152	setPreferredSize(new
649	setsplitter
17484	subViewer;
5060	colNames=new
6719	JLabel("Types:
15542	predictions){
20143	name,SpanFE
12488	-testlist
7444	cache;
6311	spansWithDocument=spansWithDocumentMap.get(documentId);
5309	if(srcEntry.getTextBase().getDocument(span.getDocumentId())==null)
6512	currentsize
12613	subview.
5885	iitb.Model.StartFeatures(this,
23676	0.00000000000000000,
19991	following:
9275	simulation
19830	if(frequencyModel.equals("document")){
4343	loader=
22360	par
2370	pc3
18870	ep.addHyperlinkListener(this);
18036	checkSubPopIds(data1);
7488	cache,
9705	10<SUP>18</SUP>.
1196	name
13009	text_message
12330	Character.isWhitespace(ss.base.charAt(ss.hi-1)))
2020	pc=
5773	((labels
20470	wordarray
7838	stream.
12596	lindex
16958	bp.onBestPath
13674	Looks
18361	countsgivenclass
5574	this.getChildMapping(childSpan.getDocumentId(),childLo,childHi-
2354	pc2
7018	format_name
23935	(n!
13919	targetCorrectness=dc.correctButton.isSelected();
14246	trainLabels(){
22235	Don't
21242	stream:
17784	(m2
14387	input=new
2555	javax.swing.JButton;
22582	dir(String
9603	categories
10799	zoomedIn
20808	getSaveAsFilenameHelp(){
3858	Associate
8916	cached
18617	javax.swing.border.EmptyBorder;
6660	OnlineTextClassifierLearner
11549	multispanprop
23732	2.585201673888498E22,
16068	r){
22982	mylist
2882	highlight
3071	jtextfield
6216	nullTruthType(){
10166	IllegalArgumentException("Number
18066	HREF="http://www.statlets.com/usermanual/glossary2.htm">
6752	"truth"
22898	if(y_t*(example.getWeight(ff))>0){
7069	SmartVanillaViewer(m.base.labels));
22793	size+=1;
789	phi(sequence,i)
17111	in){
5927	segmenter
4157	gbc;
15734	super("BasicFeatureIndexTest");
15102	itself
1026	phi
15766	java.util.Properties(defaults);
22820	(c)
7188	this.documentLooper
14962	predict(BufferedReader
6102	s=i.next();
15856	(featureLooper.hasNext())
9504	traintest
21907	"[Bag
15165	Feature[]
8762	(as
11724	"4:00",
15023	test_file
9561	trainFraction){
20761	'"+s+
13208	abstractspanfinder
4955	classifiedsequencedataset
1734	policy){
16488	j=1;j<span.size()-1;j++){
4712	User:
9409	splitsgm
14326	document.charOffset;
802	(b)
11593	set.add(new
10545	ExampleSchema(new
16492	["+p+
21527	deviates
2854	default_keymap
14209	trainextractorparameters
4446	"-labels","cspace.1f3","-spanType","Req","-test","cspace.2f2",
17899	if("-help".equals(args[pos])||"--help".equals(args[pos])){
19111	javadocLink+".html\">"+selectedItem+"</a>";
22141	"+importLevel+
714	setNumberOfEpochs(int
14405	"See:
23042	i=dataset.iterator();
16083	VanillaViewer(this);
1644	Explanation.Node("GenericCollins
8489	-test
4175	gbc.gridwidth=col;
5853	segData.init(iter.next());
11530	train.fe,signal.multiSpanProp);
17923	System.out.println("one");
24093	logFactorials[k];
8736	if(ind2.compareTo(ind)==0)
21668	spanLo=-1,spanHi=-1;
18619	javax.swing.event.HyperlinkListener;
18070	Ahrens,
16204	foundSpan);
20194	"+s+"]";
19186	getY(){
15950	modelgraph
14313	MyDocumentSpanIterator();
7651	.closureIterator(signal.spanType));
10123	bestName=new
12471	(testMode)
4438	TestSuite();
10852	HiliteColors
12108	SGMExample(compactInstance,example.getLabel(),example.getExampleID(),example.getWeight());
23383	valicert
12988	mouseClicked(MouseEvent
22021	tbManager=new
3673	annotator.
1213	per
10973	edu.cmu.minorthird.classify.multi.InstanceFromPrediction;
16198	annotator,
20049	featureStoragePolicy=STORE_AS_COUNTS;
10034	maxsegmentsize
13937	row,int
2164	while(unsortedLabels.size()>0){
3029	System.out.println("transform:
23987	(a,
22693	//System.out.println("Test
786	(a)
24071	<tt>k>=30</tt>
20081	requireMyAnnotation(TextLabels
13527	(A_pos.containsKey(ftr)){
16929	segmentInstance
20281	last(){
18293	converged
18179	BasicFeatureIndex(dataset);
7378	**/
15994	iteration
6794	changed
22540	buf.add(t);
17042	"request"
23477	totalSize=list.size();
3698	(.+?)\\)");
19851	orderings
22749	datasetsequenceclassifierteacher
3925	trie=new
21772	i=0;i<newFeatures.length;i++){
7687	extractioneval
14843	cycle
7849	Standard
2400	sortedlabels
8555	teststrings
11785	"DocPerLineTestData_WithBlanks.base@line:4",
22651	labels=ld.getTextLabels(new
7393	addlistselectionlistener
18909	Runtime.getRuntime().exec(new
1905	means
20129	meant
4243	updateTypeBox(programLabels,viewer.getDisplayedTypeBox());
8996	efficiently
7527	alpha="+alpha+"]";
14293	documentString){
9337	aggregators.get(L_type).add(oper);
22854	.println("Possible
21114	stepsCompleted;
16134	.loadSerialized(test.loadFrom);
1906	whole
5118	getcolor
6087	List<Span>
2984	initialize(){
16024	sizes:
14895	tempFile.delete();
18376	eloo
13187	i=candidateFinder.findSpans(labels,documentSpan);i
23553	actualtesterror
13912	filterOnCorrectness=false;
10334	weight=0;
12891	superView;
14064	Integer(0)));
17619	(classPrior/numberOfClasses+observedCounts)/(1.0+totalCounts);
1139	(props.getProperty(SCRIPTDIR_PROP)==null)
19216	instanceMap.put(o.getClass(),
1679	java.io.FileReader;
20511	data.getExample(k)
14587	if(highRisk)
9187	(f2
9140	(dr
9220	(f4
12078	vienna
9235	(f5
3047	revalidate();
9134	(dl
9230	(f1
11758	File(testCaseDir+"/DocPerLineTestData_WithBlanks.base"));
18404	numMistakes
9762	seed.
12877	superView.
291	Collections.<Instance>emptySet().iterator();
22057	i=0;i<statementList.length;i++){
5875	super(numLabels,options,false);
6206	iterating
7722	mean,
8849	0</tt>.
8962	mean)
11122	e.extend((Classifier)c,
18335	avgLoglik=(Math.abs(loglik)+Math.abs(previousLoglik)+epsilon)/2;
18876	he){
8954	mean.
18058	pie
768	log.debug("classifier:
19889	ChiSquareTransformLearner(String
18737	i=0;i<validSubclasses.size();i++){
845	phi(sequence,j)
20741	edu.cmu.minorthird.util.RefUtils;
913	MultiClassVPClassifier(ExampleSchema
23415	PoissonLearner(),1.0/7.0,1.0/7.0));
17998	parseboolean
8914	mean;
10336	weight=1;
11572	KnnClassifier
17063	r-1
1433	System.out.println("loaded
18908	browser");
15923	SequenceUtils.MultiClassClassifier(schema,w_t),
6051	changes
1161	Object[]
17027	onbestpath
2939	splitPane.setBottomComponent(viewer);
21308	SaveParams();
19842	data:\n"+dataset);
3107	clearcontent
18810	JFrame(title);
16661	propertyList(){
16436	pow
2714	editorPane.setKeymap(keymap);
9636	j=1;j<span.size();j++){
3979	componentFor(null);
6267	indexOfSpanMap;
7394	pop
8826	this.author
19472	viewerTracker2.setSaveAs(file);
21390	JTree
2412	pos
21603	add(deleteButton,gbc);
2712	keymap.addActionForKeyStroke(KeyStroke.getKeyStroke("DOWN"),downButton
19582	TestTextLabels
20351	StringBagResult(extend("charTypes"),fe,trBag);
12399	longForm.length())
21097	DecimalFormat("0.00");
22149	tbManager.getMatchingSpan(currInstance,importLevel,this
13627	actualftrs
16044	add(example,false);
14925	"+e1.maxF1());
5358	MutableTextBase
9395	template
23612	LOG);
16219	Regret
3687	contents.length+"
23704	71.25703896716800901
5879	features[i]
23735	4.032914611266057E26,
19548	isCorrect(ClassLabel
2365	unsupportedoperationexception
22737	logLoss(BinaryClassifier
14663	System.err.println("Parameters:");
2552	edu.cmu.minorthird.text.gui;
11303	batchversion
13736	ViewerControls(){
6958	IllegalStateException("bad
18730	validSubclasses.add(Class.forName(line));
1851	log.warn("unknown
11462	classifierteacher
12836	obey
7033	spanpropertyviewer
8935	r4,
21420	defaultmutabletreenode
18414	numMistakes++;
23545	numsites
19873	Set<T>
16046	MutableCandidateSegmentGroup(1,1);
23685	15.10441257307551530,
17576	d=0.0;
6074	add(displayedTypeBox,gbc);
2814	dummy
15022	svm-predict
13090	<code>-foo
21475	Annals
1960	TreeSet<Span>();
23682	8.52516136106541430,
16112	CommandLineUtil.OnlineSignalParams
3116	myviewer
19691	ClassLabel.negativeLabel(-1);
12874	initialize();
12367	openParenIndex),
7526	"+example+"
17698	tau[0][it],vlow,vup,xr,xp,wr,wp,vbeta,sig[it-1],sigmaSD,
2953	x1,y1,x2,y2,part;
21777	StringUtil.toString(newValues)+"]";
19493	bestLabel=null;
3475	setSubPopId(String
16432	beta
9949	Compare
10371	useless
17251	"+splitter.testList.get(k));
4318	textBaseId=args[++argp];
18379	estimateclassprobmle
15730	pmi
8933	r1,
10695	"+annotationType+":\n"+seqClassifier+"]";
5540	childOffset,int
20364	punkBag.add(str,n);
12082	yugoslavia
1797	best
23075	edit=p;
308	collections
8963	setMean(mean);
10118	double[dimensions];
7401	edu.cmu.minorthird.classify.multi.MultiDataset;
9826	fortran
10125	bestName[i]=labels[i].bestClassName();
17174	allocate
6506	intvalue
21721	editor_prop
4257	box.addItem(t);
7103	evaluation.summarize();
8934	r2,
356	pp.
22754	corpus
16556	getlistcellrenderercomponent
17625	Estimate("Naive-Bayes","weighted-mean",tm);
8122	candidate,p2,"TRUE")
6686	MoveOnlineDocumentCursor("Up",-1));
5491	parentOffset,String
2678	"+saveAsFile);
6413	File(args[1]));
22604	getTextBase(File
3605	annotators
13833	learnerName)
11275	bytearrayoutputstream
18850	panel.add(editor);
9366	invertIteration(splitter.getTest(k));
12012	docperlinetestdata
12226	(Character.isLetter(str.charAt(i)))
20782	saveAs;
13130	preserved
12200	shortSpan='"+shortSpan.asString()+"'");
17761	sigma;
13658	learnerName;
14321	s.setCharOffset(getOffset(documentId));
2298	loads
5072	table[0][0]=s.getDocumentId();
9587	preserves
22986	posfactor
5525	whose
11726	"Adamson
23078	edit});
2727	loaded.
8285	i=0;i<SampleDatasets.negTrain.length;i++){
22571	accept(File
15440	schema=dataset.getSchema();
21994	savesequence
16673	k+=delta;
20225	SpanResult(extend("subspan_"+lo+"_"+len),fe,s
11349	setout
12372	openParenIndex);
20831	typeString="simple";
8990	reflections.
14709	.addStatement("defSpanType
15737	BasicFeatureIndex(SampleDatasets.sampleData("bayes",false)));
916	setVoteMode(boolean
3987	//fire
18515	if(opt.startsWith("-sp")){
6325	i=0;i<spanComponents.length;i++){
24360	this.parentTokenizer
19758	hi>sequence.length
10504	FancyLoaderTest(String
17986	File(saveFile+".eval.gz"));
16201	documentSpanLooper);
3965	JTextField(30);
8531	tmpbase
19822	this.frequencyModel=model;
16184	knn=(KnnLearner)this.clone();
12976	Transform
19529	ExampleSchema.NEG_CLASS_NAME.equals(this.bestLabel);
7590	MonotonicTextLabels[]
20727	expos
9541	v=((Visible)o).toGUI();
12095	Features,
8936	r5,
21012	if(s.equalsIgnoreCase("seq")){
3314	/*Dataset
14947	F1-2:
1996	}catch(ClassNotFoundException
8215	emit
12947	"+this);
7659	sd=new
16864	shuffling
22687	hold-out
5720	newentryname
11618	distance:
22313	mixupexpr
19027	SpinnerNumberModel(((Integer)value)
16508	unlabeledExamples.size();
998	sequenceconstants
8309	extractionfe
5123	toarray
10626	this.seqLearner=learner;
22783	BasicFeatureIndex(){
14139	program=null;
4409	truthbox
3610	anything
138	non-trivial
8713	(lineMatcher(expression,
17166	partition.get(i%folds).add(requestList.get(i));
14757	pre
12734	welch
1676	java.io.FileInputStream;
17143	log.debug("testUsers
9470	if(signal.spanPropString!=null){
924	getSchema()
3191	instance.getWeight(f);
2731	importDocumentListMarkup(String
17163	partition.add(new
6040	displayedTypeBox.addActionListener(resetDocumentListAction);
4567	svmlearner
18703	this.rootClass=rootClass;
3207	Strings,
1804	labels,TextBase
11629	neighbors,
21756	if(instance==null)
9934	//System.out.println("adding
20116	instance.addNumeric(f,c);
5467	this.parentToChildMap=new
23585	//System.out.println("in
11596	distances
14596	"").length()
22921	if(y_t*deci>=0){
21486	<b>static</b>
21482	cacheFilled;
13221	Visible,
11294	dataclassificationtask
9484	trainTest.labels,
18650	specially.
11147	log.info("Result
21200	log.warn("Can't
6210	ii.hasNext();
12977	transformer){
7365	log.info("load
18527	expt=
18923	Doubles
3964	textField=new
9492	expt;
21993	preparesequencedata
2146	Put
16288	this(1.5,0.5,voted);
13517	batchTrain(Hyperplane
9028	for(;;)
4747	(isEmail(tokenSpan,labels))
8519	confidenceutils
9972	Segmentation.Segment
22623	ann=k.next();
1192	hard-coded
5999	highlightAction.paintDocument(null);
18956	((!isAdvanced(pname2)&&!useAdvanced)||(useAdvanced&&isAdvanced(pname2)))){
3539	conventions
5497	parentEntry=new
6149	fmt=new
15048	setcheckstandards
17881	helpConsumed;
17080	fraction,int
2395	put
10558	newClassName){
7029	documentmessage
14128	mixup=p;
4508	(ExtractionEvaluation)result;
23587	PoissonClassifier
13705	innerLearner.get(0).getClassifier();
5129	mapping
7176	setSpanFeatureExtractor(SpanFeatureExtractor
1848	"+docId);
599	borderlayout
17482	"content
617	crossvalsplitter
11007	VotedPerceptron.class,
5056	j=0;j<props.length;j++){
9899	SequenceUtils.duplicatePrototypeLearner(innerLearnerPrototype,schema.getNumberOfClasses());
22724	transformer);
17112	IllegalStateException("Bad
18688	configFilename
12809	fileToLoad)
10756	documentSpanIterator(){
17061	r-th
8779	TextBaseLoader(TextBaseLoader.DOC_PER_FILE,
17248	System.out.println("fold
18357	max_iter
13392	RankingBoosted(int
11428	activeLearning){
14942	e2.extend(c2,testSet,1);
14935	values;
9580	trainList.addAll(subpop);
13867	Visible{
19849	System.out.println("new
17721	"+tauPost[i]+","
7576	kernel
7756	values.
3768	this.i=i;
18513	if(opt.startsWith("-lab")){
12266	line+"
1973	log.warn("closure
20575	SegmentAnnotator
12194	log.debug("shortSpan["+shortForm.lo+".."+shortForm.hi+"]
21315	SplitterParams
20027	well.
7764	cov/count-avg*avg;
456	log.info("training
2442	ranked
19331	edu.cmu.minorthird.text.TextBase
23258	byte[2048];
13532	cur_W_Pos
5468	HashMap<String,SortedSet<MapEntry>>();
11055	if(ClassifyCommandLineUtil.TestParams.type
12382	((newCloseParenIndex
1410	File(scriptDir),script);
6025	truthBox=new
1710	been
23014	buildDictionaryForNegativeClass=false;
19930	disjoints
9994	logically
1805	IOException,FileNotFoundException{
581	classifier"));
13211	spanfilter
4275	truthBox.setSelectedItem(newType);
826	sequence[j].getLabel()
22941	majority
22915	(example.getWeight(ff)*pos_t.featureScore(ff)*exampleSize>1.0)){
15731	BasicFeatureIndexTest
4222	this.mixupFile=mixupFile;
20779	BaseParams
20119	emit(result.eq());
14324	document=documentMap.get(documentId);
9578	subpop=j.next();
12323	trim()
3020	prefix;
19947	StrataSorter(random,i).strataIterator();j.hasNext();){
3065	prefix:
19819	this.frequencyModel="document";
10270	bestTrueData=null;
22818	(margin
20394	dictFile=new
10930	learner.getClassifier();
22551	crossValSplitter.getTrain(k);
1032	erroronthissequence
11477	StringAnnotator
9535	SmartVanillaViewer(){
7729	accumulator
16650	.startsWith("set"))){
15736	log.debug(new
13203	instance=fe.extractInstance(labels,candidate);
5227	First,
16618	config(fileName,this);
13790	MinimalMarkupControls.this.getControlledViewer().applyControls(
17787	/(N-1);
20259	#tokens=3
13854	manyvsrest
5689	matchingspan
2327	getnewexception
5361	parentLevelName,String
22357	upper
17645	guesses
15447	trainData=(RealRelationalDataset)s.getTrain(k);
6203	closureSpanLooper=
18839	title=
14175	annotatedlabels
8217	setFeatureWindowSize(int
21763	this.newFeatures[i]=new
15582	getcrossvalsplits
4838	setspantype
20666	if(e.getLabel().bestClassName().equals("NEG")){
12069	armenia
9788	off.
15694	"+a+"
21020	SimpleTrainTestParams
5684	srcmapperlist
9970	(Iterator<Segment>
21146	Record
6403	Pop
23604	pweight=
3324	SmartVanillaViewer();
8888	distributions,
12719	emat
13462	map,Feature
22744	c.classification(e).isCorrect(
13079	however,
190	instance,
13818	2006
542	instance)
23438	XValTest(3,5));
5206	store
4717	2004
4668	Object[][]
8019	2005
4779	Double[LAST];
7405	2003
19710	instance3
16567	(k<args.length)
10169	correct=new
19692	instance1
19700	instance2
3170	instance.
7215	getAnnotator();
11690	TextBaseLoaderTest(String
15110	availableFeatures=new
12707	(except
5804	labels[k++]
22701	(StackedGraphicalLearner.StackedGraphicalClassifier)c,
7355	edu.cmu.minorthird.text.ann.TestExtractionProblem.getLabels();
21817	TransformedViewer(cdv)
16381	//remove
11458	IOUtil.saveSerialized(((Serializable)c),new
22518	(wgt>0)
7014	getminselectionindex
13103	startPos);
371	false;
19602	Long,
11968	base.getDocument("eng.base-162").getText());
233	false'
8852	<tt>mean
23855	1.1749972043909107E254,
19135	o.getClass()));
3917	MyResultIterator(Span
1188	<li>If
1847	"+type+"
17562	m=(sumX+prior*1.0/scale)/(sumWgt+1.0/scale);
10131	posWeight(){
18793	instanceMap.get(classBox.getSelectedItem()));
3618	false,
9384	File("relTemp.txt"),data);
10761	gettokenizer
19971	setRequiredAnnotation(String
2044	pc2.progress();
16214	"Improving
3052	prefixField;
11376	".labels";
19898	index.size(ExampleSchema.NEG_CLASS_NAME);
22817	satisfy
16150	obtcl
8184	extractFeatures(TextLabels
12149	Logger.getLogger(ExtractAbbrev.class);
11059	System.out.println("presentation
225	instances
19249	classbox
23595	//System.out.println("size="
13084	-config
5641	rootbase
3304	if(signal.spanProp!=null&&signal.spanType!=null)
18265	5.2.2.1.
14132	output=p;
15772	args[i+1]);
7878	tokenizer.splitIntoTokens(sampleDocs[2]);
10243	consider
22935	if(pos_t.featureScore(ff)>W_MIN)
16503	iteratorOverUnlabeled(){
3362	domain
734	current
12995	IDENTITY_TRANSFORM=new
8476	ConfidenceUtils.sumPredictedWeights(predictedLabels,startIndex,
18714	this.inLine=inLine;
3204	sequence[j-k-1].getLabel().bestClassName();
13260	set.add(to);
612	linear
11935	beat
21273	(Annotator)objInput.readObject();
19609	(voted
1199	bean
2319	readline
10909	i=fe.extractInstance(labels,s);
13537	gain
11197	controls"));
3840	ArrayList<TrieMatch>();
13248	Link
16967	t,int
5477	instance:
12416	200)
3147	instance;
5705	mapplace
1772	TYPE.
10331	+/-
19011	AbstractAction("Browse"){
900	beam
18411	"+innerLearner);
14972	line=input.readLine();
8615	Line
13372	Minkov
3940	resultiterator
5054	i=0;i<s.size();i++){
21403	getExplanation()
785	twists:
19355	getViewerTracker(){
14328	easier.
15892	iitb.Model.EdgeLinearHistFeatures(this,
14846	(serializing),
519	"+oldInstance);
16133	(OnlineBinaryTextClassifierLearner)IOUtil
5289	normal
7728	isBinomial=true;
17355	queried
19664	getHyperplaneNormSquared(Hyperplane
6463	getcellrenderer
7584	log=Logger.getLogger(TestExtractor.class);
10345	trueData=null;
19693	instance1.addNumeric(new
5994	getDisplayedTypeBox(){
358	Pergamon
4724	FreqAnal{
21605	add(propButton,gbc);
13802	Collections.<String>emptySet();
15052	loadsvmstyle
4992	viewer=new
1448	mixupprogram
22210	if(labels.isType(startType)){
11028	CommandLineProcessor.Configurable,/*Saveable,*/
707	this(3,numberOfEpochs);
8842	<tt>p(k)
24368	textBaseManager.getMatchingSpan(levelName,
16443	balancedwinnow
21219	<li>Use
15129	availableFeatures
5271	TextBaseMapper
9469	if(trainTest.labels!=null){
21265	annotatorName,
16553	sizeunlabeled
15922	CMM(new
7710	+1;
10580	if(!validClassNameSet.contains(l)){
6082	onlyEditedSpans){
21855	(labelSeq=sequenceClassifier.classification(place.seq))
21198	if(s==null){
3972	System.getProperty("minorthird");
7868	System.out.println("Testing
14296	tokenArray=getTokenizer().splitIntoTokens(document);
758	transitionErrors
3319	seqDataset.toGUI());
6101	while(i.hasNext()){
11381	TextLabelsLoader().importOps(labels,
74	queries
9924	+1,
10101	boolean[dimensions];
18602	G.toString()
3599	Encapsulated
7465	simulate
18883	if(osName.startsWith("Mac
16042	boolean)}
1878	base,MutableTextLabels
2489	posExamples.add(exi);
15492	temval=new
16534	Example[d.size()];
21921	BeginContinueEndUniqueReduction();
20376	if(wordArray[j].equals(str)){
16151	repositorykey
2690	Declare
20650	wgtNeg=new
23419	VotedPerceptron(),1.0/7.0,1.0/7.0));
17501	subViewer
13649	s);
6792	"+type);
12217	implemented.";
2451	List
1724	warnings=0;
10635	getAnnotator(){
3699	message=e.getMessage();
16570	startPos){
257	MultiClassifierLearner
9882	Semi-markov
10490	s's
19766	ConfidenceUtils.sumPredictedWeights(predictedClasses,0,predictedClasses.length);
4483	"new
1321	"+SGML_MARKUP_PATTERN_PROP+"
5975	java.awt.Font;
6057	documentCellHeightSlider=new
15300	"-labels","sample1.train",
1572	getsubpopulationid
6146	paintDocument(null);
18030	s),
11885	game
2338	instanceiterator
22864	lossH=new
6664	learnerName="";
643	splitter
11607	w=n.e.getWeight()*n.sim;
2860	setview
14377	http://cogcomp.cs.illinois.edu/page/software_view/3
20886	trainDataFilename;
11929	basketball
23558	sum_f
2529	listswithoneexampleeach
1605	OnlineBinaryClassifierLearner[
15644	Compensated
9873	documentstring
20477	spansets
2269	s){
16031	classNameSet.addAll(group.classNameSet());
1042	edu.cmu.minorthird.text;
5693	dstiterator
21183	stepscompleted
15999	'sliding
18695	if(inLineClasses!=null)
3814	Trie{
11437	((BasicDataset)dataset).iteratorOverUnlabeled();
12152	asserted
5425	correct
1009	button
396	CrossValSplitter<Example>(3));
7338	rk,OnlineTextClassifierLearner
19678	instance.addNumeric(new
4248	labels,JComboBox
21311	ClassificationSignalParams(base);
4609	JTextField("[null
3845	accum,Span
19541	MathUtil.logistic,
17122	if(!(example
9064	(int)
19370	viewerTracker.updateViewLabels(newLabels);
20188	fe,Span
17511	subViewer.handle(signal,argument,senders);
16925	lastT++)
15816	sequence;
11222	showLabelsButton
14153	interpreter.eval((NestedTextLabels)annotatedLabels);
7290	OnlineLearnerEditor(String[]
5303	coresponding
1746	importOps(labels,base,file);
7446	minimalMargin=1;
4430	LongTestPackage
7383	repositoryKey
10653	TextLabelsAnnotatorTeacher.
14306	encloses
3144	sequence.
852	sequence,
9864	setDocumentGroupId(String
15926	sequence)
2230	buffer.append(docString.substring(docPos,pos));
12872	this(null);
4006	returnVal=
3219	Feature("office"),
21365	setOffset(int
19131	wholePanel.add(advancedOptions,gbc(1,row));
12175	List<StringSpan>
7357	labels.getTextBase();
21998	linkfile
17947	SpanFE.from(s,buf).right().subspan(0,2).emit();
4276	debug(TextBase
14350	Ignores
14127	setMixupParameters(CommandLineUtil.MixupParams
3210	MutableInstance("William
3674	Class<?>
1175	dir.list();
21733	iotype
15336	bigram
1995	labels.setTextBase(base);
4497	ERROR
12979	ListSelectionListener(){
23660	4.385560249232324e-03,
7441	OnlineBinaryClassifierLearner{
19544	expOdds/(1.0
3812	sequences
6685	thisUpButton=new
7495	product
3780	over,
10359	"+bestThreshold);
8328	propertyset
5607	.println("****************************************************\n\n");
14523	System.out.println("Low
16696	"Can't
8222	produce
9335	if(legalAggregators.contains(oper)){
16583	Class[]{});
21494	(cacheFilled)
22216	i=mixupExpr.extract(labels,input);i.hasNext();){
20224	len=Math.min(s.size()-lo,len);
6382	spanDocs[j].resetHighlights();
5000	JTextPane(doc);
20362	m=p.matcher(str);
4494	assertEquals(0.83,e.spanF1(),0.02);
18995	writer.invoke(o,
23798	1.6507955160908465E136,
10986	edu.cmu.minorthird.util.gui.Console;
10758	span=base.documentSpan(documentId);
20270	SpanSetResult(String[]
18479	size=learner.getHistorySize();
12565	hasletter
15629	datafile
22892	lossH.increment(ff,0.0);
3009	v=new
11114	(MultiDataset)testParams.testData;
18781	classBox
20059	Simultaneously
15548	classLabelName){
20076	getAnnotationProvider(){
17885	this.subprocessor=subprocessor;
19038	textField.setText(value.toString());
14860	Evaluation(SampleDatasets.toyTrain().getSchema());
5917	"not
3985	selectedFile=f;
20079	this.annotatorLoader=newLoader;
19048	"+checkbox.isSelected());
11131	if(testParams.multi
17088	File(constraintFileName)));
6116	"+spans.size()+
8258	labels.getTokenProperties());
18661	inLine=false;
992	theory
10316	newData.add(it.next());
18484	teacher.train(dummy);
21574	editedSpans;
11300	multitestparams
14654	result.add(name+"-");
21289	findfileresource
1359	TextLabelsLoader().importOps((MutableTextLabels)labels,base,labelFile);
594	mainPanel.add(innerPanel,BorderLayout.SOUTH);
21498	x*x+y*y;
17856	tagger-learning
17394	v.summaryStatistics();
8149	basicrwrapper
17979	if(gui){
12969	listener
3017	TransformedVanillaViewer
12500	//parse
5694	getmappedchildspan
16955	trace[seqLen][y];
14412	if(!inFile.exists()||!inFile.isFile()){
3864	i=0;i<words.length;i++){
3679	EncapsulatingClassLoader
4903	ProgressCounter("train/test","fold",s.getNumPartitions());
24067	Tries
9122	f(k)
9560	random,double
5028	viewerControls){
18215	fCnt|class="+countsFeatureGivenClass[j]+"
13062	background(String
12154	SHORT_FORM_TYPE
13299	getClassifiers(){
19234	joptionpane
20467	removes
15765	StringTokenizer(args,
413	BatchClassifierLearner[]{learner};
6432	paintdocument
9952	sum_x
9121	necessary
10777	reply-to
522	StringBuffer
23762	4.274883284060024E69,
7996	testregextokenizer
14089	filteroncorrectness
4594	edu.cmu.minorthird.util.gui.TransformedViewer;
7001	thisdownbutton
13230	SGMFeatureFactory();
19717	romma
15774	options.setProperty("trainer",
8191	BagOfLowerCaseWordsFE
9447	this.train=train;
8589	1E-17
4324	if("-mixup".equals(args[argp])){
11786	"DocPerLineTestData_WithBlanks.base@line:5",
23857	2.5563239178728637E258,
7799	populationstddev
15265	this.c
21314	TrainClassifierParams();
18203	2.2.1.
19862	TreeMap<T,Double>();
4750	TFList.add(tokenSpan.asString().toLowerCase());
6813	IllegalArgumentException("illegal
675	Sequential
18127	this.n
17570	vWgt[i]
5058	if(table[i][j+1]==null)
3014	Cohen");
18128	this.p
4139	editor.getViewerTracker().setSaveAs(groundTruthLabelsFile);
11928	international
8570	this.x
14255	i=0;i<neg.length;i++){
17221	subpop2=((HasSubpopulationId)o2).getSubpopulationId();
4411	setselecteditem
7231	documentlooper
17519	vWgt,
22421	BayesClassifiersTest
18208	2.2.2.
7424	basicdataset
19820	OrderBasedTransformLearner(String
19075	JLabel(value==null?"null
17228	"+folds+"]";
3488	label[start][end-start-1]);
2772	Move
15472	features=new
19273	getpropertydescriptors
6320	pane.setFont(currentFont);
8419	justThisDoc=Collections.singleton(docSpan).iterator();
2647	upButton=new
8987	f(x)
9188	f2/r2))
18276	if(EMconverged(logLik,previousLogLik,1e-7,true)){
7699	propertyiterator
7770	populationStdDev()/Math.sqrt((count-1)/count);
1292	running
15211	split'
6897	subpanel.add(propField,myGBC(1));
1258	("sample2.test".equals(script))
2244	this.pos=pos;
22718	trainData=trainData.annotateData();
16631	'usage',
394	split.
11688	TextBaseLoaderTest
21870	explainedseq
19546	possibleLabels()
18046	!span.getDocumentId().equals(e.getSubpopulationId())
10518	testFilewithLabelFile(){
5581	debugging
1469	hard
1922	msg=e.getMessage()+addToMsg;
748	perceptron","sequence",numberOfEpochs*dataset.numberOfSequences());
18971	if((isInLine(pname)))
23340	['to'?
10879	darkgray
4084	truthLabels=null;
2620	spanPainter
11713	base.documentSpan("DocPerLineTestData.base@line:2");
15375	useLogistic=flag;
4867	(lc.endsWith("ed"))
8250	propertySet.toArray(new
9884	SegmentGenericCollinsLearner
5815	Segmentation
3709	doesn't
1163	List<String>
8573	plog
24021	factorial
7216	getSequenceDataset()
22287	currentlevel
2816	statusmsg
12264	extractAbbrPairsFromFile(String
19968	textLabels.
21619	(saveAsFile
18010	SubPopIdTest(String
12489	<file>
12020	hall
22419	edu.cmu.minorthird.classify.algorithms.linear.PoissonLearner;
1950	types=labels.getTypes();
24025	Math.abs(j);
10555	validClassNameSet.add(validClassNames[i]);
22430	TextLabelsLoader().importOps(labels,base,new
12746	edu.cmu.minorthird.classify.transform.AbstractInstanceTransform;
22927	deltaLoss
7104	TestClassifier().callMain(args);
5863	segData.segs.getSubsequenceInstance(prevPos+1,pos+1);
2513	if((instA
22860	this.regret=false;
10206	splits
17573	vCnt[i]/vWgt[i]-0.0,2
9327	info.
17237	list.add(new
5725	versa
14586	lowRiskNameList.add(tn);
16073	shallow
16140	textLearner.getClassifier();
21107	currentDepth=0;
14893	checkStats(stats1,stats2);
18145	Implementation
3262	CommandLineUtil.SaveParams();
9827	james
4583	dotest
21091	nsplitter
9730	More
20756	DatasetLoader.loadFile(new
17189	badExample(Object
11000	ClassifyCommandLineUtil.SimpleTestParams.class,
23328	Vigilinx"
10165	if(dimensions!=otherLabel.numDimensions())
16607	ex2){
18649	"Filename"
18302	f(t)
143	signal
11755	repeat
23679	3.17805383034794562,
15489	operIter=oper.iterator();operIter.hasNext();){
23097	hand
17972	gui=Boolean.parseBoolean(args[3]);
23800	1.3520015276784033E140,
18731	log.warn(filename+":"+r.getLineNumber()+":
20996	SeqTrainTestParams
10071	ExampleSchema.NEG_CLASS_NAME)
1567	drawn
18343	System.out.println(
5392	separate
945	buf.append(
9576	SubpopSorter<T>(i).subpopIterator();
6104	spans.add(s);
6305	refreshSpanComponent(i);
10890	OnlineBinaryTextClassifierLearner(OnlineClassifierLearner
23781	6.123445837688612E103,
12312	lastIndexOf(String
6456	tokenprecision
14319	documentId=k.next();
13323	gui=new
3293	doMain(){
9443	this.signal=signal;
5270	bases.
9482	base.labels,
8016	edu.cmu.minorthird.classify.algorithms.random;
7629	}catch(SubTextBase.UnknownDocumentException
2111	if(!dir.mkdir()){
12286	this.base=b;
8629	(or
19726	gethyperplanenormsquared
13012	namedsubviews
2707	keymap=JTextComponent.getKeymap(JTextComponent.DEFAULT_KEYMAP);
21037	+"\nSplitter
1079	expect
19509	multiLabel(String
15473	String[numNewFeatures];
13143	Modified
17138	Splitter<String>
694	CollinsPerceptronLearner
13618	a_pos
4623	plus
16521	Dataset";
1351	'"+script+"'");
9745	iseed2=DEFSEED2;
11464	pushed'
19105	javadocLink=
6701	this.spanTypes=learner.getTypes();
17084	loadFile(constraintFileName);
3803	k-th
17840	ANNOTATOR_FILE
1114	present
433	BasicDataset();
21771	newFeatures.length+instance.numFeatures();
16444	problema
21634	readOnlyButton.setText(readOnly?"Edit":"Read");
10541	POS_CLASS_NAME="POS";
14402	CharAnnotation(word.start,word.end-word.start,tagger.discreteValue(word)));
15464	ex,Map<String,Map<String,Set<String>>>
5621	srcOffset=sos;
6022	guessBox.setEditable(false);
2141	createXMLmarkup(String
12376	closeParenIndex);
2548	"null";
14366	java.io.PrintWriter;
14923	System.out.println("Max
10191	negativelabel
10003	previousSeg
17901	help();
21400	Panel
13463	ftr,int
3688	defineClass(className,contents,0,contents.length);
17926	System.out.println("two");
5597	Iterator<String>
16961	dumpStuff(g,fty,trace);
18613	javax.swing.JEditorPane;
4679	Name","Weight"};
13004	viewers
13255	things?
2610	superset
19771	ii++)
4839	numdoc
3373	getoutputtype
6187	guessLooper=
11355	things:
1037	Globals
21419	gettopnode
3922	lastIdList=match.endIds;
7124	transform(Instance
2567	edu.cmu.minorthird.text.BasicTextBase;
18028	fe.extractInstance(new
12615	subviews
4981	IdViewer(labels,span));
1130	defaultSGMLPattern
21886	map.put(o,ONE);
13334	JScrollPane(panel));
10136	posProb=new
21206	annotators.config:
14594	]+","");
11801	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2477_0"));
14026	split.setResizeWeight(0.50);
14553	j=docSpan.size()-SIG_SIZE;j<docSpan.size();j++){
13407	Example[rankingMap.size()][exampleSize];
3725	endswith
1338	(baseFile.exists())
14558	labels.instanceIterator(predType,docSpan.getDocumentId());k.hasNext();){
4661	Instance);
6197	"+truthType+"
6583	resetHighlights();
10718	getdisplaydatasetbeforelearning
1264	("sample3.unlabeled".equals(script))
14470	(so
12892	viewer.
9294	hats
9340	set.add(oper);
9328	RelTemp
10843	viewer1
21158	System.out.println("Task
3807	getnumpartitions
10832	viewer,
1055	edu.cmu.minorthird.text.mixup.MixupInterpreter;
18519	if(opt.startsWith("-i")){
16658	help(){
3162	i<previousLabels.length;
12737	nstate
22327	declarespantype
16063	"+size()+"\n");
5664	srcoffset
20924	"Adds
22979	hash
4214	viewer;
12303	mySubstring.charAt(i);
9696	defspanprop
1519	close_all_types
1890	addToType
10844	viewer2
20483	Logger.getLogger(CommitteeLearner.class);
7402	edu.cmu.minorthird.classify.multi.MultiExample;
21638	if(importType==null){
14892	identical
13696	if(innerLearner.get(i).hasNextQuery()){
20228	lo=Math.max(s.size()+lo,0);
20338	replacement){
4237	truthLabels
5958	allocmodel
9370	copy.addSGM((SGMExample)i.next());
6219	super("Display");
9192	reject
10596	semisupervisedclassifierteacher
14805	super("LibsvmTest");
14327	specific
2443	have
5762	segs;
4114	"+mixupProgramFile.getName()+
1178	files[i]);
3714	//return
11404	//--------------------------------------------------------------------------------
6600	resetHighlights(){
9238	U*h(x)
12272	currString.split("\\.\\s{2}");
15806	(newUseHighPrecisionArithmetic
14776	hscore
741	MultiClassVPClassifier
20193	"[SpanResult:
2697	contextWidth){
9471	CommandLineUtil.createSpanProp(signal.spanPropString,
4108	"+mixupProgramFile.getName();
6306	indexOfSpanMap
22458	testbayesclassifierstest
11696	tokenizer.
17894	"+args[k]+"
22016	MixupInterpreter(){
2634	if(documentList.getModel().getSize()==0){
12229	loadTrueDefinitions(String
1806	base=labels.getTextBase();
22855	problem:
9809	iz=iseed1-iseed2;
20854	attempting
10883	Edit
11466	learnt
19833	if(frequencyModel.equals("word")){
18142	drand
6493	getfont
19211	t.setContent(s);
17336	ProgressCounter("presenting
21131	graphicCounter.setMaximum(numSteps);
4912	//showSubpops("subpops
16680	argValues.getProperty(property);
9648	problem.
23768	1.386831185456898E80,
11846	loader.loadWordPerLineFile(new
22315	phraselist
5144	#retokenize(Tokenizer,
2524	learns
19217	i=instanceMap.keySet().iterator();
17877	labelviewer
20077	requiredAnnotationFileToLoad==null?"":requiredAnnotationFileToLoad;
12815	annotateWith(String
1061	Logger.getLogger(FancyLoader.class);
23542	logisticregressiontest
20870	this.clsLnr.clsLearner=type.clsLnr.clsLearner;
9019	calculate
15956	setlogspaceoption
9801	(iseed1<0)
6327	Implement
7022	getdescription
11864	defended
17846	"TrainTestClassifier
23983	coefficients
3542	setsubpopid
3165	String[]{
7343	editor.buildFrame();
8356	ConfidenceReportingSequenceAnnotator
10859	StyleConstants.setForeground(yellow,
24359	this.parentLevelName
9428	CommandLineUtil.TrainExtractorParams();
13247	ngb
2466	if(list==null)
9089	right
20033	result.eq()
22856	this.alpha=a;
8123	-rw.dnorm(candidate,
2128	<br>
23990	inverted
20440	partial
2075	FileOutputStream(file));
13316	classEx=
6269	Map<String,List<Span>>
22402	testviewer
10439	bestofn
21245	native
13742	(Controllable)viewer;
3273	p){
23140	if(df==0)
14713	!email:t,
13298	getTransform(){
307	multi
2986	GridBagLayout());
520	newInstance;
8822	this(confidence,"unknown");
11103	(testParams.typeString.equals("seq"))
16564	argValues=new
23429	DecisionTreeLearner(5,2),10),1.0/7.0,1.0/7.0));
6466	neg
8585	p))
8770	FileWriter(outputFileName));
20415	behavior
682	Methods
9041	Math.min(llll,m)
19614	excount;//number
3506	lo=0;
5922	net
10628	getDisplayDatasetBeforeLearningHelp(){
22093	pseudotoken
7293	log.fatal(e,e);
12098	ensures
23904	coefficient.
12362	currSentence.substring(sentenceEnd
23887	coefficient,
18578	mat[k][2];
457	"+(i+1)+"/"+innerLearners.length
634	nec
9430	trainTest
7284	gettype
10451	featureindex
13687	((innerLearner.get(i))).reset();
5787	(pos=0;
21590	SpanEditor(TextLabels
15562	stackedbatchclassifierlearner
13931	TableCellRenderer(){
17793	(double)wgt.length;
7306	readOnly,OnlineTextClassifierLearner
10585	b=(ExampleSchema)o;
6509	indexoft
9391	System.out.println(e);
20750	if(sequential)
21345	b.next();
18122	p);
4022	jfilechooser
52	new
10849	java.awt.*;
17720	StringBuffer("final
7528	distillCache(){
9980	history[0]
15659	ContingencyTable(long
19253	validclasses
13502	margins){
10667	SequenceAnnotator
16737	"+father+"!!!");
16120	setTextLearnerParameters(CommandLineUtil.TestClassifierParams
1064	root
1747	Load
21545	ProgressCounter("perceptron
4099	.setClosurePolicy(TextLabelsLoader.CLOSE_TYPES_IN_LABELED_DOCS);
12610	JTabbedPane.
20645	NegativeBinomialClassifier();
7633	if(doSplit)
4593	edu.cmu.minorthird.util.gui.ParallelViewer;
2720	editorPane.requestFocus();
7203	(value!=null)
9886	OnlineClassifierLearner
13767	compact
13601	march
10804	SplitViewer{
8345	below,
6131	if(highlightAction!=null)
14078	multidatasetindex
11631	instead,
7973	tokenizertest
8125	Math.min(
7005	settypesbeingedited
11711	assertEquals(19,
5784	init(CandidateSegmentGroup
7875	tokens1.length);
1577	edu.cmu.minorthird.classify.ExampleSchema;
6263	spanIsDirty;
11164	getCLP().processArguments(args);
9779	<CODE>new
14407	System.out.println("Usage:
4795	i=list.iterator();i.hasNext();){
22844	LIST_SIZE=5;//history
7516	if(z>1)
12017	adamson
14882	stats2[1]=e2.averagePrecision();
11157	clp.saveAs(file,format);
13689	List<Instance>
1934	token");
9372	splitSGM(final
10724	getsequenceclassifierlearnerhelp
16918	lastY<ny;
11002	ClassifyCommandLineUtil.SeqTestParams.class,
5557	this.getParentMapping(parentSpan.getDocumentId(),parentLo,parentHi-
15074	nan
3471	newInstance)
10377	subtrees
14192	"testClassifierParameters","trainTaggerParameters",
9825	ranecu
22513	0/1
15953	trainer
4149	.getViewer().getTruthBox(),newTypeField));
23977	(x/2)
12727	MultiClassHMMClassifier
1168	"sample"+i+".train");
20221	if(s.size()==0)
7822	Its
18729	while((line=r.readLine())!=null){
10252	for(Example
16522	getFormatNames(){
623	generalization
20703	r=(sumWgt-sumWgt2/sumWgt)/(N-1.0);
7607	ExtractionEvaluation();
23334	TruSecure,
8892	pp.,
8483	trained
9456	signal.spanType==null)
8006	spantypetokenizer
19346	keeps
12280	StringSpan("",0,0);
15482	Aggregators
393	3-CV
18482	dummy=
18099	nbp
22221	i=input;i.hasNext();){
5433	startIndex=currInstance.getLoChar();
1756	setClosure
4515	});*/
9365	invertIteration(splitter.getTrain(k));
16413	attributes
2392	docspan
1852	'"+docId+"'
10708	java.io.File(args[0]));
7200	i<document.size();
18606	java.awt.Insets;
1686	java.util.TreeSet;
3198	j-1.
2668	viewEntireDocument=flag;
7524	this.alpha=alpha;
6261	spanMarkups;
9531	visible;
11781	base.documentSpan("DocPerLineTestData_WithBlanks.base@line:7");
5791	negativeClass;
7239	StatusMessagePanel
18749	className=splitName[splitName.length-1];
16423	roth
4586	textui
12176	ArrayList<StringSpan>();
14655	result.add(name.substring(0,1)+".
23457	this(numSites,numPagesPerSite,false);
23390	companyword
3811	rote
13026	identity_transform
1372	(mixupFile.exists())
20234	tokens(){
15835	clabels;
11044	"Simple
20111	Feature(result.extend(s));
24327	hill
3653	myClassLoader=new
7709	if(x>0)
7969	TestSuite(TokenizerTest.class);
2348	writeobject
11060	parameters:");
18812	optionPane=new
20423	setfeaturestoragepolicy
1741	base,File
17617	Estimate("Poisson","weighted-lambda",tm);
9432	getTrainTestExtractorHelp()
18930	PropertyEditor(boolean
22657	annotatorlist
17028	dumpstuff
16022	if(maxWindowSize>=0&&group.getMaxWindowSize()!=maxWindowSize){
223	session
13325	panel=new
5865	example.featureIterator();
5356	retokenized
15378	setUseConfidences(boolean
13376	trimmed
19154	gbc.gridx=x;
877	voted
17734	Double(sigmaPost)
7636	va=new
24341	instancePool()");
10436	-w11*Math.log(w11)-w10*Math.log(w10)-w01*Math.log(w01)-w00*
6081	displayType,boolean
23210	append(String
3498	size()
6825	if(returnVal==JFileChooser.APPROVE_OPTION){
13644	anonymous
22118	i=0;i<matchingChildSpan.size();i++){
17470	trainit
13432	A_Neg:
5191	childTextBase,TextBaseMapper
22948	tmp++;
2121	File(dir+"/"+
493	innerClassifiers)
5571	childLo=childSpan.getTextToken(0).getLo();
9630	baseTag=
1407	"+labelDir+"
21724	exportbutton
19832	filter.addFeatureVal(value,f);
2601	viewLabels;
20946	classifierFile(String
20283	SpanSetResult(extend("last"),fe,newSet);
13154	this(instance,label,exampleId,1.0);
12314	s,int
16453	filterfeat
11198	viewButton
533	innerClassifiers;
21212	followed,
7295	viewLabels,
11136	ClassifiedDataset
11654	i=a.featureIterator();i.hasNext();){
17700	K>2
16943	fty[lastT][lastY];
18297	|f(t)
3410	a,b,c,d,e
23576	f_in_ex(.)
6500	marks
23007	"Semi-Markov
23491	test[i]=asSet(splitter.getTest(i));
4664	numRows=0;
276	Iterator<MultiExample>
8915	precomputed
19657	1.0);//smooth
22374	"Charlie"});
11203	rv.setContent(
6444	wasedited
7453	this.minimalMargin=minimalMargin;
6293	indexOfSpanMap=new
20446	rspan
4607	emphasized){
576	TitledBorder("Stacked
10810	ZoomedViewer(){
8042	apps/edo/doc/
15104	Chi-squared
23271	scroll
10869	StyleConstants.setForeground(red,
22382	sendSignal(TEXT_MESSAGE,"displaying
16551	addunlabeled
2482	posExamples=new
7707	sign(double
4976	TextViewer(labels,span);
9623	taggedLabels=new
20002	tokens(),
3206	labels[j-k-1].bestClassName();
22859	if(mode==0){
7077	CommandLineUtil.TestClassifierParams();
20532	this.maxWindowSize=windowSize;
10915	label,String
23739	2.652528598121911E32,
22536	random){
4746	tokenSpan=docSpan.subSpan(j,1);
13634	cur_w_neg
8017	Jan
7837	gently
16295	"invalid
2979	gbc.weightx/=part;
9022	my;
14143	if(program==null){
17658	(tauSigmaEstimate[i].getPms().get("tau")
16910	y++)
20933	Paramters
21429	distribute
15173	number){
17318	TextBaseEditor(base,labels,labels,statusMsg,false);
12607	allows
11790	"DocPerLineTestData_WithBlanks.base@line:12",
20522	SegmentAnnotatorLearner
8369	'old.ann'
18624	instantiations.
17601	estimatePoissonLambda(double
8985	below
17183	if(testUsers.contains(userId)){
10639	schema.getNumberOfClasses());
18636	newValue).</code>.
15309	8.0/9.0,
4880	edu.cmu.minorthird.classify.Splitter;
14814	URI(url.toExternalForm())));
4886	cds;
7834	row,
15713	"+ct.getCompensatedPMutualInfo(3));
24126	Hill
19020	panel.add(typeOrBrowsePanel,gbc(1,row));
10531	testfilewithlabelfile
11636	s=schema.getClassName(i);
9322	legalAggregators=new
12896	changed.
7168	problem
9265	doctoral
18840	pname==null?"Help":"Help
1802	(default)
20925	SeqTrainParams
13238	if(compress)
11321	annotatedinstance
22621	for(Iterator<Annotator>
5700	newmapper
16568	"+args[k]);
4699	createlineborder
18736	init(Class<?>
10995	Class[]{
23716	362880L,
15483	HashMap,
10701	SmartVanillaViewer(sa.seqClassifier);
12625	subview's
10864	StyleConstants.setBackground(blue,
18485	sequenceDataset=dummy.getSequenceDataset();
10124	String[dimensions];
1447	mixupinterpreter
4883	Visible
6235	super(-1,100,-1);
9289	themean
583	finalPanel.add(w);
504	h<schema.getNumberOfClasses();
21505	(mean!=this.mean
6111	if(!wasEdited)
20380	retieved
4714	Date:
20486	learner,int
8751	FileReader(in));
7198	sequence=new
8977	Distribution
23615	"prior
21804	myiterator
10226	entirely
22289	oldlabels
1779	TYPE
19245	validsubclasses
19762	searcher.doSearch(sequence,alternateClasses);
15285	"-showTestDetails",
18059	pbj's
2207	TagInfo(label.start,"<"+label.type+">",true));
14226	if(!ExampleSchema.BINARY_EXAMPLE_SCHEMA.equals(schema)){
5649	addtextbase
7325	statusMsg,OnlineTextClassifierLearner
13752	controls.
4570	traintestextractor
5496	if(parentEntry==null){
16257	serialVersionUID=20071130L;
14206	loadannotatorparameters
22000	lineno
15638	variables.
3082	bottom
22659	resetall
20610	getsemimarkovlearnerhelp
20577	SegmentAnnotator(Segmenter
1835	if("addToType".equals(op)){
19751	predictedClasses.length!=sequence.length)
10521	Base
21016	trainData;
4631	ExampleViewer());
11566	Categorization",
14791	updated_fixed
20821	trainData=null;
15631	labelstring
5723	parenttochildmap
24373	SortedSet<TextToken>
14667	KEY
17008	maxSegSize="+vs.maxSegSize),BorderLayout.NORTH);
23966	(long)
8764	writeToOutputFile(String
10993	Class<?>[]
23764	1.2696403353658264E73,
2061	.getSpanProperties().size());
8106	UNUSED
2048	while(it.hasNext()){
2983	controls;
16175	"[instFromPrediction
13212	candidatefinder
1317	(PatternSyntaxException
16224	Blum,
14464	procedure
20669	example!\n
7900	assertEquals(10,
8809	20080303L;
22174	importLevel=statement.getImportLevel();
18785	classBox.setSelectedItem(currentName);
14752	allnames
23519	expectedTestError,double
11714	base.documentSpan("DocPerLineTestData.base@line:3");
4936	i<cds.length;
12227	hasCapital(String
6487	spandocs
19865	result=map.get(object)!=null;
7589	num_partitions=5;
10182	details="";
21268	s.read(buf);
17380	trainData,
11675	num
18296	'threshold',
12648	title,Viewer
8866	High
16769	reflect
15906	trainData)
963	classPanel.setBorder(new
7429	addmulti
2368	progress
1898	if(lo==0&&len<0)
20957	splitter=Expt.toSplitter(s);
20863	mutlit
17819	lambdaestimatevec
14804	LibsvmTest(){
16504	unlabeledExamples.iterator();
13028	addmouselistener
19262	inlinecomponent
3187	getWeight(Feature
551	buf.append("final
14489	allNames=new
20292	SetResult<Token>{
21441	purpose.
17226	testList.get(k).iterator();
15475	double[numNewFeatures];
19632	//System.out.println("Hyperplane
13097	args);
22727	learner,SemiSupervisedDataset
18247	logLik=0.0;
15935	cmmEx
13965	RandomAccessDataset
10809	zoomedOut,zoomedIn;
22273	levelstolabelsmap
3347	trainclassifier
4989	TextControls
3256	Train
22186	log.debug("defining
13251	from=link.getFrom();
2924	controls.setControlledViewer(viewer);
6698	this.textLearner=learner;
18862	helpPanel=new
15141	this.value=v;
15076	checkstats
4841	email
12608	several
5596	mappings:
8432	tokenSpan);
21877	Integer(1);
14438	illinois
6519	instantiates
13055	invoked
19996	from(span).right().contains(&quot;obj&quot;).emit();
8947	p6;
980	toString()
865	viterbi,
18668	name=null;
20982	SeqTestParams
17274	req2profilemap
5669	getchildmapping
9152	p6)
11999	labels.instanceIterator(type,
16	protocol
16621	fileName,CommandLineProcessor
9147	p5;
16333	if(example.getLabel().isPositive()){
18087	NegativeBinomial(int
2462	i=data.iterator();i.hasNext();){
5495	parentEntry=parentToChildMap.get(parentDocId);
2235	buffer.toString();
18017	base.setDocumentGroupId("b1","bar");
14241	log=Logger.getLogger(SampleClassificationProblem.class);
5050	propSet=labels.getTokenProperties();
14059	.toString();
1310	not")+"
12899	if(content!=this.content||forceUpdate){
2783	pretend
9224	p5)
15646	Info
8946	p5,
9256	high
1525	getabsolutepath
3006	very
14303	documentGroupMap.put(documentId,documentGroupId);
17661	tau["+i+"]
17437	this.subsampleFraction=subsampleFraction;
3249	testinstance
2571	edu.cmu.minorthird.text.TextLabels;
12287	this.lo=lo;
7269	getType(){
10942	classOfS=c.classification(fe.extractInstance(labels,s));
9203	p4)
15036	Integer.parseInt(s);
15034	Double.valueOf(s).doubleValue();
8945	p4,
14593	str=name.toLowerCase().trim().replaceAll("[^a-zA-Z\\-
12003	s.asString());
10259	bestThreshold=Math.random()*(maxValue-minValue)+minValue;
9084	0.5
17963	featurebuffer
20757	IllegalArgumentException("Error
13456	actualFtrs.add(ftr);
15291	0.2
15322	0.1
15215	'Generic'
5855	MTFeatureTypes
9145	p4;
10936	getTypes(){
17307	viewer.getDocumentList().addListSelectionListener(spanEditor);
6592	s,AttributeSet
7877	assertEquals(15,
18112	(0,1)-Uniform
15810	useHighPrecisionArithmeticHelp
15555	classifier",new
13267	if(e.hasID(id)){
12400	Long
11086	predicted.bestClassName());
14682	nameMatcher=new
7608	log.info("Evaluating
9208	p3)
7570	distillcache
8143	random
11215	viewButton);
8944	p3,
19990	Typical
14147	System.out.println("Will
23880	non
23182	task,
91	not
18359	ispresent
19679	Feature("f2"),
17997	cvfolds
19801	predictedclasses
18064	Binomial
15396	newCrossValSplits){
22090	pseudotoken,
20399	if(line.equals(str)){
9709	<B>RANECU</B>
10249	now
19181	this.flag=flag;
7425	nov
11898	0-0
22194	if("offLevel".equals(keyword)){
282	Iterator<Instance>
9143	p3;
23240	task:
2256	end){
2163	ArrayList<LabelInfo>(unsortedLabels.size());
6998	completebutton
11161	task;
21854	classifiedSeq.put(place.seq,
9156	p2)
11942	"RUGBY
5059	table[i][j+1]="-";
6776	ReadOnlyButton(String
20999	properly.
17918	log.info("Subprocessor"+i+"
6903	myGBC(int
4294	args){
4044	showsavedialog
9517	ComponentViewer(Object
11287	t1instancetransformlearner
8111	p2,
10735	SubTextBase(TextBase
16767	'"+line+"'");
10396	j=0,1
6948	eSpan.add();
7901	assertEquals(17,
9141	p2;
15885	HISTORY_FEATURE,labelNames,histsize));
5623	dstOffset=dos;
4176	top.add(errorPane,gbc);
835	!differenceAtJ
24101	StirlingCorrection.
18890	if(osName.startsWith("Windows")){
6836	statusMsg.display("Error
11520	trainTest){
23651	8.330563433362871e-03,
7787	mathutil
15733	BasicFeatureIndexTest()
14110	classifierviewer
10787	log.fatal(e,
7474	if(y*s<=minimalMargin){
8110	p1,
9164	p1)
3172	getSource()
22550	crossValSplitter.getNumPartitions();
7893	Document("doc3",
18871	helpPanel.add(ep);
13829	ManyVsRestLearner(BatchClassifierLearner
8473	alternateLabels[i]=ClassLabel.negativeLabel(-1.0);
17151	s1,String
11818	assertEquals(18,
17839	"ApplyAnnotator
19424	other);
4481	"true_name",
13036	Loop
10224	Yep,
9138	p1;
17474	getnumberoffolds
9034	p0)
20744	toDataset(String
724	"Number
19734	searcher;
2405	endcomplabel
10533	testscript
10286	falseData.add(example);
7493	distillCache();
19422	getRightBoundary();
8637	(otherwise)
11124	0);
13704	if(innerLearner.get(0)==null){
5177	entry.getTextBase();
2761	ContextWidthSlider
15177	infoGain,Feature
7328	editLabels,viewer.getDocumentList(),viewer.getSpanPainter(),
11701	lines,
14434	nlp
13222	Saveable,Dataset,Serializable{
7899	assertEquals(11,
18553	Poisson,
943	buf.append("Hyperplane
16874	compareSegmentsAndRevise(
8912	RandomElement
9179	counterpart
9161	f2),
6322	JScrollPane(pane);
13998	left.setOrientation(JSplitPane.VERTICAL_SPLIT);
21436	permission
14274	serialVersionUID=20080202L;
2568	edu.cmu.minorthird.text.MutableTextLabels;
15517	truevalues[i]=values[i];
21629	keymap.addActionForKeyStroke(KeyStroke.getKeyStroke("LEFT"),prevButton
12356	"));
6666	tbViewer=null;
24031	fac2(int
21873	known
2258	this.type=type;
7881	assertEquals(12,
1657	generic
17660	//buf.append("
6094	decide
8544	previouslysavedannotatorfile
4906	(SequenceDataset)s.getTest(k);
689	Algorithms,
23883	let's
20381	isAbsent=true;
1366	because
14688	if(args[i].equals("-labels")){
16176	instfromprediction
21630	B"),prevButton
22848	this(1.5,0.5,false,1);
14547	")+"
7874	assertEquals(13,
12008	testcases
14465	increases
21530	mueller
21811	this.sequenceClassifier
19055	TitledBorder(pname));
528	innerClassifiers[i].explain(oldInstance)+"\n");
4166	gbc.gridx=++col;
10715	outputfile");
2036	"+(hi-lo)+"
19703	-12);
20317	fe,filteredSet);
1489	beanshell
8306	tasks
23952	nk;
918	voteMode=flag;
22172	oldType=statement.getOldType();
16401	mycl=(MyClassifier)o;
19605	version(Aggressive
19113	title=pname==null?"Help":"Help
11823	assertEquals(14,
5501	MapEntry(parentDocId,parentOffset,childDocId,
16519	copy.add(i.next());
15783	newMaxIters)
18788	panel.add(classBox);
15989	edgehistfeatures
11913	5,000
13507	i<margins.length;i++){
14294	document=new
3697	name\\:
3886	tab=0;tab<level;tab++)
2444	higher
19946	for(Iterator<List<Example>>
13821	OneVsAllLearner.
8506	ann=(Annotator)IOUtil.loadSerialized(loadFile);
6138	guessBox,truthBox;
8891	156
24051	Math.round(Math.floor(value));
13929	MyTableModel(filteredMultiClassifiedDataset()));
5364	if(parentEntry==null)
18955	pname.charAt(0)==pname2.charAt(0)&&
3489	getSubsequenceExample(start,end).
18201	2.2.
15973	testdatasequencec
14976	\t\n\r\f:");
14973	if(line==null)
15521	stackFeatureName(String
23127	this.numDocuments=numDocuments;
4132	groundTruthLabelsFile.getName(),groundTruthLabelsFile,
19501	multiPosLabel(String
4615	JTextField(e.getLabel()+"
21740	exports
2590	SpanPainter
6292	HashMap<String,List<Span>>();
13928	JTable(new
8033	once
2616	one)
22925	"+lossF.featureScore(ff)+
19864	object,double
781	We're
2526	comparable
9962	delta,CandidateSegmentGroup
13057	one.
5137	one:
5092	...",});
18183	2.1.
6637	inserting
2903	javax.swing.JTextField;
22751	isgreaterorequal
12785	inDict(Token
19049	Boolean(checkbox
15341	if(signal.cross)
23175	this.errorArea=new
20003	subSpan(),
823	one?
20755	File(s),multi);
22477	multiSpanProp;
19107	helpString=
22533	Splitter<T>
5340	matchingSpan=span;
11606	s=n.e.getLabel().bestClassName();
1668	TextClassifier
21180	numsteps
20314	(targetValue!=null&&targetValue.equals(value)))
15837	Iterator<Example[]>
13690	list=new
18285	estimateClassProbMLE(double
23172	viewButton;
16777	propertylist
23728	170
14576	transformedNames=transformName(i.next());
21133	graphicCounter.setString(numSteps>=0?("
12100	SGMExample.
3628	could
23467	"+numPagesPerSite+
7612	doSplit=false;
8078	vbeta[0];
2459	map=new
14730	.instanceIterator(nameMatcher.predType),NameMatcher.postLabels
5471	(and
6371	colorByStatus[SpanDifference.FALSE_NEG]=fn;
6795	added");
17602	classPrior,
2667	flag){
4378	errorpane
4316	argp=0;argp<args.length;argp++){
14394	PlainToTokenParser
6875	SpanPropertyViewer
9996	ones
20215	SpanSetResult(extend("contains_"+type),fe,set);
15147	VAL_COMPARATOR=new
13219	stached
23378	eluminant
21117	task,String
24050	floor(double
12053	johnson
9418	Jul
13817	18,
15277	TestPackage
2149	unsortedLabels=new
3195	GUI.InstanceViewer(this);
20021	(all
12016	stime
21261	findAnnotator(null,annotationType);
18090	Gamma(n,1.0);
15017	rvalues;
12788	getProperty(Token
18016	Club");
15815	DataSequenceC
6130	documentList.repaint();
2476	each.
7277	type'
11493	j=0;j<newSpan.size();j++){
11988	type)
10743	if(base.documentSpan(span.getDocumentId())==null){
11370	(externalLabelFile)
13772	type-
1711	type,
4400	updatetextlabels
7268	type.
9999	previousClassMap(Segmentation
20445	lspan
16525	if(!format.equals(FORMAT_NAME))
3064	"+ucBox.isSelected()+"
22681	edu.cmu.minorthird.classify.semisupervised.SemiSupervisedDataset;
13287	11,
14163	if("xml".equals(output.format)){
4443	Tree/Directive
18692	advancedParams,String
12878	setSuperView(Viewer
5707	typeinstances
10763	Logger.getLogger(AnnotatorRunner.class);
18821	PropertyDescriptor[]
20457	hasprop
10801	of,
5610	Comparable<MapEntry>{
11780	base.documentSpan("DocPerLineTestData_WithBlanks.base@line:6");
21448	(aka
6178	tpColor(){
13827	OneVsAllLearner{
5698	newtokenizer
19210	s.setName("fred");
11050	Learner";
13637	maxgain
126	example
7926	12,
1129	System.getProperty(REPOSITORY_PROP,".");
20631	Info-Gain");
15488	oper=Aggregators.get(type);
3201	k<history.length;
11058	usage()
7780	Math.sqrt(p*(1-p)/count);
3513	(window[lo][len-1]==null)
21695	EditSpanProperties(String
9407	invertiteration
21852	classifiedSeq.get(place.seq);
45	Returns
12832	annotatewith
11228	SmartVanillaViewer(testParams.testData));
23586	batchTrain");
21472	Muller
1776	closeType:
20659	if(e.getLabel().bestClassName().equals("POS")){
16538	JList(tmp);
5170	levelName){
11876	Saturday
18084	p=0.5.
22187	of:
18674	validSubclasses,String
7237	getdocumentspan
15407	baseLearner){
18158	13,
5296	srcOffset+length);
7422	transformed.addMulti(
1698	types
11432	BasicDataset){
14920	System.out.println("Avg
4082	IllegalArgumentException("mixup
9292	employed
713	getNumberOfEpochs()
17574	0.0,(m-v)/(r*m)
2734	AttributeSet[]
1754	closeType,
2985	setLayout(new
20174	set");
15133	MaskedInstance(ins,availableFeatures);
13052	non-null
9316	CoreRelationalDataset
19083	type:
18638	<code>boolean</code>,
2249	type;
19619	//this(true,
23882	still
16348	vpos_t.increment(pos_t,count);//vpos_t
23080	if(edit.editFile==null)
13735	BOTTOM=1,RIGHT=2,TOP=3,LEFT=4;
11177	","","
23303	ntotal
6784	cb=(JComboBox)event.getSource();
15197	tpColor();
11163	callMain(final
8349	off
22333	definetrie
4148	type:",truthLabels,editor
17419	Variant
15276	edu.cmu.minorthird.classify.TestUI;
14261	labels.addToType(s,"fun");
23397	edu.cmu.minorthird.classify.algorithms.linear.Winnow;
6268	arrays
11226	ViewerFrame("Labeled
24000	Taking
7090	evaluation=null;
5737	mappingsiterator
20803	getShowData(){
19506	multiNegLabel(String
17848	SPLITTER
117	only
9820	d[],int
7040	subpanel
23434	LogisticRegressionTest());
10766	here.
21748	geteditspan
897	here,
10789	annotatorrunner
19694	Feature("f5"),
15404	this.params=new
19298	firefox
1661	newinnerlearner
20427	classnameormixupfilename
10840	zoomedin
22774	document...
13402	array,
12548	truepositives
10617	displayDatasetBeforeLearning=false;
4940	"+(i+1),
16053	g=i.next();
18653	array.
18163	constructors
15145	//this.key
14378	LBJPOSTagger
12598	tolowercase
5245	destination
8182	BagOfWordsFE();
18328	if(loglik-previousLoglik<-1e-3)
13010	object_updated
23124	TFIDFWeighter(double
19585	TestTextLabels(TextBase
2914	viewer,ViewerControls
20347	charTypes=
22878	mylist=new
20844	MultiTrainParams();
19952	trainList.add(strata.get(i).get(j));
7961	testSplitTokenizer()
5781	length()
12181	accum.clear();
1096	log.debug("Loaded
7151	"_prediction";
7647	if(signal.spanType!=null){
16979	MutableInstance("*NULL*"),new
14769	dictlookup
20417	store_as_binary
8908	wolfgang.hoschek@cern.ch
18709	advancedParams,Class<?>
24379	Figure
6205	.closureIterator(truthType,documentId);
16511	add(example,true);
20144	this.name=name;
15551	i=0;i<m.length;i++){
11279	naivebayes
19503	ClassLabel(label,score);
13458	(!actualFtrs.contains(ftr))
4928	getEvaluation()
13308	super.multiLabelClassification(transformer.transform(instance));
4463	assertEquals(.62,e.f1(),0.02);
8765	outputFileName,
5076	labels0=
7665	propertyIterator(labels,signal.spanProp,val),labels
17672	/*buf
21323	getTrainTestClassifierHelp(){
22592	LabeledDirectory(String
23316	Acquires
13078	preserved,
5902	crfModel
3454	end=3
20476	spansetresults
4071	mixupProgramFile,boolean
2588	JList
16103	instgui
1992	FileInputStream(
19680	Feature("f3"),
2337	labeleddocs
1491	illegalargumentexception
1278	obj
16692	//props.store(new
15060	toytest
14384	providedAnnotation
14040	MultiExample){
9419	19,
23943	(n-k));
23227	you're
3257	TrainClassifier
7732	count
19459	viewer.getDocumentList().addListSelectionListener(viewerTracker2);
18607	java.beans.BeanInfo;
14734	finalSD=
13112	commandline
6594	BadLocationException{
16676	propertyList
14017	right.setTopComponent(classifierViewer);
19102	javadocLink=javadocLink.replaceAll("\\.","\\/");
23750	3.34525266131638E49,
7060	viewLabels=new
9586	partition
14375	LBJ
21947	if(save.saveAs==null){
11543	IOUtil.saveSerialized((Serializable)evaluation,save.saveAs);
17345	AnnotationExample
23421	Winnow(),0.0,0.0));
16802	distanceNames;
3701	m=msgPat.matcher(message);
22897	if(mode==1){
10278	copied
4846	BoneheadStemmer
17965	getinstance
13520	maxGain
6257	span.compareTo(cspan.span);
17633	Factory
54	session.
16950	bestEndYScore)
15237	copies
8540	crseqclassifier
12182	doc.getDocumentContents();
11108	e.summarize();
20491	Classifier[committeeSize];
5029	MarkupControls
7738	cov+=d*d;
10627	Buttons
16945	pointers
23602	n|Neg="+ngn);
919	getHyperplanes()
12097	ids.
6491	spanswithdocumentmap
9317	Visible,Saveable,Dataset,Serializable{
17361	annotationexample's
15888	histFeatures[][]
4702	exampleviewer
738	SequenceClassifier
13553	W_Pos);
3574	i=fileNameToContentsMap.keySet().iterator();i
12894	setContent(content,false);
4360	jcombobox
13660	multiSchema;
10429	w00=(tot-neg)/tot+epsilon;
13264	linksMap.put(from,(Map<String,Set<String>>)map.clone());
3253	edu.cmu.minorthird.util.CommandLineProcessor;
16806	distanceNames)
5835	segmentEnd-segmentStart+1;
23852	3.8543707171800694E247,
23869	4.714723635992061E284,
16080	invertIteration(Iterator<CandidateSegmentGroup>
22410	susan
10999	ClassifyCommandLineUtil.SeqTrainParams.class,
19453	SpanLabeler(viewLabels,editLabels,viewer.getDocumentList(),viewer
20887	setDatasetFilename(String
15249	constructor.
3969	JButton("Browse");
10134	posWeight;
10324	posWeight:
21669	spanLo=span.getTextToken(0).getLo();
20901	MultiTrainParams(){
3974	superView){
3827	length){
11023	StratifiedCrossValSplitter.class,
20264	#tokens.3=1
2735	colors=new
24365	splitIntoTokens(Document
9712	<BR>
9841	randomseedable
20089	Starts
1658	genericcollinslearnerv1
20366	Array
15603	LearnToClassifyTest
23065	edu.cmu.minorthird.text.gui.TextBaseEditor;
2301	dont_close_types
6193	spanDifference=new
15240	prototype,int
14055	TreeMap<String,Integer>();
12873	Viewer(Object
927	delta)
206	classify
8199	fe=new
9394	saveable
2251	end;
9051	my/k;
9619	reduceDocument(Span
7948	Tokenizer
3937	ends
16624	File(fileName));
11383	(tempLabels
14004	left.setTopComponent(dataViewer);
19643	((x2*w2)-(y_t_hat*y_t_hat));
17463	testIt[k];
16949	(fty[seqLen][y]
23751	1.4050061177528801E51,
16529	buf.append(ex.toString());
17410	assertEquals(referenceStats[i],stat,delta);
20792	showResult=true;
8444	tmpLabels.instanceIterator(sequenceAnnotator.getSpanType());k
9855	Tokenizes
11500	spanString);
8758	content.toString();
13739	viewer){
13503	i<margins.length;
18727	InputStreamReader(s)));
9983	history);
4978	addSubView("Tokens",new
7819	sampleDocs
8354	SequenceAnnotatorLearner.SequenceAnnotator
22960	dec=lpos_h.score(instance)-mytheta;
8738	(string
16628	System.out.println(errorMessage);
8820	Details(double
2120	FileOutputStream(new
11677	getexplanation
13712	multilearner
18970	row++;
8404	Logger.getLogger(ConfidenceReportingSequenceAnnotator.class);
5259	if(srcEntry==null)
365	Logger
11584	log.debug("classifying:
22185	filesToLoad.clear();
10725	reweight(Feature
6391	indexOfT=indexOfSpanMap.get(t).intValue();
7046	labels);
17872	i<msg.length;
1574	edu.cmu.minorthird.classify.ClassLabel;
2723	loadSpanHook();
15753	"naive");
2718	"+documentSpan.getDocumentId()+"
8503	"usage:
10813	zoomedIn){
13144	ExmapleID
17275	constraintfilename
10414	"+neg+",
15636	2-by-2
15622	loader.loadLines(base,
8088	//System.out.println(".
23333	Multex,
15088	setdelta
22066	if(levelStack.empty())
20495	bag(rand,data);
20239	end.
22679	edu.cmu.minorthird.classify.semisupervised.SemiSupervisedClassifier;
17360	hasAnswers();
16946	t==documentSize
22910	coef=1.0-(negFactor/total);
3799	produced
227	supervised
1643	innerClassifier[i].explain(instance)
3485	end)
9658	p.addStatement("defSpanProp
4589	java.awt.Color;
2380	asstring
3609	preference
10700	subView=new
5254	srcDocId,int
13257	if(linksMap.containsKey(from)){
1909	labels.addToType(span.charIndexSubSpan(lo,lo+len),type,details);
8022	RWrapper
17341	hasAnswers())
2166	curLabel=unsortedLabels.remove(0);
10374	feature");
17489	MessageViewer(Viewer
18190	j=index.featureIterator();j.hasNext();){
18027	data1.add(
4045	approve_option
21428	modify,
12576	istruedefinition
19754	arrays");
12779	setAnnotatedBy(String
4690	conciseexamplerenderercomponent
10471	allfeatures
21649	"+documentSpan.getDocumentId());
2775	MoveDocumentCursor(String
14227	IllegalStateException("Can
1879	labels){
1821	if(line.startsWith("#"))
11077	multiClassifier,
8582	q/p)
2574	what's
1358	"+labelFile);
2037	type+"\n");
928	index
1419	interpreter.set("labelDir",
17596	vCnt[i]/(vWgt[i]/scale)-m,2
23729	doubleFactorials
23805	9.916779348709491E149,
13748	AbstractAction("Apply"){
21266	"+annotatorName+"
18277	hasConverged=true;
19212	ViewerFrame("test",t);
9791	Integer.MAX_VALUE
22535	LeaveOneOutSplitter(Random
17263	accum.add(i.next());
17201	verifySplit(){
15588	augmentex
12923	if(superView!=null){
13240	examples.add(example);
9413	osf
11947	42-36
10997	//ClassifyCommandLineUtil.SimpleTrainParams.class,
3607	require
3450	position,
8834	(quick);
12167	HashMap<String,Vector<String>>();
2830	jlabel
13155	getExampleID(){
4526	this.args=args;
7437	well
6580	leftBoundary=contextSpan.getLeftBoundary();
12383	currSentence.indexOf(')',
17608	(classPrior/numberOfClasses+observedCounts)/(classPrior+totalCounts);
11964	base.getDocument("eng.base-160").getText());
15585	getparams
11170	DataClassificationTask.class);
16221	Selection",
2611	editLabels
19053	if(value!=null&&isValid(value.getClass())){
10141	weight=new
18953	pname2!=null&&
18038	checkSubPopIds(Dataset
9546	edu.cmu.minorthird.classify.experiments;
23699	54.78472939811231919,
23447	Random(0),1000,0.2,0.3);
21446	warranty.
19723	numactivefeatures
23440	XValTest(3,25,true));
13292	multiClassifier;
5159	textBases.put("root",new
2774	delta;
19277	helpviewer
4093	"...");
17188	verifySplit();
3155	positions
16362	Classifier,Serializable,Visible{
16699	invoke
6080	resetDocumentList(TextLabels
1713	there.
9491	(trainTest.showTestDetails)
13650	extractInstance(TextLabels
3032	"+result);
21926	reduction(String
787	our
830	"+differenceAtJ+"
6913	Value"};
5395	out
6840	Reset
16579	log.debug("Looking
8553	truename
16617	config(String
3000	signal,Object
20552	used";
17206	if(similarTo(oi,oj))
9895	this(innerLearner,4,epochs);
23618	LOG
10007	map.put(
4627	ParallelViewer
15771	options.setProperty(args[i],
19344	went
4672	Feature
2806	basictextbase
2757	statusMsg.display("Saved
21727	deletecursoredspan
11245	System.setOut(oldSystemOut);
23963	1.9
860	1.0
1762	LOW
15608	testSpans()
12721	HMMLearner(){
21875	Bag<T>{
23962	1.2
3973	FileChooserViewer(Viewer
2419	ops
20255	Bag<String>();
16013	compressGroups=flag;
6667	List<EditedSpan>
3234	featureiterator
6724	labelBox.addActionListener(new
2539	compare
22197	this.importLabelsFromLevel(importLevel,oldType,importType);
24343	batchlearner
18362	examplesgivenclass
16536	tmp[k++]=i.next();
12430	(!Character.isLetterOrDigit(currChar))
20658	e=eloo.next();
14707	[@_prediction_updated]
3295	inputs
9065	my_last)
20733	setpriorneg
17256	System.out.println("total
21667	span=documentSpan.charIndexSubSpan(lo,hi);
22264	if("defSpanProp".equals(keyword))
19757	hi<0
4598	datasets,
5872	java.util.Properties
2613	read-only
8018	10,
14108	getcolumnname
12468	10)
62	erasing
22427	File(Globals.DATA_DIR+"bayes-testData");
14341	group'
17128	userId=userMap.get(subpop);
19482	spanlabeler
16766	log.warn("
6508	documentidofs
607	org
14036	(signal==OBJECT_SELECTED)&&(argument
2239	isOpenTag;
13423	e<numEpochs;
9766	l/Integer.MAX_VALUE;
19737	10;
13229	factory=new
18610	java.io.InputStreamReader;
5544	curr=null,childEntry=null;
17423	union
16276	VitorBalancedWinnow(){
12447	'"+shortForm.asString()+"'
7256	Kou
8396	188.0
2333	gettypes
10376	recur
15431	augmented
653	illegalstateexception
14432	printwriter
9004	covered
16177	Knn
5938	candidatesegmentgroupiterator
2842	activates
17599	d=1e-7;
23896	)</tt>.
20688	vCnt,double[]
14169	"+save.saveAs);
19704	-34);
17011	updatedviterbi
1143	props.setProperty(DATADIR_PROP,defaultRepositoryValue);
7541	currentPrediction
8982	applied.
6343	error?");
11183	subpanel1.setBorder(new
23998	4a/x
23178	Font("monospaced",Font.PLAIN,12));
7433	budgeted
11273	help");
7368	StatusMessage(),labels,"default",readOnly,null);
8957	Constructs
9414	loadlinkfile
13920	filterOnFeature=dc.filterOnFeatureBox.isSelected();
2242	tag,boolean
1001	numberofepochs
314	multidatasetclassifierteacher
2000	Serialize
9071	1/2
19261	setinline
7891	Document("doc2",
9108	1);
5424	old
5002	this.controls=(TextControls)controls;
4052	javax.swing.JFrame;
14339	tokenization
6095	on,
728	on.
19942	StratifiedCrossValSplitter(){
5212	textBases.put(childName,new
20672	featurePrior=1.0/index.numberOfFeatures();
16818	SegmentTransform
4782	Double(0);
6103	if(!onlyEditedSpans){
21513	this.getClass().getName()+"("+mean+","+standardDeviation+")";
9613	were
23063	getfeaturevalue
20524	log=Logger.getLogger(SegmentAnnotatorLearner.class);
14426	writer.print("[");
16124	if(!(train.learner
22039	Runs
7047	added.
6935	added,
10356	on:
19853	orderbasedtransformlearner
23730	5.109094217170944E19,
12213	LONG_FORM_PROP,
18596	System.out.println(g);
15738	TestSuite(BasicFeatureIndexTest.class);
5319	dstMapperList=new
4511	e.tokenF1(),
10245	featureIndex=(int)Math.floor(Math.random()*unusedFeatures.size());
21105	global
18748	splitName=fullName.split("\\W");
7809	JTextArea(transform(o).toString());
9274	modelling
18823	i=0;i<props.length;i++){
9171	f1),
10978	edu.cmu.minorthird.classify.sequential.ClassifiedSequenceDataset;
19341	once.
19287	getdeclaredmethod
12384	1))
8214	setters
300	hasAnswers(){
23989	1),
701	String[]
23337	company
7675	i=labels.getSpansWithProperty(prop);i.hasNext();){
14834	0.0,0.0,0.0,0.0,0.0,0.0,0.0,
1440	arraylist
17485	statusField;
21684	cursor.
24009	ArithmeticException
7248	west
17184	testList.get(k).add(item);
17507	if(signal==TEXT_MESSAGE)
3496	getMaxWindowSize()
14427	writer.print(tags[i].getType());
16941	fty[lastT][lastY]
12547	mtestdefinitions
11921	29,500
14473	spanType="true_name";
1184	one
1021	bestlabelsequence
7225	settaggingreduction
23624	estimatedProb(double
3668	"+contents.length+"
19421	getLeftBoundary();
3706	class");
14784	true_name'
23171	oldSystemOut;
19063	advancedParams,type,isInLine(pname));
1343	(base==null)
4937	main.addSubView(
1828	op;
13708	Classifier[innerLearner.size()];
23052	DictionaryTransform(schema,softDict,featurePattern,distances);
2150	ArrayList<LabelInfo>();
15924	histsize,
2227	pos=docSpan.subSpan(curTag.pos,1).getTextToken(0).getLo();
9411	invertiterationsgm
11638	Double(d));
2243	isOpenTag){
11364	(!file.isDirectory())
11844	fail("testLoadDirectoryOfFiles
3502	j<label[i].length;
18399	MistakeCountingOnlineLearner(OnlineClassifierLearner
15761	histsize)
12534	berkeley
23992	(1/b,
20940	Splitter<?>
14566	tokenWindow){
22076	"'");
7992	basicconfigurator
17774	m=0;
15763	histsize;
21646	statusMsg.display("imported
13454	(!correctFtrs.contains(ftr))
16088	ZoomedViewer(dbGui,instGui);
3870	node.map.put(words[i],(kid=new
21874	Multiset.
6433	truth'
18746	item){
16722	getLaff(){
15049	testwrapper
13672	schema)");
13275	Link("1","2","left"));
12960	onlySubviewer.getSubViewNames();
22392	ZoomedViewer(indexViewer,par);
8653	external
13700	answeredQuery)");
6271	particular
8863	Static
9378	copy.addSGM(i.next());
18556	numbers.
1925	exception=new
7720	numbers,
8271	System.out.println("Property:
2701	documentSpan=viewEntireDocument?span.documentSpan():span;
6410	frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
17833	auxiliary
10591	validclassnameset
17352	availableLabels();
22900	lossF.increment(ff,1);
6679	TextLearner"));
19385	Token.
15605	LearnToClassifyTest(String
20137	i=0;i<name.length;i++)
23786	1.451830920282859E113,
1248	...
6556	StyledDocument
21735	shown
17018	othersegments'
18348	(bayesUnlabeled):\n"+dataset);
18262	((MultinomialClassifier)mc)
9114	tail
4621	shows
3484	getSubsequenceExample(int
17924	cp2=new
11192	panel.add(
16904	BackPointer[seqLen+1][ny];
16845	binarybatchversion
21386	Node
17236	subpop=f[0];
21717	span#"+editSpanCursor+":
3846	span,int
9307	edu.cmu.minorthird.classify.SGMExample;
18574	mat[k][0];
16043	add(Example
8575	qlog
14560	if(span.size()==1){
9377	invertIterationSGM(Iterator<SGMExample>
16372	//implements
4524	super("doTest");
19147	scroller;
18625	recursively
10985	edu.cmu.minorthird.util.BasicCommandLineProcessor;
19500	logits).
4753	updateHash(DFList,DF);
16345	votedCount++;
2039	"+details.getConfidence()+"\n");
1331	"+baseDir);
23038	softDict
18094	bypasses
13332	panel.add(subview);
11236	oldSystemOut
22777	availableLabels(){
17324	spaneditor
15689	count){
2200	tags
20123	SpanResult.
18487	getTokPropFeats(){
379	stacked
10688	classLabels=seqClassifier.classification(sequence);
9487	signal.spanProp,
4700	newsourcedexampleviewer
293	labelInstance(Instance
11252	bars
6670	buttons
274	schema(){
2558	javax.swing.JTextPane;
21556	(exi.getLabel().isNegative())
15365	StackingParams{
5612	srcOffset;
1379	interp.eval(labels);
16041	#add(Example,
17651	ReparametrizeLambdas2TauSig(lambdaEstimateVec);
17199	partition???");
7785	(mean()-expected)/stdErr();
7169	getTaggingReduction()
24377	currParentToken
17502	subViewer.setContent(obj);
4619	tf.setBorder(BorderFactory.createLineBorder(c,2));
23183	present,
1325	base
5064	colNames[j+1]=props[j];
9552	present.
2119	currDoc=looper.next();
2261	Helper
15008	coefficient
13490	initialExpLoss(w,rankedExamples);
22739	c.score(e)
15819	(tokens
4665	for(Iterator<Feature>
4618	c=(emphasized?Color.blue:Color.black);
15270	(b.c
24395	parenttokenizer
13990	setContent(ex);
11651	computeSimilarity(Instance
23580	sum_ex(.)
7175	getSpanFeatureExtractor()
23298	scrolldown
13104	Prints
19508	appropriate,
19731	ConfidenceReportingSequenceClassifier,SequenceConstants,Visible,Serializable
15947	mainPanel.add(subView,BorderLayout.SOUTH);
5255	srcOffset,
19985	getrequiredannotation
5272	mapper=
21431	software
17082	this.folds=folds;
3332	signal.candidateType);
7949	sentence.
14764	applydictincreaserecall
5013	TextViewer(Span
4639	ID='"+((Example)o).getSubpopulationId()+"'";
3237	instfromseq
16610	IllegalArgumentException("error:
13682	i=0;i<schemas.length;i++){
18053	subpopidtest
14822	0.13769470404984424,
6184	SpanDifference.Looper
10536	Token{
19810	count'.
21319	save){
20018	result.left()
8841	definition</A>.
535	StackedClassifier(ExampleSchema
13905	button;
19155	gbc.gridy=y;
20904	Integer(dim).intValue();
19788	if(searcherEx
7032	movedoccursoi
16056	e=g.getSubsequenceExample(j,j+k);
2767	stateChanged(ChangeEvent
6663	spanTypes=null;
21197	s=ClassLoader.getSystemResourceAsStream("annotators.config");
18048	"id:
5005	contextSlider=new
3335	}catch(IOException
17731	"tau",new
5696	parentlevelname
11453	System.out.println("Average
5368	newMapper=
18033	data2.add(
2710	keymap.addActionForKeyStroke(KeyStroke.getKeyStroke("control
19888	"document";
792	Instead,
8080	vbeta[1];
7514	if(z<0)
12911	if(!(content
5363	parentEntry=textBases.get(parentLevelName);
13040	bar"
12679	Models
3232	numericfeatureiterator
14343	tokenarray
17827	tausigmaestimate
23657	5.207655919609640e-03,
18061	bar'
8528	justthisdoc
21121	this.step=step;
5078	NestedTextLabels(labels0);
16659	bar,
5208	mappers
2671	button,
13743	button.
13716	getschemas
11745	talk
12289	mySubstring
5807	y(int
4195	this.saveFile=saveFile;
6462	precision
11258	ProgressCounter.setGraphicContext(new
23900	<tt>1</tt>.
6012	lay
4864	lc;
10389	totalNeg){
7691	extractionsignalparams
4085	programLabels;
4110	programLabels=
6258	spanComponents[];
1526	source
10029	Segmentation.Segment(pos,pos+1,schema.getClassIndex(ExampleSchema.NEG_CLASS_NAME))
13022	retrieve
166	take
15188	maxindex
14440	lbj
6286	SpanDocument[spans.length];
17203	oi=trainList.get(k).get(i);
14082	targetfeature
6397	zoomFont(int
16477	BeginContinueEndUniqueReduction
23812	9.902900716486178E163,
18185	numberOfExamples=(dataset.size());
6901	SmartVanillaViewer(span));
22981	improves
10089	MultiClassLabel
22135	importLabelsFromLevel(String
238	answeredquery
8186	extractor,
7311	ocdEditor=(OnlineClassifierDocumentEditor)viewerTracker;
8179	extractor.
23430	LearnerTest("num",new
17680	1e-7,ProbabilityFactory.rnorm(1,
16694	"auto-saved
20146	fe");
19597	Algorithm",
14726	.println("============================================================");
11040	getTestParamsHelp()
7592	CommandLineUtil.ExtractionSignalParams
9572	ArrayList<T>();
10935	learner.reset();
23260	while(doMainRunning){
1233	</ol>
13153	exampleId){
841	k="+k);
17826	getparameterization
5995	getSpanPainter(){
18740	instanceMap.put(
17945	SpanFE.from(s,buf).tokens().emit();
2536	addall
9588	randomsplitter
18492	toSeqLearner(String
16704	gerbil
12494	System.exit(1);
40	will
19672	Algorithm";
4407	additem
20582	segmenter","document");
20131	instead");
10463	bestentropy
10261	Double(bestThreshold)};
10996	DataClassificationTask.class,
19621	true);//recommended
18656	rootClass;
9900	segments
10817	setSubViews(Viewer
13964	MultiClassifiedDataset(cd.classifier,filteredData,cd.index);
15295	Classifier);
7685	extractors
7027	announce
10199	isbinary
10829	if(DEBUG&&signal==OBJECT_SELECTED){
23119	d=featureFreq.get(f);
12570	isuppercase
21281	Annotator)
14141	System.out.println("can't
9951	'otherSegments',
3547	getsubsequencelabel
16643	stopList.add(genericMethods[i].getName());
13341	"Michael
12525	short
1149	"+props.getProperty(LABELDIR_PROP));
13485	100000000;
17328	Annotator,
14871	out.writeObject(c1);
1357	(labelFile.exists())
13780	Lay
8871	<dt>This
19305	getwritemethod
23677	0.69314718055994531,
6529	batchTrain.
9787	restart
5412	while(typeInstances.hasNext()){
23897	<li>k<0<tt>:
23775	5.443449390774432E92,
15628	testspans
10075	negativeLabel(negWeight)
22882	ll.add(0,example.getLabel());
824	differenceAtJ
18141	subprograms
13355	Requirements
2231	buffer.append(curTag.tag);
16497	Visible,Saveable{
22888	pos_t.multiply(f,beta);
11768	INCLUDED.
13556	System.out.println("Z:
324	multiiterator
20335	lcBag.add(str.toLowerCase(),n);
23103	editfile
22875	pos_t.increment(f,1.0);//initialize
19588	super.getTypeSet(type,documentId);
16595	follows
1421	interpreter.source(f.getAbsolutePath());
23305	interruptedexception
12701	hmmModel;
6676	GetClassifier("Show
3419	segment
1982	labels.closeTypeInside(type,document);
5619	dos){
9253	ranges
7979	meeny
8632	patternStr
10878	setforeground
11518	train){
6050	truthBox
11469	logloss
14213	onlinesignalparameters
23532	log.debug("error
22184	labels.defineDictionary(type,filesToLoad,ignoreCase);
16037	if(schema.equals(ExampleSchema.BINARY_EXAMPLE_SCHEMA))
12453	StringTokenizer(bestLongForm.asString(),
11189	subpanel1.add(
1763	LENGTH
7381	TextBaseEditor.edit(labels,saveFile);
23013	String[]{"eq","lc"};
2793	abstractaction
17689	u="+u+"
12733	baum
4674	tableData[k][0]=f;
8843	(mean^k
9831	l'ecuyer
22570	FileFilter(){
8413	ProgressCounter("tagging
16186	DatasetIndex();
11605	n=j.next();
15589	augmentexample
16131	labeledData.labeledData,train.fe);
9992	segment.
3108	canreceive
8464	ConfidenceReportingSequenceClassifier
7846	contrary,
12090	amounts
9751	Integer.MAX_VALUE)+s2)</CODE>
11532	FixedTestSetSplitter<MultiExample>(testData.multiIterator());
18892	"rundll32
6561	leftBoundary,rightBoundary;
11936	Dinamo
2894	currentcursor
22747	stackeddatasetclassifierteacher
10610	SequenceAnnotatorLearner(BatchSequenceClassifierLearner
14745	sig_size
13199	findSpans
6046	HighlightAction("Highlight",guessBox,truthBox,documentList);
14133	getRunMixupHelp(){
941	h[i].score(instance)
1979	types,MutableTextLabels
10209	randomly
10047	previousclassmap
23726	121645100408832000L,
18166	iterations){
16838	Batch
21026	dataset.\nSplitter
19899	if((totalPos+totalNeg)!=(dataset.size())){
13363	discretize
3049	JCheckBox
21452	<pre>
7573	currentprediction
22144	currLabels=this.getCurrentLabels();
13862	edu.cmu.minorthird.util.gui.MessageViewer;
13940	60,isSelected);
1240	edu.cmu.minorthird.sgmlPattern.
4013	content){
6814	"+format);
10834	log.debug("zoomedIn="+zoomedIn);
16743	((CommandLineProcessor.Configurable)o).getCLP();
4652	p.add(new
8623	Carvalho
9600	task
8066	tau,
13661	MultiLearner(ClassifierLearner
814	j++)
7783	z(double
5676	getparent
18312	MAP
21881	Integer(3);
14700	String[]{"defTokenProp
5609	TextBaseManager}
5148	TextBaseManager{
20120	SpanSetResult.
16598	Class[]{String.class});
16560	java.lang.reflect.Method;
1146	log.info("dataDir:
5407	//useful
23102	geteditlabelshelp
22771	query.size()!=query.documentSpan().size()){
3907	also
10016	g,ExampleSchema
17809	estimatenegativebinomialmudelta
10850	highlighting.
19416	span.length())</code>
14157	annotatedLabels));
20337	toConst(String
14479	e-mail
7921	textBase.getDocument("doc1").getTokens(),
22193	this.onLevel(level);
4793	updateHash(List<String>
19654	((d_t>0)||(d_t<0))w_t.increment(example.asInstance(),d_t/denom);
22558	java.io.FileFilter;
22162	statementType=statement.getStatementType();
8937	lr,
20056	SpanFE.STORE_COMPACTLY
15228	"+correctXj.getSource()+";"+correctXj);
12437	1)))))
23763	2.308436973392413E71,
14803	LibsvmTest(String
344	edu.cmu.minorthird.util.gui.Visible;
346	generalization.
19876	contains(T
1956	closeLabels(types,labels,document);
24314	klong
1033	differenceatj
7153	Extraction2TaggingReduction
10607	SequenceAnnotatorLearner(){
10445	trueset
7062	ViewLabels
9234	lr;
9382	File("test.lsf"),data);
18936	itemSelected=null;
22988	negfactor1
11424	queries.
18069	J.H.
3098	loc
21226	if(source.endsWith(".mixup")){
16379	ClassLabel("POS"));//dummy
105	always
366	log
3894	kid=node.map.get(w);
7253	fields,
4892	this(learner,d,splitter,false);
7143	edu.cmu.minorthird.text.Annotator;
5577	(mapped)
20576	segmenter;
20572	segmenter:
4493	assertEquals(0.88,e.tokenF1(),0.02);
16865	lot
17851	"TrainExtractor
2314	low
17898	while(pos<args.length&&somethingConsumed){
12601	shortformsize
22147	currInstance=instances.next();
12667	swingconstants
23125	numDocuments,TObjectDoubleHashMap
4581	multitokenspanfe
23435	SVMLearner(),0.0,0.0));
13140	designed
15796	100");
13391	this(500,20);
6936	Edited
7158	AbstractBatchAnnotatorLearner(SpanFeatureExtractor
17200	correctness
21064	lnr
7181	getAnnotationType()
15725	pmutualinfo
7669	System.out.println(tag1+":");
19389	lo,
5551	parentSpan){
23403	these,
16421	dagan
16235	Littlestone,
23578	MLE
15791	Integer.parseInt(maxIters);
21510	this.cacheFilled
727	back
9281	switch_mean
17803	vcnt
11859	1996-08-31
15770	i+=2)
8858	supplied
11927	1996-08-30
12116	java.io.BufferedReader;
16678	propertyValue(String
2087	out.print(type);
17033	edu.cmu.minorthird.classify.HasSubpopulationId;
14584	deletedNameList.add(tn);
6407	TextBaseViewer(base,labels,statusMsg);
2694	either
12300	lo;
2454	map.get(key)
16398	"+lneg_h.toString();
3409	original
11718	base.documentSpan("DocPerLineTestData.base@line:7");
2001	saveSerialized(MutableTextLabels
13446	j<exampleSize;
538	finalClassifier)
18350	mccallum
6126	renderer=new
15030	FileOutputStream(argv[2]));
22496	tagset.iterator().next().equals(ExampleSchema.POS_CLASS_NAME)){
23204	}catch(SecurityException
20106	ended
16545	JScrollPane(jList);
2889	getsource
23975	N-1
17910	//System.out.println("arg
320	multiexampleschema
820	values
7035	propfield
10318	DecisionTree
18465	labels,Splitter<Example[]>
5952	edgefeatures
12590	tmpindex
17620	"mean",new
6582	super.insertString(0,contextSpan.asString(),SimpleAttributeSet.EMPTY);
19241	valued
19006	if(pname.indexOf("Filename")<0){
18088	setNandP(n,p);
17225	trainList.get(k).iterator();
5190	childName,
10399	condition
20420	featurestoragepolicy
13860	javax.swing.table.AbstractTableModel;
10966	javax.swing.JProgressBar;
11418	DatasetClassifierTeacher(Dataset
19965	Annotators
15266	c.classification(instance).posWeight();
17229	file=args[0];
22105	currentLevel=this.getCurrentLevel();
9839	lsw
534	finalClassifier;
73	formulating
6001	contains=false;
19829	DatasetIndex(dataset);
10037	getnumberofsegmentgroups
20160	Terminates
18706	validClasses,Class
11301	seqtestparams
8785	lala.getTextBase();
9641	i=tagset.iterator();i.hasNext();){
7443	List<WeightedExample>
341	edu.cmu.minorthird.util.gui.ComponentViewer;
21753	AugmentedInstance(Instance
22828	Mansour,
2159	LabelInfo(s,prop+"."+val,start,end));
11133	MultiClassifiedDataset
21569	batchtrainsubpop
4560	notreq
18939	itemSelected=selected;
17094	'"+f[0]+"'
1764	TYPE</code>
18747	fullName=item.getName();
9415	lsf
12292	ss,int
9871	documentSpan(String
13384	double[][]
10142	weight[i]=labels[i].getWeight(label[i]);
10253	example:dataset){
21555	highestNegativeExample
18517	if(opt.startsWith("-lea")){
20521	edu.cmu.minorthird.classify.sequential.Segmenter;
7486	WeightedExample(example,tau_t));
12703	HMM,
8722	(\p{Punct})
23932	longFactorials.length
7017	saveann
15476	egID=ex.getExampleID();
19448	SpanLabeler
2609	viewLabels
22672	annfile
4476	"-labels",
7205	tokenSpan
9332	addAggregator(String
22721	testData=testData.annotateData(c);
18364	numberofexamples
13117	Configuration
23392	announce'
20573	"+segmenter);
17785	Math.pow(m,2))
9356	inner.hasNext();
10358	threshold
3751	Basic
14868	//ObjectOutputStream
4010	recieve
18707	this.validSubclasses=validClasses;
14505	pre-defined
4423	usage
7567	weightedexample
4094	truthLabels=new
22269	if(property==null)
5716	getlochar
4996	controls==null?DEFAULT_CONTEXT:controls.contextSlider.getValue();
21631	keymap.addActionForKeyStroke(KeyStroke.getKeyStroke("RIGHT"),nextButton
17618	estimateNaiveBayesMean(double
20384	if(isAbsent){
23387	corporation
16947	bestEndY
9016	CASE
15701	b_value
3500	HashSet<String>();
15205	FixedTestSetSplitter(Iterator<T>
3321	DatasetClassifierTeacher(d).train(train.learner);
16261	theta=1.0;
10712	java.io.File(args[2]));
20917	crossDim;
8218	n){
16558	focus
14660	previously-learned
13908	ControlledDataViewer
12622	<b>every</b>
20083	annotatorLoader);
232	setinstancepool
6562	contextWidth
5213	TextBaseEntry(childName,childTextBase,
20893	getDatasetFilenameHelp(){
16359	"VitorBalancedWinnow:
1355	labelFile
22924	System.out.println(ff.toString()+"
6534	extra
12150	PROVIDED_ANNOTATION
23100	geteditparameters
6315	spansWithDocument.add(spans[i]);
11369	tempLabels.getTextBase();
21728	propbutton
14665	previously-learner
10098	distinguished
8518	confidencereportingsequenceclassifier
4267	newTypeField){
3322	if(base.showResult){
5984	documentCellHeightSlider;
7767	populationStdDev(){
11429	this.activeLearning=activeLearning;
12288	this.hi=hi;
23757	1.2413915592536068E61,
16852	this(epochs);
8872	port
5548	if(curr.srcOffset<(childOffset+length)){
19255	shortenedclassname
15137	value;
22394	mainViewer
13509	margins[i][j]
19086	value:
16965	onBestPath;
4811	term){
8032	initialized
11426	'pushed'
19100	selectedItem.substring(0,selectedItem.indexOf('@'));
13770	MENU_STRING="
6277	this.spans=spans;
7928	BasicSpan("doc3",
1936	Close
16552	getunlabeled
702	history;
2277	saveTypesAsXML(TextLabels
4417	windowclosing
14252	neg=SampleDatasets.negTest;
1808	IllegalStateException(
20150	partial,String
18676	this(validSubclasses,null,null,configFilename,rootClass);
12756	d=d.annotateData(multiClassifier);
13149	exampleId,double
14785	post
23009	Fields
22295	statementtype
6280	cache
9993	let
5448	entryName=newEntryName;
751	epoch++)
22390	lnameListViewer.setContent(m.keySet().toArray());
851	history,
8420	MonotonicSubTextLabels
4691	len
3227	inseq.toGUI());
7889	Document("doc1",
4926	stored
23506	assertEquals(totalSize,train[i].size()+test[i].size());
12973	value.
21259	redirection,
14562	if(deletedNameList.contains(token)){
20297	for(Iterator<Token>
15163	sb.toString();
7552	linkedlist
11995	value)
11997	value,
4147	NewTypeAction("New
16774	genericmethods
15140	v,Feature
23138	f,Instance
15354	edu.cmu.minorthird.classify.transform.AugmentedInstance;
14837	//7-8
19802	alternateclasses
23181	initializes
20614	mainpanel
8638	lineMatcher(String
18805	Editor
2350	printtypesasops
1740	loadOps(TextBase
5389	parentLabels).
19550	(otherLabel==null)
17357	AnnotationExample.
21423	Organization
5528	Iterator<MapEntry>
2932	splitPane.setResizeWeight(0.90);
13642	Converts
7094	evaluation=new
18795	pops
4612	e.getSource()==null?"[null]":StringUtil.truncate(len,e.getSource()
1451	fancyloader
5785	pos,
18252	combinedDataset.add(i.next());
16978	Example(new
14436	wordsplitter
5861	pos)
15897	cmmClassifier
13954	pass1=true;
23793	3.314240134565354E126,
10262	BestOfNRandomTreeSplitter
12578	extractabbrpairsfromfile
4970	DEFAULT_CONTEXT=10;
6577	rightContextChars=
22278	effectively
9570	getTrainFraction(){
13256	why.
20320	bag;
13769	MarkupControls{
8296	sampledatasets
2237	pos;
5122	gettokenproperties
8334	edu.cmu.minorthird.classify.sequential.ConfidenceReportingSequenceClassifier;
12115	getexampleid
21918	PreprocessTextForClassifier{
16440	stable
2288	fileinputstream
14276	store.
13225	why?
12511	(filename
7815	TestCase
4650	p=new
21897	bag.
23811	9.614466715035125E161,
19974	getRequiredAnnotation();
1311	match
18336	if((deltaLoglik/avgLoglik)<threshold){
2473	output
15522	agr,String
13033	getvalueat
1509	basictextlabels
12720	HMMLearner(int
18278	System.out.println("EM
9177	(int)(V/f1));
23035	softDict[i].getTeacher().train(
15125	if(!isSorted){
21702	//System.out.println("spanProps="+editLabels.getSpanProperties());
16721	getters/setters
20546	usage.";
12110	featurefactory
15511	truefeatures=new
8683	AtoZPercentage(String
21786	Feature("william"));
20010	SpanFE.trace(result).
17056	purpose
16308	if(voted){
13711	classifierlearnerfactory
6730	gbc.weightx=0.5;
8450	log.info("confidence:
8926	ll;
17830	reparametrizetausig2lambdas
6972	filechooser
7228	setspanfeatureextractor
7599	HREF=\"http://minorthird.sourceforge.net/tutorials/TestExtractor%20Tutorial.htm\">TestExtractor
9026	1.0)
14926	Log
849	errorOnThisSequence=true;
12232	defnString,
231	pool
11689	testCaseDir="test/edu/cmu/minorthird/text/testcases";
5550	getMappedChildSpan(Span
19405	documentSpan();
13632	minexploss
3368	showdata
2019	StringBuffer();
10497	epsilon
14370	LBJ2.nlp.seg.Token;
10223	TreeSplitter{
11849	couple
6779	if(documentSpan!=null)
18647	1.0.
8021	FLAG
1502	textbaseloader
8910	1.0,
24110	1/2)log(k
17631	numIterations)
16953	(BackPointer
530	StackedClassifier
23894	n-1
16833	jaccard
13868	MultiDatasetIndex
19222	ActionListener()
3351	classificationsignalparams
3190	1.0;
12767	evaluation.extend(multiClassifier,d);
11162	around
17694	numIterations;
14615	result.add(temp);
12886	"+title);
11244	console.append(outBuffer.toString());
22029	hierarchy.
19818	OrderBasedTransformLearner(){
18303	lik
17541	instead
10028	g.getSubsequenceLabel(pos,pos+1);
23816	1.2265202031961373E172,
13911	targetCorrectness
20071	getRequiredAnnotation(){
17983	"+eval.errorRate());
8897	Stadlober
22630	File(dir,stem+".labels");
19787	searcher.getExplanation(sequence).getTopNode();
5878	labelNames.length;
19562	bestLabel
4019	this.defaultDir=defaultDir;
21680	editSpanCursor+=correction;
8561	featurefilter
22858	this.voted=voted;//improves
12531	symposium
15678	Math.log(a)+n-denon;
21332	evaluation=Tester.evaluate(train.learner,d,trainTest.splitter);
21360	this.type
19167	name="fooBar";
15826	schema.getClassIndex(tokens[i].getLabel().bestClassName());
11217	thread
13961	pass2=targetFeature==null||e.getWeight(targetFeature)>0;
23850	1.8981437590761713E243,
17956	getInstance(){
22257	output=mixupExpr.extract(labels,input);
20936	testDataFilename=null;
10654	prepareSequenceData(TextLabels
22383	family");
8848	&gt;=
5370	addTextBase(parentLevelName,newLevelName,newTextBase,newMapper);
20078	newLoader){
21103	clearGraphicContext(){
14606	order={{0,1},{0}};
16751	equal-sign
2480	i=rankingLists.keySet().iterator();i.hasNext();){
5736	currdocmapings
1594	GenericCollinsLearnerV1(int
15898	crfWs;
6170	System.out.println("error:
6412	if(args.length>1){
19586	textBase){
16228	Quickly
10167	Dimensions
21742	definetypeinside
3443	totalSize
6705	ArrayList<EditedSpan>();
14495	Comparator<String>(){
12869	namedSubViews=new
10049	othersegments
8458	extractedSpan,ClassLabel[]
24338	(SemiSupervisedBatchClassifierLearner)learner;
7061	CommandLineUtil.ViewLabelsParams();
9376	invertIterationSGM(splitter.getTest(k));
19434	Looper
13914	//*
16589	Object[]{});
13414	Hyperplane());
2143	docSpan=labels.getTextBase().documentSpan(documentId);
14963	input,DataOutputStream
16984	t<fty.length;
14595	(str.trim().replaceAll("\\W",
22469	mc,
10532	webmastercommands
8121	+rw.dnorm(tau,
2453	map
9649	extractFromTags(String
18526	SequenceAnnotatorExpt
4821	mar
11778	base.documentSpan("DocPerLineTestData_WithBlanks.base@line:4");
13227	linksMap=new
23514	expectedTestError;
3134	man
3971	//=
18284	mc;
104	may
8206	tokenPropertyFeatures=new
6631	max
16178	KnnLearner
739	batchTrain(SequenceDataset
23453	subsample;
18857	isAdvanced(String
18564	mat
16162	Dimension:
3274	save=p;
9743	RandomElement()
19860	Map<T,Double>map;
17542	//N
2916	setComponents(viewer,controls);
325	instancepool
6774	readOnly
2549	history_feature
11078	md)
38	what
18715	validClasses
3826	endIds,int
2293	objectinputstream
8730	if((tmp.length()>0)&&(tmp1.length()>0)){
2977	gbc.gridx=x2;
23614	c.increment(f,+pweight-nweight,LOG);
14367	LBJ2.nlp.SentenceSplitter;
9847	AbstractTextBase
6303	TreeSet<SpanMarkup>();
16404	mbw
11304	legal_ops
7363	if(saveFile.exists())
1132	(dataPropertiesFound)
15232	generic'
7712	Absolute
9989	accum[seg.y].increment(
8239	setTokenPropertyFeatures(String
4727	TF=0;
9468	//}
12061	venezuela
18044	span.getDocumentId().substring(0,1),
21478	610-611.
19879	map.size();
13250	link){
10550	ExampleSchema(final
22012	Stack<String>
19613	vpos_t;//voted
17572	//v
6505	colorbystatus
11285	frequencybasedtransformlearner
13088	*foo=bar
19852	count'
17533	//p
2699	loadSpan(Span
24380	begins
12380	longForm.length()
19843	learner=new
23059	softtfidf
9246	Arithmetic.logFactorial(X)
2658	viewed.\n"+"
15749	CRFLearner()
17977	eval=Tester.evaluate(learner,data,new
13467	HashSet<Index>();
24122	Gamma(double
20809	sotred";
15611	"webmasterCommands.base";
18576	mat[k][1];
6574	contextSpan=span.documentSpan().subSpan(conLo,conHi-conLo);
7897	"([^\\s]+)";
13094	<code>-baz
10453	generics
12348	(");
131	chosen
11544	TrainTestMultiClassifier().callMain(args);
11658	dotProd+=aw*bw;
15233	old'
854	correctXj
8767	BufferedWriter
21321	signal){
19671	"ROMMA
12559	shortform
10487	totalpos
11704	loader.load(new
22587	resetAll=true;
4792	Math.log((numDoc+0.5)/array[DF].doubleValue())/Math.log(numDoc+1)*100);
3053	ucBox=new
19052	panel.add(checkbox,gbc(1,row));
5748	semi-markov
4445	LongUITest(TrainTestClassifier.class,new
3424	parallel
2974	gbc.gridx=x1;
7223	insideoutsidereduction
16542	index,boolean
16035	.toArray(new
17106	"+constraintFileName+
6232	slider.documentList.repaint();
7348	if(args.length==0){
20262	StringBagResult(name,fe,stringBag);
1045	java.io.InputStream;
7808	o);
5857	gen)
8057	rw.runif(n,min,max);
23151	numdocuments
8759	Writes
8183	BagOfWordsFE
10194	isnegative
21991	getreduction
14877	//double[]
18383	numerical
14692	if((fromFile==null)||(textLabels==null)||(spanType==null))
17517	estimateBinomialPN(
21300	mixupannotator
15035	atoi(String
16272	W_MAX=Math.pow(2,200),W_MIN=1/Math.pow(2,200);//over-underflow
12419	("))
5202	if(parentName!=null)
12179	annotationMode
19504	negLabel
15666	2*Math.log(Math.abs((a*d)
1257	SampleExtractionProblem.taggerTrainLabels();
9655	"+output+"
22046	if(this.getCurrentLevel()==null)
17534	(mean
12394	shortForm.indexOf(";
467	j=testData.iterator();
5258	srcEntry=textBases.get(srcName);
11043	<br>"
19243	getallowedpvalues
7399	testextractionproblem
5359	retokenize(Tokenizer
3501	i<label.length;
11253	JProgressBar
12926	superView.hearBroadcast(signal,argument,senders);
11223	AbstractAction("Show
3491	label[start][end-start-1];
6920	EditedSpan
22862	this.mode=mode;
22171	level=statement.getLevel();
16719	derisively
12676	settablayoutpolicy
18388	edu.cmu.minorthird.classify.algorithms.knn.*;
360	http://citeseer.nj.nec.com/wolpert92stacked.html
23055	stringdistance
22189	labels.defineDictionary(type,wordSet);
2532	keyset
15470	numNewFeatures=
448	dataset.split(splitter);
18836	HelpViewer
16365	MyClassifier(Hyperplane
12442	extractAbbrPair(StringSpan
12390	shortForm.indexOf(",
5710	counts
5262	manager.");
2234	buffer.append("</root>");
19271	createdialog
15639	experiments.
7610	evaluate
18722	FileReader(file)));
7042	spanprops
16445	theta1
16324	theta;
15046	testfile
20135	trace(Result
13962	if(pass1&&pass2){
20149	extend(String[]
14563	labels.setProperty(span.getToken(0),"delete","t");
6780	loadSpan(documentSpan);
14550	j+=nameMatch.size()-1;
24390	log.warn("Matching
11178	")));
2936	if(controls.preferredLocation()==ViewerControls.TOP){
9336	if(aggregators.containsKey(L_type)){
3069	jcheckbox
20475	usewords
9278	cern
10530	bayes
23858	3.8089226376305687E260,
13340	boosted
20830	lnr=clsLnr;
10128	bestWeight=new
21501	standardDeviation*x*z;
17346	answeredQuery
12611	ParallelViewer,
7672	propertyIterator(TextLabels
6641	getlength
8496	loadFile+":
23725	6402373705728000L,
19207	Class[]{SampleInner.class,SampleOuter.class},
7760	count;
10862	Color.yellow);
13413	populate_A(rankedExamples,new
23098	editparams
20213	if(s.contains(other)){
13977	getValueAt(int
6846	Announce
14050	f,MultiDatasetIndex
7011	labeldocument
321	getmultischema
5749	Sunita
261	Williams
2433	individual
18569	mat[k][1]
18915	getP
1669	being
22175	annotationType=statement.getAnnotationType();
13440	rankedExamples[i][0];
5083	=top:
5240	actually
5026	SpanDocument(span,context);
6625	leftcontextchars
1935	tok.nextToken();
13220	linksmap.
19051	checkbox.setSelected(((Boolean)value).booleanValue());
2650	MoveDocumentCursor("Down",+1));
9927	errorOnThisSequence
8470	alternateLabels=new
20155	extension[partial.length]=addition;
799	when
7007	outtype
5514	parentOffset
15258	getBinaryClassifiers(ClassifierLearner[]
21682	Delete
9558	testList=null;
23441	LogisticRegressionTest
18182	examplesGivenClass=new
14203	trainclassifierparameters
4775	token=i.next();
11729	Hall",
13768	MinimalMarkupControls
15862	((stateId
23613	estimatedProb(ngn,numNeg/c.getScale(),featurePrior,1.0/c.getScale(),
18946	numTextFields=0,numTypeSelectors=0,numAdvancedParams=0;
4715	Mar
22709	learner,MultiDataset
18567	mat[k][0]
2472	Map
2599	editedDoc;
7507	result+1.0;
14557	i=labels.getTextBase().documentSpanIterator();i.hasNext();){
1985	loadSerialized(File
10969	edu.cmu.minorthird.classify.algorithms.svm.SVMLearner;
20223	lo=Math.min(lo,s.size()-1);
17176	trainList.add(new
2952	"+controls);
19895	totalPos
7715	-x;
15499	idx=schema.getClassIndex(pre);
22686	Level.DEBUG
16171	featureIterator(){
4604	conciseExampleRendererComponent(Example
22484	getmultispanproperty
1244	"foo.mixup",
6124	documentList.setListData(spanArray);
11031	testParams
14798	LibsvmTest
15235	SequenceUtils
14429	writer.println();
4381	refreshbutton
16645	methods=getClass().getMethods();
4517	suite;
14880	stats2=new
21915	edu.cmu.minorthird.text.learn.Extraction2TaggingReduction;
13816	May
17794	Max
17861	program",
8327	gettokenpropertyfeatures
9774	restarts,
2093	span=j.next();
11826	"cmu.andrew.official.cmu-news-2611_0",
18571	mat[k][2]
8124	Double(prob).isNaN())
21879	Integer(2);
17016	sequenceerr
22081	if(levelStack.size()==1)
13738	setControlledViewer(Viewer
12713	transition
20030	result.first(),
13426	"+e+"/"+numEpochs);
9625	NEG
16195	getk
3086	settopcomponent
3266	CommandLineUtil.TrainClassifierParams
21128	graphicCounter=graphicContext[depth];
18229	i=il;i.hasNext();){
328	multiexample
23317	NEC
12013	assertnotnull
6744	add(saveButton,gbc);
7650	.instanceIterator(signal.spanType),labels
7387	trackedtextbasecomponent
10898	this.docNum=0;
18093	nextInt(n,p);
12523	bufferedreader
7095	evaluation.extend(ann.getClassifier(),d,0);
21538	RankingPerceptron()
1286	"+scriptDir+"
14071	buttongroup
20356	trBag.add(pattern,n);
23371	types");
14733	System.out.println("Post
5378	NOT
21031	Splitter<MultiExample>
3317	(train.showData)
17904	BasicCommandLineProcessor.config(args[pos+1],this);
1250	loadTextLabels(String
13188	candidate=i.next();
20567	g.setSubsequence(lo,lo+len,instance,label);
2763	ContextWidthSlider(){
23918	k==n<tt>:
7981	moe
19887	this.frequencyModel
313	williams
16105	edu.cmu.minorthird.text.learn.OnlineBinaryTextClassifierLearner;
12433	currChar))
13460	s.multiply(0);
8970	Arithmetic.logFactorial(k)
16782	mom
6014	displayType){
16386	dec=lpos_h.score(instance)-lneg_h.score(instance)-mytheta;
10916	text){
18096	nextInt(int
8790	basevitor,
12728	hmm.baumwelch(0.00001);
5230	simply
24004	degree.
21847	(place==null)
5782	{return
1409	"+scriptDir);
3078	setsuperview
6172	"maybe"
22009	Map<String,MonotonicTextLabels>
7263	this.from=from;
14514	System.out.println("High
12991	.getValueAt(rowIndex,colIndex)));
3777	Estimated
11092	annotatedDataset;
24303	ceil
22842	1,2,3,4,5:
3007	simple
4613	.toString());
10958	gettextclassifier
17729	Estimate[
972	JScrollPane(main);
8715	exprelength)))
7745	b.add(x)
20768	GenericCollinsLearner();
16663	while(k<processedArgs.length){
9233	Math.log(W)/lr);
10901	Recommended.DocumentFE();
20004	SpanFE.Result,
7792	numbers
13519	bestFeature
17737	MCMC","tau/sigma",tm);
16336	if(pos_t.featureScore(f)<W_MAX)
15251	20080207L;
20069	requiredAnnotation){
2652	ContextWidthSlider();
11155	clp.getExtensionFor(format);
22803	StringBuilder("[index");
22556	subpops
16101	dbgui
22457	bayesclassifierstest
9381	DatasetLoader.loadLinkFile(new
23560	Pr(class)
10379	falseBranch=batchTrain(falseData,depth+1,newUnusedFeatures);
13999	left.setResizeWeight(0.75);
5184	Note
10423	feature=i,class=j
11989	labels.instanceIterator(type);
22431	File(Globals.DATA_DIR+
17238	HasSubpopulationId(){
7912	labels.addToType(new
1672	text);
23724	355687428096000L,
14842	SampleDatasets.toyTest(),refs);
16377	a1=new
14902	documentation
16161	Label
11478	AbstractAnnotator{
20138	"+name[i]);
18960	selection=new
635	wolpert92stacked
23268	errorArea.append(e.getMessage());
11379	File(dir,
20627	temp-filter
23505	assertTrue(totalSize>=(train[i].size()+test[i].size()));
23861	1.3113358856834527E267,
22219	if("defSpanType".equals(keyword)){
3822	TrieMatch{
21706	editedDoc.highlight(getEditSpan(editSpanCursor),HiliteColors.yellow);
19742	BeamSearcher(classifier,historySize,schema);
16869	compareSegmentsAndRevise(c,
24038	(k<length1)
4755	updateHScore(base.size(),HS);
4091	textLabels
20607	getcompressdatasethelp
13626	correctex
6411	labels=FancyLoader.loadTextLabels(args[0]);
18055	mud
16119	getTextLearnerParameters(){
2949	"controls
11753	"US",
12163	SHORT_FORM_PROP
21700	//gbc.fill
19485	initializetwotrackerlayout
22976	losses
9112	parameters
19204	x,z,inner="+getX()+","+getZ()+"]";
20971	FixedTestSetSplitter<Example>(it);
5333	follow
18667	classBox;
23830	8.094298525273444E200,
17241	subpop;
2850	loadspan
18050	subpop:
8994	variates
18592	Gamma(1.0,1.0);
15976	featuretypes
8261	capitalization
18509	tokPropFeats=null;
10441	friedman
5348	while(dstIterator.hasNext()){
3015	ViewerFrame("test",v);
8051	mu,
18980	"getAllowed"+pname.substring(0,1).toUpperCase()+
20654	w(i)
2198	sortedLabels.add(position,curLabel);
2893	msg
13528	(Iterator<Index>
8685	[\w]
9276	wolfgang
21960	save.getSaveAs());
695	BatchSequenceClassifierLearner,SequenceConstants
20987	it=((SequenceDataset)testData).sequenceIterator();
9838	msw
3892	i=node.map.keySet().iterator();i.hasNext();){
6496	spanswithdocument
11539	evaluation=cvd.getEvaluation();
4428	edu.cmu.minorthird.classify.experiments.Evaluation;
10370	recur,
21703	MoveSpanCursor
3949	myresultiterator
778	weight
9758	s2){
24328	loggamma
958	Explanation(top);
10631	getSequenceClassifierLearnerHelp(){
13436	populate_A(Example[][]
23810	9.42594775983836E159,
2638	this.editLabels=editLabels;
2069	pc3.progress();
18126	setNandP(int
19208	AbstractSample.class);
18603	NB.toString()
19610	parameter)
13205	"+instance+"\n");
13206	buf.append("classification:
3008	argv){
11838	"FARRO
1659	innerlearnerprototype
453	trainData
13324	tc=(TransformingMultiClassifier)o;
21352	UnionIterator<String>(list.iterator(),list.iterator());i.hasNext();System.out.println(i.next()));
14459	extractor's
19096	if(selection.itemSelected!=null){
12336	currSentence)
17667	it=1;
14216	trainingparameters
5236	getMatchingSpan
19739	classifier,int
21043	leaner
10812	zoomedOut,Viewer
13763	getcontrolledviewer
19732	Logger.getLogger(CMM.class);
20713	negativebinomiallearner
18180	countsGivenClass=new
17479	Status
16123	IllegalArgumentException("-spanType
10888	docNum;
3548	getsubsequenceinstance
7639	Textbase",va);
20732	setpriorpos
18708	validClasses,List<String>
19824	Examine
5856	NestedMTFeatureTypes(iitb.Model.NestedFeatureGenImpl
16215	NLP
1319	log.error("can't
18996	Object[]{theBox.getSelectedItem()});
2904	coupled
10744	UnknownDocumentException("documentId
19806	orderings.
2202	sortedTags=new
16868	previousViterbiSeg
6793	.display("Document
22413	tomikoyo
5889	Feature("E")));
12711	amat
4273	if(newType.length()>0&&truthTypeSet.add(newType)){
1356	".labels");
8862	<dt>
4029	superview
3523	maxwindowsize
16512	examples.add(factory.compress(example));
9267	technical
16831	distancenames
9497	(save.saveAs!=null)
23048	(buildDictionaryForNegativeClass
19702	-5);
17521	scale)
3023	o){
8507	"+loadFile+
9675	initial
17990	CLASSIFIER
7003	getannotator
19499	ClassLabel(){}
21798	System.out.println("in
10895	labeledData,SpanFeatureExtractor
3334	IOUtil.saveSerialized(ann,save.saveAs);
15780	options.remove("trainer");
2935	add(splitPane,fillerGBC());
2026	"+type,"span");
8522	experimental
4058	edu.cmu.minorthird.text.TextBase;
7480	"+kernel(x,x)+"
179	without
19401	largest
415	(innerLearners.length!=1)
21787	vals=new
11032	ClassifyCommandLineUtil.TestParams();
22871	numGivenNeg=new
15078	testmulticlassclassification
23569	f_counts
13864	Pairs
6536	nextQuery()
20442	applyfilter
20736	mudeltaneg
1839	if("closeType".equals(op)){
4456	assertEquals(.18,e.errorRate(),0.02);
3520	candidatesegmentgroup
283	instancePool(){
4435	TestSuite
12189	shortForm
20462	targetvaluetag
11008	SVMLearner.class,
3970	defaultDir=".";
18967	if((!isAdvanced(pname)&&!useAdvanced)||
17858	text",
19617	ROMMALearner()
4086	MixupProgram
1837	if("setSpanProp".equals(op)){
21694	EditSpanProperties
20469	punkbag
19313	isvalid
1924	trace=e.getStackTrace();
23448	c=lr.batchTrain(data);
1739	MutableTextLabels
6029	"+labels.getTypes());
18449	list.iterator();
23070	CommandLineUtil.EditParams();
16036	String[classNameSet.size()]));
6633	min
13904	group.add(button);
9903	(Iterator<CandidateSegmentGroup>
10031	marginperceptron
20541	setCompressDataset(boolean
7939	reconcile
1948	labels,int
1557	correctly
7879	assertEquals(24,
7883	Document("doc0",
5986	editedOnlyCheckBox;
20837	TrainParams(){
8551	vphmmlearner
451	k++)
20539	getCompressDataset(){
24030	-d;
15717	compensated
5299	Finds
656	hasnext
19556	otherLabel>=0);
1575	edu.cmu.minorthird.classify.Classifier;
5186	textbases
18778	classBox=new
18161	MAX_ITER=1000;
16514	examples.size();
2184	position=j;
8689	tabs
19781	lower-scoring
16180	KnnLearner(){
6007	truthBox.addItem(label);
1390	log.error("Error
11193	subpanel1,
21451	HREF="http://www.statsoft.com/textbook/glosn.html#Normal
4677	k++;
23229	+"Modify
17773	wgt)
15853	stateId++;
3244	addnumeric
21258	log.debug("No
18783	classBox.addItem(key);
5	/**
15583	setcrossvalsplits
23635	mle
3005	viewer.handle(signal,argument,senders);
7222	reduction
7598	getTestExtractorHelp(){
3425	ClassLabel[][]
21781	remove");
7965	SplitTokenizer
2376	spaces
21641	editedDoc.resetHighlights();
22881	ll=fmap.get(f);
8726	symbol
15954	argtok
2174	Find
21607	add(prevButton,gbc);
2870	max_status
13893	ButtonGroup
15416	Classifier[params.stackingDepth+1];
7082	getTestClassifierHelp(){
18744	shortened
5183	textbase.
9687	begintag
4947	"Train
19697	c1);
4133	truthLabels,statusMsg));
19058	editable");
14513	counter=0;
1122	props.setProperty(ps[i],
22435	//TextBaseLabeler.label(
20161	emitting
12772	testmulticlassifier
13291	serialVersionUID=20080201L;
6549	airoldi
7155	AbstractBatchAnnotatorLearner()
5634	filter
6294	HashMap<Span,Integer>();
3646	s.read(contents);
14630	result.add(o[cur_order[0]][j]);
15532	this.params=params;
9663	IllegalStateException("mixup
23143	Math.log(instance.getWeight(f)+1)*Math.log(numDocuments/df);
16706	BasicCommandLineProcessor(){
5410	//counts
2856	getkeystroke
21783	newFeatures[i++];
17444	setNumberOfFolds(int
8805	punctcount
22267	j=0;j<span.size();j++){
11717	base.documentSpan("DocPerLineTestData.base@line:6");
7380	(MutableTextLabels)FancyLoader.loadTextLabels(args[0]);
1289	"+obj);
14262	TextLabelsLoader().closeLabels(labels,TextLabelsLoader.CLOSE_ALL_TYPES);
24102	Correction
14002	DataControls());
13082	ignored.
5288	Finally,
7119	FeatureReweighter
10774	//String
13344	Koo,
5798	(inst!=null
7924	BasicSpan("doc2",
8427	IllegalStateException("error:
23327	Corporation
16942	fty[t][y])
10349	splitting,
5959	setproperty
14093	filteredmulticlassifieddataset
7700	tag1
8210	ExtractionFE(int
11433	(Edoardo
23784	2.4809140811395404E109,
19334	Kevin's
1349	log.error("Can't
1171	File
893	epoch
2238	tag;
22489	tag=
7089	CommandLineUtil.toDataset(base.labels,ann.getFE(),signal.spanProp,
4611	sourceString=
15494	ngb=LinksMap.get(egID).get(type);
12860	OBJECT_SELECTED=3;
16959	Segmentation.Segment(bp.lastT,bp.t,y)
6073	ZoomAction("Font+2",+2,documentList)),gbc);
3666	if(contents!=null){
9640	getNonDefaultTagValues(){
340	edu.cmu.minorthird.classify.experiments.CrossValSplitter;
23916	binomial;
9698	/*=
23669	2.976063983550410e-03,
8612	java.io.*;
19796	TitledBorder("Conditional
16004	groupList=new
4501	"-test","cspace.09",
19494	bestWeight=Double.NEGATIVE_INFINITY;
15577	setusetargetprediction
6798	AddSelection(String
17392	stats[3]
7506	invisibly
22525	0/1]";
23161	piOut;
21035	setSplitter(Splitter<Example[]>
12245	str.substring(0,j).trim();
22331	declared
18294	slope
2791	event
23654	6.408994188004207e-03,
16122	if(signal.spanType==null)
5905	batchTrain(SegmentDataset
2065	val=labels.getProperty(s,prop);
9700	advanced
16817	transformLearner.batchTrain(dataset);
17130	badExample(example,"no
2357	getlo
13588	it=incorrect.iterator();it.hasNext();)
16199	lightweight.
4227	getBase(){
1335	tbl.load(baseDir);
12341	newCloseParenIndex,
10027	g.getSubsequenceInstance(pos,pos+1);
4485	CollinsPerceptronLearner(1,20),
18659	ArrayList<Class<?>>();
23655	5.951370112758848e-03,
4447	"-learner","new
9277	hoschek
17390	stats[2]
6252	SpanMarkup(Span
19525	ExampleSchema.BINARY_EXAMPLE_SCHEMA.isValid(this);
2073	PrintStream
1084	initialization
17807	sumwgt
4488	ExtractionEvaluation
12075	european
18397	VotedPerceptron(),true);
3553	java.io.ByteArrayInputStream;
12388	newCloseParenIndex;
5983	components
11484	CharAnnotation[]
5423	newDocID="childTB"+docNum+"-"+curDocId;
21591	//------------
20493	i<committee.length;
7336	ocdEditor.setTypesBeingEdited(guessType,guessType);
6821	File");
9165	0.0)
22555	leaveoneoutsplitter
19715	c3);
15298	0.0,
3694	accordingly
2773	MoveDocumentCursor
10094	this.dimensions=labels.length;
7242	component,StatusMessage
3591	fileNameToContentsMap;
21509	standardDeviation*standardDeviation;
12563	setannotatedby
18422	numMistakes;
19803	losequence
4503	SegmentAnnotatorLearner(new
18577	mean[2]
2009	out.writeObject(labels);
5385	.getDocumentId(),0);
5687	currsrcentry
7244	gbc.anchor=GridBagConstraints.WEST;
7508	Crammer
11206	outputs
19561	bestWeight
1029	update'
12103	canonical
10877	cursorcolor
12055	poiunts
15123	ins){
18392	numMistakes,
16593	pos+=((CommandLineProcessor)result).consumeArguments(args,pos);
4103	BoneheadStemmer().stem(base,truthLabels);
14201	saveparameters
19635	w_t.score(example.asInstance());
22627	labels.require(req,null);
11025	HashSet<String>(Arrays.asList(new
7936	Tokenize
15280	suite.addTest(
19967	<code>textLabels.require(annotation,null,loader)</code>
18575	mean[1]
15263	MyBinaryClassifier(Classifier
5094	s=labels.getTextBase().documentSpanIterator().next();
6310	documentId=spans[i].getDocumentId();
3980	setFileSelectionMode(int
4023	filechooserviewer
21411	simple;
7906	textBase.loadDocument("doc0",
14964	output,
2498	Instances
868	wrongXj,
11482	span=it.next();
2926	removeAll();
7635	echo
11697	testLoadDataFile()
23362	any{2}
3145	InstanceFromSequence
6264	updated
21537	0.1;
7578	edu.cmu.minorthird.text.learn.ExtractorAnnotator;
5867	SemiMTFeatureGenImpl
14130	output;
4365	textbaseeditor
15310	0.15
9573	testList=new
19184	inner=new
14122	output=
18022	base.setDocumentGroupId("f1","foo");
2361	append
22418	sethorizontal
7804	binomial
21821	Classifies
21061	traindatafilename
12513	extractAbbrev.loadTrueDefinitions(testList);
11806	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2627_0"));
5978	javax.swing.WindowConstants;
17528	maxCnt=Math.max(vCnt[i],maxCnt);
201	Classifier
13734	update.
508	double
14675	System.err.println("");
2950	preferred
13729	update,
20997	defined.
2097	out.print("=");
10527	seminar
16153	Instance{
7515	0.0;
18917	defined,
16763	log.warn(file+",
2530	rankinglists
23550	expectedtesterror
16889	0..t
16437	w_min
19461	TextBaseEditor.EditTypeAction(viewer.getGuessBox(),viewer
4519	TestCase{
4512	0.02
16136	annLabels;
14199	baseparameters
14955	0.05
4632	main.addSubView("Source",new
1517	span
16736	smelled
19198	SampleInner
4310	<dataFile>
21213	order,
13557	Z);
24356	this.textBaseManager
23673	log(k!)
3447	Instance.
15382	setUseTargetPrediction(boolean
2042	"+type+":
23949	completely
1416	bsh.Interpreter();
2457	splitIntoRankings(Dataset
811	errorOnThisSequence=false;
18816	dialog=optionPane.createDialog(TypeSelector.this,title);
22968	mansour
13719	ControllableViewer
13518	updates
12957	getSubViewNames(){
11985	"I-PER"));
13475	assigned
2369	finished
5041	color=controls.getColor(prop,val);
12193	shortForm.hi);
18550	crossvalidateddataset
13317	classifiers[i].getExplanation(instance).getTopNode();
6880	table=makePropertyTable(span);
2349	flush
21000	simple.
10759	validDocumentSpans.contains(span)?span:null;
10542	NEG_CLASS_NAME="NEG";
15307	0.25
11515	this.signal=base;
12584	extractabbrpairsfromsentence
1245	order.
19294	fileprotocolhandler
1521	adding
23088	editor=TextBaseEditor.edit(editorOutputLabels,edit.editFile);
19592	(Relaxed
18640	<code>double</code>
10683	getSequenceClassifier(){
21802	newfeaturenames
7125	MutableInstance(instance.getSource(),
13897	//incorrectButton=addButton("incorrect",false,group);
8737	Method
6157	"+fmt.format(tr)+"
2689	loadSpan(nullSpan());
625	neural
19324	javadoc
21902	TreeSet)
18129	this.getClass().getName()+"("+n+","+p+")";
14956	acordingly.
20916	getCross(){
17913	if(k>0){
10050	previousclass
4050	java.awt.event.WindowAdapter;
8238	properties.
5211	parentLevel=parentEntry.getLevel();
1260	("sample3.train".equals(script))
12351	openParenIndex++;
7010	setreadonly
9309	graphical
23354	base.loadDocument("testStrings["+i+"]",
21462	-inf.
605	border
688	Perceptron
21851	labelSeq
20459	hasprop_
10198	numdimensions
20363	if(!m.find()){
14188	/*"classificationSignalParameters",*/"trainClassifierParameters",
4249	box){
18453	edu.cmu.minorthird.text.learn.SequenceAnnotatorLearner;
14347	mydocumentspaniterator
1767	TextBase,
15242	i<n;
22198	if("declareSpanType".equals(keyword)){
1784	TextBase.
19432	getCharOffset();
15315	0.5,
4458	//VotedPerceptron/Deliver
11395	load(file,
24138	0.5)
20334	n=bag.getCount(str);
15311	UITest(TrainTestExtractor.class,
22459	verification
13943	JScrollPane(jtable);
15443	Map<String,ClassLabel>
19921	(ChiSquareInstanceTransform)learner.batchTrain(
23132	norm=Math.sqrt(norm);
16427	pos_t
1631	MultiClassClassifier(ExampleSchema
20728	numpos
6844	forgotten");
20214	set.add(other);
552	classifier:\n");
10459	bestthreshold
6118	unedited":"")+"
18721	r=new
23111	InstanceTransformLearner,
23785	1.8854947016660506E111,
21216	(i.e.,
4676	Double(instance.getWeight(f));
20065	simpler
16975	fty,
5482	long.
4226	this.errorPane=errorPane;
20711	mudelta.put("delta",new
2631	spanPainter,StatusMessage
24043	Double.POSITIVE_INFINITY;
3299	specified");
6565	this(span,5);
21943	setReduction(Extraction2TaggingReduction
23355	testStrings[i]);
6712	index++;
3875	node.endIds=new
19232	jdialog
4470	assertEquals(.91,e.f1(),0.02);
23619	"+estimatedProb(numNeg,
10876	styleconstants
2973	gbc=fillerGBC();
10426	w11=pos/tot+epsilon;
23947	Double.POSITIVE_INFINITY)
14828	Double.POSITIVE_INFINITY,
2441	comparable,
13266	i=examples.iterator();i.hasNext();){
10340	DecisionTree.Leaf(weight);
5130	TextBases
6414	interp.eval((MonotonicTextLabels)labels);
13691	ArrayList<Instance>();
14508	'high-risk'
11295	classifycommandlineutil
960	(MultiClassVPClassifier)o;
12249	(entry
11933	Star
21712	editSpanCursor-=editedSpans.size();
18949	pname2=i<props.length?props[i].getDisplayName():null;
18483	SequenceAnnotatorLearner(dummyLearner,fe){
5001	JScrollPane(textPane);
16355	zpos.increment(vpos_t,1/(double)excount);
7827	meeny,
17118	requests=new
19905	ContingencyTable(a,b,c,d);
17079	constraintFileName,double
9651	taggedLabels){
1189	"sampleK.train"
23331	companyWord
22519	wgt=1.0;
7346	base=null;
1542	every
11299	simpletestparams
24124	291.
13014	forceupdate
2358	gethi
15302	"-spanType","trueName",
22958	mytheta){
2228	pos=docSpan.subSpan(curTag.pos,1).getTextToken(0).getHi();
20247	namex="token_"+index;
4433	name){
21708	wrap
14530	i=deletedNameList.iterator();i.hasNext();)
6237	(DocumentCellHeightSlider)e.getSource();
10052	previousseg
19999	extractFeatures
5521	document's
1041	data_dir
21118	step,int
3360	tutorial
15202	designated
4307	Must
21689	editedDoc.highlight(span,SimpleAttributeSet.EMPTY);
15983	getid
1524	parseexception
24391	document);
3361	getclp
4953	main.setContent(this);
16762	line,File
17309	createSpanEditor(TextLabels
17595	(vWgt[i]/scale)
20612	segmentannotator
15383	useTargetPrediction=flag;
22332	hasextraction
23518	testName,ClassifierLearner
13226	Map<String,Map<String,Set<String>>>
22683	Tester
8586	exp(logq
12132	Abbreviation
6803	GetClassifier(String
5719	entryname
2884	actionperformed
19040	Object[]{new
7110	getfe
15390	this.stackingDepth=newStackingDepth;
12262	while(itr.hasNext()){
13063	foreground(String
22847	RegretWinnow(){
9354	inner=examples.iterator();
10177	correct&&
17971	cvFolds=Integer.parseInt(args[2]);
20868	learner(String
13215	explainfindspans
3492	corresponding
15755	"1");
7609	partitions...");
4766	System.out.println(next+"
17388	stats[1]
14448	outfile
13663	MultiLearner(){
9030	Step
4499	LongUITest(TrainTestExtractor.class,
21543	splitIntoRankings(data)
19328	component.
17600	Estimate("Negative-Binomial","mu/delta",mudelta);
2547	NULL_CLASS_NAME
21372	type="
1981	document){
21845	Place(seq,j)
7468	w_t.increment(f,1.0);
22048	heirarchy.
21645	editedSpans.add(guessSpan);
16433	demotion
2393	docstring
9782	RandomSeedable#ClockSeed()
11617	"+n.e+"
12284	lo,int
11359	SimpleTextLoader
21036	dataset."
17386	stats[0]
20098	from(Span
1688	Loads
23804	1.0329978488239061E148,
1701	xml,
23696	45.38013889847690803,
2101	xml.
17678	candidate,
2660	appear
23480	if(subsample)
11435	itearator
8865	<b>Implementation:</b>
11340	getmaincomponent
14300	charOffset){
19595	Algorithm)
16335	//under
1062	Property
8112	candidate)
13842	CLONE
5021	span,SimpleAttributeSet
4468	assertEquals(.31,e.f1(),0.02);
9451	trainTest)
19673	//main
17692	candidate;
15429	SmartVanillaViewer(stackedDataset));
23594	n.Neg="+numNeg);
13349	Computational
4005	File(defaultDir));
3727	substring
10215	routines.
15227	accumNeg[correctClassIndex].increment(
10076	routines,
20977	testData=toDataset(s,false,multi);
14218	editparameters
15146	Comparator<Pair>
1844	if(span!=null){
18097	/*=****************************************************************
2491	j=0;j<posExamples.size();j++){
10508	setUp(){
18534	v=expt.crossValidatedDataset();
17204	j=0;j<testList.get(k).size();j++){
5805	schema.getClassIndex(label.bestClassName()));
177	calls
2676	System.out.println("saveAsFile
8085	sig>vup[1])
21681	statusMsg.display("adding
964	TitledBorder("Class
10017	schema,int
5598	keyIterator=parentToChildMap.keySet().iterator();
2104	currDoc;
21613	//-----------
17902	pos++;
8145	probabilityfactory
12052	boxing
23607	estimatedProb(ngn,numNeg/c.getScale(),featurePrior,1.0/c.getScale());
19537	getProbability(ExampleSchema.POS_CLASS_NAME);
15910	crfModel.train(trainData);
2672	indicates
24113	1/2)log(k)
2501	c,List<Example>
1857	sort
15135	Pair
773	Collin's
5043	expensive
10538	Defines
14100	filtereddata
2330	docid
4958	savetrainpartitions
23001	Construct
22368	"Wakako",
11135	(MultiDataset)testParams.testData);
13170	candidates
6644	charindex
19004	"+textField.getText());
15119	num){
8590	-37.
20101	FeatureBuffer(s);
1330	documents
791	labels.
1980	labels,
18100	(no.
4853	labels)
17375	learner,Dataset
16994	bp.lastT+"."+bp.lastY+"\t'"+ex.getSource()+"'
23300	labels'
17859	"RunMixup
21424	Nuclear
20906	.println("Warning:
17447	setSubsampleFraction(double
8424	tmpLabels=
9596	subpop
9890	MarginPerceptron(0.0,false,true));
3608	call)
3642	s=EncapsulatingAnnotatorLoader.class.getClassLoader().getResourceAsStream(fileName[i]);
19236	spinnernumbermodel
17255	"+list.size());
7379	labels=
9449	trainTest;
12126	printed
21823	necessary.
1381	labels;
11512	trainTest=
5320	Generate
284	Util.toInstanceIterator(dataset.multiIterator());
21317	SplitterParams();
15790	(maxIters
3796	Splitter<T>{
8034	call!
14609	if(s.length==4){
5745	iitb.CRF
879	this...
16076	copy.addCandidateSegmentGroup(i.next());
7499	result=0;
14852	l=new
7813	junit.framework.Test;
16794	eqpos
10529	testdirwithlabelfile
15560	batchclassifier
17550	pn.put(
20048	STORE_COMPACTLY=3;
19650	//System.out.println("x2,w2,ct,dt,decision
22717	if(cross)
17083	this.fraction=fraction;
8358	ConfidenceReportingSequenceAnnotator(ann);
21650	Exports
1484	taggertrainlabels
1498	println
600	javax
6223	sizeDelta;
22460	care
19309	parsedouble
10237	unusedFeatures);
22824	Internal
22005	edu.cmu.minorthird.text.TextBaseManager;
13764	makeapplybutton
19701	instance2.addNumeric(new
17759	tau[i];
11357	assuming
1769	document,
6214	spanDifference=
6140	spanDifference;
1553	document.
6588	insertions
23037	yNeg
4815	list){
7461	TreeSet<Feature>();
10963	candidatelooper
19827	OrderBasedInstanceTransform();
16517	Random(999));
10567	validClassNames.length;
7127	(Iterator<Feature>
20294	fe,SortedSet<Token>
13710	MultiClassifier(classifiers);
16715	scoff(String
12474	System.out.println(shortForm.asString()
191	case
15541	dataset,Map<String,ClassLabel>
16758	accum.toArray(new
15421	d=0;d<=params.stackingDepth;d++){
14658	System.err
3783	estimatedSize(){
24366	document)
9862	charOffset);
6896	subpanel.add(addButton,myGBC(0));
22083	level.");
19523	(score>=0?positiveLabel(score):negativeLabel(score));
14952	expected[3]=1.194999431381944;
2294	objectoutputstream
9000	regions
23731	1.1240007277776077E21,
23285	pipedinputstream
17372	referenceStats
20182	if(f.match(o))
23306	interrupted
22549	crossValSplitter.split(buf.iterator());
20318	strings.
9718	<STRONG>60</STRONG>
2797	jtextpane
3441	Instance[sequenceLength][maxWindowSize];
2229	pos=docString.length();
10242	unusedFeatures){
16467	fe.extractInstance(textLabels,docSpan);
21458	sqrt(2pi*v)
10614	this.seqLearner=seqLearner;
7412	MultiExample(
19310	numtextfields
15714	System.out.println(ct.toString());
4781	array[j]=new
296	MultiExample)
8923	llll;
4332	if((textBaseId==null&&fileName==null)||mixupProgramFile==null||
3837	lookup(Span
18255	i=unlabeledDataset.iterator();i.hasNext();){
11350	progressbar1
17916	pos+=k;
11352	progressbar3
11351	progressbar2
20015	pipeline
1426	props.getProperty(prop);
6136	AbstractAction
10468	fixme
11637	d=index.size(s);
11175	panel.setBorder(new
19560	(weight>bestWeight)
9512	doexperiment
20350	trBag.add(charTypes,n);
13415	s.increment(score,best_w0(rankedExamples));
10325	"+posWeight+"
6388	if(spansWithDocument!=null){
14400	word;(word=(Token)parser.next())!=null;){
17621	Double(mean)
8320	getusechartype
6551	semisuperviseddataset
23601	n|Pos="+ngp+"
17834	estimatemean
13067	red</code>
1501	can't
20676	vPos=new
18806	"+name;
20374	sole
17029	nullexample
22234	pattern=Pattern.compile(regex);
10350	trueData=(List<Example>)result[2];
7092	if(test.showClassifier)
10917	tb=new
21465	standardDeviation^2</tt>.
15609	dataFile
20969	Iterator<Example>it;
10338	weight=-1;
16306	excount=0;
6651	ViewerTracker{
8981	Inversion
1634	innerClassifier
7772	stdDev()/Math.sqrt(count);
10218	combination
14722	"name-matching-labels.env"));
5490	parentDocId,int
2109	some
23939	k_fac
1098	stream
12188	StringSpan
5971	explains'
6870	documentMessage(documentList.getMinSelectionIndex());
23886	Efficiently
21235	source:
5734	keyiterator
16307	votedCount=0;
21208	source.
8579	(p(1
9373	Splitter<SGMExample>
8247	setTokenPropertyFeatures(Set<String>
239	getclassifier
21391	treeEx
22387	(Object[])o;
2666	setViewEntireDocument(boolean
10755	validDocumentSpans.size();
13487	w<10;
13740	Controllable
2948	splitPane.setRightComponent(viewer);
11511	CommandLineUtil.MultiClassificationSignalParams(base);
10598	edu.cmu.minorthird.classify.sequential.BatchSequenceClassifierLearner;
22304	wordset
18902	if(Runtime.getRuntime().exec(
6309	spansWithDocumentMap
10482	removeelement
8402	AbstractAnnotator
7642	(new
11168	TypeSelector(SELECTABLE_TYPES,
22024	levelStack.push("root");
19513	positiveLabel(double
6279	JTextPane().getFont();
11919	Austria
215	classifierlearner
9896	maxSegmentSize,int
21109	task,step;
20823	ClassifyCommandLineUtil.Learner.SequentialLearner
22610	reLabelText()
19126	name+"."+pname;
21046	clslearner
13573	(neg
21189	setvalue
12980	index=jlist.getSelectedIndex();
8968	Math.exp(k
22398	indexviewer
8263	from(s).tokens().eq().charTypePattern().emit();
15754	defaults.setProperty("debugLvl",
6985	textlearner
5507	childEntry.add(new
18533	if(toShow.startsWith("all"))
21383	explanations
8344	<code><pre>
3948	resultlooper
18461	inputLabel;
18279	converged!");
21003	TrainTestParams
22137	oldType,
892	break;
4349	.println("usage:
21547	batchTrainSubPop(
17922	one(){
838	sequence[j-k].getLabel()
20348	str.replaceAll("[A-Z]","A").replaceAll("[a-z]","a").replaceAll(
18754	additions
9021	my_old)
19409	differs
19924	"\n\n\n
6854	nextCursor){
21056	getsaveasfilenamehelp
20508	log.debug("bag:
16435	w_max
8436	tmpLabels,
13753	preferredLocation(){
6441	onlyeditedspans
7473	"+x);
18770	InLineComponent(o);
18573	mean[0]
21417	stringex
14864	stats1[0]=e1.errorRate();
1460	sgml_markup_pattern_prop
11789	"DocPerLineTestData_WithBlanks.base@line:11",
16332	votedCount=1;
16094	addcandidatesegmentgroup
21628	deleteButton.getAction());
19161	gbc.gridwidth=w;
21978	out.println(DatasetLoader.getSourceAssignedToExample(datasetFileName,
12450	findBestLongForm(shortForm,
3397	adjacent
940	schema.getClassName(i),
9410	iteratorsgm
21865	adaptedclassifier
22261	value=statement.getValue();
12898	forceUpdate){
16480	if(span.size()==0){
21394	explanation;
14446	parser
4444	suite.addTest(new
2116	call
5367	BasicTextBase(newTokenizer);
774	paper
7183	temporary
11822	"speaker"));
6864	currently
7105	classifieddataset
22030	eval(MonotonicTextLabels
20066	getter-setter
17443	getNumberOfFolds(){
21393	explanation)
2186	another
14739	rides
23909	binomial(n,k)
18664	Map<String,Object>
485	full
17594	sumX="+sumX+",sumWgt="+sumWgt+",m="+m+",d="+d);
9945	innerLearner[k].completeTraining();
14092	mytablemodel
2766	ChangeListener(){
8257	System.out.println("setTokenPropertyFeatures
20438	encodes
285	}else
19415	span.documentSpanStartIndex(),
336	javax.swing.border.TitledBorder;
16578	pos-startPos;
11852	JOHNSON
3294	check
14360	'toString()'
4242	updateTypeBox(programLabels,viewer.getTruthBox());
6066	add(truthBox,gbc);
18092	Poisson(0.0);
6826	FileFilter
19153	Insets(5,5,5,5);
6530	non-null,
22223	accum.add(span);
1120	i<ps.length;
19798	searcher
14933	expected[2]=-1.0;
23004	soft
15346	TransformingMultiClassifier(classifier,transformer);
10065	getWeight("POS")
22706	s.getTest(k);
21701	//System.out.println("editLabels="+editLabels);
22068	getCurrentLabels(){
9923	accumNeg,
22752	multisplit
6121	Span[spans.size()]);
7677	accum.add(s);
11467	average
13300	TransformingClassifier[]
10690	labels.setProperty(s.getToken(j),reduction.getTokenProp(),
15785	Integer.toString(newMaxIters));
14353	SimpleRandomSplitter(Random
22996	zpos
17461	Iterator
6692	OnlineClassifierDocumentEditor(OnlineTextClassifierLearner
21896	occurences
22965	Explanation.Node("BalancedWinnow
304	mellon
1781	closeAllTypes:
14224	BatchBinaryClassifierLearner
14003	dataViewer.setContent(cd);
14529	System.out.println("Deleted
17195	i=0;i<partition.size();i++){
16154	InstanceFromPrediction(Instance
14748	highrisknamelist
2725	something
24342	semisuperisedclassifierlearner
11540	result=cvd;
6318	pane=new
11811	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2752_0"));
12085	wigan
2346	serialize
10943	if(spanType!=null&&classOfS.isPositive()){
10367	newUnusedFeatures.removeElement(bestFeature);
23474	list.add(inst);
1418	File(dataDir));
3631	asFiles,String
18192	j=0;j<numberOfClasses;j++){
5116	markupcontrols
6544	subclasses
20618	NegativeBinomialLearner
4608	if(e==null)
13779	super(labels);
9690	conttag
19578	posprobability
18957	isHelp=true;
11269	".length());
17156	prof2=req2ProfileMap.get(s2);
5921	sourceforge
19958	separately
18237	log-likelihood
6603	setCharacterAttributes(getLength()-rightContextChars,rightContextChars,
12462	shortFormSize--;
20790	showData=true;
2570	edu.cmu.minorthird.text.SpanDifference;
1635	learners;
9628	useSpanType?taggedLabels.instanceIterator(spanType,id):taggedLabels
12599	bestlongform
4208	initProgramLabels;
21271	objInput=new
7191	documentLooper.next();
6526	SemiSupervisedDataset
19826	filter=new
17395	if(referenceStats!=null&&stats.length!=referenceStats.length){
2758	"+saveAsFile.getName());
1633	learners)
11107	(SequenceDataset)testParams.testData);
3880	StringBuilder();
7690	sublabels
5522	entries
5466	this.child=child;
19975	Attach
18298	f(t-1)|
468	j.hasNext();
6827	filter=chooser.getFileFilter();
24335	learners.
19532	bestClassName()
2520	});
14395	parser=new
23406	bug...
18232	estimatedClassLabel=mc.classification(mi);
4364	mixupdebugger
5894	maxMemory
641	innerlearners
14857	Evaluate
19637	(decision
6234	DocumentCellHeightSlider(final
17967	SimpleClassifierUI{
21123	this.numSteps=numSteps;
13214	findspans
23411	NaiveBayes(),0.5,0.5));
18370	estimatedclasslabel
13128	background
2124	XML
7512	truncateG(double
194	returned
1755	closeAllTypes,
1229	bound
13969	cd){
21743	getselectionstart
6062	toolbar
1392	}*/
390	MaxEntLearner(),
13037	thru
1347	'"+baseFile+"'
16174	if(history.contains(f))
7784	expected){
10295	bestEntropy=i_gain;
604	jscrollpane
6400	currentFont=Font.decode(newFont);
4305	enough
3111	canhandle
5371	docsLooper=textBases.get(parentLevelName).getTextBase().documentSpanIterator();
8308	featurewindowsize
15364	StackedGraphicalLearner.
15403	MaxEntLearner();
13151	super(instance,label,weight);
20635	infoGain
15798	maxItersHelp;
7391	savelabels
18918	JavaBean
5752	CRFLearner
4319	if("-file".equals(args[argp])){
15946	SmartVanillaViewer(toMinorthirdClassifier());
10595	classifiers
16158	i=0;i<previousLabels.length;i++){
7190	documentLooper.hasNext();}
7329	Change
24058	Math.log(10)
2654	BasicTextBase
1360	frank:
20230	len));
19786	searcherEx
1255	SampleExtractionProblem.testLabels();
6992	addbutton
18309	Recipes
6614	subspan.getLeftBoundary().compareTo(leftBoundary)>=0&&
1333	TextBaseLoader.DOC_PER_FILE,sgmlExpected);
22087	levelStack.pop();
770	log.debug("viterbi:\n"+StringUtil.toString(viterbi));
18286	classPrior,double
6849	CompleteTraining(String
9977	(!otherSegments.contains(seg)
6339	better
17988	SimpleClassifierUI
14904	against
4021	actionlistener
20011	SpanFE.trace
3929	System.out.println(trie.toString());
3300	if(signal.spanProp==null&&signal.spanType==null)
8137	sig,p2,"TRUE"));
13137	terminate
17073	profileMap=new
20325	this.bag=bag;
12750	MultiClassifierAnnotator
14418	tags=tagger.annotateString(content);
436	Classifier[innerLearners.length];
19707	c2);
13354	45.
18570	Y.nextInt();
15101	svm_node
4062	MixupDebugger
2407	complabel
8969	l_nu
14608	order={{0,1,2},{0,2},{2},{0}};
9612	tokenProp="_entityPart";
14989	++correct;
15782	setMaxIters
875	voting
21422	CERN
13721	ControllableViewer's
21159	"+task+":
21808	ClassifiedSequenceDataset(SequenceClassifier
19024	JSpinner
6281	renderers
15493	int[schema.getNumberOfClasses()];
13641	updatemargins
5868	iitb.Model.NestedFeatureGenImpl
6349	i=marks.iterator();i.hasNext();){
20570	Dataset",dataset.toGUI());
5330	currDstEntry=currDstEntry.getParent();
2635	edit
23029	DistanceLearnerFactory.buildArray(distanceNames);
3216	instance.addNumeric(
5704	documentids
5564	(destination)
10649	classifier:
489	classifier;
9123	l_my
14614	if(temp.matches(".*-$"))
2525	batchrankinglearner
22003	edu.cmu.minorthird.text.SpanTypeTokenizer;
15883	n-gram
8611	logplus
11945	BEAT
9448	getSplitterParameters()
163	classifier.
9966	previousClassMap(segments,schema);
13126	commandlineprocessors
10549	validClassNames
10677	this.seqClassifier=seqClassifier;
20818	TrainParams
14629	j=0;j<o[cur_order[0]].length;j++)
6932	classifier,
108	they
5456	textBases.
15556	SmartVanillaViewer(m[k])){
20463	lcbag
14639	m=0;m<o[cur_order[3]].length;m++)
24331	SemiSuperisedClassifierLearner
19435	estimatedSize();
11020	GenericCollinsLearner.class,
1748	modifying
1765	documentID
17430	List<Iterator<T>>testIt;
24352	FilterTokenizer(TextBaseManager
16729	dad(String
21473	(1958):
6361	highlightDiffs(SpanDifference.Looper
22328	declaretype
9067	approximate
9359	split(final
11611	Double(0)));
1103	classpath");
23608	//System.out.println("w|Pos="+pweight+"
9693	addstatement
15045	modelfile
5380	structure
22889	localF=0,localH=0;
16486	taggedLabels.setProperty(span.getToken(span.size()-1),tokenProp,endTag);
19571	wset
23967	Math.ceil(value),
9287	logfactorial
19427	Char
7817	Sample
11056	ClassifyCommandLineUtil.TestParams.type;
4180	them
797	then
15863	(feature
2768	slider=(ContextWidthSlider)e.getSource();
9929	(fn>0)
12558	stringspan
21719	i=editedSpans.iterator();i.hasNext();){
7409	transform(example.asInstance()),
15090	svm_predict
2463	ex=i.next();
18003	gui_op
23573	where:
11143	ViewerFrame("Result",
2486	j=0;j<ranking.size();j++){
4840	extracted_email
17382	log.info("checking
14273	log=Logger.getLogger(BasicTextBase.class);
7825	snow.",
22128	SplitTokenizer(pattern);
18717	filename){
7572	somethingremoved
19881	mapmap
7186	setDocumentPool(Iterator<Span>
15424	if(d+1<=params.stackingDepth){
4061	program.
17244	totTrainSize=0;
22042	program,
3473	subPopId's
22961	disregard
3950	lastidlist
17764	lambdaEstimateVec
1606	schema.getNumberOfClasses()
1675	java.io.BufferedOutputStream;
19874	asSet()
10332	weights,
14087	controlleddataviewer
14362	VanillaViewer
19746	confidence(Instance[]
10401	weights)
8550	crfannotatorlearner
16783	taunt
22061	program;
19683	4);
24003	polynomial
20641	"Dataset:\n
19912	if(frequencyModel.equals("word"))//not
475	e.getLabel()));
23515	allowedVariance;
18014	testSubPop()
7377	second
20799	setSaveAsFilename(String
14052	buf.append(index.size(f));
13439	correctEx
2185	overlapped
6446	displaying
650	setinnerlearner
13386	Feature("walkerScore");
24069	looks
23912	i=k;
3374	getoutputprop
7045	annotate(MonotonicTextLabels
18755	first)
9919	accumPos[k]
10679	this.reduction=reduction;
2053	"can't
9964	first,
5132	first.
22662	getdirectory
18006	edu.cmu.minorthird.text.learn.SampleFE;
13811	typebox
13497	rankedExamples)
6090	i=null;
13437	rankedExamples,
2919	Controllable))
22379	"TBA"});
3712	Class.forName
3250	edu.cmu.minorthird.ui;
1214	id).
15168	Feature[maxIndex];
1826	tok=new
4151	stuff
15425	stackedDataset=stackDataset(stackedDataset);
12403	currSentence.substring(tmpIndex
4113	System.out.println("evaluating
5789	pos++)
8492	loadFile=new
12031	included
187	this
10088	used.
18235	//System.out.println(unlabeledDataset);
2340	recognized
18961	Selection();
7002	buttonsthatchangestuff
8371	edu.cmu.minorthird.ui.TrainExtractor
9775	<CODE>ClockSeed()</CODE>
7479	||x||^2
14016	VanillaViewer(cd.classifier);
8740	tmp){
11899	WORLD
5512	includes
21358	this.offset
24039	longFactorials[k];
10406	W_-
20312	targetValue){
17802	estimatebinomialpn
22322	deflevel
10404	W_+
19868	defaultWeight){
14993	sumvv+=v*v;
10486	schapiresingervalue
8818	Details()
8921	p,q,p0;
24350	parentLevelName;
8556	FeatureFilter
7593	CommandLineUtil.ExtractionSignalParams(base);
17820	tausd
17569	(N-1.0);
22335	deftokenprop
6017	documentList.setFixedCellWidth(760);
7509	Singer's
5735	currkey
6904	col){
3861	addWords(String
24355	parentLevelName)
4954	crossvalidatedsequencedataset
4533	IllegalArgumentException(ex.toString());
18292	(featurePrior+observedCounts)/(numberOfFeatures+totalCounts);
15568	uselogistic
24062	log2(double
6966	id){
10764	//put
22441	//SpanFE.from(s,buf).tokens().eq().lc().punk().stopwords("remove").emit();
3595	Filenames,
23468	"]");
21025	realative
18943	//log.setLevel(Level.DEBUG);
18019	base.setDocumentGroupId("b2","bar");
5353	parentLevelName.
5067	documentId
13892	add(filterOnFeatureBox);
19934	StratifiedCrossValSplitter
17089	if(!line.startsWith("#")){
6543	passed
8658	features_out)
11106	e.extend((SequenceClassifier)c,
359	Press.
21806	sequenceClassifier;
6546	dataset);
19919	data:\n"
22157	log.info("Evaluating:
7	Learn
23929	loop;
8887	unimodal
17688	candidate="+candidate+"
16792	trytogetclp
17713	j=tail;
2279	StringBuffer("<extractions>\n");
21018	TrainTestParameters
20852	type.multi(dim);
7977	snow
6916	docID
9069	points
23494	log.debug("
15013	rvalues[0]=(double)correct/(double)total;
9961	accum,double
3728	myclassloader
22369	"Hannah"});
21434	fee,
4693	sourcestring
5613	dstDocId;
10894	this(learner,spanType,labeledData,null);
13400	splitIntoRankings(data);
2858	setkeymap
230	setanswer
10822	zoomedOut.setContent(content);
6986	spantypes
20701	if(N<=1.0){
23058	builddictionaryfornegativeclass
21672	hi="+hi+"
15861	(Instance)data.x(pos);
23432	LearnerTest("sparseNum",new
15813	getUseHighPrecisionArithmeticHelp()
270	dataset){
23824	2.925093693493014E188,
8816	confidence;
14304	documentMap.size();
22632	filePC.progress();
8446	confidence=
6135	guessBox
15299	candidate-filtering
23960	<dt>Examples:
12680	(Chapter
18132	dieter
8437	confidence,
16380	aa=filterFeat(a1);
5895	dataset.getMaxWindowSize();
3832	Trie(){
17264	accum;
16530	SimpleDatasetViewer
11084	annotatedInstance
13786	typeBox.addItem(type);
772	point,
23991	interval,
5382	documentIds
885	pc.progress();
5020	highlight(Span
8821	confidence)
18537	-input
3371	combined
19125	pname
24345	spantype.
23859	5.7133839564458575E262,
1211	(one
18325	epsilon=2.2204e-16;
12948	actions
12569	hascapital
7279	zhenzhen
15286	"false",
3518	detail
6572	Math.min(span.documentSpanStartIndex()+span.size()+contextWidth,span
237	addexample
3960	ActionListener{
13876	getDataset(){
10310	c=batchTrain(dataset,0,allFeatures);
19977	SpanFeatureExtractor,
4495	//Doesn't
19973	SpanFeatureExtractor.
17973	if(args.length==5){
14207	splitterparameters
12438	lIndex--;
14607	if(s.length==3){
4049	java.awt.Dimension;
18595	G.nextDouble();
13396	this.exampleSize=exampleSize;
14424	i=0;i<tags.length;i++){
9363	getNumPartitions(){
12436	(Character.isLetterOrDigit(longForm.charAt(lIndex
4450	result){
20061	requiredAnnotation,
11501	charannotation
11779	base.documentSpan("DocPerLineTestData_WithBlanks.base@line:5");
18604	testrandom
1503	doc_per_file
626	networks
6363	documentId,
12800	documentId)
23780	8.504785885678624E101,
14123	CommandLineUtil.AnnotatorOutputParams();
3857	depth++;
13175	candidateFinder;
750	epoch<numberOfEpochs;
6370	colorByStatus[SpanDifference.FALSE_POS]=fp;
10714	new-annotation-type
20820	op="train";
14478	SIG_SIZE=2;
23603	//System.out.println(c.getScale());
9854	documentId.
12830	showtokenprop
144	that
19444	gethichar
22646	ld=new
15194	edu.cmu.minorthird.text.SpanDifference.Looper
4292	frame.setVisible(true);
17267	webmastersplitter
804	than
2594	JTextPane
14782	previously
19775	sequence[ii].getSource());
2888	slider
10571	valid.
3515	buf.append(window[lo][len-1].toString());
2908	serialVersionUID=20080517L;
5942	model
9325	legalAggregators.add("COUNT");
4995	contextWidth=
6568	contextWidth;
3895	tab(b,level);
4004	chooser.setSelectedFile(new
14825	infinity
10421	totalPos,
20110	f=new
19797	Model"));
14623	i=0;i<s.length;i++)
3801	getNumPartitions();
12683	Forward,
10896	this.learner=learner;
4535	result);
23629	(k+prior*pseudoCounts)/(n+pseudoCounts);
10057	weighted
21230	fails,
15357	StackedGraphicalLearner
8053	rw.rnorm(n,mu,sd);
10645	ViewerFrame("Sequential
506	className
20105	SpanFE.Result
18170	mc=new
11685	sequenceclassifierteacher
5120	getcoloredproperties
3512	lo+".."+(lo+len)+":
16402	mycl.lpos_h;//bug!
20551	SemiMarkowLearner
3405	"sequenceLength".
10281	thresholds.
14419	PrintWriter
20418	store_as_counts
13510	s.featureScore(score)
3066	"+prefixField.getText()+"]";
4722	Wang
23350	any+
4869	(lc.endsWith("es"))
23469	site=1;site<=numSites;site++){
22812	negCouns:"+getCounts(f,"NEG"));
10640	.error("Hint:
828	//System.out.println("differenceAtJ
22439	.usewords("examples/t1.words.text").emit();
17133	users.add(userId);
1790	<code>setClosure
20702	r=0.0;
18091	this.poisson
14115	featuresummary
8488	mode:
10551	validClassNames){
17509	if(signal==TEXT_MESSAGE){
8176	SampleFE{
11233	console.clear();
8753	((line
10328	Forests
11583	index:\n"+index);
15238	prototype
13706	getMultiClassifier(){
16086	dbGui.setContent(this);
20424	simultaneously
8442	SmartVanillaViewer(tmpLabels));
11334	config
23478	Splitter<Instance>
7723	deviation,
19394	len);
6750	mode,
6979	choose
16182	KnnLearner(int
15778	dataset!)
15103	mode.
11126	(testParams
16635	Method[]
14476	DIV="@#!";
15229	accumPos[wrongClassIndex].increment(
17455	ArrayList<Iterator<T>>(folds);
9911	correctSegments(g,schema,maxSegmentSize);
3330	ann=
11892	Madrid
21576	ReadOnlyButton(readOnly?"Edit":"Read"));
11632	putting
24127	(1966)
10947	ann;
8854	&lt;=
12063	guzman
8549	ann'
18197	estimateClassProbMLE(1.0,numberOfClasses,
15504	if(Agr.equals("EXISTS")&&temval[i]>0)
14171	RunMixup().callMain(args);
19384	Access
10925	i=fe.extractInstance(textLabels,docSpan);
3743	defineclass
18861	HyperlinkListener{
6228	ContextWidthSlider(final
14135	save,mixup,output});
16683	CONFIG_FORMAT_EXT=".config";
2708	keymap.addActionForKeyStroke(KeyStroke.getKeyStroke("UP"),upButton
1546	nulls.
12577	equalsignorecase
3762	Iterator<T>{
15620	File(dataFile);
1833	failed
20032	first/last
16716	atWhat){
18884	OS")){
11738	Ways
4960	javax.swing.text.SimpleAttributeSet;
22893	lossH.increment(ff,1.0);
23951	accurate
20028	result.token(int
14874	c2=(Classifier)in.readObject();
10938	types;
18919	types:
20220	len){
17939	Span2Instance
14943	Rate2:
11974	types.
19670	z.increment(w_t);
14932	expected[1]=-1.0;
3340	TrainClassifier().callMain(args);
20421	requiredannotation
20894	dataset";
12459	i=shortFormSize
23996	infinity,
22393	((ZoomedViewer)familyViewer).setHorizontal();
1581	edu.cmu.minorthird.util.ProgressCounter;
15524	"pred."+agr+"."+type+"."+predictedClassName;
6669	ann=null;
21169	completed.
16071	Collections.shuffle(groupList,new
16189	setK(int
23592	numNeg+=ex.getWeight(f);
18698	if(advancedParams!=null){
12709	nstate:
8449	if(DEBUG)
23156	java.io.PipedInputStream;
20880	TrainParams{
13639	w_neg
12410	(isValidShortForm(shortForm.asString())){
5025	span=(Span)o;
17137	users
5806	(len-1);
8341	confidences
21720	if(k--==0)
18341	File("/Users/eairoldi/cmu.research/minorthird/apps/unlabeledDataset.3rd");
15051	traindata
3926	Trie();
8675	punctCount++;
11001	ClassifyCommandLineUtil.MultiTestParams.class,
22420	edu.cmu.minorthird.text.learn.SpanFE;
5008	JLabel("Context:"));
22086	'"+levelName+"'");
20930	lnr=seqLnr;
1297	".base");
8329	requiremyannotation
11973	translated
17045	requests
9557	trainList=null;
13388	turned
20190	(SpanResult)doTrace();
21849	src"+instance.getSource()+"
9602	categories.
15531	this.m=m;
12828	gettypeset
6377	index=indexOfSpanMap.get(j.next()).intValue();
19828	high-frequency
5900	nestedCrfModel
1031	directly
12887	this.superView=superView;
33	Accept
5300	translates
7481	tau_t
21741	newspans
5593	.println("***
10364	falseData.size());
7310	statusMsg,learner);
13265	getExampleWithID(String
4856	j<span.size();
17515	Estimators
2095	if(!prop.equals("_prediction")){
5759	super(args);
8177	Simple
1403	log.debug("loading
15130	HashSet();
12875	if(content!=null)
5352	newLevelName
8139	ProbSigmaGivenTauX(candidate,tau,vlow,vup,xr,xp,wr,wp,vbeta)
10784	i.hasNext();)
2868	importdocumentlistmarkup
6987	learnername
603	jpanel
10233	getSplit(List<Example>
6198	document:"
22436	File("my-document-labels.env"));
21389	stringEx
9514	displays
24315	logbasevalue
13676	during
7754	mean
21463	</pre>
3246	office
19867	getWeight(T
13523	W_Neg=0;
2197	if(position>-1)
6383	spanMarkups[j]=new
21122	this.stepsCompleted=0;
19296	linux
19514	(score<0)
6668	editedSpans=null;
23482	CrossValSplitter<Instance>(3);
8477	endIndex);
10552	this.validClassNames=validClassNames;
18934	useAdvanced=useAdv;
10054	instance---either
13451	it.hasNext();
20534	compressDataset=true;
21957	if(linkFileName!=null){
23590	if(isPos)
21837	Map<Example[],String>
18432	gettotalnumberofexamples
17518	vCnt,
17102	profiles:
12025	parts
5398	parentLevelName,TextLabels
17882	subprocessor;
11590	i=index.getNeighbors(instance);i.hasNext();){
18555	Negative-Binomial
12439	longForm.lastIndexOf("
11622	count["+
19119	options");
5096	SpanViewer(labels,s);
22634	getDirectory(String
6454	tokenrecall
4369	groundtruthlabelsfile
1824	"+line);
13577	ranking){
19872	getWeight(object,0.0);
4284	MixupDebugger(base,baseLabels,groundTruthLabelsFile,
23436	SVMLearner(),0.0,0.1));
20231	subSpan
1060	FancyLoader
22168	wordSet=statement.getWordSet();
17611	"lambda",new
14010	right.setOrientation(JSplitPane.VERTICAL_SPLIT);
21729	editspanproperties
8425	MonotonicSubTextLabels(tmpBase,new
23686	17.50230784587388584,
19625	this.aggressive
4164	gbc.weightx=1.0;
11650	MathUtil.sign(n.sim-sim);
19372	buildFrame(){
21940	ExtractionReductionParams(),gui,base,signal,
4216	mixupFile,TextBase
15379	useConfidence=flag;
6878	propField=new
17311	SpanEditor(viewLabels,editLabels,viewer.getDocumentList(),viewer
22353	System.out.println("converting
10867	StyleConstants.setBackground(green,
11976	assertEquals(4,
8666	punctuationPercentage(String
6409	frame.getContentPane().add(main,BorderLayout.CENTER);
4731	PF=2;
22170	patt=statement.getPatt();
20359	punk(){
20715	temp
18398	KnnLearner(),true);
3394	each
21828	Place(Example[]
15275	onevsallclassifier
13418	ProgressCounter("boosted
20248	if(index1>=0&&index1<s.size()){
19264	isassignablefrom
18467	inputLabel){
20695	sumWgt2=0.0;
18389	mistakes
20099	SpanResult(new
20444	dotrace
932	completeUpdate()
2805	keymap
16550	unlabeledexamples
3468	label[start][end-start-1]
16289	VitorBalancedWinnow(double
20240	token(int
15314	//assertEquals(
7894	sampleDocs[3]);
11682	bnorm
6599	highlights.
22715	d.MultiSplit(splitter);
22109	if("pseudotoken".equals(levelType)){
4592	javax.swing.JTable;
17841	KEY",
16708	father="elderberries";
3901	").append(j.next());
11814	assertEquals(3,
14008	instanceViewer.setSuperView(this,"instance");
1636	schema,OnlineBinaryClassifierLearner[]
21566	updates++;
16110	labeledData=
14382	tell
1621	innerLearner[correctClassIndex].addExample(
4301	parse
20235	SortedSet<Token>
959	serialVersionUID=20080207L;
7638	ViewerFrame("Annotated
10803	ZoomedViewer
7173	problem";
22208	if("top".equals(startType)){
5519	"Document
24065	1.4426950408889634;
20547	getSemiMarkovLearner(){
12739	numclasses
21803	newvals
9392	datasetloader
7955	assertEquals(2,
13546	(bestFeature!=null){
747	sequence
16223	Avrim
19351	TrackedTextBaseComponent(edu.cmu.minorthird.text.TextBase
14922	"+e1.averagePrecision());
8232	setUseCompressedCharType(boolean
4889	SequenceClassifierLearner
20199	SpanResult(extend("left"),fe,lSpan);
14532	if(Remove_Single_Tokens_Low_PFIDF)
4959	splitsequence
22065	getCurrentLevel(){
11673	computesimilarity
16025	maxWindowSize+",
3338	main(String
12050	loadwordperlinefile
14774	lowrisk
16902	BackPointer[][]
7960	assertEquals(1,
14231	(BinaryClassifier)batchTrain(dataset);
2274	HashSet<String[]>()));
5153	textBaseMappers=new
6863	if(label!=null){
17684	ProbabilityFactory.AlphaTau(tau[i][it-1],
2832	synchronized
13745	add(makeApplyButton());
10362	"+trueData.size()+"
4300	readOnly=false,stem=false;
4962	edu.cmu.minorthird.util.gui.Controllable;
6373	colorByStatus[SpanDifference.UNKNOWN_POS]=mp;
3695	Pattern
24075	30)
21679	editedSpans.add(span);
672	javax.swing.*;
2085	j=labels.getTypes().iterator();j.hasNext();){
7944	spanTypeTokenizer.splitIntoTokens(sampleDocs[3]);
7006	intype
8776	envfile)
2946	splitPane.setResizeWeight(0.25);
8161	fienberg
2538	sortbyscore
19521	IllegalArgumentException("negativeLabel
23709	2L,
9082	h(x)
16431	promotion
21433	granted
11061	-gui
10271	bestFalseData=null;
24131	logGamma(double
12731	chapter
12564	isvalidshortform
17783	m2/N;
9338	HashSet<String>
18457	showing
7930	"doc3"),
11096	(!(testParams.testData
21154	(errorArea
4847	STEM_PROP
3345	ioutil
10583	equals(Object
19163	if(c.equals(validSubclasses.get(i)))
15539	rlt;
7761	variance
7053	annotate
21526	transformation
5850	iter.hasNext();
21253	redirect=redirectionProps.getProperty(annotationType);
6331	el,Object
12392	shortForm.substring(0,
21848	IllegalArgumentException("instance
3541	newlabel
20963	setClassifierFilename(String
15152	if(ig1.value<ig2.value)
3991	panel");
22953	regret="+mode;
11747	"comment",
3283	getTrainClassifierHelp(){
22850	a,double
18490	evaluation(){
8116	candidate,p2,"TRUE")+"
6283	spanComponents=new
1308	'"+pattern+"'
1387	log.error("Mixup
14011	right.setResizeWeight(0.75);
10395	W_-^j,
18622	among
19910	filter.addFeature(
18410	"+numExamples+"
7667	tag1=tag+"
21830	this.seq=seq;
5051	props=propSet.toArray(new
8948	both;
8286	base.loadDocument("neg"+i,SampleDatasets.negTrain[i]);
11521	save,signal,train,trainTest});
5513	listed
20760	(SequenceClassifierLearner)interp.eval(s);
2272	if(ops==null)
22553	"[LeaveOneOutSplitter]";
4748	if(isPredictedName(spanType,tokenSpan,labels))
18566	N_int;
2857	getaction
20276	first(){
21598	add(exportButton,gbc);
4392	horizontal
2315	performed
10467	falsedata
21809	sequenceClassifier,SequenceDataset
9231	f1/r1))
16291	beta,boolean
5339	mapped
20063	setRequiredAnnotation(requiredAnnotation);
7217	abstractbatchannotatorlearner
9910	"+maxSegmentSize+"\n"+viterbi);
23653	6.942840107209530e-03,
2074	PrintStream(new
1346	"+scriptDir+"/"+script
9969	String[1];
5139	#filter(String,
15534	m[0].classification(instance);
5205	mapper
4556	checkresult
23154	unnormalized
8703	you")
20585	segmentation=segmenter.segmentation(g);
15966	setusehighprecisionarithmetic
4155	JPanel(new
19669	z.increment(vpos_t);
3474	group...
2494	ranking1.addAll(negExamples);
3106	setlayout
23645	2.079067210376509e-02,
6314	ArrayList<Span>()));
17408	log.info("Referencestat("+i+")="+referenceStats[i]);
15335	asserttrue
2684	listen
11063	parameters");
23401	empirically
16217	Voting
11858	DUBLIN
2961	if(loc==ViewerControls.TOP){
8824	author)
9719	(1990)
17180	item=i.next();
21075	setclassifierfilename
42	void
19681	3);
515	(DEBUG)
23071	editorOutputLabels=null;
12681	3):
19969	<code>textLabels.require(...)</code>
1943	closeLabels(Set,
14314	MyDocumentSpanIterator
15727	ctable
3856	node=null;
6557	DefaultStyledDocument{
19989	Extractor
15491	Agr=operIter.next();
4891	d,Splitter<Example[]>
3928	trie.addWords(("argv"+i),base.getTokenizer().splitIntoTokens(argv[i]));
12322	StringSpan(base,lo+newLo,hi);
14320	BasicSpan(documentId,textTokens,0,textTokens.length,documentGroupMap.get(documentId));
1625	viterbi[j].bestClassName()
11733	Cobb",
4454	assertEquals(.65,e.f1(),0.02);
13600	linguistics
12753	MultiClassifier
19133	wholePanel.add(new
11374	fileName.substring(0,
20771	seqLearner=c;
13751	((Controllable)viewer).applyControls(this);
1067	"edu.cmu.minorthird.repository";
898	since
7908	textBase.loadDocument("doc2",
2456	Map<String,List<Example>>
16586	System.out.println("Option:
18904	browser=browsers[count];
7043	Something
4764	Double[]
8520	abstractannotator
7430	edu.cmu.minorthird.classify.algorithms.linear;
7649	SpanDifference(labels.instanceIterator(ann.getSpanType()),labels
7148	Logger.getLogger(AbstractBatchAnnotatorLearner.class);
20709	mudelta.put("mu",new
18689	rootClass
6759	i=buttonsThatChangeStuff.iterator();i.hasNext();){
11938	92-90
7389	fatal
8046	Number
19260	removeclass
14742	namedict
20087	textLabels=labels;
10738	UnknownDocumentException{
23312	SampleTextBases
4107	errorString="Loaded
19767	weightOfConstrainedPrediction
9833	paul
13701	examples=answeredQuery.getExamples();
5970	getsegments
16115	labeledData;
14266	negtest
4401	updatetypebox
3239	instanceviewer
22609	previously.
1225	executed,
12241	((str
1984	TextLabels.
7207	Example(fe.extractInstance(answeredQuery.getLabels(),tokenSpan),
23527	DatasetClassifierTeacher(data);
5140	TextLabels,
4323	File(args[++argp]);
13775	highlighted
22306	patt
2906	ControlledViewer
13939	GUI.conciseMultiExampleRendererComponent((MultiExample)value,
1539	considered
17187	trainList.get(j).add(item);
12807	require(String
5286	srcEntry.getParent().getTextBase().documentSpan(parentDocId)
957	top.add(hyp);
21174	graphicCounter.setStringPainted(false);
13692	while(it.hasNext())
3594	path
3671	log.info("Calling
14329	getTokenArray(String
6120	spanArray=spans.toArray(new
21917	PreprocessTextForExtractor
19327	east
14770	tokenwindow
5097	mp=new
7898	RegexTokenizer(newPattern);
6006	if(!contains)
9901	"sequence",numberOfEpochs*dataset.getNumberOfSegmentGroups());
16856	maxSegmentSize
11029	Console.Task
4370	mixupprogramfile
15581	validation
1176	files!=null
7835	your
21301	edu.cmu.minorthird.classify.experiments.CrossValidatedDataset;
19140	row+1,2));
22934	if((factor<1.0)&&(factor>W_MIN)){
21351	i=new
15972	traindatasequencec
12420	-1);
4096	labelsLoader=new
8438	pass
9946	SegmentCollinsPerceptronLearner.ViterbiSegmenter(c,
4904	k<s.getNumPartitions();
19857	addfeatureval
18266	5.5.2.2.
9424	edu.cmu.minorthird.text.learn.experiments.TextLabelsExperiment;
19984	setrequiredannotation
10276	falseData=new
19812	"word"
16137	annLabels=textLearner.annotatedCopy((TextLabels)base.labels);
12359	-1))
2040	log.warn("forgetting
4807	i=labels.instanceIterator(spanType,test.getDocumentId());i
1281	TextLabels)
8635	matched
20865	type.data(s);
8535	getsequenceclassifier
2993	viewer.clearContent();
11174	nice
17170	profilesForPartition.add(req2ProfileMap.get(j.next()));
20360	punkBag=new
7272	"+to+"
17709	Math.floor(numIterations*(1-perc));
15356	BatchClassifier
19497	add(label,weight);
1238	matches
1500	matcher
400	AdaBoost()},
12758	TransformingMultiClassifier){
12366	-1){
13559	s.increment(bestFeature,delta);
16353	zpos=new
2733	if(!DUMMY_ID.equals(documentSpan.getDocumentId())){
7320	viewer.getDocumentList().addListSelectionListener(ocdEditor);
21234	log.warn("Cannot
2711	P"),upButton
8648	pattern.matcher(tmp);
10296	bestTrueData=trueData;
11073	exits
12654	subView=subViewList.get(parallelPane.getSelectedIndex());
16275	vote
14625	i=0;i<order.length;i++){
23017	LeaveOneOutDictTransformLearner()
5334	intermediate
539	this.innerClassifiers
1894	details=null;
24349	textBaseManager;
5611	srcDocId;
9618	.getInputType(),example.getInputProp());
22510	i=fidx.featureIterator();
23889	referred
7811	vanilla'
11315	getdatasetfilename
15844	sequence.init(iter.next());
9125	c_pm
1477	param
24049	Math.floor(value),
23099	editoroutputlabels
12640	parallelPane.addChangeListener(new
12630	does)
10409	wn1=neg/totalWeight;
21030	MultiTrainTestParams
16412	irrelevant
4239	truthLabels);
8516	IOUtil.saveSerialized(newAnnotator,saveFile);
14456	depicting
11120	data",md.toGUI());
21764	Feature(newFeatureNames[i]);
221	getschema
6756	setReadOnly(boolean
18134	gamma
12058	american
637	stackedlearner
14555	NameMatcher.postLabels=labels;
8783	tbl.getLabels();
23135	w=unnormalizedTFIDFWeight(f,instance);
4983	getSpan(){
16361	MyClassifier
869	-1.0
22505	MakeBinaryTransform()
20090	'pipeline'
10956	adddocument
22730	DatasetSemiSupervisedClassifierTeacher(trainData).train(learner);
13888	filterOnFeatureBox=new
7800	sqrt
8307	makeextractionfe
8235	useCompressedCharType;
9401	reltemp
19545	expOdds);
14441	uiuc
9585	"+trainFraction+"]";
2696	setContextWidth(int
813	j<sequence.length;
17364	presenting
12472	(isTrueDefinition(shortForm.asString(),
22705	s.getTrain(k);
4735	Map<String,Double[]>
11041	"Define
22602	if(labelFile.exists())
22755	(stored
22040	(current
15081	testset
12368	openParenIndex));
17202	i=0;i<trainList.get(k).size();i++){
17037	arbitrary
12716	emission
11400	labelFile;
22849	RegretWinnow(double
20660	wgtTot=0.0;
19729	c_t0
21051	setsaveasfilename
13933	table,
5172	identified
19230	propertydescriptor
6168	fpColor(),fnColor(),tpColor(),mpColor());
20626	this.SCALE=scale;
3465	(window[start][end-start-1]==null)
15547	result.addSGM(AugmentEx);
10866	StyleConstants.setForeground(green,
16019	addCandidateSegmentGroup(CandidateSegmentGroup
12337	StringSpan.EMPTY;
18563	Poisson(20.0);
3883	tab(StringBuilder
13784	typeBox.addItem(MENU_STRING);
14605	if(s.length==2){
3100	gridx
3101	gridy
23562	Pr(+|instance)
7538	y=wx.example.getLabel().numericLabel();
19950	j=0;j<strata.get(i).size();j++){
7278	fields
22680	edu.cmu.minorthird.classify.semisupervised.SemiSupervisedClassifierLearner;
1942	control
11918	VIENNA
23860	8.627209774233244E264,
16389	//the
4220	viewer,JScrollPane
21632	F"),nextButton
1561	train/test
1107	IllegalStateException("error
23842	1.4872707060906847E226,
14531	applyDictIncreaseRecall(labels);
15937	if(cmmEx
9887	OnlineClassifierLearner[]
12007	testcasedir
12281	lo,hi;
2332	closetypeinside
4901	ClassifiedSequenceDataset[s.getNumPartitions()]
11176	TitledBorder(StringUtil.toString(args,"Command
10074	positiveLabel(posWeight)
14771	numtokens
10413	"+pos+",
10000	segments,ExampleSchema
20112	if(featureStoragePolicy==STORE_AS_BINARY){
11402	labelFile)
9518	super(o);
19316	numadvancedparams
14900	estimates.
23497	-----\n
14291	identifier
13181	this.spanFilter=spanFilter;
23456	numPagesPerSite){
21432	hereby
5874	Exception
3138	edu.cmu.minorthird.classify.GUI;
4739	labels,String
2505	instA,Example
4829	tokenhash
18815	JDialog
14051	StringBuffer(f.toString());
1408	scriptDir:
16546	splitter.split(examples.iterator());
12597	currchar
3209	argv)
20437	pipelines'
13799	HIGHLIGHT_COLOR;
21974	if(!(ex.getSource()
5091	[@sentence]
6021	JComboBox();
20096	bag-of-words
289	dataset.iteratorOverUnlabeled();
286	if(dataset
2800	changelistener
543	transformInstance(schema,instance,innerClassifiers);
1829	op=advance(tok,in,file);
21962	saveLinkInfoSequence(File
22314	getmixupexpr
14028	split.setRightComponent(right);
15726	getcompensatedpmutualinfo
14510	extended
5221	you
15543	Aggregators=
478	level-1
948	Explanation.Node
23552	testname
3193	"+history+"
17032	tspan
22483	mc.explain(fe.extractInstance(labels,documentSpan));
17117	users=new
10699	Annotator"));
23021	LeaveOneOutDictTransformLearner(String[]
20989	TrainTest
7144	edu.cmu.minorthird.text.Token;
17149	Comparator<String>
10922	textLabels.addToType(docSpan,label);
18831	classes=o.getClass().getName().split("\\.");
21670	spanHi=span.getTextToken(span.size()-1).getHi();
17903	if("-config".equals(args[pos])||"--config".equals(args[pos])){
1013	sequenceclassifier
9848	MutableTextBase(Tokenizer
18958	isHelp=false;
15401	StackedGraphicalLearner(){
6742	add(completeButton,gbc);
6789	if(editDocument(documentSpan,type,docIndex))
2817	spanpainter
2296	stringtokenizer
11510	CommandLineUtil.MultiClassificationSignalParams
1328	(baseDir.exists()
11414	edu.cmu.minorthird.classify.experiments.Expt;
8879	turn,
14995	sumvy+=v*target;
7162	this.fe
20555	documentLooper){
6769	ioTypeLabel.setText("Edit:
4549	longuitest
22977	list_size
3904	toString(b,level+1,node.map.get(w));
12184	pairs
21185	currenttimemillis
22136	importLevel,String
19913	"warning:
8515	ConfidenceReportingSequenceAnnotator(seqAnn);
21404	if(stringEx
23079	TextBaseLabeler
9190	Dk);
20466	trbag
22107	levelsToLabelsMap.get(currentLevel);
18314	(using
5991	getDocumentList(){
3135	addapplybutton
3982	chooser.setFileSelectionMode(mode);
15925	classification(Instance[]
18911	System.out.println("Cannot
10397	block
11669	retrieval
7646	isOverallMeasure){
17416	default_learner
16066	re-order
16051	for(Iterator<CandidateSegmentGroup>
3561	and/or
16537	jList=new
9420	SemiSupervisedClassifier
11231	AbstractAction("Clear
11234	helpParamsButton
20640	BasicFeatureIndex(data);
22894	localH++;
20389	Dictionary
19215	(instanceMap.get(o.getClass())!=null)
2158	LabelInfo(s,val,start,end));
4520	args;
11887	Spanish
429	batchTrain(Dataset
22163	keyword=statement.getKeyword();
2283	hi="+hi+">"+s.asString()+"</"+type+
2703	SpanDocument(documentSpan,contextWidth);
20611	semimarkowlearner
17215	"overlapping
15872	feature,f);
12137	M.A.
14968	total=0;
13723	interrogate
15760	args,
1404	dataDir:
2933	splitPane.setTopComponent(viewer);
24308	degree
21078	iteratorit
15876	modelSpecs,
1428	args)
22131	IllegalArgumentException("No
20104	String[0],buffer,s);
2148	List<LabelInfo>
5324	currDstEntry=textBases.get(dstName);
2709	.getAction());
14646	name,boolean
4809	if(name.contains(test))
8375	old.ann
3774	hasNext(){
17929	jcp=
10807	rename
1703	lists.
22222	if(!hasExtraction(mixupExpr,labels,span)){
10983	edu.cmu.minorthird.classify.transform.TFIDFTransformLearner;
18724	if(s==null)
14490	it=labels.instanceIterator(predType);it.hasNext();){
2437	BatchRankingLearner
15982	setfeatureidentifier
17140	RandomSplitter<String>(fraction);
9986	"+delta+"
18104	success)
2940	if(controls.preferredLocation()==ViewerControls.RIGHT){
5267	srcOffset+length),srcName,dstName);
18086	success.
7542	cacheScore(cache,x);
6147	paint
10427	w10=neg/tot+epsilon;
16279	true);//voted:
5039	i=controls.getColoredProperties().iterator();i.hasNext();){
4213	TextBaseViewer
23158	javax.swing.JScrollBar;
22248	match,
14672	FILE]
5071	Object[1][2];
7413	example.getMultiLabel()
15968	usehighprecisionarithmetichelp
18433	'index',
15526	Classifier,Visible{
22406	hurst
12342	tmpIndex
21222	log.debug("Trying
13457	features.add(ftr);
4850	{;}
5306	dstEntry=textBases.get(dstName);
857	c.update(
11791	log.fatal(e.getMessage(),
17305	spanEditor=(SpanEditor)viewerTracker;
12818	fileToLoad
1047	java.util.List;
17034	complicated
6229	renderer=
15865	next(iitb.Model.FeatureImpl
9056	complement
18473	teacher=new
18168	this.iteratorOverUnlabeled=i;
14280	'group'
12418	paren
8538	predictedlabels
19209	SampleOuter();
14220	textlearnerparameters
22743	errorRate(Classifier
13338	transformingclassifier
5247	exist
18723	s=ClassLoader.getSystemResourceAsStream(filename);
9268	university
21471	M.E.
13073	FILE,
16450	y_t_hat
10586	validClassNameSet.equals(b.validClassNameSet);
18968	(useAdvanced&&isAdvanced(pname))){
15869	(float)example.getWeight(feature);
9045	35)
5653	parententry
1877	in,File
24068	<tt>k<30</tt>
8417	'"+docId+"'");
23895	n-k+1
23016	distances[][];
9688	begin
20327	"[StringBagResult:
13072	FILE"
8497	crAnn=
4218	initProgramLabels,TextLabels
19180	setFlag(boolean
9046	35;
8030	(RWrapper)
4465	"-labels","cspace.1f3","-spanType","Cmt","-test","cspace.2f2",
3316	CommandLineUtil.toSeqDataset(base.labels,train.fe,signal.spanProp,"combined");
6488	spanmarkups
22384	(Object[])
5608	edu.cmu.minorthird.text.TextBaseManager
19381	Token's
255	edu.cmu.minorthird.classify.Util;
22954	CURRENT_SERIAL_VERSION=1;
19127	//try
7184	storage
24146	Math.round(binomial(n,k));
20684	mudeltaPos=estimateNegBinMOME(vPos,wgtPos,featurePrior);
17597	0.0,(v-m)/(r*m)
3171	asPlainInstance()
5441	parent;
18220	probabilityOfOccurrence);
20958	type.splitter=this.splitter;
21948	IllegalArgumentException("-saveAs
16002	maxWindowSize=-1;
19512	score));
4047	getdefaultdir
13877	MessageViewer(new
5276	parent.
22999	com.wcohen.ss.api.StringDistanceLearner;
8960	mean=1.0.
5249	parent,
872	"+wrongXj.getSource());
22017	MixupInterpreter(MixupProgram
7132	"[ReweightInstTranform
13051	-foo
2777	delta){
20250	TokenSetResult(extend(namex),fe,set);
21155	i=0;i<depth;i++)
9732	Paul
14772	transformednames
19854	instancetransformlearner
2980	gbc.weighty/=part;
21839	HashMap<Example[],String>();
10897	this.outputType="_predicted_"+spanType;
22834	margin=0.0;
12535	papers
10145	odds=new
18666	HashMap<String,Object>();
7298	learner){
4751	DFList=uniqueList(TFList);
9567	this(0.7);
2424	java.util.Comparator;
22478	classOfS=
18317	decrase,
2872	fpcolor
17577	mudelta
22503	20,
18076	Computing
5553	mapper.");
3252	edu.cmu.minorthird.text.learn.ClassifierAnnotator;
4819	idea
14546	nameMatch.asString().replaceAll("[\r\n\\s]+","
2481	key=i.next();
7496	kernel(Instance
21293	findsavedannotatorfromstream
16921	y==backgroundClass
15181	chisquareinstancetransform
8383	-loadFrom
17647	parameterization
18123	this.gamma.nextDouble(n,1.0);
12817	IllegalStateException("annotation
22990	deci
403	innerLearners,
12092	asserts
3203	history[k]
401	Create
15319	UITest(TrainExtractor.class,
21937	classes");
7025	getparentfile
256	Trains
7404	21,
2217	added=true;
16356	zneg.increment(vneg_t,1/(double)excount);
20628	featureToKeep
24057	log10(double
16293	System.err.println("Error
22698	"+(k+1)+"/"+s.getNumPartitions()+"
13638	w_pos
878	needs
374	innerLearners;
23813	1.0299016745145631E166,
23778	1.7112245242814127E98,
18772	BoxComponent(final
8331	binarylabel
9582	trainList.iterator();
796	independent
23012	DEFAULT_PATTERN
10444	yep
16655	[-"+methods[i].getName()+"
17168	profilesForPartition=new
12975	jlist,final
4448	DecisionTreeLearner()"}){
13579	HashSet<Example>();
21288	redirectionprops
16209	22,
16271	voted;//voted
3242	bestclassname
21512	Math.sqrt(2.0*Math.PI*variance);
5246	yet
23774	8.247650592082472E90,
13074	property/value
7359	"+args[0]);
6882	addButton=
8441	ViewerFrame(docId,new
9869	docID);
22694	"+splitter);
14298	documentMap.put(documentId,document);
8255	requireMyAnnotation(labels);
20031	result.last()
14568	i=nameList.iterator();i.hasNext();){
11553	edu.cmu.minorthird.classify.algorithms.knn;
18680	TypeSelector,
11	describes
20804	showData;
22544	id=((HasSubpopulationId)t).getSubpopulationId();
17666	//System.out.println(buf);
16926	classifier's
16064	buf.append(i.next()+"\n");
5565	child.documentSpan(parentEntry.dstDocId).charIndexSubSpan(
18583	Math.pow(mat[k][0]
4081	if(mixupProgramFile==null){
10129	bestWeight[i]=labels[i].bestWeight();
4486	Recommended.TokenFE(),
1405	"+dataDir+"
2345	classnotfoundexception
17476	getsubsamplefraction
13900	s,boolean
19566	"+bestWeight+"]";
10912	learner.addExample(ex);
8878	implementation,
8868	implementation.
16097	compactcandidatesegmentgroup
5527	need.
16863	(updatedViterbi)
20478	edu.cmu.minorthird.classify.algorithms.active;
18511	pos=0;
18476	Recommended.TokenFE();
17354	documentPool();
14573	transformDict(FreqAnal
17581	"delta",new
10378	trueBranch=batchTrain(trueData,depth+1,newUnusedFeatures);
16449	y_t
14790	finalsd
24378	matchingParentSpan.getTextToken(i);
19840	dataset=SampleDatasets.sampleData("toy",false);
2208	added=false;
10380	DecisionTree.InternalNode(bestFeature,bestThreshold,trueBranch,
17337	AnnotatorLearner",
18586	Math.pow(mat[k][1]
14365	java.io.OutputStreamWriter;
22572	file.getName().endsWith(".txt");
14896	MultiClass
18175	((MultinomialClassifier)mc).addValidLabel(ex.getLabel());
11612	classCounts.put(s,new
12769	TestMultiClassifier().callMain(args);
18052	cvsplittertest
14363	VanillaViewer(Object
23708	1L,
13830	learner1)
4729	frequency
2730	routine
8491	labelsKey
12582	iswhitespace
16079	splitter.split(groupList.iterator());
13453	it.next();
2308	addtotype
11427	dataset,boolean
593	u.setSuperView(this);
1616	"sequence",numberOfEpochs*dataset.numberOfSequences());
10298	bestFeature=f;
8207	String[0];
21996	savelinkinfosequence
23446	SampleDatasets.makeLogisticRegressionData(new
554	Explanation
18222	((MultinomialClassifier)mc).setFeatureModel(f,"Binomial");
15661	this.b=b;
12242	fin.readLine())
18589	Math.pow(mat[k][2]
19469	parts",viewerTracker2);
1194	sample
16074	shallowCopy(){
13814	export
7946	requirement
22049	You
17317	edit(MutableTextLabels
24047	2.9
9476	System.out.println("splitter
14099	horizontal_scrollbar_as_needed
22950	(tmp==0)?+1:tmp;
14103	pass2
14101	pass1
7270	"[Link:
673	java.io.Serializable;
1820	continue;
5138	{@link
24045	2.0
20537	memory
17492	setSubView(Viewer
24046	2.2
10564	validClassNameSet.add(newClassName);
6008	TextBaseViewer(TextBase
10420	neg,double
23531	actualTestError=Tester.errorRate(c,testSet);
11412	islabelfile
22998	com.wcohen.ss.api.StringDistance;
22768	documentPool(){
4684	color
6179	nullTruthType()?HiliteColors.yellow:HiliteColors.green;
24104	approximation
15933	getExplanation(Instance[]
3770	this.i=c.iterator();
21045	setlearnerinsequentialmode
222	forget
326	toinstanceiterator
14705	.addStatement("defTokenProp
8643	CharSequence
14205	testextractorparameters
21152	graphicCounter.setValue(stepsCompleted);
12426	lIndex
11021	CrossValSplitter.class,
6552	implementations
8851	ranges:
10522	testScript(){
12619	<b>However</b>,
15201	fixed
1052	edu.cmu.minorthird.text.learn.SampleClassificationProblem;
17302	init(base,viewLabels,statusMsg,editLabels,readOnly);
1300	sgmlExpected
19442	overlaps
15344	transforming
12909	(namedSubViews.get(ONLY_SUBVIEWER)).getVisibleContent();
18424	"[MistakeCountingOnlineLearner:
17081	folds){
14309	textTokens=getTokenArray(documentId);
9198	{//
4964	edu.cmu.minorthird.util.gui.ViewerControls;
9897	this.maxSegmentSize
9955	that's
15059	toytrain
14334	i=0;i<args.length;i++){
23353	i<testStrings.length;
11503	providedannotation
5622	dstDocId=did;
13620	smooth_param
3418	maxWindowSize,sequenceLength;
9347	getAggregators(){
23437	XValTest(10,1));
13102	args,int
21592	ioType
22664	somefile
5953	startfeatures
9526	argument:"+argument+
6812	(!format.equals(FORMAT_NAME))
12026	comment
23295	initthreads
12954	displayable.
16732	System.out.println("Your
12121	(short
13589	ordered;
9038	Table
15851	model.numStates();
513	String[]{learner,"class_"+className}),
15670	n+num-den;
6541	(classifier==null)
6918	docID){
6173	AttributeSet
17836	"Useful
22377	"Laura",
9711	published
5238	situation
11054	useGUI=true;
7028	completed
20605	getcompressdataset
7445	Hyperplane
2378	includeoffset
12600	longformsize
12363	2);
5446	newLevel,
11825	"etime",
21932	+"number
1882	lenStr=advance(tok,in,file);
9615	useSpanType=true;
18998	Object[]{null});
4683	JScrollPane(table);
3954	javax.swing.JFileChooser;
3905	extension
10154	sets.add(labels[i].possibleLabels());
17627	(Estimate[]
3986	textField.setText(selectedFile.getAbsolutePath());
1279	loadObject(script);
23254	traps
20602	TitledBorder("Segmenter
20436	spansetresult
15936	cmmClassifier.getExplanation(sequence).getTopNode();
23547	subsample
14250	unlabeled(){
5152	Map<String,TextBaseMapper>
679	described
7907	textBase.loadDocument("doc1",
22542	if(t
21901	if(s
15199	'split',
14641	uniqueSortedList(List<String>
19699	//ClassLabel
23864	4.789142901463393E273,
9539	if(o
14856	tempFile=File.createTempFile("SVMTest","classifier");
16520	FORMAT_NAME="Minorthird
11491	labels.addToType(newSpan,ann.getType());
22806	buf.append("\n\t"+getExample(f,j).toString());
15515	i=0;i<index;i++){
17546	//System.out.println("len="+wgt.length);
9968	previousClassMap(otherSegments,schema);
476	train
10319	posWeight=0,negWeight=0;
8204	useCharType=true;
13996	left=new
7927	"doc2"),
22238	trailing
7111	showclassifier
562	ComponentViewer()
16609	iax.printStackTrace();
13993	JScrollPane(ex.getExplanation());
19176	setDFraction(double
13352	2005",
12542	abbrevshort
1231	edu.cmu.minorthird.dataDir
228	hasnextquery
17742	i<K;
463	testData
19023	spinner
11445	if(c
17121	example=i.next();
1053	edu.cmu.minorthird.text.learn.SampleExtractionProblem;
9113	expon.
24024	if(j
15705	ContingencyTable(Long.parseLong(args[0]),
3644	contents=new
1975	recognized");
3270	getSaveParameters(){
13105	errorMessage
7009	readonlybutton
13551	delta);
10885	OnlineTextClassifierLearner,Serializable{
22725	evaluate(SequenceClassifierLearner
19507	negative,
16630	commands
18572	Z.nextInt();
6208	(Span.Looper
17559	i<N;
10048	othermap
13	learner's
21999	datasetfilename
20385	IllegalArgumentException("Error:
423	i=0;
8482	appropriately
20206	docSpan=s.documentSpan();
22007	MixupInterpreter{
17293	partitioncontaining
8262	if(useCompressedCharType){
23788	8.94618213078298E116,
19772	System.out.println("pred="+predictedClasses[ii]
15849	MTFeatureTypes(iitb.Model.FeatureGenImpl
20158	doTrace(){
19712	-2);
16337	pos_t.multiply(f,(1+example.getWeight(f))*(alpha));
22270	IllegalStateException("null
5112	controlledtextviewer
6429	getdocumentlist
15967	newusehighprecisionarithmetic
10707	.loadSerialized(new
14259	neg){
17954	FeatureBuffer(Span
13027	colindex
9385	System.out.println(data.getSchema());
14581	tn=tn.replaceAll(DIV,"");
2016	loadOps.
22002	java.util.Stack;
7341	learner);
4498	/*suite.addTest(
19378	fixes
2913	ControlledViewer(Viewer
6959	editedSpan
6326	spanIsDirty[i]=true;
10114	negative;
22305	getwordset
15448	testData=(RealRelationalDataset)s.getTest(k);
14072	jradiobutton
10682	getReduction(){
17223	if(requestMap.get(subpop1).equals(requestMap.get(subpop2)))
14620	ArrayList<Object>();
664	finalclassifier
966	subviewer
18049	"+span.getDocumentId()+"
4191	SaveTruthLabelsAction(String
10483	truebranch
10236	Vector<Feature>
5526	greater
14538	Working
9240	f(X)
21752	newValues;
1568	nulls
3544	newsubpopid
1050	java.util.regex.PatternSyntaxException;
1165	i=1;
20287	stringBag.add(i.next().asString());
2059	pc3=
18814	Object[]{title,editor});
17864	LABELFILE
14975	StringTokenizer(line,"
10063	"POS"
5161	place
9200	f(Y,
16666	delta=1;
8974	nextInt(double
3179	binaryFeatureIterator()
19354	getViewer(){
4119	.saveTypesAsOps(programLabels,new
19682	Feature("f4"),
2628	viewLabels,MutableTextLabels
10797	zoomedOut
22343	par;
22182	if("defDict".equals(keyword)){
14193	"taggerSignalParameters","mixupParameters","onlineSignalParameters",
14061	count=map.get(label);
1801	CLOSE_BY_OPERATION
10258	maxValue=val;
11523	IllegalArgumentException("-multiSpanProp
18478	fe.setTokenPropertyFeatures(tokPropFeats);
6707	j=tb.documentSpanIterator();j.hasNext();){
8089	bounds!");
2826	upbutton
7261	from,String
22027	executes
16549	semisupervisedactions
4787	Double
5062	colNames[0]="token";
11393	----------------------------------------
9397	realrelationaldataset
15735	testBasicFeatureIndexTest()
5560	null.
6335	focus){
17585	Estimate("Binomial","mu/delta",mudelta);
11214	null,
6741	add(resetButton,gbc);
21412	DefaultMutableTreeNode
9563	this.trainFraction=trainFraction;
18387	checkincreased
1094	null)
20461	null'
1475	executed
23409	LearnerTest("bayesExtreme",new
9088	critical
13865	easy
22380	indexViewer
21052	getshowtestdetails
7150	annotationType
18337	converged=true;
13948	if(!filterOnCorrectness&&!filterOnFeature){
299	null;
1827	StringTokenizer(line);
18849	PropertyEditor();
9727	(1988)
14238	facilitate
16111	CommandLineUtil.OnlineBaseParams();
13654	MultiLearner
63	previous
22949	tmp--;
23498	"+test[i].size()+"
8242	System.out.println("setting
19596	Relaxed
6030	truthBox.addItem(i.next());
5269	dest
3287	CommandLineProcessor
14830	super.checkClassify(new
13417	initializeMargins(rankedExamples,s);
2507	diff=c.score(instB)-c.score(instA);
1236	annotations
3097	part
6048	happens
9425	TrainTestExtractor
12636	parallelPane=new
19817	Constructors
5326	if(currSrcEntry.getLevel()>currDstEntry.getLevel()){
3992	//build
537	innerClassifiers,Classifier
14081	filteronfeaturebox
16755	accum.add("-"+option);
14720	TextLabelsLoader()).saveTypesAsOps(postLabels,new
14668	extracted");
18797	log.debug("pressed
20981	System.out.println("Warning:
15422	m[d]=new
5019	this.context=context;
3765	estSize=-1;
5388	(specified
8072	xp,
14850	SVMLearner
18080	Gamma
19589	testtextlabels
18929	PropertyEditor(){
9723	L'Ecuyer,
20735	vpos
22370	m.put("Cohen",
1630	innerClassifier;
14601	if(s.length==1){
20169	fe,SortedSet<T>
11368	(base
23141	df=1;
1437	text
4286	frame.getContentPane().add(debugger,BorderLayout.CENTER);
18430	reportmistakes
20526	SegmentAnnotatorLearner(){
1876	tok,LineNumberReader
17716	tauPost[i]
2118	xml
12211	Integer.toString(k));
12853	intended
435	innerClassifiers
20498	examples");
20047	reduce
18378	emconverged
8669	line.length();
5226	happen.
19517	ClassLabel(ExampleSchema.POS_CLASS_NAME,score);
19084	"+type+
8569	this.hmm
8628	input
8661	features_out.append("
19959	strata
9313	EXISTS
4907	log.info("splitting
22350	serialVersionUID=20071023L;
505	h++)
18914	modifiable,
13597	natural
903	CMM(c,
14949	Loss2:
8071	xr,
13858	javax.swing.JRadioButton;
17452	RandomSplitter<T>(random,subsampleFraction);
16669	delta=2;
6862	labelBox.setSelectedItem(label);
16652	System.out.print("
13098	consume
4452	e=(Evaluation)result;
7458	LinkedList<WeightedExample>();
20134	tracing
15454	p=c.classification(ex);
17332	train(AnnotatorLearner
7384	outputFile");
22119	newLabels.setProperty(matchingChildSpan.getTextToken(i),
15740	testbasicfeatureindextest
9181	squeeze-acceptance
9458	(signal.spanProp!=null
13380	HashMap<Feature,Set<Index>>();
21140	task,int
11075	null);
1702	plain
7617	splitter=new
16810	LeaveOneOutDictVersion(BatchSegmenterLearner
7711	if(x<0)
20538	usage.
12724	called\n");
19318	ishelp
16573	arg=args[pos];
7426	instancetransform
15132	availableFeatures.add((featValues.get(j)).feature);
16903	trace
21104	track
17746	tau[i]
6497	pane
17940	converter,
18854	isInLine(String
6296	log.debug("render
18186	numberOfFeatures=(index.numberOfFeatures());
16047	g.setSubsequence(0,1,factory.compress(example.asInstance()),example
4188	add(splitPane,gbc);
18894	"+url);
13789	ActionListener(){
8120	-ProbTauGivenSigmaX(tau,sig,vlow,vup,xr,xp,wr,wp,vbeta)
16280	Constructor:
12172	DELIMITER
15182	top_features
3919	getAssociatedIds(){
10625	setSequenceClassifierLearner(
22756	TextLabels).
7375	examine
10115	numeric
13568	null){
442	test
18196	probabilityOfOccurrence=
23901	<li>k==1<tt>:
13560	//update
12868	Map<String,Viewer>
12913	namedSubViews.get(ONLY_SUBVIEWER)!=null){
2224	curTag=sortedTags.remove(0);
19010	browseButton=
1885	lo=Integer.parseInt(loStr);
22250	"+statementType);
5618	did,int
20365	StringBagResult(extend("punk"),fe,punkBag);
1008	newhistorysize
9534	SmartVanillaViewer(Object
23885	Arithmetic()
15957	removelogspaceoption
13353	page
6075	add(editedOnlyCheckBox,gbc);
4579	segmentannotatorlearner
11986	fail("testLoadWordPerLineFile
16007	totalSize=0;
21857	IllegalArgumentException("no
3393	s1....sN.
7414	transform(Dataset
6476	closurespanlooper
19590	27,
8529	singleton
23220	mainThread=new
16491	"+p+"End]
18952	if(reader2!=null&&
1368	Span..."
49	prepare
21055	setshowdata
3731	getsystemclassloader
3486	(window[start][end-start-1]!=null)
20721	setscale
22971	numgivenpos
2855	addactionforkeystroke
9351	RealRelationalDataset.aggregators=aggregators;
4269	truthTypeSet.addAll(truthLabels.getTypes());
6378	spanMarkups[index]=new
22963	"+lpos_h.toString();
11039	testParams=p;
6807	statusMsg.display("Getting
21188	setstringpainted
3038	mc=(MyControls)c;
10913	Provide
4069	MixupDebugger(TextBase
13800	pair
3911	getAssociatedIds();
18041	'bar',
15503	values[index]=temval[i];
5701	docslooper
5677	finally
7794	isbinomial
11909	European
5946	prevpos
2406	startcomplabel
1558	spit
17254	System.out.println("data.size
14242	posTrain=SampleDatasets.posTrain;
20186	s.add(f.apply(i.next()));
20202	s.documentSpan().subSpan(s.documentSpanStartIndex()+s.size(),
17710	[,tail:iter]
9226	Math.log(W)/ll);
1277	Object
6196	truthType:
21775	"[AugmentedInstance:
4716	29,
4701	addsubview
23822	2.2311927486598138E184,
16099	shallowcopy
3139	edu.cmu.minorthird.classify.MutableInstance;
7133	"+reweighter+"]";
16069	Collections.shuffle(groupList,r);
4040	setvisible
17930	CommandLineProcessor[]{cp1,cp2});
24059	0.43429448190325176
4647	return(o
8534	computeconfidence
16896	g.getSequenceLength();
6655	ioTypeLabel;
847	phi(viterbi,j)
3598	"encapsulated".
798	attach
16093	getfeaturefactory
19870	return(d==null?defaultWeight:d.doubleValue());
15033	atof(String
12786	token,String
10752	base.getTokenizer();
1173	File(props.getProperty(SCRIPTDIR_PROP));
8337	edu.cmu.minorthird.text.AbstractAnnotator;
22780	24,
1344	log.info("Expected
7167	token-classification
8596	(plog
17303	editLabels,boolean
8545	newannotatorfile
11719	assertEquals(6,
2063	prop=i.next();
185	little
19794	beamSize="+beamSize),
4420	pack
8460	startIndex=extractedSpan.documentSpanStartIndex();
18973	log.debug("reader:
18318	though
23184	Console(Object
20630	//System.out.println("Filter
15273	"[MyBC
20533	dataset.setDataCompression(compressDataset);
3890	node){
11488	ann=annotations[i];
5627	res=srcOffset-o.srcOffset;
2194	proper
6329	Component
8280	annotation.
19134	JLabel("No
7096	if(test.showTestDetails){
11706	assertEquals(7,
12256	shortForm,
9225	(int)(1.0
11118	annotateData((MultiClassifier)c,
15457	LinksMap=
22491	span,spanProp);
21765	this.newValues[i]=newVals[i];
20212	other=i.next();
12406	shortForm;
1926	IllegalArgumentException(msg);
8152	apps
23605	estimatedProb(ngp,numPos/c.getScale(),featurePrior,1.0/c.getScale());
11282	multiclassifieddataset
17125	subpopulationId");
20095	<code>fe.from(s).tokens(s).eq().emit()</code>
15465	LinksMap,
9676	begincontinueoutsidereduction
3051	JTextField
6665	ocdEditor;
5906	doTrain(allocModel(dataset));
14158	if("minorthird".equals(output.format)){
11635	i=0;i<schema.getNumberOfClasses();i++){
13306	TransformingClassifier(classifiers[i],transformer);
7957	assertEquals(8,
10884	OnlineBinaryTextClassifierLearner
188	object
11363	tempLabels
19922	filter.setNumberOfFeatures(10);
8037	Minorthird
10839	zoomedout
15970	datasequencec
3989	sendSignal(OBJECT_SELECTED,selectedFile);
17401	checkStats(double[]
3745	msgpat
4817	HashSet<String>(list));
696	protected
1654	binaryclassifier
7896	newPattern
14970	sumv=0,sumy=0,sumvv=0,sumyy=0,sumvy=0;
4770	array[3]);
17191	IllegalArgumentException(msg+"
6460	spanprecision
4710	IntelliJ
13021	onlysubviewer
23237	((Console.Task)task).doMain();
18538	inputLabel
4367	getclass
11956	Wigan
20571	segmenter=learner.batchTrain(dataset);
5248	happed,
3426	totalSize;
1383	error
14443	software_view
20323	bag){
20342	tr(String
16143	onlinelearner
7902	assertEquals(9,
12820	setProperty(Span
6024	'truth'
21149	time=System.currentTimeMillis();
15975	datasize
5966	dotrain
12104	versions
11417	ClassifierTeacher{
4728	term
16603	Object[]{args[pos+1]});
19158	y,int
5638	mercer
15992	cmmclassifier
23659	4.629153749334029e-03,
23011	2004.
3552	2004,
17249	"+k+":");
15573	setuselogisticonconfidences
1888	if(span==null){
21746	spanhi
20976	MultiTestParams(){
13106	usage().
21661	"+exportType+"
18211	//System.out.println("feature="+f+"
17606	lambda
16854	SegmentCollinsPerceptronLearner()
19227	beans
3825	TrieMatch(List<String>
7476	log.debug("update:
4315	usage();
7513	z){
23748	2.0397882081197447E46,
3878	trie.
8459	predictedLabels){
16241	trick
19941	Random(),folds);
3487	Example(window[start][end-start-1],
11319	annotateddataset
21610	add(upButton,gbc);
247	2003,
11917	SCOTLAND
17454	testIt=new
5040	labels.getSpansWithProperty(prop,span.getDocumentId());j.hasNext();){
20012	overloaded
4756	getLabels(){
23589	isPos=ex.getLabel().isPositive();
1782	<code>closeAllType
9349	setAggregators(Map<String,Set<String>>
5706	parentlabels
9686	basetag
11093	(testParams.testData==null)
18832	name=classes[classes.length-1];
3935	trienode
17719	estimateMean(sig);
19527	ExampleSchema.POS_CLASS_NAME.equals(this.bestLabel);
5027	textPane.setEditable(false);
17500	add(statusField,gbc);
800	'update'
2422	2006,
5220	Sometimes
14251	pos=SampleDatasets.posTest;
670	edu.cmu.minorthird.util.*;
21495	cacheFilled
20945	MultiTestParams();
82	made
1662	getnumberofclasses
16313	//example
13652	spanfe
6134	truthBox,
15362	params;
22110	SpanTypeTokenizer(pattern,parentLabels);
1105	(IOException
9627	id=doc.getDocumentId();
5187	textbases.
10960	binarytextclassifier
18367	cllassindex
14007	dataViewer.setSuperView(this,"data");
21872	Objects.
616	experiments
6148	DecimalFormat
12768	MultiClassifiedDataset(multiClassifier,d);
3656	usually
1900	shortcut:
4348	usage(){
4262	truthBox;
15529	params,
8639	patternStr,
22830	2005.
11940	47-47
13777	diffing
7681	extractorannotator
19763	constrainedPrediction
10873	StyleConstants.setForeground(cursorColor,
13859	javax.swing.ScrollPaneConstants;
20502	#"+i+":\n"+committee[i]);
4653	JLabel("Class
2598	SpanDocument
8062	2005)
17059	WebmasterSplitter<T>
22156	statement){
22354	"+s+"
1545	including
5052	String[propSet.size()]);
19259	seperately
17002	this.maxSegSize
19012	returnVal=chooser.showOpenDialog(null);
2360	getdetails
17760	(tauSigEstimateVec[0].getPms().get("sigma")
15931	(cmmClassifier==null)
5981	to-";
22120	"Pseudotoken","1");
1887	span=base.documentSpan(id);
23523	this.allowedVariance=allowedVariance;
14074	abstracttablemodel
21247	lead
17586	estimateNegativeBinomialMuDelta(
10479	leaf
20268	stringBag.add("#tokens_"+s.size());
13959	pass2=true;
11298	seqtrainparams
12798	instanceIterator(String
4816	ArrayList<String>(new
14444	lbjpostagger
24116	stirlingCorrection(int
9916	Hyperplane[schema.getNumberOfClasses()];
16906	t<seqLen+1;
17880	log=Logger.getLogger(JointCommandLineProcessor.class);
16983	System.out.println("t.y\tf(t,y)\tt'.y'\tspan");
2722	processing
4577	spanf1
10272	i=0;i<featureCount&&i<unusedFeatures.size();i++){
5587	Between
20545	<br>learning
16502	unlabeledExamples.add(factory.compress(instance));
18965	JButton("?");
10228	threshold(double)]
19035	.doubleValue(),0,100,0.05));
2971	"+loc+":
234	label
2861	display
5166	indicating
20422	requiredannotationfiletoload
7396	buildframe
9507	settrainingparameters
10605	BatchSequenceClassifierLearner
4351	<truthLabels>
6910	table[i][0]=spanProps[i];
20520	edu.cmu.minorthird.classify.sequential.Segmentation;
3877	Pretty-print
501	String
8367	</pre></code>
11639	tot+=d;
11371	fileName
3882	b.toString();
75	active
13837	if(innerLearner!=
92	make
10099	isBinary(){
345	Stacked
21674	spanHi="+spanHi);
5095	sv=new
12161	LONG_FORM_PROP
30	ClassifierLearner
22811	posCounts:"+getCounts(f,"POS")+"
10333	if((negWeight==0)||(posWeight==0)||unusedFeatures.size()==0){
20040	Store
16264	alpha;//promotion
21546	rankingMap.get(subpop);
21048	setlearner
24005	polynomial.
22537	LeaveOneOutSplitter(){
693	2002.
21903	(TreeSet<T>)s;
17821	sigmasd
14364	VanillaViewer(){
19477	labeler.setSaveAs(file);
24392	parentTokenizer.splitIntoTokens(document);
10163	if(bestClassName()==null)
24389	TextToken[0]);
20822	trainDataFilename=null;
21796	"+f+"="+aug.getWeight(f));
17730	K-1];
14746	mail
7843	"Mary,
3962	chooser=new
16328	if((voted)){
6143	guessBox,JComboBox
16102	simpledatasetviewer
15359	log=Logger.getLogger(StackedGraphicalLearner.class);
10805	log=Logger.getLogger(ZoomedViewer.class);
12168	truePositives
20275	"+set+"]";
10078	routine.
23030	distances[i].length;
9789	getSeed()
961	main
6350	m=i.next();
22207	input=null;
11397	fileName)
1315	expected
18210	(feature,class)
12538	ariel
23807	9.426890448883248E153,
11387	fileName,
9403	addaggregator
3730	classloader
10116	numericLabel(){
1322	regex:
207	java
9898	setInnerLearner(OnlineClassifierLearner
4236	NestedTextLabels(
8410	sequenceAnnotator.getSpanType();
1788	performed.
11361	load(File
23283	getLabels();
67	unlabeled
17487	MessageViewer(Object
11904	Portugal
16726	family(){
13387	score/prob.
2837	nullspan
6550	semisupervisedbatchclassifierlearner
21405	VanillaViewer();
17177	ArrayList<T>());
20542	compressDataset=flag;
10351	Sorry
3752	'Looper'
13976	actual,
7385	sampletextbases
19502	score)
15848	stateId;
23275	bar.setValue(bar.getMaximum());
368	Logger.getLogger(StackedLearner.class);
5030	controls=(MarkupControls)viewerControls;
19900	IllegalStateException("ERROR
10322	negWeight+=example.getWeight();
7721	report
10084	score.
19577	score0
15871	stateId,
19256	fullname
16084	dbGui=new
18974	"+reader.getName());
3056	add(ucBox);
2502	Collections.sort(data,new
21950	SequenceAnnotatorLearner.prepareSequenceData(base.labels,
13319	score=
22800	total;
16468	score;
23711	24L,
22166	type=statement.getType();
24106	(series
2853	getkeymap
24121	stirlingCorrection[k];
14198	inlineselectabletypes
14549	labels.addToType(nameMatch,predType+"_updated");
7285	edu.cmu.minorthird.text.SampleTextBases;
5362	newLevelName){
15850	numStates
2155	LabelInfo(s,type,start,end));
14690	if(args[i].equals("-spanType")){
3243	addbinary
15502	if(Agr.equals("COUNT"))
8633	regexp
8681	[a-z]
5102	ControlledTextViewer(subspan);
13280	left'
17897	somethingConsumed=true;
8185	from(s).tokens().emit();
21611	add(downButton,gbc);
12693	x_0
19250	configfilename
16340	if(pos_t.featureScore(f)>W_MIN)
23230	'labels'
1895	if(confidence!=null)
17593	System.out.println("["+str+"]");
22424	super("BayesClassifiersTest");
19414	<code>span.documentSpan().subSpan(
692	EMNLP
23878	4.2690680090047056E304,
1817	docList=new
2639	this.documentList=documentList;
6483	setfixedcellwidth
15371	adjust
1842	Span
14835	//0-6
8716	theCount++;
5432	newDocText=currInstance.asString();
18395	MistakeCountingOnlineLearner()
1063	defining
12105	factory.
12857	ONLY_SUBVIEWER="*main*";
2290	fileoutputstream
15719	getchisquared
15087	acordingly
23957	smallest
17009	SmartVanillaViewer(vs.c);
22563	document-by-document,
2623	statusMsg
22352	(String)o;
17491	setSubView(subViewer);
21995	linkfilename
7551	"+useBudget+";"+minimalMargin+"]";
14604	array=transform(s,order);
9352	Iterator<Example>
23543	xvaltest
11836	Hall
16015	factory;
9559	RandomSplitter(Random
8325	commaseparatedtokenpropertylist
13840	(innerLearner.get(i));
22033	eval.");
4312	<textBaseFile>}
18887	fileMgr.getDeclaredMethod("openURL",new
3039	uc=mc.ucBox.isSelected();
938	ClassLabel();
20443	mapfunction
3556	contains
6765	inType,String
5570	if(child.getDocument(childSpan.getDocumentId())==null)
967	s_t[i].toGUI()
8272	"+tokenPropertyFeatures[j]);
16030	groupList.add(group);
22010	levelsToLabelsMap=
4741	this.spanType=spanType;
20619	log=Logger.getLogger(PoissonLearner.class);
3292	experiment
3988	action
21979	lineNo)+
7347	saveFile=null;
14035	evalViewer.setSuperView(this,"evaluation");
16878	classifier.update(
23166	JTextArea
17775	wgt.length;
16934	InstanceFromSequence(segmentInstance,history);
20266	two-token
22317	getregex
3046	receiveContent(lastObj);
8174	edu.cmu.minorthird.classify.SampleDatasets;
6070	JLabel("W:"),gbc);
19615	numActiveFeatures;//number
14592	transformName(String
22364	Map<String,String[]>
10698	TitledBorder("Sequence
11212	console
13670	System.err.println("Must
20480	forming
11656	bw=b.getWeight(f);
10643	seqLearner.setSchema(schema);
13531	itIndex.next();
4344	TextBaseLoader(TextBaseLoader.DOC_PER_FILE,false);
16711	ha!";
9111	scale
1718	DONT_CLOSE_TYPES=3;
3662	log.info("Looking
14393	tagger=new
22408	wakako
5444	newEntryName,TextBase
3054	JCheckBox("uc");
15527	StackedGraphicalClassifier(Classifier[]
3614	this(true,path);
2222	docPos=0,pos=0;
17555	Estimate("Binomial","p/N",pn);
15010	((total*sumvv-sumv*sumv)*(total*sumyy-sumy*sumy))+"
10863	StyleConstants.setForeground(blue,
11851	"BOXING
20785	showResult=false;
16894	model")
12533	biotext
12541	short_form_type
20431	pipeline'
14737	NameMatcher.postLabels.closureIterator(spanType));
14237	batchtrainbinary
14761	namelist
934	s_t[i].increment(
17297	SpanEditor
15055	positive_infinity
4719	10:14:58
4250	oldTypes=new
1151	"+props.getProperty(SCRIPTDIR_PROP));
2877	unknown_pos
21409	if(top
503	h=0;
10056	MultiClassLabels
13916	dc=(DataControls)controls;
16513	examples.iterator();
1576	edu.cmu.minorthird.classify.Example;
8332	extractinstance
13348	Parsing.
17368	DEFAULT_LEARNER
12331	ss.hi--;
18760	instanceMap.put(shortenedClassName(subClass),subClass.newInstance());
17707	0.95;
4297	groundTruthLabelsFile=null;
11740	Statistics
4231	MixupProgram(mixupFile);
16302	this.beta=beta;
17322	<data>
4296	fileName=null;
23233	window.\n");
8014	splittokenizer
4117	interp.eval(programLabels);
4963	edu.cmu.minorthird.util.gui.ControlledViewer;
19	communicate
13984	getColumnName(int
23342	['Announce']
18725	log.error("No
110	boolean
3063	"[uc:
10189	positivelabel
6661	textLearner=null;
14526	System.out.println(++counter+".
15832	ClassLabel[sequence.length];
11165	(!useGUI)
20827	clsLnr=
17335	documentPool()
20889	clsLnr;
21973	lineNo++;
13042	x.foo("bar"),
23064	yneg
16788	atwhat
8594	max,
11534	cvd=null;
2927	if(controls.prefersToBeResized()){
21856	labelSeq[place.index];
14368	LBJ2.nlp.WordSplitter;
461	innerClassifiers[i]
8056	max)
13234	specify
7064	ViewLabels();
281	dataset.multiIterator();
1823	#"+in.getLineNumber()+":
2741	for(SpanDifference.Looper
3415	subsequences:
5486	child2:0,
5044	tokenized
13000	visualize
8212	this.windowSize=windowSize;
17503	subViewer.clearContent();
20905	if(multi<0)
20829	ClassifyCommandLineUtil.Learner
16298	Possible
8961	Poisson(double
10848	javax.swing.text.StyleConstants;
6829	ext=".ann";
24325	stirling
15002	log.debug("Mean
9874	tokenizes
3823	endIds;
3736	written
24150	doublefactorials
3325	cv.setContent(classifier);
5636	tokenizer
4740	spanType){
6615	subspan.getRightBoundary().compareTo(rightBoundary)<=0
8597	(qlog
11037	setTestParameters(ClassifyCommandLineUtil.TestParams
8131	2*Arithmetic.logGamma(b1+b2*sig);
18493	learnerName){
11036	testParams;
6630	math
8299	bag_of_words
19041	Double(d)});
549	explain(Instance
22045	eval(){
18966	if(reader!=null&&writer!=null){
18898	browsers=
11422	'pulled'
10257	if(val>maxValue)
10685	j=0;j<s.size();j++){
19821	model){
2050	doc=s.documentSpan();
15455	rlt.put(ex.getExampleID(),p);
15592	egid
9540	Visible){
18393	numExamples;
15243	result[i]
7136	reweightinginstancetransform
4056	edu.cmu.minorthird.text.MonotonicTextLabels;
11770	THE
17849	perform
19481	textbaseeditorpluslabeler
13942	scrollpane=new
4993	MyViewer();
17886	helpConsumed=false;
19863	add(T
21687	if(editSpanCursor>=0){
16887	y=0
16891	y=1
10746	span.getDocumentId());
21797	i=aug.featureIterator();i.hasNext();){
1726	Set
12068	coruna
5182	parentName
1413	"+f.getAbsolutePath());
1295	File(script
2436	presented
9516	ComponentViewer(){
21485	shared
21734	enabled
20393	uwBag=new
9488	train.output
8567	HMMAlgo(HMM
15775	//option
16707	mother="hamster";
12670	canrecieve
12046	farro
5572	childHi=childSpan.getTextToken(childSpan.size()-1).getHi();
6694	tbViewer,
2573	Tracks
6553	enables
5469	this.childToParentMap=new
18332	"+previousLoglik+
951	Explanation");
23520	allowedVariance){
12652	parallelPane.add(title,view);
6732	------------------//
21553	highestNegativeIndex
10180	labelString;
2670	'save'
9345	legal
5903	CRFSegmentDataIter(dataset);
12067	deportivo
18539	-split
6885	editLabels.setProperty(span,propField.getText(),valField
12795	prop,String
5189	parentName,String
6620	badlocationexception
5179	child
352	Neural
15616	loadFileData();
21306	log=Logger.getLogger(TrainTestClassifier.class);
22324	offlevel
16853	this.updatedViterbi=updatedViterbi;}
14272	administrative
24056	<tt>log<sub>10</sub>value</tt>.
22096	placed
15986	wwc
5585	System.out.println("***
21093	Indicates
16208	Sep
1306	Pattern.compile(pattern).matcher(script).matches();
7652	System.out.println("\n"+tag+":");
17516	Estimate
23551	allowedvariance
22052	place,
21958	saveLinkInfoSequence(new
22691	stacked)
95	pool.
18926	//whether
8040	See
23738	8.841761993739701E30,
23672	logFactorial(...)
8798	lineprocessingutil
23504	if(subsample){
15323	TrainTestClassifier
18114	*seed
15528	m,StackingParams
21081	multiit
21348	argv[]){
12867	viewers.
9798	k,iz;
7848	grow?"};
11882	FIRST
21246	ann=findNativeAnnotatorFromString(source);
12842	'content'.
6265	spans;
8175	Some
15391	cross-validation
14600	Object[0];
19067	selector.name=name==null?pname:name+"."+pname;
18219	((MultinomialClassifier)mc).setFeatureGivenClassParameter(f,j,
11832	"1:30
2351	stringbuffer
13499	1.0]"))
4836	setlabels
4721	Richard
2213	tag=(TagInfo)sortedTags.get(y);
2191	spans,
8059	Dirichlet-Poisson
6027	truthBox.addItem(NULL_TRUTH_ENTRY);
19300	konqueror
19686	pa.addExample(ex);
1707	spans.
13898	allButton=addButton("all",true,group);
1076	SCRIPTDIR_PROP
5834	segLengths[segmentStart]
14528	i=highRiskNameList.iterator();i.hasNext();)
16016	getMaxWindowSize(){
3058	JTextField("the
15479	ngbs
10652	reduction,annotationType);
12445	longFormSize,
5411	many
2470	map;
8074	wp,
9879	edu.cmu.minorthird.classify.OnlineClassifierLearner;
10394	wnj
20309	targetValue
2209	while(sortedLabels.size()>0){
10493	wp0
11924	INTERNATIONAL
2531	map1
10492	wp1
11667	approaches
23819	1.5882455415227423E178,
5234	map,
9639	tokenProp;
17752	tauSigEstimateVec,
14415	found!");
12244	abbrString
22810	buf.append("\n\t"+"feature:"+f+"
13185	findSpans(TextLabels
13119	<code>x.getCLP().processArgs(ags).</code>
9707	translation
3059	man:
19458	viewer.getDocumentList().addListSelectionListener(viewerTracker);
18530	v=null;
16742	CommandLineProcessor.Configurable){
5904	Segmenter
18933	warning=warn;
21769	.numericFeatureIterator());
19191	setInner(AbstractSample
12781	UnsupportedOperationException("no
8113	//System.out.println("p(cand|s,x)="+ProbTauGivenSigmaX(candidate,sig,vlow,vup,xr,xp,wr,wp,vbeta)+"
15241	OnlineClassifierLearner[n];
15351	predictedclasstransform
1224	data.properties,
16315	feautures
19286	openurl
12481	bestLongForm.asString());
10289	.size());
16986	trace[t][y];
10058	(approximately)
2576	documentList
1682	java.io.ObjectOutputStream;
22611	File[]
7983	merrily
1971	already
7968	suite()
9829	phys
16338	if(neg_t.featureScore(f)>W_MIN)
1109	data.properties:
24358	this.levelName
12473	bestLongForm.asString()))
8277	from(s).left().token(-i-1).eq().charTypes().emit();
19885	InstanceTransformLearner
17955	this(null,span);
14229	ExampleSchema.BINARY_EXAMPLE_SCHEMA;
16098	shuffle
4027	openfile
11292	classify'
350	(1992),
21476	Math.
17198	"+req+
19909	ct.getCompensatedPMutualInfo(count(a));
10494	wn1
8588	exp(d))
10495	wn0
5871	labelNames,
279	Collections.<MultiExample>emptySet().iterator();
19708	pa.addExample(ex2);
6013	initializeLayout(String
6299	spans[i].asString());
16193	"[KnnLearner
3083	splitpane
2389	createxmlmarkup
17936	subclasses.
19303	netscape
12353	Math.max(currSentence.lastIndexOf(".
17890	skip
15877	labelNames)
13147	SGMExample(Instance
181	addExample()
13591	Index(int
20927	typeString="seq";
5654	there's
17523	sumWgt
18400	this(innerLearner,true);
3385	detail:
15674	if(a==0)
20748	if(s.startsWith("sample:"))
19393	subSpan(int
6270	spansWithDocumentMap;
2160	Sort
9523	c=componentFor(content);
16059	result.iterator();
4098	labelsLoader
3459	setSubsequence(int
7984	dream
8279	pre-loads
22253	"+((end-start)/1000.0)+"
23121	low-frequency
22465	mark
10765	emails
14763	deleted
14308	comes
1490	loadobject
2702	editedDoc=new
2394	getdocumentcontents
479	learner");
21745	spanlo
11646	sim){
11808	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2674_0"));
3810	Efficient
19901	i=index.featureIterator();
21892	o,int
7975	mary
10570	validClassNames[i];
12876	setContent(content);
3490	getSubsequenceLabel(int
3855	node=node.map.get(span.getToken(start+depth).getValue());
9008	theMean;
18249	Example.Looper(
5089	[@location]
4871	(lc.endsWith("s"))
17409	if(referenceStats!=null){
13305	tc[i]=new
16920	maxSegSizeForY
12521	TN:
3074	controls
21713	legit
15474	values=new
13664	MaxEntLearner());
4255	"+t);
5344	currMapper=srcIterator.next();
2359	details
20142	Result(String[]
18352	mitchell
8645	tmpstr.subSequence(0,
495	newInstance
20668	numNeg+=wgtTot;
23027	StringDistance[schema.getNumberOfClasses()][0];
20456	map_
2500	BinaryClassifier
1813	in=new
8268	i=0;i<windowSize;i++){
18699	this.advancedParams.addAll(Arrays.asList(advancedParams));
13631	best_w0
21688	span=getEditSpan(editSpanCursor);
22498	tag=i.next();
19200	getZ(){
13100	consumed.
8975	theMean)
3042	.println("recieving:
17097	profileMap.put(f[0],f[3]);
16917	lastY=0;
5261	srcName+"
5244	maps
511	newInstance.addNumeric(
20653	double[JPos];
20252	eq(){
23114	numDocuments;
15549	"sorry,
2726	special
8606	Math.exp(diff)));
3045	prefix="+prefix);
14827	1.3132616875183545,
8073	wr,
10391	wpj
24001	polynomials,
90	need
20781	showTestDetails;
3737	findclassresource
8541	neg'
4587	testrunner
258	using
14597	result.add(str);
19616	voted;
6171	neg,
22668	listfiles
14340	documentmap
6677	saveAnnButton=new
22905	coef=1.0-(posFactor/total);
6084	top-level
14044	Feature){
18193	//System.out.println("classes="+numberOfClasses+"
16828	leaveoneoutdicttransformlearner
21572	ihighestnegativeindex
8672	i<linelength;
18396	//this(new
3756	<code>public
22145	instances=oldLabels.instanceIterator(oldType);
2636	list");
18098	FUNCTION:
2438	ordinary
1388	/*catch
22832	pos_t,numGivenPos,numGivenNeg;//positive
6015	documentList=new
1016	progresscounter
19108	helpString+"<br>Your
10578	for(String
23537	learnertest
5422	docNum++;
1389	(java.text.ParseException
7655	propValues=new
6632	conhi
16790	setlaff
16319	pos_t.increment(f,2.0);//initialize
9369	RealRelationalDataset();
9604	are:
21565	s.increment(
21101	setGraphicContext(JProgressBar[]
17113	"+fileName+"
6988	ocdeditor
23620	c.incrementBias(+estimatedProb(numPos,numPos+numNeg,0.5,1.0,LOG));
14992	sumy+=target;
19028	.intValue(),-1,100,1));
11324	classifierfile
12252	definitions.put(abbrString,
21193	ClassLoader,
3497	subPopId;
15718	contingencytable
3755	method:
11926	BELGRADE
20204	SpanResult(extend("right"),fe,rSpan);
14038	Feature);
8825	this.confidence
4998	SpanDocument(span,contextWidth);
483	"+finalClassifier);
20734	vneg
200	method.
11888	division
8382	sample1.test
21402	Tree
19007	panel.add(textField,gbc(1,row));
193	method,
21697	viewer.setContent(span);
6866	.display("In
9388	i=data.examples.iterator();i.hasNext();){
18734	log.error("Exception
2698	this.contextWidth=contextWidth;
6434	displaytype
17524	maxCnt=0;
12516	extractAbbrev.truePositives
1990	ObjectInputStream(new
19549	otherLabel)
3664	"+fileName);
119	hasNextQuery()
2305	max_warnings
8364	labels.getDetails(s,crAnn.getSpanType());
15086	loss2
9506	gettrainingparameters
18152	Thrun
13848	ClassLabel.negativeLabel(-1.0);
10923	classLabel=textLabels.hasType(docSpan,spanType)?+1:-1;
16039	want/need
18907	web
8468	constrained
16200	documentSpanLooper.
4036	fire
19624	voted)
17578	mudelta.put(
15809	this.removeLogSpaceOption();
18807	//editor.setWarning();
22674	edu.cmu.minorthird.classify.StackedDatasetClassifierTeacher;
15824	init(Example[]
6384	spanIsDirty[j]=true;
6919	i=0;i<editedSpans.size();i++){
11454	loss:
11668	categorization
84	methods
4424	argp
6700	tb=editLabels.getTextBase();
11274	DataClassificationTask().callMain(args);
648	getsplitter
7717	logistic(double
19604	Aggressive
14161	TextLabelsLoader().saveTypesAsStrings(annotatedLabels,
1528	args
1365	001.txt
20286	TokenSetResult(extend("tokens"),fe,accum);
8512	seqAnn=
23770	5.075802138772246E83,
18524	toShow=args[pos++];
16970	this.t=t;
15485	operation--a
14118	CommandLineUtil.MixupParams
17835	wgt
19557	ClassLabel.
9991	Build
23036	(StringDistanceLearner)distances[i][d]
14183	/*package*/class
20055	SpanFE.STORE_AS_COUNTS,
5829	y){
22671	dirname
15149	compare(Pair
9846	wh_
23940	factorial((int)k);
6158	precision:
22973	lossh
12856	log=Logger.getLogger(Viewer.class);
22974	lossf
16574	if(arg.startsWith("--")){
15271	Visible)?((Visible)b.c).toGUI():new
15085	precision2
3140	edu.cmu.minorthird.util.UnionIterator;
1442	patternsyntaxexception
22041	level).
12502	(args[i].equals("-testlist"))
7498	x2){
5559	approptiate
14468	precision.
17441	SubsamplingCrossValSplitter(){
18611	java.util.Arrays;
17373	precision,
22154	level's
12196	near
911	numClasses;
19090	log.debug("null
16913	-Double.MAX_VALUE;
3115	argv
8009	newdoc0
23988	(-1,
8010	newdoc1
8011	newdoc2
8012	newdoc3
2142	documentId,TextLabels
6629	conlo
9780	Date()</CODE>
11097	SequenceDataset)))
3091	setrightcomponent
9068	reflection
17085	loadFile(String
1190	"sampleK.test"
11311	gettestparamshelp
14027	split.setLeftComponent(left);
6517	edu.cmu.minorthird.classify.ClassifierLearner;
15525	StackedGraphicalClassifier
6691	ArrayList<JButton>();
19466	tabbed=new
4002	if(selectedFile!=null)
9085	Ds);
416	throw
14704	;");
3956	area
19489	ClassLabels
18121	/(1.0
15886	style
572	JPanel();
22311	starttype
17052	profileId
14406	http://cogcomp.cs.illinois.edu/page/software_view/3";
2391	formed
22334	gettrie
756	sequenceErrors
24128	StirlingCorrection
19490	WeightedSet<String>
16425	hypothesis
7108	gettestclassifierhelp
7970	Run
8147	rwshadow
12915	signalling
5215	textBaseMappers.put(childName,mapper);
13823	ManyVsRest,
16474	five
15352	trainmulticlassifier
23092	ViewerFrame("Output
1642	buf.append("Classifier
8614	edu.cmu.minorthird.text.*;
9260	win
22790	size=0;
6226	this.sizeDelta=sizeDelta;
10422	wij
3693	message
3885	level){
9308	edu.cmu.minorthird.util.Saveable;
7477	y*s
20687	estimateNegBinMOME(double[]
16679	property){
22188	"+wordSet);
21894	Integer(numCopies));
19322	selecteditem
9341	why
4035	settext
14795	edu.cmu.minorthird.classify.algorithms.svm.SVMClassifier;
19606	ROMMA).
11819	"paragraph"));
18735	"+filename+":
12044	paragraph
20197	left(){
21841	i=sequenceDataset.sequenceIterator();
1119	SCRIPTDIR_PROP,
14831	SVMLearner(),trainData,testData,expect);
22150	.getCurrentLevel());
5699	newtextbase
3761	AbstractLooper<T>
15960	maxiters
14053	examples:");
19554	(isBinary())
2179	if((curLabel.start>compLabel.start&&curLabel.start<compLabel.end)&&
11494	labels.setProperty(newSpan.getToken(j),ann.getType(),"1");
13633	cur_w_pos
8917	only)
19690	hp.toString());
11069	CommandLineProcessor[]
4591	javax.swing.JLabel;
18886	openURL=
23226	.append("\nYou
22745	e.getLabel()))
13315	classifiers=getClassifiers();
7324	viewer,MutableTextLabels
13358	cont.
2414	isopentag
12099	creating
4842	ispredictedname
3478	!subPopId.equals(newSubpopId))
18875	hyperlinkUpdate(HyperlinkEvent
11833	p.m.",
10353	falseData=(List<Example>)result[3];
23043	DictionaryTransform.getFeatureValue(ex,featurePattern);
5014	EmptyLabels(),span,DEFAULT_CONTEXT);
23170	doMainRunning;
21528	annals
7501	result+=x1.getWeight(f)*x2.getWeight(f);
7972	args[])
8517	saveFile+":
5601	currDocMapings=parentToChildMap.get(currKey);
6177	nullTruthType()?HiliteColors.yellow:HiliteColors.blue;
13233	caller
3472	different
16375	incoming
9520	creation
5848	=dataset.candidateSegmentGroupIterator();
6537	answeredQuery)
17490	subViewer){
17209	k1=0;k1<folds;k1++){
1307	log.info("Pattern
18384	recipes
3923	span.subSpan(match.start,match.length);
9631	useSpanType?spanType:taggedLabels.getProperty(span,spanProp);
22786	non-zero
17071	requestMap=new
20849	multi(String
14398	SentenceSplitter(input)));
8829	detailed
14234	(BinaryClassifier)getClassifier();
1785	closed
21633	keymap.addActionForKeyStroke(KeyStroke.getKeyStroke("TAB"),nextButton
11219	AbstractAction("Start
17539	25.0,Math.pow(mean,2)/(mean-var)
22098	similar
15486	type=iter.next();
12228	(Character.isUpperCase(str.charAt(i)))
22836	lossH,lossF;
13069	<p>The
22058	this.evaluate(statementList[i]);
3612	EncapsulatingAnnotatorLoader(String
11672	getneighbors
5478	Say
2205	label=sortedLabels.get(i);
23188	this.viewButton=vb;
17554	Double(N)
15545	AugmentEx=
6656	editSpanCursor=-1;
16940	(segmentScore
1571	subsets
4418	windowevent
19903	index.size(f,ExampleSchema.NEG_CLASS_NAME);
7015	editdocument
1792	POLICY
3733	pathseparator
22914	if((example.getLabel().isNegative())&&
12122	forms)
23712	120L,
11460	[classifierFile]");
4894	saveTrainPartitions)
22650	ld.reLabelText();
8101	Metropolis
10887	spanType,outputType;
24048	</code><dt>
18541	all|eval");
6324	.setBorder(BorderFactory.createLineBorder(Color.black));
5575	childLo);
15350	TrainMultiClassifier().callMain(args);
5397	filter(String
4640	main;
923	w_t
11308	usegui
3174	getSubpopulationId()
21461	sqrt(2pi*v)|
14107	getmultiexample
5080	MixupProgram(new
4633	TransformedViewer(new
7909	textBase.loadDocument("doc3",
12614	non-default
19142	"+o+":
10955	hastype
12070	portugal
22569	TEXT_FILE_FILTER=new
15398	CrossValSplitter<Example>(newCrossValSplits);
12586	openparenindex
8315	getfeaturewindowsize
19144	scroller=new
4975	this.textViewer=new
7304	editLabels,String
20962	loadFromFilename;
16026	"+group.getMaxWindowSize());
18351	thrun
5146	Quinten
20122	emit(result.tokens());
4182	Dimension(100,50));
20447	contains_
118	called
9740	DEFSEED2=67890;
8537	seqclassifier
3154	(k+1)
5841	CRFSegmentDataIter(SegmentDataset
1369	TextLabelsLoader().closeLabels((MutableTextLabels)labels,TextLabelsLoader.CLOSE_ALL_TYPES);
16323	pos_t.score(example.asInstance())-neg_t.score(example.asInstance())-
1870	closeLabels(labels.getTypes(),labels,span);
23221	Thread(){
1666	way
21120	this.task=task;
22590	MyCLP();
21762	i=0;i<newFeatureNames.length;i++){
7842	dream.",
1536	was
1523	getcurrentlabels
14762	risk
10806	DEBUG=log.isDebugEnabled();
20528	Recommended.MultitokenSpanFE());
23105	extractedtype
16543	.conciseExampleRendererComponent(tmp[index],60,sel);
16420	driven
8319	setusechartype
12415	openParenIndex)
15419	level",
4375	labelsloader
14894	Remove
12338	openParenIndex,
23087	editorOutputLabels.declareType(edit.trueType);
1272	(f.exists()
19193	this.inner=inner;
20419	store_compactly
19410	subtly
15990	histfeatures
23289	poout
541	classification(Instance
16095	mismatched
5443	TextBaseEntry(String
20649	JPos=index.size("POS");
20622	NegativeBinomialLearner(){
5360	newTokenizer,
23069	edit=new
22160	labels=this.getCurrentLabels();
4514	e.spanF1(),
4510	0.88,
22303	getignorecase
18549	gettokpropfeats
5281	Extract
3298	IllegalArgumentException("-learner
12801	getTypes()
4469	"-labels","cspace.1f3","-spanType","NotCmt","-test","cspace.2f2",
9804	k=iseed2/52774;
23509	Set<Instance>
19350	log=Logger.getLogger(this.getClass().getName());
19301	epiphany
14085	allbutton
8893	Technical
7351	log.info("Sample
970	classPanel.add(
14045	dc=(DataControls)dataViewer.getControls();
5287	.charIndexSubSpan(parentOffset,parentOffset+length);
8311	windowsize
6899	pane.add("Properties",subpanel);
11293	selectable_types
2756	TextLabelsLoader().saveTypesAsOps(editLabels,saveAsFile);
9463	//if
5756	SegmentCRFLearner()
5235	forward
18459	SequenceAnnotatorExpt{
14507	templates.
24305	chebyshev
431	BasicDataset
6427	guessbox
18486	getInputLabel(){
3902	buf.append("\t"+node);
4254	System.out.println("checking
7706	function.
13312	buf.append("classification
8205	useCompressedCharType=true;
14666	from");
22233	if(statementType==Statement.REGEX){
1420	File(labelDir));
36	constraints
302	copyright
20454	newset
357	241-259,
10907	s=looper.next();
10939	candidateLooper=labels.getTextBase().documentSpanIterator();
2688	loadSpan(s);
7156	Recommended.TokenFE(),new
10251	maxValue=Double.MIN_VALUE;
10510	seminar-subset
6163	renderer=(SpanRenderer)documentList.getCellRenderer();
6368	decode
10934	Erases
8501	System.out.println("confidence="+d.getConfidence()+"
3168	previousLabels[i]})
24019	return(
6847	coming
3224	"cool"
15113	numFeatures=100
14929	return.
10577	isValid(ClassLabel
22710	d,Splitter<MultiExample>
18825	property:
9245	(Math.log(W)
13152	this.exampleId=exampleId;
5408	next
14521	i.next());
23815	1.1462805637347086E170,
21477	Statist.
20845	System.out.println("WARN:
11737	Three
18438	JList(indexFor(o));
11148	"+testParams.saveAs);
23200	}catch(java.io.IOException
18828	//final
13401	//Put
15580	newstackingdepth
12201	longSpan
15647	Given
3353	getsaveparameters
19807	resposible
8984	employed:
18261	numberOfExamples=(combinedDataset.size());
23648	1.189670994589177e-02,
24332	DatasetSemiSupervisedClassifierTeacher
4140	refreshButton=
12041	news
1853	closeType");
22191	this.createLevel(type,split,patt);
17469	subsamplefraction
4432	LongTestPackage(String
18253	//el
1393	log.error("no
14812	url=this.getClass().getClassLoader().getResource(trainFile);
4833	uniquelist
10579	l:label.possibleLabels()){
24092	rr*C7)));
5679	srcspan
16129	OnlineBinaryTextClassifierLearner(
4513	0.83,
9530	representation,
545	score(Instance
14000	dataViewer=
382	inner
7553	listiterator
8165	vup
17816	totalcounts
4949	"Overall
9178	candidate
1007	sethistorysize
16369	this.lpos_h=pos_h;
5692	getmappedparentspan
6093	i=labels.instanceIterator(displayType);
1812	LineNumberReader
11614	tot+=w;
24361	tbMan.getTextBase(parentLevelName).getTokenizer();
2512	scores
3001	argument,List<Viewer>
20920	this.crossDim=cross;
1695	importOps)
8140	-ProbSigmaGivenTauX(sig,tau,vlow,vup,xr,xp,wr,wp,vbeta)
23339	vp:t
8455	computeConfidence(SequenceClassifier
17129	if(userId==null){
19092	wholePanel.add(panel,gbc(1,row));
14708	[@_prediction]
22906	if(posFactor
15128	maxIndex=Math.min(featValues.size(),TOP_FEATURES);
20805	setShowData(boolean
15187	val_comparator
13145	Instance,Visible,Serializable{
8513	(SequenceAnnotatorLearner.SequenceAnnotator)ann;
19179	flag;
12180	flag,
13918	filterOnCorrectness=true;
2577	TextBaseViewer.
18077	223--246.
5384	newMapper.mapPlace(currDocSpan.getDocumentId(),0,currDocSpan
13020	getsubviewnames
9032	Uniform
23717	3628800L,
2353	size
12989	rowIndex=jtable.rowAtPoint(e.getPoint());
13239	examples.add(factory.compressSGM(example));
7575	wxcontribution
21070	getdatasetfilenamehelp
15259	BinaryClassifier[learners.length];
10294	if(i_gain>bestEntropy){
22227	labels.defineTrie(phraseList);
15073	summarystatistics
5082	entity:time
2499	sortByScore(final
18471	this.inputLabel=inputLabel;
22143	oldLabels=levelsToLabelsMap.get(importLevel);
13995	dataViewer;
19939	StratifiedCrossValSplitter(Random
15428	"+(d+1),new
5070	IdViewer(TextLabels
666	result
23496	assertTrue(!train[i].contains(inst));
14137	IllegalArgumentException("need
22153	Statement
18697	inLineClasses=null;
15757	"ll");
13981	if(col==1)
917	flag)
9353	iterator(){
1807	if(base==null)
20029	only.
8351	(like
20210	SortedSet<Span>
17383	only:
16862	voted-perceptron",
10196	multiclasslabel
22508	fidx
19148	//wholePanel.setBorder(new
9297	functions
15641	Chi-Squared,
11932	Red
10528	testdirwithnofile
4988	ControlledTextViewer(Span
9626	assignDefaultLabels(doc,taggedLabels,spanType,spanProp);
5114	contextslider
947	buf.append("\n");
7330	EditTypeAction
20387	StringBagResult(extend("stopwords-"+action),fe,swBag);
12673	getcontent
14691	spanType=args[i+1];
20579	maxWindowSize,String
23557	Pr(f|class)*Pr(class)
14080	datacontrols
13978	if(col==0)
12296	this.mySubstring
8605	Math.log(1
20710	Double(m));
14982	j=0;j<m;j++){
12317	substring(int
23302	elapsedtime
5108	textviewer
18228	for(Iterator<Instance>
16428	neg_t
4167	gbc.gridy=row;
2897	nextcursor
1693	operations
3670	ByteArrayInputStream(contents);
8007	basicspan
13578	Set<Example>
5824	segmentStart)
5620	srcDocId=sid;
11423	via
5827	segmentStart,
22956	lneg_h;
20848	simple");
4601	GUI{
17739	ReparametrizeLambdas2TauSig(Estimate[]
10297	bestFalseData=falseData;
23395	edu.cmu.minorthird.classify.algorithms.linear.KernelVotedPerceptron;
5515	getParentMapping(String
3545	grouping
19714	Example(instance3,
1822	log.debug("read
1205	file
9759	iseed1=s1;
21139	graphicCounter=null;
22073	onLevel(String
14808	super.setCheckStandards(false);
4179	bottom.add(statusMsg,gbc);
23721	87178291200L,
20791	showResult(){
1038	DATA_DIR
13430	A_Pos,
4421	textbaseid
15621	loader.setFirstWordIsDocumentId(true);
22490	spanType!=null?ExampleSchema.POS_CLASS_NAME:taggedLabels.getProperty(
9473	trainTest.splitter
17639	double[
5830	segmentStart;
16830	featurepattern
15913	toMinorthirdClassifier()
2219	markedup
16989	(bp==null)
21243	ann=findSavedAnnotatorFromStream(source,findFileResource(source));
14986	x[j].value=atof(st.nextToken());
16703	-mom
235	query
12148	11/04
4298	mixupProgramFile=null;
7974	sampledocs
23106	gnu.trove.TObjectDoubleHashMap;
8817	author;
1361	trying
13008	set_content
19696	Example(instance1,
13433	A_Pos:
14990	error+=(v-target)*(v-target);
13322	top.add(score);
1499	compile
10525	TestSuite(FancyLoaderTest.class);
9461	//no
16988	g.getSubsequenceExample(bp.lastT,bp.t);
9817	doubles
18820	info=Introspector.getBeanInfo(o.getClass());
5655	parentlevel
21385	giving
17283	usersplitter
23663	3.787618068444430e-03,
2138	well-formed
4669	tableData=new
19397	thisspan.
18437	jList
14178	getannotatoroutputparams
2273	boundaries.put(s,(ops=new
11353	setgraphiccontext
16730	father=s;
19706	Example(instance2,
19880	map.toString();
1738	importOps.
1708	CLOSE_ALL_TYPES=1;
465	log.info("transforming
23972	polynomials
22970	regretwinnow
3582	//ClassLoader.getSystemClassLoader().loadClass(className);
14286	super(new
23632	//.out.println("psudoCounts:"
6907	spanProps=editLabels.getSpanProperties().toArray();
5974	java.awt.Component;
7241	StatusMessagePanel(JComponent
19716	pa.addExample(ex3);
15234	edu.cmu.minorthird.classify.OneVsAllClassifier;
10246	silly
19089	"+value.getClass());
9601	three
14361	representation.
8560	match(Feature
120	returns
16325	//winnow
24053	log(double
13863	edu.cmu.minorthird.util.gui.VanillaViewer;
1998	"+file+
902	work
20299	property.
19847	filter.setNumberOfFeatures(2);
18015	base.loadDocument("b1","Mud
21127	synchronized(graphicContext){
6076	ContextWidthSlider(documentList),gbc);
18558	10000.0;
9206	k4+1)*[0,
22870	numGivenPos=new
15039	svmclassifier
17039	property,
21790	vals[i]=i+1;
5346	if(matchingSpan==null)
10950	onlinedocument_
5505	childEntry=new
339	edu.cmu.minorthird.classify.algorithms.trees.AdaBoost;
4083	program
18913	GUI.
23720	6227020800L,
8224	word
2788	nextCursor=currentCursor+delta;
20875	type.showData=this.showData;
15745	crfModel;
7071	viewlabelsparams
22231	while(output.hasNext()){
19057	"+value.getClass()+"
7703	utilities.
2078	Linefeeds
6627	leftboundary
9851	contained
1425	v!=null
16367	neg_h,double
13630	brute
627	vol
277	examplePool(){
7737	sum+=d;
9635	contTag=baseTag+"Continue";
19516	score");
19412	getDocumentContents();
9790	iseed1*(long)
22972	numgivenneg
3891	return;
6359	Highlight
21439	representations
7038	tablescroller
8746	fine
1345	find
24344	2007,
14913	(SVMClassifier)(new
13059	CommandLineProcessors,
19312	booleanvalue
14577	j=transformedNames.iterator();j.hasNext();){
21617	saveAsFile
6144	documentList){
6250	Comparable<SpanMarkup>{
1124	fill
18922	double,
12931	propogare
8830	details'
17703	sig[it-1];
13258	if(linksMap.get(from).containsKey(type)){
1329	baseDir.isDirectory())
10184	details;
10776	//in
3370	toseqdataset
15684	//it
8502	if(args.length!=2){
10130	bestWeight;
20898	experiment,
15118	ChiSquareInstanceTransform(int
1872	line:
12265	line;
15855	numStates)
17751	ReparametrizeTauSig2Lambdas(Estimate[]
373	BatchClassifierLearner[]
23835	2.3721732428800483E211,
7708	x){
10572	getClassIndex(String
14766	float
23338	[a(companyWord)]
15847	numStates;
13366	incorporate
3460	end,Instance
10133	posWeight[i]=labels[i].getWeight(ExampleSchema.POS_CLASS_NAME);
4822	time
2752	actionPerformed(ActionEvent
12605	javax.swing.SwingConstants;
13958	.isCorrect(e.getMultiLabel());
19363	Dimension(200,50));
956	hyp.add(explanation);
15490	//every
14840	//13
9728	742
13699	addMultiExample(MultiExample
9695	makepattern
23727	2432902008176640000L
18988	theBox.addItem("-choose
15166	getTopFeatures(int
21364	getOffset()
10079	numericLabel()
13501	expLoss(double[][]
9431	CommandLineUtil.SplitterParams();
21019	Simple/Standard
18852	PropertyEditor(true,true);
3121	prefix
8267	from(s).tokens().prop(tokenPropertyFeatures[j]).emit();
8322	setusecompressedchartype
1339	lines
6735	-------------------//
20232	"+lo+",
4053	edu.cmu.minorthird.text.BasicTextLabels;
12922	"+signal+","+argument);
23008	Conditional
24137	x);
4675	tableData[k][1]=new
21290	findannotator
19539	wset.getWeight(label,-Double.MAX_VALUE);
8060	(Airoldi,
2674	setSaveAs(File
6643	tologicalcharindex
13192	Details(prediction));
7257	Link{
8479	sequenceAnnotator.explainAnnotation(labels,documentSpan);
21699	edit",viewer);
13592	this.j=j;
13576	orderExamplesList(List<Example>
7201	tok=document.getToken(i);
18634	setter
3499	classNameSet()
12431	(((lIndex
22753	traintestsplitter
3356	setsignalparameters
9876	setdocumentgroupid
12279	EMPTY
22117	tbManager.getMatchingSpan(currInstance,currentLevel,newLevelName);
13562	A_Pos
3705	log.info("calling
11774	REMIND
23225	if(!((Console.Task)task).getLabels()){
17823	mcmc
17304	createSpanEditor(viewLabels,editLabels,statusMsg);
10559	newValidClassNames[]=new
20800	getShowTestDetails(){
1253	SampleExtractionProblem.trainLabels();
23224	Console.Task){
16727	mom(String
24123	x),
12446	shortFormSize;
5683	getdocument
8667	line)
8922	double[36];
1112	line,
2077	line.
21885	count=map.get(o);
8723	line1
11640	i=classCounts.keySet().iterator();i.hasNext();){
21583	DeleteCursoredSpan("Delete"));
17964	getdocumentgroupid
12328	ss.lo++;
13163	"+asInstance().toString()+"]";
5087	[@speaker]
8312	usechartype
18593	vec
8725	line2
9273	transactions
23625	k,double
20762	"':\n"+e);
4530	m.callMain(args);
11492	labels.setProperty(newSpan,ann.getType(),"1");
2508	cmp=diff>0?+1:(diff<0?-1:0);
18739	instance=((Class<?>)validSubclasses.get(i)).newInstance();
20683	mudeltaNeg=estimateNegBinMOME(vNeg,wgtNeg,featurePrior);
22130	//only
13801	getColoredProperties(){
19563	wset.add(
5534	parentEntry=curr;
12192	doc.charIndexSubSpan(shortForm.lo,
22239	//Matcher
23919	<li>k==1
23917	<li>k==0
22358	JTextArea(s.toUpperCase());
21167	"+step+"(s)
11156	saveAs(File
22176	startType=statement.getStartType();
13096	processArguments(String[]
6746	editorHolder
906	serialVersionUID
18991	theBox.addItem(allowedValues[j]);
3223	"dweeb","cool",
4146	newTypeButton=
21698	ViewerFrame("Span
5066	span's
24089	r*(C1
9284	constructs
15131	j=0;j<maxIndex;j++){
20132	span);
23318	eLUMINANT",
11030	ClassifyCommandLineUtil.TestParams
2751	super(s);
20620	LOG=true;
12687	probabilities.
8173	bounds
8316	chartypepattern
14915	.train(l));
13476	probabilities,
7016	adddocuments
6623	contextspan
3477	(subPopId!=null
16695	file");
2373	val
12904	setContent().
22359	van
13011	names'
17531	var
22928	localF-(beta2*localH);
5846	startScan()
9978	!otherMap.get(seg).equals(previousClass)))
21164	format.format((time-startTime)/1000.0)+"
6437	createemptyborder
7243	add(component,gbc);
212	author
10760	validdocumentspans
17330	AnnotationExample's
18669	typeSelector
4317	if("-textBase".equals(args[argp])){
6922	if(eSpan.id==docID&&eSpan.added){
20561	len=1;len<=maxWindowSize;len++){
22089	Allowed
3793	estimatedsize
5977	javax.swing.ListCellRenderer;
18405	numExamples
3874	if(node.endIds==null)
1019	classlabel
23428	AdaBoost(new
16776	getmethods
11342	showlabelsbutton
11592	sim=computeSimilarity(instance,e);
7164	SequenceDataset();
8913	RandomElement();
16734	"+mother+
23710	6L,
15206	testIterator){
1259	SampleExtractionProblem.taggerTestLabels();
3617	names.
12717	names,
13815	getspandifference
21080	settestsetfilename
17556	estimateBinomialMuDelta(
12806	getDetails(Span
22880	fmap.put(f,mylist);
14567	tokenizer=new
6513	newfont
21723	importguessspans
10311	log.info("built
19239	hyperlinklistener
17711	/*double[]
1766	given
3741	byte
11386	load(String
12243	str.indexOf(DELIMITER);
18373	previousloglik
15305	0.75,
1482	testlabels
2113	named:
23076	getEditLabelsHelp(){
12992	colIndex){
1777	Lines
11112	(testParams.typeString.equals("multi"))
15153	if(ig1.value>ig2.value)
7370	checkReadOnly(String[]
13702	innerLearner.get(i).addExample(examples[i]);
15558	s.m[k];
7224	gettaggingreduction
5009	add(contextSlider);
2579	ListSelectionListener{
12311	mySubstring.indexOf(s);
2226	if(curTag.isOpenTag)
12829	istype
21578	ImportGuessSpans("Import"));
10672	fe,String
10967	edu.cmu.minorthird.classify.algorithms.knn.KnnLearner;
16779	auto
6545	batchTrain(SemiSupervisedDataset
14249	makeLabels(SampleDatasets.posTest,SampleDatasets.negTest);
8118	tau,p2,"TRUE"));
23367	getGuessLabels()
9199	return(Y);
13357	Requires
22833	bigger
6581	rightBoundary=contextSpan.getRightBoundary();
20815	"Open
1880	id=advance(tok,in,file);
24042	doubleFactorials[k-length1];
2844	setsaveas
11666	statistical
9098	r(k)
6872	MoveOnlineDocumentCursor(String
4670	Object[numRows][2];
3936	endids
6272	Font
12230	inFile)
20209	contains(String
18969	primitive
669	edu.cmu.minorthird.classify.algorithms.linear.Hyperplane;
6823	SaveAnnotator(String
8278	from(s).right().token(i).eq().charTypes().emit();
2912	super();
22344	jlist;
19373	StatusMessagePanel(this,this.statusMsg);
11313	guiparams
2683	ListSelectionListener,
20991	Line.
6471	green
8440	sequenceAnnotator.doAnnotate(tmpLabels);
11569	1(1/2),
24083	-2.77777777777777778e-03;
2584	links
15671	Math.exp(tmp);
10040	correctsegments
7327	OnlineClassifierDocumentEditor(learner,viewLabels,viewer,
12765	SmartVanillaViewer(multiClassifier));
24340	instancePool()
15213	iteratortolist
7083	HREF=\"http://minorthird.sourceforge.net/tutorials/TestClassifier%20Tutorial.htm\">TestClassifier
8795	vitor
7978	eeny
17655	::");
16050	addCandidateSegmentGroup(g);
15397	this.splitter=new
2504	compare(Example
8766	aux)
5757	this("");
244	method
10827	zoomedOut!=null&&zoomedOut.canReceive(content);
975	reset()
9638	getTokenProp(){
15789	defaults.getProperty("maxIters");
6931	alread
1336	catch(Exception
18246	previousLogLik=logLik;
10085	classLabel.isPositive(),
8378	edu.cmu.minorthird.text.learn.ConfidenceReportingSequenceAnnotator
10300	Double(bestThreshold),bestTrueData,
5502	childOffset));
21085	sequencesplitter
20514	committeesize
2092	'));
7615	partition...");
21989	related
15520	SGMExample(stackedInstance,ex.getLabel(),ex.getExampleID());
6301	SpanDocument(spans[i],contextWidth);
2490	negExamples.add(exi);
6153	sr=spanDifference.spanRecall()*100;
10594	train(SemiSupervisedClassifierLearner
12657	current.
17070	request
13640	exploss
9398	corerelationaldataset
154	useful
2804	jtextcomponent
4350	-truth
20648	JNeg=index.size("NEG");
3277	setSignalParameters(CommandLineUtil.ClassificationSignalParams
12325	StringSpan(base,lo,hi);
23680	4.78749174278204599,
22366	m.put("Hurst",
20729	numneg
6096	truthType=NULL_TRUTH_ENTRY;
18331	decreased
2162	sortedLabels=
23291	readerthread
10720	newdisplaydatasetbeforelearning
10005	previousSeg==null
9621	spanProp){
17214	if(testList.get(k1).get(j1)==testList.get(k2).get(j2)){
16028	groupList.add(new
17077	testList[k]
24372	(matchingParentSpan
22471	this.mc=mc;
12920	log.debug("signal
4224	this.initProgramLabels=initProgramLabels;
15313	"-splitter","k8"})
4723	<rcwang@cmu.edu>
20141	Result{
17921	cp1=new
19033	if(type.equals(double.class)&&pname.indexOf("Fraction")>=0){
18419	innerLearner.getSchema();
17981	Results
14111	dataviewer
3955	panel
12077	scotland
19398	charIndexSubSpan(int
20458	filteredset
5012	context=DEFAULT_CONTEXT;
21956	ViewerFrame("Dataset",dataset.toGUI());
7218	annotatorlearner
8814	DEFAULT
3189	(history.contains(f))
1547	subset
10266	featureCount=1;
12345	'"+currSentence.asString()+"'");
22682	edu.cmu.minorthird.classify.sequential.DatasetSequenceClassifierTeacher;
4597	GUI's
17552	Double(p)
15261	MyBinaryClassifier(learners[i].getClassifier());
7316	.addActionListener(
417	IllegalStateException("multiple
3084	vertical_split
9937	"+accumPos[k]);
4596	building
2965	if(loc==ViewerControls.RIGHT){
18660	inLineClasses=new
349	D.H.
17870	gives
18764	validSubclasses.remove(shortenedClassName(subClass));
23269	System.out.println(e.getMessage());
17086	constraintFileName){
21832	instanceToPlace
19935	Splitter<Example>{
6031	displayedTypeBox=new
18681	inherited
4921	trainData);
3517	buf.append(";"+label[lo][len-1]);
3853	TrieMatch(node.endIds,start,depth));
1309	+(sgmlExpected?"does":"does
16588	result=m.invoke(this,new
17822	numiterations
20517	edu.cmu.minorthird.classify.sequential.MutableCandidateSegmentGroup;
21102	graphicContext=context;
4354	System.out.println("
3816	TrieNode{
4068	getEditor(){
21401	Result.
4680	JTable
4183	bottom.setMinimumSize(new
19603	46(1-3):361-387,2002.
4368	geteditor
6469	yellow
10540	checks
23741	2.6313083693369355E35,
8896	Austria.
6947	eSpan=(editedSpans.get(j));
17701	//System.out.println("sig:
16911	-99999;
10373	log.debug("didn't
13209	spanfinder
12568	isletter
4473	.addTest(new
2622	elements
8654	featureName
20746	multi){
4628	main=new
12990	sendSignal(OBJECT_SELECTED,transformer.transform(jtable.getModel()
16875	classifier,ExampleSchema
1690	contents
2287	bufferedoutputstream
12076	attendance
16357	MyClassifier(zpos,zneg,theta);
19235	jspinner
6902	pane;
19608	optionally
1226	variables
14351	SimpleRandomSplitter<T>
11883	DIVISION
16997	Segmenter,Visible,Serializable
14518	nameList.iterator();
13164	exmapleid
21408	getTopNode()
5065	JTable(table,colNames));
3872	node=kid;
216	cloneable
15361	StackingParams
5532	parentEntry
17580	Double(m)
16360	voted="+voted;
18260	5.2.1.
93	use
6419	listcellrenderer
715	newNumberOfEpochs)
6867	MOVEDOCCURSOI:
2887	statechanged
12254	System.out.println(str);
8864	synchronized.
18658	validSubclasses=new
242	immutable
4967	framework.
3456	element,
13184	TreeMap<Span,Details>();
22831	RegretWinnow
13846	possibleLabels.contains(schema.getClassName(i));
6696	spanPainter,
17994	GUI_OP=[true|false]");
12661	subviewer;
4484	SequenceAnnotatorLearner(new
6247	Documents.
20302	if(value!=null){
17537	Math.max(
11172	we'll
13095	bar</code>
10440	alexander
21010	System.out.println("Defining
10741	while(documentSpanIterator.hasNext()){
13244	'to',
2591	spanPainter;
23927	factorial(..)
12593	extractabbrpair
14235	getbinaryclassifier
16344	}else{//no
4884	Logger.getLogger(CrossValidatedSequenceDataset.class);
15245	result[i].reset();
14408	<input_file>
3178	instance.numericFeatureIterator();
17676	buf.append("sigma="+sig[(it-1)]);
18189	examplesGivenClass[classIndex]+=1.0;
3037	MyControls
13411	j<exampleSize;j++)
21367	getType()
21868	instancetoplace
22695	(RealRelationalDataset)s.getTrain(k);
8457	sequence,Span
23024	trainDistances(ExampleSchema
12291	StringSpan(StringSpan
16739	[-scoff
397	AdaBoost
16382	lpos_h
14921	Precision:
8196	makeExtractionFE(
19962	starts.
10419	entropy(double
17427	subsampleFraction;
2102	saveDocsWithEmbeddedTypes(TextLabels
20001	'emit'.
13450	it=ex.binaryFeatureIterator();
4130	saveButton=
6191	nullLooper=new
21615	saveButton:
18264	5.2.2.
10961	tells
6183	update...
6648	OnlineLearning
15634	setfirstwordisdocumentid
15021	System.err.print("usage:
15477	if(LinksMap.containsKey(egID)){
15037	uri
18238	logLik=Double.NEGATIVE_INFINITY;
15038	url
716	newNumberOfEpochs;
9667	p=tokenProp+":"+baseTag;
2614	modified
7606	extractionEval=new
18888	openURL.invoke(null,new
10855	StyleConstants.setForeground(gray,
3786	looper'
6710	editedSpans.add(new
17389	v.averagePrecision();
10748	True
7601	if(test.showExtractor){
12360	//Do
19449	spanLabeler;
11812	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2811_0"));
4104	errorString="no
23974	x/2.
6319	JTextPane(spanDocs[i]);
12626	canRecieve
24388	tokens.toArray(new
16006	classNameSet=new
3117	mycontrols
18313	estimation
17377	testData,double[]
16582	m=getClass().getMethod(arg,new
21172	graphicCounter.setIndeterminate(false);
18474	TextLabelsAnnotatorTeacher(labels,inputLabel);
13653	edu.cmu.minorthird.classify.ClassifierLearnerFactory;
23568	+mu(-)
16960	bp.lastY;
5421	if(curDocId.equals(prevDocId))
16301	1)||(beta<0)||(beta>1)");
19510	(score>=0?multiPosLabel(name,
4893	splitter,boolean
3263	CommandLineUtil.ClassificationSignalParams
8326	setting
16197	subspans
8789	labelLoaderVitor.importOps((MutableTextLabels)lala,
19290	getruntime
12374	currSentence.substring(openParenIndex
11506	edu.cmu.minorthird.classify.multi.MultiCrossValidatedDataset;
986	serializable
16460	"OnlineDocument_";
14487	NameMatcher(){
7644	measurePrecisionRecall(String
17072	profile
23549	totaltest
10694	"[SequenceAnnotator
18431	getnumberofmistakes
482	log.info("result
17327	edu.cmu.minorthird.text.learn.AnnotatorLearner;
11634	tot=0;
5949	numlabels
18662	advancedParams=new
22476	getMultiSpanProperty(){
16216	Tasks:
20448	subspan_
10216	Try:
11951	English
15563	baselearner
3626	unit
7605	annFullLabels=ann.annotatedCopy(base.labels);
6943	editLabels.addToType(eSpan.s,eSpan.label);
10009	previousClassName);
6016	JList();
14186	bunches
11090	ex.getWeight());
19295	unix
19189	getInner(){
711	this.history
10814	super(zoomedOut,zoomedIn);
18224	assign
17015	completeupdate
21456	(x-mean)
11875	Guzman
10388	totalPos,double
21882	SortedMap<T,Integer>
7252	'type'
12145	Ariel
19118	JButton("advanced
7131	reweighter.reweight(f,instance)
14591	deletedNameList=uniqueSortedList(deletedNameList);
10498	w11
10871	Color.red);
10499	w10
6213	ii=labels.closureIterator(truthType,documentId);
11842	"12:00
10976	edu.cmu.minorthird.classify.multi.MultiClassifier;
19931	separately,
13494	w0;
2427	edu.cmu.minorthird.classify.BatchBinaryClassifierLearner;
16128	textLearner=
17446	getSubsampleFraction(){
12518	extractAbbrev.falsePositives
1027	we're
5913	featureGen.mapStatesToLabels(seq);
12203	longForm.hi);
6047	highlighting
5431	prevDocId=curDocId;
5294	srcSpan
6295	i=0;i<spans.length;i++){
9096	recurrence
3821	Trie
7637	va.setContent(annFullLabels);
24027	IllegalArgumentException("Overflow");
2899	java.awt.GridBagConstraints;
21518	warranty
4380	getviewertracker
7613	if(doSplit){
17635	ProbabilityFactory();
12834	java.awt.event.MouseEvent;
378	Use
12742	nbatch
20529	SegmentAnnotatorLearner(BatchSegmenterLearner
16674	propertyValue("foo")
22728	(SemiSupervisedDataset)s.getTrain(k);
1510	labelfile
19491	wset=new
14701	email:t
6675	classifierButton=new
13025	getelementat
4455	"-labels","cspace.1f3","-spanType","NotReq","-test","cspace.2f2",
2700	span){
10308	dataset,Vector<Feature>
11081	md.multiIterator();
1623	ClassLabel.binaryLabel(1.0)
9074	0.25);
10051	getclassname
18642	<code>validSubclasses</code>
23541	sparsenum
14018	explanationViewer=new
4944	cds[k];
3967	openFile=true;
3838	List<TrieMatch>
4261	JComboBox
6800	tbViewer.highlightAction.paintDocument(null);
20118	emit(TokenSetResult
17567	(sumWgt
10500	w01
10501	w00
11983	"I-ORG"));
20753	if(multi>1)
18672	rootClass){
13496	w0,
22286	leveltype
11558	distance-weighted
19836	System.out.println("warning:
12084	russia
2304	closurepolicy
2626	messages.
24099	k");
3358	setadditionalparameters
17582	Double(d)
5197	if(textBases.get(childName)!=null)
12001	l.next();
7724	statistics.
9334	L_type){
5542	if(childDocMap==null)
11615	if(DEBUG){
16748	eqPos=line.indexOf('=');
14437	plaintotokenparser
20516	edu.cmu.minorthird.classify.sequential.BatchSegmenterLearner;
6122	if(documentList==null)
18768	componentFor(final
22298	getkeyword
14433	lbj2
11278	knnlearner
3199	fillHistory(String[]
10790	radar
14617	s,int[][]
9689	gettoken
21911	specialized
480	finalClassifier
23444	lr=new
22291	newspan
19337	initLayout
9457	IllegalArgumentException("one
12659	subviewer=super.getNamedSubView(name);
11972	base.getDocument("eng.base-102").getText());
11616	log.debug("neighbor:
23449	error=Tester.errorRate(c,data);
8677	punctCount/(double)linelength;
20241	namex;
5090	freeText:true
22713	cross)
8421	tmpLabels=null;
22232	extendLabels(labels,output.next(),statement);
22689	learner,RealRelationalDataset
2014	format
2468	ArrayList<Example>()));
2937	splitPane.setResizeWeight(0.10);
19138	"[Reminder:
8769	BufferedWriter(new
20383	isAbsent=false;
3647	fileNameToContentsMap.put(file.getName(),contents);
10097	numDimensions(){
14215	signalparameters
14160	if("strings".equals(output.format)){
6285	spanDocs=new
7833	"Row,
11438	hiding
2022	labels","type",labels.getTypes().size());
21294	findnativeannotatorfromstring
6490	indexofspanmap
4123	errorPane=new
6993	addselection
12906	content;
17310	editLabels,StatusMessage
10820	content:
15171	highest
5547	childEntry=curr;
11847	File(testCaseDir+"/eng.base"));
2390	convert
10407	wp1=pos/totalWeight;
10984	edu.cmu.minorthird.classify.transform.TransformingBatchLearner;
1057	Configurable
13351	March
7451	minimalMargin){
23668	3.086278682608780e-03,
929	schema.getClassIndex(className);
2847	newlabels
11237	System.out;
15914	w_t[i].setBias(0);
1968	DONT_CLOSE_TYPES:
1044	java.io.IOException;
23479	splitter=null;
20841	if(s.equalsIgnoreCase("seq"))
8486	if(args.length==3&&"-test".equals(args[0])){
4065	TextBaseEditor
6139	SpanDifference
880	c.completeUpdate();
20726	exneg
16236	Machine
3686	definition
9434	command-line
19784	searcher.explain(sequence);
4813	(array!=null)?array[HS]:null;
4389	setpreferredsize
14170	annotatedLabels;
23905	binomial(double
532	Classifier,Visible
13003	content'
23173	ui;
5531	curr=it.next();
15387	stackingDepth;
7219	annotationtype
12621	content,
13522	W_Pos=0,
10248	bestFeature=unusedFeatures.get(featureIndex);
9522	content.
17532	estimateVar(vCnt);
16985	y<fty[t].length;
4169	top.add(newTypeButton,gbc);
6978	label_document
7625	SubTextBase(annFullLabels.getTextBase(),splitter.getTest(i));
16772	argvalues
20896	"Defines
19159	w){
2997	receiveContent(Object
16067	shuffle(Random
23697	48.47118135183522388,
18021	Pie");
9344	System.out.println(oper+"
8562	HMMAlgo
5365	parentLevelName+"
14564	dictLookup(List<String>
20972	getTestsetFilename(){
422	(int
20560	lo=0;lo<document.size();lo++){
19070	.getSelectedItem());
591	SmartVanillaViewer(innerClassifiers[i]);
11839	RADJY,
23089	if(edit.extractedType!=null)
18758	subClass){
14998	log.debug("Accuracy
10070	ExampleSchema.POS_CLASS_NAME
15467	PredictedRlt){
11581	this.k=k;
24381	currParentToken.getLo()
9699	Ranecu
17074	req2ProfileMap=new
10250	minValue=Double.MAX_VALUE;
19861	WeightedSet(){
13946	scrollpane;
22403	converting
15884	iitb.Model.EdgeHistFeatures(model,
24371	parentLevelName);
9620	doc,TextLabels
17831	tausigestimatevec
22943	getHistory(List<ClassLabel>
21060	trainparams
13540	gain;
13296	this.multiClassifier=multiClassifier;
9547	java.util.Random;
4974	labels,Span
6804	ViewerFrame("Classifier",new
23309	getverticalscrollbar
20108	emit(StringBagResult
21541	numEpochs)
9750	<CODE>Ranecu(s1*(long)
12283	StringSpan(String
13393	numEpochs,
3312	Dataset");
16141	OnlineLearner().callMain(args);
16008	FeatureFactory
1648	innerClassifier[i].getExplanation(instance).getTopNode();
9258	pprsc
12498	ExtractAbbrev();
6145	this.guessBox=guessBox;
11413	setlabelfile
15843	iter=dataset.sequenceIterator();
514	w);
2976	add(viewer,gbc);
14512	transformDict(fa);
6886	.getText());
7246	statusmessagepanel
979	w_t[i]
2343	readobject
14317	TextBase.");
5896	options.setProperty("MaxMemory",""+maxMemory);
14712	<predicted_name:1,
571	mainPanel
20698	sumWgt+=vWgt[i];
589	classifier(s)"));
2544	SequenceConstants
8692	if(lineMatcher("\\t",line.substring(i,i+1))){
10033	segmentgenericcollinslearner
18940	Configurable)
17428	List<Iterator<T>>
4406	checking
11316	testdatafilename
22444	label=labels.hasType(s,"rr")?+1:-1;
15027	DataOutputStream
4154	top=new
13794	viewer...
15289	1.0/9.0,
16240	"thick-Margin
8546	loadfile
11871	unanimous
13681	schemas=multiSchema.getSchemas();
3703	realClassName=m.group(1).replaceAll("[\\/]+",".");
10557	extend(String
11552	multievaluate
19735	possibleClassLabels;
3261	save=new
8525	doannotate
20861	type.cross();
16851	updatedViterbi)
8836	HREF="http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000">
20256	stringBag.add(s.asString());
8109	vbeta,
4212	errorPane;
17067	Map<String,String>
8075	vbeta)
9066	set-up
5454	getLevel(){
6822	SaveAnnotator
13890	filterOnFeatureBox.setText("[none]");
11119	md);
18501	edu.cmu.minorthird.classify.sequential.*;");
23766	4.052691950487723E76,
2465	list=map.get(ex.getSubpopulationId());
22521	((MutableInstance)i).addNumeric(ft,wgt);
999	isdebugenabled
114	would
5250	propagate
7558	usebudget
9773	future
7051	explainAnnotation(TextLabels
10186	approximately
20139	Encodes
3308	CommandLineUtil.toDataset(base.labels,train.fe,signal.spanProp,
8193	extraction-oriented
21562	highestNegativeExample,
21182	lastoutputtime
13295	super(multiClassifier.getClassifiers());
22178	mixupExpr=statement.getMixupExpr();
5325	while(currSrcEntry.getLevel()!=currDstEntry.getLevel()){
13236	example,boolean
14504	transorm-extend
12574	defnstring
23238	elapsedTime=(System.currentTimeMillis()-startTime)/1000.0;
20500	learner.batchTrain(
1463	getclassloader
39	Examples
5158	rootBase){
9902	//dataset.shuffle();
14494	Collections.sort(nameDict,new
9593	gettrainfraction
13482	rankedExamples){
13263	map.put(type,(Set<String>)set.clone());
2049	s=it.next();
10204	Implements
5744	Source
525	buf.append("learner#"+(i+1)+"
6570	conLo=Math.max(span.documentSpanStartIndex()-contextWidth,0);
11903	Armenia
23758	6.082818640342679E62,
14569	tokens=tokenWindow.asString().replaceAll("[\r\n\\s]+","
782	doing
6484	spanmarkup
7315	viewer.getTruthBox()
12851	trapped,
19470	whole",viewerTracker);
3747	realclassname
3019	uc;
2214	if(label.end<tag.pos){
12236	entry;
3526	subsequences
15866	f.yend
18863	JEditorPane
13659	List<ClassifierLearner>
20608	getsemimarkovlearner
11013	MaxEntLearner.class,
21761	double[newVals.length];
12047	radjy
1622	Example(
11439	Example)
16991	bp.onBestPath?
1927	exception.setStackTrace(trace);
6955	(k--
18620	javax.swing.text.html.HTMLEditorKit;
15612	"webmasterCommands.labels";
8859	uniform
9393	sgmexample
17110	fileName,LineNumberReader
5418	makes
10726	edu.cmu.minorthird.text.learn.experiments;
24107	1/k,
16936	classifier.classification(seqSegmentInstance).getWeight(
15134	TreeMap
2896	setselectedindex
15184	availablefeatures
1744	FileNotFoundException{
13142	Example.
22084	if(!(levelStack.peek()).equals(levelName))
21933	features");
17928	System.out.println("three");
19932	Does
12083	dinamo
22165	fileToLoad=statement.getFileToLoad();
11207	errorPanel
6323	spanComponents[i]=pane;
14260	if(s.getDocumentId().startsWith("pos")){
14483	deletedNameList=new
8959	Example:
22603	TextLabelsLoader().loadOps(textBase,labelFile);
16256	VitorBalancedWinnow
4134	SaveTruthLabelsAction(
18024	base.setDocumentGroupId("f2","foo");
14674	labels");
18445	Example>
18085	trials.
14832	testSampleData(){
2943	splitPane.setLeftComponent(viewer);
10292	entropy
305	rights
6525	SemiSupervisedBatchClassifierLearner
13419	training",
21800	newfeatures
20171	super(name,fe);
18451	edu.cmu.minorthird.classify.sequential.SequenceClassifierLearner;
264	MultiClassifierTeacher{
10722	setsequenceclassifierlearner
5685	dstmapperlist
20557	documentLooper.hasNext();
16951	fty[seqLen][y];
18425	numMistakes+"/"+numExamples+"
7373	Entry
10317	batchTrain(newData,RandomForests.getDatasetFeatures(dataset));
14912	SVMClassifier
9255	unsynchronized
18912	page:
8613	java.util.regex.*;
8270	from(s).right().token(i).eq().lc().emit();
3906	Span.Looper
12963	onlySubviewer.getNamedSubView(name);
2220	buffer=new
5604	"+mappingsIterator.next()+"
8260	simplified
21602	buttonsThatChangeStuff.add(deleteButton);
3713	Class.forName(className);
8993	interval
16092	setdatacompression
12147	03/12/03
23236	readerThread.start();
19376	initlayout
13508	j<exampleSize;j++){
6053	guessBox.addActionListener(highlightAction);
17984	if(saveFile!=null){
5891	iitb.CRF.NestedCRF
19359	if(laidOut)
7478	"+y*s+"
9555	trainFraction;
5605	keyIterator=childToParentMap.keySet().iterator();
9647	solve
16563	processedArgs=null;
5788	pos<length();
5337	anytime
2998	viewer.setContent(obj);
10287	i_gain=
15929	seq.getLabels();
22138	newType){
10638	log.error("In
15692	"CTable:
21145	this(task,"step",-1);
19436	nextSpan();
18355	choen
5150	textBases=new
1550	pages
5277	TextBaseMapper.MapEntry
22605	contents=IOUtil.readFile(f);
15360	baseLearner;
19792	JLabel("CMM:
3511	len++)
20988	FixedTestSetSplitter<Example[]>(it);
6609	subspan,
20747	sequential=seq;
10502	edu.cmu.minorthird.util.Globals;
15700	a_value
3315	seqDataset
8284	base.loadDocument("pos"+i,SampleDatasets.posTrain[i]);
5691	currmapper
3852	accum.add(new
7797	numberofvalues
4961	edu.cmu.minorthird.text.EmptyLabels;
19945	ArrayList<List<Example>>();
22244	subspan=
10263	BestOfNRandomTreeSplitter(int
3327	type=signal.getOutputType(train.output);
2183	((curLabel.start==compLabel.start)&&(curLabel.end>=compLabel.end))){
1884	lo,len;
3771	estSize=c.size();
16470	((BinaryClassifier)c).score(i);
128	last
19338	sometimes
13018	displayable
13015	getserializablecontent
21088	gettraindata
18856	if(c.equals(inLineClasses.get(i)))
2072	saveTypesAsOps(TextLabels
5415	TextBase.instanceIterator
12428	currChar
3087	setbottomcomponent
20336	StringBagResult(extend("lc"),fe,lcBag);
5639	textbasemanager
16667	if(k+1<processedArgs.length&&!processedArgs[k+1].startsWith("-")){
1046	java.util.ArrayList;
16815	LeaveOneOutDictTransformLearner(featurePattern,
7358	log.debug("load
24072	stirlings
13917	if(dc.allButton.isSelected())
16483	tag=baseTag+"Unique";
15099	atof
6652	LABEL_DOCUMENT="-choose
17294	atoi
12789	getTokenProperties()
4777	if(array==null){
23500	j=train[i].iterator();j.hasNext();){
18844	work");
19080	log.debug("property
8729	tmp1){
9005	exponential
15917	fIndex++)
15508	"+index+"
21050	getsaveasfilename
13120	Produce
9771	Date());
11580	this.schema=schema;
23288	piout
1113	flag
15219	GenericCollinsLearnerV1.
1382	log.error("IO
8732	tmp.substring(0,1);//get
18334	deltaLoglik=Math.abs(loglik-previousLoglik);
21511	this.SQRT_INV
9040	0.458)
1156	'"+props.getProperty(SGML_MARKUP_PATTERN_PROP)+"'");
12497	extractAbbrev
21552	sortByScore(h,ranking);
8619	svmformat,
22879	ArrayList<ClassLabel>(LIST_SIZE+1);
16010	compressGroups=true;
19869	d=map.get(object);
9467	//train.learner.setSpanFeatureExtractor(train.fe);
14590	highRiskNameList=uniqueSortedList(highRiskNameList);
13425	//System.out.println("epoch
5881	labelNames[i]});
9232	return(X);
4244	errorPane.getViewport().setView(
19916	frequency!"
19531	(isNegative())
1516	txt
11141	"+testParams.loadFromFilename+":
23040	softDict[i]
1721	{"CLOSE_ALL_TYPES","CLOSE_TYPES_IN_LABELED_DOCS","DONT_CLOSE_TYPES",
9371	copy;
9406	setaggregators
8532	unknowndocumentexception
14322	documentMap.keySet().size();
507	schema.getClassName(h);
6037	ResetDocumentListAction
7630	testLabels[i]
6398	currentSize=currentFont.getSize();
12744	baumwelch
12379	(shortForm.length()
5918	supported";
21427	copy,
4738	FreqAnal(TextLabels
2789	if(nextCursor<documentList.getModel().getSize()&&nextCursor>=0){
17575	Double(d).isNaN())
16363	lpos_h,lneg_h;
3149	extend
6900	pane.add("Span",new
2094	val=labels.getProperty(span,prop);
6276	spans){
21710	editSpanCursor+=editedSpans.size();
6176	fnColor(){
12222	(str.charAt(0)
22158	"+statement);
784	two
4531	checkResult(m.getMainResult());
895	c.setVoteMode(true);
311	dataset
3057	prefixField=new
18671	validSubclasses,Class<?>
1049	java.util.regex.Pattern;
8571	Compute
11547	traintestmulticlassifier
13813	getcoloredvalues
7287	OnlineLearnerEditor
10341	result=splitter.getSplit(dataset,depth,unusedFeatures);
21539	this(100);
10255	if(val<minValue)
8386	_prediction
15469	iter=Aggregators.keySet().iterator();iter.hasNext();){
7121	ReweightingInstanceTransform(FeatureReweighter
23790	5.797126020747369E120,
8163	probtaugivensigmax
14233	getBinaryClassifier(){
16814	transformLearner
2483	ArrayList<Example>();
14447	discretevalue
15196	fnColor();
7662	val=i.next();
20811	"Visualize
3637	File(fileName[i]);
14888	NaN's
977	s_t[i]
4386	newtypebutton
2038	type+"
6571	conHi=
15964	getmaxitershelp
4309	{-file
624	wolpert
19600	Philip
23242	viewButton.setEnabled(((Console.Task)task).getMainResult()!=null);
21108	TIME_BTWN_OUTPUTS_IN_MS=1000;
18464	SequenceAnnotatorExpt(TextLabels
17349	//answeredquery
3622	option
8405	DEBUG=false;
17030	tt'
13956	pass1=
10717	displaydatasetbeforelearning
5849	hasNext()
6532	batchTrain
14279	TreeMap<String,Document>();
4773	type){
22586	requireList.add(s);
22867	fmap=new
486	dataset");
21536	MARGIN
15834	ClassLabel(schema.getClassName(labels[i]));
3383	windows
23934	(n<max)
23641	stirlingCorrection
15842	TrainDataSequenceC();
1078	When
22957	pos_h,double
20637	//infoGain.setNumberOfFeatures(
10452	floor
22237	leading
7193	setAnswer(AnnotationExample
21560	h.score(highestNegativeExample)+MARGIN))
2586	StatusMessage
13809	menu_string
22375	m.put("Tomikoyo",
5475	assumed
1090	try
10520	script=Globals.DATA_DIR+"webmasterCommands";
21335	UnionIterator<E>
15308	"-labels","sample1.test",
14749	deletednamelist
20824	seqLnr=
15281	UITest(TrainTestClassifier.class,
20931	seqLnr;
4339	assumes
3215	cohen")
2372	getspanswithproperty
147	data
21084	traintestparams
241	date
536	schema,Classifier[]
15377	useConfidence;
7604	ViewerFrame("Annotator",vx);
21033	setSplitter(Splitter<MultiExample>
16670	prop=opt.substring(1);
125	The
16713	System.out.println("bwa
13474	exp-loss
9379	DatasetLoader.loadRelFile(new
14258	pos,String[]
19365	JSplitPane(JSplitPane.VERTICAL_SPLIT,viewer,viewerTracker);
12763	TransformingMultiClassifier
8676	perc
18733	found.");
17222	if(userMap.get(subpop1).equals(userMap.get(subpop2)))
4786	tokenHash.put(token,array);
18605	n_int
10710	edu.cmu.minorthird.util.IOUtil
3672	this.getClass().getClassLoader().getResourceAsStream(fileName);
17513	setsubview
17287	byprofile
676	perceptron
10384	functions,
9006	functions.
16907	t++)
2139	cannot
7929	textBase.getDocument("doc3").getTokens(),
2381	replace
11567	Information
6994	classifierbutton
21286	"+className+":
19014	chooser.getSelectedFile().getAbsolutePath();
16731	taunt(){
1254	("sample1.test".equals(script))
6215	SpanDifference(guessLooper,truthSpanLooper,closureSpanLooper);
9285	setmean
7288	TrackedTextBaseComponent{
4929	showSubpops(String
22468	fe,MultiClassifier
10575	respect
3380	java.util.*;
1511	textlabelsloader
15821	int[tokens.length];
7276	to'
22085	IllegalArgumentException("Not
19825	OrderBasedInstanceTransform
17291	profilesforpartition
9080	centre
15803	setUseHighPrecisionArithmetic
18051	"+e.getSubpopulationId()
21418	treeex
12685	Baum-Welch.
698	log.isDebugEnabled();
8782	lala
23033	StringDistanceLearner)
5998	initializeLayout(null);
23032	(distances[i][d]
22473	getFE(){
20280	SpanSetResult(extend("first"),fe,newSet);
2848	valuechanged
15572	getuselogisticonconfidences
21496	x,y,r,z;
8712	exprelength);
8644	tmp
20216	Invalid
19156	gbc.ipadx=10;
4625	window.
20882	trainData=toDataset(s,false,-1);
7202	value=answerLabels.getProperty(tok,reduction.getTokenProp());
18766	setInLine(boolean
19645	((x2*w2)-(decision));
15742	BatchSequenceClassifierLearner,SequenceConstants,SequenceClassifier,Visible,Serializable{
17475	setnumberoffolds
6061	width
8164	vlow
10456	maxvalue
17937	alternative
14533	applyDictIncreasePrecision(postLabels);
18217	estimateFeatureProbMLE(1.0,numberOfFeatures,
7259	to;
6911	table[i][1]=editLabels.getProperty(span,(String)spanProps[i]);
8636	matched)
19275	reader
23207	error"+se.getMessage()+"\n");
13819	Multi-class
22082	IllegalArgumentException("Already
2268	type,Span
7982	toe
5728	childoffset
21217	.mixup,
19177	d=f;
18131	ahrens
11327	annotated
20039	SpanFeatureExtractor,MixupCompatible,
13438	i<rankedExamples.length;
16768	lang
3784	estSize;
6405	view(TextLabels
9959	segments,Segmentation
12028	observations
10496	tot
8333	toy
23315	Technologies
18428	nummistakes
6480	zoomfont
8251	String[propertySet.size()]);
12059	tom
22488	spanType!=null?taggedLabels.instanceIterator(spanType,id):taggedLabels
2324	tok
10749	contains(Span
11855	POIUNTS
22937	vpos_t.increment(pos_t,count);
7436	too
5178	Adds
949	top
10613	super(fe,new
18251	combinedDataset=new
6697	super(viewLabels,editLabels,documentList,spanPainter,statusMsg);
15712	"+ct.getPMutualInfo());
574	BorderLayout());
19793	historySize="+cmm.historySize+"
13677	this.multiSchema=schema;
8853	&gt;
7976	lamb
10702	subView.setSuperView(this);
22561	standoff
18963	//JButton
17941	<pre><code>
3259	needed
12985	colIndex,
3423	window;
11310	settestparameters
14652	if(!last)
19986	setannotatorloader
1142	props.setProperty(SGML_MARKUP_PATTERN_PROP,defaultSGMLPattern);
22596	annotates
17272	requestmap
21038	+"experiment,
5038	doc.highlight(typeSpan,color);
18808	//JFrame
13944	scrollpane
12583	mysubstring
9358	inner.remove();
418	learners");
21008	SimpleTrainTestParams();
16526	DatasetLoader.save(this,file);
11128	ClassifiedSequenceDataset
22218	declared,
22692	d.split(splitter);
15792	100;
19387	TextToken
1585	OnlineBinaryClassifierLearner
17115	maintaining
2477	listsWithOneExampleEach(Map<String,List<Example>>
24385	TextToken(document,
6678	SaveAnnotator("Save
4415	center
7266	getFrom(){
15617	super.checkSpans();
5342	srcIterator=srcMapperList.iterator();
11525	signal.multiSpanProp);
18881	String[5];
19081	"+row+"\n
23539	bayesextreme
1262	("sample3.test".equals(script))
21799	aug:
4376	errorstring
19533	bestLabel;
268	activeLearning=false;
22748	datasetsemisupervisedclassifierteacher
20398	line=line.trim();
17213	j2=0;j2<testList.get(k2).size();j2++){
12793	getSpansWithProperty(String
18360	addvalidlabel
11861	Tom
23118	j=e.featureIterator();j.hasNext();){
4223	//this.base=base;
13887	allButton;
8812	record
18972	inLine=true;
6142	msg,JComboBox
614	trees
19814	InstanceTransformLearner{
5979	Interactively
18774	IllegalArgumentException("not
16283	stable)
70	might
6610	attributeSet){
12666	subView.clearContent();
16341	pos_t.multiply(f,(1-example.getWeight(f))*(beta));
6078	gbc.weightx=gbc.weighty=2.0;
19505	"NOT"
4008	if(returnVal==JFileChooser.APPROVE_OPTION)
23606	nweight=
20198	lSpan=s.documentSpan().subSpan(0,s.documentSpanStartIndex());
6602	setCharacterAttributes(0,leftContextChars,HiliteColors.gray,true);
23093	editing",new
1962	j=types.iterator();j.hasNext();){
20932	seqLnr=learn;
19474	JFrame("TextBaseEditorPlusLabeler");
16784	hamster
14811	URL
5586	Mapper
14773	transformname
547	classLabelName)
2265	setBoundary(SortedMap<Span,Set<String[]>>
17051	requestId
7683	subtextbase
12021	speaker
4410	newtype
1816	line=null;
20410	apply(T
5957	dataiter
510	ithPrediction.getWeight(className);
3657	dictionary
11385	log.error(e,
20233	TokenSetResult
22020	rootLabels){
22449	data",data.toGUI());
9427	CommandLineUtil.TrainExtractorParams
11529	CommandLineUtil.toMultiDataset(trainTest.labels,
4199	specified?");
8794	svmformat
21210	findFileResource
4571	true_name
21083	seqtraintestparams
8338	edu.cmu.minorthird.text.Details;
6039	ResetDocumentListAction();
5033	color=controls.getColor(type);
4356	-readOnly
4186	splitPane.setDividerLocation(50);
1180	Try
17920	subprocessor[i].usage();
16765	"+msg);
2241	pos,String
14428	writer.print("]
18867	HTMLEditorKit());
14084	incorrectbutton
20543	getCompressDatasetHelp(){
9760	iseed2=s2;
18427	mistakecountingonlinelearner
22429	base=loader.load(dir);
13150	weight){
4620	tf;
6879	valField=new
8287	dataset=new
23801	1.2438414054641305E142,
14643	Collections.sort(al,new
10881	lightgray
3718	annotator
11621	"+w+"
22500	"+makePattern(tag));
20177	user-defined
7230	getannotationtype
21195	log=Logger.getLogger(AnnotatorLoader.class);
19201	setZ(int
15301	"-candidateType","bigram",
14859	e1=new
7773	binomially
22704	evaluate(ClassifierLearner
7031	checkifadded
4118	TextLabelsLoader()
8103	////
5555	parentHi=parentSpan.getTextToken(parentSpan.size()-1).getHi();
10127	bestWeight(){
15363	Bundle
23938	factorial((int)n);
20798	getSaveAsFilename(){
3836	ResultIterator
1125	default
11240	ByteArrayOutputStream();
2954	loc=controls.preferredLocation();
22284	getstatements
1198	treat
10357	"+bestFeature+"
21135	"+numSteps+"
16780	laff
4449	checkResult(Object
6218	ResetDocumentListAction(){
22722	PredictedClassTransform(c);
18206	ex=index.getExample(f,j);
21334	gettraintestclassifierhelp
12866	'names'
3428	Creates
1555	routines
8314	tokenpropertyfeatures
10662	getHistorySize(){
11389	File(fileName),
23199	PrintStream(poOut,true));
6540	batchTrain(dataset);
16605	CommandLineProcessor){
4709	Created
1476	order
4595	Support
23969	ceil(double
7832	toe.",
18289	estimateFeatureProbMLE(double
13284	setlinksmap
5997	this.labels=newLabels;
4304	.println("Not
6334	sel,boolean
5840	segData;
3202	(j-k-1>=0)
15891	Integer.toString((k+1)),
14662	scheme");
6352	refreshSpanComponent(index);
5988	HighlightAction
12	the
8973	nextInt(this.mean);
19285	filemanager
15838	dataSize;
17991	CV_FOLDS
3794	iterators
3449	ending
21387	tree.
13374	numEpochs;
6764	setTypesBeingEdited(String
5290	mechanisms.
17770	Auxiliary
2778	super(msg);
6344	if(spanIsDirty[index]){
8045	Random
10312	tree:
4341	File(fileName);
3133	addactionlistener
7250	'from'
2717	statusMsg.display("editing
22838	beta2=0.95;//regret
12617	incurred
1864	"+file.getName());
7206	document.subSpan(i,1);
22124	if("re".equals(levelType)||"split".equals(levelType)){
17366	answered
5231	documentSpan
14219	labeleddataparameters
3343	classifierannotator
1602	newInnerLearner)
2951	controls.preferredLocation()+":
9296	generation
23049	y!=yNeg)
332	java.awt.BorderLayout;
6478	nextspan
17285	asset
16540	ListCellRenderer(){
14997	output.writeBytes(v+"\n");
10150	List<Set<String>>
88	<p>
20064	setAnnotationProvider(annotationProvider);
1453	repository_prop
21529	statist
2310	closealltypes
10668	Serializable,Visible,ExtractorAnnotator{
3196	Utility
1933	"+file.getName()+"
7462	example){
1603	newInnerLearner;
22978	fmap
14269	Maintains
3220	5317);
10998	ClassifyCommandLineUtil.MultiTrainParams.class,
10234	dataset,int
24037	longFactorials.length;
8409	this.sequenceAnnotator=sequenceAnnotator;
14588	highRiskNameList.add(tn);
15807	true)
3616	true,
20460	targetvalue
13891	targetFeature=null;
6498	setfont
19568	"[ClassLabel:
2603	contextWidth=0;
3754	Finish
11346	helpparamsbutton
24016	b0;
23290	pierr
8385	grep
5103	ViewerFrame("SpanViewer",v);
24066	<tt>log(k!)</tt>.
21447	Normal
14498	o2){
6367	mp){
21381	facitlity
2455	ArrayList
12210	SHORT_FORM_PROP,
7299	super(base,
23652	7.573675487951841e-03,
24011	b1,
13114	ignore
20655	exNeg=0,exPos=0;
15977	stateid
22826	Blum
21396	top)
2171	sortedLabels
1320	illegal
23740	8.222838654177924E33,
9043	<=llll;
11959	Bulls
7826	"Eeny,
24307	taking
21922	PreprocessTextForExtractor(){
17705	tauPost
21076	getmultihelp
15544	RealRelationalDataset.getAggregators();
22639	"+dirName);
842	true;
840	true:
24370	document.getText().length(),
9261	library
4288	WindowAdapter(){
121	true.
10139	getWeight(String[]
2344	settextbase
10416	log.debug("wp1,wp0,wn1,wn0
24010	b0,
7448	usedFeatures;
11450	System.out.println("Training
3619	resources
1191	K=1,2,3
10931	Tells
5075	fancy
7058	CommandLineUtil.BaseParams();
21184	graphiccounter
6348	for(Iterator<SpanMarkup>
6962	documentSpan,
21573	EDITOR_PROP="_edited";
5783	segs.getSequenceLength();}
13123	tool
1504	exception
10861	StyleConstants.setBackground(yellow,
1800	policies
2401	curlabel
5667	srcdocspan
2600	documentSpan;
7301	init(base,viewLabels,statusMsg,editLabels,key,readOnly,learner);
16399	top=
22456	TestSuite(BayesClassifiersTest.class);
21398	top;
565	JComponent
16773	stoplist
15600	truefeatures
9110	reciprocal
18443	Util{
16282	(more
7504	hyperplaneBias
12290	base.substring(lo,hi);
1150	log.info("scriptDir:
55	reset();
10952	predicted_
5494	SortedSet<MapEntry>
19995	from(span).right().subSpan(0,2).emit();
7118	AbstractInstanceTransform
22645	"+annotatorName+
6971	this.added=true;
12546	short_form_prop
3896	b.append("'").append(w).append("'");
12544	abbrevlong
7337	edit(TextLabels
17505	grab
1814	LineNumberReader(new
23234	startTime=System.currentTimeMillis();
10159	otherLabel){
18846	ENTER]"));
16205	found.
3377	getmainresult
20632	//InfoGainTransformLearner
15575	setuseconfidences
4534	}catch(IllegalAccessException
5125	Manages
21359	this.length
18948	writer=props[i].getWriteMethod();
12133	Definitions
13326	TitledBorder("TransformingMultiClassifier"));
15988	gram
2740	colors[SpanDifference.UNKNOWN_POS]=spanPainter.mpColor();
8401	EXPERIMENTAL.
19231	inputstreamreader
1290	(bsh.EvalError
24081	8.33333333333333333e-02;
15801	((value
686	Theory
12039	andrew
24387	currParentToken.getLength()));
19022	if(type.equals(int.class)){
2421	savetypesasxml
17708	//int
4252	oldTypes.add((String)box.getItemAt(j));
9269	graz
20902	typeString="multi";
6642	gray
12811	"+annotationType+"
21690	editedSpans.remove(span);
1481	trainlabels
6618	subspanLength=subspan.getTextToken(subspan.size()-1).getHi()-beginSubspanInDocument;
7456	reset(){
17434	SubsamplingCrossValSplitter(Random
12393	tmpIndex);
18560	10000;
13223	linksMap
2764	super(0,10,0);
8008	gettokens
8768	bWriter
10305	b){
17683	0,1)[0];
23534	"+actualTestError);
17240	"+subpop+"]";
3844	lookup(List<TrieMatch>
7204	ClassLabel(value);
8187	lower
15895	MTFeatureTypes(this));
13191	detailMap.put(candidate,new
10474	randomforests
5668	mapentry
13621	numupdates
795	class-label
22807	//buf.append("\n\t"+"feature:"+f+"
20044	STORE_AS_BINARY=1;
9264	distributions
23797	1.854826422573984E134,
12967	gbc.weightx=gbc.weighty=1.0;
12347	currSentence.indexOf("
8324	settokenpropertyfeatures
15418	learner","stacking
2126	Convert
2152	start=s.documentSpanStartIndex();
776	Phi(sequence)
22567	LabeledDirectory
17211	if(k2!=k1){
4855	base.documentSpanIterator();
3900	j=kid.endIds.iterator();j.hasNext();){
7195	reduction.reduceExtraction2Tagging(answeredQuery);
10147	odds[i]=expOdds/(1.0+expOdds);
20451	tokens_2
10823	zoomedIn.clearContent();
12156	expansions
19473	editAndLabel(
12996	Transform(){
15852	advance()
21113	lastOutputTime;
20742	ClassifyCommandLineUtil
16691	//Properties
14683	NameMatcher(spanType);
13759	updated'
353	Networks,
5543	it=childDocMap.iterator();
2255	start,int
8880	upon
8249	tokenPropertyFeatures=
19364	splitPane=
17942	Span2Instance(){
12449	bestLongForm
2439	binary
7643	TextLabelsLoader()).saveTypesAsOps(annFullLabels,save.saveAs);
15969	getusehighprecisionarithmetichelp
6154	sp=spanDifference.spanPrecision()*100;
8352	CRFAnnotatorLearner
236	trivial
7994	todo
18615	javax.swing.JSpinner;
22321	definedictionary
8958	distribution.
4545	decision
219	setschema
17687	//System.out.println("tau["+i+"]:
18065	distribution;
18873	IllegalArgumentException("Must
18111	drand(seed)
16426	vitorbalancedwinnow
17314	this.spanEditor=spanEditor;
21987	preprocesstextforclassifier
7869	RegexTokenizer");
3808	gettrain
10352	Java,
17656	i<(K-1);
24139	Math.log(x)
22481	j=0;j<bestClassNames.length;j++){
19768	ConfidenceUtils.sumPredictedWeights(constrainedPrediction,0,constrainedPrediction.length);
14847	loading,
12651	subViewList.add(view);
11710	assertNotNull(docSpan);
22795	f,int
13874	this(classifier,dataset,new
16506	this.unlabeledExamples;
20665	numPos+=wgtTot;
15841	ds.size();
13262	HashMap<String,Set<String>>
253	java.util.Collections;
13807	getSpanDifference(){
10882	cyan
22026	clears
14208	extractionsignalparameters
1371	".mixup");
18160	SemiSupervisedBatchClassifierLearner{
18503	(SequenceClassifierLearner)interp.eval(learnerName);
7545	if((currentPrediction-wxContribution)*y>=minimalMargin){
21969	i=dataset.sequenceIterator();i.hasNext();){
18475	Recommended.TokenFE
1054	edu.cmu.minorthird.text.mixup.Mixup;
16409	avrim
9906	log.debug("classifier
12146	Schwartz
2746	editedDoc.highlight(dspan,colors[status]);
20554	getAnnotationType(){
8711	(linelength
10644	if(displayDatasetBeforeLearning)
12900	this.content=content;
9609	BeginContinueOutsideReduction
7171	getTaggingReductionHelp()
11132	>0)
12112	compresssgm
12409	hasCapital(shortForm.asString()))
1263	SampleClassificationProblem.testLabels();
17250	System.out.println("test:
16565	processedArgs=args;
700	numberOfEpochs;
23293	monospaced
13628	update_a
4629	ParallelViewer();
17706	sigmaPost
19920	ChiSquareTransformLearner();
15743	histsize
14451	writer
8601	Math.exp(diff)
10454	bestfeature
22192	if("onLevel".equals(keyword)){
6387	spansWithDocument=spansWithDocumentMap.get(documentIdOfS);
10693	implemented";
22499	"+output+":"+tag+"
12157	LONG_FORM_TYPE
23386	trusecure
23072	getEditParameters(){
14469	Wang,
23108	TFIDF
17579	"mu",new
18468	this(labels,splitter,learner,inputLabel,null);
5460	parentToChildMap;
14355	SimpleRandomSplitter(){
23703	67.88974313718153498,
12575	indexof
6891	GridBagConstraints.HORIZONTAL;
21027	defined";
7302	init(TextBase
20006	<ul>
5672	dstdocid
4026	selectedfile
3476	newSubpopId)
2068	"+val+"\n");
14083	correctbutton
5077	FancyLoader.loadTextLabels("demos/sampleData/seminar-subset");
3963	JFileChooser();
22060	getProgram(){
22531	subpopulations.
19128	//writer.invoke(o,
13403	non-sequential
5366	newTextBase=new
20956	splitter(String
7529	log.info("distilling
5828	segmentEnd,
17812	estimatenaivebayesmean
18544	inputlabel
12580	currstring
7856	TokenizerTest()
12635	ParallelViewer(){
1170	result.add("sample3.unlabeled");
11975	amounts).
18790	AbstractAction("Print"){
6055	highlightButton=new
5831	segmentEnd;
2318	doclist
24100	(k<longFactorials.length)
11463	pulled'
1036	ksteppe
13938	column){
2891	getvalue
6587	insertString,
21642	viewLabels.instanceIterator(importType,documentSpan.getDocumentId());i
5758	SegmentCRFLearner(String
4957	sequenceclassifierlearner
23196	piOut=new
23465	"+numSites+"
16602	result=ms.invoke(this,new
3481	newSubpopId;
2719	"+documentSpan);
23250	errorArea.append("Error:
23241	"+elapsedTime+"
12425	sIndex
706	numberOfEpochs)
23616	"+estimatedProb(numPos,
3685	contents=fileNameToContentsMap.get(className+".class");
20731	floo
16077	splitCandidateSegmentGroup(final
16613	itx){
765	ClassLabel[]
2262	maintain
703	CollinsPerceptronLearner()
7056	ViewLabels{
18500	edu.cmu.minorthird.classify.algorithms.svm.*;");
22564	.labels
18623	instantiations
4009	setFile(chooser.getSelectedFile());
13288	Transforms
2475	exactly
18120	******************************************************************/
6680	resetButton=new
2769	if(!slider.getValueIsAdjusting()){
8336	edu.cmu.minorthird.classify.sequential.SequenceClassifier;
8704	numberOfMatches(String
5081	"defTokenProp
12994	Transform{
2260	this.end=end;
16939	lastT,lastY)
22618	labels=getTextLabels(fileJ);
9891	SegmentGenericCollinsLearner(OnlineClassifierLearner
18447	for(list=new
5127	TextBases.
6575	beginContextSpanInDocument=contextSpan.getTextToken(0).getLo();
16948	bestEndYScore
2259	this.start=start;
19047	checkbox.addActionListener(new
18654	TypeSelector
4120	File("test.labels"));
22252	log.info("time:
22517	instance.getWeight(ft);
848	transitionErrors++;
19755	(lo<0
15615	"add";
19418	asString();
9536	if(o==null){
21895	Integer(count.intValue()+numCopies));
22829	COLT
1497	system
21406	viewer.setContent(stringEx);
16277	this(1.5,0.5,false);//non-voted:
14243	negTrain=SampleDatasets.negTrain;
22412	charlie
21577	importButton=new
22766	this.userLabelType=userLabelType;
11708	docSpan
3030	"+o+"
11121	e.extend((MultiClassifier)c,
20652	wgtPos=new
19400	charHi);
10737	documentSpanIterator)
10485	internalnode
11824	"stime"));
3597	File.pathSeparator,
7923	"doc1"),
10164	bestClassName?");
15663	this.d=d;
12852	processed.
5939	datasequence
17448	this.subsampleFraction=d;
7841	life
8162	sigma
19656	vpos_t.increment(w_t,
12697	a_0
4425	truth
24374	TreeSet<TextToken>();
16843	super(innerLearner,numberOfEpochs);
13512	Math.log(rankedExamples[i][j].getWeight(score)));
13182	this.candidateFinder=candidateFinder;
19960	stratasorter
11499	annotateString(String
9450	setSplitterParameters(CommandLineUtil.SplitterParams
15461	AugmentEx=AugmentExample(ex,LinksMap,Aggregators,rlt);
9011	sign;
1991	BufferedInputStream(new
5243	works
10723	getdisplaydatasetbeforelearninghelp
7763	avg=mean();
9885	BatchSegmenterLearner,SequenceConstants
18488	crossValidatedDataset(){
17100	log.error("request
22108	sigle
14174	annotatoroutputparams
9402	l_type
23994	2(2ab/x
1505	printstacktrace
4055	edu.cmu.minorthird.text.FancyLoader;
3309	signal.spanType,signal.candidateType);
12072	world
20978	Iterator<MultiExample>it;
4225	this.truthLabels=truthLabels;
19016	Object[]{filename});
22028	become
19848	dataset=filter.transform(dataset);
19175	getDFraction(){
14703	[email:t+R]
4666	i=instance.featureIterator();i.hasNext();i.next()){
6009	this(base,labels,null,statusMsg);
13087	*baz=
6906	makePropertyTable(final
5331	while(currSrcEntry!=currDstEntry){
21639	statusMsg.display("what
20788	saveAsFilename=s;
24112	stirlingCorrection(k
23693	36.39544520803305358,
23405	necessarily
19288	osname
17179	populate
14823	0.6011745705024105,
13269	linksMap;
2189	"Labels
5589	"+parent+"
1384	'"+script+"':
13361	answers.
12691	indexes
3241	fillhistory
5381	Also
19115	}),gbc(1,row));
3711	work;
6059	setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
21589	MoveSpanCursor("Next",+1));
10940	c=learner.getClassifier();
8253	extractFeatures(new
8901	patchwork
9417	Interface
8461	endIndex=startIndex+extractedSpan.size();
19430	getHiChar();
22129	RegexTokenizer(pattern);
6942	if(!eSpan.added&&eSpan.s!=null){
23511	HashSet<Instance>();
16759	String[accum.size()]);
23809	9.332621544394418E157,
13064	<code>-colorOpts
5911	SegmentDataSequence(g);
21022	SimpleTrainTestParams(){
13389	log(score).
17404	stats...");
15602	classlabelname
12888	superView.namedSubViews.put(title,this);
452	Dataset
21072	trainingdata
13431	A_Neg
11901	QUALIFIER
329	labelinstance
1600	accessors
22047	"There
16705	-taunt
7716	Logistic
19025	spinner=
8024	rwShadow;
17092	badInput(line,constraintFileName,in);
5816	getSegments()
15064	tempfile
21377	setoffset
13370	Collins'.
8884	sampling
15029	DataOutputStream(new
8867	performance
8181	BAG_OF_WORDS=new
6535	work.
4917	cds[k]
5301	successive
7579	edu.cmu.minorthird.text.learn.experiments.MonotonicSubTextLabels;
19834	value=0.0;
3205	NULL_CLASS_NAME;
20291	SpanSetResult(extend("map_"+f.getName()),fe,mapFunction(f));
11004	ClassifyCommandLineUtil.Learner.ClassifierLearner.class,
4868	lc.substring(0,lc.length()-2);
15901	//options.setProperty("trainer",
5055	table[i][0]=s.getToken(i).getValue();
13060	colorOpts()
4092	"+groundTruthLabelsFile.getName()+
6809	saveAnn(File
21337	Iterator<E>
4387	newtypeaction
3938	triematch
5022	color){
23144	"[TFIDFWeighter]";
12387	StringSpan(currSentence,
11356	Directory
17860	LABELFILE]
16969	this.lastT=lastT;
3945	stringbuilder
17959	buffers
23062	dictionarytransform
23639	Constants
21561	(i>highestNegativeIndex)
5329	dstMapperList.add(textBaseMappers.get(currDstEntry.getName()));
13906	toolbar-controlled
1241	After
9796	_WH_
23872	2.0044015765453032E291,
19194	"[SampleOuter
1632	schema,BinaryClassifier[]
8200	ExtractionFE();
16796	inputerror
22901	localF++;
14556	applyDictIncreasePrecision(MonotonicTextLabels
5343	while(srcIterator.hasNext()){
186	computation.
3357	getadditionalparameters
22494	tagset;
15808	this.setLogSpaceOption();
6185	differenceIterator(String
11184	TitledBorder("Parameter
18045	e.getSubpopulationId().substring(0,1)
5594	Parent
8130	+Arithmetic.logGamma(2*(b1+b2*sig))
23522	this.testName=testName;
3068	gridbaglayout
6805	SmartVanillaViewer(textLearner
16322	y_t_hat=
333	javax.swing.JComponent;
16252	(averaged
19636	y_t_hat;
4461	assertEquals(.88,e.f1(),0.02);
7099	result=evaluation;
115	like
12606	Conceptually
5886	NULL_CLASS_NAME})));
14289	BasicTextBase(Tokenizer
22932	if(pos_t.featureScore(ff)<W_MAX)
21368	setType(String
17813	classprior
17093	//System.out.println("userMap:
21908	"+map+"]";
23713	720L,
12318	newLo,int
5751	SegmentCRFLearner
1305	props.getProperty(SGML_MARKUP_PATTERN_PROP);
4972	textViewer;
18700	advancedParams=null;
2585	outside
14799	AbstractClassificationChecks{
19278	reminder
22539	subpops=new
14070	System.out.println("ClassifiedDataset");
12066	madrid
16668	val=processedArgs[k+1];
5633	link
23564	[Pr(f|+)-Pr(f|-)]
243	line
671	edu.cmu.minorthird.util.gui.*;
19417	documentSpanStartIndex();
6209	ii=labels.instanceIterator(truthType,documentId);
1086	Properties
12881	subview");
16451	featurescore
6114	unedited":"")+
8208	ExtractionFE(){
18234	Example(mi,estimatedClassLabel));
12722	this(0);
3859	words
9985	"+schema.getClassName(seg.y)+"
3218	250);
21362	setLength(int
5128	maintains
246	Copyright
22625	k=requireList.iterator();k.hasNext();){
1080	sgml
24109	<tt>
19120	advancedOptions.addActionListener(new
4509	assertEquals(
2303	closure_names
14783	applying
7145	edu.cmu.minorthird.ui.Recommended;
20482	CommitteeLearner
17047	profiles).
12522	extractAbbrev.trueNegatives);
22926	"+lossH.featureScore(ff));
19795	SmartVanillaViewer(cmm.classifier);
20912	getMulti(){
10584	ExampleSchema){
3663	resource:
2931	JSplitPane(JSplitPane.VERTICAL_SPLIT);
4505	Recommended.MultitokenSpanFE(),
8353	VPHMMLearner)
16877	log.debug("update
22415	laura
9942	HyperplaneInstance(accumNeg[k],subPopId,source),
20664	wgtPos[exPos++]=wgtTot/SCALE;
1652	SmartVanillaViewer(
20499	committee[i]
21130	if(numSteps>=0)
15047	setlevel
17134	reqId=requestMap.get(subpop);
12871	Viewer(){
12117	ExtractAbbrev
23530	testSet=SampleDatasets.sampleData(testName,true);
14369	LBJ2.nlp.seg.PlainToTokenParser;
7247	anchor
7511	function
17889	if(delta==0){
4075	BasicTextLabels(base),groundTruthLabelsFile,mixupProgramFile,
4393	gridwidth
6438	documentcellwidthslider
13268	getLinksMap(){
2871	false_pos
24015	b1;
4769	"+array[2]+"
2264	boundaries
5671	parentdocid
23366	getTruthLabels()
14756	transorm
6034	displayedTypeBox.addItem(i.next().toString());
1457	labeldir
7505	feature,
3364	spantype
23122	TFIDFWeighter(numDocuments,featureFreq);
10244	feature)
23840	8.471580690878813E221,
16259	vpos_t,vneg_t;//voted
15723	feature2
15722	feature1
13563	feature.
22299	filestoload
14679	spanType="";
13381	A_neg
3876	node.endIds.add(id);
24012	b2;
21285	log.warn(this+"
10681	getSpanFeatureExtractor(){
12705	Batchtrain
18242	iter=0;
21015	getTrainData(){
23540	toy3
6376	j=spansWithDocument.iterator();j.hasNext();){
24094	&lt;
22452	v=Tester.evaluate(learner,data,new
20411	stopwords
21935	beanshell]
9120	constants,
18686	inLineClasses
6473	guesslooper
13350	Linguistics,
1434	"+o);
11624	"+classCounts.get(s));
20326	(StringBagResult)doTrace();
1299	File(script);
11341	gobutton
24383	Copy
7432	java.util.ListIterator;
10152	sets=new
14636	result.add((String)o[cur_order[0]][j]+o[cur_order[1]][k]+
3704	clazz=Class.forName(realClassName);
1374	"+mixupFile);
12456	tokenizer.countTokens();
10891	this(learner,spanType,null,null);
1735	this.closurePolicy=policy;
8346	'ann'
2841	setviewentiredocument
22827	Yishay
13290	Visible,Serializable{
1731	CLOSE_TYPES_IN_LABELED_DOCS,
24111	(1/2)log(2Pi)
17194	req){
22788	size(Feature
13873	classifier,MultiDataset
2252	LabelInfo(Span
6291	spansWithDocumentMap=new
5851	iitb.CRF.DataSequence
12485	System.err.println("
4141	RefreshProgramAction("Reload
1957	CLOSE_TYPES_IN_LABELED_DOCS:
5755	maxMemory;
19353	init(edu.cmu.minorthird.text.TextBase
10175	correct=true;
22863	if(regret){
20382	if((wordArray[j].equals(str))){
5536	parentEntry;
4335	mixupProgram");
5556	parentEntry=
7525	"[WX:
1014	sequencedataset
6653	label-";
24125	Pike
14359	simplerandomsplitter
20677	floo=index.featureIterator();floo.hasNext();){
14657	result.add(name.substring(0,1)+DIV);
3381	group
8687	wordCharactersPercentage(String
23025	SoftDictionary[]
15769	args.length-1;
4466	SVMLearner()"}){
14466	recall,
14025	split.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
10691	classLabels[j].bestClassName());
23101	seteditparameters
12660	subviewer.setContent(getContent());
12250	Vector<String>();
8894	University
6042	JCheckBox("Unlabeled");
7115	warning:
16899	ExampleSchema.NEG_CLASS_NAME
10982	edu.cmu.minorthird.classify.transform.T1InstanceTransformLearner;
4489	e=(ExtractionEvaluation)result;
13762	applybutton
6523	Edoardo
6843	statusMsg.display("Learner
5681	located
10675	InsideOutsideReduction(),annotationType);
441	features
18726	'"+filename+"'
15127	isSorted=true;
13129	foreground
13550	feature:
15138	feature;
863	"+sequence[j].getLabel().bestClassName()+"
5648	parentname
4264	NewTypeAction(String
14312	documentGroupMap.get(documentId));
11372	file.getName();
4342	if(data.isDirectory()){
3629	written.
21119	numSteps){
17417	checkstandardstatsonly
18426	"+innerLearner+"]";
21302	edu.cmu.minorthird.ui.CommandLineUtil.ClassificationSignalParams;
21904	t=new
5972	explain
21939	LinkFileParams(),new
13835	copy()
2058	"+type+"\n");
1893	Details
10229	threshold(double)
3763	Iterator<T>
16928	lastY
15951	naive
11514	setSignalParameters(
17020	lastt
4642	ComponentViewer{
21899	count.intValue();
4384	getviewer
2458	data){
13730	addActionListener(this).
21990	linkfileparams
18047	log.debug(
21028	getSplitterHelp(){
1856	warnings
8246	StringUtil.toString(tokenPropertyFeatures);
5474	However,
13521	=0;
141	addExample(Example
16636	genericMethods=Object.class.getMethods();
17171	log.debug("partition
11335	selectabletypes
13849	((innerLearner.get(i))).addExample(
15873	MTFeatureGenImpl
16778	propertyvalue
8607	hmmalgo
20100	String[0],this,s);
21260	again");
17021	lasty
684	Markov
6156	recall:
22362	par.addSubView("LowerCase",lc);
2902	javax.swing.JSplitPane;
21007	RandomSplitter<Example[]>(0.7);
12827	empty_set
22409	hannah
10231	falseset(dataset)]
21057	sotred
18213	label="+((MultinomialClassifier)mc).getLabel(j));
4371	readonly
16058	result.add(e);
14907	Random(12345),100);
23130	unnormalized=unnormalizedTFIDFWeight(g,instance);
7823	fleece
14162	save.saveAs,true);
5405	typeInstances=parentLabels.instanceIterator(spanType);
178	getClassifier()
19121	advancedParams,o.getClass(),false);
12833	java.awt.event.MouseAdapter;
22735	FixedTestSetSplitter<Example[]>(testData.sequenceIterator());
2167	position=-1;
13481	best_w0(Example[][]
1117	DATADIR_PROP,
23879	7.257415615308004E306
9513	getevaluation
17878	debugmixup
18520	inputLabel=args[pos++];
19326	ipadx
15797	getMaxItersHelp()
16462	this.learner
494	MutableInstance
8918	SWITCH_MEAN
22241	span.asString()
21006	sequenceSplitter=new
22781	FeatureIndex{
5761	iitb.CRF.SegmentDataSequence
13534	(A_neg.containsKey(ftr)){
18984	//System.out.println("allowedValueMethod="+allowedValueMethod);
15776	german
5157	TextBaseManager(TextBase
23791	4.7536433370128435E122,
16121	labeledData,signal,train,test});
23139	df=featureFreq.get(f);
23662	3.967954218640860e-03,
18897	Linux
2744	dspan=i.next();
10767	File("C:/radar/extract/src/com/wcohen/text/ann/samplemail");
11290	basiccommandlineprocessor
19954	testList.add(strata.get(i).get(j));
19736	beamSize
18043	'food'
11015	FrequencyBasedTransformLearner.class,
17038	"profile"
20147	addition){
3738	clazz
22839	mode;//regret
16927	lastT
23598	+featurePrior);
12164	"acronym";
9361	splitter.split(iterator());
21952	DatasetLoader.saveSequence((SequenceDataset)dataset,save.saveAs);
21824	AdaptedSequenceClassifier
7345	readOnly=checkReadOnly(args);
7911	BasicTextLabels(textBase);
20523	AnnotatorLearner{
5764	segLengths[];
13587	ordered.add(it.next());
18436	IndexedViewer
15830	getLabels()
14984	svm_node();
15889	Feature[histsize][labelNames.length];
11978	assertEquals(2094,
21844	seq[j].getSource(),
7568	alpha
7740	if(d!=0&&d!=1)
20339	trBag=new
17412	setDelta(double
6689	List<JButton>
1271	script);
10757	validDocumentSpans.iterator();
6853	documentMessage(int
9659	"+output+":"+baseTag+"
22443	'rr'
17438	SubsamplingCrossValSplitter(int
13616	numepochs
517	"+newInstance+"
22992	deltaloss
15903	iitb.CRF.CRF(featureGen.numStates(),histsize,featureGen,options);
10021	!addedASegmentStartingAtPos
4358	dimension
17210	k2=0;k2<folds;k2++){
11398	load(fileName,
20057	setFeatureStoragePolicy(int
718	setHistorySize(int
18705	TypeSelector(List<Class<?>>
8846	exp(-mean)</tt>
8976	/******************************************************************
18187	classIndex=((MultinomialClassifier)mc).indexOf(ex.getLabel());
8939	c_pm;
20452	exactsize
213	william
13989	this.ex=ex;
22056	statementList=program.getStatements();
8900	HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">The
2597	editorHolder;
14645	transformToken(String
3795	partitions.
6584	}catch(BadLocationException
1667	score
19677	ClassLabel.positiveLabel(1);
20615	Naive
14991	sumv+=v;
23190	outermost
20022	result.contains(String
14909	Random(67890),100);
11982	assertEquals(2092,
17728	tauSigma
19182	SampleOuter
2829	contextwidthslider
3562	files.
12718	nesym:
3560	files,
7459	w_t=new
18371	unlabeleddataset
4189	SaveTruthLabelsAction
5268	unavailable
10473	newdata
14069	"+count+":"+label);
20251	StringBagResult
15683	count(feature1,feature2)*PointwiseMutualInfo
12411	extractAbbrPair(shortForm.trim(),
2705	JTextPane(editedDoc);
8490	previouslySavedAnnotatorFile
19319	reader2
21280	o=c.newInstance();
20373	"use"
7544	wxContribution=kernel(x,x)*y*wx.alpha;
16329	if(votedCount==0)
9832	commun
14113	newsourcedmultiexampleviewer
10622	newDisplayDatasetBeforeLearning){
2534	negexamples
4383	reload
10511	testDirwithNoFile(){
18552	toshow
20369	wordArray=StopWords.LONG;
18329	imprecision
9691	getnondefaulttagvalues
1207	"foo"
9819	raw(double
19183	AbstractSample
15434	stackDataset(RealRelationalDataset
13986	"MultiExample";
15546	AugmentExample(ex,LinksMap,Aggregators,predictions);
3275	getSignalParameters(){
11674	classcounts
11911	qualifier
23459	subsample){
20817	Common
15836	CRFDataIter
17663	sig[0]
498	ClassLabel
2898	edu.cmu.minorthird.util.gui;
15706	Long.parseLong(args[1]),
4910	"+trainData.size()
18792	selection:
16014	getFeatureFactory(){
23136	result.addNumeric(f,w/norm);
484	"+(i+1)+"/"+innerLearners.length+"
1580	edu.cmu.minorthird.classify.algorithms.linear.VotedPerceptron;
2098	out.print(val);
21493	polar
2156	j=labels.getSpansWithProperty(prop,documentId);j.hasNext();){
22204	if(statementType==Statement.ANNOTATE_WITH){
14041	example=(MultiExample)argument;
2023	i=labels.getTypes().iterator();i.hasNext();){
3602	Their
20636	(InfoGainInstanceTransform)filter.batchTrain(
17749	Double(sigma)
16515	Collections.shuffle(examples,r);
23536	kernelvotedperceptron
7388	getonlineclassifierdocumenteditor
22574	List<Annotator>
9453	doMain()
21168	lastOutputTime=time;
19981	setAnnotatorLoader(AnnotatorLoader
17927	tree(){
12424	currChar;
4379	savetruthlabelsaction
13625	correctftrs
11829	"cmu.andrew.official.cmu-news-2457_0",
11897	DRAW
22268	token=span.getTextToken(j);
23600	ngn=index.getCounts(f,"NEG");
16196	setk
6733	add(thisDownButton,gbc);
20465	replacement
10484	falsebranch
15267	c.explain(instance);
13041	cause
12698	//Zhenzhen
7072	processarguments
15333	testpackage
1091	InputStream
7645	tag,TextLabels
19573	logits
3633	HashMap<String,byte[]>();
22405	uppercase
17798	maxCnt=Math.max(v[i],maxCnt);
13535	itIndex=A_neg.get(ftr).iterator();itIndex.hasNext();){
22876	if((mode==4)&&(!fmap.containsKey(f))){
2431	sets
7208	classLabel);
2942	splitPane.setResizeWeight(0.75);
12783	hasDictionary(String
4768	"+array[1]+"
5965	crfmodel
297	(MultiExample)query;
23875	9.003691705778434E297,
12004	assertEquals(num,
10556	Added
24393	compoundtokenizer
1725	MAX_WARNINGS=10;
16346	pos_t*count
19374	JFrame(this.getClass().getName());
17161	ArrayList<Set<String>>(folds);
16733	mother
11102	-classifierFile
18282	iter+=1;
22636	File(dirName);
21792	AugmentedInstance(inst,argv,vals);
546	instance,String
1530	Marker
19076	":value.toString()),gbc(
7419	transform(MultiDataset
25	William
7940	set.
17610	tm.put(
23694	39.33988418719949404,
398	StackedLearner()
23997	becomes
2663	set,
19468	tabbed.add("Label
10392	S&S's
23968	rounding
13667	i=0;i<innerLearner.size();i++){
19536	posProbability()
19440	thisspan
5045	TokenViewer
12612	forwards
968	w_t[i].toGUI();
22738	e.getLabel().numericLabel()
445	real
8980	Tabulated
15795	set;
21520	gaussian
14458	Then,
20839	typeString=s;
524	StringBuffer("");
24088	0.5)*Math.log(k)
1997	read
22703	round");
1758	addToType:
2446	abstract
18916	setP
4659	InstanceViewer(){
250	Rights
4685	borderfactory
9644	result.add(baseTag+"Continue");
22669	filepc
15857	featureLooper.next();
16662	argValues.clear();
6336	synchronization
17906	-config");
1753	addToType,
6086	"+displayType);
2528	splitintorankings
20789	showData(){
16581	"+getClass());
14075	tablecellrenderer
5568	getMappedParentSpan(Span
2182	if((curLabel.start<compLabel.start)||
22560	document-per-file
69	These
18143	receiver
2729	Useful
3337	getMainResult(){
2846	updateviewlabels
13441	correctFtrs
5188	addTextBase(String
12956	Offer
6818	System.out.println("Error
21652	ExportGuessSpans(String
15054	checkclassifytext
17315	spanEditor.setTypesBeingEdited(guessType,truthType);
6041	editedOnlyCheckBox=new
4385	newtypefield
7427	asinstance
8283	i=0;i<SampleDatasets.posTrain.length;i++){
5109	tokenviewer
21789	i=0;i<vals.length;i++)
2909	viewer=null;
5657	happen
5661	happed
19042	log.warn("Illegal
1749	There
1803	importOps(MutableTextLabels
4278	baseLabels=new
17985	eval.save(new
20835	multi=-1;
15058	refs
12457	shortFormSize
23993	1/a),
24396	matchingparentspan
4490	assertEquals(0.82,e.tokenF1(),0.02);
6954	editedSpans[i];
6824	returnVal=chooser.showSaveDialog(ocdEditor);
933	i<numClasses;
22991	gethistory
23284	getMainResult();
21846	instanceToPlace.get(instance.getSource());
13412	rankedExamples[index][j]=ranking.get(j);
5315	common
2317	gettextbase
7671	extractionEval.extend(tag1,sd[k],false);
16626	"+fileName+":
17801	estimate
20092	resulting
14029	e=new
1298	baseDir
21636	ImportGuessSpans
13080	duplicated
6067	gbc.weightx=gbc.weighty=0.0;
17875	learner_bsh_string
5218	.put(childName,new
1412	IllegalArgumentException("can't
11436	whenever
16263	(positive
21711	if(editSpanCursor>=editedSpans.size())
16764	"+in.getLineNumber()+":
10889	DOC="OnlineDocument_";
19315	numtypeselectors
6984	spanfeatureextractor
7292	setLabels(args);
9027	(int)my
11908	soccer
9706	direct
12694	k,ell
21794	Feature(argv[i]);
13782	later
3920	TrieMatch
5484	child1:0
11644	Neighbor(Example
17525	i<vCnt.length;
4641	ExampleViewer
10385	:~(
6783	LabelDocument(String
10283	threshold=Math.random()*(maxValue-minValue)+minValue;
12639	add(parallelPane,fillerGBC());
1182	TextLabels
11150	Saveable
3689	}catch(NoClassDefFoundError
18295	falls
15915	fIndex
13347	Language
8240	commaSeparatedTokenPropertyList){
6511	decrease
6528	variable
10565	validClassNames(){
16816	distanceNames);
18976	JLabel(pname+":"),gbc(0,row));
22769	labels.getTextBase().documentSpanIterator();
3636	file=new
6703	editedSpans
8225	"Bill"
19451	TextBaseEditorPlusLabeler(TextBase
12897	content,boolean
11100	data",testParams.testData.toGUI());
8471	ClassLabel[predictedLabels.length];
14126	mixup;
18339	/*try
5821	segs.add(new
4346	TextBaseLoader(TextBaseLoader.DOC_PER_LINE,false);
1841	type=advance(tok,in,file);
722	Button
11221	console.start();
8651	featurename=1"
4565	commit
15006	log.debug("Squared
23789	7.15694570462638E118,
18191	countsGivenClass[classIndex]+=ex.getWeight(f);
10900	this.fe=new
21407	treeEx;
94	instance
10630	learning.";
13994	instanceViewer,classifierViewer,explanationViewer;
9195	(1.0
12191	shortSpan
13422	e=0;
14316	"Cannot
6657	readOnly=false;
3018	Controllable{
18683	created,
2140	created.
817	associated
23544	makelogisticregressiondata
4279	debug(base,baseLabels,groundTruthLabelsFile,mixupProgramFile);
17557	vCnt.length;
13285	sampledata
20751	DatasetLoader.loadSequence(new
5802	segLengths[k]
21110	numSteps;
16718	scoff
23255	mainThread
19749	alternateClasses,int
23806	9.619275968248216E151,
21238	mixup,
24074	logFactorial(int
21625	A"),addButton
3659	mixup.
10327	negWeight);
7769	stdDev(){
11692	super("TextBaseLoaderTest");
18826	"+props[i].getShortDescription());
559	Viewer
8484	ConfidenceReportingSequenceAnnotator.
11533	MultiCrossValidatedDataset
8407	ConfidenceReportingSequenceAnnotator(
11984	assertEquals(3149,
4327	readOnly=true;
23015	StringDistance
15828	TestDataSequenceC(Instance[]
14391	ArrayList<CharAnnotation>();
11519	getSplitterParameters(){
13968	MyTableModel(MultiClassifiedDataset
874	complete
16993	System.out.println(t+"."+y+"\t"+format.format(fty[t][y])+"\t"+
16808	this.innerLearner
5643	rootbasename
6791	labeled:
12310	indexOf(String
12452	(bestLongForm
3514	buf.append("NULL");
9702	congruential
17186	if(j!=k)
280	else{
7986	grow
19009	.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
23754	1.196222208654802E56,
17876	traintagger
3041	System.out
17290	prof2
2311	setclosure
17289	prof1
10981	edu.cmu.minorthird.classify.transform.InfoGainTransformLearner2;
8061	Fienberg
5003	setContent(span,true);
11816	"etime"));
6395	spanIsDirty[indexOfT]=true;
14918	Rate:
23769	8.32098711274139E81,
20016	SpanFE(result),
14936	checkStats(stats1,expected);
6718	this.ioTypeLabel=new
10019	pos<g.getSequenceLength();
5373	currDocSpan=docsLooper.next();
19988	edu.cmu.minorthird.text.StopWords;
12863	content="empty
4971	TextViewer
912	voteMode
21162	"/"+numSteps+"
15662	this.c=c;
4330	System.out.println("illegal
18403	this.reportMistakes
22282	heirarchy
318	false
2581	viewEntireDocument=true;
1627	ClassLabel.binaryLabel(-1.0))
19280	createpe
18214	//System.out.println("features="+numberOfFeatures+"
16248	Roth,
8533	extractedspan
8810	Default
18618	javax.swing.event.HyperlinkEvent;
22797	total=0.0;
16633	'getX',
13031	rowatpoint
17753	parameterization)
973	gui.setContent(this);
3124	touppercase
13598	language
18347	System.out.println("SampleDatasets
1663	multiclassclassifier
21544	//Map
13896	correctButton=addButton("correct",false,group);
4814	uniqueList(List<String>
3596	separated
23683	10.60460290274525023,
23085	"+edit.editFile+":
5214	parentLevel+1,parentEntry));
4127	TextBaseEditor(base,programLabels,truthLabels,statusMsg,readOnly);
14971	while(true){
21211	findClassResource.
3387	SequenceDataset
14184	InLineSelectableTypes{
5554	parentLo=parentSpan.getTextToken(0).getLo();
13245	Please
8662	"+featureName+"=1");
22835	voted,regret;//voted
15553	v.addSubView("Level
8877	C-RAND's
8709	0)||(exprelength==0))
2089	out.print(":"+span.getDocumentId()+":"+span.getTextToken(0).getLo()+
14013	(cd.classifier
1399	dataDir
23057	softdictionary
20013	behavior.
16392	i=ex.asInstance().featureIterator();i.hasNext();){
10425	epsilon=0.1/tot;
13461	update_A(Map<Feature,Set<Index>>
6166	"+documentId);
1215	directory
7487	log.debug("into
4865	(lc.endsWith("tion"))
23410	PoissonLearner(),0.0,0.0));
7274	relational
19475	labeler=
8097	prob;
12566	isletterordigit
19769	ii=0;
19479	labeler;
21739	guessspan
1427	main(String[]
23150	featurefreq
439	transformed
22789	f,String
9049	prob.
11224	data")
18673	this(validSubclasses,null,rootClass);
405	this.innerLearners
2627	ViewerTracker(TextLabels
2880	dspan
19229	introspector
13148	instance,ClassLabel
10106	positive=new
16823	ViewerFrame("transformedDataset",
13232	this.addSGM(example,true);
4357	-stem");
406	this.finalLearner
21981	span.getLoChar()+
12774	transformer
8026	(FLAG
976	Hyperplane[numClasses];
3505	label[i][j].possibleLabels()
10354	if(example.getWeight(bestFeature)>=bestThreshold)
9320	aggregators=new
7366	bases");
8434	sequenceAnnotator.getSequenceClassifier().classification(sequence);
19050	.isSelected())});
15510	"+values.length);
21663	hi=editorPane.getSelectionEnd();
15043	a1a
5193	parentEntry=null;
10227	[feature
3236	getweight
2331	documentspan
16458	BinaryTextClassifier
16859	CollinsPerceptronLearner.MultiClassVPClassifier
13732	'applyButton()',
262	class
18937	setSelected(Object
18306	1e-4.
18110	SUBPROGRAMS:
1883	confidence=tok.hasMoreTokens()?advance(tok,in,file):null;
8234	getUseCompressedCharType(){
3062	toString(){
23834	1.882677176888926E209,
1745	labels=new
944	"+schema.getClassName(i)+":\n");
2900	java.awt.GridBagLayout;
4890	learner,SequenceDataset
17844	LEARNER_BSH_STRING
3933	"+i.next().asString());
2833	getmodel
11872	Venezuela
3482	rest
9242	m)*log(my)
249	Mellon,
7196	answerLabels=reduction.getTaggedLabels();
19937	List<List<Example>>
7335	ocdEditor.setTypesBeingEdited(guessType,truthType);
16935	segmentScore
14166	output.format+"
12924	senders=new
11517	setTrainingParameters(CommandLineUtil.TrainClassifierParams
17414	setCheckStandards(boolean
1562	subsets.
9803	iseed1=iseed1+2147483563;
20624	NegativeBinomialLearner(double
7759	numberOfValues(){
779	vector
22729	(SemiSupervisedDataset)s.getTest(k);
22023	levelsToLabelsMap.put("root",rootLabels);
23414	LearnerTest("bayes",new
22772	document");
1649	classifier.add(classEx);
9850	super(t);
13035	tool.
13765	apply'
8680	a-z
10921	docSpan=tb.documentSpan(docID);
12019	baker
4232	errorPane.getViewport().setView(new
15625	TestSuite(LearnToClassifyTest.class);
9214	k5+1)*[0,
5396	anywhere.
23083	editorOutputLabels=new
7600	ann=(ExtractorAnnotator)IOUtil.loadSerialized(test.loadFrom);
20236	TreeSet<Token>();
18258	((MultinomialClassifier)mc).reset();
22132	"+levelType+
23524	data=SampleDatasets.sampleData(testName,false);
5628	res;
20814	getShowDataHelp(){
11757	skipped
23348	[!vp:t+]",
2618	entry
15893	histFeatures,
3634	fileName=path.split(File.pathSeparator);
6188	documentId==null?labels.instanceIterator(guessType):labels
12169	falsePositives
24061	<tt>log<sub>2</sub>value</tt>.
14453	edu.cmu.minorthird.text.RegexTokenizer;
21595	buttonsThatChangeStuff.add(importButton);
7059	CommandLineUtil.ViewLabelsParams
15016	((total*sumvv-sumv*sumv)*(total*sumyy-sumy*sumy));
24382	matchingParentSpan.getTextToken(0).getLo();
13278	System.out.println(linksMap);
3537	creates
19816	frequencyModel;
23325	Agreement",
4754	updateHash(PFList,PF);
6351	spanDocs[index].highlight(m.span,m.color);
1771	created
19202	this.z=z;
16620	also.
12958	onlySubviewer=namedSubViews.get(ONLY_SUBVIEWER);
1915	'"+id+"'");
16364	mytheta;//theta
18982	allowedValueMethod=
2624	JLabel
13007	only_subviewer
3680	findClass(String
7758	sum/count;
10015	correctSegments(CandidateSegmentGroup
17677	System.out.println(buf);*/
18124	this.poisson.nextInt(y);
1394	key:
16246	Karov,
13133	startpos
502	"learner_"+i;
1929	advance(StringTokenizer
1964	i=labels.instanceIterator(type);i.hasNext();){
9412	loadrelfile
12752	CommandLineUtil.toMultiDataset(base.labels,ann.getFE(),
4230	this.base=base;
7705	Sign
17411	getDelta()
4736	tokenHash=new
7602	vx=new
4682	JTable(tableData,columnNames);
65	copy();
7305	key,
8986	histogram
6924	if(eSpan.id==docID){
23292	domainrunning
15042	trainfile
1818	while((line=in.readLine())!=null){
18711	inLine){
13746	'apply'
8128	ProbSigmaGivenTauX
14414	"+inFile+"
8150	installed
10448	getsplit
23214	errorArea.setText("");
4966	util.gui.Viewer
490	transformInstance(ExampleSchema
22622	k=annotatorList.iterator();k.hasNext();){
11751	"country",
18497	edu.cmu.minorthird.classify.algorithms.linear.*;");
8355	...;
21214	"annotation.properties"
14299	charOffset.
1677	java.io.FileNotFoundException;
10110	isNegative(){
14627	cur_order=order[i];
7870	RegexTokenizer
17173	profilesForPartition);
21254	if(redirect!=null){
18268	re-assign
14	side
13190	if(prediction>0){
17246	totTestSize+=splitter.asList(splitter.getTest(k)).size();
23671	2.777674929752690e-03,
13304	i=0;i<tc.length;i++){
1566	hassubpopulationid
7180	annotationType=s;
22495	if(tagset.size()==1&&
18601	X.toString()
7803	binomialstderr
4757	setLabels(TextLabels
2564	javax.swing.text.AttributeSet;
18910	String[]{browser,url});
4015	defaultDir;
1506	doc_per_line
8141	+rw.dnorm(sig,
4504	SegmentCollinsPerceptronLearner(20),
7890	sampleDocs[1]);
18561	Poisson(5.0);
13081	keys
15414	StackedGraphicalLearner(int
12125	form)
7093	SmartVanillaViewer(ann.getClassifier()));
22395	ZoomedViewer(lnameListViewer,familyViewer));
2485	ranking=rankingLists.get(key);
22301	getfiletoload
22363	par.addSubView("UpperCase",uc);
19029	spinner.addChangeListener(new
569	(StackedClassifier)o;
15677	tmp2
15294	assertTrue(
1006	gethistorysize
8724	tmp1
5870	numLabels,
1759	form:
21971	j=0;j<seq.length;j++){
6245	vList.setFixedCellWidth(slider.getValue());
23836	3.0126600184576624E213,
18753	exiting
8067	sig,
17234	ArrayList<HasSubpopulationId>();
8728	tmp,
8524	sequenceannotator
32	Cloneable{
622	visible
22507	here...
22528	maskedinstance
13844	possibleLabels
20623	this.SCALE=10.0;
16962	BackPointer
10321	posWeight+=example.getWeight();
19675	ROMMALearner();
585	mainPanel.add(finalPanel,BorderLayout.NORTH);
23053	distancelearnerfactory
7318	ocdEditor));
17466	"+folds+";"+subsampleFraction+"]";
11548	multiclassificationsignalparams
2869	colors
13596	reranking
6381	if(!spanMarkups[j].isEmpty()){
21976	"example
19141	IllegalArgumentException("Editor
9097	constants
24014	coef[p++];
9733	Houle
21150	if(time-lastOutputTime>TIME_BTWN_OUTPUTS_IN_MS){
19391	...,
15408	this();
7788	sign
23061	softdict
8602	overflow
3897	if(kid.endIds!=null){
674	org.apache.log4j.*;
11602	for(Iterator<Neighbor>
23363	..."
19446	"document"
6186	guessType=(String)guessBox.getSelectedItem();
22310	getimportlevel
10035	sequenceutils
17057	webmaster
14410	inFile=new
17276	badinput
2165	LabelInfo
22480	bestClassNames=classOfS.bestClassName();
20589	"+segmentation);
12704	obtained
13611	measure
1495	basedir
12166	mTestDefinitions
8142	sig,p2,"TRUE")
17670	1:iter
4325	mixupProgramFile=new
9611	taggedLabels;
10144	getProbability(String[]
5219	TextBaseEntry(childName,childTextBase,0,null));
1860	docList.add(docId);
22054	statements
12730	SystemOut());
5068	documentGroupId
18078	NegativeBinomial
13429	s.toGUI());
1222	edu.cmu.minorthird.scriptDir,
6636	insertstring
11799	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2450_0"));
20770	setLearnerInSequentialMode(SequenceClassifierLearner
10464	besttruedata
4542	extractionevaluation
4660	InstanceViewer(Instance
9715	<CITE>Comp.
6251	color;
13922	setContent
6560	beginContextSpanInDocument,leftContextChars,rightContextChars;
18978	getAllowedSpanTypeValues
21129	graphicCounter.setValue(0);
13585	incorrect.add(ex);
3543	subpopid's
16999	ViterbiSegmenter(Classifier
21515	nuclear
4500	"-labels","cspace.07",
7713	abs(double
21819	(ClassifiedSequenceDataset)o;
12735	notational
24085	7.93650793650793651e-04;
17642	numIterations
7281	exampleid
7371	argp++;
11384	tempLabels;
7091	if(test.showData)
6010	displayType,
4404	box
4687	parallelviewer
11330	getformatnames
19667	hyp.featureScore(f);
16300	(theta<0)||(alpha
21	"learners"
6820	Excel
8366	&quot;+s);
11630	priors
12257	longForm)
8133	AlphaSigma
12495	longForm,
14717	TextBaseViewer.view(postLabels);
3959	ComponentViewer
8595	diff;
17896	ignored");
15471	numNewFeatures+Aggregators.get(iter.next()).size()*
12616	overhead
19966	MixupCompatible
14813	trainData=DatasetLoader.loadSVMStyle(new
4303	if(args.length<4){
16702	-family
7678	accum.iterator();
9681	usespantype
4796	array[type]=new
7993	configure
19938	strata;
1587	OnlineBinaryClassifierLearner[]
23163	poOut;
3540	setsubsequence
8743	outL;
16376	instance1){
13773	HIGHLIGHT_COLOR=HiliteColors.yellow;
369	final
402	StackedLearner(
7673	prop,
15179	featValues.add(p);
19756	lo>sequence.length
8178	bag
13728	initialize()
16292	if((alpha<1)||(beta<0)||(beta>1)){
11475	bad
6699	ann=textLearner.getAnnotator();
1423	prop)
6687	thisDownButton=new
7271	"+from+"
10132	posWeight=new
20200	right(){
21244	if(ann==null){
21218	otherwise.)
14181	getallowedoutputformatvalues
12142	8:451-462(2003)
22620	BasicTextLabels(labels.getTextBase());
23399	edu.cmu.minorthird.classify.semisupervised.SemiSupervisedNaiveBayesLearner;
10434	Math.sqrt((wp1)*(wp0))
4374	programlabels
23484	Set<Instance>[]
23194	initThreads();
16518	i=iterator();i.hasNext();){
13091	bar
10674	this(seqClassifier,fe,new
20679	exPos=0;
18687	inLine
14905	testMultiClassClassification(){
24063	Math.log(2)
22260	property=statement.getProperty();
1578	edu.cmu.minorthird.classify.Explanation;
14033	main.add("Details",split);
5772	alloc()
709	this.historySize
19110	href=\""+
17520	prior,
5374	newTextBase.loadDocument(currDocSpan.getDocumentId(),currDocSpan
11127	ClassifyCommandLineUtil.SeqTestParams)
9364	splitter.getNumPartitions();
2375	linefeeds
5973	supported
2081	spaces.
10095	dimensions
15032	predict(input,output,model);
13049	thrown.
19878	map.keySet().iterator();
15487	if(LinksMap.get(egID).containsKey(type)){
41	be.
17124	badExample(example,"doesn't
680	Discriminative
11867	featherweight
21490	nextDouble(double
12370	//longForm
4265	msg,MutableTextLabels
3532	bcd
16646	i=0;i<methods.length;i++){
15561	stackedgraphicallearner
18181	double[numberOfClasses];
22665	require'
18001	train_file
7991	removeallappenders
22004	edu.cmu.minorthird.text.SplitTokenizer;
17154	"+o2);
20242	index1;
19097	selectedItem=selection.itemSelected.toString();
10024	g.getSubsequenceLabel(pos,pos+len);
21320	setSignalParameters(ClassificationSignalParams
6316	force
1087	props
10554	i=0;i<validClassNames.length;i++){
6830	file0=chooser.getSelectedFile();
14806	org.apache.log4j.Logger.getRootLogger().removeAllAppenders();
23213	clear(){
15759	this(args,1);
18547	getsequencedataset
5680	finds
15109	featValues;//keeps
11152	getFormatNames()
8991	Within
9196	f2)/(dl
11557	neighbor
6755	imported.
6999	thisupbutton
16231	Abound:
14659	.println("ExtractorNameMatcher:
6832	(file0.getName().endsWith(ext))?file0:new
21542	listsWithOneExampleEach(
15435	RealRelationalDataset.Split
1959	labeledDocs=new
9339	set=new
23516	testName;
17218	similarTo(Object
7934	spanTypeTokenizer
10449	unusedfeatures
22151	currLabels.addToType(newSpan,newType);
5354	exact
16821	transformedDataset
18281	log-likelihood="+logLik);
5427	required
14561	token=span.getToken(0).getValue().toLowerCase();
22575	annotatorList=new
5509	parentOffset));
2925	viewer.setSuperView(this);
16840	BatchVersion
13513	//*((rankedExamples[i][0].getWeight(score))
18803	title=name==null?"Property
1941	finer
19279	enter
6200	truthSpanLooper=
12483	[-options]
13604	requires
22865	lossF=new
17895	"+args[k+1]+
11452	BinaryClassifier){
17464	cvs.getTest(k);
7680	TestExtractor().callMain(args);
22115	typeInstances=parentLabels.instanceIterator(pattern);
14275	Underlying
20681	vNeg[exNeg++]=e.getWeight(f);
21620	I"),
16871	+1.0,
19061	selector=
10335	if(posWeight>negWeight)
23575	examples}
4051	javax.swing.JComboBox;
23091	editor.getViewer().getTruthBox().setSelectedItem(edit.trueType);
16190	index=new
16629	meaningful
16294	BalancedWinnow
9486	signal.spanType,
22263	labels.addToType(span,type);
12631	incurred.
9189	quick
15881	(histsize
11286	infogaintransformlearner2
17908	i=0;!somethingConsumed&&i<subprocessor.length;i++){
4732	HS=3;
19325	advancedoptions
18702	configureWith(configFilename);
13405	Example[][]
21923	ExtractionReductionParams
15222	GenericCollinsLearner(OnlineClassifierLearner
22296	getstatementtype
1704	TextLabelsLoader{
6859	Document
4072	readOnly,boolean
17883	JointCommandLineProcessor(CommandLineProcessor[]
1072	added
14142	"+mixup.fileName+":
5817	Segmentation(schema);
23379	reuters
22043	setProgram()
2434	examples.
6192	HashSet<Span>().iterator();
2432	examples,
14491	sp=it.next();
8870	Rejection/Inversion
17545	N="+N);
23546	numpagespersite
7736	d){
23217	initThreads(){
17588	vWgt[i]/scale,2
21693	HiliteColors.cursorColor);
23765	7.109985878048632E74,
9036	(llll
20023	result.subSpan(int
7581	named-entity
19282	filemgr
18013	TestSuite(SubPopIdTest.class);
15687	PMutualInfo
23787	1.1324281178206295E115,
20429	newloader
19630	j=example.featureIterator();
17657	tau[i][0]
11796	//First
21893	numCopies){
15500	temval[idx]++;
22642	annFile=new
1947	closeLabels(MutableTextLabels
7997	regextokenizer
8068	double[]
8543	crann
22886	if(y_t*y_t_hat<=margin){//error
13107	usage(String
18073	Computer
22615	ProgressCounter("labeling","file",textFiles.length);
619	componentviewer
11727	Wing,
2964	part=9;
8626	cs..cmu...)
13853	onevsall
4076	readOnly,stem);
14981	svm_node[m];
19665	hyp)
1324	TextBase
14686	File(args[i+1]);
22152	Evaluates
14536	System.out.println(((float)++counter/labels.getTextBase().size()*100)+
16720	"+atWhat+"!");
16457	Class
1705	log=Logger.getLogger(TextLabelsLoader.class);
11841	"cmu.andrew.official.cmu-news-2752_0",
8381	edu.cmu.minorthird.ui.ApplyAnnotator
6241	vList){
10773	SigFileAnnotator();
10036	duplicateprototypelearner
5822	Segmentation.Segment(i,i+segLengths[i],labels[i]));
21163	"+step+"s)
12482	System.err.println("Usage:
462	innerLearners[i].batchTrain(trainData);
21236	findMixupAnnotatorFromStream(source,is);
21187	setindeterminate
21676	if(editSpanCursor>=0&&(span.compareTo(getEditSpan(editSpanCursor))<0)){
20115	if(featureStoragePolicy==STORE_COMPACTLY&&c==1)
14613	if(temp.replaceAll("\\W","").length()<2)
10944	labels.addToType(s,outputType);
15962	parseint
14265	postest
6787	if(type!="-choose
1569	site
2278	buf=new
20450	stringbag
8660	line)){
14058	index.getMultiExample(f,i).getMultiLabel().bestClassName()
810	directly.
15627	classifytest
16847	Logger.getLogger(SegmentCollinsPerceptronLearner.class);
22732	trainTestSplitter
21239	natively
17451	rs=new
7594	CommandLineUtil.TestExtractorParams
3272	setSaveParameters(CommandLineUtil.SaveParams
8691	indentPercentage(String
22631	loader.saveTypesAsOps(labels,labelFile);
12862	superView=null;
10709	a.annotationType=args[1];
18678	manipulated
21912	KWayClassifier.
13335	october
16644	log.info("usage
18423	getTotalNumberOfExamples()
4030	setfileselectionmode
19800	beamsize
8642	tmpstr.length();
6729	-----------------//
14318	k.hasNext();
20578	segmenter,SpanFeatureExtractor
20743	BasicCommandLineProcessor{
19644	c_t
5616	sid,int
11698	good
18054	testsubpop
19779	(weightOfConstrainedPrediction>weightOfPrediction)
16108	OnlineLearner
14067	j=map.keySet().iterator();j.hasNext();){
12919	argument){
17205	oj=testList.get(k).get(j);
21318	setSaveParameters(SaveParams
5943	nestedfeaturegenimpl
7692	testextractorparams
23005	closest
22414	takashi
21759	Feature[newFeatureNames.length];
3148	Set<Feature>
13580	incorrect
3153	classLabel
6468	hilitecolors
14500	Integer(o1.length()));
23926	overflows.
7137	abstractinstancetransform
16608	iax){
8462	if(seqClassifier
12010	testloaddatafile
16034	ExampleSchema(classNameSet
8757	bReader.close();
12079	belgrade
7523	this.example=example;
23179	JScrollPane(errorArea);
3817	Map<String,TrieNode>
639	getlogger
10680	this.annotationType=annotationType;
809	difference
6927	editDocument(Span
4834	updatehash
11306	testparams
3365	todataset
11537	MultiCrossValidatedDataset(train.learner,d,trainTest.splitter,
5401	newTextBase=
15955	hasmoretokens
5386	newTextBase;
20825	ClassifyCommandLineUtil.Learner.SequentialLearner();
19778	diff="+(weightOfPrediction-weightOfConstrainedPrediction));
6026	truthBox.setEditable(false);
6362	i,String
16157	history=new
16653	[-"+methods[i].getName()+"]");
1795	immediately
21643	guessSpan=i.next();
20564	instance=fe.extractInstance(answeredQuery.getLabels(),span);
6151	tr=spanDifference.tokenRecall()*100;
10315	it=dataset.iterator();it.hasNext();){
174	can
2408	sortedtags
5480	children
6973	filefilter
13459	update_A(A_pos,ftr,i,j);
2828	savebutton
13445	j=1;
11280	stratifiedcrossvalsplitter
13524	it=features.iterator();it.hasNext();){
10846	getvisiblecontent
7674	value){
19883	Chi-Squared
2492	exi=posExamples.get(j);
19246	inlineclasses
23945	k_fac;
21635	Imports
8634	tmpstr
5376	Retokenizing
10435	Math.sqrt((wn1)*(wn0))
5500	parentEntry.add(new
3854	if(node.map!=null&&start+depth<span.size()){
12224	hasLetter(String
11012	TransformingBatchLearner.class,
11144	SmartVanillaViewer(testParams.resultToShow));
1674	java.io.BufferedInputStream;
9935	class="+k+"
12978	jlist.addListSelectionListener(new
18992	theBox.setSelectedItem(value);
13971	getRowCount(){
6748	add(editorHolder,gbc);
11723	"DocPerLineTestData.base@line:1",
812	j=0;
11130	cd;
9127	p(k)/p(m)
17397	reference
13871	index){
10927	tc=new
7482	tau_t);
1485	taggertestlabels
12813	fileToLoad,AnnotatorLoader
16566	k=consumeArguments(args,0);
13379	A_pos
7762	variance(){
16455	myclassifier
19349	TrackedTextBaseComponent(){
5595	Child
13124	gorp
21869	classifiedseq
15157	top){
22123	tbManager.filter(currentLevel,parentLabels,newLevelName,pattern);
17013	previousviterbiseg
12306	mySubstring.indexOf(ch);
18582	var[0]
8323	getusecompressedchartype
5493	childOffset){
9435	getCLP()
7744	Result
20519	edu.cmu.minorthird.classify.sequential.SegmentDataset;
20082	labels.require(requiredAnnotation,requiredAnnotationFileToLoad,
18885	fileMgr=Class.forName("com.apple.eio.FileManager");
10650	"+seqClassifier);
15633	checkspans
1480	equals
2970	part=1;
9967	otherMap
18588	var[2]
17127	subpop=hsi.getSubpopulationId();
8883	(1994):
20832	type=new
21831	Map<Object,Place>
18115	Gamma(seed,a)
20472	uwbag
18585	var[1]
4122	StatusMessage();
7768	Math.sqrt(variance());
16523	String[]{FORMAT_NAME};
1492	bsh
1861	IllegalArgumentException("error
18643	Double-valued
19547	wset.asSet();
3800	split()
17652	buf;
24324	longfactorial
18837	HelpViewer();
18776	if(instanceMap.get(shortenedClassName(o.getClass()))!=null){
11211	Console
6538	((Dataset)dataset).add(answeredQuery);
17091	if(f.length!=4)
5465	this.parent=parent;
2794	jbutton
3887	b.append("|
5529	it=parentDocMap.iterator();
4705	numrows
3352	trainclassifierparams
14138	-mixup");
24120	-1/1680
19299	opera
24384	tokens.add(new
17756	tauSum
2004	ObjectOutputStream
17025	bestendyscore
12404	tmpStr
14223	batchTrainBinary()
5516	parentOffset,
15784	defaults.setProperty("maxIters",
1073	LABELDIR_PROP
5535	if(curr.srcOffset<(parentOffset+length)){
9679	entitypart
22520	wgt=0.0;
11643	sim;
18841	"+o.getClass().getName();
385	StackedLearner(BatchClassifierLearner
10713	inputFile
22177	Mixup
1363	bug
9643	result.add(baseTag+"Begin");
12557	extractabbrpairsfromstring
16405	improving
523	buf
21961	'"+linkFileName+
5222	but
16012	setDataCompression(boolean
9747	introduce
14765	applydictincreaseprecision
7420	MultiDataset();
17	used
9438	getSaveParameters()
17265	asSet(Iterator<String>
15939	top.add(cmmEx);
3451	Java
22955	lpos_h;
22552	crossValSplitter.getTest(k);
7967	testXXX
16990	BackPointer(-1,-1,-1);
20222	if(lo>=0){
15395	setCrossValSplits(int
9462	longer
19992	SpanFE(labels){
1294	baseFile
21205	redirectionProps.load(s);
3941	accum
8276	from(s).right().token(i).eq().charTypePattern().emit();
23490	train[i]=asSet(splitter.getTrain(i));
8330	chartypes
10126	bestName;
21470	Box,
22764	userLabelType,
6507	diffspan
16787	bwa
6195	spanDifference.differenceIterator();
2396	unsortedlabels
15680	tmp;
22809	label:"+getExample(f,j).getLabel().bestClassName());
8342	use,
22759	userLabelType;
18822	props=info.getPropertyDescriptors();
13983	"+col);
6970	add(){
5369	TextBaseMapper(parentEntry.getTextBase(),newTextBase);
10168	match");
15388	setStackingDepth(int
3750	calling
3025	s=o.toString();
7037	makepropertytable
2967	part=4;
16489	result.add(baseTag+"Unique");
8474	crSeqClassifier.confidence(sequence,predictedLabels,
13555	W_Neg);
16442	alpha1
4580	segmentcollinsperceptronlearner
14527	"+i.next());
10937	types={spanType,"NOT"+spanType};
7519	alpha;
7447	useBudget=true;
12309	mySubstring.indexOf(ch,fromIndex);
16085	BasicDataset.SimpleDatasetViewer();
2323	getlinenumber
2649	downButton=new
1798	beginning
14168	System.out.println("saved
13202	"+candidate+"\n");
9599	Reduces
6345	SortedSet<SpanMarkup>
7251	'to'
8967	c_pm)
2495	ranking1.add(exi);
7852	Name
13309	super.classification(transformer.transform(instance));
7845	quite
9524	add(c,fillerGBC());
18518	learner=toSeqLearner(args[pos++]);
3830	TrieNode
20088	extractFeatures(labels,span);
12822	used");
3076	controllable
7937	uses
4820	user
6494	refreshspancomponent
6374	if(documentId!=null){
14644	al;
7321	ocdEditor.setReadOnly(readOnly);
21519	aka
13032	getpoint
17767	lambdaEstimateVec[i]
15550	yet";
12033	failing
16104	getnumposexamples
740	dataset.getSchema();
21240	non-mixup
8094	+xr*Math.log(wr*tau*sig)
2762	JSlider{
7730	clear()
17665	"+sig[0]);
13141	Extends
6909	i=0;i<spanProps.length;i++){
5278	mapping=
22502	"+tokenProp+":"+val+"+
20947	loadFrom=new
14105	getrowcount
5778	labels.length))
15014	rvalues[1]=error/(double)total;
17863	-edit
22959	this.mytheta=mytheta;
7372	readOnly;
18381	featureprior
251	Reserved
11394	SimpleTextLoader()
23628	//System.out.println("psudoCounts:"
6838	Annotator");
11797	File(testCaseDir+"/SeminarAnnouncements"));
2043	"+s);
5859	startScanFeaturesAt(iitb.CRF.DataSequence
14499	Integer(o2.length()).compareTo(new
22320	defdict
17782	Math.pow(wgt[i],2);
15334	uitest
4080	readOnly,
4057	edu.cmu.minorthird.text.NestedTextLabels;
3310	if(train.showData){
16089	getNumPosExamples(){
8559	retain
23921	binomial(long
4003	chooser.setSelectedFile(selectedFile);
11227	TextBase",
21166	"+stepsCompleted+"
19915	yet!"
8580	q/p))
14109	explanationviewer
11946	BRADFORD
17738	ReparametrizeTauSig2Lambdas(tauSigma,parameterization);
19575	neglabel
18472	this.tokPropFeats=tokPropFeats;
9306	edu.cmu.minorthird.classify.DatasetLoader;
21581	AddSelection("Add"));
19638	margin)
15028	output=new
9877	documentgroupid
17344	creation?
14960	Crap
2082	saveTypesAsStrings(TextLabels
21209	attempted
14200	onlinebaseparameters
4247	updateTypeBox(TextLabels
14693	ann=(ExtractorAnnotator)IOUtil.loadSerialized(fromFile);
4089	if(groundTruthLabelsFile!=null&&groundTruthLabelsFile.exists()){
23956	((double)(a++))
5126	mappings
3092	left
6682	completeButton=new
18311	p423
3035	c){
8397	testStrings[3]
24309	chbevl
21059	getshowdatahelp
23512	set.add(i.next());
16785	elderberries
6758	for(Iterator<JButton>
10230	trueset(dataset)
20531	fe,int
15031	model=svm.svm_load_model(argv[1]);
10103	binary[i]=ExampleSchema.BINARY_EXAMPLE_SCHEMA.isValid(labels[i]);
13065	-background
6605	toLogicalCharIndex(int
6003	item=(String)truthBox.getItemAt(j);
19724	agg
22619	if(resetAll)
15594	agr
2057	out.append("closeType
13139	configuration
5776	(length()
19445	getcharoffset
16930	g.getSubsequenceInstance(lastT,
16971	this.lastY=lastY;
3862	id,String[]
19815	log=Logger.getLogger(T1InstanceTransformLearner.class);
13444	correctFtrs.add(it.next());
21665	lo=editedDoc.toLogicalCharIndex(lo);
7537	wx=i.next();
8394	testStrings[2]
11142	(testParams.showResult)
14941	c2=
14031	e.extend(cd.classifier,cd.dataset);
5786	len;
151	any
19036	panel.add(spinner,gbc(1,row,10));
3375	ann
11556	k-nearest
15304	"Recommended.MultitokenSpanFE()",
3339	args[]){
21914	edu.cmu.minorthird.text.learn.BeginContinueEndUniqueReduction;
23249	interrupted?");
20944	SeqTestParams();
1468	samplek
21842	j<seq.length;
23664	3.622960224683090e-03,
21954	'"+save.saveAs+
9579	if(random.nextDouble()<=trainFraction){
17970	learnerName=args[1];
19314	editable
18516	splitter=Expt.toSplitter(args[pos++],Example[].class);
17036	samples
8390	testStrings[1]
22	and
6175	nullTruthType()?HiliteColors.yellow:HiliteColors.red;
21755	newVals){
11878	"SOCCER
9010	gx,gy,px,py,e,x,xx,delta,v;
14854	c1=
161	Return
19607	(parameter
3060	add(prefixField);
4402	getguessbox
4718	Time:
14271	tokenization.
20271	fe,SortedSet<Span>
1186	ways.
19471	JSplitPane(JSplitPane.VERTICAL_SPLIT,viewer,tabbed);
22658	requirelist
22355	case!");
18269	//unlabeledDataset
9501	textlabelsexperiment
13572	margins[ij.i][ij.j]
8387	testStrings[0]
23358	MixupInterpreter(prog);
5136	existing
19425	overlaps(Span
2589	documentList;
22190	if("defLevel".equals(keyword)){
22038	this.eval();
11195	subpanel2.setBorder(new
19552	this.bestClassName().equals(otherLabel.bestClassName());
3559	definitions,
2825	saveasfile
11284	multievaluation
20413	generally
6332	v,int
19555	(isPositive()
5617	sos,String
17370	checkStandardStatsOnly
13134	prints
665	batchtrain
9529	ways:
20406	match(Object
168	all
2173	compLabel=(LabelInfo)sortedLabels.get(j);
14021	right.setBottomComponent(explanationViewer);
4606	len,
5930	segmentdatasequence
6597	len)
13673	Strange.
155	speed
15533	//this.dataset=ds;
20983	SeqTestParams(){
17367	AbstractClassificationChecks
10911	Example(i,ClassLabel.binaryLabel(classLabel));
19651	="+x2+","+w2+","+c_t+","+d_t+","+decision);
11481	it=textBase.documentSpanIterator();it.hasNext();){
10734	UnknownDocumentException(String
21662	lo=editorPane.getSelectionStart();
17126	hsi=(HasSubpopulationId)example;
18796	AbstractAction("Edit"){
19698	pa.addExample(ex1);
11011	BatchVersion.class,
13593	michael
9764	RandomElement(long
18138	poiss
19859	serialVersionUID=20080116L;
15552	k=i;
15948	TitledBorder("CRFLearner"));
13416	margins
18408	(reportMistakes)
13778	MinimalMarkupControls(TextLabels
3531	abc
7931	SpanTypeTokenizer
23706	long[]
21927	(Extraction2TaggingReduction)CommandLineUtil.newObjectFromBSH(s,
20926	SeqTrainParams(){
19639	getNormSquared(example.asInstance());
6720	[None/None]");
17874	annotator_file
24117	+1/12
13636	abs
2742	i=spanPainter.differenceIterator(documentId);i
6020	guessBox=new
7634	extractionEval.printAccStats();
14125	getMixupParameters(){
20304	StringBagResult(extend(property),fe,stringBag);
18205	j=0;j<index.size(f);j++){
2892	move
17405	i=0;i<stats.length;i++){
16642	if(params.length==0||params.length==1&&params[0].equals(String.class)){
969	subviewer.setSuperView(
2619	documentList.
23902	<tt>n</tt>.
12775	gettransform
22891	if(y_t*y_t_hat>margin){
5898	featureGen
12155	"abbrevShort";
4767	"+array[0]+"
14352	trainList=null,testList=null;
23074	setEditParameters(CommandLineUtil.EditParams
10148	odds;
10599	edu.cmu.minorthird.classify.sequential.CollinsPerceptronLearner;
11565	Approaches
3635	i=0;i<fileName.length;i++){
1714	CLOSE_TYPES_IN_LABELED_DOCS=2;
14485	Remove_Single_Tokens_Low_PFIDF=true;
20489	committee
11169	"selectableTypes.txt",
19196	flag,x,y,inner="+getFlag()+","+
10637	if(schema.getNumberOfClasses()<=1){
21936	+"how
9081	region
23792	3.94552396972066E124,
5912	nestedCrfModel.apply(seq);
19993	from(span).tokens().emit();
15512	String[index];
5298	srcName,
407	this.splitter
1965	span=i.next();
8804	punctuationpercentage
8269	from(s).left().token(-i-1).eq().lc().emit();
10721	getsequenceclassifierlearner
5702	currdocspan
20884	clsLnr.clsLearner=Expt.toLearner(s);
17547	TreeMap<String,Double>
7264	this.to=to;
9380	File("test.osf"),data);
21251	type");
7262	to,String
12870	TreeMap<String,Viewer>();
20842	SeqTrainParams();
13321	classification(transformer.transform(instance)).toString());
13468	(map.containsKey(ftr))
13196	"+spanFilter+"]";
13787	add(typeBox);
4453	assertEquals(.2,e.errorRate(),0.02);
7666	.getTextBase().documentSpanIterator());
13276	Link("1","3","left"));
22580	LabeledDirectory.
21330	cvd=new
3927	i=0;i<argv.length-1;i++){
16109	CommandLineUtil.OnlineBaseParams
16429	vneg_t
22562	LabeledDirectory,
4762	it=tokenHash.keySet().iterator();it.hasNext();){
6353	spanIsDirty[index]=false;
19581	otherlabel
19542	expOdds
4711	IDEA.
3333	if(save.saveAs!=null){
3525	illustrate
22677	edu.cmu.minorthird.classify.relational.StackedGraphicalLearner;
13841	System.out.println("Can't
152	additional
1639	innerClassifier[i]
19906	chiScore
23715	40320L,
1886	len=Integer.parseInt(lenStr);
11444	DatasetClassifierTeacher(dataset).train(learner);
2578	ViewerTracker
22067	levelStack.peek();
1380	interp.getCurrentLabels();
18463	sequenceDataset;
1454	datadir_prop
13373	RankingBoosted
5169	containsLevel(String
11783	base.documentSpan("DocPerLineTestData_WithBlanks.base@line:12");
11267	panel;
18200	//System.out.println("classP="+probabilityOfOccurrence);
2192	format.");
5796	tokens.getSubsequenceInstance(pos,pos+len);
24397	curroffset
12002	assertEquals(value,
102	more
744	ProgressCounter
19718	relaxed
23351	[any{,5}])",
1220	value
22181	regexGroup=statement.getRegexGroup();
19000	panel.add(theBox,gbc(1,row));
23776	3.6471110918188705E94,
22938	MyClassifier(zpos,theta);
12074	yerevan
20515	batchtraincommittee
17952	this.instance=new
15902	options.getProperty("trainer"));
21054	getshowdata
17431	CrossValSplitter<T>
21862	(explanation=sequenceClassifier.explain(place.seq))
21231	if(is==null){
4863	(lc.length()<4)
5434	newTextBase.loadDocument(newDocID,newDocText,startIndex);
4785	"+array[3]);
109	active.
2604	saveAsFile=null;
12688	Notational
5852	next()
10615	reduction){
14120	CommandLineUtil.MixupParams();
8793	expressions
21822	sequenceDataset,
19292	rundll32
1155	matching
17615	/scale;
10122	bestClassName(){
21810	sequenceDataset)
15411	baseLearner,int
9528	componentFor(obj);
8903	distributions</A>,
7739	count++;
19685	c);
12905	getContent(){
10219	RandomTreeLearner
946	h[i].explain(instance)
12804	closureIterator(String
432	stackedData
12461	(!Character.isLetterOrDigit(shortForm.charAt(i)))
658	add
1153	SGML
15394	crossValSplits;
13843	ManyVsRestLearner!!");
21532	sqrt_inv
15904	CRFDataIter(dataset);
20802	showTestDetails=flag;
15981	ystart
5458	child;
18646	specially--it's
9875	charoffset
18986	(Object[])allowedValueMethod.invoke(o,new
5487	child1
6951	getEditSpan(int
11329	savesomehow
20536	less
5726	child2
5659	getmatchingspan
12123	those
8705	expression,
9272	acm
16987	bp==null
2176	if((curLabel.start<compLabel.start&&curLabel.end>compLabel.start)&&
3655	resource
7386	onlinelearnereditor
3247	dweeb
23554	Pr(class|instance)
10516	log.info("testDirwithLabelFile");
4221	errorPane){
1684	java.util.Set;
7063	m=new
9324	legalAggregators.add("EXISTS");
17116	inputList=asList(it);
17837	edu.cmu.minorthird.ui:",
5888	iitb.Model.EndFeatures(model,
9920	accumNeg[k]
15393	getCrossValSplits(){
1022	stringutil
14030	MultiEvaluation(cd.dataset.getMultiSchema());
23335	Vigilinx
10225	lets
18959	Selection
9741	<BOLD>RANECU</BOLD>
18365	numberoffeatures
9213	[k4+1,
17281	userid
10750	validDocumentSpans.contains(span.documentSpan());
11145	(testParams.saveAs!=null)
3676	className){
10992	Logger.getLogger(UI.class);
19835	value+=index.getExample(f,j).getWeight(f);
18895	//assume
16100	splitcandidatesegmentgroup
23937	n_fac
20121	emit(SpanSetResult
23094	editorOutputLabels));
13669	learner.innerLearner.add(inner.copy());
20124	emit(SpanResult
3640	s=new
10153	ArrayList<Set<String>>(dimensions);
18358	multinomialclassifier
23418	KernelVotedPerceptron(),5),0.0,0.25));
13679	ArrayList<ClassifierLearner>();
3040	prefix=mc.prefixField.getText();
10360	log.debug("trueData
12130	Algorithm
23113	featureFreq;
12745	systemout
8343	code:
12435	(lIndex
5217	textBases
7555	buggy
6190	if(nullTruthType()){
9252	this.getClass().getName()+"("+mean+")";
19099	selectedItem=
9323	static{
10775	"sig";
16651	if(params.length==0){
19464	initializeTwoTrackerLayout();
16698	code.
6640	setcharacterattributes
10903	addLabeledData(labeledData);
6573	.documentSpan().size());
16334	j=example.featureIterator();j.hasNext();){
2582	DUMMY_ID="***dummy
10515	testDirwithLabelFile(){
2203	ArrayList<TagInfo>(sortedLabels.size()*2);
6857	if(checkIfAdded(nextCursor)){
15009	((total*sumvy-sumv*sumy)*(total*sumvy-sumv*sumy))/
12295	this.hi=ss.lo+hi;
20691	m=0.0;
14457	personal
5074	String[]{"documentId","documentGroupId"};
21207	className);
20504	bag(Random
20246	index1=index;
610	logger
18212	class="+j+"
7571	distilling
5747	http://crf.sourceforge.net.
8244	tokenPropertyFeatures=commaSeparatedTokenPropertyList.split(",\\s*");
20397	BufferedReader(fr);
10517	script=Globals.DATA_DIR+"bayes-testData";
6881	tableScroller=new
12464	bestLongForm.indexOf(shortForm.asString()
23838	4.974504222477287E217,
3128	isselected
4872	lc.substring(0,lc.length()-1);
1002	string
10860	Color.black);
11937	Russia
18244	while(iter<MAX_ITER&!hasConverged){
12643	tabbed
21047	getlearner
15124	keep
6563	SpanDocument(){
7260	Link(String
2329	setspanprop
20942	SimpleTestParams();
17413	this.delta
15374	setUseLogisticOnConfidences(boolean
13224	static,
16803	LeaveOneOutDictVersion(String[]
13985	"Prediction";
22762	userLabelType){
17167	if(log.isDebugEnabled()){
17153	"+o1+"
8138	Math.exp(
8505	File(args[0]);
5541	childDocMap=childToParentMap.get(childDocId);
18633	x.getP()</code>
16394	ins.addNumeric(f,ex.getWeight(f));
13135	errormessage
5845	SegmentDataSequence();
7853	TokenizerTest(String
12959	if(onlySubviewer!=null)
15799	getUseHighPrecisionArithmetic()
9799	k=iseed1/53688;
3390	SegmentDataset
361	StackedLearner
11205	viewButton.setEnabled(false);
15278	log=Logger.getLogger(TestUI.class);
3787	finish
3226	Viewer",
11891	Real
7313	File(key+".labels");
19297	browsers
1983	Read
7054	annotatedcopy
20109	i=result.asBag().iterator();i.hasNext();){
19150	gbc(int
22837	//regret
11749	"comments
4439	Start
8290	textLabels=new
11117	if(testParams.crossDim)
17426	SubsamplingCrossValSplitter<T>
411	setInnerLearner(BatchClassifierLearner
14738	System.out.println(finalSD.toSummary());
17714	j<tau[i].length;
14574	fa){
12893	setContent(Object
7273	"+type+"]";
15385	stacking
24147	stirlingcorrection
17650	tauSigmaEstimate
1750	four
23261	if((len=piOut.read(buf))>0){
2367	docspans
7719	Accumulate
19404	getDocumentId();
315	multiclassifierteacher
8171	tauvup
22133	Labels");
3028	result=prefix+result;
21459	cdf(x)
19465	initializeTwoTrackerLayout(){
5372	while(docsLooper.hasNext()){
10745	textBase:
5440	textBase;
22995	updatevotedhyperplane
20261	stringBag.add("#tokens",s.size());
3915	Iterator<TrieMatch>
935	w_t[i],
23247	}catch(InterruptedException
4882	CrossValidatedSequenceDataset
7021	getfilefilter
19463	viewer.getGuessBox().addActionListener(
14337	System.out.println(i.next());
1200	shell
10001	treemap
20244	index1=s.size()+index;
15224	this(innerLearner,3,epochs);
14452	utf8
22581	MyCLP
20267	exactSize(){
6590	insertString(int
4277	mixupProgramFile){
3939	lookup
6860	as:
3575	fileName=i.next();
16848	updatedViterbi
12510	arg
81	are
5590	Child:
22077	levelStack.push(levelName);
22479	mc.multiLabelClassification(fe.extractInstance(labels,s));
18942	((Configurable)(o)).guiConfigure();
18833	if(reader!=null&&pname.equalsIgnoreCase(name+"Help")){
17043	users,
18510	toShow="eval";
6141	HighlightAction(String
24132	0.918938533204673;
15409	this.baseLearner=baseLearner;
20074	classNameOrMixupFileName){
10604	log=Logger.getLogger(SequenceAnnotatorLearner.class);
14829	super.setCheckStandards(true);
15400	getParams(){
12293	this.base=ss.base;
2312	form
17326	createspaneditor
13909	incorrect)
17108	badInput(String
4656	p.add(instanceComponent(e),gbc);
1210	textBase
18632	<code>Type
9824	d[i]=iz*4.656613e-10;
20856	"+typeString+
16125	OnlineBinaryClassifierLearner))
18859	i=0;i<advancedParams.size();i++){
3369	seqdataset
22644	(Annotator)IOUtil.loadSerialized(annFile);
15673	getPMutualInfo(){
18728	if(r!=null){
7801	stddev
17800	estimators
6204	documentId==null?labels.closureIterator(truthType):labels
13927	jtable=
6713	this.tbViewer=tbViewer;
21859	explainedSeq.get(place.seq);
806	Phi(sequence),
1144	props.setProperty(LABELDIR_PROP,defaultRepositoryValue);
15998	additionally
7557	minimalmargin
7855	Convinence
12501	args.length;
20361	p=Pattern.compile("[\\W\\d]+");
15574	getuseconfidences
9729	HREF="http://nhse.npac.syr.edu:8015/nhse-rw/catalog/random/RANECU.html">
21460	(t-mean)
1596	this(new
4033	mode
18548	getinputlabel
1830	}catch(IllegalArgumentException
17465	"[SubCV
20412	typical
7777	"numbers
15818	init(Instance[]
20966	SimpleTestParams(){
23054	api
10285	trueData.add(example);
23380	acquire
22741	logLoss(c,
8216	for.
18194	ex|class="+examplesGivenClass[j]+"
9704	aproximately
14230	batchTrainBinary(Dataset
16316	j=example.asInstance().featureIterator();j.hasNext();){
7829	moe.
4590	javax.swing.BorderFactory;
11305	aslist
7540	//double
1024	point
12207	LONG_FORM_TYPE);
8748	BufferedReader
15112	isSorted;
8104	CHECK
9987	for:
11535	if(trainTest.showTestDetails){
15260	i<learners.length;
8435	now,
13973	getColumnCount(){
6123	documentList.setVisible(false);
15690	getPMutualInfo();
6385	diffSpan=i.next();
11589	TreeSet<Neighbor>();
13975	predicted,
14697	nameMatcher.doAnnotate(annLabels);
9426	Logger.getLogger(TrainTestExtractor.class);
13665	copy(){
2664	show
337	org.apache.log4j.Logger;
8763	aux
1101	data.properties
11134	MultiClassifiedDataset((MultiClassifier)c,
21891	map.put(o,new
4451	Evaluation
10055	*<p>
19483	viewertracker2
17530	estimateMean(vCnt);
20020	result.right()
6189	.instanceIterator(guessType,documentId);
12398	shortForm.length()
3254	edu.cmu.minorthird.util.IOUtil;
4646	super(instance);
5960	getclassindex
7798	avg
19961	strataiterator
13657	learnerFactory;
22094	except
6274	font
20892	clsLnr=learn;
19106	"http://minorthird.sourceforge.net/javadoc/"+javadocLink;
23923	k==n)
22841	updates.
2384	savedocswithembeddedtypes
22044	progam
22821	updates,
18148	Nigam,
15221	GenericCollinsLearner()
598	awt
7398	gettruthlabels
7752	b.count;
1152	log.info("expect
6160	"+fmt.format(sr)+"
6968	this.label=label;
13662	this.learnerName=learner.toString();
21567	updates;
5520	mappings.");
13671	setMultiSchema(MultiExampleSchema
3483	interface...
18454	edu.cmu.minorthird.text.learn.TextLabelsAnnotatorTeacher;
5323	currSrcEntry=textBases.get(srcName);
8827	getConfidence()
10523	log.info("testScript");
5733	childdocmap
13056	foo.
18889	Object[]{url});
11944	WIGAN
1467	foo'
13329	subview=new
15800	defaults.getProperty("trainer");
22434	care...
22034	fresh
12526	forms
17498	statusField=new
19923	filter.transform(
8526	tagging
21021	TrainTestParams{
10405	(pos,totalPos-pos),
14786	fromfile
1137	(props.getProperty(LABELDIR_PROP)==null)
459	fold
14371	edu.illinois.cs.cogcomp.lbj.pos.POSTagger;
21784	inst=new
9737	DEFSEED1=12345;
12235	Vector<String>
4997	doc=new
16352	updateVotedHyperplane(votedCount);//first,
996	collinsperceptronlearner
17529	(sumX+prior*1.0/scale)/(sumWgt+1.0/scale);
1582	Generic
15664	getChiSquared(){
9606	non-initial
21416	aug
2445	negative
19882	defaultweight
13368	'goodness'
426	innerLearners[i].setSchema(schema);
14349	getoffset
16693	FileOutputStream(file),
17026	seqlen
16286	VitorBalancedWinnow(boolean
11366	false);
24002	nested
4163	gbc.fill=GridBagConstraints.HORIZONTAL;
22099	That
16331	updateVotedHyperplane(votedCount);
11083	multiClassifier.multiLabelClassification(instance);
13327	//panel.add(new
7036	valfield
8300	bagofwordsfe
1470	coded
20986	Iterator<Example[]>it;
10539	formats
17673	StringBuffer("chain
16408	minimization
7469	s=w_t.score(x);
9974	previousClass
18905	if(browser==null)
3819	endIds=null;
15426	//new
15312	Recommended.VPHMMLearner()",
3180	UnionIterator<Feature>(
13045	"-gorp"
4547	directive
22262	if("defSpanType".equals(keyword))
9475	trainTest.labels.getTextBase().documentSpanIterator()
17271	usermap
3572	EncapsulatingAnnotatorLoader");
10548	validClassNameSet;
16485	endTag=baseTag+"End";
11767	ARE
18498	edu.cmu.minorthird.classify.algorithms.trees.*;");
21691	if(editSpanCursor>=editedSpans.size()){
15554	"+k+"
10830	log.debug("selection
23019	LeaveOneOutDictTransformLearner(String
7109	loadfrom
10112	negative[i]=
953	Explanation.Node("Hyperplane
6601	setCharacterAttributes(0,getLength(),SimpleAttributeSet.EMPTY,true);
4200	statusMsg.display("saving
9912	log.debug("correct
20321	StringBagResult(String[]
23212	scrollDown();
15151	ig2){
16623	fileOptions=loadOptionsInPropertiesFormat(new
1157	array
2125	format.
10606	seqLearner;
2107	if(dir.exists()){
8811	'details'
6811	format)
19072	selector.classBox.addActionListener(new
16027	if(compressGroups)
22577	requireList=new
18627	"property"
22226	if(statementType==Statement.TRIE){
2786	if(currentCursor<0)
18154	Classifiaction
22624	ann.annotate(labels);
9018	Inversion-
19526	isPositive()
16725	laffter=s;
7140	reweight
13330	SmartVanillaViewer(tc.multiClassifier);
904	historySize,
23959	value</code>.
19983	mixupcompatible
1592	historySize)
444	classes
15441	pc=new
10590	binary_example_schema
17323	<labelfile>");
1370	mixupFile
2342	loadserialized
15339	edu.cmu.minorthird.classify.transform.PredictedClassTransform;
4429	edu.cmu.minorthird.text.learn.experiments.ExtractionEvaluation;
7020	excel
2944	splitPane.setRightComponent(controls);
7057	CommandLineUtil.BaseParams
699	historySize;
16753	option=line.substring(0,eqPos).trim();
13953	i=cd.dataset.multiIterator();i.hasNext();){
1411	(!f.exists())
10611	seqLearner,
15216	<p>As
10857	StyleConstants.setBackground(gray,
15159	sb=new
13972	cd.dataset.size();
1131	System.getProperty(SGML_MARKUP_PATTERN_PROP,".*");
13409	i=rankingMap.keySet().iterator();
3363	spanprop
22442	log.debug(labels.getTypes().toString());
20279	newSet.add(set.first());
10240	selects
14481	lowRiskNameList=new
14264	negtrain
13359	"walkerScore",
13197	explainFindSpans(TextLabels
5884	features));
4844	stemming
20974	setTestsetFilename(String
23958	<code>long
23164	piErr
10330	outcome,
5004	contextSlider;
3208	labels[j-k-1];
1082	SGML_MARKUP_PATTERN_PROP
13131	consumed
10781	"whatever";
1912	setSpanProp(StringTokenizer
15239	duplicatePrototypeLearner(OnlineClassifierLearner
3122	lastobj
7178	{this.fe
19733	BeamSearcher
5897	schema.getClassIndex(ExampleSchema.NEG_CLASS_NAME);
14148	execute
6127	SpanRenderer(spanArray);
13870	dataset,MultiDatasetIndex
1952	CLOSE_ALL_TYPES:
11434	Airoldi)
1396	loadObject(String
22438	from(s).tokens().eq().lc().punk()
19371	viewerTracker.setSaveAs(file);
17791	Sum(double[]
2398	documentspanstartindex
1608	i<schema.getNumberOfClasses();
2211	y=0;y<sortedTags.size();y++){
22035	TextBaseManager("root",labels.getTextBase());
20910	crossDim=true;
12208	labels.setProperty(
3815	node
5387	spanType
22614	filePC=
11608	d=classCounts.get(s);
17022	backpointer
13845	answeredQuery.getLabel().possibleLabels();
23888	often
7942	spanTypeTokenizer.splitIntoTokens(sampleDocs[1]);
18657	List<Class<?>>
11508	-baseType
763	Example[]
376	Splitter<Example>
8718	//System.out.println("count
21488	nextDouble()
13921	targetFeature=dc.targetFeature;
12237	mTestDefinitions;
23002	"leave
17340	(learner.hasNextQuery()
9454	(train.learner==null)
2170	through
15606	LearnToClassifyTest()
18450	edu.cmu.minorthird.classify.sequential.CrossValidatedSequenceDataset;
4945	}});
11377	file.getParentFile();
21221	source){
1730	CLOSE_ALL_TYPES,
17012	setvotemode
16509	hasUnlabeled(){
5533	if(curr.srcOffset<=parentOffset){
7765	population
8510	IllegalArgumentException(loadFile+
17407	log.info("Predictedstat("+i+")="+stat);
8259	setTokenPropertyFeatures(labels.getTokenProperties());
19240	htmleditorkit
11390	externalLabelFile);
2035	"+s.getDocumentId()+"
4744	PFList=new
13235	Boolean
20272	super(name,fe,set);
14891	them)");
9590	trainlist
20998	NOTE:
5794	len<=tokens.getMaxWindowSize();
19087	"+value);
19045	checkbox
3288	getCLP(){
21312	TrainClassifierParams
20331	lcBag=new
14396	PlainToTokenParser(new
9282	mean_max
10664	SequenceAnnotatorLearner(dummy1,fe,reduction){
6671	labelBox=new
3469	newLabel;
19809	'what
2029	if(s.size()>0){
3554	java.util.regex.Matcher;
2518	(int)(exA.getLabel().numericLabel()-exB.getLabel()
24347	CompoundTokenizer
10899	if(fe!=null)
19098	if(selectedItem.indexOf('@')>0){
18198	examplesGivenClass[j],numberOfExamples);
2430	rank
6749	not.
23153	norm
22740	c,Dataset
19030	"+spinner.getValue());
16065	Randomly
2041	empty
8305	oriented
19395	charLo,
60	reset
9259	rand
22275	tbmanager
23287	jscrollbar
14054	Map<String,Integer>
12118	abbreviations
1778	<code>closeType
23782	4.470115461512686E105,
18231	System.out.println(mi);
20651	double[JNeg];
22734	trainData,SequenceDataset
4527	doTest(){
15995	tominorthirdclassifier
10918	docID=DOC+docNum;
14979	svm_node[]
24119	+1/1260
10044	comparesegmentsandincrement
22792	if(label.equals(getExample(f,j).getLabel().bestClassName())){
23368	showLabels(TextLabels
7454	BBMira(){
13283	getlinksmap
9543	v.setContent(o);
12204	labels.addToType(shortSpan,
2630	documentList,SpanPainter
1897	Details(StringUtil.atof(confidence));
22169	split=statement.getSplit();
14020	Explanation("[explanation]"));
13992	ex=(Explanation)o;
23262	errorArea.append(new
16597	ms=getClass().getMethod(arg,new
19228	beaninfo
17766	Double(lambda[i])
11229	errorArea
9368	copy=new
9511	createspanprop
8690	"\t"
10636	schema=seqData.getSchema();
2515	Example)){
17536	Math.round(
12346	openParenIndex
19642	denom
11586	distance
21287	analogous
15675	denon
8498	crAnn.annotate(labels);
4521	mainClass;
6965	EditedSpan(Span
16281	voted="true"
5599	while(keyIterator.hasNext()){
6231	renderer.setContextWidth(value);
15373	useLogistic;
224	note
17313	spanEditor){
5724	childtoparentmap
4106	MixupProgram(mixupProgramFile);
4523	mainClass,String[]
10026	(!addedASegmentStartingAtPos)
11853	WINS
7862	//TODO
22742	loss/d.size();
3792	unknown
22945	tmp=0;
15436	s=dataset.split(params.splitter);
22750	geteffectivelevel
3384	<p>In
16745	line");
12271	currString)
4923	cds[k].getClassifier(),
4888	CrossValidatedSequenceDataset(
1266	scriptDir
2302	close_by_operation
18738	if(rootClass.isAssignableFrom((Class<?>)validSubclasses.get(i))){
13050	<p>If
5968	apply
8840	animated
21731	movespancursor
20345	StringBagResult(extend("tr/"+regex+"/"+replacement),fe,trBag);
19431	setCharOffset(int
440	where
12144	(http://biotext.berkeley.edu/papers/psb03.pdf)
21380	javax.swing.tree.*;
20075	this.requiredAnnotationFileToLoad=classNameOrMixupFileName;
12405	StringSpan(currSentence,tmpIndex
2822	viewlabels
24367	matchingParentSpan
34	ExampleSchema
1910	}catch(NumberFormatException
23232	+"of
8641	strsize
16714	ha!");
5709	docnum
295	if(query
544	finalClassifier.classification(newInstance);
10977	edu.cmu.minorthird.classify.multi.MultiEvaluation;
7596	setSignalParameters(CommandLineUtil.ExtractionSignalParams
18536	-learn
8310	setfeaturewindowsize
8895	Graz,
20377	swBag.add(str,n);
18323	threshold,boolean
15324	UITest
1466	classpath
9485	train.learner,
22640	getAnnotator(String
16191	index.addExample(e);
8873	<tt>pprsc.c</tt>
9904	i=dataset.candidateSegmentGroupIterator();
20053	SpanFE(){
17295	tottestsize
23777	2.48003554243683E96,
21840	AdaptedSequenceClassifier(SequenceClassifier
19283	apple
11333	restore
23581	PoissonLearner
13646	BeanShell
6069	add(documentCellHeightSlider,gbc);
4281	frame=new
3348	uimain
1732	DONT_CLOSE_TYPES
208	util
11916	WITH
5915	'explains'
17925	two(){
14374	CCG's
12160	expansion
13894	group=new
24041	(k<length1+length2)
16898	backgroundClass
12413	currSentence.substring(closeParenIndex
20754	DatasetLoader.loadMulti(new
15288	(Evaluation)result;
20685	c.setPmsNeg(f,mudeltaNeg);
15083	rate
13901	selected,ButtonGroup
2144	docString=
17369	NaiveBayes();
19018	typeOrBrowsePanel.add(textField);
11373	(fileName.lastIndexOf('.')>=0)
16562	log=Logger.getLogger(BasicCommandLineProcessor.class);
20043	occurence
11889	Deportivo
18035	ClassLabel.binaryLabel(+1)
11591	e=i.next();
17399	checkStats(stats,
14725	TextBaseViewer.view(nameMatcher.postLabels);
17478	subcv
8686	"\w"
18759	validSubclasses.add(subClass);
16844	super(innerLearner);
16447	normalizeweights
17702	sig[it]
16373	balanced
23656	5.554733551962801e-03,
3571	System.out.println("Reading
1164	ArrayList<String>();
139	implementation
9682	reducedocument
6639	attribs
16895	seqLen
3462	newLabel)
14373	UIUC
5394	filtered
11410	labelsfile
17306	spanEditor));
11079	annotatedDataset
7297	statusMsg,boolean
9387	"+RealRelationalDataset.getAggregators());
15721	basically
15370	crossValSplits=5;
4823	richard
21934	[-reduction
10018	maxSegmentSize)
20838	type(String
22719	MultiDatasetClassifierTeacher(trainData).train(learner);
17253	"+splitter.trainList.get(k));
11138	testParams.testData);
15905	doTrain(iitb.CRF.DataIter
9888	maxSegmentSize;
1493	evalerror
19551	(bestClassName()==null)
8565	observed
4760	setSpanType(String
6607	charIndex+beginContextSpanInDocument;
873	Phi(sequence)-Phi(viterbi)
17329	unspecified
4437	suite=new
16232	linear-threshold
1993	file)));
9015	SWITCH_MEAN)
15320	"-saveAs","tmp.ann"})
2999	canHandle(int
14539	"+docSpan.getDocumentId()+"...");
7964	char.
14214	multiclassificationsignalparameters
1251	script)
2770	value=slider.getValue();
21291	fails
6722	i=0;i<spanTypes.length;i++){
14134	HREF=\"http://minorthird.sourceforge.net/tutorials/Mixup%20Tutorial.htm\">Mixup
3235	numfeatures
1201	script,
22179	phraseList=statement.getPhraseList();
14076	messageviewer
3255	edu.cmu.minorthird.util.JointCommandLineProcessor;
20166	SetResult<T>
3978	button.addActionListener(this);
1293	"+f+":
8266	j=0;j<tokenPropertyFeatures.length;j++){
15450	trainData.size()+"
7073	edu.cmu.minorthird.classify.experiments.ClassifiedDataset;
8904	ACM
11442	learner=Expt.toLearner(argv[1]);
20784	resultToShow=null,resultToSave=null;
4306	arguments.
3625	file-system-independent
19302	mozilla
8966	l_nu,
6946	j=0;j<editedSpans.size();j++){
6983	editspancursor
2151	j=labels.instanceIterator(type,documentId);j.hasNext();){
17007	JLabel("ViterbiSegmenter:
6467	nulltruthtype
10274	trueData=new
21942	this.historySize=n;
6788	label-"){
13548	0.5*Math.log((W_Pos+SMOOTH_PARAM*Z)/(W_Neg+SMOOTH_PARAM*Z));
17814	numberofclasses
17690	p="+p);
3160	this.instance
10833	content="+argument);
14348	setcharoffset
23256	sticks
189	immutable:
20954	this.testData=type.testData;
5239	chars
23876	1.5036165148649983E300,
7847	garden
5200	childName);
11171	ts.setContent(o);
13902	group){
13410	orderExamplesList(rankingMap.get(subpop));
1913	prop=advance(tok,in,file);
9776	RandomSeedable.
21177	cleargraphiccontext
17185	j=0;j<folds;j++){
14173	mixupparams
19725	getnormsquared
1051	edu.cmu.minorthird.text.gui.TextBaseViewer;
20769	getLearnerInSequentialMode(){
15026	FileReader(argv[0]));
15570	useconfidence
20208	SpanSetResult
19649	w_t.increment(example.asInstance(),y_t/x2);
18020	base.loadDocument("f1","Mud
17697	ProbabilityFactory.AlphaSigma(sig[it-1],
2759	}catch(Exception
19168	flag=true;
17010	TitledBorder("ViterbiSegmenter"));
18470	tokPropFeats){
20086	extractFeatures(span);
2362	getdocumentid
20488	this.committeeSize
9321	HashMap<String,Set<String>>();
17101	"+f[2]+"
9399	aggregators
11925	TOURNAMENT
15456	cv-like
16057	if(e!=null)
19170	setName(String
4311	-textBase
16472	binary");
1444	sampleclassificationproblem
15193	Repaint
10203	forest
7622	i=0;i<splitter.getNumPartitions();i++){
8095	+xp*Math.log(wp*(1-tau)*sig)
788	vectors
13471	map.put(ftr,set);
21945	if(signal.spanProp==null&&signal.spanType==null){
22843	losses)
7342	editor.initializeLayout();
6430	getspanpainter
20205	doc(){
10213	ADD
11735	"DocPerLineTestData.base@line:3",
20341	StringBagResult(extend("toConst"),fe,trBag);
3296	valid
10337	if(posWeight==negWeight)
1373	log.info("Adding
20311	property,String
2566	javax.swing.text.Keymap;
20657	eloo=data.iterator();eloo.hasNext();){
14423	FileOutputStream(outFile),"utf8"),true);
1651	(MultiClassClassifier)o;
2713	N"),downButton
15786	getMaxIters
17076	List<List<T>>
7766	devation
9326	aggregator,
18529	tokPropFeats);
16632	'help',
15672	//Pointwise
1228	"labelDir"
21685	DeleteCursoredSpan
21751	newFeatures;
12333	ss.base.substring(ss.lo,ss.hi);
17718	estimateMean(tau[i]);
19480	editAndLabel(labels,new
13516	margins[i][j]);
22348	TestSuite(ViewerTest.class);
8114	p(tau|s,x)="+ProbTauGivenSigmaX(tau,sig,vlow,vup,xr,xp,wr,wp,vbeta)+"
17818	mcmcestimatedirichletpoissontausigma
6110	wasEdited=true;
19914	frequencyModel
14131	setAnnotatorOutputParams(CommandLineUtil.AnnotatorOutputParams
22316	getphraselist
14914	DatasetClassifierTeacher(trainSet)
13252	to=link.getTo();
4143	truthLabels,editor.getViewer(),errorPane));
6489	spanisdirty
14117	log=Logger.getLogger(RunMixup.class);
15121	Info-Gain
4124	JScrollPane(new
23863	3.0897696138473515E271,
23825	3.393108684451899E190,
15316	0.125
14420	writer=new
16771	processedargs
8603	(diff
3958	FileChooserViewer
9295	rectangular
20371	swBag=new
22653	ViewerFrame(ld.nameOfFileToView,new
2527	rankings'
21255	log.debug("Redirected
2201	List<TagInfo>
21062	seqlnr
15495	ngbiter=ngb.iterator();ngbiter.hasNext();){
15432	*predicted*
6354	if(sel)
10059	log-odds
20405	accepted
12407	tmpStr;
1815	FileReader(file));
7958	spanTypeTokenizer.splitIntoTokens(newDoc2);
23646	1.664469118982119e-02,
21898	getCount(Object
14225	BinaryClassifierLearner{
8055	min,
12128	definition,
16697	processor");
19112	editor.setContent(helpString);
5459	Map<String,SortedSet<MapEntry>>
19223	if(instanceMap.size()
7688	dosplit
6239	DocumentCellWidthSlider
4941	TransformedViewer(cds[0].toGUI())
18855	i=0;i<inLineClasses.size();i++){
18081	gamma;
843	(differenceAtJ)
2801	listselectionevent
22761	TextLabelsAnnotatorTeacher(TextLabels
9249	this.mean
22280	setprogram
19495	ClassLabel(String
18074	gamma,
12512	(extractAbbrev.testMode)
1867	for(int
10323	(sub)tree
22887	pos_t.multiply(f,alpha);
22070	Makes
6953	i<editedSpans.length;
2982	getControls(){
9087	range
21297	annotatorname
10609	CollinsPerceptronLearner();
20858	-type
19676	//making
10	This
5954	endfeatures
2168	overlap=false;
14985	x[j].index=atoi(st.nextToken());
17456	trainIt=new
13804	prop){
4184	Dimension(100,100));
6288	TreeSet[spans.length];
3197	starting
10641	probably
1386	(Mixup.ParseException
3893	w=i.next();
4982	setContent(span);
1963	type=j.next();
1694	(see
22853	if((a<1)||(b<0)||(b>1)){
14222	BinaryClassifierLearner,
7165	Scheme
6638	overrides
19152	gbc.insets=new
14980	x=new
11524	CommandLineUtil.toMultiDataset(base.labels,train.fe,
14903	classifications.
10543	Schema
8379	new.ann
8360	confidence
6654	importType,exportType;
21659	spanPainter.paintDocument(documentSpan.getDocumentId());
16358	MyClassifier(pos_t,neg_t,theta);
7980	miny
20796	o=this;
8092	-wr*tau*sig
12015	checktype
20163	process
5228	really
20226	.subSpan(lo,len));
20773	clsLearner=new
13760	controllableviewer's
3873	chain
11863	successfully
21224	\""+source+"\"");
14565	nameList,Span
18938	selected){
527	"+className+":\n"+
5057	table[i][j+1]=labels.getProperty(s.getToken(i),props[j]);
12042	getnumlabels
4197	if(saveFile==null){
24098	IllegalArgumentException("Negative
11845	testLoadWordPerLineFile()
20481	committees.
6458	spanrecall
23733	6.204484017332394E23,
5073	table[0][1]=s.getDocumentGroupId();
1095	props.load(in);
9318	serialVersionUID=20080128L;
22716	k<1;
19332	edu.cmu.minorthird.text.TextLabels
6092	i=base.documentSpanIterator();
1075	scripts
9933	source";
11660	i=b.featureIterator();i.hasNext();){
17050	userId
11807	assertNotNull(base.documentSpan("cmu.andrew.official.cmu-news-2633_0"));
11895	AND
17436	subsampleFraction){
2514	Example)&&(instB
22428	loader=new
21191	isindeterminate
8466	(ConfidenceReportingSequenceClassifier)seqClassifier;
20162	emit();
17544	//System.out.println("p="+p+"
10190	posweight
17975	data=DatasetLoader.loadFile(dataFile);
8070	vup,
18811	JOptionPane
14836	1.0,1.0,
11200	results")
15412	depth){
16584	log.debug("Consuming
3719	definitions
14939	commented
4492	CRFLearner(1,20),
20992	They
16417	thick
11314	presentation
16384	instance=example1.asInstance();
1005	newnumberofepochs
16310	vneg_t=new
9236	f5*r5))
20955	this.testDataFilename=type.testDataFilename;
15864	null));
20548	setSemiMarkovLearner(BatchSegmenterLearner
14647	first,boolean
6152	tp=spanDifference.tokenPrecision()*100;
9642	baseTag=i.next();
18977	if(type.equals(String.class)){
12595	sindex
629	pergamon
10671	SequenceAnnotator(SequenceClassifier
3412	Then
17273	profilemap
7554	mira
11246	subpanel2.add(
23205	se){
23329	testProgram
20813	results";
6593	attribs)
3999	addActionListener(ActionListener
3797	split(Iterator<T>
11419	this(dataset,false);
19979	Annotations
18608	java.beans.Introspector;
18372	loglik
3898	b.append("
2425	java.util.HashMap;
16924	lastT<t;
20191	emit(){
20937	loadFrom=null;
20696	i=0;i<N;i++){
14065	map.put(label,new
9701	multiplicative
5506	childToParentMap.put(childDocId,childEntry);
5328	currSrcEntry=currSrcEntry.getParent();
17797	i<v.length;
4830	tflist
11600	HashMap<String,Double>();
12091	misc
11577	KnnClassifier(DatasetIndex
3667	log.info("Encapsulated
6960	"+k);
15980	yend
21305	edu.cmu.minorthird.ui.CommandLineUtil.TrainClassifierParams;
8303	bagoflowercasewordsfe
9283	max_value
10574	Determine
12011	use_xml
9416	loadreltempfile
10412	total
17804	vwgt
4153	Dimension(800,600));
8020	ProbabilityFactory
8801	charsequence
9288	nextint
3233	binaryfeatureiterator
19190	inner;
1549	regularities
11570	69--90,
2225	if(curTag.pos<docSpan.size()){
901	search
18999	log.error(ex.toString());
23168	Thread
7407	transform(Example
443	data,
23930	lookup.
18026	data1
13547	expLoss(margins);
6165	differenceIterator
20257	StringBagResult(extend("eq"),fe,stringBag);
4881	data.
23701	61.26170176100200198,
5201	parent
18032	data2
12879	(namedSubViews.keySet().size()>1)
9657	"+makePattern(baseTag));
19136	if(warning&&(numTypeSelectors>0||numTextFields>0)){
10082	classLabel.numericLabel()
23445	data=
21586	prevButton=new
4366	editor
11326	crossdim
11354	file/string
21049	saveasfilename
4338	base=FancyLoader.loadTextLabels(textBaseId).getTextBase();
11817	"location"));
10651	SequenceAnnotatorLearner.SequenceAnnotator(seqClassifier,fe,
23928	O(1);
14253	i=0;i<pos.length;i++){
3899	IDS:");
22199	labels.declareType(type);
18133	computer
16144	onlinebaseparams
3303	-spanType
20871	this.seqLnr.seqLearner=type.seqLnr.seqLearner;
19894	(frequencyModel.equals("document"))
6647	Interactivly
22492	tagset.add(tag);
10697	mainPanel=new
8465	crSeqClassifier=
867	viterbi[j].bestClassName(),
4506	4)"})
24070	O(1).
11765	BLANK
11969	assertEquals(msg5,
1579	edu.cmu.minorthird.classify.OnlineBinaryClassifierLearner;
20973	testDataFilename;
64	data!
17962	converter
11318	annotatedata
19928	setnumberoffeatures
4067	log=Logger.getLogger(this.getClass());
1166	i<=3;
6249	SpanMarkup
13397	data)
7533	somethingRemoved=false;
12223	'(')));
7120	reweighter;
22432	"bayes-testData.labels"));
23829	6.689502913449135E198,
23332	Reuters,
23346	!vp:t+
22422	BayesClassifiersTest(String
12663	i=subViewList.iterator();i.hasNext();){
10344	sucks
4011	converted
16320	neg_t.increment(f,1.0);//initialize
21041	loadmulti
5196	desired
11971	assertEquals(msg6,
7122	reweighter)
24336	SemiSupervisedClassifier.train()");
23971	Chebyshev
15974	crfdataiter
1655	onlinebinaryclassifierlearner
1449	configurable
20874	type.saveAsFilename=this.saveAsFilename;
22546	subpops.add(id);
11594	Neighbor(e,sim));
14582	hScore=fa.getHScore(tn);
14622	Object[s.length][];
1376	interp
14204	testclassifierparameters
11965	assertEquals(msg3,
15840	dataSize
899	constructed
2819	editorholder
12754	multiClassifier=ann.getMultiClassifier();
993	mike
9808	iseed2=iseed2+2147483399;
182	same
14821	double[]{
5566	parentEntry.dstOffset+(parentLo-parentEntry.srcOffset),
14001	ControlledDataViewer(),new
21805	SequenceClassifier.
4160	++row;
7434	MIRA.
18568	X.nextInt();
11068	jlpTest
15116	this.featValues=new
22293	currlabels
18156	Choen
14310	if(textTokens==null)
19634	example.getLabel().numericLabel();
370	DEBUG
2608	contextWidthSlider;
20307	filteredSet.add(token);
13172	AbstractSpanFinder
24301	instantiable
10291	think
11967	assertEquals(msg4,
8587	logp))
10073	Binary
10905	tb=labels.getTextBase();
7910	BasicTextLabels
12647	addSubView(String
10666	dummy2.getSequenceDataset();
18499	edu.cmu.minorthird.classify.algorithms.knn.*;");
14155	ViewerFrame("Result
3739	encapsulatingclassloader
18271	log-lik
21963	linkFile,SequenceDataset
13988	ExplanationViewer(Explanation
16049	g.setSubsequence(0,1,example.asInstance(),example.getLabel());
577	Classifier"));
18540	-show
20975	MultiTestParams
17257	size="+totTestSize);
5811	set_y(int
11628	similarity
20000	feature-extracting
2785	thing
6725	LabelDocument("Label
4849	BoneheadStemmer()
11250	panel.add(errorPanel,
1354	BasicTextLabels(base);
2067	prop+"
11961	assertEquals(msg1,
492	oldInstance,Classifier[]
4201	"+saveFile.getName());
10988	Main
21095	ProgressCounter{
20662	f=floo.next();
17726	"+tauAcceptRate[i]+","
22140	IllegalArgumentException("Level:
15505	values[index]=1;
15142	this.feature=f;
7733	isBinomial
5924	sarawagi
7941	spanTypeTokenizer.splitIntoTokens(sampleDocs[0]);
8521	wraps
9893	SegmentGenericCollinsLearner(int
17607	(classPrior+observedCounts)/(numberOfClasses+totalCounts);
9479	TextLabelsExperiment
8015	testxxx
9460	IllegalArgumentException("only
9761	<TT>RANECU</TT>
19653	((c_t>0)||(c_t<0))w_t.multiply(c_t/denom);
15155	scores*/
19347	happening
2286	bufferedinputstream
11963	assertEquals(msg2,
14136	if(mixup.fileName==null)
10137	posProb[i]=labels[i].getProbability(ExampleSchema.POS_CLASS_NAME);
2521	comparator
6969	this.id=id;
6233	DocumentCellHeightSlider
11516	getTrainingParameters(){
5907	CRF:
12109	sgmfeaturefactory
21571	highestnegativeexample
10825	getVisibleContent(){
16837	transformingsegmenter
12953	proposed
19188	this.y=y;
3690	again,
20322	fe,Bag<String>
14848	again.
10415	"+totalWeight);
388	this(
12165	Map<String,Vector<String>>
16390	filterFeat(Example
23381	multex
783	this,
9683	getinputtype
15829	init(tokens);
4783	array[type]=TF_IDF(array,numDoc);
19488	dispose_on_close
7632	measurePrecisionRecall("OverallTest",annFullLabels,true);
24064	1.4426950408889634
4477	"cspace.07",
473	stackedData.add(new
11633	classCounts
3998	this;
19002	textField.addActionListener(new
10569	getClassName(int
5732	curr
775	says
16996	ViterbiSegmenter
13935	isSelected,boolean
22501	val){
18340	fileOfCounts
20964	SimpleTestParams
16809	this.distanceNames
11707	base.size());
23257	readerThread=new
17669	it++)
5637	quinten
6445	unedited
18868	ep.setText((String)o);
7220	seqdata
14421	PrintWriter(new
18305	'threshold'
21704	MoveSpanCursor(String
6851	statusMsg.display("Training
13574	neg.iterator();
10783	labels.instanceIterator(tag);
5947	featurelooper
22100	createLevel(String
12987	MouseAdapter(){
7564	singer's
16533	tmp=new
14079	getdataset
11296	simpletrainparams
14793	java.net.URL;
12006	textbaseloadertest
13741	getControlledViewer(){
11431	Util.toInstanceIterator(dataset.iterator());
1573	edu.cmu.minorthird.classify.BinaryClassifier;
23146	trove
15576	getusetargetprediction
10802	say,
7611	if(num_partitions<2)
16649	methods[i].getName().startsWith("get")||methods[i].getName()
7232	setdocumentpool
8127	P(sigma|tau,X)
4043	showopendialog
19252	configurewith
2617	edited
13213	detailmap
988	discriminative
19484	addviewer
11288	tfidftransformlearner
8389	141.0
10928	BinaryTextClassifier(learner,fe);
20549	getSemiMarkovLearnerHelp(){
13624	orderexampleslist
23222	run(){
17147	ArrayList<String>(requests.size());
15018	prediction(String
18322	previousLoglik,
17279	badexample
20909	multiLabels!");
12412	longForm.trim());
3535	totalsize
13369	measure.
16813	LeaveOneOutDictTransformLearner
8951	Integer.MAX_VALUE;
20719	infogain
8159	dirichlet
17449	cvs=new
5844	segData
10563	validClassNames=newValidClassNames;
2054	save
9312	legalAggregators
20148	extend(name,addition);
8295	data",dataset.toGUI());
9117	Math.log(r1);
4651	p.setLayout(new
1760	<code>addToType
17393	v.averageLogLoss();
13915	filterOnFeature=false;
2410	buffer
10696	sa=(SequenceAnnotator)o;
6099	if(NULL_TRUTH_ENTRY.equals(truthType))
15535	classification(RealRelationalDataset
6662	learner=null;
22967	yishay
17810	sumwgt2
7254	attrs
3379	2003-2004,
6167	renderer.highlightDiffs(differenceIterator(documentId),documentId,
13949	filteredData=new
10816	this.zoomedIn=viewer2;
14124	annotatedLabels=null;
3652	'"+fileName[i]+"':
21338	UnionIterator(Iterator<E>
15724	pointwisemutualinfo
21204	log.warn(e);
21237	isn't
914	this.numClasses
22080	offLevel(String
7157	InsideOutsideReduction());
1907	if(len<0)
1610	(OnlineBinaryClassifierLearner)innerLearnerPrototype.copy();
20479	Routines
18645	visualized
15536	testData=dataset;
22883	if(ll.size()>LIST_SIZE+1){
18804	Editor":"Property
15144	]";
21125	this.startTime=this.lastOutputTime=System.currentTimeMillis();
15945	BorderLayout.NORTH);
8857	operate
4088	MixupProgram();
10202	java.util.Vector;
2003	IOException{
17207	"+oi+"/"+
4101	if(truthLabels==null)
11659	bNorm=0;
1508	getlabels
2188	if(overlap)
23131	norm+=unnormalized*unnormalized;
19248	instancemap
15466	Aggregators,Map<String,ClassLabel>
729	<br>The
11425	fron
1097	from
7802	stderr
9921	compareSegmentsAndIncrement(schema,
23270	imperfect
2790	documentList.setSelectedIndex(nextCursor);
23802	1.156772507081641E144,
11289	transformingbatchlearner
19270	dialog
16350	(pos_t*count)
20	between
14284	constructor
14180	getrunmixuphelp
1028	twists
14792	java.net.URI;
8058	Probabilities
23142	important
1783	ID</code>
22911	if(negFactor<3)
16761	in,String
8076	prob=0;
23831	9.875044200833601E202,
24375	currOffset
20127	'emit()'.
1743	IOException,
20211	fe.textLabels.instanceIterator(type,s.getDocumentId());i.hasNext();){
9739	67890
17704	posterior
989	hidden
13484	minExpLoss
4758	getSpanType(){
23219	doMain
19031	Object[]{spinner.getValue()});
1102	found
2780	currentCursor=documentList.getSelectedIndex();
832	k=1;
21770	.featureIterator());
14735	.instanceIterator(nameMatcher.predType+"_updated_fixed"),
13289	multiClassifier
23609	w|Neg="+nweight);
11678	anorm
9205	[m,
10410	wn0=(totalNeg-neg)/totalWeight;
21178	currentdepth
7702	Math
12421	findBestLongForm(StringSpan
5313	Lists
6386	documentIdOfS=diffSpan.getDocumentId();
4020	gridlayout
3080	preferstoberesized
7917	"doc0"),
17000	c,ExampleSchema
5279	mapper.getChildMapping(srcDocId,srcOffset,length);
3753	Examples.
6201	documentId==null?labels.instanceIterator(truthType):labels
248	Carnegie
15831	clabels
10140	label){
18267	5.3.
4909	preparing
4129	if(groundTruthLabelsFile!=null){
19403	TextToken's.
1326	TextBaseLoader
21228	"+source);
9362	Split(){
23398	edu.cmu.minorthird.classify.experiments.SubsamplingCrossValSplitter;
7142	edu.cmu.minorthird.classify.sequential.SequenceDataset;
22690	d,Splitter<Example>
8091	"+vlow[1]+"<"+sig+"<"+vup[1]);
24312	fac2
24311	fac1
15498	pre=PredictedRlt.get(ngbID).bestClassName();
1513	mutabletextlabels
447	split
16700	-scoff
18809	popupFrame
18257	5.2.
16052	i=groupList.iterator();i.hasNext();){
409	setSplitter(Splitter<Example>
2553	java.awt.event.ActionEvent;
18741	shortenedClassName((Class<?>)(validSubclasses.get(i))),instance);
18456	pre-labeled
18950	reader2=i<props.length?props[i].getReadMethod():null;
12934	hearBroadcast(int
13666	learner=(MultiLearner)this.clone();
2297	treeset
3073	controlledviewer
12665	if(!subView.canReceive(content))
23420	KernelVotedPerceptron(),0.0,0.0));
3480	subPopId?");
2812	viewentiredocument
6894	subpanel.setLayout(new
18275	5.5.
15272	VanillaViewer(c);
6861	label);
16825	innerLearner.batchTrain(
6672	addButton=new
22568	CommandLineProcessor.Configurable{
20130	extractFeatures(labels,span)
14948	"+e2.maxF1());
449	k=0;
8241	if("*".equals(commaSeparatedTokenPropertyList)){
12951	displayed.
22993	factor
11627	log.warn("total
12903	displayed,
21599	buttonsThatChangeStuff.add(addButton);
21664	fact
22666	relabeltext
6420	windowconstants
15943	JLabel("CRFLearner:
22212	IllegalStateException("no
18864	ep=new
651	getinnerlearner
717	getHistorySize()
19032	panel.add(spinner,gbc(1,row));
21257	findAnnotator(annotationType,redirect);
18270	5.4.
15519	AugmentedInstance(ex.asInstance(),truefeatures,truevalues);
560	toGUI()
9632	tagset.add(baseTag);
22425	testBayesClassifiersTest(){
6850	textLearner.completeTraining();
4172	gbc.fill=GridBagConstraints.BOTH;
17131	"+subpop+"
21241	served
5485	parent:11
17429	trainIt;
22411	joshua
13178	FilteredFinder(BinaryClassifier
12764	dimensions");
4743	TFList=new
19146	scroller
20603	SmartVanillaViewer(sa.segmenter);
1148	log.info("labelDir:
21339	a,Iterator<E>
17744	(lambdaEstimateVec[i].getPms().get("lambda")
13434	oppositve
9348	aggregators;
21413	Node(String
17103	oldProfForRequest+"
2409	taginfo
6424	documentcellheightslider
3766	AbstractLooper(Iterator<T>
5866	startScan();
9610	transient
23899	<li>k==0<tt>:
18565	double[N_int][3];
10386	schapireSingerValue(double
6358	spanComponents[index];
8813	facts.
10304	RandomTreeLearner(TreeSplitter
18655	log=Logger.getLogger(TypeSelector.class);
10703	mainPanel.add(subView);
8693	indentations
6967	this.s=s;
21618	enabled:
3336	"+save.saveAs+":
1899	labels.addToType(span,type,details);
4927	classified
8802	featurename
6833	File(file0
10299	bestThreshold=threshold;
5163	rootBaseName,TextBase
3913	MyResultIterator
11731	"DocPerLineTestData.base@line:2",
22292	importlevel
14185	CLASSES=
6576	leftContextChars=span.getTextToken(0).getLo()-beginContextSpanInDocument;
18245	5.1.
19846	(OrderBasedInstanceTransform)learner.batchTrain(dataset);
10339	log.debug("leaf");
5899	SemiMTFeatureGenImpl(schema.getNumberOfClasses(),schema.validClassNames(),options);
4920	trainCds[k]
9724	<CITE>Commun.
21758	this.newFeatures=new
18554	Gamma,
9023	llll
2417	sortedmap
16471	IllegalArgumentException("The
1722	"CLOSE_BY_OPERATION"};
1618	correctClassIndex
22347	super("ViewerTest");
21395	Explanation(Explanation.Node
1183	'foo'
12638	ArrayList<Viewer>();
11309	gettestparameters
12102	FeatureFactory{
23361	guessProg
14097	concisemultiexamplerenderercomponent
12797	hasType(Span
7000	moveonlinedocumentcursor
15117	ArrayList<Pair>();
9878	java.util.TreeMap;
1598	this.innerLearnerPrototype
20961	getClassifierFilename(){
18713	this.advancedParams=advancedParams;
21437	supporting
22808	counts:"+getCounts(f,j));
22236	drops
14042	instanceViewer.setContent(example);
164	classifier
10264	fc){
21867	classifies
14484	postLabels=null;
13176	SortedMap<Span,Details>
636	html
20913	multi;
19195	"+getName()+":
13002	specifically
1811	null");
16829	leaveoneoutdictversion
23116	featureFreq=new
6472	guesstype
18434	list,
529	buf.toString();
3411	K=3.
855	InstanceFromSequence(
20054	SpanFE.STORE_AS_BINARY,
23095	editorOutputLabels;
22276	rootlabels
521	explainTransformedInstance(ExampleSchema
18616	javax.swing.SpinnerNumberModel;
17041	"user"
12035	fail
391	splitter);
13200	"+documentSpan+":\n");
2196	list.
6893	subpanel=new
21807	adaptedClassifier;
272	@Override
20379	"remove"
16146	get_labeleddataparameters
10173	correct;
10176	correct=
16107	Learner
8452	"+extractedSpan);
12787	dict)
4708	table
7065	m.base.processArguments(args);
8415	docId=docSpan.getDocumentId();
647	create
6516	edu.cmu.minorthird.classify.semisupervised;
8657	featureName,
8988	rearranged
22206	fileToLoad);
21098	JProgressBar[]
17799	maxCnt;
23760	1.5511187532873816E66,
21278	findNativeAnnotatorFromString(String
9822	i,k,iz;
9922	correct,
4159	row=0;
10770	loader.getLabels();
19173	setX(int
17450	CrossValSplitter<T>(random,folds);
2827	downbutton
8264	if(useCharType){
56	Make
2181	position
4634	SmartVanillaViewer()){
6052	pressed
7229	setannotationtype
18694	this.validSubclasses.addAll(Arrays.asList(validSubclasses));
6038	resetDocumentListAction=
13122	getCLP();
6113	statusMsg.display("no"+(onlyEditedSpans?"
22445	data.add(new
3398	(the
1768	character
9360	splitter){
3677	clazz=myClassLoader.loadClass(className);
18068	<tt>nbp.c</tt>
17561	vWgt[i],2
2863	requestfocus
16251	Additionally,
5663	srcdocid
21272	ObjectInputStream(input);
20494	ithBag
20712	mudelta;
23041	SoftDictionary();
7735	add(double
7532	while(somethingRemoved){
8938	l_my,
22217	extendLabels(labels,span,statement);
15040	libsvmtest
4802	email=i.next();
23702	64.55753862700633106,
14149	program:\n"+program);
266	MultiDataset
21732	nextbutton
6004	if(item.equals(label))
23296	securityexception
23517	LearnerTest(String
17299	getSpanEditor(){
12637	subViewList=new
22534	crossValSplitter;
22554	subpopulations
12486	<filename>
24364	parentTokenizer.splitIntoTokens(string);
15214	edu.cmu.minorthird.classify.algorithms.linear.*;
14780	transformtoken
8221	windowSize;
5413	currInstance=typeInstances.next();
19114	"+pname;
4952	cvd.v;
19149	wholePanel;
9350	aggregators){
22804	i=featureIterator();i.hasNext();){
21279	c=findClassResource(className);
20749	Expt.toDataset(s);
11585	"+instance);
23272	scrollDown(){
8899	(1999),
14516	Names:");
12865	Maps
1179	result.toArray();
192	on-line
2030	lo=s.getTextToken(0).getLo();
8860	generator;
12984	jtable,final
12740	hmmmodel
11821	"sentence"));
5436	internally
7959	spanTypeTokenizer.splitIntoTokens(newDoc3);
10592	classifiers.
22497	makePattern(ExampleSchema.POS_CLASS_NAME));
14796	Libsvm
1670	positive
15255	classifiers)
172	date.
16179	k=5;
20289	SpanSetResult(extend("filter_"+f.getName()),fe,applyFilter(f));
22475	encode
21924	history(String
22203	labels.require(annotationType,fileToLoad);
5765	SegmentDataSequence(CandidateSegmentGroup
11254	progressBar1
13356	Considers
12530	pacific
23120	featureFreq.put(f,d+1);
8679	A-Z
11257	progressBar3
18063	Negative
11256	progressBar2
10178	labelString="";
18765	instanceMap.remove(shortenedClassName(subClass));
8720	theCount;
4136	[no
19730	conditional
17095	"+f[1]);
23000	com.wcohen.ss.lookup.SoftDictionary;
18880	cmd=new
2895	getselectedindex
19178	getFlag(){
6043	editedOnlyCheckBox.addActionListener(resetDocumentListAction);
3934	efficient
6230	(SpanRenderer)slider.documentList.getCellRenderer();
14619	List<Object>
5932	alloc
7844	Mary
11180	allow
14472	predType="_prediction";
7464	x=example.asInstance();
1544	subpopulation,
20175	asSet(){
16091	compressgroups
3932	System.out.println("match:
13757	buttons,
17943	FeatureBuffer
13724	buttons.
3077	setcontrolledviewer
17120	i=inputList.iterator();i.hasNext();){
4060	View
6945	Mark
17320	editor.setSaveAs(file);
13903	JRadioButton(s,selected);
15927	TestDataSequenceC(sequence);
11151	/*public
335	javax.swing.JScrollPane;
20185	mapFunction(Function
7966	SplitTokenizer("\\.");
10366	Vector<Feature>(unusedFeatures);
17481	sendSignal(TEXT_MESSAGE,
7331	EditTypeAction(JComboBox
22281	getcurrentlevel
21092	getsplitterhelp
2299	lists
22202	if(statementType==Statement.REQUIRE){
4007	openFile?chooser.showOpenDialog(null):chooser.showSaveDialog(null);
9777	date,
14146	specified.");
4536	junit.textui.TestRunner.run(suite());
14788	annlabels
23117	TObjectDoubleHashMap();
4395	setdividerlocation
1034	edu.cmu.minorthird.util;
2321	continue
175	assume
13307	multiLabelClassification(Instance
15318	"-test","sample1.test"})
5209	if(parentEntry!=null){
17014	comparesegmentsandrevise
7521	example,double
15941	(CRFLearner)o;
23123	TFIDFWeighter
14656	result.add(name.substring(0,1)+".");
15762	this.histsize
9805	iseed2=40692*(iseed2-k*52774)-k*3791;
13982	cd.dataset.getMultiExample(row);
14838	1.3132616875182228,1.0,1.0,1.0,
20777	clsLearner=c;
13851	generalizes
7392	edittypeaction
14077	vanillaviewer
16590	pos+=1;
4048	setdefaultdir
16397	"+lpos_h.toString()+"
9342	clone?
14043	explanationViewer.setContent(cd.classifier.getExplanation(example));
22367	String[]{"Matthew",
20881	SimpleTrainParams(){
11683	SequenceClassifierTeacher
4778	array=new
12699	HMMLearner
22987	negfactor
20586	log.debug("slidingWindowGroup:
697	Logger.getLogger(CollinsPerceptronLearner.class);
9868	getDocument(String
4848	"stem";
7953	newDoc3
7952	newDoc2
7951	newDoc1
2724	Overload
7950	newDoc0
10390	totalWeight=totalPos+totalNeg;
11587	neighbors
15569	usetargetprediction
1312	'"+script+"'
10945	c.explain(fe.extractInstance(labels,documentSpan));
21944	this.reduction=r;
15442	ProgressCounter("stack-labeling","fold",s.getNumPartitions());
7556	bbmira
10170	correct[i]=
18391	MistakeCountingOnlineLearner
20084	@deprecated
4320	fileName=args[++argp];
12506	extractAbbrev.testMode
9726	<STRONG>1988</STRONG>
5165	TextBaseEntry(rootBaseName,rootBase,0,null));
22159	start=System.currentTimeMillis();
9400	aggregator
1966	labeledDocs.add(span.documentSpan());
5149	Map<String,TextBaseEntry>
5099	ControlledViewer(sv,mp);
6727	initLayout(){
4496	Work
19026	JSpinner(new
14585	if(lowRisk)
23159	Console{
16596	}catch(NoSuchMethodException
22312	getstarttype
20218	e.g.,
1456	labeldir_prop
20840	if(s.equalsIgnoreCase("simple"))
15380	getUseTargetPrediction(){
15932	cmmClassifier.explain(sequence);
11338	viewbutton
22699	is:\n"
12588	sentenceend
16824	SmartVanillaViewer(transformedDataset));
5892	nestedCrfModel;
10369	anything,
12844	clearContent(),
20496	member
8514	newAnnotator=
6778	setReadOnly(!readOnly);
3863	words){
12664	subView=i.next();
10381	falseBranch);
1243	"foo.labels"
11430	Collections.<Example>emptySet().iterator();
2642	this.editorHolder=new
12952	clearContent();
14853	SVMLearner();
22018	program=p;
17196	if(partition.get(i).contains(req))
8839	Distribution">
13930	jtable.setDefaultRenderer(MultiExample.class,new
3240	utility
11560	introduced
8372	-labels
7114	edu.cmu.minorthird.classify.transform;
2487	exi=ranking.get(j);
17158	Collections.shuffle(requestList);
3110	setcontent
8485	SequenceAnnotatorLearner.
17685	sig[it-1],vlow,vup,xr,xp,wr,wp,vbeta,tau[i][it-1],tauSD,
12514	extractAbbrev.extractAbbrPairsFromFile(filename);
13395	this.numEpochs=numEpochs;
6888	tableScroller.revalidate();
13086	*<code><pre>
23979	Coefficients
6768	this.exportType=outType;
13447	j++){
6379	spanIsDirty[index]=true;
20634	//InfoGainInstanceTransform
20485	CommitteeLearner(BatchClassifierLearner
8504	newAnnotatorFile");
6892	gbc.gridwidth=3;
16861	log.debug("dataset:\n"+dataset);
2540	insta
2541	instb
18273	example=eloo.next();
13046	x.gorp().
13242	LinksMap
309	trains
3729	loadclass
2992	clearContent(){
1928	exception;
19856	orderbasedinstancetransform
20911	trainData=toDataset(s,false,multi);
19034	SpinnerNumberModel(((Double)value)
23877	2.5260757449731988E302,
10096	multiLabel
14416	content=IOUtil.readFile(inFile);
1429	bsh.EvalError,
2960	part=10;
22514	AbstractInstanceTransform()
17371	AbstractClassificationChecks(String
10301	bestFalseData};
3735	names
19759	hi<=lo)
10893	labeledData){
21835	classifiedSeq
19003	log.debug("change
691	Collins,
1217	named
2253	span,String
23501	train:
23314	"Zhone
13331	subview.setSuperView(this);
3280	train;
3267	train=
5836	CRFSegmentDataIter
6980	importtype
10506	super("FancyLoaderTest");
14354	SimpleRandomSplitter(double
7810	transform(o)!=null;
15640	Contains
11784	base.documentSpan("DocPerLineTestData_WithBlanks.base@line:13");
12302	charAt(int
9408	addsgm
20833	SimpleTrainParams();
1128	defaultRepositoryValue
9446	train)
23499	total");
18356	semisupervisednaivebayeslearner
12466	bestLongForm.asString().endsWith(shortForm.asString())
10990	'classify'
7550	"[BBMira
9548	train,
21445	implied
3508	lo++)
16879	schema.getClassName(
17338	"document");
20026	words'.
3592	ClassLoader
2565	javax.swing.text.JTextComponent;
21250	provided,
20407	SpanSets
23745	3.719933267899013E41,
16604	pos+=2;
14282	documentGroupMap=
3395	subsequence
5576	if(childEntry==null)
23933	doubleFactorials.length;
19169	name;
10375	batchTrain(dataset,depth,newUnusedFeatures);
7106	testclassifier
16932	(segmentInstance!=null)
8761	outputFileName
6312	if(spansWithDocument==null){
20737	estimatenegbinmome
20490	batchTrainCommittee(RandomAccessDataset
20343	regex,String
5199	name:
4268	truthTypeSet=new
5173	name.
2157	if(prop.equals("_prediction")){
2027	j=labels.instanceIterator(type);j.hasNext();){
10061	name,
23191	console.
15053	toexternalform
10002	TreeMap<Segment,String>();
20860	cross(){
15005	(regression)\n");
9355	Iterator<Example>(){
21042	generalized
1342	tbl.load(baseFile);
4555	decisiontreelearner
5713	newdocid
6828	fmt=filter.getDescription();
15178	Pair(infoGain,f);
8248	propertySet){
2083	includeOffset)
16029	CompactCandidateSegmentGroup(factory,group));
668	edu.cmu.minorthird.classify.*;
7179	setAnnotationType(String
2246	this.isOpenTag=isOpenTag;
12831	filetoload
13647	SpanFE.)
17605	totalCounts)
22895	//weight
18377	getloglikelihood
7854	name)
1889	'"+id+"'
6808	Classifier");
4788	TF_IDF(Double[]
1590	GenericCollinsLearnerV1(OnlineBinaryClassifierLearner
8494	(SequenceAnnotatorLearner.SequenceAnnotator)IOUtil
17350	learner.setAnswer(
15056	checkclassify
19711	instance3.addNumeric(new
8815	Details();
23986	entering
13511	*(Math.log(rankedExamples[i][0].getWeight(score))
14145	runMixup
9843	gettime
20890	setLearnerParameters(
12902	sendSignal(SET_CONTENT,content);
1458	scriptdir_prop
22616	j=0;j<textFiles.length;j++){
12352	sentenceEnd
8833	distribution
12096	Features
13872	this.classifier=classifier;
6767	this.importType=inType;
631	http
2955	if(loc==ViewerControls.BOTTOM){
22799	total+=(featureIndex(f).get(j)).getWeight(f);
3388	holds
20409	<T>T
10424	tot=totalPos+totalNeg;
20229	SpanResult(extend("subspanNeg_"+lo+"_"+len),fe,s.subSpan(lo,
1108	getting
2416	setboundary
13774	typeBox;
3516	(label[lo][len-1]!=null)
12609	aspects
17888	delta=consumeArguments(args,k);
15282	"-labels","sample3.train",
2810	viewertracker
11950	England
833	j-k>=0
10188	pos_class_name
19811	Feature;
6375	clear
10450	randomtreesplitter
16892	"from
6991	labelbox
7864	clean
894	pc.finished();
20140	process.
5567	parentEntry.dstOffset+(parentHi-parentEntry.srcOffset));
887	System.out.println("Epoch
22588	view(String
7750	b.sum;
7621	MonotonicTextLabels[splitter.getNumPartitions()];
6681	Reset("Reset"));
5887	//addFeature(new
6240	DocumentCellWidthSlider(final
3164	Feature(
23149	tfidf
8786	labelLoaderVitor
1265	SampleClassificationProblem.unlabeled();
18466	learner,String
15578	getstackingdepth
3788	abstractlooper
2716	editorHolder.repaint();
7146	AbstractBatchAnnotatorLearner
531	implements
19145	JScrollPane(wholePanel);
24105	<tt>log(k!)</tt>
4397	initprogramlabels
7828	miny,
17695	tau[i][it-1];
8781	tbl.load(dir);
22530	cross-validation,
23280	piOut.close();
19390	lo+1,
13228	HashMap<String,Map<String,Set<String>>>();
2474	splitIntoRankings
15433	cross-validation.
2978	gbc.gridy=y2;
21984	PreprocessTextForExtractor().callMain(args);
14953	"exact"
6743	-----------
12696	hmm.state(k)
16781	family
12000	doc);
6721	initLayout();
11827	"5:00
16465	tb.loadDocument(docID,
11750	observations",
6842	textLearner.reset();
15758	CRFLearner(String
12480	(!annotationMode)
16756	if(value.length()>0)
21889	if(count==TWO)
13675	copying
23084	TextLabelsLoader().loadOps(textBase,edit.editFile);
3112	argument
12199	log.debug("shortForm='"+shortForm.asString()+"'
5174	getTextBase(String
8192	from(s).tokens().eq().lc().emit();
21760	this.newValues=new
3181	history.iterator(),
3942	depth
3085	setresizeweight
19407	lives
4260	truthTypeSet;
15642	Pointwise
15000	("+correct+"/"+total+
3445	start...end,
9001	generation.
4703	todetails
3470	start...end.
9329	sccript
20154	extension[i]=partial[i];
4240	viewer.updateTextLabels(programLabels);
14626	int[]
12708	state),
18095	state.
16908	y=0;
6044	highlightAction
12714	state)
8655	features_out
23066	Hand-label
13567	(pos
4879	stem_prop
837	(!viterbi[j-k].isCorrect(
9881	edu.cmu.minorthird.classify.sequential.Segmentation.Segment;
13608	automatically
18226	unlabeledDataset=new
23794	2.8171041143805494E128,
17968	if(args.length<4||args.length>5){
14482	highRiskNameList=new
19237	emptyborder
3495	getSequenceLength()
4648	Example);
16749	if(eqPos<0)
9167	(int)(U/f2));
6937	eSpan=new
7701	tosummary
13785	i=types.iterator();i.hasNext();){
22342	lc,uc,van,indexViewer,lnameListViewer,familyViewer,mainViewer;
4228	setBase(TextBase
4603	rendering
23082	textBase=base.labels.getTextBase();
15248	convenient
2813	dummy_id
1891	"+lo+"
16956	bp!=null;
15756	//defaults.setProperty("trainer",
13343	Terry
1424	System.getProperty(prop);
13694	innerLearner.get(i).setInstancePool(list.iterator());
6212	"+ii.nextSpan());
4616	"+sourceString);
8412	i=labels.getTextBase().documentSpanIterator();
21363	length)
21355	length,
23492	j=test[i].iterator();j.hasNext();){
24036	length1
5914	seq.getSegments();
5437	manage
10892	spanType,TextLabels
24040	length2
23452	numSites,numPagesPerSite;
17996	length5
17432	cvs;
3995	textField.setEditable(false);
3824	length;
1601	setInnerLearner(OnlineBinaryClassifierLearner
16023	IllegalArgumentException("mismatched
6194	SpanDifference(guessLooper,nullLooper);
7954	spanTypeTokenizer.splitIntoTokens(newDoc0);
3603	along
5820	segLengths[i])
22251	end=System.currentTimeMillis();
4173	gbc.weighty=1.0;
12529	hearst
11854	UNANIMOUS
364	static
8411	doAnnotate(MonotonicTextLabels
12805	showTokenProp(TextBase
1613	IllegalArgumentException("innerLearner
4610	example]");
23424	DecisionTreeLearner(5,2),1.0/7.0,1.0/7.0));
8780	true);
15669	Math.log(a+b)+Math.log(a+c)+Math.log(c+d)+Math.log(b+d);
197	examples
22288	matchingchildspan
14865	stats1[1]=e1.averagePrecision();
22606	base.loadDocument("someFile",contents);
16888	fty[t][y]
18233	unlabeledDataset.add(new
12113	compactinstance
6372	colorByStatus[SpanDifference.TRUE_POS]=tp;
13529	itIndex=A_pos.get(ftr).iterator();itIndex.hasNext();){
18374	hasconverged
4095	TextLabelsLoader
6930	Checks
17146	requestList=new
2212	TagInfo
12710	states
14413	log.fatal("Error:
12253	entry);
5729	childentry
15154	ig1.feature.compareTo(ig2.feature);
6673	AddSelection("Add
18621	Allows
18412	innerLearner.getClassifier().classification(answeredQuery.asInstance());
3229	unioniterator
17261	#folds");
6690	buttonsThatChangeStuff=new
9936	example:
10008	seg,
7210	example;
9678	tokenprop
3429	holder
6479	sizedelta
6815	(Annotator)textLearner;
22775	example=
15654	ContingencyTable
13957	targetCorrectness==cd.classifier.multiLabelClassification(e)
7676	if(value==null||value.equals(labels.getProperty(s,prop))){
9752	seed
16422	karov
19875	map.keySet();
12689	conventions:
1866	seen
3710	seem
21776	"+instance+StringUtil.toString(newFeatures)+
10418	2*(Math.sqrt(wp1*wn1)+Math.sqrt(wp0*wn0));
4622	example,
124	example.
16677	called.
4413	debugger
16446	example2
12540	abbrev
5252	getMatchingSpan(String
4698	setborder
23953	n/2)
6109	if(t.contains(s))
5727	childdocid
21816	ClassifiedDataset(adaptedClassifier,sequenceDataset).toGUI();
16230	Attributes
21780	UnsupportedOperationException("can't
6308	Integer(i));
12936	if(canHandle(signal,argument,senders)){
19443	getlotexttoken
18227	il=iteratorOverUnlabeled;
16682	file";
12129	See:
19066	selector.setContent(value);
4487	BeginContinueEndUniqueReduction())"}){
17308	spanEditor.setReadOnly(readOnly);
16500	TreeSet<String>();
3146	Instance,SequenceConstants
1246	@param
10824	sees
1953	for(Iterator<Span>
10732	UnknownDocumentException
5489	mapPlace(String
17219	o1,Object
10010	seg;
22014	Stack<String>();
15781	histsize;}
15459	Aggregators=RealRelationalDataset.getAggregators();
14179	setannotatoroutputparams
5767	segs
1030	subtracting
22341	Logger.getLogger(ViewerTest.class);
21199	FileInputStream("./config/annotators.config");
2840	select
954	explanation
1488	isdirectory
1537	drawn.
18777	instanceMap.put(shortenedClassName(o.getClass()),o);
23107	Replaces
12961	namedSubViews.keySet();
3947	getassociatedids
13364	real-value
18769	if(inLine)
13997	JSplitPane();
14999	"+(double)correct/total*100+"%
2017	printTypesAsOps(TextLabels
4662	instanceComponent((Instance)o);
10851	/*package*/
12327	Character.isWhitespace(ss.base.charAt(ss.lo)))
9660	makePattern(baseTag));
16585	'-"+arg+"'
5864	featureLooper
4037	sendsignal
10158	isMultiCorrect(MultiClassLabel
12088	english
20643	"+index.numberOfFeatures()
5645	levelname
22271	property");
21812	this.sequenceDataset
8188	case.
8688	if(lineMatcher("\\w",line.substring(i,i+1))){
14425	writer.print(content.substring(tags[i].getOffset(),tags[i].getOffset()+tags[i].getLength()+1));
14315	k=documentMap.keySet().iterator();
1430	IOException
16343	neg_t.multiply(f,(1+example.getWeight(f))*alpha);
4866	lc.substring(0,lc.length()-4);
7410	example.getLabel()
11748	"DocPerLineTestData.base@line:5",
17069	HashMap<String,String>();
15381	useTargetPrediction;
566	componentFor(Object
16912	//could
15586	stackeddataset
17282	reqid
3996	add(button);
4422	maintype
23898	<tt>0</tt>.
24114	stirlingCorrection(k)
10382	FIXME
9481	TextLabelsExperiment(
15069	averageprecision
11470	marking
4630	main.addSubView("Features",new
20686	c.setPmsPos(f,mudeltaPos);
4144	newTypeField=new
488	StackedClassifier(schema,innerClassifiers,finalClassifier);
21353	Represents
15660	this.a=a;
3328	prop=signal.getOutputProp(train.output);
16227	"Learning
14297	document.setTokens(tokenArray);
1685	java.util.StringTokenizer;
8616	regular
8663	percentage
20621	SCALE;
16304	pos_t=new
4388	gettruthbox
4131	SaveTruthLabelsAction("Save
20828	ClassifyCommandLineUtil.Learner.ClassifierLearner();
19911	chiScore,f
14388	String[]{content};
18007	edu.cmu.minorthird.text.learn.SpanFeatureExtractor;
5630	"+dstDocId+":"+dstOffset;
11996	checkType(TextLabels
16278	this(1.5,
5935	crfsegmentdataiter
4202	TextLabelsLoader().saveTypesAsOps(labels,saveFile);
21637	ImportGuessSpans(String
19496	label,double
20706	if(new
21535	RankingPerceptron
15909	crfWs
12475	bestLongForm.asString()
4673	f=i.next();
5717	newdoctext
5453	getTextBase(){
7166	reducing
14189	"testClassifierParameters","testExtractorParameters",
2559	javax.swing.KeyStroke;
11794	e.getMessage());
21397	this.top
5511	MapEntry
19970	made.
18629	existence
18188	//System.out.println("cllassIndex="+classIndex);
13771	-select
4546	tree
13174	SpanFinder
12623	subview
16532	d=(Dataset)o;
14401	tags.add(new
22013	levelStack=new
13613	einat
20900	MultiTrainParams
23533	"+learner+"
2821	editeddoc
13477	brute-force
22523	activeFeatureSet);
18531	if(toShow.startsWith("ev"))
17381	stats;
17242	splitter.split(list.iterator());
8847	<tt>k
11496	labels.setAnnotatedBy(providedAnnotation);
13979	cd.classifier.multiLabelClassification(cd.dataset
15068	stats1
14878	stats2
16321	y_t=example.getLabel().numericLabel();
21666	hi=editedDoc.toLogicalCharIndex(hi);
14954	stats,
14194	"multiClassificationSignalParameters",
2807	spandifference
7546	w_t.increment(x,-y*wx.alpha);
11962	base.getDocument("eng.base-155").getText());
23874	5.423910666131583E295,
16800	BatchSegmenterLearner
21464	<tt>v
20217	indices
8670	if(linelength==0)
22504	MakeBinaryTransform
19462	.getTruthBox(),(SpanEditor)viewerTracker2));
12916	Send
21568	rankingperceptron
14710	_prediction_updated_fixed
3742	bytes
978	Hyperplane();
15868	f.val
3648	if(file.getName().endsWith(".mixup")){
6238	documentList.setFixedCellHeight(slider.getValue());
4573	recommended
19213	InLineTypeSelector
23104	truetype
13875	MultiDatasetIndex(dataset));
6734	------------
21201	annotators.config.");
1696	serialized
23208	mainThread.start();
14278	documentMap=new
21430	sell
12589	newcloseparenindex
7776	if(!isBinomial)
22782	serialVersionUID=20071015L;
20107	StringBagResult.
8542	alternatelabels
11856	VERDICT
4115	interp=new
13783	typeBox=new
15444	rlt=new
3221	inseq
6737	add(labelBox,gbc);
11243	getCLP().usage();
3802	cases
20745	seq,int
5498	TreeSet<MapEntry>();
16972	this.onBestPath=false;
226	semi
5629	srcDocId+":"+srcOffset+"
4074	this(base,new
11754	Next
23487	totalTest=0;
5552	if(parent.getDocument(parentSpan.getDocumentId())==null)
11830	"1:00pm",
16890	(where
22078	Moves
14589	lowRiskNameList=uniqueSortedList(lowRiskNameList);
2873	false_neg
1751	allowed
6928	s,String
14356	if(random.nextDouble()<=trainFraction)
12653	send
14034	main.add("Evaluation",evalViewer);
2363	getconfidence
15919	classIndex
9396	legalaggregators
17638	lambdaEstimateVec.length;
18800	editor=new
18460	Splitter<Example[]>
6089	ArrayList<Span>();
23746	1.3763753091226346E43,
170	sent
8281	SpanFE{
21600	//--------------
15020	if(argv.length!=3){
1249	@return
7786	utilities
17363	documentpool
6254	this.color=color;
7627	MonotonicSubTextLabels(testBase,
611	algorithms
20513	committeelearner
19583	BasicTextLabels{
1930	file){
4460	VotedPerceptron()"}){
2625	status
2114	"+dir);
15250	OneVsAllClassifier
8408	sequenceAnnotator){
15912	toMinorthirdClassifier();
18644	"Fraction"
14696	TextBaseViewer.view(annLabels);
18385	decrase
11235	AbstractAction("Parameters")
21827	seq;
19317	wholepanel
14534	applyDictIncreaseRecall(MonotonicTextLabels
5119	typespan
19357	viewerTracker
18756	subClass
16061	groupList.iterator();
21115	graphicCounter;
777	Phi(viterbi)
4643	ExampleViewer(){
7624	testBase=
6796	labeled");
23442	LogisticRegressionTest(){
12326	(ss.lo<ss.hi
11720	Lastly
112	Instance
8493	NestedTextLabels(FancyLoader.loadTextLabels(args[2]));
18543	sequenceannotatorexpt
12646	parallelPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
21373	"]";
11734	"title",
18903	String[]{"which",browsers[count]}).waitFor()==0)
22361	par.addSubView("Original",van);
21202	log.warn("classpath:
4946	i<trainCds.length;
12493	message");
23321	Multex",
13207	"+spanFilter.explain(instance)+"\n");
23893	<tt>(n
1921	addToMsg){
23965	safer
18239	previousLogLik;
20300	prop(String
11536	cvd=
749	epoch=0;
20492	Random(0);
15623	file);
4361	jframe
8721	detect
19774	"conp="+constrainedPrediction[ii]
677	algorithm,
18522	tokPropFeats=args[pos++];
4845	algorithm.
23610	c.increment(f,-pweight+nweight);
23384	merger
5036	labels.instanceIterator(type,span.getDocumentId());j.hasNext();){
1216	file).
23954	n-k;
11339	errorpanel
15399	crossValSplits=newCrossValSplits;
10383	DecisionTreeLearner
5569	childSpan){
4204	statusMsg.display("can't
22643	File(annotatorName);
1234	"foo/*"
19333	viewerTracker;
2784	first
22095	merged
7326	viewerTracker=
11137	ClassifiedDataset((Classifier)c,
9845	pseudo
7470	if(log.isDebugEnabled())
13183	this.detailMap=new
20378	if(action.equalsIgnoreCase("remove")){
20349	"[0-9]","0");
7654	extractionEval.extend(tag,sd,isOverallMeasure);
4973	SpanViewer(TextLabels
13645	interfaces
4271	this.newTypeField=newTypeField;
6054	truthBox.addActionListener(highlightAction);
3159	previousLabels)
13622	rankingmap
6736	labelBox.addItem(LABEL_DOCUMENT);
12030	docperlinetestdata_withblanks
23476	"+inst);
7743	accumulators.
290	}else{
16901	double[seqLen+1][ny];
15284	"-splitter","k5",
4915	testData);
24054	Math.log(value)
23248	System.err.println("reader
2798	keystroke
19750	(predictedClasses.length!=alternateClasses.length
9617	reduceDocument(example.getDocumentSpan(),example.getLabels(),example
11958	Bradford
14404	CharAnnotation[tags.size()]);
22697	StackedDatasetClassifierTeacher(trainData).trainStacked(learner);
12981	sendSignal(OBJECT_SELECTED,transformer.transform(jlist.getModel().getElementAt(index)));
3231	previouslabels
5583	printMap(){
22072	exist.
20530	this(learner,fe,4);
19688	pa.getClassifier();
3660	findFileResource(String
11449	System.out.println("Learnt
15075	nan's
7238	bottom.
9565	Random(),trainFraction);
2250	start;
7892	sampleDocs[2]);
18446	toInstanceIterator(Iterator<T>
3067	gridbagconstraints
23458	numPagesPerSite,boolean
5603	while(mappingsIterator.hasNext()){
21481	Box-Mueller
18877	if(he.getEventType()==HyperlinkEvent.EventType.ACTIVATED){
9669	["+p+"Begin
20758	'"+s+"':
6708	x=0;x<spanTypes.length;x++){
10151	possibleLabels(){
21425	Research.
6328	interface.
12032	leave
20067	interface,
22180	regex=statement.getRegex();
331	hasanswers
22599	stem=f.getName().substring(0,f.getName().length()-".txt".length());
22656	text_file_filter
3734	asfiles
23211	errorArea.append(s);
12507	(args[i].equals("-usage"))
20633	InfoGainTransformLearner(
10108	ExampleSchema.POS_CLASS_NAME.equals(labels[i].bestClassName());
15185	issorted
7490	tau="+tau_t+"
19982	loader);
20183	s.add(o);
12628	(e.g.,
5537	childOffset
14815	url=this.getClass().getClassLoader().getResource(testFile);
15274	"+c+"]";
7088	test.loadFrom+":
10587	"[ExampleSchema:
19428	starts
13951	ClassifiedDataset","example",
7049	Explain
18665	instanceMap=new
24044	<code>
21017	Specific
20238	TokenSetResult(extend("tokens"),fe,set);
1473	exists
23462	this.subsample=subsample;
4875	i<args.length;
17664	(tauSigmaEstimate[0].getPms().get("sigma")
4308	least
1314	+(sgmlExpected?"is":"is
24060	0.43429448190325176;
15292	UITest(TrainClassifier.class,
430	dataset)
5504	if(childEntry==null){
12037	testloaddirectoryoffiles
21964	dataset,
11912	Attendance
3088	fillergbc
2440	dataset.
19520	(score>0)
18630	methods,
4852	base,MonotonicTextLabels
23767	2.350561331282879E78,
21487	methods.
21369	"[CharAnnotation:";
8362	i.nextSpan();
9550	Preserves
23417	VotedPerceptron()),0.0,1.0/7.0));
7283	getto
14965	svm_model
16033	schema=
210	learn
17365	availablelabels
13733	forces
372	schema;
9943	ClassLabel.negativeLabel(-1.0)
6347	spanDocs[index].resetHighlights();
18964	helpButton=new
22309	getimporttype
14552	detection
6715	ocdEditor=this;
16614	itx.printStackTrace();
15619	loadFileData()
16354	zneg=new
10576	schema.
14023	explanationViewer.setSuperView(this,"explanation");
420	schema)
14151	annotatedLabels=new
9947	schema,
20172	this.set=set;
962	classPanel
1645	Explanation.Node("Classifier
17551	"p",new
1559	datasets
7502	correction
10476	decisiontree
10534	interned
18842	Object[]{editor});
14554	nameMatch=dictLookup(highRiskNameList,tokenWindow);
8777	System.out.println("reading
12792	getSpanProperties()
15540	stackTestDataset(
17104	"+f[3]);
1647	classEx
2060	labels","property",labels
9170	k2)*[0,
18287	observedCounts,double
18851	createPE(Class<?>
1849	warnings++;
19896	index.size(ExampleSchema.POS_CLASS_NAME);
2320	trim
23846	5.0128887482749884E234,
20085	instance=new
13715	schemas
10837	if(signal==OBJECT_SELECTED&&senders.contains(zoomedOut)&&
14263	postrain
7771	stdErr(){
3658	trie
20877	type.showTestDetails=this.showTestDetails;
4394	setminimumsize
4528	UIMain
13293	transformer;
12932	upward
2867	overload
10906	looper=tb.documentSpanIterator();looper.hasNext();){
2787	currentCursor=0;
9247	Sets
14944	"+e2.errorRate());
12759	transformer=
23133	MutableInstance(instance.getSource(),instance
16544	monitorSelections(jList);
12062	ramon
15626	learntoclassifytest
7548	"+cache.size()+"
15368	useConfidence=true;
14524	Risk
18858	if(advancedParams==null)
12551	truenegatives
516	log.debug("Transformed
21949	dataset=
16957	bp=trace[bp.lastT][bp.lastY])
2090	":"+span.getTextToken(span.size()-1).getHi());
18981	pname.substring(1)+"Values";
267	dataset;
13515	System.out.println("margins:
10624	getSequenceClassifierLearner(){
22134	levelsToLabelsMap.put(newLevelName,newLabels);
12124	(long
12751	ann=(MultiClassifierAnnotator)IOUtil.loadSerialized(test.loadFrom);
1375	MixupInterpreter
825	!viterbi[j].isCorrect(
149	available.
14671	[-saveAs
4831	pflist
12101	SGMFeatureFactory
19684	Example(instance,
11248	panel.add(subpanel2,
23167	errorArea;
10329	determine
18775	"+rootClass+":
4479	"cspace.09",
6938	EditedSpan(s,label,docID);
10469	thresholds
19528	isNegative()
9343	aggregators.put(L_type,(HashSet<String>)set.clone());
14543	if(nameMatch!=null){
974	gui;
23502	assertTrue(!test[i].contains(inst));
11769	LEAVE
22349	testViewer()
11764	THAT
21002	gui.
14463	scheme.
9357	inner.next();
23833	1.506141741511141E207,
22770	if(query.documentSpanStartIndex()!=0||
22032	"You
1541	subpopulation---different
11777	BUG!!!
21053	setshowtestdetails
19257	splitname
10772	//Annotator
8433	classLabels=
21249	log.debug("Source
2386	looper
12682	Viterbi,
7522	alpha){
14176	getmixupparameters
12429	Character.toLowerCase(shortForm.charAt(sIndex));
8791	envfile);
19543	getWeight(label)
2849	getselectedvalue
22075	'"+levelName+
3558	Annotator
7187	documentLooper)
7779	p=mean();
18835	AbstractAction("?"){
19392	lo+len.
14390	tags=new
764	i.next();
21834	Map<Example[],ClassLabel[]>
20922	dimensions,
5584	.println("****************************************************");
20559	MutableCandidateSegmentGroup(maxWindowSize,document.size());
19892	(!ExampleSchema.BINARY_EXAMPLE_SCHEMA.equals(schema))
5327	srcMapperList.add(textBaseMappers.get(currSrcEntry.getName()));
6925	eSpan.label;
17316	spanEditor.setTypesBeingEdited(guessType,guessType);
18299	threshold,
2592	internal
6393	marks.add(new
23050	softDict[y].put(ex.getSubpopulationId(),text,ex);
21336	Iterator<E>{
16600	'"+args[pos+1]+"'
16213	ideas
18382	threshold'
20357	StringBagResult(extend("charTypePattern"),fe,trBag);
16406	schemes
23538	bayesunlabeled
1787	operations</em>
9953	[delta*x],
14049	featureSummary(Feature
98	true
14376	tagger
12912	Serializable)&&
5192	mapper){
20810	getShowTestDetailsHelp(){
8754	bReader.readLine())
16973	dumpStuff(CandidateSegmentGroup
5962	featuregen
1520	mixupfile
15858	stateId
4544	classification
7185	documentLooper;
16995	"+marker);
15071	averagelogloss
6683	CompleteTraining("Complete
17488	super(obj);
12220	(hasLetter(str)
9646	tagged
23003	dictionary".
11626	if(Double.isNaN(tot))
16893	dictionary",
2509	if(cmp!=0)
1116	REPOSITORY_PROP,
6944	textLearner.addDocument(eSpan.label,eSpan.s.asString());
23823	2.543559733472186E186,
17950	span=null;
15894	histsize));
6032	displayedTypeBox.setEditable(false);
3182	instance.binaryFeatureIterator()
620	smartvanillaviewer
9483	trainTest.splitter,
11457	Serializable)){
4109	errorString=e.toString();
12451	longForm);
11116	MultiEvaluation(md.getMultiSchema());
17068	userMap=new
8065	(double
15751	java.util.Properties();
13399	rankingMap
4362	boneheadstemmer
22266	if("defTokenProp".equals(keyword)){
20402	SpanSetResults.
17817	estimatenaivebayesweightedmean
13541	ftr;
3251	edu.cmu.minorthird.classify.DatasetClassifierTeacher;
23884	inherit
16484	taggedLabels.setProperty(span.getToken(0),tokenProp,tag);
9692	extractfromtags
22663	gettextlabels
7265	ExampleID
22591	LabeledDirectory(){
13504	Math.exp(-1*margins[i][j]);
7866	Tests
13698	innerLearner.get(i).nextQuery();
4238	NestedTextLabels(initProgramLabels),
18594	double[N_int];
11509	TrainTestMultiClassifier
4794	list,int
21275	log.warn("couldn't
12448	'"+longForm.asString()+"'");
18108	NB(r,p)--distributed.
11396	labelFile);
17164	HashSet<String>());
157	improve
7221	extraction2taggingreduction
10080	classLabels.
6621	defaultstyleddocument
18525	if(labels==null||learner==null||splitter==null||inputLabel==null)
16938	(over
14397	WordSplitter(new
2172	j=0;j<sortedLabels.size();j++){
4396	savefile
12335	extractAbbrPairsFromSentence(StringSpan
8406	sequenceAnnotator;
6950	tbViewer.updateTextLabels(viewLabels);
9115	envelopes
12159	acronym
1348	'"+baseDir+"'");
21778	MyIterator
14062	if(count==null)
1441	list
21910	numcopies
5937	startscan
11952	rugby
23301	section
10819	log.info("recieving
1496	sgmlexpected
10853	blue,red,green,yellow,gray,cursorColor;
14572	tokenWindow.subSpan(0,numTokens);
5809	labels[i];
7408	example)
2975	gbc.gridy=y1;
7871	RegexTokenizer();
17879	CommandLineProcessor{
17232	WebmasterSplitter<HasSubpopulationId>(file,0.7,StringUtil.atoi(args[1]));
8784	basevitor
19203	"[SampleInner
15996	edu.cmu.minorthird.classify.FeatureFactory;
20153	i=0;i<partial.length;i++)
10836	(zoomedIn!=null&&zoomedIn.canReceive(argument)));
7597	setAdditionalParameters(CommandLineUtil.TestExtractorParams
2917	setComponents(Viewer
16370	this.lneg_h=neg_h;
22635	dirName){
20915	this.multi=multi;
17914	log.debug("Subprocessor"+i+"
7418	transformed;
17957	IllegalStateException("improper
6527	SemiSupervisedDataset();
9176	return(k1
9166	return(k2
2557	javax.swing.JSlider;
7670	System.out.println(sd[k].toSummary());
1145	props.setProperty(SCRIPTDIR_PROP,defaultRepositoryValue);
645	innerlearner
6802	GetClassifier
14551	signature
3184	instance.featureIterator()
16229	Irrelevant
7339	textBase=labels.getTextBase();
3043	"+lastObj+"
9209	return(k4
16048	.getLabel());
16260	hyperplanes
15514	double[index];
9217	return(k5
939	label.add(
22407	matthew
9562	this.random=random;
16473	Reducing
11760	THIS
15507	Aggregators.keySet
16218	Schemes,
23174	Console(Console.Task
22290	oldtype
22951	"RegretWinnow:
12810	IllegalStateException("annotationType
491	schema,Instance
19276	getreadmethod
23903	<li>else:
22578	resetAll=false;
1514	frank
18137	setnandp
6706	index=0;
11695	specifying
10826	zoomedOut.getVisibleContent();
6300	spanDocs[i]=new
19929	Works
18230	mi=i.next();
16075	SegmentDataset();
19908	ct.getPMutualInfo();
13367	'importance'
23638	Arithmetic
20535	leads
16250	1997
23535	assertEquals(expectedTestError,actualTestError,allowedVariance+0.001);
10811	ZoomedViewer(Viewer
920	voteMode?
7718	1.0/(1.0+Math.exp(-x));
13831	super(learner1);
10794	reply
11870	earned
11906	World
23866	1.1729568794264134E278,
21421	1999
12678	getnamedsubview
13173	spanFilter;
8117	pi(cand)="+rw.dnorm(candidate,
23621	c.incrementBias(-estimatedProb(numNeg,numPos+numNeg,0.5,1.0,LOG));
15699	(a+b+c+d);}
13686	if(innerLearner!=null){
23980	reverse
12274	extractAbbrPairsFromSentence(new
4274	truthBox.addItem(newType);
1232	edu.cmu.minorthird.labelDir.
4441	//Classification
22037	levelsToLabelsMap.put("root",labels);
8013	testsplittokenizer
10102	i=0;i<dimensions;i++){
9083	Math.ceil(my
22920	deci=getHistory(lu);
15729	parselong
4667	numRows++;
23463	log.debug("[XValTest
15767	(argTok.hasMoreTokens())
12441	longForm.substring(lIndex);
512	Feature(new
15752	defaults.setProperty("modelGraph",
16011	SegmentDataset(){
15501	features[index]=stackFeatureName(type,Agr,schema.getClassName(i));
20080	preprocessing
17239	"[Ex
14015	:new
13570	it.hasNext();){
2866	loadspanhook
9100	k4+1,
12762	"Must
18891	Runtime.getRuntime().exec(
15667	(b*c)));
10205	splitters.
10368	didn't
271	this.dataset=dataset;
12218	isValidShortForm(String
23734	1.5511210043330984E25,
11208	errorPanel.setBorder(new
3957	browse
579	finalPanel.setBorder(new
8861	unsynchronized.
23416	BinaryBatchVersion(new
10091	dimensions;
21972	ex=seq[j];
6865	"+label);
8694	("\t")
9257	inversion
7943	spanTypeTokenizer.splitIntoTokens(sampleDocs[2]);
16789	getlaff
10796	postagger
19263	boxcomponent
3331	ClassifierAnnotator(train.fe,classifier,type,prop,
16290	alpha,double
21040	loadsequence
16194	k:"+k+"]";
13808	minimalmarkupcontrols
12231	abbrString,
15963	maxitershelp
11380	fileName);
4412	frame
10093	MultiClassLabel(ClassLabel[]
23461	this.numPagesPerSite=numPagesPerSite;
15993	crfws
21929	System.out.println("extraction-related
8054	runif(int
2771	setContextWidth(value);
7212	"+document.getDocumentId()+"
1177	i<files.length;
19192	inner){
18927	TextFields
20306	filteredSet=new
1518	closelabels
3297	if(train.learner==null)
10910	ex=new
6307	indexOfSpanMap.put(spans[i],new
1104	catch
9654	p.addStatement("defSpanType
10621	setDisplayDatasetBeforeLearning(
11743	"DocPerLineTestData.base@line:4",
3841	i=0;i<span.size();i++){
7360	labels=(MutableTextLabels)FancyLoader.loadTextLabels(args[0]);
6717	this.importType=this.exportType=null;
17019	segmentscore
13882	filterOnFeatureBox;
17932	helpconsumed
17172	"+partition.get(k)+"
12259	mTestDefinitions.get(shortForm);
21292	findmixupannotatorfromstream
17325	getspaneditor
16820	SegmentTransform(transform);
15880	minorthird....
16832	default_pattern
21179	time_btwn_outputs_in_ms
13193	detailMap.keySet().iterator();
864	"+correctXj.getSource());
20102	s,FeatureBuffer
23827	4.6845258497542896E194,
14098	sethorizontalscrollbarpolicy
9490	expt.getEvaluation();
6396	Increase/decrease
9926	(fp>0)
7323	createOnlineClassifierDocumentEditor(TextLabels
23203	output\n"+io.getMessage()+"\n");
3661	fileName){
18701	if(configFilename!=null)
6071	DocumentCellWidthSlider(documentList),gbc);
6227	renderer.zoomFont(sizeDelta);
1334	try{
9880	edu.cmu.minorthird.classify.algorithms.linear.MarginPerceptron;
5754	negativeClass
6745	buttonsThatChangeStuff.add(saveButton);
21116	ProgressCounter(String
18136	success
1274	log.info("Loading
2587	statusMsg;
10612	fe){
20834	Multi
12723	System.out.println("\nbatch
10217	Linear
2753	event){
3228	mutableinstance
1896	details=new
18184	toStal
6005	contains=true;
18506	learnerName+"':\n"+e);
20595	span=document.subSpan(seg.lo,seg.hi-seg.lo);
7725	Accumulator
16244	Dagan,
18557	TestRandom
22340	ViewerTest
16303	this.voted=voted;
18480	dummyLearner=
5652	textbasemapper
22455	'rr'",v.toGUI());
17565	(N<=1.0)
13945	.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
19219	key);
22400	familyviewer
23856	1.72724589045464E256,
13792	ViewerControls.BOTTOM;
6107	labels.closureIterator(truthType,s.getDocumentId());j.hasNext();){
1535	subpopulation
9266	dissertation
9971	j=segments.iterator();
20888	getLearnerParameters(){
22776	AnnotationExample(query,labels,userLabelType,userLabelProp);
3401	window</i>).
16672	argValues.setProperty(prop,val);
10235	depth,
11485	annotations=annotateString(spanString);
20346	charTypes(){
19307	thebox
21497	2.0*gen.raw()
9746	seeds.
20693	sumX=0.0;
10462	featurecount
22088	kind
12604	javax.swing.JTabbedPane;
1583	version
16188	getK(){
21111	depth;
17868	labeler
4171	top.add(saveButton,gbc);
1111	command
6072	ZoomAction("Font-2",-2,documentList)),gbc);
4165	gbc.weighty=0.0;
14571	numTokens=tokenizer.splitIntoTokens(name).length;
15859	featureLooper=null;
8028	Class.forName("eairoldi.random.BasicRWrapper");
16627	errorMessage){
123	labeled
10673	annotationType){
3538	newinstance
15246	OneVsAllClassifier,
13617	examplesize
20245	namex="tokenNeg_"+(-index);
22345	ViewerTest(String
19515	IllegalArgumentException("positiveLabel
9857	loadDocument(String
21516	research
13336	transforms
7382	System.out.println("usage
12543	long_form_type
4908	"+splitter+",
5101	s.subSpan(10,5);
21186	setmaximum
16594	//For
16746	loadOptionsInPropertiesFormat(File
20778	Parameters
15997	edu.cmu.minorthird.util.gui.ZoomedViewer;
12841	superview,
18551	toseqlearner
18439	indexFor(Object
3789	estsize
7956	spanTypeTokenizer.splitIntoTokens(newDoc1);
22626	req=k.next();
17571	vCnt[i]/vWgt[i]-m,2
14102	iscorrect
13697	nextQuery(){
22919	lu=fmap.get(ff);
3281	setAdditionalParameters(CommandLineUtil.TrainClassifierParams
12263	(itr.next().toString().equalsIgnoreCase(longForm))
4054	edu.cmu.minorthird.text.BoneheadStemmer;
23433	DecisionTreeLearner(5,2),0.0,0.10));
13360	log-probability
2648	MoveDocumentCursor("Up",-1));
19612	w_t;//positive
20298	stringBag.add(token.getValue());
21563	h.increment(
20128	"you
23068	CommandLineUtil.EditParams
22944	ll){
16827	transform,
23513	LearnerTest
6304	spanIsDirty[i]=false;
17643	tauAcceptRate
1951	switch(policy){
18380	estimatefeatureprobmle
755	researchers
13053	CommandLineProcessor,
8472	i=startIndex;i<endIndex;i++){
23365	interp.eval(guessLabels);
13043	CommandLineProcessor.
8832	Poisson
12520	extractAbbrev.falseNegatives
2651	contextWidthSlider=new
13108	errorMessage);
7066	//m.viewLabels.processArguments(args);
14879	e2.summaryStatistics();
7663	sd[k]=
9769	<PRE>
22224	i=accum.iterator();i.hasNext();){
3654	EncapsulatingClassLoader();
11115	MultiEvaluation
19580	expodds
8755	content.append(line
12320	StringSpan(base,lo+newLo,lo+newHi);
6275	SpanRenderer(Span[]
21750	AugmentedInstance
13899	addButton(String
11874	Ramon
6855	if(nextCursor>-1){
24096	longFactorial(int
12955	Handle
22931	if((factor>1.0)&&(factor<W_MAX)){
13558	updateMargins(bestFeature,delta);
214	cohen
122	nextQuery();
13282	getexamplewithid
17745	lambda[i];
17583	//System.out.println("m="+m+"
997	batchsequenceclassifierlearner
23707	longFactorials
1121	(System.getProperty(ps[i])!=null)
5780	segLengths
86	nextQuery(),
12178	Schwartz's
16640	i=0;i<genericMethods.length;i++){
6908	Object[spanProps.length][2];
11332	getextensionfor
18935	Selection{
16388	hyperplane;
6341	if(spanIsDirty==null||index>=spanIsDirty.length){
8749	bReader
1892	"+len);
23848	9.615723196941089E238,
5976	java.text.DecimalFormat;
3724	filename
12937	claimed
6242	super(-1,760,760);
3372	showresult
19268	popupframe
18477	if(tokPropFeats!=null)
7619	splitter.split(annFullLabels.getTextBase().documentSpanIterator());
