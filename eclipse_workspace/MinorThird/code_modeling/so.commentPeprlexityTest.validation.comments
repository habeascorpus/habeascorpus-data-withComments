This class is responsible for testing VisibleSVM class. @author chiachi 	5 41 1792 289 41 1166
A dataset of sequences of examples. @author William Cohen 	6 3299 3104 331 1166 34385 117549
@author Edoardo Airoldi Date: Nov 24, 2003 	3 1166 1322 20211
@author Edoardo M. Airoldi Date: Feb 6, 2004 	3 1166 1322 24426
convert a set to a string listing the elements 	5 645 20 720 3111 635
This class is responsible for testing nodeToFeature and nodeArrayToInstance functions from SVMUtils class. @author chiachi 	6 41 1792 289 92 41 1166
@author William Cohen @author Quinten Mercer 	4 1166 34385 117549 1166
Wraps an ExtractorAnnotator with some code to implement a simple API. 	5 2628 22 931 198 1534
Random Forests implementation. See http://www.stat.berkeley.edu/~breiman/RandomForests/ For algorith details. @author Alexander Friedman 	12 2594 187806 208 274 275 21348 30014 39348 2938 1166 17502 176191
A group of sliding windows associated with a sequence. <p>In more detail: just as a SequenceDataset holds a set of Example[] objects, a SegmentDataset holds a set of CandidateSegmentGroup objects. Each CandidateSegmentGroup is derived from a sequence of source objects s1....sN. The CandidateSegmentGroup holds an instance for each subsequence of up to K adjacent source objects (the subsequence is called a <i>segment</i>, or a <i>sliding window</i>). Here K is the "maxWindowSize", and N is the "sequenceLength". <p>To illustrate, suppose the original sequence is a,b,c,d,e and K=3. Then the sliding window will hold instances created from these subsequences: a,b,c,d,e,ab,bc,cd,de,abc,bcd,cde. @author William Cohen 	48 836 6927 2386 3136 3387 967 20 211 967 20 211 5527 3136 296 211 10180 31454 967 75 24273 914 296 211 24273 157 8796 6927 3149 20461 59 639 3136 6927 3149 965 126 393 67500 22821 22833 9302 1508 4610 83182 78237 1166 34385 117549
Implements the teacher's side of the learner-teacher protocol. @author William Cohen 	9 1965 38615 12 29640 19169 2423 1166 34385 117549
Unigram Language Model @author William Cohen 	6 23894 319 665 1166 34385 117549
A set of semisupervised examples available for semi-supervised learning. @author Edoardo Airoldi Date: Mar 15, 2004 	8 20 331 6368 50310 608 1166 1322 9994
@author Cameron Williams Date: October 11, 2005 Stores a learned multiClassifier and uses that to predict a multiLabel for each instance. Each label from the multiLabel is then added as a feature to each instance. 	13 1166 59292 131184 1322 21227 1269 2447 14802 75 4240 354 1010 75
Implements the Listwise Ranking algorithm proposed at: Learning to Rank: From Pairwise Approach to Listwise Approach, ICML 2007. Zhe Cao, Tao Qin, Tie-Yan Liu, Ming-Feng Tsai, Hang Li. Only works for binary relevance levels (i.e., revelant vs non-revevant) @author Vitor R. Carvalho 	26 1965 8768 712 2458 608 27259 26176 769 769 12513 84980 137359 14742 138815 68467 63873 191238 130877 7418 3768 23 3423 27904 1022 95155 1166
SVMClassifier wrapps the prediction code from the libsvm library for binary or multi-class problems. A SVMClassifier must be built from a model, using the svm_model class from libsvm. This is best done by running the learner. <br> <br> Note that due to the way libsvm computes probabilities you may get different predictions for the same instance if you turn on probabilities compared to when you leave it turned off. See the libsvm home page for more details. @author qcm, Frank Lin 	35 142710 19161 22 57519 336 3423 50 41 850 903 665 58966 41 57519 389 29640 127 815 57519 9970 6907 20548 75 1075 6907 6275 920 7135 57519 441 320 2938 1166 17153 13849

Generate many copies of a ClassifierLearner. @author William Cohen 	5 268 4694 1166 34385 117549
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	18 362 1406 5726 22712 1110 3451 3947 169 18937 11548 439 6027 8032 1627 2422 1166 34385 117549
Defines the list of classes that can be selected by an instance of UIMain. 	5 1790 650 148 1994 75
@author Edoardo M. Airoldi Date: Feb 6, 2004 	3 1166 1322 24426
A subset of another TextLabels. @author William Cohen 	5 1142 170102 1166 34385 117549
Trains a StackedClassifierLearner using the information in a labeled relational Dataset. @author Zhenzhen Kou 	6 40709 980 6084 927 3299 1166
Created on Sep 26, 2005 @author Vitor R. Carvalho Passive Aggressive algorithm as described in "Online Passive Agressive Algorithms" Cramer, Dekel, Shalev-Shwartz, Singer, NIPS 2003. Classification mode. Additionally, it implements optionally a voting scheme. (voted parameter) 	20 393 7921 1166 25953 22320 712 594 25953 24782 910 58417 6930 2835 5697 1965 7811 71106 7867 10607 373
Main UI program. With enough support to make it configurable interactively, by command lines, or by a file. 	10 900 2101 243 476 6 3366 26812 953 45 17
Helper class for splitting up iterators over Examples, by class. @author Edoardo Airoldi Date: Dec 8, 2003 	9 5433 41 9797 11127 331 41 1166 1322 1521
Multi-class version of a binary classifier. Puts classifiers in order of ones with the most positive examples first. @author Cameron Williams 	13 50 41 439 3423 3087 155 3091 709 301 331 1166 59292 131184
Naive Bayes algorithm. If feature weights are word counts then this implements the usual multinomial naive Bayes. If feature weights are presence/absence this implements binomial naive Bayes. @author William Cohen 	23 6912 3086 712 1010 9076 2889 3812 1965 2359 103676 6912 3086 1010 9076 823 8012 1965 153089 6912 3086 1166 34385 117549
An inverted index, mapping features to examples which contain the features. @author William Cohen 	9 16526 703 698 2177 331 2177 1166 34385 117549
Wrap a hyperplane to that it supports the Instance interface. 	4 1547 1927 75 852
Apply a serialized annotator. @author William Cohen 	6 1150 5879 169622 1166 34385 117549
This class... @author ksteppe 	2 41 1166
Abstract implementation of a SpanFinder. @author William Cohen 	5 1139 208 1166 34385 117549
Provides some basic utilities for dealing with libsvm. It can convert Features to nodes, instances to node arrays and Datasets to problems. @author ksteppe, Frank Lin 	15 1604 6110 5916 57519 645 2177 4722 126 518 633 11687 850 1166 17153 13849
Batch version of an OnlineClassifierLearner. @author William Cohen 	5 2623 439 1166 34385 117549
Interface for something that trains multi label classifiers. @author Cameron Williams 	8 852 40709 50 4240 3091 1166 59292 131184
@author Edoardo Airoldi Date: Mar 15, 2004 	3 1166 1322 9994
This class is responsible for... @author ksteppe 	3 41 1792 1166
A sequence classifier that can report on the confidence associated with any subsequence of a sequential classification. @author William Cohen 	10 3136 3087 2298 21034 24273 3349 6930 1166 34385 117549
An annotator that uses a learned Classifier to mark up document spans. 	6 169622 2447 3087 4784 1342 22712
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a stacked batch learner. @author Zhenzhen Kou 	10 1139 5233 19169 29640 2423 931 11920 2623 29640 1166
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. Polynomial kernel is implemented: K(x,y) = (coef0+gamma*<x,y>)^d Both "voted" and "averaged" modes are implemented (unnormalized). Poly degree = 0 means that no kernel is used. Therefore, mode "averaged" with degree=0 should be equivalent to results in VotedPerceptron.java (file with a faster implementation of the averaged nonnormalized perceptron) @author Vitor Carvalho 	37 10607 712 285 2117 6930 712 73453 26773 81706 28591 38817 3334 608 961 9070 13856 944 34215 10607 7765 8939 944 100272 2951 1078 13856 2835 7765 2951 1000 694 11 17 3345 208 7765 1166
Creates Features, and maintains a mapping between Features and numeric ids. Also ensures that only a single feature instance exists with a particular name. 	12 2805 2177 8552 698 2177 3757 5287 2325 86 1010 75 1721
Learn from examples a GraphSearcher that re-ranks examples based on scores from a learned classifier. 	8 531 331 10644 331 3 4338 2447 3087
A set of examples for learning. @author William Cohen 	6 20 331 608 1166 34385 117549
A dataset which supports random access to the examples. @author William Cohen 	8 3299 1927 2594 835 331 1166 34385 117549
A more space-efficient version of a CandidateSegmentGroup. Space is saved by explicitly storing the instances for the unit-length segments, plus "deltas" for each non-unit length segment. Each "delta" encodes the difference between the segment instance and the sum of the unit-length instances it covers. @author William Cohen 	28 222 657 439 222 5360 1039 234 126 333 1317 8999 97417 333 1317 8796 4556 28293 82 8796 75 1200 333 1317 126 3415 1166 34385 117549
View result of some sort of train/test experiment for Data with Multiple Labels. @author Cameron Williams 	12 362 406 909 6867 1265 9132 52 44 9536 1166 59292 131184
This class is responsible for... @author ksteppe 	3 41 1792 1166
Some sample inputs for learners. @author William Cohen 	6 475 4346 148428 1166 34385 117549
Learn an Annotator from AnnotationExample's. @author William Cohen 	5 531 169622 1166 34385 117549
Multi-class version of a binary classifier. @author William Cohen 	8 50 41 439 3423 3087 1166 34385 117549
Abstract class which implements the 'getBinaryClassifier' method of BinaryClassifierLearner's. @author William Cohen 	7 1139 41 1965 65 1166 34385 117549
This class is responsible for... @author ksteppe 	3 41 1792 1166
Allows one to adjust the parameters of a learned extractor. @author William Cohen 	7 3040 853 2447 25127 1166 34385 117549
Generic implementation of an annotator. @author William Cohen 	6 979 208 169622 1166 34385 117549
A generative Model for word-counts based on the Poisson Distribution. @author Edoardo Airoldi 	8 54455 665 2889 3812 3 121109 891 1166
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author Cameron Williams 	14 75 1965 75 852 12024 3210 75 1591 2870 4240 5413 1166 59292 131184
Main UI program for the 'classify' package. @author William Cohen 	7 900 2101 243 453 1166 34385 117549
@author William Cohen 	3 1166 34385 117549
Do a train/test experiment for word taggers. @author William Cohen 	8 6867 1265 9132 2889 27859 1166 34385 117549
A Classifier which associates instances with a real number. Positive numbers indicate a positive class, negative numbers indicate a negative class. @author William Cohen 	16 3087 26338 126 81 731 301 9 301 41 3514 9 3514 41 1166 34385 117549
Evaluate a classifier as a ranker 	2 4589 3087
Trains a SequenceClassifierLearner using the information in a labeled Dataset. @author William Cohen 	7 40709 980 6084 3299 1166 34385 117549
Train a CMM (in batch mode). @author William Cohen 	7 6867 80478 2623 2835 1166 34385 117549
@author Edoardo Airoldi Date: Nov 14, 2004 	3 1166 1322 20211
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a standard on-line learner. @author William Cohen 	12 1139 5233 19169 29640 2423 931 895 51 29640 1166 34385 117549
Online version of a BatchClassifierLearner. @author William Cohen 	5 594 439 1166 34385 117549
Identifies a particular substring of a particular document. @author William Cohen 	6 23100 1417 1342 1166 34385 117549
View an object after passing it through a transformation. @author William cohen 	7 362 72 179 3906 1166 34385 117549
@author William Cohen 	3 1166 34385 117549
Stores some detailed results of evaluating a classifier on data. @author William Cohen 	9 1269 807 694 17255 3087 52 1166 34385 117549
Interface for a multi label classifier. @author Cameron Williams 	7 852 50 4240 3087 1166 59292 131184
@author William Cohen Date: Nov 21, 2003 	5 1166 34385 117549 1322 20211
This class is responsible for... @author ksteppe 	3 41 1792 1166
Tokenize a document 	2 11032 1342
Sequential learner based on the perceptron algorithm that takes the top-k viterbi paths and subtracts those within a margin of beta of the correct. * @author Sunita Sarawagi 	13 3349 29640 3 712 610 735 28656 403 23108 2117 6491 473 1166
Trivial annotator used as test case. 	4 1066 169622 1265 649
Records results of evaluating an extraction-learning system. @author William Cohen 	9 1940 694 17255 3567 608 139 1166 34385 117549
Utilities for reflection. 	2 6110 1775
Created on Sep 22, 2005 @author Vitor R. Carvalho Balanced Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Notation and some implementation details from "Mistake-Driven Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997 Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	41 393 7921 1166 10692 712 608 3983 5311 212 37853 4586 3530 712 252 608 716 208 2938 6860 242 608 779 3279 5697 1965 5580 2177 371 331 13 8960 2117 691 2117 373 7811 37009 71106 7867 10607 373
Main UI program for the 'classify' package. @author William Cohen 	7 900 2101 243 453 1166 34385 117549
package 	1 453
A weighted combination of features. @author William Cohen 	6 20000 5767 2177 1166 34385 117549
An annotator that uses a learned extractor to mark up document spans. 	6 169622 2447 25127 4784 1342 22712
Defines the list of classes that can be selected by an instance of UIMain. 	5 1790 650 148 1994 75
@author Edoardo Airoldi Date: Nov 24, 2003 	3 1166 1322 20211
This set of tests checks out the basic functionality of the TextBase class hierarchy. It tests loading documents, querying for its properties, creating document spans, document span loopers, etc. @author Quinten Mercer 	19 20 334 1628 1604 2824 41 2356 334 1343 5936 2247 199 3126 1342 22712 1342 7710 122592 1166
Learns to first transforming data with an InstanceTransform, then classify it. @author William Cohen 	7 6874 3351 52 37009 1166 34385 117549
Interface for OnlineLearner. Allows you to add to a learner by specifying a string rather than a Span. Can return a TextClassifier, which scores a String rather than a span. @author Cameron Williams 	12 852 505 29640 720 7710 834 4338 720 7710 1166 59292 131184
A single instance for a learner. This is basically a weighted set of features. @author William Cohen 	10 86 75 29640 580 20000 20 2177 1166 34385 117549
Modify a textlabeling using a series of mixup expressions. <pre> BNF: STATEMENT -> declareSpanType TYPE STATEMENT -> provide ID STATEMENT -> require ID [,FILE] STATEMENT -> annotateWith FILE STATEMENT -> defDict [+case] NAME = ID, ... , ID STATEMENT -> defTokenProp PROP:VALUE = GEN STATEMENT -> defSpanProp PROP:VALUE = GEN STATEMENT -> defSpanType TYPE2 = GEN STATEMENT -> defLevel NAME = LEVELDEF STATEMENT -> onLevel NAME STATEMENT -> offLevel NAME STATEMENT -> importFromLevel NAME TYPE = TYPE LEVELDEF -> filter TYPE LEVELDEF -> pseudotoken TYPE LEVELDEF -> split TOKEN LEVELDEF -> re 'REGEX' GEN -> [TYPE]: MIXUP-EXPR GEN -> [TYPE]- MIXUP-EXPR GEN -> [TYPE]~ re 'REGEX',NUMBER GEN -> [TYPE]~ trie phrase1, phrase2, ... ; statements are semicolon-separated // and comments look like this (C++ style) SEMANTICS: execute each command in order, saving spans/tokens as types, and asserting properties '=:' can be replaced with '=TYPE:', in which case the expr will be applied to each span of the given type, rather than all top-level spans defDict FOO = bar,baz,bat stores a lowercase version of each word the dictionary defDict +case FOO = blah,Bar,baZ stores each word the dictionary, preserving case in dictionaries and tries, a double-quoted word "foo.txt" means to find foo.txt on the classpath and store all lines from the file as words (after trimming them). TYPE: MIXUP-EXPR finds all spans inside a span of type TYPE that match the expression TYPE- MIXUP-EXPR finds all spans inside a span of type TYPE that do not contain anything matching MIXUP-EXPR </pre> <p> Mixup is matching language for modifying TextLabels. It can label spans with a given TYPE (the new label for that token span) and assign properties to spans (much like labels, but 'invisible'). There is more documentation for Mixup programs in the <a href="package-summary.html">package-level documents for Mixup.</a> <p> Briefly, a Mixup program will look something like this: <pre> require "req1"; //requires that "abc" type spans have already been labeled. If not, the default annoator //for "abc" will be used. require "req2", "req2.mixup"; //file 'def.mixup' will be run to provide "def" labels if they are not already there //if "def" labels were already generated by a different annotator, they will be used and //and 'def.mixup' won't be called. provide "xyz"; //this program will annotate the text with "xyz" labels defDict titleWord = mr, ms, mrs, dr; //defines a dictionary (with scope of this program execution called 'titleWord' //containing the values "mr", "ms", "mrs", "dr" defDict myDictionary = "dictionary.txt"; //defines a dictionary called 'myDictionary' with values taken from the file "dictionary.txt" defTokenProp title:true =: ... [ai(titleWord)] ... ; //finds all spans matching a work in the dictionary titleWord //those spans are given the property "Name" with value "true" (a string, not boolean) //if the span previously had "Name" property with a different value, that is replaced // the "..." before and after indicate that it doesn't matter what comes before or after the token //to be labeled. if I said "=: [ai(titleWord)];" the document would need to be JUST a titleword. defTokenProp titlePunc:1 =: ... title:true [','] ... || ... title:true ['.'] ... ; //spans "." or "," preceeded by a title are given the property titlePunc with value "1" //note that the entire '... title:true [','] ...' is an expression; or operators ("||") must be //<em> between</em> expressions, not within them defSpanType fullTitle =: ...[title:true titlePunc:1?R] ...; //label a span as "fullTitle" if there is a title span optionally followed b a titlePunc span //but not more than one (from the R) defSpanType the =: ... [eqi('the')] ...; //labels occurances of "the" ignoring case (eq = equals, adding i ignores case) defTokenProp aProp:t =: ...[<title:true, req1>] ...; /tokens which have the title=true property AND are labeled as req1 //are given the property aProp=t defTokenProp address:x =: ... [@fullTitle any] !a(myDictionary) ...; //label spans of one 'fullTitle' (the @ is needed //before types) and the following token, whatever it is, // which are followed by something other than a myDictionary word defTokenProp capProp:on =req2: ... [re('^[A-Z]$')] ...; //on spans of type req2, match tokens fitting the given regular expression defSpanType listSet =: ... [address+R] ...; //label as header spans of 1 or more address tokens, going all the way to //right most possible token - example: blah address1 address2 address3 blah // - will return three spans: "address3", "address2 address3", and "address1 address2 address3" defSpanType adList =: ... [L address+ R] ...; //as above but only returns the longest span defSpanType header =: [L address* R] ...; //label longest span of 0 or more address tokens at the beginning of the document defSpanType shortList =: ... [address{2,3}] ...; //label spans of 2 or 3 address tokens defSpanType xyz =header: ...[capProp] ...; //providing the promised xyz labeling //creates a new level where each document is a span with spanType defLevel newLevel = filter spanType; //creates a new level where tokens of spanType are combined into a single token defLevel newLevel = pseudotoken spanType; //creates a new level where the textBase is retokenized by splitting a a certain token defLevel newLevel = split '.'; //create a new level where the textBase is retokenized using a regular expression defLevel newLevel = re '([^\n]+)'; //switches current textBase and Labels to Level onLevel levelName; //returns to root (or original) level - levelName is the name of the child level which you are switching off offLevel childLevelName; //Imports spans of Type in the child level to spans of newType in the parent level importFromLevel childLevelName newType = type; </pre> @author William Cohen 	392 859 729 113716 239 18734 1307 228 1307 800 825 1307 230 825 17 1307 17 1307 649 825 825 1307 19767 14436 1307 19767 14436 1307 5868 14436 1307 1307 1307 1307 228 228 1874 228 228 1633 3815 182314 14436 228 113716 14635 14436 228 113716 14635 14436 228 182314 731 14436 228 3981 686 1634 862 1035 2116 197 96 953 709 1238 22712 5215 248 14577 199 6215 228 649 14635 4440 7710 228 735 79 22712 134 131 34680 4200 1269 6454 439 2889 6897 649 134 10362 131 34680 1269 2889 6897 10143 649 23220 460 4044 2889 134 2302 1078 317 134 2302 472 216 45 17 1272 15596 228 113716 14635 4108 22712 64 7710 228 228 185 1632 228 113716 14635 4108 22712 64 7710 228 228 168 113716 14635 113716 168 319 1405 170102 4240 22712 228 4240 3815 7710 1271 199 22712 9536 1216 113716 1374 453 79 5936 113716 7655 113716 243 230 977 4610 228 22712 6084 14 4610 230 113716 17 11444 235 800 11444 9536 11444 9536 258 169622 11444 1631 157 800 5398 243 3535 779 5398 9536 2598 3881 38466 16862 1790 6897 66 243 1354 157 38 2598 3881 38466 16862 192804 6897 2302 1790 6897 157 38 17 6897 2302 784 343 33040 4108 22712 168 375 6897 22712 374 343 720 1412 7710 5647 374 6215 74 510 3815 6084 33040 1342 784 343 784 343 22712 64854 784 374 127 71 784 343 1632 730 239 784 343 4240 7710 784 7710 7811 7710 118585 9536 74381 9438 649 15958 1691 1577 5658 649 5215 784 343 374 6084 374 1625 192804 4240 22712 2341 248 3815 192804 2889 22712 228 185 5215 13281 19 1632 165822 1625 4240 2103 22712 1625 5215 3815 10362 70784 70785 99170 10362 834 22712 99170 70785 99170 70784 70785 99170 1625 1335 16964 7710 2103 1625 4240 16964 7710 1625 5215 827 1342 85752 1625 4240 22712 1625 5215 5398 2103 4640 52452 5398 35442 2805 79 1342 7710 158150 1874 2805 79 5215 39 86 3815 158150 2805 79 9797 3815 158150 1633 18 79 19 1632 158150 10153 1736 9536 79 1335 2355 639 79 1581 79 2954 6389 22712 228 1581 79 22712 102470 1580 79 102470 228 1166 34385 117549
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	18 362 1406 5726 22712 1110 3451 3947 169 18937 11548 439 6027 8032 1627 2422 1166 34385 117549
Created on Sep 21, 2005 @author Vitor R. Carvalho Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Some implementation details also described in: Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997. Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	37 393 7921 1166 712 608 3983 5311 212 37853 4586 3530 712 252 608 208 2938 608 779 3279 5697 1965 5580 2177 371 331 13 8960 2117 691 2117 373 7811 37009 71106 7867 10607 373
@author Edoardo Airoldi Date: Dec 5, 2003 	3 1166 1322 1521
Annotate substrings that are legal URLs. @author William Cohen 	7 3535 4529 5167 1519 1166 34385 117549
Run an annotation-learning experiment based on pre-labeled text. @author William Cohen 	11 235 841 608 9132 3 2252 6084 779 1166 34385 117549
Implements the teacher's side of the learner-teacher protocol for SGM. @author Zhenzhen Kou 	7 1965 38615 12 29640 19169 2423 1166
Helper class for splitting up iterators over Instances @author William Cohen 	8 5433 41 9797 11127 126 1166 34385 117549
for (int j=0; j<hmm.nstate; j++) { for (int i=0; i<b.length; i++) out.print(HMM.fmtlog(b[i][j])); out.println(); } } 	1 136
This class is responsible for... @author ksteppe 	3 41 1792 1166
A span that is a subset of another span @author Cameron Williams 	6 7710 1142 7710 1166 59292 131184
Interactivly edit document spans. @author William Cohen 	6 717 1342 22712 1166 34385 117549
Interface for something that learns sequence classifiers. @author William Cohen 	7 852 6874 3136 3091 1166 34385 117549
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. @author William Cohen 	17 10607 712 285 2117 6930 712 73453 26773 81706 28591 38817 3334 608 961 1166 34385 117549
Wraps JFreeChart's XY line graph capability. @author William cohen 	9 2628 60922 5698 51 2949 2260 1166 34385 117549
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author William Cohen 	14 75 1965 75 852 12024 3210 75 1591 2870 4240 5413 1166 34385 117549
Tokenize a string. 	2 11032 720
{ printa(out); printe(out); } public void printa(Output out) { out.println("Transition probabilities:"); for (int i=1; i<nstate; i++) { for (int j=1; j<nstate; j++) out.print(fmtlog(loga[i][j])); out.println(); } } 	9 36845 137 138 36845 446 140 14797 6907 136
Dataset i/o. For ordinary datasets, format is one example per line, and the format for a line is: <pre> <code>type subpopid label feature1 feature2 ...</code> </pre>where <ul> <li>type=b or k (for binary or ordinary examples) <li>subpopid is NUL or a string, naming the subpopulation from which the example was drawn <li>label is +1 or -1 for binary <li>features are a feature name (for binary features) and a featureName=value for numeric features. </ul> For example: <code> k subpop1 2 f1=4 fOrange=1 fGreen=92 ... k subpop1 1 f1=1 fBlue=10 fGreen=2 ... k subpop2 3 f1=2 fYellow=1 fRed=42 ... </code> or <code> b NUL +1 f1=2 fOrange=1 fGreen=92 ... b NUL -1 f1=1 fBlue=10 fGreen=2 ... </code> or <code> k subpop1 2 f1 fOrange fGreen ... k subpop1 1 f1 fBlue fGreen ... k subpop2 3 f1 fYellow fRed ... </code> For SequenceDatasets, examples from a diffrerent sequence are separated by a single line containing a "*". @author William Cohen 	32 3299 1701 11687 604 51 604 51 228 3423 1701 331 43506 720 1349 5071 4240 3423 2177 1010 3423 2177 3757 2177 331 161740 3136 862 86 51 1166 34385 117549
