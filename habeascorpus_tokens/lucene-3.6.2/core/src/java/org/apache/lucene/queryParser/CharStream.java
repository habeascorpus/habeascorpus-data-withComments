/* Generated By:JavaCC: Do not edit this line. CharStream.java Version 5.0 */	TokenNameCOMMENT_BLOCK	 Generated By:JavaCC: Do not edit this line. CharStream.java Version 5.0 
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */	TokenNameCOMMENT_BLOCK	 JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true 
package	TokenNamepackage	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
lucene	TokenNameIdentifier	 lucene
.	TokenNameDOT	
queryParser	TokenNameIdentifier	 query Parser
;	TokenNameSEMICOLON	
/** * This interface describes a character stream that maintains line and * column number positions of the characters. It also has the capability * to backup the stream to some extent. An implementation of this * interface is used in the TokenManager implementation generated by * JavaCCParser. * * All the methods except backup can be implemented in any fashion. backup * needs to be implemented correctly for the correct operation of the lexer. * Rest of the methods are all used to get information like line number, * column number and the String that constitutes a token and are not used * by the lexer. Hence their implementation won't affect the generated lexer's * operation. */	TokenNameCOMMENT_JAVADOC	 This interface describes a character stream that maintains line and column number positions of the characters. It also has the capability to backup the stream to some extent. An implementation of this interface is used in the TokenManager implementation generated by JavaCCParser. * All the methods except backup can be implemented in any fashion. backup needs to be implemented correctly for the correct operation of the lexer. Rest of the methods are all used to get information like line number, column number and the String that constitutes a token and are not used by the lexer. Hence their implementation won't affect the generated lexer's operation. 
public	TokenNamepublic	
interface	TokenNameinterface	
CharStream	TokenNameIdentifier	 Char Stream
{	TokenNameLBRACE	
/** * Returns the next character from the selected input. The method * of selecting the input is the responsibility of the class * implementing this interface. Can throw any java.io.IOException. */	TokenNameCOMMENT_JAVADOC	 Returns the next character from the selected input. The method of selecting the input is the responsibility of the class implementing this interface. Can throw any java.io.IOException. 
char	TokenNamechar	
readChar	TokenNameIdentifier	 read Char
(	TokenNameLPAREN	
)	TokenNameRPAREN	
throws	TokenNamethrows	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
IOException	TokenNameIdentifier	 IO Exception
;	TokenNameSEMICOLON	
@	TokenNameAT	
Deprecated	TokenNameIdentifier	 Deprecated
/** * Returns the column position of the character last read. * @deprecated * @see #getEndColumn */	TokenNameCOMMENT_JAVADOC	 Returns the column position of the character last read. @deprecated @see #getEndColumn 
int	TokenNameint	
getColumn	TokenNameIdentifier	 get Column
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
@	TokenNameAT	
Deprecated	TokenNameIdentifier	 Deprecated
/** * Returns the line number of the character last read. * @deprecated * @see #getEndLine */	TokenNameCOMMENT_JAVADOC	 Returns the line number of the character last read. @deprecated @see #getEndLine 
int	TokenNameint	
getLine	TokenNameIdentifier	 get Line
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** * Returns the column number of the last character for current token (being * matched after the last call to BeginTOken). */	TokenNameCOMMENT_JAVADOC	 Returns the column number of the last character for current token (being matched after the last call to BeginTOken). 
int	TokenNameint	
getEndColumn	TokenNameIdentifier	 get End Column
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** * Returns the line number of the last character for current token (being * matched after the last call to BeginTOken). */	TokenNameCOMMENT_JAVADOC	 Returns the line number of the last character for current token (being matched after the last call to BeginTOken). 
int	TokenNameint	
getEndLine	TokenNameIdentifier	 get End Line
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** * Returns the column number of the first character for current token (being * matched after the last call to BeginTOken). */	TokenNameCOMMENT_JAVADOC	 Returns the column number of the first character for current token (being matched after the last call to BeginTOken). 
int	TokenNameint	
getBeginColumn	TokenNameIdentifier	 get Begin Column
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** * Returns the line number of the first character for current token (being * matched after the last call to BeginTOken). */	TokenNameCOMMENT_JAVADOC	 Returns the line number of the first character for current token (being matched after the last call to BeginTOken). 
int	TokenNameint	
getBeginLine	TokenNameIdentifier	 get Begin Line
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** * Backs up the input stream by amount steps. Lexer calls this method if it * had already read some characters, but could not use them to match a * (longer) token. So, they will be used again as the prefix of the next * token and it is the implemetation's responsibility to do this right. */	TokenNameCOMMENT_JAVADOC	 Backs up the input stream by amount steps. Lexer calls this method if it had already read some characters, but could not use them to match a (longer) token. So, they will be used again as the prefix of the next token and it is the implemetation's responsibility to do this right. 
void	TokenNamevoid	
backup	TokenNameIdentifier	 backup
(	TokenNameLPAREN	
int	TokenNameint	
amount	TokenNameIdentifier	 amount
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** * Returns the next character that marks the beginning of the next token. * All characters must remain in the buffer between two successive calls * to this method to implement backup correctly. */	TokenNameCOMMENT_JAVADOC	 Returns the next character that marks the beginning of the next token. All characters must remain in the buffer between two successive calls to this method to implement backup correctly. 
char	TokenNamechar	
BeginToken	TokenNameIdentifier	 Begin Token
(	TokenNameLPAREN	
)	TokenNameRPAREN	
throws	TokenNamethrows	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
IOException	TokenNameIdentifier	 IO Exception
;	TokenNameSEMICOLON	
/** * Returns a string made up of characters from the marked token beginning * to the current buffer position. Implementations have the choice of returning * anything that they want to. For example, for efficiency, one might decide * to just return null, which is a valid implementation. */	TokenNameCOMMENT_JAVADOC	 Returns a string made up of characters from the marked token beginning to the current buffer position. Implementations have the choice of returning anything that they want to. For example, for efficiency, one might decide to just return null, which is a valid implementation. 
String	TokenNameIdentifier	 String
GetImage	TokenNameIdentifier	 Get Image
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** * Returns an array of characters that make up the suffix of length 'len' for * the currently matched token. This is used to build up the matched string * for use in actions in the case of MORE. A simple and inefficient * implementation of this is as follows : * * { * String t = GetImage(); * return t.substring(t.length() - len, t.length()).toCharArray(); * } */	TokenNameCOMMENT_JAVADOC	 Returns an array of characters that make up the suffix of length 'len' for the currently matched token. This is used to build up the matched string for use in actions in the case of MORE. A simple and inefficient implementation of this is as follows : * { String t = GetImage(); return t.substring(t.length() - len, t.length()).toCharArray(); } 
char	TokenNamechar	
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
GetSuffix	TokenNameIdentifier	 Get Suffix
(	TokenNameLPAREN	
int	TokenNameint	
len	TokenNameIdentifier	 len
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** * The lexer calls this function to indicate that it is done with the stream * and hence implementations can free any resources held by this class. * Again, the body of this function can be just empty and it will not * affect the lexer's operation. */	TokenNameCOMMENT_JAVADOC	 The lexer calls this function to indicate that it is done with the stream and hence implementations can free any resources held by this class. Again, the body of this function can be just empty and it will not affect the lexer's operation. 
void	TokenNamevoid	
Done	TokenNameIdentifier	 Done
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/* JavaCC - OriginalChecksum=6b854f7f279fcc2b052037ffc369be2d (do not edit this line) */	TokenNameCOMMENT_BLOCK	 JavaCC - OriginalChecksum=6b854f7f279fcc2b052037ffc369be2d (do not edit this line) 
