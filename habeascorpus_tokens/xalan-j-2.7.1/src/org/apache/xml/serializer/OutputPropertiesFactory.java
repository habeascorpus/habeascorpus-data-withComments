/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements. See the NOTICE file * distributed with this work for additional information * regarding copyright ownership. The ASF licenses this file * to you under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */	TokenNameCOMMENT_BLOCK	 Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at * http://www.apache.org/licenses/LICENSE-2.0 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
/* * $Id: OutputPropertiesFactory.java 468654 2006-10-28 07:09:23Z minchau $ */	TokenNameCOMMENT_BLOCK	 $Id: OutputPropertiesFactory.java 468654 2006-10-28 07:09:23Z minchau $ 
package	TokenNamepackage	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
xml	TokenNameIdentifier	 xml
.	TokenNameDOT	
serializer	TokenNameIdentifier	 serializer
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
BufferedInputStream	TokenNameIdentifier	 Buffered Input Stream
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
IOException	TokenNameIdentifier	 IO Exception
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
InputStream	TokenNameIdentifier	 Input Stream
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
security	TokenNameIdentifier	 security
.	TokenNameDOT	
AccessController	TokenNameIdentifier	 Access Controller
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
security	TokenNameIdentifier	 security
.	TokenNameDOT	
PrivilegedAction	TokenNameIdentifier	 Privileged Action
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
Enumeration	TokenNameIdentifier	 Enumeration
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
util	TokenNameIdentifier	 util
.	TokenNameDOT	
Properties	TokenNameIdentifier	 Properties
;	TokenNameSEMICOLON	
import	TokenNameimport	
javax	TokenNameIdentifier	 javax
.	TokenNameDOT	
xml	TokenNameIdentifier	 xml
.	TokenNameDOT	
transform	TokenNameIdentifier	 transform
.	TokenNameDOT	
OutputKeys	TokenNameIdentifier	 Output Keys
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
xml	TokenNameIdentifier	 xml
.	TokenNameDOT	
serializer	TokenNameIdentifier	 serializer
.	TokenNameDOT	
utils	TokenNameIdentifier	 utils
.	TokenNameDOT	
MsgKey	TokenNameIdentifier	 Msg Key
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
xml	TokenNameIdentifier	 xml
.	TokenNameDOT	
serializer	TokenNameIdentifier	 serializer
.	TokenNameDOT	
utils	TokenNameIdentifier	 utils
.	TokenNameDOT	
Utils	TokenNameIdentifier	 Utils
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
xml	TokenNameIdentifier	 xml
.	TokenNameDOT	
serializer	TokenNameIdentifier	 serializer
.	TokenNameDOT	
utils	TokenNameIdentifier	 utils
.	TokenNameDOT	
WrappedRuntimeException	TokenNameIdentifier	 Wrapped Runtime Exception
;	TokenNameSEMICOLON	
/** * This class is a factory to generate a set of default properties * of key/value pairs that are used to create a serializer through the * factory {@link SerializerFactory SerilizerFactory}. * The properties generated by this factory * may be modified to non-default values before the SerializerFactory is used to * create a Serializer. * <p> * The given output types supported are "xml", "text", and "html". * These type strings can be obtained from the * {@link Method Method} class in this package. * <p> * Other constants defined in this class are the non-standard property keys * that can be used to set non-standard property values on a java.util.Properties object * that is used to create or configure a serializer. Here are the non-standard keys: * <ul> * <li> <b>S_KEY_INDENT_AMOUNT </b> - * The non-standard property key to use to set the indentation amount. * The "indent" key needs to have a value of "yes", and this * properties value is a the number of whitespaces to indent by per * indentation level. * * <li> <b>S_KEY_CONTENT_HANDLER </b> - * This non-standard property key is used to set the name of the fully qualified * Java class that implements the ContentHandler interface. * The output of the serializer will be SAX events sent to this an * object of this class. * * <li> <b>S_KEY_ENTITIES </b> - * This non-standard property key is used to specify the name of the property file * that specifies character to entity reference mappings. A line in such a * file is has the name of the entity and the numeric (base 10) value * of the corresponding character, like this one: <br> quot=34 <br> * * <li> <b>S_USE_URL_ESCAPING </b> - * This non-standard property key is used to set a value of "yes" if the href values for HTML serialization should * use %xx escaping. * * <li> <b>S_OMIT_META_TAG </b> - * This non-standard property key is used to set a value of "yes" if the META tag should be omitted where it would * otherwise be supplied. * </ul> * * @see SerializerFactory * @see Method * @see Serializer */	TokenNameCOMMENT_JAVADOC	 This class is a factory to generate a set of default properties of key/value pairs that are used to create a serializer through the factory {@link SerializerFactory SerilizerFactory}. The properties generated by this factory may be modified to non-default values before the SerializerFactory is used to create a Serializer. <p> The given output types supported are "xml", "text", and "html". These type strings can be obtained from the {@link Method Method} class in this package. <p> Other constants defined in this class are the non-standard property keys that can be used to set non-standard property values on a java.util.Properties object that is used to create or configure a serializer. Here are the non-standard keys: <ul> <li> <b>S_KEY_INDENT_AMOUNT </b> - The non-standard property key to use to set the indentation amount. The "indent" key needs to have a value of "yes", and this properties value is a the number of whitespaces to indent by per indentation level. * <li> <b>S_KEY_CONTENT_HANDLER </b> - This non-standard property key is used to set the name of the fully qualified Java class that implements the ContentHandler interface. The output of the serializer will be SAX events sent to this an object of this class. * <li> <b>S_KEY_ENTITIES </b> - This non-standard property key is used to specify the name of the property file that specifies character to entity reference mappings. A line in such a file is has the name of the entity and the numeric (base 10) value of the corresponding character, like this one: <br> quot=34 <br> * <li> <b>S_USE_URL_ESCAPING </b> - This non-standard property key is used to set a value of "yes" if the href values for HTML serialization should use %xx escaping. * <li> <b>S_OMIT_META_TAG </b> - This non-standard property key is used to set a value of "yes" if the META tag should be omitted where it would otherwise be supplied. </ul> * @see SerializerFactory @see Method @see Serializer 
public	TokenNamepublic	
final	TokenNamefinal	
class	TokenNameclass	
OutputPropertiesFactory	TokenNameIdentifier	 Output Properties Factory
{	TokenNameLBRACE	
/** S_BUILTIN_EXTENSIONS_URL is a mnemonic for the XML Namespace *(http://xml.apache.org/xalan) predefined to signify Xalan's * built-in XSLT Extensions. When used in stylesheets, this is often * bound to the "xalan:" prefix. */	TokenNameCOMMENT_JAVADOC	 S_BUILTIN_EXTENSIONS_URL is a mnemonic for the XML Namespace *(http://xml.apache.org/xalan) predefined to signify Xalan's built-in XSLT Extensions. When used in stylesheets, this is often bound to the "xalan:" prefix. 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_BUILTIN_EXTENSIONS_URL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  URL
=	TokenNameEQUAL	
"http://xml.apache.org/xalan"	TokenNameStringLiteral	http://xml.apache.org/xalan
;	TokenNameSEMICOLON	
/** * The old built-in extension url. It is still supported for * backward compatibility. */	TokenNameCOMMENT_JAVADOC	 The old built-in extension url. It is still supported for backward compatibility. 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_BUILTIN_OLD_EXTENSIONS_URL	TokenNameIdentifier	 S  BUILTIN  OLD  EXTENSIONS  URL
=	TokenNameEQUAL	
"http://xml.apache.org/xslt"	TokenNameStringLiteral	http://xml.apache.org/xslt
;	TokenNameSEMICOLON	
//************************************************************ 	TokenNameCOMMENT_LINE	************************************************************ 
//* PUBLIC CONSTANTS 	TokenNameCOMMENT_LINE	* PUBLIC CONSTANTS 
//************************************************************ 	TokenNameCOMMENT_LINE	************************************************************ 
/** * This is not a public API. * This is the built-in extensions namespace, * reexpressed in {namespaceURI} syntax * suitable for prepending to a localname to produce a "universal * name". */	TokenNameCOMMENT_JAVADOC	 This is not a public API. This is the built-in extensions namespace, reexpressed in {namespaceURI} syntax suitable for prepending to a localname to produce a "universal name". 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_BUILTIN_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  UNIVERSAL
=	TokenNameEQUAL	
"{"	TokenNameStringLiteral	{
+	TokenNamePLUS	
S_BUILTIN_EXTENSIONS_URL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  URL
+	TokenNamePLUS	
"}"	TokenNameStringLiteral	}
;	TokenNameSEMICOLON	
// Some special Xalan keys. 	TokenNameCOMMENT_LINE	Some special Xalan keys. 
/** * The non-standard property key to use to set the * number of whitepaces to indent by, per indentation level, * if indent="yes". */	TokenNameCOMMENT_JAVADOC	 The non-standard property key to use to set the number of whitepaces to indent by, per indentation level, if indent="yes". 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_KEY_INDENT_AMOUNT	TokenNameIdentifier	 S  KEY  INDENT  AMOUNT
=	TokenNameEQUAL	
S_BUILTIN_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  UNIVERSAL
+	TokenNamePLUS	
"indent-amount"	TokenNameStringLiteral	indent-amount
;	TokenNameSEMICOLON	
/** * The non-standard property key to use to set the * characters to write out as at the end of a line, * rather than the default ones from the runtime. */	TokenNameCOMMENT_JAVADOC	 The non-standard property key to use to set the characters to write out as at the end of a line, rather than the default ones from the runtime. 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_KEY_LINE_SEPARATOR	TokenNameIdentifier	 S  KEY  LINE  SEPARATOR
=	TokenNameEQUAL	
S_BUILTIN_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  UNIVERSAL
+	TokenNamePLUS	
"line-separator"	TokenNameStringLiteral	line-separator
;	TokenNameSEMICOLON	
/** This non-standard property key is used to set the name of the fully qualified * Java class that implements the ContentHandler interface. * Fully qualified name of class with a default constructor that * implements the ContentHandler interface, where the result tree events * will be sent to. */	TokenNameCOMMENT_JAVADOC	 This non-standard property key is used to set the name of the fully qualified Java class that implements the ContentHandler interface. Fully qualified name of class with a default constructor that implements the ContentHandler interface, where the result tree events will be sent to. 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_KEY_CONTENT_HANDLER	TokenNameIdentifier	 S  KEY  CONTENT  HANDLER
=	TokenNameEQUAL	
S_BUILTIN_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  UNIVERSAL
+	TokenNamePLUS	
"content-handler"	TokenNameStringLiteral	content-handler
;	TokenNameSEMICOLON	
/** * This non-standard property key is used to specify the name of the property file * that specifies character to entity reference mappings. */	TokenNameCOMMENT_JAVADOC	 This non-standard property key is used to specify the name of the property file that specifies character to entity reference mappings. 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_KEY_ENTITIES	TokenNameIdentifier	 S  KEY  ENTITIES
=	TokenNameEQUAL	
S_BUILTIN_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  UNIVERSAL
+	TokenNamePLUS	
"entities"	TokenNameStringLiteral	entities
;	TokenNameSEMICOLON	
/** * This non-standard property key is used to set a value of "yes" if the href values for HTML serialization should * use %xx escaping. */	TokenNameCOMMENT_JAVADOC	 This non-standard property key is used to set a value of "yes" if the href values for HTML serialization should use %xx escaping. 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_USE_URL_ESCAPING	TokenNameIdentifier	 S  USE  URL  ESCAPING
=	TokenNameEQUAL	
S_BUILTIN_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  UNIVERSAL
+	TokenNamePLUS	
"use-url-escaping"	TokenNameStringLiteral	use-url-escaping
;	TokenNameSEMICOLON	
/** * This non-standard property key is used to set a value of "yes" if the META tag should be omitted where it would * otherwise be supplied. */	TokenNameCOMMENT_JAVADOC	 This non-standard property key is used to set a value of "yes" if the META tag should be omitted where it would otherwise be supplied. 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_OMIT_META_TAG	TokenNameIdentifier	 S  OMIT  META  TAG
=	TokenNameEQUAL	
S_BUILTIN_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  UNIVERSAL
+	TokenNamePLUS	
"omit-meta-tag"	TokenNameStringLiteral	omit-meta-tag
;	TokenNameSEMICOLON	
/** * The old built-in extension namespace, this is not a public API. */	TokenNameCOMMENT_JAVADOC	 The old built-in extension namespace, this is not a public API. 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  OLD  EXTENSIONS  UNIVERSAL
=	TokenNameEQUAL	
"{"	TokenNameStringLiteral	{
+	TokenNamePLUS	
S_BUILTIN_OLD_EXTENSIONS_URL	TokenNameIdentifier	 S  BUILTIN  OLD  EXTENSIONS  URL
+	TokenNamePLUS	
"}"	TokenNameStringLiteral	}
;	TokenNameSEMICOLON	
/** * This is not a public API, it is only public because it is used * by outside of this package, * it is the length of the old built-in extension namespace. */	TokenNameCOMMENT_JAVADOC	 This is not a public API, it is only public because it is used by outside of this package, it is the length of the old built-in extension namespace. 
public	TokenNamepublic	
static	TokenNamestatic	
final	TokenNamefinal	
int	TokenNameint	
S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL_LEN	TokenNameIdentifier	 S  BUILTIN  OLD  EXTENSIONS  UNIVERSAL  LEN
=	TokenNameEQUAL	
S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  OLD  EXTENSIONS  UNIVERSAL
.	TokenNameDOT	
length	TokenNameIdentifier	 length
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
//************************************************************ 	TokenNameCOMMENT_LINE	************************************************************ 
//* PRIVATE CONSTANTS 	TokenNameCOMMENT_LINE	* PRIVATE CONSTANTS 
//************************************************************ 	TokenNameCOMMENT_LINE	************************************************************ 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_XSLT_PREFIX	TokenNameIdentifier	 S  XSLT  PREFIX
=	TokenNameEQUAL	
"xslt.output."	TokenNameStringLiteral	xslt.output.
;	TokenNameSEMICOLON	
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
int	TokenNameint	
S_XSLT_PREFIX_LEN	TokenNameIdentifier	 S  XSLT  PREFIX  LEN
=	TokenNameEQUAL	
S_XSLT_PREFIX	TokenNameIdentifier	 S  XSLT  PREFIX
.	TokenNameDOT	
length	TokenNameIdentifier	 length
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
S_XALAN_PREFIX	TokenNameIdentifier	 S  XALAN  PREFIX
=	TokenNameEQUAL	
"org.apache.xslt."	TokenNameStringLiteral	org.apache.xslt.
;	TokenNameSEMICOLON	
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
int	TokenNameint	
S_XALAN_PREFIX_LEN	TokenNameIdentifier	 S  XALAN  PREFIX  LEN
=	TokenNameEQUAL	
S_XALAN_PREFIX	TokenNameIdentifier	 S  XALAN  PREFIX
.	TokenNameDOT	
length	TokenNameIdentifier	 length
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** Synchronization object for lazy initialization of the above tables. */	TokenNameCOMMENT_JAVADOC	 Synchronization object for lazy initialization of the above tables. 
private	TokenNameprivate	
static	TokenNamestatic	
Integer	TokenNameIdentifier	 Integer
m_synch_object	TokenNameIdentifier	 m synch object
=	TokenNameEQUAL	
new	TokenNamenew	
Integer	TokenNameIdentifier	 Integer
(	TokenNameLPAREN	
1	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
/** the directory in which the various method property files are located */	TokenNameCOMMENT_JAVADOC	 the directory in which the various method property files are located 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
PROP_DIR	TokenNameIdentifier	 PROP  DIR
=	TokenNameEQUAL	
SerializerBase	TokenNameIdentifier	 Serializer Base
.	TokenNameDOT	
PKG_PATH	TokenNameIdentifier	 PKG  PATH
+	TokenNamePLUS	
'/'	TokenNameCharacterLiteral	
;	TokenNameSEMICOLON	
/** property file for default XML properties */	TokenNameCOMMENT_JAVADOC	 property file for default XML properties 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
PROP_FILE_XML	TokenNameIdentifier	 PROP  FILE  XML
=	TokenNameEQUAL	
"output_xml.properties"	TokenNameStringLiteral	output_xml.properties
;	TokenNameSEMICOLON	
/** property file for default TEXT properties */	TokenNameCOMMENT_JAVADOC	 property file for default TEXT properties 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
PROP_FILE_TEXT	TokenNameIdentifier	 PROP  FILE  TEXT
=	TokenNameEQUAL	
"output_text.properties"	TokenNameStringLiteral	output_text.properties
;	TokenNameSEMICOLON	
/** property file for default HTML properties */	TokenNameCOMMENT_JAVADOC	 property file for default HTML properties 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
PROP_FILE_HTML	TokenNameIdentifier	 PROP  FILE  HTML
=	TokenNameEQUAL	
"output_html.properties"	TokenNameStringLiteral	output_html.properties
;	TokenNameSEMICOLON	
/** property file for default UNKNOWN (Either XML or HTML, to be determined later) properties */	TokenNameCOMMENT_JAVADOC	 property file for default UNKNOWN (Either XML or HTML, to be determined later) properties 
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
PROP_FILE_UNKNOWN	TokenNameIdentifier	 PROP  FILE  UNKNOWN
=	TokenNameEQUAL	
"output_unknown.properties"	TokenNameStringLiteral	output_unknown.properties
;	TokenNameSEMICOLON	
//************************************************************ 	TokenNameCOMMENT_LINE	************************************************************ 
//* PRIVATE STATIC FIELDS 	TokenNameCOMMENT_LINE	* PRIVATE STATIC FIELDS 
//************************************************************ 	TokenNameCOMMENT_LINE	************************************************************ 
/** The default properties of all output files. */	TokenNameCOMMENT_JAVADOC	 The default properties of all output files. 
private	TokenNameprivate	
static	TokenNamestatic	
Properties	TokenNameIdentifier	 Properties
m_xml_properties	TokenNameIdentifier	 m xml properties
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
/** The default properties when method="html". */	TokenNameCOMMENT_JAVADOC	 The default properties when method="html". 
private	TokenNameprivate	
static	TokenNamestatic	
Properties	TokenNameIdentifier	 Properties
m_html_properties	TokenNameIdentifier	 m html properties
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
/** The default properties when method="text". */	TokenNameCOMMENT_JAVADOC	 The default properties when method="text". 
private	TokenNameprivate	
static	TokenNamestatic	
Properties	TokenNameIdentifier	 Properties
m_text_properties	TokenNameIdentifier	 m text properties
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
/** The properties when method="" for the "unknown" wrapper */	TokenNameCOMMENT_JAVADOC	 The properties when method="" for the "unknown" wrapper 
private	TokenNameprivate	
static	TokenNamestatic	
Properties	TokenNameIdentifier	 Properties
m_unknown_properties	TokenNameIdentifier	 m unknown properties
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
private	TokenNameprivate	
static	TokenNamestatic	
final	TokenNamefinal	
Class	TokenNameIdentifier	 Class
ACCESS_CONTROLLER_CLASS	TokenNameIdentifier	 ACCESS  CONTROLLER  CLASS
=	TokenNameEQUAL	
findAccessControllerClass	TokenNameIdentifier	 find Access Controller Class
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
private	TokenNameprivate	
static	TokenNamestatic	
Class	TokenNameIdentifier	 Class
findAccessControllerClass	TokenNameIdentifier	 find Access Controller Class
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
try	TokenNametry	
{	TokenNameLBRACE	
// This Class was introduced in JDK 1.2. With the re-architecture of 	TokenNameCOMMENT_LINE	This Class was introduced in JDK 1.2. With the re-architecture of 
// security mechanism ( starting in JDK 1.2 ), we have option of 	TokenNameCOMMENT_LINE	security mechanism ( starting in JDK 1.2 ), we have option of 
// giving privileges to certain part of code using doPrivileged block. 	TokenNameCOMMENT_LINE	giving privileges to certain part of code using doPrivileged block. 
// In JDK1.1.X applications won't be having security manager and if 	TokenNameCOMMENT_LINE	In JDK1.1.X applications won't be having security manager and if 
// there is security manager ( in applets ), code need to be signed 	TokenNameCOMMENT_LINE	there is security manager ( in applets ), code need to be signed 
// and trusted for having access to resources. 	TokenNameCOMMENT_LINE	and trusted for having access to resources. 
return	TokenNamereturn	
Class	TokenNameIdentifier	 Class
.	TokenNameDOT	
forName	TokenNameIdentifier	 for Name
(	TokenNameLPAREN	
"java.security.AccessController"	TokenNameStringLiteral	java.security.AccessController
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
catch	TokenNamecatch	
(	TokenNameLPAREN	
Exception	TokenNameIdentifier	 Exception
e	TokenNameIdentifier	 e
)	TokenNameRPAREN	
{	TokenNameLBRACE	
//User may be using older JDK ( JDK <1.2 ). Allow him/her to use it. 	TokenNameCOMMENT_LINE	User may be using older JDK ( JDK <1.2 ). Allow him/her to use it. 
// But don't try to use doPrivileged 	TokenNameCOMMENT_LINE	But don't try to use doPrivileged 
}	TokenNameRBRACE	
return	TokenNamereturn	
null	TokenNamenull	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Creates an empty OutputProperties with the property key/value defaults specified by * a property file. The method argument is used to construct a string of * the form output_[method].properties (for instance, output_html.properties). * The output_xml.properties file is always used as the base. * * <p>Anything other than 'text', 'xml', and 'html', will * use the output_xml.properties file.</p> * * @param method non-null reference to method name. * * @return Properties object that holds the defaults for the given method. */	TokenNameCOMMENT_JAVADOC	 Creates an empty OutputProperties with the property key/value defaults specified by a property file. The method argument is used to construct a string of the form output_[method].properties (for instance, output_html.properties). The output_xml.properties file is always used as the base. * <p>Anything other than 'text', 'xml', and 'html', will use the output_xml.properties file.</p> * @param method non-null reference to method name. * @return Properties object that holds the defaults for the given method. 
static	TokenNamestatic	
public	TokenNamepublic	
final	TokenNamefinal	
Properties	TokenNameIdentifier	 Properties
getDefaultMethodProperties	TokenNameIdentifier	 get Default Method Properties
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
method	TokenNameIdentifier	 method
)	TokenNameRPAREN	
{	TokenNameLBRACE	
String	TokenNameIdentifier	 String
fileName	TokenNameIdentifier	 file Name
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
Properties	TokenNameIdentifier	 Properties
defaultProperties	TokenNameIdentifier	 default Properties
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
// According to this article : Double-check locking does not work 	TokenNameCOMMENT_LINE	According to this article : Double-check locking does not work 
// http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-toolbox.html 	TokenNameCOMMENT_LINE	http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-toolbox.html 
try	TokenNametry	
{	TokenNameLBRACE	
synchronized	TokenNamesynchronized	
(	TokenNameLPAREN	
m_synch_object	TokenNameIdentifier	 m synch object
)	TokenNameRPAREN	
{	TokenNameLBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
null	TokenNamenull	
==	TokenNameEQUAL_EQUAL	
m_xml_properties	TokenNameIdentifier	 m xml properties
)	TokenNameRPAREN	
// double check 	TokenNameCOMMENT_LINE	double check 
{	TokenNameLBRACE	
fileName	TokenNameIdentifier	 file Name
=	TokenNameEQUAL	
PROP_FILE_XML	TokenNameIdentifier	 PROP  FILE  XML
;	TokenNameSEMICOLON	
m_xml_properties	TokenNameIdentifier	 m xml properties
=	TokenNameEQUAL	
loadPropertiesFile	TokenNameIdentifier	 load Properties File
(	TokenNameLPAREN	
fileName	TokenNameIdentifier	 file Name
,	TokenNameCOMMA	
null	TokenNamenull	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
method	TokenNameIdentifier	 method
.	TokenNameDOT	
equals	TokenNameIdentifier	 equals
(	TokenNameLPAREN	
Method	TokenNameIdentifier	 Method
.	TokenNameDOT	
XML	TokenNameIdentifier	 XML
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
defaultProperties	TokenNameIdentifier	 default Properties
=	TokenNameEQUAL	
m_xml_properties	TokenNameIdentifier	 m xml properties
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
else	TokenNameelse	
if	TokenNameif	
(	TokenNameLPAREN	
method	TokenNameIdentifier	 method
.	TokenNameDOT	
equals	TokenNameIdentifier	 equals
(	TokenNameLPAREN	
Method	TokenNameIdentifier	 Method
.	TokenNameDOT	
HTML	TokenNameIdentifier	 HTML
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
null	TokenNamenull	
==	TokenNameEQUAL_EQUAL	
m_html_properties	TokenNameIdentifier	 m html properties
)	TokenNameRPAREN	
// double check 	TokenNameCOMMENT_LINE	double check 
{	TokenNameLBRACE	
fileName	TokenNameIdentifier	 file Name
=	TokenNameEQUAL	
PROP_FILE_HTML	TokenNameIdentifier	 PROP  FILE  HTML
;	TokenNameSEMICOLON	
m_html_properties	TokenNameIdentifier	 m html properties
=	TokenNameEQUAL	
loadPropertiesFile	TokenNameIdentifier	 load Properties File
(	TokenNameLPAREN	
fileName	TokenNameIdentifier	 file Name
,	TokenNameCOMMA	
m_xml_properties	TokenNameIdentifier	 m xml properties
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
defaultProperties	TokenNameIdentifier	 default Properties
=	TokenNameEQUAL	
m_html_properties	TokenNameIdentifier	 m html properties
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
else	TokenNameelse	
if	TokenNameif	
(	TokenNameLPAREN	
method	TokenNameIdentifier	 method
.	TokenNameDOT	
equals	TokenNameIdentifier	 equals
(	TokenNameLPAREN	
Method	TokenNameIdentifier	 Method
.	TokenNameDOT	
TEXT	TokenNameIdentifier	 TEXT
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
null	TokenNamenull	
==	TokenNameEQUAL_EQUAL	
m_text_properties	TokenNameIdentifier	 m text properties
)	TokenNameRPAREN	
// double check 	TokenNameCOMMENT_LINE	double check 
{	TokenNameLBRACE	
fileName	TokenNameIdentifier	 file Name
=	TokenNameEQUAL	
PROP_FILE_TEXT	TokenNameIdentifier	 PROP  FILE  TEXT
;	TokenNameSEMICOLON	
m_text_properties	TokenNameIdentifier	 m text properties
=	TokenNameEQUAL	
loadPropertiesFile	TokenNameIdentifier	 load Properties File
(	TokenNameLPAREN	
fileName	TokenNameIdentifier	 file Name
,	TokenNameCOMMA	
m_xml_properties	TokenNameIdentifier	 m xml properties
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
null	TokenNamenull	
==	TokenNameEQUAL_EQUAL	
m_text_properties	TokenNameIdentifier	 m text properties
.	TokenNameDOT	
getProperty	TokenNameIdentifier	 get Property
(	TokenNameLPAREN	
OutputKeys	TokenNameIdentifier	 Output Keys
.	TokenNameDOT	
ENCODING	TokenNameIdentifier	 ENCODING
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
String	TokenNameIdentifier	 String
mimeEncoding	TokenNameIdentifier	 mime Encoding
=	TokenNameEQUAL	
Encodings	TokenNameIdentifier	 Encodings
.	TokenNameDOT	
getMimeEncoding	TokenNameIdentifier	 get Mime Encoding
(	TokenNameLPAREN	
null	TokenNamenull	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
m_text_properties	TokenNameIdentifier	 m text properties
.	TokenNameDOT	
put	TokenNameIdentifier	 put
(	TokenNameLPAREN	
OutputKeys	TokenNameIdentifier	 Output Keys
.	TokenNameDOT	
ENCODING	TokenNameIdentifier	 ENCODING
,	TokenNameCOMMA	
mimeEncoding	TokenNameIdentifier	 mime Encoding
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
defaultProperties	TokenNameIdentifier	 default Properties
=	TokenNameEQUAL	
m_text_properties	TokenNameIdentifier	 m text properties
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
else	TokenNameelse	
if	TokenNameif	
(	TokenNameLPAREN	
method	TokenNameIdentifier	 method
.	TokenNameDOT	
equals	TokenNameIdentifier	 equals
(	TokenNameLPAREN	
Method	TokenNameIdentifier	 Method
.	TokenNameDOT	
UNKNOWN	TokenNameIdentifier	 UNKNOWN
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
null	TokenNamenull	
==	TokenNameEQUAL_EQUAL	
m_unknown_properties	TokenNameIdentifier	 m unknown properties
)	TokenNameRPAREN	
// double check 	TokenNameCOMMENT_LINE	double check 
{	TokenNameLBRACE	
fileName	TokenNameIdentifier	 file Name
=	TokenNameEQUAL	
PROP_FILE_UNKNOWN	TokenNameIdentifier	 PROP  FILE  UNKNOWN
;	TokenNameSEMICOLON	
m_unknown_properties	TokenNameIdentifier	 m unknown properties
=	TokenNameEQUAL	
loadPropertiesFile	TokenNameIdentifier	 load Properties File
(	TokenNameLPAREN	
fileName	TokenNameIdentifier	 file Name
,	TokenNameCOMMA	
m_xml_properties	TokenNameIdentifier	 m xml properties
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
defaultProperties	TokenNameIdentifier	 default Properties
=	TokenNameEQUAL	
m_unknown_properties	TokenNameIdentifier	 m unknown properties
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
else	TokenNameelse	
{	TokenNameLBRACE	
// TODO: Calculate res file from name. 	TokenNameCOMMENT_LINE	TODO: Calculate res file from name. 
defaultProperties	TokenNameIdentifier	 default Properties
=	TokenNameEQUAL	
m_xml_properties	TokenNameIdentifier	 m xml properties
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
catch	TokenNamecatch	
(	TokenNameLPAREN	
IOException	TokenNameIdentifier	 IO Exception
ioe	TokenNameIdentifier	 ioe
)	TokenNameRPAREN	
{	TokenNameLBRACE	
throw	TokenNamethrow	
new	TokenNamenew	
WrappedRuntimeException	TokenNameIdentifier	 Wrapped Runtime Exception
(	TokenNameLPAREN	
Utils	TokenNameIdentifier	 Utils
.	TokenNameDOT	
messages	TokenNameIdentifier	 messages
.	TokenNameDOT	
createMessage	TokenNameIdentifier	 create Message
(	TokenNameLPAREN	
MsgKey	TokenNameIdentifier	 Msg Key
.	TokenNameDOT	
ER_COULD_NOT_LOAD_METHOD_PROPERTY	TokenNameIdentifier	 ER  COULD  NOT  LOAD  METHOD  PROPERTY
,	TokenNameCOMMA	
new	TokenNamenew	
Object	TokenNameIdentifier	 Object
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
{	TokenNameLBRACE	
fileName	TokenNameIdentifier	 file Name
,	TokenNameCOMMA	
method	TokenNameIdentifier	 method
}	TokenNameRBRACE	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
ioe	TokenNameIdentifier	 ioe
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
// wrap these cached defaultProperties in a new Property object just so 	TokenNameCOMMENT_LINE	wrap these cached defaultProperties in a new Property object just so 
// that the caller of this method can't modify the default values 	TokenNameCOMMENT_LINE	that the caller of this method can't modify the default values 
return	TokenNamereturn	
new	TokenNamenew	
Properties	TokenNameIdentifier	 Properties
(	TokenNameLPAREN	
defaultProperties	TokenNameIdentifier	 default Properties
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Load the properties file from a resource stream. If a * key name such as "org.apache.xslt.xxx", fix up the start of * string to be a curly namespace. If a key name starts with * "xslt.output.xxx", clip off "xslt.output.". If a key name *or* a * key value is discovered, check for :	TokenNameCOMMENT_JAVADOC	 
static	TokenNamestatic	
private	TokenNameprivate	
Properties	TokenNameIdentifier	 Properties
loadPropertiesFile	TokenNameIdentifier	 load Properties File
(	TokenNameLPAREN	
final	TokenNamefinal	
String	TokenNameIdentifier	 String
resourceName	TokenNameIdentifier	 resource Name
,	TokenNameCOMMA	
Properties	TokenNameIdentifier	 Properties
defaults	TokenNameIdentifier	 defaults
)	TokenNameRPAREN	
throws	TokenNamethrows	
IOException	TokenNameIdentifier	 IO Exception
{	TokenNameLBRACE	
// This static method should eventually be moved to a thread-specific class 	TokenNameCOMMENT_LINE	This static method should eventually be moved to a thread-specific class 
// so that we can cache the ContextClassLoader and bottleneck all properties file 	TokenNameCOMMENT_LINE	so that we can cache the ContextClassLoader and bottleneck all properties file 
// loading throughout Xalan. 	TokenNameCOMMENT_LINE	loading throughout Xalan. 
Properties	TokenNameIdentifier	 Properties
props	TokenNameIdentifier	 props
=	TokenNameEQUAL	
new	TokenNamenew	
Properties	TokenNameIdentifier	 Properties
(	TokenNameLPAREN	
defaults	TokenNameIdentifier	 defaults
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
InputStream	TokenNameIdentifier	 Input Stream
is	TokenNameIdentifier	 is
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
BufferedInputStream	TokenNameIdentifier	 Buffered Input Stream
bis	TokenNameIdentifier	 bis
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
try	TokenNametry	
{	TokenNameLBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
ACCESS_CONTROLLER_CLASS	TokenNameIdentifier	 ACCESS  CONTROLLER  CLASS
!=	TokenNameNOT_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
is	TokenNameIdentifier	 is
=	TokenNameEQUAL	
(	TokenNameLPAREN	
InputStream	TokenNameIdentifier	 Input Stream
)	TokenNameRPAREN	
AccessController	TokenNameIdentifier	 Access Controller
.	TokenNameDOT	
doPrivileged	TokenNameIdentifier	 do Privileged
(	TokenNameLPAREN	
new	TokenNamenew	
PrivilegedAction	TokenNameIdentifier	 Privileged Action
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
public	TokenNamepublic	
Object	TokenNameIdentifier	 Object
run	TokenNameIdentifier	 run
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
OutputPropertiesFactory	TokenNameIdentifier	 Output Properties Factory
.	TokenNameDOT	
class	TokenNameclass	
.	TokenNameDOT	
getResourceAsStream	TokenNameIdentifier	 get Resource As Stream
(	TokenNameLPAREN	
resourceName	TokenNameIdentifier	 resource Name
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
else	TokenNameelse	
{	TokenNameLBRACE	
// User may be using older JDK ( JDK < 1.2 ) 	TokenNameCOMMENT_LINE	User may be using older JDK ( JDK < 1.2 ) 
is	TokenNameIdentifier	 is
=	TokenNameEQUAL	
OutputPropertiesFactory	TokenNameIdentifier	 Output Properties Factory
.	TokenNameDOT	
class	TokenNameclass	
.	TokenNameDOT	
getResourceAsStream	TokenNameIdentifier	 get Resource As Stream
(	TokenNameLPAREN	
resourceName	TokenNameIdentifier	 resource Name
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
bis	TokenNameIdentifier	 bis
=	TokenNameEQUAL	
new	TokenNamenew	
BufferedInputStream	TokenNameIdentifier	 Buffered Input Stream
(	TokenNameLPAREN	
is	TokenNameIdentifier	 is
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
props	TokenNameIdentifier	 props
.	TokenNameDOT	
load	TokenNameIdentifier	 load
(	TokenNameLPAREN	
bis	TokenNameIdentifier	 bis
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
catch	TokenNamecatch	
(	TokenNameLPAREN	
IOException	TokenNameIdentifier	 IO Exception
ioe	TokenNameIdentifier	 ioe
)	TokenNameRPAREN	
{	TokenNameLBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
defaults	TokenNameIdentifier	 defaults
==	TokenNameEQUAL_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
throw	TokenNamethrow	
ioe	TokenNameIdentifier	 ioe
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
else	TokenNameelse	
{	TokenNameLBRACE	
throw	TokenNamethrow	
new	TokenNamenew	
WrappedRuntimeException	TokenNameIdentifier	 Wrapped Runtime Exception
(	TokenNameLPAREN	
Utils	TokenNameIdentifier	 Utils
.	TokenNameDOT	
messages	TokenNameIdentifier	 messages
.	TokenNameDOT	
createMessage	TokenNameIdentifier	 create Message
(	TokenNameLPAREN	
MsgKey	TokenNameIdentifier	 Msg Key
.	TokenNameDOT	
ER_COULD_NOT_LOAD_RESOURCE	TokenNameIdentifier	 ER  COULD  NOT  LOAD  RESOURCE
,	TokenNameCOMMA	
new	TokenNamenew	
Object	TokenNameIdentifier	 Object
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
{	TokenNameLBRACE	
resourceName	TokenNameIdentifier	 resource Name
}	TokenNameRBRACE	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
ioe	TokenNameIdentifier	 ioe
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
//"Could not load '"+resourceName+"' (check CLASSPATH), now using just the defaults ", ioe); 	TokenNameCOMMENT_LINE	"Could not load '"+resourceName+"' (check CLASSPATH), now using just the defaults ", ioe); 
}	TokenNameRBRACE	
}	TokenNameRBRACE	
catch	TokenNamecatch	
(	TokenNameLPAREN	
SecurityException	TokenNameIdentifier	 Security Exception
se	TokenNameIdentifier	 se
)	TokenNameRPAREN	
{	TokenNameLBRACE	
// Repeat IOException handling for sandbox/applet case -sc 	TokenNameCOMMENT_LINE	Repeat IOException handling for sandbox/applet case -sc 
if	TokenNameif	
(	TokenNameLPAREN	
defaults	TokenNameIdentifier	 defaults
==	TokenNameEQUAL_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
throw	TokenNamethrow	
se	TokenNameIdentifier	 se
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
else	TokenNameelse	
{	TokenNameLBRACE	
throw	TokenNamethrow	
new	TokenNamenew	
WrappedRuntimeException	TokenNameIdentifier	 Wrapped Runtime Exception
(	TokenNameLPAREN	
Utils	TokenNameIdentifier	 Utils
.	TokenNameDOT	
messages	TokenNameIdentifier	 messages
.	TokenNameDOT	
createMessage	TokenNameIdentifier	 create Message
(	TokenNameLPAREN	
MsgKey	TokenNameIdentifier	 Msg Key
.	TokenNameDOT	
ER_COULD_NOT_LOAD_RESOURCE	TokenNameIdentifier	 ER  COULD  NOT  LOAD  RESOURCE
,	TokenNameCOMMA	
new	TokenNamenew	
Object	TokenNameIdentifier	 Object
[	TokenNameLBRACKET	
]	TokenNameRBRACKET	
{	TokenNameLBRACE	
resourceName	TokenNameIdentifier	 resource Name
}	TokenNameRBRACE	
)	TokenNameRPAREN	
,	TokenNameCOMMA	
se	TokenNameIdentifier	 se
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
//"Could not load '"+resourceName+"' (check CLASSPATH, applet security), now using just the defaults ", se); 	TokenNameCOMMENT_LINE	"Could not load '"+resourceName+"' (check CLASSPATH, applet security), now using just the defaults ", se); 
}	TokenNameRBRACE	
}	TokenNameRBRACE	
finally	TokenNamefinally	
{	TokenNameLBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
bis	TokenNameIdentifier	 bis
!=	TokenNameNOT_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
bis	TokenNameIdentifier	 bis
.	TokenNameDOT	
close	TokenNameIdentifier	 close
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
is	TokenNameIdentifier	 is
!=	TokenNameNOT_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
is	TokenNameIdentifier	 is
.	TokenNameDOT	
close	TokenNameIdentifier	 close
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
// Note that we're working at the HashTable level here, 	TokenNameCOMMENT_LINE	Note that we're working at the HashTable level here, 
// and not at the Properties level! This is important 	TokenNameCOMMENT_LINE	and not at the Properties level! This is important 
// because we don't want to modify the default properties. 	TokenNameCOMMENT_LINE	because we don't want to modify the default properties. 
// NB: If fixupPropertyString ends up changing the property 	TokenNameCOMMENT_LINE	NB: If fixupPropertyString ends up changing the property 
// name or value, we need to remove the old key and re-add 	TokenNameCOMMENT_LINE	name or value, we need to remove the old key and re-add 
// with the new key and value. However, then our Enumeration 	TokenNameCOMMENT_LINE	with the new key and value. However, then our Enumeration 
// could lose its place in the HashTable. So, we first 	TokenNameCOMMENT_LINE	could lose its place in the HashTable. So, we first 
// clone the HashTable and enumerate over that since the 	TokenNameCOMMENT_LINE	clone the HashTable and enumerate over that since the 
// clone will not change. When we migrate to Collections, 	TokenNameCOMMENT_LINE	clone will not change. When we migrate to Collections, 
// this code should be revisited and cleaned up to use 	TokenNameCOMMENT_LINE	this code should be revisited and cleaned up to use 
// an Iterator which may (or may not) alleviate the need for 	TokenNameCOMMENT_LINE	an Iterator which may (or may not) alleviate the need for 
// the clone. Many thanks to Padraig O'hIceadha 	TokenNameCOMMENT_LINE	the clone. Many thanks to Padraig O'hIceadha 
// <padraig@gradient.ie> for finding this problem. Bugzilla 2000. 	TokenNameCOMMENT_LINE	<padraig@gradient.ie> for finding this problem. Bugzilla 2000. 
Enumeration	TokenNameIdentifier	 Enumeration
keys	TokenNameIdentifier	 keys
=	TokenNameEQUAL	
(	TokenNameLPAREN	
(	TokenNameLPAREN	
Properties	TokenNameIdentifier	 Properties
)	TokenNameRPAREN	
props	TokenNameIdentifier	 props
.	TokenNameDOT	
clone	TokenNameIdentifier	 clone
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
.	TokenNameDOT	
keys	TokenNameIdentifier	 keys
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
while	TokenNamewhile	
(	TokenNameLPAREN	
keys	TokenNameIdentifier	 keys
.	TokenNameDOT	
hasMoreElements	TokenNameIdentifier	 has More Elements
(	TokenNameLPAREN	
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
String	TokenNameIdentifier	 String
key	TokenNameIdentifier	 key
=	TokenNameEQUAL	
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
)	TokenNameRPAREN	
keys	TokenNameIdentifier	 keys
.	TokenNameDOT	
nextElement	TokenNameIdentifier	 next Element
(	TokenNameLPAREN	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
// Now check if the given key was specified as a 	TokenNameCOMMENT_LINE	Now check if the given key was specified as a 
// System property. If so, the system property 	TokenNameCOMMENT_LINE	System property. If so, the system property 
// overides the default value in the propery file. 	TokenNameCOMMENT_LINE	overides the default value in the propery file. 
String	TokenNameIdentifier	 String
value	TokenNameIdentifier	 value
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
try	TokenNametry	
{	TokenNameLBRACE	
value	TokenNameIdentifier	 value
=	TokenNameEQUAL	
System	TokenNameIdentifier	 System
.	TokenNameDOT	
getProperty	TokenNameIdentifier	 get Property
(	TokenNameLPAREN	
key	TokenNameIdentifier	 key
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
catch	TokenNamecatch	
(	TokenNameLPAREN	
SecurityException	TokenNameIdentifier	 Security Exception
se	TokenNameIdentifier	 se
)	TokenNameRPAREN	
{	TokenNameLBRACE	
// No-op for sandbox/applet case, leave null -sc 	TokenNameCOMMENT_LINE	No-op for sandbox/applet case, leave null -sc 
}	TokenNameRBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
value	TokenNameIdentifier	 value
==	TokenNameEQUAL_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
value	TokenNameIdentifier	 value
=	TokenNameEQUAL	
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
)	TokenNameRPAREN	
props	TokenNameIdentifier	 props
.	TokenNameDOT	
get	TokenNameIdentifier	 get
(	TokenNameLPAREN	
key	TokenNameIdentifier	 key
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
String	TokenNameIdentifier	 String
newKey	TokenNameIdentifier	 new Key
=	TokenNameEQUAL	
fixupPropertyString	TokenNameIdentifier	 fixup Property String
(	TokenNameLPAREN	
key	TokenNameIdentifier	 key
,	TokenNameCOMMA	
true	TokenNametrue	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
String	TokenNameIdentifier	 String
newValue	TokenNameIdentifier	 new Value
=	TokenNameEQUAL	
null	TokenNamenull	
;	TokenNameSEMICOLON	
try	TokenNametry	
{	TokenNameLBRACE	
newValue	TokenNameIdentifier	 new Value
=	TokenNameEQUAL	
System	TokenNameIdentifier	 System
.	TokenNameDOT	
getProperty	TokenNameIdentifier	 get Property
(	TokenNameLPAREN	
newKey	TokenNameIdentifier	 new Key
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
catch	TokenNamecatch	
(	TokenNameLPAREN	
SecurityException	TokenNameIdentifier	 Security Exception
se	TokenNameIdentifier	 se
)	TokenNameRPAREN	
{	TokenNameLBRACE	
// No-op for sandbox/applet case, leave null -sc 	TokenNameCOMMENT_LINE	No-op for sandbox/applet case, leave null -sc 
}	TokenNameRBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
newValue	TokenNameIdentifier	 new Value
==	TokenNameEQUAL_EQUAL	
null	TokenNamenull	
)	TokenNameRPAREN	
newValue	TokenNameIdentifier	 new Value
=	TokenNameEQUAL	
fixupPropertyString	TokenNameIdentifier	 fixup Property String
(	TokenNameLPAREN	
value	TokenNameIdentifier	 value
,	TokenNameCOMMA	
false	TokenNamefalse	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
else	TokenNameelse	
newValue	TokenNameIdentifier	 new Value
=	TokenNameEQUAL	
fixupPropertyString	TokenNameIdentifier	 fixup Property String
(	TokenNameLPAREN	
newValue	TokenNameIdentifier	 new Value
,	TokenNameCOMMA	
false	TokenNamefalse	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
key	TokenNameIdentifier	 key
!=	TokenNameNOT_EQUAL	
newKey	TokenNameIdentifier	 new Key
||	TokenNameOR_OR	
value	TokenNameIdentifier	 value
!=	TokenNameNOT_EQUAL	
newValue	TokenNameIdentifier	 new Value
)	TokenNameRPAREN	
{	TokenNameLBRACE	
props	TokenNameIdentifier	 props
.	TokenNameDOT	
remove	TokenNameIdentifier	 remove
(	TokenNameLPAREN	
key	TokenNameIdentifier	 key
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
props	TokenNameIdentifier	 props
.	TokenNameDOT	
put	TokenNameIdentifier	 put
(	TokenNameLPAREN	
newKey	TokenNameIdentifier	 new Key
,	TokenNameCOMMA	
newValue	TokenNameIdentifier	 new Value
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
return	TokenNamereturn	
props	TokenNameIdentifier	 props
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Fix up a string in an output properties file according to * the rules of {@link #loadPropertiesFile}. * * @param s non-null reference to string that may need to be fixed up. * @return A new string if fixup occured, otherwise the s argument. */	TokenNameCOMMENT_JAVADOC	 Fix up a string in an output properties file according to the rules of {@link #loadPropertiesFile}. * @param s non-null reference to string that may need to be fixed up. @return A new string if fixup occured, otherwise the s argument. 
static	TokenNamestatic	
private	TokenNameprivate	
String	TokenNameIdentifier	 String
fixupPropertyString	TokenNameIdentifier	 fixup Property String
(	TokenNameLPAREN	
String	TokenNameIdentifier	 String
s	TokenNameIdentifier	 s
,	TokenNameCOMMA	
boolean	TokenNameboolean	
doClipping	TokenNameIdentifier	 do Clipping
)	TokenNameRPAREN	
{	TokenNameLBRACE	
int	TokenNameint	
index	TokenNameIdentifier	 index
;	TokenNameSEMICOLON	
if	TokenNameif	
(	TokenNameLPAREN	
doClipping	TokenNameIdentifier	 do Clipping
&&	TokenNameAND_AND	
s	TokenNameIdentifier	 s
.	TokenNameDOT	
startsWith	TokenNameIdentifier	 starts With
(	TokenNameLPAREN	
S_XSLT_PREFIX	TokenNameIdentifier	 S  XSLT  PREFIX
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
s	TokenNameIdentifier	 s
=	TokenNameEQUAL	
s	TokenNameIdentifier	 s
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
S_XSLT_PREFIX_LEN	TokenNameIdentifier	 S  XSLT  PREFIX  LEN
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
s	TokenNameIdentifier	 s
.	TokenNameDOT	
startsWith	TokenNameIdentifier	 starts With
(	TokenNameLPAREN	
S_XALAN_PREFIX	TokenNameIdentifier	 S  XALAN  PREFIX
)	TokenNameRPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
s	TokenNameIdentifier	 s
=	TokenNameEQUAL	
S_BUILTIN_EXTENSIONS_UNIVERSAL	TokenNameIdentifier	 S  BUILTIN  EXTENSIONS  UNIVERSAL
+	TokenNamePLUS	
s	TokenNameIdentifier	 s
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
S_XALAN_PREFIX_LEN	TokenNameIdentifier	 S  XALAN  PREFIX  LEN
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
if	TokenNameif	
(	TokenNameLPAREN	
(	TokenNameLPAREN	
index	TokenNameIdentifier	 index
=	TokenNameEQUAL	
s	TokenNameIdentifier	 s
.	TokenNameDOT	
indexOf	TokenNameIdentifier	 index Of
(	TokenNameLPAREN	
"\u003a"	TokenNameStringLiteral	\u003a
)	TokenNameRPAREN	
)	TokenNameRPAREN	
>	TokenNameGREATER	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
String	TokenNameIdentifier	 String
temp	TokenNameIdentifier	 temp
=	TokenNameEQUAL	
s	TokenNameIdentifier	 s
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
index	TokenNameIdentifier	 index
+	TokenNamePLUS	
6	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
s	TokenNameIdentifier	 s
=	TokenNameEQUAL	
s	TokenNameIdentifier	 s
.	TokenNameDOT	
substring	TokenNameIdentifier	 substring
(	TokenNameLPAREN	
0	TokenNameIntegerLiteral	
,	TokenNameCOMMA	
index	TokenNameIdentifier	 index
)	TokenNameRPAREN	
+	TokenNamePLUS	
":"	TokenNameStringLiteral	:
+	TokenNamePLUS	
temp	TokenNameIdentifier	 temp
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
return	TokenNamereturn	
s	TokenNameIdentifier	 s
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
