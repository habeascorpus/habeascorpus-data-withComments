This class is responsible for testing VisibleSVM class. @author chiachi 	5 146 1421 203 146 9
A dataset of sequences of examples. @author William Cohen 	6 85 518 15 9 10 11
@author Edoardo Airoldi Date: Nov 24, 2003 	5 9 824 825 70 949
@author Edoardo M. Airoldi Date: Feb 6, 2004 	5 9 824 825 70 2248
convert a set to a string listing the elements 	4 290 29 217 359
This class is responsible for testing nodeToFeature and nodeArrayToInstance functions from SVMUtils class. @author chiachi 	6 146 1421 203 1182 146 9
@author William Cohen @author Quinten Mercer 	6 9 10 11 9 625 626
Wraps an ExtractorAnnotator with some code to implement a simple API. 	4 1044 484 82 393
Random Forests implementation. See http://www.stat.berkeley.edu/~breiman/RandomForests/ For algorith details. @author Alexander Friedman 	9 1012 1308 56 98 1462 1060 9 1285 1286
A group of sliding windows associated with a sequence. <p>In more detail: just as a SequenceDataset holds a set of Example[] objects, a SegmentDataset holds a set of CandidateSegmentGroup objects. Each CandidateSegmentGroup is derived from a sequence of source objects s1....sN. The CandidateSegmentGroup holds an instance for each subsequence of up to K adjacent source objects (the subsequence is called a <i>segment</i>, or a <i>sliding window</i>). Here K is the "maxWindowSize", and N is the "sequenceLength". <p>To illustrate, suppose the original sequence is a,b,c,d,e and K=3. Then the sliding window will hold instances created from these subsequences: a,b,c,d,e,ab,bc,cd,de,abc,bcd,cde. @author William Cohen 	55 411 412 413 136 414 415 416 29 159 417 416 29 418 159 418 419 136 420 159 421 422 418 416 42 423 424 420 159 423 49 425 412 426 427 428 429 430 431 136 412 426 432 31 261 433 434 435 436 437 438 439 440 9 10 11
Implements the teacher's side of the learner-teacher protocol. @author William Cohen 	8 758 4 23 53 5 9 10 11
Unigram Language Model @author William Cohen 	5 1645 763 9 10 11
A set of semisupervised examples available for semi-supervised learning. @author Edoardo Airoldi Date: Mar 15, 2004 	10 29 15 35 36 19 9 824 825 70 586
@author Cameron Williams Date: October 11, 2005 Stores a learned multiClassifier and uses that to predict a multiLabel for each instance. Each label from the multiLabel is then added as a feature to each instance. 	15 9 86 87 70 1636 67 1537 1843 1278 42 48 1278 166 404 42
Implements the Listwise Ranking algorithm proposed at: Learning to Rank: From Pairwise Approach to Listwise Approach, ICML 2007. Zhe Cao, Tao Qin, Tie-Yan Liu, Ming-Feng Tsai, Hang Li. Only works for binary relevance levels (i.e., revelant vs non-revevant) @author Vitor R. Carvalho 	12 758 339 119 1565 19 326 2234 654 333 9 1093 1094
SVMClassifier wrapps the prediction code from the libsvm library for binary or multi-class problems. A SVMClassifier must be built from a model, using the svm_model class from libsvm. This is best done by running the learner. <br> <br> Note that due to the way libsvm computes probabilities you may get different predictions for the same instance if you turn on probabilities compared to when you leave it turned off. See the libsvm home page for more details. @author qcm, Frank Lin 	28 1072 484 1803 1135 333 1715 146 2293 763 1846 146 1803 2125 23 24 1803 1014 105 42 1137 1014 1432 1670 1803 1649 1060 9 177

Generate many copies of a ClassifierLearner. @author William Cohen 	6 712 1878 820 9 10 11
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	14 548 221 201 606 607 364 608 212 349 998 2516 9 10 11
Defines the list of classes that can be selected by an instance of UIMain. 	6 1339 234 833 347 42 1736
@author Edoardo M. Airoldi Date: Feb 6, 2004 	5 9 824 825 70 2248
A subset of another TextLabels. @author William Cohen 	5 196 222 9 10 11
Trains a StackedClassifierLearner using the information in a labeled relational Dataset. @author Zhenzhen Kou 	8 83 69 50 1200 85 9 937 938
Created on Sep 26, 2005 @author Vitor R. Carvalho Passive Aggressive algorithm as described in "Online Passive Agressive Algorithms" Cramer, Dekel, Shalev-Shwartz, Singer, NIPS 2003. Classification mode. Additionally, it implements optionally a voting scheme. (voted parameter) 	20 261 1948 9 1093 1094 2066 1977 119 1936 2066 126 566 1863 1930 758 2236 1309 515 213 1118
Main UI program. With enough support to make it configurable interactively, by command lines, or by a file. 	10 1367 1063 550 186 21 157 768 174 246 223
Helper class for splitting up iterators over Examples, by class. @author Edoardo Airoldi Date: Dec 8, 2003 	11 314 146 967 509 15 146 9 824 825 70 2080
Multi-class version of a binary classifier. Puts classifiers in order of ones with the most positive examples first. @author Cameron Williams 	12 1715 146 212 333 1 1345 652 218 15 9 86 87
Naive Bayes algorithm. If feature weights are word counts then this implements the usual multinomial naive Bayes. If feature weights are presence/absence this implements binomial naive Bayes. @author William Cohen 	19 2326 2327 119 404 1254 1034 726 758 2326 2327 404 1254 758 2129 2326 2327 9 10 11
An inverted index, mapping features to examples which contain the features. @author William Cohen 	8 259 616 143 15 143 9 10 11
Wrap a hyperplane to that it supports the Instance interface. 	4 2424 1978 42 185
Apply a serialized annotator. @author William Cohen 	6 1028 227 456 9 10 11
This class... @author ksteppe 	3 146 9 156
Abstract implementation of a SpanFinder. @author William Cohen 	5 819 56 9 10 11
Provides some basic utilities for dealing with libsvm. It can convert Features to nodes, instances to node arrays and Datasets to problems. @author ksteppe, Frank Lin 	12 498 970 1803 290 143 31 528 806 208 9 156 177
Batch version of an OnlineClassifierLearner. @author William Cohen 	6 823 212 2123 9 10 11
Interface for something that trains multi label classifiers. @author Cameron Williams 	8 185 83 1715 48 1345 9 86 87
@author Edoardo Airoldi Date: Mar 15, 2004 	5 9 824 825 70 586
This class is responsible for... @author ksteppe 	4 146 1421 9 156
A sequence classifier that can report on the confidence associated with any subsequence of a sequential classification. @author William Cohen 	10 136 1 974 1057 423 117 566 9 10 11
An annotator that uses a learned Classifier to mark up document spans. 	6 456 67 1 2470 202 201
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a stacked batch learner. @author Zhenzhen Kou 	13 819 820 821 53 23 5 82 88 823 23 9 937 938
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. Polynomial kernel is implemented: K(x,y) = (coef0+gamma*<x,y>)^d Both "voted" and "averaged" modes are implemented (unnormalized). Poly degree = 0 means that no kernel is used. Therefore, mode "averaged" with degree=0 should be equivalent to results in VotedPerceptron.java (file with a faster implementation of the averaged nonnormalized perceptron) @author Vitor Carvalho 	30 213 118 119 1167 1967 566 118 119 1646 19 124 2260 2128 213 1974 2260 1038 1863 1974 1251 65 570 448 223 56 1974 118 9 1093 1094
Creates Features, and maintains a mapping between Features and numeric ids. Also ensures that only a single feature instance exists with a particular name. 	12 441 143 615 616 143 1440 527 1441 637 404 42 1203
Learn from examples a GraphSearcher that re-ranks examples based on scores from a learned classifier. 	7 0 15 15 90 1870 67 1
A set of examples for learning. @author William Cohen 	6 29 15 19 9 10 11
A dataset which supports random access to the examples. @author William Cohen 	7 85 1012 1672 15 9 10 11
A more space-efficient version of a CandidateSegmentGroup. Space is saved by explicitly storing the instances for the unit-length segments, plus "deltas" for each non-unit length segment. Each "delta" encodes the difference between the segment instance and the sum of the unit-length instances it covers. @author William Cohen 	25 1758 514 212 418 1758 229 31 480 255 1249 480 255 425 780 2300 154 425 42 2396 480 255 31 9 10 11
View result of some sort of train/test experiment for Data with Multiple Labels. @author Cameron Williams 	12 548 600 300 112 209 406 28 72 147 9 86 87
This class is responsible for... @author ksteppe 	4 146 1421 9 156
Some sample inputs for learners. @author William Cohen 	6 984 408 7 9 10 11
Learn an Annotator from AnnotationExample's. @author William Cohen 	6 0 456 2061 9 10 11
Multi-class version of a binary classifier. @author William Cohen 	8 1715 146 212 333 1 9 10 11
Abstract class which implements the 'getBinaryClassifier' method of BinaryClassifierLearner's. @author William Cohen 	7 819 146 758 79 9 10 11
This class is responsible for... @author ksteppe 	4 146 1421 9 156
Allows one to adjust the parameters of a learned extractor. @author William Cohen 	7 1889 1384 67 928 9 10 11
Generic implementation of an annotator. @author William Cohen 	6 211 56 456 9 10 11
A generative Model for word-counts based on the Poisson Distribution. @author Edoardo Airoldi 	9 763 1034 726 90 1016 1114 9 824 825
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author Cameron Williams 	13 42 399 758 42 185 42 835 150 48 410 9 86 87
Main UI program for the 'classify' package. @author William Cohen 	8 1367 1063 550 1368 755 9 10 11
@author William Cohen 	3 9 10 11
Do a train/test experiment for word taggers. @author William Cohen 	7 112 209 406 1034 9 10 11
A Classifier which associates instances with a real number. Positive numbers indicate a positive class, negative numbers indicate a negative class. @author William Cohen 	15 1 31 116 505 218 973 218 146 337 973 337 146 9 10 11
Evaluate a classifier as a ranker 	2 968 1
Trains a SequenceClassifierLearner using the information in a labeled Dataset. @author William Cohen 	8 83 1862 69 50 85 9 10 11
Train a CMM (in batch mode). @author William Cohen 	6 112 823 1863 9 10 11
@author Edoardo Airoldi Date: Nov 14, 2004 	5 9 824 825 70 949
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a standard on-line learner. @author William Cohen 	13 819 820 821 53 23 5 82 822 78 23 9 10 11
Online version of a BatchClassifierLearner. @author William Cohen 	5 1936 212 9 10 11
Identifies a particular substring of a particular document. @author William Cohen 	5 1096 202 9 10 11
View an object after passing it through a transformation. @author William cohen 	7 548 75 1560 2386 9 10 11
@author William Cohen 	3 9 10 11
Stores some detailed results of evaluating a classifier on data. @author William Cohen 	7 1109 65 1 28 9 10 11
Interface for a multi label classifier. @author Cameron Williams 	7 185 1715 48 1 9 86 87
@author William Cohen Date: Nov 21, 2003 	5 9 10 11 70 949
This class is responsible for... @author ksteppe 	4 146 1421 9 156
Tokenize a document 	2 653 202
Sequential learner based on the perceptron algorithm that takes the top-k viterbi paths and subtracts those within a margin of beta of the correct. * @author Sunita Sarawagi 	14 117 23 90 118 119 648 553 137 1967 2490 731 9 759 760
Trivial annotator used as test case. 	4 55 456 209 77
Records results of evaluating an extraction-learning system. @author William Cohen 	7 65 574 19 479 9 10 11
Utilities for reflection. 	1 970
Created on Sep 22, 2005 @author Vitor R. Carvalho Balanced Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Notation and some implementation details from "Mistake-Driven Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997 Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	49 261 1948 9 1093 1094 1949 1950 119 19 1960 1961 1962 1963 1287 1293 119 1964 1965 19 2483 56 1060 1969 1970 19 368 1416 1971 1972 1973 129 1930 758 1596 143 741 15 724 2484 1967 1009 1967 1118 2236 328 1309 515 213 1118
Main UI program for the 'classify' package. @author William Cohen 	8 1367 1063 550 1368 755 9 10 11
package 	1 755
A weighted combination of features. @author William Cohen 	6 1259 1288 143 9 10 11
An annotator that uses a learned extractor to mark up document spans. 	6 456 67 928 2470 202 201
Defines the list of classes that can be selected by an instance of UIMain. 	6 1339 234 833 347 42 1736
@author Edoardo Airoldi Date: Nov 24, 2003 	5 9 824 825 70 949
This set of tests checks out the basic functionality of the TextBase class hierarchy. It tests loading documents, querying for its properties, creating document spans, document span loopers, etc. @author Quinten Mercer 	20 29 481 1342 498 1424 257 146 2438 481 158 287 172 1442 202 201 202 183 9 625 626
Learns to first transforming data with an InstanceTransform, then classify it. @author William Cohen 	8 325 1884 28 1638 328 9 10 11
Interface for OnlineLearner. Allows you to add to a learner by specifying a string rather than a Span. Can return a TextClassifier, which scores a String rather than a span. @author Cameron Williams 	13 185 134 23 217 183 46 1361 1870 217 183 9 86 87
A single instance for a learner. This is basically a weighted set of features. @author William Cohen 	10 637 42 23 1910 1259 29 143 9 10 11
Modify a textlabeling using a series of mixup expressions. <pre> BNF: STATEMENT -> declareSpanType TYPE STATEMENT -> provide ID STATEMENT -> require ID [,FILE] STATEMENT -> annotateWith FILE STATEMENT -> defDict [+case] NAME = ID, ... , ID STATEMENT -> defTokenProp PROP:VALUE = GEN STATEMENT -> defSpanProp PROP:VALUE = GEN STATEMENT -> defSpanType TYPE2 = GEN STATEMENT -> defLevel NAME = LEVELDEF STATEMENT -> onLevel NAME STATEMENT -> offLevel NAME STATEMENT -> importFromLevel NAME TYPE = TYPE LEVELDEF -> filter TYPE LEVELDEF -> pseudotoken TYPE LEVELDEF -> split TOKEN LEVELDEF -> re 'REGEX' GEN -> [TYPE]: MIXUP-EXPR GEN -> [TYPE]- MIXUP-EXPR GEN -> [TYPE]~ re 'REGEX',NUMBER GEN -> [TYPE]~ trie phrase1, phrase2, ... ; statements are semicolon-separated // and comments look like this (C++ style) SEMANTICS: execute each command in order, saving spans/tokens as types, and asserting properties '=:' can be replaced with '=TYPE:', in which case the expr will be applied to each span of the given type, rather than all top-level spans defDict FOO = bar,baz,bat stores a lowercase version of each word the dictionary defDict +case FOO = blah,Bar,baZ stores each word the dictionary, preserving case in dictionaries and tries, a double-quoted word "foo.txt" means to find foo.txt on the classpath and store all lines from the file as words (after trimming them). TYPE: MIXUP-EXPR finds all spans inside a span of type TYPE that match the expression TYPE- MIXUP-EXPR finds all spans inside a span of type TYPE that do not contain anything matching MIXUP-EXPR </pre> <p> Mixup is matching language for modifying TextLabels. It can label spans with a given TYPE (the new label for that token span) and assign properties to spans (much like labels, but 'invisible'). There is more documentation for Mixup programs in the <a href="package-summary.html">package-level documents for Mixup.</a> <p> Briefly, a Mixup program will look something like this: <pre> require "req1"; //requires that "abc" type spans have already been labeled. If not, the default annoator //for "abc" will be used. require "req2", "req2.mixup"; //file 'def.mixup' will be run to provide "def" labels if they are not already there //if "def" labels were already generated by a different annotator, they will be used and //and 'def.mixup' won't be called. provide "xyz"; //this program will annotate the text with "xyz" labels defDict titleWord = mr, ms, mrs, dr; //defines a dictionary (with scope of this program execution called 'titleWord' //containing the values "mr", "ms", "mrs", "dr" defDict myDictionary = "dictionary.txt"; //defines a dictionary called 'myDictionary' with values taken from the file "dictionary.txt" defTokenProp title:true =: ... [ai(titleWord)] ... ; //finds all spans matching a work in the dictionary titleWord //those spans are given the property "Name" with value "true" (a string, not boolean) //if the span previously had "Name" property with a different value, that is replaced // the "..." before and after indicate that it doesn't matter what comes before or after the token //to be labeled. if I said "=: [ai(titleWord)];" the document would need to be JUST a titleword. defTokenProp titlePunc:1 =: ... title:true [','] ... || ... title:true ['.'] ... ; //spans "." or "," preceeded by a title are given the property titlePunc with value "1" //note that the entire '... title:true [','] ...' is an expression; or operators ("||") must be //<em> between</em> expressions, not within them defSpanType fullTitle =: ...[title:true titlePunc:1?R] ...; //label a span as "fullTitle" if there is a title span optionally followed b a titlePunc span //but not more than one (from the R) defSpanType the =: ... [eqi('the')] ...; //labels occurances of "the" ignoring case (eq = equals, adding i ignores case) defTokenProp aProp:t =: ...[<title:true, req1>] ...; /tokens which have the title=true property AND are labeled as req1 //are given the property aProp=t defTokenProp address:x =: ... [@fullTitle any] !a(myDictionary) ...; //label spans of one 'fullTitle' (the @ is needed //before types) and the following token, whatever it is, // which are followed by something other than a myDictionary word defTokenProp capProp:on =req2: ... [re('^[A-Z]$')] ...; //on spans of type req2, match tokens fitting the given regular expression defSpanType listSet =: ... [address+R] ...; //label as header spans of 1 or more address tokens, going all the way to //right most possible token - example: blah address1 address2 address3 blah // - will return three spans: "address3", "address2 address3", and "address1 address2 address3" defSpanType adList =: ... [L address+ R] ...; //as above but only returns the longest span defSpanType header =: [L address* R] ...; //label longest span of 0 or more address tokens at the beginning of the document defSpanType shortList =: ... [address{2,3}] ...; //label spans of 2 or 3 address tokens defSpanType xyz =header: ...[capProp] ...; //providing the promised xyz labeling //creates a new level where each document is a span with spanType defLevel newLevel = filter spanType; //creates a new level where tokens of spanType are combined into a single token defLevel newLevel = pseudotoken spanType; //creates a new level where the textBase is retokenized by splitting a a certain token defLevel newLevel = split '.'; //create a new level where the textBase is retokenized using a regular expression defLevel newLevel = re '([^\n]+)'; //switches current textBase and Labels to Level onLevel levelName; //returns to root (or original) level - levelName is the name of the child level which you are switching off offLevel childLevelName; //Imports spans of Type in the child level to spans of newType in the parent level importFromLevel childLevelName newType = type; </pre> @author William Cohen 	302 2302 2208 459 1091 2450 235 2450 54 191 2450 467 191 223 2450 223 2450 77 191 191 2450 2450 2450 2450 2450 2450 2450 235 235 622 235 2448 235 109 182 235 459 235 459 235 505 235 522 2445 462 1929 2533 174 652 881 201 519 228 172 285 235 77 1161 183 235 553 617 201 502 1582 1605 212 1034 1782 77 502 1582 1605 1034 1782 77 962 1034 502 181 1038 215 502 181 470 694 246 223 1025 235 459 662 201 1236 183 235 235 529 2459 235 459 662 201 1236 183 235 235 516 459 459 516 1645 247 222 48 201 235 48 182 183 172 201 147 1812 459 755 617 287 459 459 550 467 1652 438 235 201 50 273 438 467 459 223 993 54 147 147 2393 456 49 54 550 1056 368 147 1339 1782 550 49 955 1782 181 1339 1782 49 955 223 1782 181 1576 44 662 201 516 495 1782 201 160 44 217 630 183 2478 160 285 494 182 50 202 1576 44 1576 44 201 1576 160 24 297 1576 44 2459 1091 1576 44 48 183 1576 183 2236 183 147 180 77 2280 874 501 1273 77 519 1576 44 160 50 160 48 201 405 228 182 1034 201 235 529 519 1090 2459 48 201 519 182 46 201 16 183 48 183 519 270 202 48 201 519 243 441 617 202 183 673 622 673 441 617 519 673 2446 637 182 2448 673 441 617 257 672 967 182 109 111 617 257 672 1090 2459 138 257 147 617 16 162 431 617 635 617 2406 201 235 635 617 201 660 617 235 9 10 11
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	14 548 221 201 606 607 364 608 212 349 998 2516 9 10 11
Created on Sep 21, 2005 @author Vitor R. Carvalho Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Some implementation details also described in: Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997. Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	45 261 1948 9 1093 1094 1950 119 19 1960 1961 1962 1963 1287 1293 119 1964 1965 19 56 1060 19 368 1416 1971 1972 1973 129 1930 758 1596 143 741 15 724 2484 1967 1009 1967 1118 2236 328 1309 515 213 1118
@author Edoardo Airoldi Date: Dec 5, 2003 	5 9 824 825 70 2080
Annotate substrings that are legal URLs. @author William Cohen 	6 1056 1402 1340 9 10 11
Run an annotation-learning experiment based on pre-labeled text. @author William Cohen 	11 993 921 19 406 90 1795 50 368 9 10 11
Implements the teacher's side of the learner-teacher protocol for SGM. @author Zhenzhen Kou 	8 758 4 23 53 5 9 937 938
Helper class for splitting up iterators over Instances @author William Cohen 	8 314 146 967 509 31 9 10 11
for (int j=0; j<hmm.nstate; j++) { for (int i=0; i<b.length; i++) out.print(HMM.fmtlog(b[i][j])); out.println(); } } 	1 534
This class is responsible for... @author ksteppe 	4 146 1421 9 156
A span that is a subset of another span @author Cameron Williams 	6 183 196 183 9 86 87
Interactivly edit document spans. @author William Cohen 	7 844 845 202 201 9 10 11
Interface for something that learns sequence classifiers. @author William Cohen 	7 185 325 136 1345 9 10 11
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. @author William Cohen 	14 213 118 119 1167 1967 566 118 119 1646 19 124 9 10 11
Wraps JFreeChart's XY line graph capability. @author William cohen 	5 1044 78 9 10 11
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author William Cohen 	13 42 399 758 42 185 42 835 150 48 410 9 10 11
Tokenize a string. 	2 653 217
{ printa(out); printe(out); } public void printa(Output out) { out.println("Transition probabilities:"); for (int i=1; i<nstate; i++) { for (int j=1; j<nstate; j++) out.print(fmtlog(loga[i][j])); out.println(); } } 	7 313 319 343 750 1528 1014 534
Dataset i/o. For ordinary datasets, format is one example per line, and the format for a line is: <pre> <code>type subpopid label feature1 feature2 ...</code> </pre>where <ul> <li>type=b or k (for binary or ordinary examples) <li>subpopid is NUL or a string, naming the subpopulation from which the example was drawn <li>label is +1 or -1 for binary <li>features are a feature name (for binary features) and a featureName=value for numeric features. </ul> For example: <code> k subpop1 2 f1=4 fOrange=1 fGreen=92 ... k subpop1 1 f1=1 fBlue=10 fGreen=2 ... k subpop2 3 f1=2 fYellow=1 fRed=42 ... </code> or <code> b NUL +1 f1=2 fOrange=1 fGreen=92 ... b NUL -1 f1=1 fBlue=10 fGreen=2 ... </code> or <code> k subpop1 2 f1 fOrange fGreen ... k subpop1 1 f1 fBlue fGreen ... k subpop2 3 f1 fYellow fRed ... </code> For SequenceDatasets, examples from a diffrerent sequence are separated by a single line containing a "*". @author William Cohen 	31 85 332 208 280 78 280 78 235 333 332 15 217 188 189 48 333 143 404 333 143 1102 1440 143 15 136 462 637 78 9 10 11
