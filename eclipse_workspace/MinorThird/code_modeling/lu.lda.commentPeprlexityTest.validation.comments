This class is responsible for testing VisibleSVM class. @author chiachi 	4 65 1150 65 9490
A dataset of sequences of examples. @author William Cohen 	4 2182 1090 6422 9490
@author Edoardo Airoldi Date: Nov 24, 2003 	2 9490 1394
@author Edoardo M. Airoldi Date: Feb 6, 2004 	3 9490 1394 5315
convert a set to a string listing the elements 	5 7017 242 243 14990 1635
This class is responsible for testing nodeToFeature and nodeArrayToInstance functions from SVMUtils class. @author chiachi 	5 65 1150 9347 65 9490
@author William Cohen @author Quinten Mercer 	2 9490 9490
Wraps an ExtractorAnnotator with some code to implement a simple API. 	5 870 511 1105 1029 664
Random Forests implementation. See http://www.stat.berkeley.edu/~breiman/RandomForests/ For algorith details. @author Alexander Friedman 	7 90 1098 25 26 10395 819 9490
A group of sliding windows associated with a sequence. <p>In more detail: just as a SequenceDataset holds a set of Example[] objects, a SegmentDataset holds a set of CandidateSegmentGroup objects. Each CandidateSegmentGroup is derived from a sequence of source objects s1....sN. The CandidateSegmentGroup holds an instance for each subsequence of up to K adjacent source objects (the subsequence is called a <i>segment</i>, or a <i>sliding window</i>). Here K is the "maxWindowSize", and N is the "sequenceLength". <p>To illustrate, suppose the original sequence is a,b,c,d,e and K=3. Then the sliding window will hold instances created from these subsequences: a,b,c,d,e,ab,bc,cd,de,abc,bcd,cde. @author William Cohen 	40 5935 2246 908 12958 2016 242 2244 2016 242 2244 14802 908 1071 2244 12756 2016 899 8105 1089 1071 2244 8105 341 99 7310 9003 9258 807 908 7310 2024 980 150 7639 11014 8625 10755 7640 8095 9490
Implements the teacher's side of the learner-teacher protocol. @author William Cohen 	4 928 6612 7929 9490
Unigram Language Model @author William Cohen 	3 39 2533 9490
A set of semisupervised examples available for semi-supervised learning. @author Edoardo Airoldi Date: Mar 15, 2004 	4 242 6422 9490 1394
@author Cameron Williams Date: October 11, 2005 Stores a learned multiClassifier and uses that to predict a multiLabel for each instance. Each label from the multiLabel is then added as a feature to each instance. 	8 9490 1394 1814 899 502 1097 10262 899
Implements the Listwise Ranking algorithm proposed at: Learning to Rank: From Pairwise Approach to Listwise Approach, ICML 2007. Zhe Cao, Tao Qin, Tie-Yan Liu, Ming-Feng Tsai, Hang Li. Only works for binary relevance levels (i.e., revelant vs non-revevant) @author Vitor R. Carvalho 	12 928 1793 6554 6861 6861 7041 11914 1790 5456 5316 7666 9490
SVMClassifier wrapps the prediction code from the libsvm library for binary or multi-class problems. A SVMClassifier must be built from a model, using the svm_model class from libsvm. This is best done by running the learner. <br> <br> Note that due to the way libsvm computes probabilities you may get different predictions for the same instance if you turn on probabilities compared to when you leave it turned off. See the libsvm home page for more details. @author qcm, Frank Lin 	22 511 12690 5456 5776 65 2232 7128 2533 65 2401 149 1636 8743 899 411 6602 9783 8742 2673 7297 819 9490

Generate many copies of a ClassifierLearner. @author William Cohen 	3 1149 6797 9490
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	13 134 320 8699 579 56 1799 2292 21 8133 2125 119 120 9490
Defines the list of classes that can be selected by an instance of UIMain. 	5 6004 197 885 12454 899
@author Edoardo M. Airoldi Date: Feb 6, 2004 	3 9490 1394 5315
A subset of another TextLabels. @author William Cohen 	2 938 9490
Trains a StackedClassifierLearner using the information in a labeled relational Dataset. @author Zhenzhen Kou 	3 17 2182 9490
Created on Sep 26, 2005 @author Vitor R. Carvalho Passive Aggressive algorithm as described in "Online Passive Agressive Algorithms" Cramer, Dekel, Shalev-Shwartz, Singer, NIPS 2003. Classification mode. Additionally, it implements optionally a voting scheme. (voted parameter) 	10 150 9490 1793 7029 1876 10242 928 799 2665 2325
Main UI program. With enough support to make it configurable interactively, by command lines, or by a file. 	7 2390 895 117 12313 8712 10406 13
Helper class for splitting up iterators over Examples, by class. @author Edoardo Airoldi Date: Dec 8, 2003 	8 5641 65 1163 6422 65 9490 1394 13157
Multi-class version of a binary classifier. Puts classifiers in order of ones with the most positive examples first. @author Cameron Williams 	9 5776 65 21 5456 15151 868 7060 6422 9490
Naive Bayes algorithm. If feature weights are word counts then this implements the usual multinomial naive Bayes. If feature weights are presence/absence this implements binomial naive Bayes. @author William Cohen 	12 1793 10262 6608 1657 5861 928 5288 10262 6608 13025 928 9490
An inverted index, mapping features to examples which contain the features. @author William Cohen 	7 10758 4 2221 12344 6422 12344 9490
Wrap a hyperplane to that it supports the Instance interface. 	4 864 2287 899 6586
Apply a serialized annotator. @author William Cohen 	3 1671 2111 9490
This class... @author ksteppe 	2 65 9490
Abstract implementation of a SpanFinder. @author William Cohen 	3 822 1098 9490
Provides some basic utilities for dealing with libsvm. It can convert Features to nodes, instances to node arrays and Datasets to problems. @author ksteppe, Frank Lin 	9 6044 7017 12344 9618 980 494 824 2232 9490
Batch version of an OnlineClassifierLearner. @author William Cohen 	3 9026 21 9490
Interface for something that trains multi label classifiers. @author Cameron Williams 	4 6586 5776 502 9490
@author Edoardo Airoldi Date: Mar 15, 2004 	2 9490 1394
This class is responsible for... @author ksteppe 	2 65 9490
A sequence classifier that can report on the confidence associated with any subsequence of a sequential classification. @author William Cohen 	5 908 2156 8105 8459 9490
An annotator that uses a learned Classifier to mark up document spans. 	3 957 49 579
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a stacked batch learner. @author Zhenzhen Kou 	6 822 2477 7929 1105 9026 9490
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. Polynomial kernel is implemented: K(x,y) = (coef0+gamma*<x,y>)^d Both "voted" and "averaged" modes are implemented (unnormalized). Poly degree = 0 means that no kernel is used. Therefore, mode "averaged" with degree=0 should be equivalent to results in VotedPerceptron.java (file with a faster implementation of the averaged nonnormalized perceptron) @author Vitor Carvalho 	18 1793 813 7312 1793 9446 964 1056 1056 7520 806 1876 1768 657 44 13 1639 1098 9490
Creates Features, and maintains a mapping between Features and numeric ids. Also ensures that only a single feature instance exists with a particular name. 	12 863 12344 1987 2221 12344 1223 875 1051 935 10262 899 101
Learn from examples a GraphSearcher that re-ranks examples based on scores from a learned classifier. 	5 12239 6422 6422 951 628
A set of examples for learning. @author William Cohen 	3 242 6422 9490
A dataset which supports random access to the examples. @author William Cohen 	6 2182 2287 90 834 6422 9490
A more space-efficient version of a CandidateSegmentGroup. Space is saved by explicitly storing the instances for the unit-length segments, plus "deltas" for each non-unit length segment. Each "delta" encodes the difference between the segment instance and the sum of the unit-length instances it covers. @author William Cohen 	25 1585 1609 21 1585 5552 5338 7911 980 1087 365 363 1087 365 99 9393 6680 1960 99 899 6611 1087 365 980 1839 9490
View result of some sort of train/test experiment for Data with Multiple Labels. @author Cameron Williams 	9 134 595 1189 154 12237 148 697 2708 9490
This class is responsible for... @author ksteppe 	2 65 9490
Some sample inputs for learners. @author William Cohen 	3 430 9696 9490
Learn an Annotator from AnnotationExample's. @author William Cohen 	2 12239 9490
Multi-class version of a binary classifier. @author William Cohen 	5 5776 65 21 5456 9490
Abstract class which implements the 'getBinaryClassifier' method of BinaryClassifierLearner's. @author William Cohen 	5 822 65 928 921 9490
This class is responsible for... @author ksteppe 	2 65 9490
Allows one to adjust the parameters of a learned extractor. @author William Cohen 	3 5743 1353 9490
Generic implementation of an annotator. @author William Cohen 	3 1797 1098 9490
A generative Model for word-counts based on the Poisson Distribution. @author Edoardo Airoldi 	6 2533 1657 5861 951 1845 9490
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author Cameron Williams 	11 899 928 899 6586 12965 896 899 1060 502 1000 9490
Main UI program for the 'classify' package. @author William Cohen 	3 2390 0 9490
@author William Cohen 	1 9490
Do a train/test experiment for word taggers. @author William Cohen 	4 154 12237 1657 9490
A Classifier which associates instances with a real number. Positive numbers indicate a positive class, negative numbers indicate a negative class. @author William Cohen 	12 980 711 456 7060 1868 7060 65 1147 1868 1147 65 9490
Evaluate a classifier as a ranker 	1 2543
Trains a SequenceClassifierLearner using the information in a labeled Dataset. @author William Cohen 	3 17 2182 9490
Train a CMM (in batch mode). @author William Cohen 	3 9026 1876 9490
@author Edoardo Airoldi Date: Nov 14, 2004 	2 9490 1394
Abstract ClassifierLearner which instantiates the teacher-learner protocol so as to implement a standard on-line learner. @author William Cohen 	7 822 2477 7929 1105 992 1389 9490
Online version of a BatchClassifierLearner. @author William Cohen 	2 21 9490
Identifies a particular substring of a particular document. @author William Cohen 	3 2141 49 9490
View an object after passing it through a transformation. @author William cohen 	4 134 1579 983 9490
@author William Cohen 	1 9490
Stores some detailed results of evaluating a classifier on data. @author William Cohen 	5 1814 1825 657 148 9490
Interface for a multi label classifier. @author Cameron Williams 	4 6586 5776 502 9490
@author William Cohen Date: Nov 21, 2003 	2 9490 1394
This class is responsible for... @author ksteppe 	2 65 9490
Tokenize a document 	2 6198 49
Sequential learner based on the perceptron algorithm that takes the top-k viterbi paths and subtracts those within a margin of beta of the correct. * @author Sunita Sarawagi 	9 8459 951 1793 315 2017 13004 7312 371 9490
Trivial annotator used as test case. 	3 6011 154 514
Records results of evaluating an extraction-learning system. @author William Cohen 	5 1843 657 2440 159 9490
Utilities for reflection. 	1 7109
Created on Sep 22, 2005 @author Vitor R. Carvalho Balanced Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Notation and some implementation details from "Mistake-Driven Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997 Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	27 150 9490 1793 12233 5181 6859 871 1793 1883 12062 1098 819 94 10242 928 2499 12344 5790 6422 855 1091 7312 7312 2325 799 2665 2325
Main UI program for the 'classify' package. @author William Cohen 	3 2390 0 9490
package 	1 0
A weighted combination of features. @author William Cohen 	3 6855 12344 9490
An annotator that uses a learned extractor to mark up document spans. 	3 957 49 579
Defines the list of classes that can be selected by an instance of UIMain. 	5 6004 197 885 12454 899
@author Edoardo Airoldi Date: Nov 24, 2003 	2 9490 1394
This set of tests checks out the basic functionality of the TextBase class hierarchy. It tests loading documents, querying for its properties, creating document spans, document span loopers, etc. @author Quinten Mercer 	18 242 661 692 6044 1160 65 7740 661 10542 85 1862 7120 1032 49 579 49 1617 9490
Learns to first transforming data with an InstanceTransform, then classify it. @author William Cohen 	2 148 9490
Interface for OnlineLearner. Allows you to add to a learner by specifying a string rather than a Span. Can return a TextClassifier, which scores a String rather than a span. @author Cameron Williams 	9 6586 84 243 1617 260 628 243 1617 9490
A single instance for a learner. This is basically a weighted set of features. @author William Cohen 	6 935 899 13513 242 12344 9490
Modify a textlabeling using a series of mixup expressions. <pre> BNF: STATEMENT -> declareSpanType TYPE STATEMENT -> provide ID STATEMENT -> require ID [,FILE] STATEMENT -> annotateWith FILE STATEMENT -> defDict [+case] NAME = ID, ... , ID STATEMENT -> defTokenProp PROP:VALUE = GEN STATEMENT -> defSpanProp PROP:VALUE = GEN STATEMENT -> defSpanType TYPE2 = GEN STATEMENT -> defLevel NAME = LEVELDEF STATEMENT -> onLevel NAME STATEMENT -> offLevel NAME STATEMENT -> importFromLevel NAME TYPE = TYPE LEVELDEF -> filter TYPE LEVELDEF -> pseudotoken TYPE LEVELDEF -> split TOKEN LEVELDEF -> re 'REGEX' GEN -> [TYPE]: MIXUP-EXPR GEN -> [TYPE]- MIXUP-EXPR GEN -> [TYPE]~ re 'REGEX',NUMBER GEN -> [TYPE]~ trie phrase1, phrase2, ... ; statements are semicolon-separated // and comments look like this (C++ style) SEMANTICS: execute each command in order, saving spans/tokens as types, and asserting properties '=:' can be replaced with '=TYPE:', in which case the expr will be applied to each span of the given type, rather than all top-level spans defDict FOO = bar,baz,bat stores a lowercase version of each word the dictionary defDict +case FOO = blah,Bar,baZ stores each word the dictionary, preserving case in dictionaries and tries, a double-quoted word "foo.txt" means to find foo.txt on the classpath and store all lines from the file as words (after trimming them). TYPE: MIXUP-EXPR finds all spans inside a span of type TYPE that match the expression TYPE- MIXUP-EXPR finds all spans inside a span of type TYPE that do not contain anything matching MIXUP-EXPR </pre> <p> Mixup is matching language for modifying TextLabels. It can label spans with a given TYPE (the new label for that token span) and assign properties to spans (much like labels, but 'invisible'). There is more documentation for Mixup programs in the <a href="package-summary.html">package-level documents for Mixup.</a> <p> Briefly, a Mixup program will look something like this: <pre> require "req1"; //requires that "abc" type spans have already been labeled. If not, the default annoator //for "abc" will be used. require "req2", "req2.mixup"; //file 'def.mixup' will be run to provide "def" labels if they are not already there //if "def" labels were already generated by a different annotator, they will be used and //and 'def.mixup' won't be called. provide "xyz"; //this program will annotate the text with "xyz" labels defDict titleWord = mr, ms, mrs, dr; //defines a dictionary (with scope of this program execution called 'titleWord' //containing the values "mr", "ms", "mrs", "dr" defDict myDictionary = "dictionary.txt"; //defines a dictionary called 'myDictionary' with values taken from the file "dictionary.txt" defTokenProp title:true =: ... [ai(titleWord)] ... ; //finds all spans matching a work in the dictionary titleWord //those spans are given the property "Name" with value "true" (a string, not boolean) //if the span previously had "Name" property with a different value, that is replaced // the "..." before and after indicate that it doesn't matter what comes before or after the token //to be labeled. if I said "=: [ai(titleWord)];" the document would need to be JUST a titleword. defTokenProp titlePunc:1 =: ... title:true [','] ... || ... title:true ['.'] ... ; //spans "." or "," preceeded by a title are given the property titlePunc with value "1" //note that the entire '... title:true [','] ...' is an expression; or operators ("||") must be //<em> between</em> expressions, not within them defSpanType fullTitle =: ...[title:true titlePunc:1?R] ...; //label a span as "fullTitle" if there is a title span optionally followed b a titlePunc span //but not more than one (from the R) defSpanType the =: ... [eqi('the')] ...; //labels occurances of "the" ignoring case (eq = equals, adding i ignores case) defTokenProp aProp:t =: ...[<title:true, req1>] ...; /tokens which have the title=true property AND are labeled as req1 //are given the property aProp=t defTokenProp address:x =: ... [@fullTitle any] !a(myDictionary) ...; //label spans of one 'fullTitle' (the @ is needed //before types) and the following token, whatever it is, // which are followed by something other than a myDictionary word defTokenProp capProp:on =req2: ... [re('^[A-Z]$')] ...; //on spans of type req2, match tokens fitting the given regular expression defSpanType listSet =: ... [address+R] ...; //label as header spans of 1 or more address tokens, going all the way to //right most possible token - example: blah address1 address2 address3 blah // - will return three spans: "address3", "address2 address3", and "address1 address2 address3" defSpanType adList =: ... [L address+ R] ...; //as above but only returns the longest span defSpanType header =: [L address* R] ...; //label longest span of 0 or more address tokens at the beginning of the document defSpanType shortList =: ... [address{2,3}] ...; //label spans of 2 or 3 address tokens defSpanType xyz =header: ...[capProp] ...; //providing the promised xyz labeling //creates a new level where each document is a span with spanType defLevel newLevel = filter spanType; //creates a new level where tokens of spanType are combined into a single token defLevel newLevel = pseudotoken spanType; //creates a new level where the textBase is retokenized by splitting a a certain token defLevel newLevel = split '.'; //create a new level where the textBase is retokenized using a regular expression defLevel newLevel = re '([^\n]+)'; //switches current textBase and Labels to Level onLevel levelName; //returns to root (or original) level - levelName is the name of the child level which you are switching off offLevel childLevelName; //Imports spans of Type in the child level to spans of newType in the parent level importFromLevel childLevelName newType = type; </pre> @author William Cohen 	321 1569 1167 11958 2534 1009 2534 2009 191 2534 458 191 13 2534 13 2534 514 191 191 2534 353 2534 353 2534 353 2534 2534 2534 2534 1009 1009 1244 1009 1009 1067 201 353 1009 353 1009 353 1009 456 353 1009 1773 10111 11761 9832 10418 2249 545 8712 868 2444 579 996 1860 9811 7120 1044 1009 514 145 1617 1009 2017 5290 579 652 1995 10021 1814 1099 21 1657 8466 514 652 724 1995 10021 1814 1657 8466 6803 514 713 1691 1657 652 6401 806 703 652 6401 53 10406 13 1014 1009 7944 579 1613 1617 1009 1009 1066 5274 1009 7944 579 1613 1617 1009 1009 2573 2573 39 2151 502 579 1009 502 201 1617 5886 7120 579 2708 10577 12662 0 5290 85 458 14337 1055 7640 1009 579 762 7640 458 14338 14338 13 14671 221 2009 14671 2708 14671 2708 1386 14671 1113 341 2009 94 2708 15223 1881 6004 8466 2044 341 1145 15223 1881 8466 6401 6004 8466 341 1145 13 8466 6401 1676 164 7944 579 2573 15 8466 579 8321 164 243 71 1617 144 8321 1044 1678 1679 201 49 1676 164 1676 164 579 1676 8321 149 7950 1676 164 5274 1676 164 502 1617 1676 1617 799 1617 2708 1510 514 253 6939 5826 514 996 1676 164 8321 14337 8321 495 502 579 791 1860 201 1657 14338 579 1009 14338 1066 996 5273 5274 495 502 9759 579 495 996 201 724 724 260 579 495 543 1617 9759 495 502 1617 495 996 1162 49 495 502 579 495 996 9759 1984 863 5290 49 1617 8781 1244 863 5290 996 6935 935 201 8781 863 5290 1163 201 8781 1067 92 5290 5273 5274 8781 15268 139 2708 5290 543 7383 807 5290 5747 5290 9100 579 1009 5747 5290 579 10566 7735 5290 10566 1009 9490
View the contents of a bunch of spans, using the util.gui.Viewer framework. <p> Hopefully this will evolve into a cleaner version of the TextBaseViewer, TextBaseEditor, etc suite. It replaces an earlier attempt, the SpanLooperViewer. @author William Cohen 	13 134 320 8699 579 56 1799 2292 21 8133 2125 119 120 9490
Created on Sep 21, 2005 @author Vitor R. Carvalho Winnow algorithm as described in "Learning Quickly when Irrelevant Attributes Abound: a new linear-threshold algorithm", N. Littlestone, Machine Learning, 1988. Some implementation details also described in: Learning in Text Categorization", I. Dagan, Y. Karov, D. Roth, EMNLP, 1997. Additionally, it implements 2 optional features: (a) update when examples don't satisfy a margin requirement (margin parameter) (b) optionally, classify with a voting scheme. (voted parameter) 	26 150 9490 1793 12233 5181 6859 871 1793 1883 1098 819 94 10242 928 2499 12344 5790 6422 855 1091 7312 7312 2325 799 2665 2325
@author Edoardo Airoldi Date: Dec 5, 2003 	3 9490 1394 13157
Annotate substrings that are legal URLs. @author William Cohen 	3 11912 6200 9490
Run an annotation-learning experiment based on pre-labeled text. @author William Cohen 	6 221 12237 951 5516 94 9490
Implements the teacher's side of the learner-teacher protocol for SGM. @author Zhenzhen Kou 	4 928 6612 7929 9490
Helper class for splitting up iterators over Instances @author William Cohen 	5 5641 65 1163 980 9490
for (int j=0; j<hmm.nstate; j++) { for (int i=0; i<b.length; i++) out.print(HMM.fmtlog(b[i][j])); out.println(); } } 	1 93
This class is responsible for... @author ksteppe 	2 65 9490
A span that is a subset of another span @author Cameron Williams 	4 1617 938 1617 9490
Interactivly edit document spans. @author William Cohen 	4 1388 49 579 9490
Interface for something that learns sequence classifiers. @author William Cohen 	3 6586 908 9490
Voted perceptron algorithm. As described in "Large Margin Classification Using the Perceptron Algorithm", Yoav Freund and Robert E. Schapire, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, 1998. @author William Cohen 	7 1793 813 7312 1793 9446 964 9490
Wraps JFreeChart's XY line graph capability. @author William cohen 	5 870 1389 9153 9004 9490
An instance that is associated with a ClassLabel. Implements the Instance interface by delegating to a wrapped Instance, so subclasses just need to attach the right label construct. @author William Cohen 	11 899 928 899 6586 12965 896 899 1060 502 1000 9490
Tokenize a string. 	2 6198 243
{ printa(out); printe(out); } public void printa(Output out) { out.println("Transition probabilities:"); for (int i=1; i<nstate; i++) { for (int j=1; j<nstate; j++) out.print(fmtlog(loga[i][j])); out.println(); } } 	6 64 69 503 237 2714 93
Dataset i/o. For ordinary datasets, format is one example per line, and the format for a line is: <pre> <code>type subpopid label feature1 feature2 ...</code> </pre>where <ul> <li>type=b or k (for binary or ordinary examples) <li>subpopid is NUL or a string, naming the subpopulation from which the example was drawn <li>label is +1 or -1 for binary <li>features are a feature name (for binary features) and a featureName=value for numeric features. </ul> For example: <code> k subpop1 2 f1=4 fOrange=1 fGreen=92 ... k subpop1 1 f1=1 fBlue=10 fGreen=2 ... k subpop2 3 f1=2 fYellow=1 fRed=42 ... </code> or <code> b NUL +1 f1=2 fOrange=1 fGreen=92 ... b NUL -1 f1=1 fBlue=10 fGreen=2 ... </code> or <code> k subpop1 2 f1 fOrange fGreen ... k subpop1 1 f1 fBlue fGreen ... k subpop2 3 f1 fYellow fRed ... </code> For SequenceDatasets, examples from a diffrerent sequence are separated by a single line containing a "*". @author William Cohen 	25 2182 940 1389 940 1389 1009 5456 6422 6065 243 10537 502 5456 12344 10262 5456 12344 1223 12344 6422 908 9832 935 1389 9490
