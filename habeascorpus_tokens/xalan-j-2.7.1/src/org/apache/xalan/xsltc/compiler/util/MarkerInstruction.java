/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements. See the NOTICE file * distributed with this work for additional information * regarding copyright ownership. The ASF licenses this file * to you under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */	TokenNameCOMMENT_BLOCK	 Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at * http://www.apache.org/licenses/LICENSE-2.0 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
/* * $Id$ */	TokenNameCOMMENT_BLOCK	 $Id$ 
package	TokenNamepackage	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
xalan	TokenNameIdentifier	 xalan
.	TokenNameDOT	
xsltc	TokenNameIdentifier	 xsltc
.	TokenNameDOT	
compiler	TokenNameIdentifier	 compiler
.	TokenNameDOT	
util	TokenNameIdentifier	 util
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
DataOutputStream	TokenNameIdentifier	 Data Output Stream
;	TokenNameSEMICOLON	
import	TokenNameimport	
java	TokenNameIdentifier	 java
.	TokenNameDOT	
io	TokenNameIdentifier	 io
.	TokenNameDOT	
IOException	TokenNameIdentifier	 IO Exception
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
bcel	TokenNameIdentifier	 bcel
.	TokenNameDOT	
Constants	TokenNameIdentifier	 Constants
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
bcel	TokenNameIdentifier	 bcel
.	TokenNameDOT	
generic	TokenNameIdentifier	 generic
.	TokenNameDOT	
ConstantPoolGen	TokenNameIdentifier	 Constant Pool Gen
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
bcel	TokenNameIdentifier	 bcel
.	TokenNameDOT	
generic	TokenNameIdentifier	 generic
.	TokenNameDOT	
Instruction	TokenNameIdentifier	 Instruction
;	TokenNameSEMICOLON	
import	TokenNameimport	
org	TokenNameIdentifier	 org
.	TokenNameDOT	
apache	TokenNameIdentifier	 apache
.	TokenNameDOT	
bcel	TokenNameIdentifier	 bcel
.	TokenNameDOT	
generic	TokenNameIdentifier	 generic
.	TokenNameDOT	
Visitor	TokenNameIdentifier	 Visitor
;	TokenNameSEMICOLON	
/** * A special abstract dummy subclass of * {@link org.apache.bcel.generic.Instruction} used to mark locations of * interest in an {@link org.apache.bcel.generic.InstructionList}. It and * its subclasses are only used as placeholders, and do not contribute to the * actual byte code instruction stream. */	TokenNameCOMMENT_JAVADOC	 A special abstract dummy subclass of {@link org.apache.bcel.generic.Instruction} used to mark locations of interest in an {@link org.apache.bcel.generic.InstructionList}. It and its subclasses are only used as placeholders, and do not contribute to the actual byte code instruction stream. 
abstract	TokenNameabstract	
class	TokenNameclass	
MarkerInstruction	TokenNameIdentifier	 Marker Instruction
extends	TokenNameextends	
Instruction	TokenNameIdentifier	 Instruction
{	TokenNameLBRACE	
/** * Zero-argument constructor. Sets the opcode to an invalid value and * sets the length to zero, as it will not be written as part of the * generated byte code. */	TokenNameCOMMENT_JAVADOC	 Zero-argument constructor. Sets the opcode to an invalid value and sets the length to zero, as it will not be written as part of the generated byte code. 
public	TokenNamepublic	
MarkerInstruction	TokenNameIdentifier	 Marker Instruction
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
super	TokenNamesuper	
(	TokenNameLPAREN	
Constants	TokenNameIdentifier	 Constants
.	TokenNameDOT	
UNDEFINED	TokenNameIdentifier	 UNDEFINED
,	TokenNameCOMMA	
(	TokenNameLPAREN	
short	TokenNameshort	
)	TokenNameRPAREN	
0	TokenNameIntegerLiteral	
)	TokenNameRPAREN	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * {@link org.apache.bcel.generic.Visitor}s will know nothing about this * kind of {@link org.apche.bcel.generic.Instruction}, so this method does * nothing. */	TokenNameCOMMENT_JAVADOC	 {@link org.apache.bcel.generic.Visitor}s will know nothing about this kind of {@link org.apche.bcel.generic.Instruction}, so this method does nothing. 
public	TokenNamepublic	
void	TokenNamevoid	
accept	TokenNameIdentifier	 accept
(	TokenNameLPAREN	
Visitor	TokenNameIdentifier	 Visitor
v	TokenNameIdentifier	 v
)	TokenNameRPAREN	
{	TokenNameLBRACE	
}	TokenNameRBRACE	
/** * The number of JVM stack entries consumed by the instruction. * This instruction is just a place holder, so it does not consume any * stack entries. * @param cpg The {@link org.apache.bcel.generic.ConstantPoolGen} for the * current {@link org.apache.bcel.generic.ClassGen} * @return <code>0</code> always */	TokenNameCOMMENT_JAVADOC	 The number of JVM stack entries consumed by the instruction. This instruction is just a place holder, so it does not consume any stack entries. @param cpg The {@link org.apache.bcel.generic.ConstantPoolGen} for the current {@link org.apache.bcel.generic.ClassGen} @return <code>0</code> always 
final	TokenNamefinal	
public	TokenNamepublic	
int	TokenNameint	
consumeStack	TokenNameIdentifier	 consume Stack
(	TokenNameLPAREN	
ConstantPoolGen	TokenNameIdentifier	 Constant Pool Gen
cpg	TokenNameIdentifier	 cpg
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
0	TokenNameIntegerLiteral	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * The number of JVM stack entries produced by the instruction. * This instruction is just a place holder, so it does not produce any * stack entries. * @param cpg The {@link org.apache.bcel.generic.ConstantPoolGen} for the * current {@link org.apache.bcel.generic.ClassGen} * @return <code>0</code> always */	TokenNameCOMMENT_JAVADOC	 The number of JVM stack entries produced by the instruction. This instruction is just a place holder, so it does not produce any stack entries. @param cpg The {@link org.apache.bcel.generic.ConstantPoolGen} for the current {@link org.apache.bcel.generic.ClassGen} @return <code>0</code> always 
final	TokenNamefinal	
public	TokenNamepublic	
int	TokenNameint	
produceStack	TokenNameIdentifier	 produce Stack
(	TokenNameLPAREN	
ConstantPoolGen	TokenNameIdentifier	 Constant Pool Gen
cpg	TokenNameIdentifier	 cpg
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
0	TokenNameIntegerLiteral	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Produce a copy of the instruction. By default a * {@link MarkerInstruction} has no parameters, so the base implementation * of {@link #copy()} returns the instruction itself. * @return The instruction itself. */	TokenNameCOMMENT_JAVADOC	 Produce a copy of the instruction. By default a {@link MarkerInstruction} has no parameters, so the base implementation of {@link #copy()} returns the instruction itself. @return The instruction itself. 
public	TokenNamepublic	
Instruction	TokenNameIdentifier	 Instruction
copy	TokenNameIdentifier	 copy
(	TokenNameLPAREN	
)	TokenNameRPAREN	
{	TokenNameLBRACE	
return	TokenNamereturn	
this	TokenNamethis	
;	TokenNameSEMICOLON	
}	TokenNameRBRACE	
/** * Dump instruction as byte code to stream out. A {@link MarkerInstruction} * has no effect on the generated byte code so it is never emitted to the * output stream. * @param out Output stream */	TokenNameCOMMENT_JAVADOC	 Dump instruction as byte code to stream out. A {@link MarkerInstruction} has no effect on the generated byte code so it is never emitted to the output stream. @param out Output stream 
final	TokenNamefinal	
public	TokenNamepublic	
void	TokenNamevoid	
dump	TokenNameIdentifier	 dump
(	TokenNameLPAREN	
DataOutputStream	TokenNameIdentifier	 Data Output Stream
out	TokenNameIdentifier	 out
)	TokenNameRPAREN	
throws	TokenNamethrows	
IOException	TokenNameIdentifier	 IO Exception
{	TokenNameLBRACE	
}	TokenNameRBRACE	
}	TokenNameRBRACE	
